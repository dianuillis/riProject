<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 17:59:15[mciao0827] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<system  confidence="0.9511911446218017" wordnetid="104377057">
<header>
<title>File system</title>
<id>1010280</id>
<revision>
<id>243971418</id>
<timestamp>2008-10-08T19:51:41Z</timestamp>
<contributor>
<username>Mdd</username>
<id>113850</id>
</contributor>
</revision>
<categories>
<category>Computer file systems</category>
<category>Articles with specifically-marked weasel-worded phrases</category>
</categories>
</header>
<bdy>

For library and office filing systems, see <link xlink:type="simple" xlink:href="../328/18328.xml">
Library classification</link>.<p>

In <link xlink:type="simple" xlink:href="../213/5213.xml">
computing</link>, a <b>file system</b> (often also written as <b>filesystem</b>) is a method for storing and organizing <link xlink:type="simple" xlink:href="../077/7077.xml">
computer file</link>s and the data they contain to make it easy to find and access them. File systems may use a <link xlink:type="simple" xlink:href="../174/28174.xml">
data storage device</link> such as a <link xlink:type="simple" xlink:href="../777/13777.xml">
hard disk</link> or <recording wordnetid="104063868" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<sound_recording wordnetid="104262678" confidence="0.8">
<memory_device wordnetid="103744840" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<phonograph_record wordnetid="103924069" confidence="0.8">
<medium wordnetid="106254669" confidence="0.8">
<link xlink:type="simple" xlink:href="../902/18959902.xml">
CD-ROM</link></medium>
</phonograph_record>
</device>
</memory_device>
</sound_recording>
</instrumentality>
</artifact>
</recording>
 and involve maintaining the physical location of the files, they might provide access to data on a file server by acting as clients for a <link xlink:type="simple" xlink:href="../770/630770.xml">
network protocol</link> (e.g., <message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<link xlink:type="simple" xlink:href="../252/51252.xml">
NFS</link></rule>
</direction>
</protocol>
</message>
, <message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<link xlink:type="simple" xlink:href="../873/349873.xml">
SMB</link></rule>
</direction>
</protocol>
</message>
, or <message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<link xlink:type="simple" xlink:href="../452/683452.xml">
9P</link></rule>
</direction>
</protocol>
</message>
 clients), or they may be virtual and exist only as an access method for virtual data (e.g., <link xlink:type="simple" xlink:href="../577/1773577.xml">
procfs</link>).</p>
<p>

More formally, a file system is a special-purpose <link xlink:type="simple" xlink:href="../377/8377.xml">
database</link> for the storage, hierarchical organization, manipulation, navigation, access, and retrieval of <link xlink:type="simple" xlink:href="../040/18985040.xml">
data</link>.</p>

<sec>
<st>
 Aspects of file systems </st>
<p>

The most familiar file systems make use of an underlying <link xlink:type="simple" xlink:href="../174/28174.xml">
data storage device</link> that offers access to an array of fixed-size <link xlink:type="simple" xlink:href="../667/313667.xml">
block</link>s, sometimes called <it>sectors</it>, generally a <link xlink:type="simple" xlink:href="../948/376948.xml">
power of 2</link> in size (512 <link xlink:type="simple" xlink:href="../365/3365.xml">
byte</link>s or 1, 2, or 4 <link xlink:type="simple" xlink:href="../755/149755.xml">
KiB</link> are most common). The file system software is responsible for organizing these sectors into <link xlink:type="simple" xlink:href="../077/7077.xml">
files</link> and <link xlink:type="simple" xlink:href="../027/5515027.xml">
directories</link>, and keeping track of which sectors belong to which file and which are not being used. Most file systems address data in fixed-sized units called "<system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../189/2906189.xml">
clusters</link></instrumentality>
</artifact>
</system>
" or "<link xlink:type="simple" xlink:href="../667/313667.xml">
block</link>s" which contain a certain number of <link xlink:type="simple" xlink:href="../684/8168684.xml">
disk sector</link>s (usually 1-64). This is the smallest logical amount of disk space that can be allocated to hold a file.</p>
<p>

However, file systems need not make use of a storage device at all. A file system can be used to organize and represent access to any data, whether it be stored or dynamically generated (e.g., <link xlink:type="simple" xlink:href="../577/1773577.xml">
procfs</link>).</p>

<ss1>
<st>
 File names </st>
<p>

Whether the file system has an underlying storage device or not, file systems typically have directories which associate <b><link xlink:type="simple" xlink:href="../542/351542.xml">
file names</link></b> with files, usually by connecting the file name to an index in a <link xlink:type="simple" xlink:href="../045/53045.xml">
file allocation table</link> of some sort, such as the <link xlink:type="simple" xlink:href="../045/53045.xml">
FAT</link> in a <link xlink:type="simple" xlink:href="../146/8146.xml">
DOS</link> file system, or an <link xlink:type="simple" xlink:href="../170/580170.xml">
inode</link> in a <family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../815/31815.xml">
Unix-like</link></family>
 file system. Directory structures may be flat, or allow hierarchies where directories may contain subdirectories. In some file systems, file names are structured, with special syntax for <link xlink:type="simple" xlink:href="../957/147957.xml">
filename extension</link>s and version numbers. In others, file names are simple strings, and per-file <link xlink:type="simple" xlink:href="../632/18933632.xml">
metadata</link> is stored elsewhere.</p>

</ss1>
<ss1>
<st>
 Metadata </st>
<p>

Other bookkeeping information is typically associated with each file within a file system. The <link xlink:type="simple" xlink:href="../327/2608327.xml">
length</link> of the data contained in a file may be stored as the number of blocks allocated for the file or as an exact <link xlink:type="simple" xlink:href="../365/3365.xml">
byte</link> count. The <link xlink:type="simple" xlink:href="../070/6613070.xml">
time</link> that the file was last modified may be stored as the file's timestamp. Some file systems also store the file creation time, the time it was last accessed, and the time that the file's meta-data was changed. (Note that many early <link xlink:type="simple" xlink:href="../137/18457137.xml">
PC</link> operating systems did not keep track of file times.) Other information can include the file's <link xlink:type="simple" xlink:href="../986/18016986.xml">
device type</link> (e.g., <link>
block, character</link>, <link xlink:type="simple" xlink:href="../218/4764218.xml">
socket</link>, <link xlink:type="simple" xlink:href="../027/5515027.xml">
subdirectory</link>, etc.), its owner <link xlink:type="simple" xlink:href="../990/16301990.xml">
user-ID</link> and <link xlink:type="simple" xlink:href="../286/4359286.xml">
group-ID</link>, and its <link xlink:type="simple" xlink:href="../955/1347955.xml">
access permission</link> settings (e.g., whether the file is read-only, <link xlink:type="simple" xlink:href="../392/217392.xml">
executable</link>, etc.).</p>
<p>

Arbitrary attributes can be associated on advanced file systems, such as <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../203/34203.xml">
XFS</link></instrumentality>
</artifact>
</system>
, <link xlink:type="simple" xlink:href="../194/39194.xml">
ext2</link>/<link xlink:type="simple" xlink:href="../195/39195.xml">
ext3</link>, some versions of <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../992/250992.xml">
UFS</link></instrumentality>
</artifact>
</system>
, and <link xlink:type="simple" xlink:href="../752/927752.xml">
HFS+</link>, using <link xlink:type="simple" xlink:href="../936/3461936.xml">
extended file attributes</link>. This feature is implemented in the kernels of <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../510/18510.xml">
Linux</link></software>
, <platform wordnetid="103961939" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<surface wordnetid="104362025" confidence="0.8">
<horizontal_surface wordnetid="103536348" confidence="0.8">
<link xlink:type="simple" xlink:href="../554/7580554.xml">
FreeBSD</link></horizontal_surface>
</surface>
</artifact>
</platform>
 and <link xlink:type="simple" xlink:href="../640/20640.xml">
Mac OS X</link> operating systems, and allows metadata to be associated with the file at the <it>file system</it> level. This, for example, could be the author of a document, the character encoding of a plain-text document, or a checksum.</p>

</ss1>
<ss1>
<st>
 Hierarchical file systems </st>
<p>

The hierarchical file system was an early research interest of <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../218/8218.xml">
Dennis Ritchie</link></scientist>
</person>
 of Unix fame; previous implementations were restricted to only a few levels, notably the IBM implementations, even of their early databases like IMS. After the success of Unix, Ritchie extended the file system concept to every object in his later operating system developments, such as <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../226/24226.xml">
Plan 9</link></O>
 and <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../928/507928.xml">
Inferno</link></O>
.</p>

</ss1>
<ss1>
<st>
 Facilities </st>
<p>

Traditional file systems offer facilities to create, move and delete both files and directories. They lack facilities to create additional links to a directory (<link xlink:type="simple" xlink:href="../957/496957.xml">
hard link</link>s in <family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../642/31642.xml">
Unix</link></family>
), rename parent links (".." in <family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../815/31815.xml">
Unix-like</link></family>
 OS), and create bidirectional links to files.</p>
<p>

Traditional file systems also offer facilities to truncate, append to, create, move, delete and in-place modify files. They do not offer facilities to <link>
prepend</link> to or truncate from the beginning of a file, let alone arbitrary insertion into or deletion from a file. The operations provided are highly asymmetric and lack the generality to be useful in unexpected contexts. For example, interprocess <link xlink:type="simple" xlink:href="../117/1236117.xml">
pipes</link> in <family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../642/31642.xml">
Unix</link></family>
 have to be implemented outside of the file system because the pipes concept does not offer <link xlink:type="simple" xlink:href="../056/229056.xml">
truncation</link> from the beginning of files.</p>

</ss1>
<ss1>
<st>
 Secure access </st>
<p>

Secure access to basic file system operations can be based on a scheme of <link xlink:type="simple" xlink:href="../589/61589.xml">
access control list</link>s or <link xlink:type="simple" xlink:href="../717/539717.xml">
capabilities</link>. Research has shown access control lists to be difficult to secure properly, which is why research operating systems tend to use capabilities. Commercial file systems still use access control lists. <it>see: <link xlink:type="simple" xlink:href="../398/7398.xml">
secure computing</link></it></p>

</ss1>
</sec>
<sec>
<st>
Types of file systems</st>
<p>

File system types can be classified into disk file systems, network file systems and special purpose file systems.</p>

<ss1>
<st>
 Disk file systems </st>
<p>

A <it>disk file system</it> is a file system designed for the storage of <link xlink:type="simple" xlink:href="../077/7077.xml">
files</link> on a <link xlink:type="simple" xlink:href="../174/28174.xml">
data storage device</link>, most commonly a <link xlink:type="simple" xlink:href="../472/Species_8472.xml">
disk drive</link>, which might be directly or indirectly connected to the computer. Examples of disk file systems include <link xlink:type="simple" xlink:href="../045/53045.xml">
FAT</link> (FAT12, FAT16, FAT32), <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../184/39184.xml">
NTFS</link></instrumentality>
</artifact>
</system>
, <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../347/55347.xml">
HFS</link></instrumentality>
</artifact>
</system>
 and <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../752/927752.xml">
HFS+</link></instrumentality>
</artifact>
</system>
, <link xlink:type="simple" xlink:href="../194/39194.xml">
ext2</link>, <link xlink:type="simple" xlink:href="../195/39195.xml">
ext3</link>, <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<standard wordnetid="107260623" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../145/15145.xml">
ISO 9660</link></system_of_measurement>
</standard>
</instrumentality>
</artifact>
</system>
, <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../539/711539.xml">
ODS-5</link></instrumentality>
</artifact>
</system>
, and <idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<standard wordnetid="107260623" confidence="0.8">
<component wordnetid="105868954" confidence="0.8">
<part wordnetid="105867413" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../627/49627.xml">
UDF</link></system_of_measurement>
</part>
</component>
</standard>
</concept>
</idea>
.
Some disk file systems are <link xlink:type="simple" xlink:href="../073/48073.xml">
journaling file system</link>s or <link xlink:type="simple" xlink:href="../496/1440496.xml">
versioning file system</link>s.</p>

</ss1>
<ss1>
<st>
 Flash file systems </st>

<p>

A <it>flash file system</it> is a file system designed for storing <link xlink:type="simple" xlink:href="../077/7077.xml">
files</link> on <link xlink:type="simple" xlink:href="../595/50595.xml">
flash memory</link> devices. These are becoming more prevalent as the number of mobile devices is increasing, and the capacity of flash memories catches up with hard drives.</p>
<p>

While a <link>
block device</link> layer can emulate a disk drive so that a disk file system can be used on a flash device, this is suboptimal for several reasons:
<list>
<entry level="1" type="bullet">

 Erasing blocks: Flash memory blocks have to be explicitly erased before they can be written to. The time taken to erase blocks can be significant, thus it is beneficial to erase unused blocks while the device is idle.</entry>
<entry level="1" type="bullet">

 <information wordnetid="105816287" confidence="0.8">
<datum wordnetid="105816622" confidence="0.8">
<link xlink:type="simple" xlink:href="../612/25612.xml">
Random access</link></datum>
</information>
: Disk file systems are optimized to avoid <link xlink:type="simple" xlink:href="../192/28192.xml">
disk seek</link>s whenever possible, due to the high cost of seeking. Flash memory devices impose no seek latency.</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../505/343505.xml">
Wear levelling</link>: Flash memory devices tend to wear out when a single block is repeatedly overwritten; flash file systems are designed to spread out writes evenly.</entry>
</list>
</p>
<p>

<point wordnetid="108620061" confidence="0.8">
<system wordnetid="104377057" confidence="0.8">
<geographic_point wordnetid="108578706" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<location wordnetid="100027167" confidence="0.8">
<workplace wordnetid="104602044" confidence="0.8">
<lab wordnetid="103629986" confidence="0.8">
<link xlink:type="simple" xlink:href="../096/359096.xml">
Log-structured file system</link></lab>
</workplace>
</location>
</instrumentality>
</artifact>
</geographic_point>
</system>
</point>
s have all the desirable properties for a flash file system. Such file systems include <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../219/1991219.xml">
JFFS2</link></instrumentality>
</artifact>
</system>
 and <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../370/2704370.xml">
YAFFS</link></instrumentality>
</artifact>
</system>
.</p>

</ss1>
<ss1>
<st>
 Database file systems </st>
<p>

A new concept for file management is the concept of a database-based file system. Instead of, or in addition to, hierarchical structured management, files are identified by their characteristics, like type of file, topic, author, or similar <link xlink:type="simple" xlink:href="../632/18933632.xml">
metadata</link>.
</p>
</ss1>
<ss1>
<st>
 Transactional file systems </st>

<p>

Each disk operation may involve changes to a number of different files and disk structures. In many cases, these changes are related, meaning that it is important that they all be executed at the same time. Take for example a bank sending another bank some money electronically. The bank's computer will "send" the transfer instruction to the other bank and also update its own records to indicate the transfer has occurred. If for some reason the computer crashes before it has had a chance to update its own records, then on reset, there will be no record of the transfer but the bank will be missing some money.</p>
<p>

<link xlink:type="simple" xlink:href="../409/212409.xml">
Transaction processing</link> introduces the guarantee that at any point while it is running, a transaction can either be finished completely or reverted completely (though not necessarily both at any given point). This means that if there is a crash or power failure, after recovery, the stored state will be consistent.  (Either the money will be transferred or it will not be transferred, but it won't ever go missing "in transit".)</p>
<p>

This type of file system is designed to be fault tolerant, but may incur additional overhead to do so.</p>
<p>

<system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../073/48073.xml">
Journaling file system</link></instrumentality>
</artifact>
</system>
s are one technique used to introduce transaction-level consistency to filesystem structures.</p>

</ss1>
<ss1>
<st>
 Network file systems </st>

<p>

<indent level="1">

<it>Main article: <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../477/598477.xml">
Network file system</link></instrumentality>
</artifact>
</system>
</it>
</indent>

A network file system is a file system that acts as a client for a remote file access protocol, providing access to files on a server. Examples of network file systems include clients for the <message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<link xlink:type="simple" xlink:href="../252/51252.xml">
NFS</link></rule>
</direction>
</protocol>
</message>
, <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../768/436768.xml">
AFS</link></instrumentality>
</artifact>
</system>
, <message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<link xlink:type="simple" xlink:href="../873/349873.xml">
SMB</link></rule>
</direction>
</protocol>
</message>
 protocols, and file-system-like clients for <link xlink:type="simple" xlink:href="../289/53289.xml">
FTP</link> and <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<standard wordnetid="107260623" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../849/179849.xml">
WebDAV</link></database>
</system_of_measurement>
</wordnet>
</rule>
</direction>
</standard>
</lexical_database>
</electronic_database>
</protocol>
</information>
</message>
.</p>

</ss1>
<ss1>
<st>
 Special purpose file systems </st>

<p>

<indent level="1">

<it>Main article: <link xlink:type="simple" xlink:href="../518/17446518.xml">
special file system</link></it>
</indent>
A special purpose file system is basically any file system that is not a disk file system or network file system. This includes systems where the <link xlink:type="simple" xlink:href="../077/7077.xml">
files</link> are arranged dynamically by <link xlink:type="simple" xlink:href="../309/5309.xml">
software</link>, intended for such purposes as communication between <link>
computer process</link>es or temporary file space.</p>
<p>

Special purpose file systems are most commonly used by file-centric operating systems such as Unix. Examples include the <link xlink:type="simple" xlink:href="../577/1773577.xml">
procfs</link> (/proc) file system used by some Unix variants, which grants access to information about <link xlink:type="simple" xlink:href="../178/45178.xml">
process</link>es and other operating system features.</p>
<p>

Deep space science exploration craft, like <link xlink:type="simple" xlink:href="../781/32781.xml">
Voyager I</link> &amp; <link xlink:type="simple" xlink:href="../782/32782.xml">
II</link> used digital tape-based special file systems. Most modern space exploration craft like <link xlink:type="simple" xlink:href="../941/67941.xml">
Cassini-Huygens</link> used <link xlink:type="simple" xlink:href="../123/26123.xml">
Real-time operating system</link> file systems or RTOS influenced file systems. The <link xlink:type="simple" xlink:href="../366/421366.xml">
Mars Rover</link>s are one such example of an RTOS file system, important in this case because they are implemented in <link xlink:type="simple" xlink:href="../595/50595.xml">
flash memory</link>.</p>
<p>

Crash counting is a feature of a file system designed as an alternative to <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../073/48073.xml">
journaling</link></instrumentality>
</artifact>
</system>
. It is claimed&#91;&#93; that it maintains consistency across crashes without the code complexity of implementing journaling.</p>

</ss1>
</sec>
<sec>
<st>
 File systems and operating systems</st>
<p>

Most <link xlink:type="simple" xlink:href="../194/22194.xml">
operating system</link>s provide a file system, as a file system is an integral part of any modern operating system. Early <link xlink:type="simple" xlink:href="../144/48144.xml">
microcomputer</link> operating systems' only real task was file management &mdash; a fact reflected in their names (see <link xlink:type="simple" xlink:href="../146/8146.xml">
DOS</link>). Some early operating systems had a separate component for handling file systems which was called a <link xlink:type="simple" xlink:href="../773/147773.xml">
disk operating system</link>. On some microcomputers, the disk operating system was loaded separately from the rest of the operating system. On early operating systems, there was usually support for only one, native, unnamed file system; for example, <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../146/45146.xml">
CP/M</link></O>
 supports only its own file system, which might be called "CP/M file system" if needed, but which didn't bear any official name at all.</p>
<p>

Because of this, there needs to be an interface provided by the operating system software between the user and the file system. This interface can be textual (such as provided by a <link xlink:type="simple" xlink:href="../707/6707.xml">
command line interface</link>, such as the <link xlink:type="simple" xlink:href="../035/32035.xml">
Unix shell</link>, or <link xlink:type="simple" xlink:href="../369/532369.xml">
OpenVMS DCL</link>) or graphical (such as provided by a <link xlink:type="simple" xlink:href="../293/12293.xml">
graphical user interface</link>, such as <link xlink:type="simple" xlink:href="../382/11382.xml">
file browser</link>s). If graphical, the metaphor of the <it><link xlink:type="simple" xlink:href="../844/158844.xml">
folder</link></it>, containing documents, other files, and nested folders is often used (see also: <link xlink:type="simple" xlink:href="../027/5515027.xml">
directory</link> and <link xlink:type="simple" xlink:href="../844/158844.xml">
folder</link>).</p>

<ss1>
<st>
 Flat file systems </st>
<p>

In a flat file system, there are no <link xlink:type="simple" xlink:href="../027/5515027.xml">
subdirectories</link>&mdash;everything is stored at the same (<system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../871/158871.xml">
root</link></instrumentality>
</artifact>
</system>
) level on the media, be it a <link xlink:type="simple" xlink:href="../777/13777.xml">
hard disk</link>, <link xlink:type="simple" xlink:href="../891/10891.xml">
floppy disk</link>, etc. While simple, this system rapidly becomes inefficient as the number of files grows, and makes it difficult for users to organize data into related groups.</p>
<p>

Like many small systems before it, the original <link xlink:type="simple" xlink:href="../979/19006979.xml">
Apple Macintosh</link> featured a flat file system, called <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../727/927727.xml">
Macintosh File System</link></instrumentality>
</artifact>
</system>
. Its version of <link xlink:type="simple" xlink:href="../043/20043.xml">
Mac OS</link> was unusual in that the file management software (<link xlink:type="simple" xlink:href="../166/156166.xml">
Macintosh Finder</link>) created the illusion of a partially hierarchical filing system on top of MFS. This structure meant that every file on a disk had to have a unique name, even if it appeared to be in a separate folder. MFS was quickly replaced with <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../347/55347.xml">
Hierarchical File System</link></instrumentality>
</artifact>
</system>
, which supported real <link xlink:type="simple" xlink:href="../027/5515027.xml">
directories</link>.</p>
<p>

A recent addition to the flat file system family is <link xlink:type="simple" xlink:href="../672/8905672.xml">
Amazon's</link> <work wordnetid="100575741" confidence="0.8">
<system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<service wordnetid="100577525" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<link>
S3</link></activity>
</psychological_feature>
</act>
</service>
</event>
</instrumentality>
</artifact>
</system>
</work>
, a remote storage service, which is intentionally simplistic to allow users the ability to customize how their data is stored.  The only constructs are buckets (imagine a disk drive of unlimited size) and objects (similar, but not identical to the standard concept of a file).  Advance file management is allowed by being able to use nearly any character (including '/') in the objects name, and the ability to select subsets of the bucket's content based off identical prefixes.</p>

</ss1>
<ss1>
<st>
File systems under Unix-like operating systems</st>

<p>

<family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../815/31815.xml">
Unix-like</link></family>
 operating systems create a virtual file system, which makes all the files on all the devices appear to exist in a single hierarchy. This means, in those systems, there is one <link xlink:type="simple" xlink:href="../871/158871.xml">
root directory</link>, and every file existing on the system is located under it somewhere. Furthermore, the root directory does not have to be in any physical place. It might not be on your first hard drive - it might not even be on your computer. Unix-like systems can use a network shared resource as its root directory.</p>
<p>

Unix-like systems assign a device name to each device, but this is not how the files on that device are accessed. Instead, to gain access to files on another device, you must first inform the operating system where in the directory tree you would like those files to appear. This process is called <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../987/5176987.xml">
mounting</link></instrumentality>
</artifact>
</system>
 a file system. For example, to access the files on a <recording wordnetid="104063868" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<sound_recording wordnetid="104262678" confidence="0.8">
<memory_device wordnetid="103744840" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<phonograph_record wordnetid="103924069" confidence="0.8">
<medium wordnetid="106254669" confidence="0.8">
<link xlink:type="simple" xlink:href="../902/18959902.xml">
CD-ROM</link></medium>
</phonograph_record>
</device>
</memory_device>
</sound_recording>
</instrumentality>
</artifact>
</recording>
, one must tell the operating system "Take the file system from this CD-ROM and make it appear under such-and-such directory". The directory given to the operating system is called the <it><link xlink:type="simple" xlink:href="../987/5176987.xml">
mount point</link></it> - it might, for example, be /media. The /media directory exists on many Unix systems (as specified in the <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../790/287790.xml">
Filesystem Hierarchy Standard</link></instrumentality>
</artifact>
</system>
) and is intended specifically for use as a mount point for removable media such as CDs, DVDs and like floppy disks. It may be empty, or it may contain subdirectories for mounting individual devices. Generally, only the <link xlink:type="simple" xlink:href="../985/154985.xml">
administrator</link> (i.e. <link xlink:type="simple" xlink:href="../209/264209.xml">
root user</link>) may authorize the mounting of file systems.</p>
<p>

<family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../815/31815.xml">
Unix-like</link></family>
 operating systems often include software and tools that assist in the mounting process and provide it new functionality. Some of these strategies have been coined "auto-mounting" as a reflection of their purpose.
<list>
<entry level="1" type="number">

In many situations, file systems other than the root need to be available as soon as the operating system has <link xlink:type="simple" xlink:href="../909/40909.xml">
booted</link>. All Unix-like systems therefore provide a facility for mounting file systems at boot time. System <link xlink:type="simple" xlink:href="../985/154985.xml">
administrator</link>s define these file systems in the configuration file <link xlink:type="simple" xlink:href="../836/787836.xml">
fstab</link> or <link>
vfstab</link> in <link xlink:type="simple" xlink:href="../981/26981.xml">
Solaris</link> Operating Environment, which also indicates options and mount points.</entry>
<entry level="1" type="number">

In some situations, there is no need to mount certain file systems at <link xlink:type="simple" xlink:href="../909/40909.xml">
boot time</link>, although their use may be desired thereafter. There are some utilities for Unix-like systems that allow the mounting of predefined file systems upon demand.</entry>
<entry level="1" type="number">

Removable media have become very common with <link xlink:type="simple" xlink:href="../144/48144.xml">
microcomputer</link> platforms. They allow programs and data to be transferred between machines without a physical connection. Common examples include <artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<medium wordnetid="106254669" confidence="0.8">
<link xlink:type="simple" xlink:href="../414/400414.xml">
USB flash drive</link></medium>
</device>
</instrumentality>
</artifact>
s, <recording wordnetid="104063868" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<sound_recording wordnetid="104262678" confidence="0.8">
<memory_device wordnetid="103744840" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<phonograph_record wordnetid="103924069" confidence="0.8">
<medium wordnetid="106254669" confidence="0.8">
<link xlink:type="simple" xlink:href="../902/18959902.xml">
CD-ROM</link></medium>
</phonograph_record>
</device>
</memory_device>
</sound_recording>
</instrumentality>
</artifact>
</recording>
s, and <medium wordnetid="106254669" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../498/11014498.xml">
DVD</link></medium>
s. Utilities have therefore been developed to detect the presence and availability of a medium and then mount that medium without any user intervention.</entry>
</list>
</p>

<p>

<list>
<entry level="1" type="number">

Progressive Unix-like systems have also introduced a concept called <b>supermounting</b>; see, for example, <weblink xlink:type="simple" xlink:href="http://sourceforge.net/projects/supermount-ng">
the Linux supermount-ng project</weblink>. For example, a floppy disk that has been supermounted can be physically removed from the system. Under normal circumstances, the disk should have been synchronized and then unmounted before its removal. Provided synchronization has occurred, a different disk can be inserted into the drive. The system automatically notices that the disk has changed and updates the mount point contents to reflect the new medium. Similar functionality is found on standard Windows machines.</entry>
<entry level="1" type="number">

A similar innovation preferred by some users is the use of <weblink xlink:type="simple" xlink:href="http://freshmeat.net/projects/autofs/">
autofs</weblink>, a system that, like supermounting, eliminates the need for manual mounting commands. The difference from supermount, other than compatibility in an apparent greater range of applications such as access to <link xlink:type="simple" xlink:href="../343/8787343.xml">
file systems on network servers</link>, is that devices are mounted transparently when requests to their file systems are made, as would be appropriate for file systems on network servers, rather than relying on events such as the insertion of media, as would be appropriate for removable media.</entry>
</list>
</p>

<ss2>
<st>
File systems under Linux </st>

<p>

<O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../297/6097297.xml">
Linux</link></O>
 supports many different file systems, but common choices for the system disk include the ext* family (such as <link xlink:type="simple" xlink:href="../194/39194.xml">
ext2</link> and <link xlink:type="simple" xlink:href="../195/39195.xml">
ext3</link>), <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../203/34203.xml">
XFS</link></instrumentality>
</artifact>
</system>
, <link>
 JFS</link> and <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../183/39183.xml">
ReiserFS</link></instrumentality>
</artifact>
</system>
.</p>

</ss2>
<ss2>
<st>
File systems under Mac OS X</st>
<p>

<link xlink:type="simple" xlink:href="../640/20640.xml">
Mac OS X</link> uses a file system that it inherited from classic <link xlink:type="simple" xlink:href="../043/20043.xml">
Mac OS</link> called <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../752/927752.xml">
HFS Plus</link></instrumentality>
</artifact>
</system>
. HFS Plus is a <link xlink:type="simple" xlink:href="../632/18933632.xml">
metadata</link>-rich and <link xlink:type="simple" xlink:href="../303/1455303.xml">
case preserving</link> file system. Due to the Unix roots of Mac OS X, Unix permissions were added to HFS Plus. Later versions of HFS Plus added <link xlink:type="simple" xlink:href="../073/48073.xml">
journaling</link> to prevent corruption of the file system structure and introduced a number of optimizations to the allocation algorithms in an attempt to defragment files automatically without requiring an external defragmenter.</p>
<p>

Filenames can be up to 255 characters. HFS Plus uses <link xlink:type="simple" xlink:href="../742/31742.xml">
Unicode</link> to store filenames. On Mac OS X, the <link xlink:type="simple" xlink:href="../600/18933600.xml">
filetype</link> can come from the <link xlink:type="simple" xlink:href="../970/147970.xml">
type code</link>, stored in file's metadata, or the filename.</p>
<p>

HFS Plus has three kinds of links: Unix-style <link xlink:type="simple" xlink:href="../957/496957.xml">
hard link</link>s, Unix-style <link xlink:type="simple" xlink:href="../473/180473.xml">
symbolic link</link>s and <link xlink:type="simple" xlink:href="../672/720672.xml">
aliases</link>. Aliases are designed to maintain a link to their original file even if they are moved or renamed; they are not interpreted by the file system itself, but by the File Manager code in <link xlink:type="simple" xlink:href="../647/10549647.xml">
userland</link>.</p>
<p>

Mac OS X also supports the <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../992/250992.xml">
UFS</link></instrumentality>
</artifact>
</system>
 file system, derived from the <link xlink:type="simple" xlink:href="../807/1223807.xml">
BSD</link> Unix Fast File System via <link xlink:type="simple" xlink:href="../642/40642.xml">
NeXTSTEP</link>. However, as of Mac OS X 10.5 (Leopard), Mac OS X can no longer be installed on a UFS volume, nor can a pre-Leopard system installed on a UFS volume be upgraded to Leopard. <weblink xlink:type="simple" xlink:href="http://docs.info.apple.com/article.html?artnum=306516">
http://docs.info.apple.com/article.html?artnum=306516</weblink></p>

</ss2>
</ss1>
<ss1>
<st>
File systems under Plan 9 from Bell Labs</st>
<p>

<O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../226/24226.xml">
Plan 9 from Bell Labs</link></O>
 was originally designed to extend some of Unix's good points, and to introduce some new ideas of its own while fixing the shortcomings of Unix.</p>
<p>

With respect to file systems, the Unix system of treating things as files was continued, but in Plan 9, <it>everything</it> is treated as a file, and accessed as a file would be (i.e., no <link xlink:type="simple" xlink:href="../038/2924038.xml">
ioctl</link> or <link xlink:type="simple" xlink:href="../709/608709.xml">
mmap</link>). Perhaps surprisingly, while the file interface is made universal it is also simplified considerably, for example symlinks, hard links and suid are made obsolete, and an atomic create/open operation is introduced. More importantly the set of file operations becomes well defined and subversions of this like ioctl are eliminated.</p>
<p>

Secondly, the underlying <message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<link xlink:type="simple" xlink:href="../452/683452.xml">
9P</link></rule>
</direction>
</protocol>
</message>
 protocol was used to remove the difference between local and remote files (except for a possible difference in <link xlink:type="simple" xlink:href="../286/19572286.xml">
latency</link>). This has the advantage that a device or devices, represented by files, on a remote computer could be used as though it were the local computer's own device(s). This means that under Plan 9, multiple file servers provide access to devices, classing them as file systems. Servers for "synthetic" file systems can also run in user space bringing many of the advantages of micro kernel systems while maintaining the simplicity of the system.</p>
<p>

Everything on a Plan 9 system has an abstraction as a file; networking, graphics, debugging, authentication, capabilities, encryption, and other services are accessed via I-O operations on file descriptors. For example, this allows the use of the IP stack of a gateway machine without need of NAT, or provides a network-transparent window system without the need of any extra code.</p>
<p>

Another example: a Plan-9 application receives <link xlink:type="simple" xlink:href="../289/53289.xml">
FTP</link> service by opening an FTP site. The <link>
ftpfs</link> server handles the open by essentially mounting the remote FTP site as part of the local file system. With ftpfs as an intermediary, the application can now use the usual file-system operations to access the FTP site as if it were part of the local file system. A further example is the mail system which uses file servers that synthesize <link>
virtual file</link>s and directories to represent a user mailbox as /mail/fs/mbox. The <link xlink:type="simple" xlink:href="../530/3002530.xml">
wikifs</link> provides a file system interface to a wiki.</p>
<p>

These file systems are organized with the help of private, per-process namespaces, allowing each process to have a different view of the many file systems that provide resources in a distributed system.</p>
<p>

The <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../928/507928.xml">
Inferno operating system</link></O>
 shares these concepts with Plan 9.</p>

</ss1>
<ss1>
<st>
File systems under Microsoft Windows</st>
<p>

Windows makes use of the FAT and <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../184/39184.xml">
NTFS (New Technology File System)</link></instrumentality>
</artifact>
</system>
 file systems.</p>
<p>

The File Allocation Table (FAT) filing system, supported by all versions of <link xlink:type="simple" xlink:href="../890/18890.xml">
Microsoft Windows</link>, was an evolution of that used in Microsoft's earlier operating system (<O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../027/20027.xml">
MS-DOS</link></O>
 which in turn was based on <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../506/191506.xml">
86-DOS</link></O>
). FAT ultimately traces its roots back to the short-lived <link>
M-DOS</link> project and <artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<tool wordnetid="104451818" confidence="0.8">
<implement wordnetid="103563967" confidence="0.8">
<link xlink:type="simple" xlink:href="../766/149766.xml">
Standalone disk BASIC</link></implement>
</tool>
</instrumentality>
</artifact>
 before it. Over the years various features have been added to it, inspired by similar features found on file systems used by operating systems such as <family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../642/31642.xml">
Unix</link></family>
.</p>
<p>

Older versions of the FAT file system (FAT12 and FAT16) had file name length limits, a limit on the number of entries in the root directory of the file system and had restrictions on the maximum size of FAT-formatted disks or <link xlink:type="simple" xlink:href="../380/55380.xml">
partitions</link>. Specifically, FAT12 and FAT16 had a limit of 8 characters for the file name, and 3 characters for the extension. This is commonly referred to as the <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../247/60247.xml">
8.3 filename</link></instrumentality>
</artifact>
</system>
 limit. VFAT, which was an extension to FAT12 and FAT16 introduced in <version wordnetid="107173585" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../884/984884.xml">
Windows NT 3.5</link></version>
 and subsequently included in Windows 95, allowed long file names (<link xlink:type="simple" xlink:href="../353/2620353.xml">
LFN</link>). FAT32 also addressed many of the limits in FAT12 and FAT16, but remains limited compared to NTFS.</p>
<p>

NTFS, introduced with the <family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../438/33438.xml">
Windows NT</link></family>
 operating system, allowed <link xlink:type="simple" xlink:href="../589/61589.xml">
ACL</link>-based permission control. Hard links, multiple file streams, attribute indexing, quota tracking, compression and mount-points for other file systems (called "junctions") are also supported, though not all these features are well-documented.</p>
<p>

Unlike many other operating systems, Windows uses a <it>drive letter</it> abstraction at the user level to distinguish one disk or partition from another. For example, the <link xlink:type="simple" xlink:href="../357/403357.xml">
path</link> C:\WINDOWS represents a directory WINDOWS on the partition represented by the letter C. The C drive is most commonly used for the primary hard disk partition, on which Windows is usually installed and from which it boots. This "tradition" has become so firmly ingrained that bugs came about in older versions of Windows which made assumptions that the drive that the operating system was installed on was C.  The tradition of using "C" for the drive letter can be traced to MS-DOS, where the letters A and B were reserved for up to two floppy disk drives. Network drives may also be mapped to drive letters.</p>

<ss2>
<st>
Data retrieval process</st>
<p>

The operating system calls on the <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../509/654509.xml">
IFS</link></instrumentality>
</artifact>
</system>
 (Installable File System) manager. The IFS calls on the correct FSD (File System Driver) in order to open the selected file from a choice of four FSDs that work with different storage systems—NTFS, VFAT, CDFS (for optical drives), and Network. The FSD gets the location on the disk for the first cluster of the file from the <link xlink:type="simple" xlink:href="../045/53045.xml">
FAT</link> (File Allocation Table), FAT98, VFAT (Virtual File Allocation Table), or, in the case of Windows XP, the <link xlink:type="simple" xlink:href="../184/39184.xml">
MFT</link> (Master File Table). In short, the whole point of the FAT, FAT98, VFAT, or MFT is to map out all the files on the disk and record were they are located (which track and sector of the disk).</p>

</ss2>
</ss1>
<ss1>
<st>
File systems under OpenVMS</st>

<p>

<indent level="1">

<it>Main article: <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../539/711539.xml">
Files-11</link></instrumentality>
</artifact>
</system>
</it>
</indent>

</p>
</ss1>
<ss1>
<st>
File systems under MVS [IBM Mainframe]</st>

<p>

<indent level="1">

<it>Main article: <link xlink:type="simple" xlink:href="../649/19649.xml#xpointer(//*[./st=%22MVS+filesystem%22])">
MVS#MVS filesystem</link></it>
</indent>

</p>
</ss1>
</sec>
<sec>
<st>
 See also </st>
<p>

<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../639/760639.xml">
List of file systems</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../051/5356051.xml">
Comparison of file systems</link></entry>
<entry level="1" type="bullet">

 <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../131/351131.xml">
Virtual file system</link></instrumentality>
</artifact>
</system>
</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../119/8429119.xml">
File system fragmentation</link></entry>
<entry level="1" type="bullet">

 <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../343/8787343.xml">
Distributed file system</link></instrumentality>
</artifact>
</system>
</entry>
<entry level="1" type="bullet">

 <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../739/2052739.xml">
Filesystem API</link></instrumentality>
</artifact>
</system>
</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../174/28174.xml">
Physical and logical storage</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../538/170538.xml">
List of Unix programs</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../957/147957.xml">
Filename extension</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../814/7667814.xml">
Disk sharing</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../739/2052739.xml">
File system driver</link></entry>
<entry level="1" type="bullet">

 <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../522/2673522.xml">
Garbage Collected Filesystem</link></instrumentality>
</artifact>
</system>
</entry>
</list>
</p>

</sec>
<sec>
<st>
References</st>



<ss1>
<st>
Cited references</st>
<p>



</p>
</ss1>
<ss1>
<st>
General references</st>
<p>

<list>
<entry level="1" type="bullet">

 Jonathan de Boyne Pollard&#32;(1996).&#32;"<weblink xlink:type="simple" xlink:href="http://homepages.tesco.net./~J.deBoynePollard/FGA/os2-disc-and-volume-size-limits.html">
Disc and volume size limits</weblink>".&#32;<it>Frequently Given Answers</it>.&#32;Retrieved on February 9, 2005.</entry>
<entry level="1" type="bullet">

 IBM.&#32;"<weblink xlink:type="simple" xlink:href="ftp://service.boulder.ibm.com/ps/products/os2/fixes/v4warp/english-us/jr09427/JR09427.TXT">
OS/2 corrective service fix JR09427</weblink>".&#32;Retrieved on February 9, 2005.</entry>
<entry level="1" type="bullet">

 "<weblink xlink:type="simple" xlink:href="http://linux-ntfs.sourceforge.net/ntfs/attributes/ea_information.html">
Attribute - $EA_INFORMATION (0xD0)</weblink>".&#32;<it>NTFS Information, Linux-NTFS Project</it>.&#32;Retrieved on February 9, 2005.</entry>
<entry level="1" type="bullet">

 "<weblink xlink:type="simple" xlink:href="http://linux-ntfs.sourceforge.net/ntfs/attributes/ea.html">
Attribute - $EA (0xE0)</weblink>".&#32;<it>NTFS Information, Linux-NTFS Project</it>.&#32;Retrieved on February 9, 2005.</entry>
<entry level="1" type="bullet">

 "<weblink xlink:type="simple" xlink:href="http://linux-ntfs.sourceforge.net/ntfs/attributes/standard_information.html">
Attribute - $STANDARD_INFORMATION (0x10)</weblink>".&#32;<it>NTFS Information, Linux-NTFS Project</it>.&#32;Retrieved on February 21, 2005.</entry>
<entry level="1" type="bullet">

 Apple Computer Inc.&#32;"<weblink xlink:type="simple" xlink:href="http://developer.apple.com/technotes/tn/tn1150.html">
Technical Note TN1150: HFS Plus Volume Format</weblink>".&#32;<it>Detailed HFS Plus and HFSX description</it>.&#32;Retrieved on May 2, 2006.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.digital-evidence.org/fsfa/">
File System Forensic Analysis</weblink>, Brian Carrier, Addison Wesley, 2005.</entry>
</list>
</p>

</ss1>
<ss1>
<st>
 Further reading </st>
<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.microsoft.com/whdc/device/storage/LocFileSys.mspx">
Local Filesystems for Windows</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.winnetmag.com/Article/ArticleID/38803/38803.html">
Understanding File-Size Limits on NTFS and FAT</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://linuxgazette.net/122/piszcz.html">
Benchmarking Filesystems Part II</weblink> using kernel 2.6, by Justin Piszcz, Linux Gazette 122, January 2006</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://fsbench.netnation.com/">
Linux File System Benchmarks</weblink> v2.6 kernel with a stress on CPU usage</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.osnews.com/story.php?news_id=69">
Interview With the People Behind JFS, ReiserFS &amp; XFS</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.osdata.com/system/logical/logical.htm">
Large List of File System Summaries</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.debian-administration.org/articles/388">
Filesystems (ext3, ReiserFS, XFS, JFS) comparison on Debian Etch</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://osdev.berlios.de/osd-fs.html">
Overview of some filesystems (outdated)</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.suse.de/~aj/linux_lfs.html">
Linux large file support (outdated)</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.lrdev.com/lr/unix/sparsefile.html">
Sparse files support (outdated)</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://linuxgazette.net/102/piszcz.html">
Benchmarking Filesystems (outdated)</weblink> by Justin Piszcz, Linux Gazette 102, May 2004</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://staff.osuosl.org/~kveton/fs/">
Journaled Filesystem Benchmarks (outdated)</weblink>: A comparison of ReiserFS, XFS, JFS, ext3 &amp; ext2</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.open-mag.com/features/Vol_18/filesystems/filesystems.htm">
Journal File System Performance (outdated)</weblink>: ReiserFS, JFS, and Ext3FS show their merits on a fast RAID appliance</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.techyblog.com/linux-news/linux-26-filesystem-benchmarks-older.html">
Linux Filesystem Benchmarks</weblink></entry>
<entry level="1" type="bullet">

 Jeremy Reimer&#32;(<link xlink:type="simple" xlink:href="../818/19818.xml">
March 16</link>, <link xlink:type="simple" xlink:href="../825/35825.xml">
2008</link>).&#32;"<weblink xlink:type="simple" xlink:href="http://arstechnica.com/articles/paedia/past-present-future-file-systems.ars">
From BFS to ZFS: past, present, and future of file systems</weblink>", arstechnica.com.&#32;Retrieved on <link>
2008-03-18</link>.&nbsp;</entry>
</list>
</p>

</ss1>
</sec>
<sec>
<st>
External links</st>

<p>

<list>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.forensics.nl/filesystems">
Filesystem Specifications - Links &amp; Whitepapers</weblink></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://filesystems.org/all-projects.html">
Interesting File System Projects</weblink></entry>
</list>
</p>


</sec>
</bdy>
</system>
</article>
