<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 18:01:46[mciao0828] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<physical_entity  confidence="0.8" wordnetid="100001930">
<person  confidence="0.8" wordnetid="100007846">
<model  confidence="0.8" wordnetid="110324560">
<assistant  confidence="0.8" wordnetid="109815790">
<worker  confidence="0.8" wordnetid="109632518">
<causal_agent  confidence="0.8" wordnetid="100007347">
<header>
<title>Multilevel security</title>
<id>1011379</id>
<revision>
<id>241935507</id>
<timestamp>2008-09-30T03:59:09Z</timestamp>
<contributor>
<username>Bogorm</username>
<id>6056773</id>
</contributor>
</revision>
<categories>
<category>CISSP</category>
<category>Computer security models</category>
</categories>
</header>
<bdy>

<b>Multilevel Security</b> (also written as <b>multi-level security</b> or abbreviated as <b>MLS</b>) is the application of a computer system to process information with different sensitivities (i.e.  at different security levels), permit simultaneous access by users with different <link xlink:type="simple" xlink:href="../858/252858.xml">
security clearance</link>s and needs-to-know, and prevent users from obtaining access to information for which they lack authorization. <p>

MLS allows easy access to less-sensitive information by higher-cleared individuals, and it allows higher-cleared individuals to easily share <link xlink:type="simple" xlink:href="../806/2424806.xml">
sanitized</link> documents with less-cleared individuals. A sanitized document is one that has been edited to remove information that the less-cleared individual is not allowed to see. </p>

<sec>
<st>
Trusted operating systems</st>
<p>

An MLS <link xlink:type="simple" xlink:href="../797/206797.xml">
operating environment</link> often requires a highly trustworthy information processing system often built on an MLS operating system, but not necessarily.  Most MLS functionality can be supported by a system composed entirely from untrusted computers, although it requires multiple independent computers linked by hardware security-compliant channels (see section B.6.2 of the Trusted Network Interpretation, NCSC-TG-005).  An example of hardware enforced MLS is <it>Asymmetric Isolation</it>.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref> If a single computer is being used in MLS mode, then that computer must use a trusted operating system (OS). Because all information in an MLS environment is physically accessible by the OS, strong logical controls must exist to ensure that access to information is strictly controlled. Typically this involves <link xlink:type="simple" xlink:href="../900/879900.xml">
mandatory access control</link> that uses security labels, like the <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<model wordnetid="110324560" confidence="0.8">
<assistant wordnetid="109815790" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../866/423866.xml">
Bell-LaPadula model</link></causal_agent>
</worker>
</assistant>
</model>
</person>
</physical_entity>
 noted earlier.</p>
<p>

Customers that deploy trusted operating systems typically require that the product complete a formal computer security evaluation. The evaluation is stricter for a broader security range, which are the lowest and highest classification levels the system can process.  The <link xlink:type="simple" xlink:href="../300/6687300.xml">
TCSEC</link> was the first evaluation criteria developed to assess MLS in computer systems.  Under that criteria there was a clear uniform mapping (see CSC-STD-004-85) between the security requirements and the breadth of the MLS security range.  Historically few implementations have been certified capable of MLS processing with a security range of Unclassified through Top Secret.  Among them were <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../721/225721.xml">
Honeywell</link></company>
's SCOMP, <link xlink:type="simple" xlink:href="../090/32090.xml">
USAF</link> SACDIN, <link xlink:type="simple" xlink:href="../939/21939.xml">
NSA</link> Blacker, and <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../266/18933266.xml">
Boeing</link></company>
's MLS LAN, all under TCSEC, 1980s vintage and <chip wordnetid="103020034" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<microprocessor wordnetid="103760310" confidence="0.8">
<conductor wordnetid="103088707" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<semiconductor_device wordnetid="104171831" confidence="0.8">
<link xlink:type="simple" xlink:href="../070/15070.xml">
Intel 80386</link></semiconductor_device>
</device>
</conductor>
</microprocessor>
</instrumentality>
</artifact>
</chip>
-based.  Currently, MLS products are evaluated under the <standard wordnetid="107260623" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<link xlink:type="simple" xlink:href="../625/57625.xml">
Common Criteria</link></activity>
</procedure>
</system_of_measurement>
</psychological_feature>
</act>
</event>
</standard>
.  There are no current systems certified for anything approaching that broad a security range even though certification under the Common Criteria is less rigid today, if anything.  Because the Common Criteria decoupled TCSEC's pairing of assurance (EAL level) and functionality (Protection Profile), the clear uniform mapping between security requirements and MLS security range capability documented in CSC-STD-004-85 has largely been lost when the Common Criteria superseded the <event wordnetid="100029378" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<link xlink:type="simple" xlink:href="../479/2207479.xml">
Rainbow Series</link></activity>
</procedure>
</psychological_feature>
</act>
</event>
. </p>
<p>

Freely available implementations of operating systems with limited MLS applicability include <idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<property wordnetid="105849040" confidence="0.8">
<feature wordnetid="105849789" confidence="0.8">
<link xlink:type="simple" xlink:href="../908/55908.xml">
Security-Enhanced Linux</link></feature>
</property>
</concept>
</idea>
 and <link>
TrustedBSD</link>. Security evaluation is a problem for these free MLS implementations for three reasons:  </p>
<p>

<list>
<entry level="1" type="number">

 It is always very difficult to implement kernel self protection strategy with the precision needed for MLS trust, and these examples were not certified to an MLS protection profile so they may not measure up.  </entry>
<entry level="1" type="number">

 Aside from EAL levels, the Common Criteria lacks an inventory of appropriate high assurance protection profiles that specify the robustness needed to operate in MLS mode.  </entry>
<entry level="1" type="number">

 Even if (1) and (2) were met, the evaluation process is very costly and imposes special restrictions on configuration control of the evaluated software.</entry>
</list>
</p>
<p>

Vendor certification strategies can be misleading to laymen (and even some certifiers!).  A common strategy exploits the layman's overemphasis of EAL level with over-certification, such as certifying an EAL 3 protection profile (like CAPP) to elevated levels, like EAL 4 or EAL 5.  Another is adding and certifying MLS support features (such as Role-Based Access Control Protection Profile (RBACPP) and Labeled Security Protection Profile (LSPP)) to a kernel that is not evaluated to an MLS-capable protection profile.  Those types of features are services run on the kernel and depend on the kernel to protect them from corruption and subversion.  If the kernel is not evaluated to an MLS-capable protection profile, MLS features cannot be trusted regardless of how impressive the demonstration looks.  Some examples follow:</p>
<p>

<company wordnetid="108058098" confidence="0.8">
<institution wordnetid="108053576" confidence="0.8">
<link xlink:type="simple" xlink:href="../980/26980.xml">
Sun Microsystems</link></institution>
</company>
 offers <link xlink:type="simple" xlink:href="../782/866782.xml">
Solaris Trusted Extensions</link>, as an integrated feature of the commercial <link xlink:type="simple" xlink:href="../145/46145.xml">
Solaris Operating System</link> as well as <link xlink:type="simple" xlink:href="../658/1178658.xml">
OpenSolaris</link>.  Solaris 10 11/06 has been certified under the Common Criteria at EAL4 to the Controlled Access Protection Profile (CAPP), and <link xlink:type="simple" xlink:href="../181/66181.xml">
Role-Based Access Control</link> (RBAC) protection profile.  Trusted Extensions has been certified at EAL4 to the Labeled Security Protection Profile (LSPP).  Because these extensions are hosted by an operating system with CAPP functionality, which assumes users will voluntarily comply with security access controls,<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%222%22])">2</ref> mandatory access control is beyond the capability of Solaris, the labels and roles cannot be enforced on users without their voluntary cooperation.  The security target includes both desktop and network functionality which do not warrant MLS capability. </p>
<p>

<company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../128/200128.xml">
BAE Systems</link></company>
 offers <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../230/6061230.xml">
XTS-400</link></O>
, a commercial system that supports MLS at what the vendor claims is "high assurance". Early versions were MLS capable as evidenced by their evaluation at the TCSEC B3 level, but more recent versions were evaluated under the Common Criteria at EAL5+.  The protection profile used (CAPP and LSPP, both EAL3 protection profile that are not MLS-capable as discussed above) do not warrant MLS use of this product.  Note, however, that in this case, the MLS capability does not spring from the lower assurance protection profiles themselves but from the security target which contains an enriched set of security functionality that do warrant MLS capability.</p>

</sec>
<sec>
<st>
MLS problem areas</st>
<p>

<link xlink:type="simple" xlink:href="../806/2424806.xml">
Sanitization</link> is a problem area for MLS systems. Systems that implement MLS restrictions, like those defined by <link xlink:type="simple" xlink:href="../866/423866.xml">
Bell-LaPadula</link>, only allow sharing when it does not obviously violate security restrictions. Users with lower clearances can easily share their work with users holding higher clearances, but not vice versa. There is no efficient, reliable mechanism by which a Top Secret user can edit a Top Secret file, remove all Top Secret information, and then deliver it to users with Secret or lower clearances. In practice, MLS systems circumvent this problem via privileged functions that allow a trustworthy user to bypass the MLS mechanism and change a file's security classification. However, the technique is <link xlink:type="simple" xlink:href="../806/2424806.xml">
not reliable</link>.</p>
<p>

<accomplishment wordnetid="100035189" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<action wordnetid="100037396" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<feat wordnetid="100036762" confidence="0.8">
<link xlink:type="simple" xlink:href="../907/174907.xml">
Covert channel</link></feat>
</psychological_feature>
</act>
</action>
</event>
</accomplishment>
s pose another problem for MLS systems. For an MLS system to keep secrets perfectly, there must be <it>no possible way</it> for a Top Secret process to transmit signals of any kind to a Secret or lower process. This includes side effects such as changes in available memory or disk space, or changes in process timing. When a process exploits such a side effect to transmit data, it is exploiting a covert channel. It is extremely difficult to close all covert channels in a practical computing system, and it may be impossible in practice. The process of identifying all covert channels is a challenging one by itself. Most commercially available MLS systems do not attempt to close all covert channels, even though this makes it impractical to use them in high security applications.</p>
<p>

<link xlink:type="simple" xlink:href="../827/40827.xml">
Bypass</link> is problematic when introduced as a means to treat a system high object as if it were MLS trusted.  A common example is to extract data from a secret system high object to be sent to an unclassified destination, citing some property of the data as trusted evidence that it is 'really' unclassified (e.g. 'strict' format).  A system high system cannot be trusted to preserve any trusted evidence, and the result is that an overt data path is opened with no logical way to securely mediate it.  Bypass can be risky because, unlike narrow bandwidth covert channels that are difficult to exploit, bypass can present a large, easily exploitable overt leak in the system.  Bypass often arises out of failure to use trusted operating environments to maintain continuous separation of security domains all the way back to their origin.  When that origin lies outside the system boundary, it may not be possible to validate the trusted separation to the origin.  In that case, the risk of bypass can be unavoidable if the flow truly is essential.  </p>
<p>

A common example of unavoidable bypass is a subject system that is required to accept secret IP packets from an untrusted source, encrypt the secret userdata and not the header and deposit the result to an untrusted network.  The source lies outside the sphere of influence of the subject system.  Although the source is untrusted (e.g. system high) it is being trusted as if it were MLS because it provides packets that have unclassified headers and secret plaintext userdata, an MLS data construct.  Since the source is untrusted, it could be corrupt and place secrets in the unclassified packet header.  The corrupted packet headers could be nonsense but it is impossible for the subject system to determine that with any reasonable reliability.  The packet userdata is cryptographically well protected but the packet header can contain readable secrets.  If the corrupted packets are passed to an untrusted network by the subject system they may not be routable but some cooperating corrupt process in the network could grab the packets and acknowledge them and the subject system may not detect the leak.  This can be a large overt leak that is hard to detect.  Viewing classified packets with unclassified headers as system high structures instead of the MLS structures they really are presents a very common but serious threat.  </p>
<p>

Most bypass is avoidable.  Avoidable bypass often results when system architects design a system before correctly considering security, then attempt to apply security after the fact as add-on functions.  In that situation, bypass appears to be the only (easy) way to make the system work.  Some pseudo-secure schemes are proposed (and approved!) that examine the contents of the bypassed data in a vain attempt to establish that bypassed data contains no secrets.  This is not possible without trusting something about the data such as its format, which is contrary to the assumption that the source is not trusted to preserve any characteristics of the source data.  Assured "secure bypass" is a myth, just as a so-called <link xlink:type="simple" xlink:href="../544/6800544.xml">
High Assurance Guard</link> (HAG) that transparently implements bypass.  The risk these introduce has long been acknowledged; extant solutions are ultimately procedural, rather than technical.  There is no way to know with certainty how much classified information is taken from our systems by exploitation of bypass.</p>

</sec>
<sec>
<st>
 "There is no such thing as MLS" </st>

<p>

Unfortunately, this false statement may be the most common use of the term MLS today.  With the decline<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%223%22])">3</ref> in <link xlink:type="simple" xlink:href="../398/7398.xml">
COMPUSEC</link> experts, more laymen who are not COMPUSEC-astute are designing secure computing systems and are mistakenly drawing this conclusion because the term MLS is being <message wordnetid="106598915" confidence="0.8">
<subject wordnetid="106599788" confidence="0.8">
<link xlink:type="simple" xlink:href="../708/1658708.xml">
overloaded</link></subject>
</message>
.  These two uses are:  MLS as a processing environment with MLS as a capability.  The false conclusion is based on a belief that since no products are certified to operate in an MLS <it>environment</it> or mode, that the MLS as a <it>capability</it> does not exist.  One does not imply the other.  Many systems operate in an environment containing data that has unequal security levels and therefore is MLS by the Computer Security Intermediate Value Theorem (CS-IVT)<weblink xlink:type="simple" xlink:href="http://www.selfless-security.org/papers/addendum.php#ivt">
http://www.selfless-security.org/papers/addendum.php#ivt</weblink>.  The consequence of this confusion runs deeper.  Laymen often conclude that to admit that a system operates in an MLS environment (environment-centric meaning of MLS) is to be backed into the <it>perceived</it> corner of having a problem with no MLS solution (capability-centric meaning of MLS).  MLS is deceptively complex and just because simple solutions are not obvious does not justify a conclusion that they do not exist.  This can lead to a crippling ignorance about COMPUSEC that manifests itself as whispers that "one can not talk about MLS," and "There's no such thing as MLS."  These MLS-denial schemes change so rapidly that they cannot be addressed. Instead, it is important to clarify the distinction between MLS-environment and MLS-capable.</p>
<p>

<list>
<entry level="1" type="bullet">

 MLS as a security environment or <it><link xlink:type="simple" xlink:href="../546/3024546.xml">
security mode</link></it>: A community whose users have differing security clearances may perceive MLS as a data-sharing capability: users can share information with recipients whose clearance allows receipt of that information. A system is operating in MLS Mode when it has (or could have) connectivity to a destination that is cleared to a lower security level than any of the data the MLS system contains.  This is formalized in the CS-IVT.  Determination of security mode of a system depends entirely on the system's security environment; the classification of data it contains, the clearance of those who can get direct or indirect access to the system or its outputs or signals, and the system's connectivity and ports to other systems.  Security mode is independent of capabilities, although a system should not be operated in a mode for which it is not worthy of trust.  </entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 MLS as a <it>capability</it>: Developers of products or systems intended to allow MLS data sharing tend to loosely perceive it in terms of a capability to enforce data-sharing restrictions or a security policy, like mechanisms that enforce the <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<model wordnetid="110324560" confidence="0.8">
<assistant wordnetid="109815790" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../866/423866.xml">
Bell-LaPadula model</link></causal_agent>
</worker>
</assistant>
</model>
</person>
</physical_entity>
. A system is MLS-capable if it can be shown to robustly implement a security policy.</entry>
</list>
</p>
<p>

The original use of the term MLS applied to the security environment, or mode.  One solution to this confusion is to retain the original definition of MLS and be specific about MLS-capable when that context is used.</p>

</sec>
<sec>
<st>
MILS architecture</st>
<p>

MILS (<it>multiple independent levels of security</it>) is an architecture that addresses the domain separation component of MLS.  Security models such as the <link xlink:type="simple" xlink:href="../924/664924.xml">
Biba model</link> (for integrity) and the <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<model wordnetid="110324560" confidence="0.8">
<assistant wordnetid="109815790" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../866/423866.xml">
Bell-LaPadula model</link></causal_agent>
</worker>
</assistant>
</model>
</person>
</physical_entity>
 (for confidentiality) allow one-way flow between certain security domains that are otherwise assumed to be isolated.  MILS addresses the isolation underlying MLS without addressing the controlled interaction between the domains addressed by the above models.  Trusted security-compliant channels mentioned above can link MILS domains to support more MLS functionality.  </p>
<p>

The MILS approach pursues a strategy characterized by an older term, MSL (<it>multiple single level</it>), that isolates each level of information within its own single-level environment (<link xlink:type="simple" xlink:href="../546/3024546.xml">
System High</link>).</p>
<p>

The rigid process communication and isolation offered by MILS may be more useful to ultra high reliability software applications than MLS.  MILS notably does not address the hierarchical structure that is embodied by the notion of security levels.  As such, MILS might as well be called Multiple Independent Domains of Security.  MLS on MILS would require a complex structure of trusted (and certified) applications to emulate an MLS operating environment for other applications.  By declining to directly address interaction among levels implied by this hierarchical structure, MILS is simpler to implement but also lacks the richness and flexibility expected by practical MLS applications.</p>

</sec>
<sec>
<st>
MSL systems</st>
<p>

There is another way of solving such problems known as <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<model wordnetid="110324560" confidence="0.8">
<assistant wordnetid="109815790" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../501/4460501.xml">
Multiple Single-Level</link></causal_agent>
</worker>
</assistant>
</model>
</person>
</physical_entity>
.  Each security level is isolated in a separate untrusted domain.  The absence of medium of communication between the domains assures no interaction is possible.  The mechanism for this isolation is usually physical separation in separate computers.  This is often used to support applications or OSs which have no possibility of supporting MLS such as MS Windows and Solaris.</p>

</sec>
<sec>
<st>
 See also </st>
<p>

<list>
<entry level="1" type="bullet">

 <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<model wordnetid="110324560" confidence="0.8">
<assistant wordnetid="109815790" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../866/423866.xml">
Bell-LaPadula model</link></causal_agent>
</worker>
</assistant>
</model>
</person>
</physical_entity>
</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../900/879900.xml">
Mandatory Access Control</link> - MAC</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../518/881518.xml">
Discretionary Access Control</link> - DAC</entry>
<entry level="1" type="bullet">

 <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<model wordnetid="110324560" confidence="0.8">
<assistant wordnetid="109815790" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../181/66181.xml">
Role-based access control</link></causal_agent>
</worker>
</assistant>
</model>
</person>
</physical_entity>
 - RBAC</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../924/664924.xml">
Biba Integrity Model</link> </entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../744/4992744.xml">
Take-Grant Model</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../274/2035274.xml">
The Clark-Wilson Integrity Model</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../416/3024416.xml">
Graham-Denning Model</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../546/3024546.xml">
Security Modes of Operation</link></entry>
<entry level="1" type="bullet">

 <event wordnetid="100029378" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<link xlink:type="simple" xlink:href="../164/7667164.xml">
System High Mode</link></activity>
</procedure>
</psychological_feature>
</act>
</event>
</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../429/3782429.xml">
Multi categories security abbreviated as MCS</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../758/11393758.xml">
Non-Interference Model</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../967/47967.xml#xpointer(//*[./st=%22Multifactor+authentication%22])">
Multifactor authentication</link></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.afcea.org/wiki/index.php?title=Trusted_Computing_Base">
Trustifier TCB overview</weblink></entry>
</list>
</p>

</sec>
<sec>
<st>
 References </st>

<p>

<reflist>
<entry id="1">
Davidson, J.A.&#32;(1996-12-09).&#32;"<it><weblink xlink:type="simple" xlink:href="http://ieeexplore.ieee.org/search/wrapper.jsp?arnumber=569668">
Asymmetric isolation</weblink></it>". &#32;pp. 44-54</entry>
<entry id="2">
Information Systems Security Organization&#32;(1999-10-08).&#32;"<it><weblink xlink:type="simple" xlink:href="http://www.commoncriteriaportal.org/files/ppfiles/capp.pdf">
Controlled Access Protection Profile</weblink></it>". &#32;National Security Agency.</entry>
<entry id="3">
<weblink xlink:type="simple" xlink:href="http://www.selfless-security.org/papers/addendum.php">
Looking Back: Addendum</weblink></entry>
</reflist>
</p>

</sec>
<sec>
<st>
Further reading</st>
<p>

<list>
<entry level="1" type="bullet">

  <cite style="font-style:normal">Lampson, B.&#32;(1973).&#32;"<weblink xlink:type="simple" xlink:href="http://research.microsoft.com/Lampson/11-Confinement/Abstract.html">
A note on the confinement problem</weblink>". <it>Communications of the ACM</it>&#32;<b>16</b>&#32;(10): 613&ndash;615. <document wordnetid="106470073" confidence="0.8">
<written_communication wordnetid="106349220" confidence="0.8">
<writing wordnetid="106362953" confidence="0.8">
<link xlink:type="simple" xlink:href="../994/422994.xml">
doi</link></writing>
</written_communication>
</document>
:<weblink xlink:type="simple" xlink:href="http://dx.doi.org/10.1145%2F362375.362389">
10.1145/362375.362389</weblink>.</cite>&nbsp;.</entry>
<entry level="1" type="bullet">

 NCSC.&#32;"<it>Trusted Computer System Evaluation Criteria</it>". &#32;National Computer Security Center. (a.k.a. the <link xlink:type="simple" xlink:href="../300/6687300.xml">
TCSEC</link> or "Orange Book").</entry>
<entry level="1" type="bullet">

 NCSC.&#32;"<it>Trusted Network Interpretation</it>". &#32;National Computer Security Center. (a.k.a. the <link xlink:type="simple" xlink:href="../485/482485.xml">
TNI</link> or "Red Book"). <weblink xlink:type="simple" xlink:href="http://csrc.nist.gov/secpubs/rainbow/tg005.txt">
http://csrc.nist.gov/secpubs/rainbow/tg005.txt</weblink> </entry>
<entry level="1" type="bullet">

  <cite id="CITEREFSmith2005">Smith, Richard&#32;(2005),&#32;<weblink xlink:type="simple" xlink:href="http://www.cs.stthomas.edu/faculty/resmith/r/mls/index.html">
"Chapter 205: Multilevel security"</weblink>, written at New York, in&#32;Hossein Bidgoli,&#32;<it>Handbook of Information Security, Volume 3, Threats, Vulnerabilities, Prevention, Detection and Management</it>, John Wiley, .&#32;Retrieved on <link xlink:type="simple" xlink:href="../684/19684.xml">
May 21</link>, <link xlink:type="simple" xlink:href="../164/36164.xml">
2006</link></cite> ISBN 0-471-64832-9.</entry>
<entry level="1" type="bullet">

 Patel, D., Collins, R., Vanfleet, W. M., Calloni, B. A., Wilding, M. M., MacLearn, L., &amp; Luke, J. A.&#32;(November 2002).&#32;"<it><weblink xlink:type="simple" xlink:href="http://www.omg.org/docs/security/02-11-02.pdf#search='MSL%20multisecurity%20level'">
Deeply Embedded High Assurance (Multiple Independent Levels of Security/Safety) MILS Architecture</weblink></it>". &#32;Center for research on economic development and policy reform.&#32;Retrieved on <link>
2005-11-06</link>.</entry>
<entry level="1" type="bullet">

P. A. Loscocco, S. D. Smalley, P. A. Muckelbauer, R. C. Taylor, S. J. Turner, and J. F. Farrell. <it><weblink xlink:type="simple" xlink:href="http://www.jya.com/paperF1.htm">
The Inevitability of Failure: The Flawed Assumption of Security in Modern Computing Environments</weblink></it>. In Proceedings of the 21st National Information Systems Security Conference, pages 303–314, Oct. 1998. <weblink xlink:type="simple" xlink:href="http://csrc.nist.gov/nissc/1998/proceedings/paperF1.pdf">
http://csrc.nist.gov/nissc/1998/proceedings/paperF1.pdf</weblink>.</entry>
</list>
</p>


</sec>
</bdy>
</causal_agent>
</worker>
</assistant>
</model>
</person>
</physical_entity>
</article>
