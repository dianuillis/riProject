<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 17.04.2009 00:10:32[mciao0826] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<structure  confidence="0.8" wordnetid="104341686">
<artifact  confidence="0.8" wordnetid="100021939">
<area  confidence="0.8" wordnetid="102735688">
<library  confidence="0.8" wordnetid="103660909">
<room  confidence="0.8" wordnetid="104105893">
<header>
<title>Dynamic loading</title>
<id>10131591</id>
<revision>
<id>240555236</id>
<timestamp>2008-09-23T23:01:02Z</timestamp>
<contributor>
<username>Michael Safyan</username>
<id>3786159</id>
</contributor>
</revision>
<categories>
<category>Computer libraries</category>
<category>Operating system technology</category>
</categories>
</header>
<bdy>

<b>Dynamic loading</b> is a mechanism by which a <link xlink:type="simple" xlink:href="../783/5783.xml">
computer program</link> can, at <link xlink:type="simple" xlink:href="../263/192263.xml">
runtime</link>, load a <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<structure wordnetid="104341686" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<area wordnetid="102735688" confidence="0.8">
<library wordnetid="103660909" confidence="0.8">
<format wordnetid="106636806" confidence="0.8">
<room wordnetid="104105893" confidence="0.8">
<link xlink:type="simple" xlink:href="../421/106421.xml">
library</link></room>
</format>
</library>
</area>
</artifact>
</structure>
</information>
</message>
  (or other <link xlink:type="simple" xlink:href="../392/217392.xml">
binary</link>) into memory, retrieve the addresses of functions and variables contained in the library, execute those functions or access those variables, and unload the <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<structure wordnetid="104341686" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<area wordnetid="102735688" confidence="0.8">
<library wordnetid="103660909" confidence="0.8">
<format wordnetid="106636806" confidence="0.8">
<room wordnetid="104105893" confidence="0.8">
<link xlink:type="simple" xlink:href="../421/106421.xml">
library</link></room>
</format>
</library>
</area>
</artifact>
</structure>
</information>
</message>
 from memory. Unlike <link xlink:type="simple" xlink:href="../227/2692227.xml">
static linking</link> and <link>
delayed loading</link>, this mechanism allows a <link xlink:type="simple" xlink:href="../783/5783.xml">
computer program</link> to startup in the absence of these <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<structure wordnetid="104341686" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<area wordnetid="102735688" confidence="0.8">
<library wordnetid="103660909" confidence="0.8">
<format wordnetid="106636806" confidence="0.8">
<room wordnetid="104105893" confidence="0.8">
<link xlink:type="simple" xlink:href="../421/106421.xml">
libraries</link></room>
</format>
</library>
</area>
</artifact>
</structure>
</information>
</message>
, to discover available <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<structure wordnetid="104341686" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<area wordnetid="102735688" confidence="0.8">
<library wordnetid="103660909" confidence="0.8">
<format wordnetid="106636806" confidence="0.8">
<room wordnetid="104105893" confidence="0.8">
<link xlink:type="simple" xlink:href="../421/106421.xml">
libraries</link></room>
</format>
</library>
</area>
</artifact>
</structure>
</information>
</message>
, and to potentially gain additional functionality. <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref><ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%222%22])">2</ref>
<sec>
<st>
Uses</st>
<p>

Dynamic loading is most frequently used in implementing <link xlink:type="simple" xlink:href="../659/23659.xml">
computer plugins</link> <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref>. For example, the <link xlink:type="simple" xlink:href="../581/2581.xml">
Apache Web Server's</link> *.dso "dynamic shared object" <link xlink:type="simple" xlink:href="../659/23659.xml">
plugin</link> files are <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<structure wordnetid="104341686" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<area wordnetid="102735688" confidence="0.8">
<library wordnetid="103660909" confidence="0.8">
<format wordnetid="106636806" confidence="0.8">
<room wordnetid="104105893" confidence="0.8">
<link xlink:type="simple" xlink:href="../421/106421.xml">
libraries</link></room>
</format>
</library>
</area>
</artifact>
</structure>
</information>
</message>
 which are loaded at runtime with dynamic loading <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%223%22])">3</ref>. Dynamic loading is also used in implementing <link xlink:type="simple" xlink:href="../783/5783.xml">
computer programs</link> where multiple different libraries may supply the requisite functionality and where the user has the option to select which library or libraries to provide.</p>

</sec>
<sec>
<st>
In C/C++</st>
<p>

Not all systems support dynamic loading. <link xlink:type="simple" xlink:href="../642/31642.xml">
UNIX</link>-like operating systems such as <link xlink:type="simple" xlink:href="../640/20640.xml">
Mac OS X</link>, <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../297/6097297.xml">
Linux</link></O>
, and <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../145/46145.xml">
Solaris</link></database>
</wordnet>
</lexical_database>
</electronic_database>
</information>
</message>
 provide dynamic loading with the <link xlink:type="simple" xlink:href="../021/6021.xml">
C programming language</link> "dl" library. The <link xlink:type="simple" xlink:href="../890/18890.xml">
Windows</link> <link xlink:type="simple" xlink:href="../194/22194.xml">
operating system</link> provides dynamic loading through the <link xlink:type="simple" xlink:href="../601/81601.xml">
Windows API</link>.
</p>
<ss1>
<st>
Summary</st>
<p>

<table class="wikitable">
<row>
<header>
Name</header>
<header>
 <link xlink:type="simple" xlink:href="../642/31642.xml">
Standard POSIX/UNIX API</link></header>
<header>
 <link xlink:type="simple" xlink:href="../601/81601.xml">
Microsoft Windows API</link></header>
</row>
<row>
<col>
Header file inclusion</col>
<col>
<list>
<entry level="1" type="number">

include &amp;lt;dlfcn.h&amp;gt;</entry>
</list>
</col>
<col>
<list>
<entry level="1" type="number">

include &amp;lt;windows.h&amp;gt;</entry>
</list>
</col>
</row>
<row>
<col>
Definitions for header</col>
<col>
 dl
(libdl.so, libdl.dylib, etc. depending on the <link xlink:type="simple" xlink:href="../194/22194.xml">
OS</link>)</col>
<col>
Kernel32.dll</col>
</row>
<row>
<col>
Loading the library</col>
<col>
dlopen</col>
<col>
LoadLibraryLoadLibraryEx</col>
</row>
<row>
<col>
Extracting contents</col>
<col>
dlsym</col>
<col>
GetProcAddress</col>
</row>
<row>
<col>
Unloading the library</col>
<col>
dlclose</col>
<col>
FreeLibrary</col>
</row>
</table>
</p>

</ss1>
<ss1>
<st>
Loading the Library</st>
<p>

Loading the library is accomplished with LoadLibrary or LoadLibraryEx on <link xlink:type="simple" xlink:href="../890/18890.xml">
Windows</link> and with dlopen on <link xlink:type="simple" xlink:href="../642/31642.xml">
UNIX</link>-like <link xlink:type="simple" xlink:href="../194/22194.xml">
operating system</link>s. Examples follow:
</p>
<ss2>
<st>
Linux</st>
<p>


void* sdl_library = dlopen("libsdl.so", RTLD_LAZY);
if(sdl_library == NULL) {
   // report error ...
} else {
   // use the result in a call to dlsym
}

</p>
</ss2>
<ss2>
<st>
Mac OS X</st>
<p>

As an <link xlink:type="simple" xlink:href="../642/31642.xml">
UNIX</link> library:

void* sdl_library = dlopen("libsdl.dylib", RTLD_LAZY);
if(sdl_library == NULL) {
   // report error ...
} else {
   // use the result in a call to dlsym
}

As an <link>
OS X Framework</link>:

void* sdl_library = dlopen("/Library/Frameworks/SDL.framework/SDL", RTLD_LAZY);
if(sdl_library == NULL) {
   // report error ...
} else {
   // use the result in a call to dlsym
}

</p>
</ss2>
<ss2>
<st>
Windows</st>
<p>


HMODULE sdl_library = LoadLibrary("SDL.dll");
if( sdl_library == NULL) {
   // report error ...
} else {
   // use the result in a call to GetProcAddress
}
</p>

</ss2>
</ss1>
<ss1>
<st>
Extracting Library Contents</st>
<p>

Extracting the contents of a dynamically loaded library is achieved with GetProcAddress on <link xlink:type="simple" xlink:href="../890/18890.xml">
Windows</link> and with dlsym on <link xlink:type="simple" xlink:href="../642/31642.xml">
UNIX</link>-like <link xlink:type="simple" xlink:href="../194/22194.xml">
operating system</link>s.
</p>
<ss2>
<st>
 UNIX/BSD-like Operating Systems (Linux, Mac OS X, Solaris, etc.) </st>
<p>


void* initializer = dlsym(sdl_library,"SDL_Init");
if(initializer == NULL) {
   // report error ...
} else {
   // cast initializer to its proper type and use
}

</p>
</ss2>
<ss2>
<st>
Windows</st>
<p>


void* initializer = GetProcAddress(sdl_library,"SDL_Init");
if(initializer == NULL) {
   // report error ...
} else {
   // cast initializer to its proper type and use
}
</p>

</ss2>
</ss1>
<ss1>
<st>
Converting Extracted Library Contents</st>
<p>

The <link xlink:type="simple" xlink:href="../038/72038.xml">
C++ programming language</link> prohibits conversion between type void* and a pointer to a function. The following code snippet demonstrates a workaround which allows for this conversion:

typedef int (*sdl_init_function_type)(Uint32);
sdl_init_function_type init_func = *((sdl_init_function_type*)(&amp;initializer));

</p>
</ss1>
<ss1>
<st>
Unloading the Library</st>
<p>

Loading a library causes memory to be allocated; the library must be deallocated in order to avoid a <link xlink:type="simple" xlink:href="../609/19609.xml">
memory leak</link>. Additionally, failure to unload a library can prevent <link xlink:type="simple" xlink:href="../280/1010280.xml">
filesystem</link> operations on the <link xlink:type="simple" xlink:href="../077/7077.xml">
file</link> which contains the library. Unloading the library is accomplished with FreeLibrary on <link xlink:type="simple" xlink:href="../890/18890.xml">
Windows</link> and with dlclose on <link xlink:type="simple" xlink:href="../642/31642.xml">
UNIX</link>-like <link xlink:type="simple" xlink:href="../194/22194.xml">
operating system</link>s.
</p>
<ss2>
<st>
UNIX/BSD-like Operating Systems (Linux, Mac OS X, Solaris, etc.)</st>
<p>


dlclose(sdl_library);

</p>
</ss2>
<ss2>
<st>
Windows</st>
<p>


FreeLibrary(sdl_library);
</p>

</ss2>
</ss1>
<ss1>
<st>
Special Library</st>
<p>

Both <link xlink:type="simple" xlink:href="../890/18890.xml">
Windows</link> and <link xlink:type="simple" xlink:href="../642/31642.xml">
UNIX</link> implementations of dynamic loading allow programmers to extract symbols from the currently executing process. In both of these <link xlink:type="simple" xlink:href="../ury/24th_century.xml">
API</link>s, the currently executing process can be "loaded" such that the result can be used in the same manner as the result from dynamically loading a library with LoadLibrary or dlopen.
</p>
<ss2>
<st>
UNIX/BSD-like Operating Systems (Linux, Mac OS X, Solaris, etc.)</st>
<p>


void* this_process = dlopen(0,0);

</p>
</ss2>
<ss2>
<st>
Windows</st>
<p>


HMODULE this_process;
GetModuleHandleEx(0,0,&amp;this_process);
</p>

</ss2>
</ss1>
</sec>
<sec>
<st>
In Java</st>

<p>

<indent level="1">

<it>Further information: <link xlink:type="simple" xlink:href="../859/7723859.xml">
Java Classloader</link></it>
</indent>
In the <link xlink:type="simple" xlink:href="../881/15881.xml">
Java programming language</link>, <link xlink:type="simple" xlink:href="../392/7392.xml">
classes</link> can be dynamically loaded using the <b><weblink xlink:type="simple" xlink:href="http://java.sun.com/javase/6/docs/api/java/lang/ClassLoader.html">
ClassLoader</weblink></b> object. For example:

Class type = ClassLoader.getSystemClassLoader().loadClass(name);
Object obj = type.newInstance();
</p>

</sec>
<sec>
<st>
See also</st>
<p>

<list>
<entry level="1" type="bullet">

 <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<structure wordnetid="104341686" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<area wordnetid="102735688" confidence="0.8">
<library wordnetid="103660909" confidence="0.8">
<format wordnetid="106636806" confidence="0.8">
<room wordnetid="104105893" confidence="0.8">
<link xlink:type="simple" xlink:href="../421/106421.xml">
Library (computing)</link></room>
</format>
</library>
</area>
</artifact>
</structure>
</information>
</message>
</entry>
<entry level="1" type="bullet">

 <structure wordnetid="104341686" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<area wordnetid="102735688" confidence="0.8">
<library wordnetid="103660909" confidence="0.8">
<room wordnetid="104105893" confidence="0.8">
<link xlink:type="simple" xlink:href="../227/2692227.xml">
Static library</link></room>
</library>
</area>
</artifact>
</structure>
</entry>
<entry level="1" type="bullet">

 <format wordnetid="106636806" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../077/2701077.xml">
Dynamic-link library</link></format>
</entry>
</list>
</p>

</sec>
<sec>
<st>
External links</st>
<p>

<list>
<entry level="1" type="bullet">

 General Links</entry>
<entry level="2" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://linux4u.jinr.ru/usoft/WWW/www_debian.org/Documentation/elf/node7.html">
Dynamic Loading</weblink> on <link>
Linux4U</link></entry>
<entry level="2" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://httpd.apache.org/docs/1.3/dso.html">
Dynamic Shared Object (DSO) Support</weblink> by <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../581/2581.xml">
Apache</link></software>
</entry>
<entry level="1" type="bullet">

 C/C++ UNIX API:</entry>
<entry level="2" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.opengroup.org/onlinepubs/009695399/functions/dlopen.html">
dlopen</weblink></entry>
<entry level="2" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.opengroup.org/onlinepubs/009695399/functions/dlsym.html">
dlsym</weblink></entry>
<entry level="2" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.opengroup.org/onlinepubs/009695399/functions/dlclose.html">
dlclose</weblink></entry>
<entry level="1" type="bullet">

 C/C++ Windows API:</entry>
<entry level="2" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://msdn2.microsoft.com/en-us/library/ms684175.aspx">
LoadLibrary</weblink></entry>
<entry level="2" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://msdn2.microsoft.com/en-us/library/ms683212(VS.85).aspx">
GetProcAddress</weblink></entry>
<entry level="2" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://msdn2.microsoft.com/en-us/library/ms683152(VS.85).aspx">
FreeLibrary</weblink></entry>
<entry level="1" type="bullet">

 Java API:</entry>
<entry level="2" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/ClassLoader.html">
ClassLoader</weblink></entry>
<entry level="2" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/Class.html">
Class</weblink></entry>
</list>
</p>

</sec>
<sec>
<st>
References</st>

<p>

<reflist>
<entry id="1">
<weblink xlink:type="simple" xlink:href="http://sourceware.org/autobook/autobook/autobook_158.html">
Autoconf, Automake, and Libtool: Dynamic Loading</weblink></entry>
<entry id="2">
<weblink xlink:type="simple" xlink:href="http://linux4u.jinr.ru/usoft/WWW/www_debian.org/Documentation/elf/node7.html">
Linux4U: ELF Dynamic Loading</weblink></entry>
<entry id="3">
<weblink xlink:type="simple" xlink:href="http://httpd.apache.org/docs/1.3/dso.html">
Apache 1.3 Dynamic Shared Object (DSO) Support</weblink></entry>
</reflist>
</p>

</sec>
</bdy>
</room>
</library>
</area>
</artifact>
</structure>
</article>
