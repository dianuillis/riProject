<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 18:00:19[mciao0826] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<entity  confidence="0.9511911446218017" wordnetid="100001740">
<header>
<title>Cayley-Purser algorithm</title>
<id>1016345</id>
<revision>
<id>225889059</id>
<timestamp>2008-07-15T21:43:07Z</timestamp>
<contributor>
<username>Jemajoign</username>
<id>7482318</id>
</contributor>
</revision>
<categories>
<category>Asymmetric-key cryptosystems</category>
</categories>
</header>
<bdy>

The <b>Cayley-Purser algorithm</b> was a <link xlink:type="simple" xlink:href="../222/24222.xml">
public-key cryptography</link> <link xlink:type="simple" xlink:href="../775/775.xml">
algorithm</link> published in early <link xlink:type="simple" xlink:href="../553/34553.xml">
1999</link> by 16-year-old <island wordnetid="109316454" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../575/147575.xml">
Irishwoman</link></island>
 <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<mathematician wordnetid="110301261" confidence="0.8">
<link xlink:type="simple" xlink:href="../380/360380.xml">
Sarah Flannery</link></mathematician>
</scientist>
</causal_agent>
</person>
</physical_entity>
, based on an unpublished work by <link>
Michael Purser</link>, founder of <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../845/741845.xml">
Baltimore Technologies</link></company>
, a <site wordnetid="108651247" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../504/8504.xml">
Dublin</link></site>
 data security company. Flannery named it for <link xlink:type="simple" xlink:href="../902/18902.xml">
mathematician</link> <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../034/311034.xml">
Arthur Cayley</link></scientist>
</person>
. It has since been found to be flawed as a public-key algorithm, but was the subject of considerable media attention.
<sec>
<st>
 History </st>

<p>

During a work-experience placement with Baltimore Technologies, Flannery was shown an unpublished paper by Michael Purser which outlined a new <link xlink:type="simple" xlink:href="../222/24222.xml">
public-key</link> cryptographic scheme using <link xlink:type="simple" xlink:href="../390/294390.xml">
non-commutative</link> multiplication. She was asked to write an implementation of this scheme in <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../024/49024.xml">
Mathematica</link></software>
.</p>
<p>

Before this placement, Flannery had attended the 1998 <link xlink:type="simple" xlink:href="../374/360374.xml">
ESAT Young Scientist and Technology Exhibition</link> with a project describing already existing crytographic techniques from <cipher wordnetid="106254239" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../405/48405.xml">
Caesar cipher</link></cipher>
 to <link xlink:type="simple" xlink:href="../385/25385.xml">
RSA</link>. This had won her the Intel Student Award which included the opportunity to compete in the 1998 <link xlink:type="simple" xlink:href="../522/1889522.xml">
Intel International Science and Engineering Fair</link> in the United States. Feeling that she needed some original work to add to her exhibition project, Flannery asked Michael Purser for permission to include work based on his cryptographic scheme. </p>
<p>

On advice from her mathematician father, Flannery decided to use <link xlink:type="simple" xlink:href="../728/19008728.xml">
matrices</link> to implement Purser's scheme as <link xlink:type="simple" xlink:href="../280/125280.xml">
matrix multiplication</link> has the necessary property of being non-commutative. As the resulting algorithm would depend on multiplication it would be a great deal faster than the <link xlink:type="simple" xlink:href="../385/25385.xml">
RSA</link> algorithm which uses an <link xlink:type="simple" xlink:href="../491/99491.xml">
exponent</link>ial step. For her Intel Science Fair project Flannery prepared a demonstration where the same plaintext was enciphered using both RSA and her new Cayley-Purser algorithm and it did indeed show a significant time improvement.</p>
<p>

Returning to the ESAT Young Scientist and Technology Exhibition in 1999, Flannery formalised Cayley-Purser's runtime and analyzed a variety of known attacks, none of which were determined to be effective.</p>
<p>

Flannery did not make any claims that the Cayley-Purser algorithm would replace RSA, knowing that any new cryptographic system would need to stand the test of time before it could be acknowledged as a secure system. The media were not so circumspect however and when she received first prize at the ESAT exhibition, newspapers around the world reported the story that a young girl genius had revolutionised cryptography.</p>
<p>

In fact an attack on the algorithm was discovered shortly afterwards but she analyzed it and included it as an appendix in later competitions, including a Europe-wide competition in which she won a major award.</p>

</sec>
<sec>
<st>
 Overview </st>

<p>

Notation used in this discussion is as in Flannery's original paper.</p>

<ss1>
<st>
 Key generation </st>

<p>

Like <link xlink:type="simple" xlink:href="../385/25385.xml">
RSA</link>, Cayley-Purser begins by generating two large primes <it>p</it> and <it>q</it> and their product <it>n</it>, a <link xlink:type="simple" xlink:href="../542/339542.xml">
semiprime</link>. Next, consider <link xlink:type="simple" xlink:href="../564/113564.xml">
GL</link>(2,<it>n</it>), the <link xlink:type="simple" xlink:href="../564/113564.xml">
general linear group</link> of 2&amp;times;2 matrices with integer elements and <link xlink:type="simple" xlink:href="../087/20087.xml">
modular arithmetic</link> mod <it>n</it>. For example, if <it>n</it>=5, we could write:</p>
<p>

<indent level="1">

<math>\left[\begin{matrix}0 &amp; 1 \\ 2 &amp; 3\end{matrix}\right] +
\left[\begin{matrix}1 &amp; 2 \\ 3 &amp; 4\end{matrix}\right] =
\left[\begin{matrix}1 &amp; 3 \\ 5 &amp; 7\end{matrix}\right] =
\left[\begin{matrix}1 &amp; 3 \\ 0 &amp; 2\end{matrix}\right]</math>
</indent>
:<math>\left[\begin{matrix}0 &amp; 1 \\ 2 &amp; 3\end{matrix}\right]\left[\begin{matrix}1 &amp; 2 \\ 3 &amp; 4\end{matrix}\right] =
\left[\begin{matrix}3 &amp; 4 \\ 11 &amp; 16\end{matrix}\right] =
\left[\begin{matrix}3 &amp; 4 \\  1 &amp;  1\end{matrix}\right]</math></p>
<p>

This group is chosen because it has large order for large semiprime <it>n</it>, equal to:</p>
<p>

<indent level="1">

<math>n\phi(n)^2(p+1)(q+1)</math>
</indent>

where <math>\phi</math> is <mathematical_relation wordnetid="113783581" confidence="0.8">
<function wordnetid="113783816" confidence="0.8">
<link xlink:type="simple" xlink:href="../452/53452.xml">
Euler's totient function</link></function>
</mathematical_relation>
.</p>
<p>

Let <math>\chi</math> and <math>\alpha</math> be two such matrices from GL(2,<it>n</it>) chosen such that <math>\chi\alpha^{-1} \not= \alpha\chi</math>. Choose some natural number <it>r</it> and compute:</p>
<p>

<indent level="1">

<math>\beta = \chi^{-1}\alpha^{-1}\chi,</math>
</indent>
:<math>\gamma = \chi^r.</math></p>
<p>

The public key is <math>n</math>, <math>\alpha</math>, <math>\beta</math>, and <math>\gamma</math>. The private key is <math>\chi</math>.</p>

</ss1>
<ss1>
<st>
 Encryption </st>

<p>

The sender begins by generating a random natural number <it>s</it> and computing:</p>
<p>

<indent level="1">

<math>\delta = \gamma^s</math>
</indent>
:<math>\epsilon = \delta^{-1}\alpha\delta</math>
<indent level="1">

<math>\kappa = \delta^{-1}\beta\delta</math>
</indent>

Then, to encrypt a message, each message block is encoded as a number (as in RSA) and they are placed four at a time as elements of a plaintext matrix <math>\mu</math>. Each <math>\mu</math> is encrypted using:</p>
<p>

<indent level="1">

<math>\mu' = \kappa\mu\kappa.</math>
</indent>

Then <math>\mu'</math> and <math>\epsilon</math> are sent to the receiver.</p>

</ss1>
<ss1>
<st>
 Decryption </st>

<p>

The receiver recovers the original plaintext matrix <math>\mu</math> via:</p>
<p>

<indent level="1">

<math>\lambda = \chi^{-1}\epsilon\chi,</math>
</indent>
:<math>\mu = \lambda\mu'\lambda.</math></p>

</ss1>
</sec>
<sec>
<st>
 Security </st>

<p>

Recovering the private key <math>\chi</math> from <math>\gamma</math> is computationally infeasible, at least as hard as finding square roots mod <it>n</it> (see <link xlink:type="simple" xlink:href="../091/200091.xml">
quadratic residue</link>). It could be recovered from <math>\alpha</math> and <math>\beta</math> if the system <math>\chi\beta = \alpha^{-1}\chi</math> could be solved, but the number of solutions to this system is large as long as elements in the group have a large order, which can be guaranteed for almost every element. </p>
<p>

However, the system was broken when a method for finding a multiple <math>\chi'</math> of <math>\chi</math> using the public parameters by solving the congruence:</p>
<p>

<indent level="1">

<math>\delta\left(\beta_{11}^{-1} - \alpha_{11}\right) \equiv \epsilon \pmod n</math>
</indent>

for <math>\delta</math>, where <math>\alpha_{11}, \beta_{11}</math> are the top-left elements of <math>\alpha, \beta</math>. Since any multiple of <math>\chi</math> can be used to decipher, this presents a fatal weakness for the system that has not yet been reconciled.</p>
<p>

This flaw does not preclude the algorithm's use as a mixed private-key/public-key algorithm, if the sender transmits <math>\epsilon</math> secretly, but this approach presents no advantage over the common approach of transmitting a <link xlink:type="simple" xlink:href="../042/53042.xml">
symmetric encryption</link> key using a public-key encryption scheme and then switching to symmetric encryption, which is faster than Cayley-Purser.</p>

</sec>
<sec>
<st>
 References </st>

<p>

<list>
<entry level="1" type="bullet">

 Sarah Flannery. <weblink xlink:type="simple" xlink:href="http://cryptome.org/flannery-cp.htm">
Cryptography: An Investigation of a New Algorithm vs. the RSA</weblink>. (<weblink xlink:type="simple" xlink:href="http://cryptome.org/flannery-cp.pdf">
original pdf</weblink>)</entry>
<entry level="1" type="bullet">

 Sarah Flannery and David Flannery. <it>In Code: A Mathematical Journey</it>. ISBN 0-7611-2384-9</entry>
</list>
</p>


</sec>
</bdy>
</entity>
</article>
