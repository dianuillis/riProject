<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 18:01:13[mciao0827] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<system  confidence="0.8" wordnetid="104377057">
<artifact  confidence="0.8" wordnetid="100021939">
<instrumentality  confidence="0.8" wordnetid="103575240">
<header>
<title>Worst-case execution time</title>
<id>1029051</id>
<revision>
<id>239272266</id>
<timestamp>2008-09-18T13:25:58Z</timestamp>
<contributor>
<username>Collectonian</username>
<id>181614</id>
</contributor>
</revision>
<categories>
<category>Real-time computing</category>
<category>Embedded systems</category>
<category>Analysis of algorithms</category>
</categories>
</header>
<bdy>

The <b>worst-case execution time</b> (<b>WCET</b>) of a <link xlink:type="simple" xlink:href="../926/5926.xml">
computation</link>al task is the maximum length of time the task could take to execute on a specific <link xlink:type="simple" xlink:href="../615/13615.xml">
hardware</link> platform. Knowing worst-case execution times is of prime importance for the schedulability analysis of hard <link xlink:type="simple" xlink:href="../767/25767.xml">
real-time system</link>s.
<sec>
<st>
Analysis structure</st>

<p>

Timing analysis is in general performed on two levels: 
<list>
<entry level="1" type="bullet">

 WCET analysis </entry>
<entry level="1" type="bullet">

 Higher-level/system-level analysis</entry>
</list>
</p>
<p>

WCET analysis considers the execution time of an isolated task. At this level, activities other than ones related to the considered task are ignored. Tasks are assumed never to <link xlink:type="simple" xlink:href="../612/12053612.xml">
block</link> or to be <link xlink:type="simple" xlink:href="../289/15289.xml">
interrupt</link>ed (blocking is dealt with by the schedulability analysis). </p>
<p>

At the higher level, the overall system performance is analyzed, given the results of the WCET analysis for each task or program in the system. Multiple tasks are usually assumed to execute on a single <link xlink:type="simple" xlink:href="../218/5218.xml">
processor</link> and compete for resources, and thus possibly block while attempting to access the resources. The most common type of analysis here is schedulability analysis: for example, <link xlink:type="simple" xlink:href="../731/7564731.xml">
fixed-priority</link> analysis or <link xlink:type="simple" xlink:href="../055/233055.xml">
rate-monotonic scheduling</link> analysis. The tightness, or precision of schedulability analysis relies on the accuracy of the WCET analysis. If the WCET values are pessimistic (greater than any execution time that can occur in a running system) then the scheduler will be forced to allocate more time to those tasks than actually required.</p>
<p>

A static WCET analysis tool should be able to work at a high-level to determine the structure of a <link xlink:type="simple" xlink:href="../783/5783.xml">
program</link>'s task, working either on a piece of <link xlink:type="simple" xlink:href="../661/27661.xml">
source code</link> or disassembled binary <link xlink:type="simple" xlink:href="../392/217392.xml">
executable</link>. But it should also work at a low-level, using timing information about the real <link xlink:type="simple" xlink:href="../615/13615.xml">
hardware</link> that the task will execute on, with all its specific features. By combining those two kinds of analysis, the tool should give an upper bound on the time required to execute a given task on a given hardware platform.</p>
<p>

At the low-level, static WCET analysis is complicated by the presence of architectural features that improve the performance of the <link xlink:type="simple" xlink:href="../218/5218.xml">
processor</link>: instruction/data <link xlink:type="simple" xlink:href="../829/6829.xml">
cache</link>s, <link xlink:type="simple" xlink:href="../129/416129.xml">
branch prediction</link> and <link xlink:type="simple" xlink:href="../187/1236187.xml">
instruction pipeline</link>s for example. It is possible to determine tight WCET bounds if these modern architectural features are taken into account in the timing model used by the analysis.</p>
<p>

Besides static analysis approaches, which have dominated research in the area since the late 1980s, dynamic or measurement-based approaches have recently entered the research arena. The motivation cited by researchers in this branch is that computing hardware (the CPU in particular) has reached a complexity which is extremely hard to model, in particular because the modelling process can introduce errors from several sources: errors in chip design, lack of documentation, errors in documentation, errors in model creation; all leading to cases where the model predicts a different behavior to that observed on real hardware. On the other hand, measurement based approaches are also considered to be potentially inaccurate, because they rely on observing the worst-case effects during testing. Measurement-based approaches usually try to measure the execution times of short code segments (basic blocks) and then use static analysis methods to compute the worst case behavior of the code as a whole. This is driven by the philosophy that the WCET of a basic block is easily measured, but creating a test case in which each block on the worst case path is exercised is extremely difficult.  </p>
<p>

Historically industry has either used end-to-end measurements with an added safety margin for soft-real-time systems, or manual static analysis on simple hardware for safety critical systems. Recently industry has shown more interest in research into automated methods of calculating WCET. Complexity is increasingly becoming an issue in manual analysis and safety margins have become a liability in soft-real-time systems: they are either too generous, increasing the cost of the device, or too tight, causing device failure. In the future, it is likely that a requirement for safety critical systems is that they are analyzed using both static and measurement-based approaches.</p>

</sec>
<sec>
<st>
Research groups</st>

<p>

The most active research groups are in Sweden (Mälardalen, Linköping), Germany (Saarbrücken, Dortmund, Braunschweig), France (Toulouse, Rennes), Austria (Vienna), UK (York), Italy (Bologna), Spain (Cantabria, Valencia), and Switzerland (Zurich).  Recently, the topic of code-level timing analysis has found more attention outside of Europe by research groups in the US (North Carolina, Florida), Australia, and Singapore.</p>

</sec>
<sec>
<st>
WCET Tool Challenge</st>

<p>

The first international WCET Tool Challenge took place during the autumn of 2006. It was organized by the <link>
University of Mälardalen</link> and sponsored by the ARTIST2 Network of Excellence on Embedded Systems Design. The aim of the Challenge was to inspect and to compare different approaches in analyzing the worst-case execution time. All available tools and prototypes able to determine safe upper bounds for the WCET of tasks have participated. The <weblink xlink:type="simple" xlink:href="http://home.versanet.de/~lt-422029/WCETToolChallengep_Extl.pdf">
final results</weblink> were presented in November 2006 at the <link xlink:type="simple" xlink:href="../394/311394.xml">
ISoLA 2006</link> International Symposium in <site wordnetid="108651247" confidence="0.9508927676800064">
<city wordnetid="108524735" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../877/597877.xml">
Paphos</link></city>
</site>
, Cyprus.</p>
<p>

A second Challenge took place in 2008 <weblink xlink:type="simple" xlink:href="http://www.mrtc.mdh.se/projects/WCC08/">
http://www.mrtc.mdh.se/projects/WCC08/</weblink>.</p>

</sec>
<sec>
<st>
See also</st>
<p>

<list>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../578/44578.xml">
Big O notation</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../779/225779.xml">
Optimization (computer science)</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../956/37956.xml">
Best and worst cases</link></entry>
</list>
</p>



</sec>
<sec>
<st>
Articles and white papers</st>
<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://moss.csc.ncsu.edu/~mueller/ftp/pub/mueller/papers/1257.pdf">
The Worst-Case Execution Time Problem - Overview of Methods and Survey of Tools</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://ls12-www.cs.uni-dortmund.de/publications/papers/2007-codes+isss_1.pdf">
Compile-Time Decided Instruction Cache Locking Using Worst-Case Execution Paths (PDF)</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://ls12-www.cs.uni-dortmund.de/publications/papers/2007-codes+isss_2.pdf">
Influence of Procedure Cloning on WCET Prediction (PDF)</weblink></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.absint.com/aiT_WCET.pdf">
Worst-Case Execution Time Prediction by Static Program Analysis (PDF)</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://artist.cs.uni-sb.de/WCET05/Papers/WCET2005Proceedings.pdf">
Proceedings of WCET 2005, the 5th International Workshop on Worst-Case Execution Time Analysis, Satellite Event to ECRTS'05 (PDF)</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://home.versanet.de/~lt-422029/WCETToolChallengep_Extl.pdf">
WCET Tool Challenge 2006 final report (PDF)</weblink> </entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.mrtc.mdh.se/publications/1037.pdf">
Static WCET Analysis of Task-Oriented Code for Construction Vehicles (PDF)</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.mrtc.mdh.se/publications/0974.pdf">
Applying Static WCET Analysis to Automotive Communication Software (PDF)</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.mrtc.mdh.se/publications/0978.pdf">
Evaluation of Static Time Analysis for CC Systems (PDF)</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.mrtc.mdh.se/publications/0796.pdf">
Static Timing Analysis of Real-Time Operating System Code (PDF)</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.mrtc.mdh.se/publications/0738.pdf">
Evaluating Static WCET Analysis for a Commercial RTOS (PDF)</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://drops.dagstuhl.de/opus/volltexte/2006/673/pdf/WCET_Falk.673.pdf">
Design of a WCET-Aware C Compiler (PDF)</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.absint.com/aiT_airbus.pdf">
Airbus France: Computing the WCET of an Avionics Program by Abstract Interpretation (PDF)</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="ftp://ftp.irit.fr/IRIT/TRACES/6278_ERTS06.pdf">
OTAWA, a Framework for Experimenting WCET Computations (PDF)</weblink></entry>
</list>
</p>


</sec>
</bdy>
</instrumentality>
</artifact>
</system>
</article>
