<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 18:03:18[mciao0826] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>Canonicalization</title>
<id>1046120</id>
<revision>
<id>241343095</id>
<timestamp>2008-09-27T16:06:51Z</timestamp>
<contributor>
<username>Polletfa</username>
<id>867586</id>
</contributor>
</revision>
<categories>
<category>Computing terminology</category>
</categories>
</header>
<bdy>

<indent level="1">

<it>Not to be confused with <link xlink:type="simple" xlink:href="../097/6097.xml">
Canonization</link>.</it>
</indent>

In <link xlink:type="simple" xlink:href="../323/5323.xml">
computer science</link>, <b>canonicalization</b> (abbreviated <b>c14n</b>, where 14 represents the number of letters between the C and the N) is a process for converting <link xlink:type="simple" xlink:href="../040/18985040.xml">
data</link> that has more than one possible representation into a "standard" <link xlink:type="simple" xlink:href="../150/328150.xml">
canonical</link> representation.  This can be done to compare different representations for equivalence, to count the number of distinct data structures, to improve the efficiency of various <link xlink:type="simple" xlink:href="../775/775.xml">
algorithm</link>s by eliminating repeated calculations, or to make it possible to impose a meaningful <link xlink:type="simple" xlink:href="../656/144656.xml">
sorting</link> order.
<sec>
<st>
 Examples </st>

<ss1>
<st>
 Links in Wikipedia </st>
<p>

As an example, <web_site wordnetid="106359193" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../734/5043734.xml">
Wikipedia</link></web_site>
 uses canonicalization in its processing of links between articles (see ).  The first letter in the article name is capitalized, leading and trailing spaces are removed, and embedded whitespace is replaced by underscores.  For example:
[[Egg_salad]]
[[egg salad]]
[[  egg_salad  ]]
all refer to the same article.</p>

</ss1>
<ss1>
<st>
 Web servers </st>

<p>

Canonicalization of filenames is important for computer security.  For example, a web server may have a security rule stating "only execute files under the cgi directory (C:\inetpub\wwwroot\cgi-bin)".  The rule is enforced by checking that the path starts with "C:\inetpub\wwwroot\cgi-bin\", and if it does, the file is executed.</p>
<p>

Should "C:\inetpub\wwwroot\cgi-bin\..\..\..\Windows\System32\cmd.exe" be executed? No, because this trick path goes back up the directory hierarchy, not staying within cgi-bin.  Accepting it at face value would be an error due to failure to canonicalize the filename to a unique (simplest) representation, namely: C:\Windows\System32\cmd.exe, before doing the path check. This type of fault is called a <link xlink:type="simple" xlink:href="../396/2324396.xml">
directory traversal</link> vulnerability.</p>

</ss1>
<ss1>
<st>
 Unicode </st>

<p>

<link xlink:type="simple" xlink:href="../707/7280707.xml">
Variable-length encoding</link>s in the <link xlink:type="simple" xlink:href="../742/31742.xml">
Unicode</link> standard, in particular <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<format wordnetid="106636806" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../188/32188.xml">
UTF-8</link></database>
</wordnet>
</format>
</lexical_database>
</electronic_database>
</information>
</message>
, have more than one possible encoding for most common characters <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref>.  This makes string validation more complicated, since every possible encoding of each string character must be considered.  A software implementation which does not consider all character encodings runs the risk of accepting strings considered invalid in the application design, which could cause bugs or allow attacks.  The solution is to allow a single encoding for each character.  Canonicalization is then the process of translating every string character to its single allowed encoding.  An alternative is for software to determine whether a string is canonicalized, and then reject it if it is not.  In this case, in a client/server context, the canonicalization would be the responsibility of the client.</p>

</ss1>
</sec>
<sec>
<st>
 Canonicalization in mathematics </st>

<p>

In mathematics, objects are sometimes converted to canonical forms.  One application is in combinatorics, where the number of canonical forms can be counted.  The technique of <link xlink:type="simple" xlink:href="../736/383736.xml">
general position</link> in <link xlink:type="simple" xlink:href="../446/18973446.xml">
geometry</link> is similar: many proofs begin by showing that an arbitrary object under consideration can be rearranged so that its points are arranged in a convenient manner. </p>
<p>

Canonical forms are also used in <link xlink:type="simple" xlink:href="../636/19636.xml">
mathematical logic</link>.  A <link xlink:type="simple" xlink:href="../382/4230382.xml">
first-order formula</link> can be put into many standards forms, including <link xlink:type="simple" xlink:href="../068/421068.xml">
prenex normal form</link>, <link xlink:type="simple" xlink:href="../342/73342.xml">
conjunctive normal form</link>, <link xlink:type="simple" xlink:href="../341/73341.xml">
disjunctive normal form</link>, and <link xlink:type="simple" xlink:href="../680/1048680.xml">
algebraic normal form</link>.</p>

</sec>
<sec>
<st>
 References </st>

<p>

<reflist>
<entry id="1">
http://www.ietf.org/rfc/rfc2279.txt</entry>
</reflist>
</p>

</sec>
<sec>
<st>
 See also </st>

<p>

<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../562/202562.xml">
Normal form</link></entry>
</list>
</p>


</sec>
</bdy>
</article>
