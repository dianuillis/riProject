<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 17.04.2009 00:11:02[mciao0828] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<attack  confidence="0.9511911446218017" wordnetid="100972621">
<header>
<title>Fluhrer, Mantin, and Shamir attack</title>
<id>10461532</id>
<revision>
<id>201621659</id>
<timestamp>2008-03-28T17:45:57Z</timestamp>
<contributor>
<username>Rossrs</username>
<id>39836</id>
</contributor>
</revision>
<categories>
<category>Articles with Alice and Bob explanations</category>
<category>Cryptographic attacks</category>
</categories>
</header>
<bdy>

In <link xlink:type="simple" xlink:href="../432/18934432.xml">
cryptography</link>, the <b>Fluhrer, Mantin, and Shamir attack</b> allows an attacker to recover the key in an <cipher wordnetid="106254239" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../831/25831.xml">
RC4</link></cipher>
 encrypted stream from a large number of messages in that stream.
<sec>
<st>
Background</st>
<p>

The <link>
Fluhrer</link>, <link>
Mantin</link> and <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../314/57314.xml">
Shamir</link></scientist>
</person>
 (FMS) attack takes advantage of a weakness in the RC4 <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../603/609603.xml">
key scheduling</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
 algorithm to reconstruct the key from a number of collected encrypted messages. The FMS attack gained popularity in tools such as <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../399/2222399.xml">
AirSnort</link></software>
 and <link xlink:type="simple" xlink:href="../113/5059113.xml">
aircrack</link>, both of which attack <link xlink:type="simple" xlink:href="../055/145055.xml">
WEP</link> encrypted wireless networks.</p>
<p>

For this discussion, we will use the below RC4 key scheduling algorithm (KSA).</p>
<p>

begin ksa(with int keylength, with byte key[keylength])
for i from 0 to 255
S[i] := i
endfor
j := 0
for i from 0 to 255
j := (j + S[i] + key[i mod keylength]) mod 256
swap(S[i],S[j])
endfor
end</p>
<p>

We will also use the below pseudo-random generation algorithm (PRGA).</p>
<p>

begin prga(with byte S[256])
i := 0
j := 0
while GeneratingOutput:
i := (i + 1) mod 256
j := (j + S[i]) mod 256
swap(S[i],S[j])
output S[(S[i] + S[j]) mod 256]
endwhile
end</p>

</sec>
<sec>
<st>
 The Attack </st>
<p>

The basis of the FMS attack lies in the use of weak <link xlink:type="simple" xlink:href="../971/105971.xml">
initialization vector</link>s (IVs) used with RC4.  RC4 encrypts one byte at a time with a <link xlink:type="simple" xlink:href="../065/10441065.xml">
keystream</link> output from <it>prga()</it>; RC4 uses the key to initialize a <link xlink:type="simple" xlink:href="../931/10931.xml">
state machine</link> via <it>ksa()</it>, and then continuously modifies the state and generates a new byte of the keystream from the new state.  Theoretically, the key stream functions as a random <link xlink:type="simple" xlink:href="../210/22210.xml">
one time pad</link>, as a <link xlink:type="simple" xlink:href="../524/45524.xml">
pseudo-random number generator</link> controls the output at each step.</p>
<p>

With certain IVs, an <link xlink:type="simple" xlink:href="../079/679079.xml">
attacker</link> knowing the <it>m</it>th byte of the keystream can derive the <it>m+1</it>th byte due to a weakness in the PRNG used to generate the keystream.  Because the first byte of the plaintext comes from the WEP <message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<link xlink:type="simple" xlink:href="../095/1779095.xml">
SNAP</link></rule>
</direction>
</protocol>
</message>
 header, an attacker can assume she can derive the first byte of the keystream from <math>B \oplus 0xAA</math>.  From there, she only needs an IV in the form <math>\left (a+3, n-1, x\right )</math> for key index <math>a</math> origin 0, element value space <math>n</math> (256 since 8 bits make a byte), and any <math>X</math>.  To start, the attacker needs IVs of <math>\left (3, 255, x\right )</math>.  WEP uses 24-bit IVs, making each value one byte long.</p>
<p>

To start, the attacker utilizes the IV as the first 3 elements in <it>K</it>.  She fills the S-box <it>S</it> with sequential values from 0 to <math>n</math> as RC4 does when initializing the S-box from a known <it>K</it>.  She then performs the first 3 iterations of <it>ksa()</it> to begin initializing the S-box.</p>
<p>

After the third step, the attacker can possibly, but not definitely, derive the fourth byte of the key using the keystream output <math>O</math> by computing <math>\left (O - j - S\left [i\right ]\right ) \bmod n = K\left [i\right ]</math>, with the value <math>i = 3</math> at this step.</p>
<p>

At this point, the attacker does not yet have the fourth byte of the key.  This algorithm does not regenerate the next byte of the key; it generates a possible value of the key.  By collecting multiple messages&mdash;for example WEP packets&mdash;and repeating these steps, she will generate a number of different possible values.  The correct value appears significantly more frequently than any other; the attacker can determine the value of the key by recognizing this value and selecting it as the next byte.  At this point, she can start the attack over again on the fifth byte of the key.</p>
<p>

Although the attacker cannot attack words of the key out of order, she can store messages for later sequential attack on later words once she knows earlier words.  Again, she only needs messages with weak IVs, and can discard others.  Through this process, she can gather a large number of messages for attack on the entire key; in fact, she can store only a short portion of the beginning of those messages, just enough to carry the attack out as far as the word of the key the IV will allow her to attack.</p>

</sec>
<sec>
<st>
 References </st>
<p>

<list>
<entry level="1" type="bullet">

 </entry>
</list>
</p>


<p>

<table style=";" class="navbox" cellspacing="0">
<row>
<col style="padding:2px;">
<table style="width:100%;background:transparent;color:inherit;;" class="nowraplinks  " cellspacing="0">
<row>
<col colspan="2" style="width:100%;padding:0px;;;" class="navbox-list navbox-even">
<table style="width:100%;;;;" class="nowraplinks  navbox-subgroup" cellspacing="0">
<row>
<header colspan="2" style=";background:#ccf;" class="navbox-title">
&nbsp;<link xlink:type="simple" xlink:href="../432/18934432.xml">
Cryptography</link></header>
</row>
<row style="height:2px;">

</row>
<row>
<col colspan="2" style="width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<link xlink:type="simple" xlink:href="../066/520066.xml">
History of cryptography</link> | <link xlink:type="simple" xlink:href="../715/5715.xml">
Cryptanalysis</link> | 
Cryptography portal | <link xlink:type="simple" xlink:href="../585/449585.xml">
Topics in cryptography</link></col>
</row>
<row style="height:2px">

</row>
<row>
<col colspan="2" style="width:100%;padding:0px;;;" class="navbox-list navbox-even">
<event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../042/53042.xml">
Symmetric-key algorithm</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
 | <link xlink:type="simple" xlink:href="../594/4594.xml">
Block cipher</link> | <link xlink:type="simple" xlink:href="../007/49007.xml">
Stream cipher</link> | <link xlink:type="simple" xlink:href="../222/24222.xml">
Public-key cryptography</link> | <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<primitive wordnetid="109627462" confidence="0.8">
<link xlink:type="simple" xlink:href="../526/439526.xml">
Cryptographic hash function</link></primitive>
</causal_agent>
</person>
</physical_entity>
 | <link xlink:type="simple" xlink:href="../523/567523.xml">
Message authentication code</link> | <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../249/182249.xml">
Random numbers</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
 | <link xlink:type="simple" xlink:href="../733/28733.xml">
Steganography</link></col>
</row>
</table>
</col>
</row>
</table>
</col>
</row>
</table>
</p>


</sec>
</bdy>
</attack>
</article>
