<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 17.04.2009 00:18:28[mciao0825] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>Application delivery network</title>
<id>10476514</id>
<revision>
<id>240198072</id>
<timestamp>2008-09-22T10:27:46Z</timestamp>
<contributor>
<username>Beetstra</username>
<id>855858</id>
</contributor>
</revision>
<categories>
<category>Networks</category>
</categories>
</header>
<bdy>

An <b>Application Delivery Network</b> (ADN) is a suite of technologies that, when deployed together, provide application availability, security, and acceleration. At the core of an ADN is the Application Delivery Controller (ADC), an advanced traffic management device that is often also referred to as a web switch, content switch, or multilayer switch, the purpose of which is to distribute traffic among a number of servers or geographically dislocated sites based on application specific criterion. <p>

The ADN evolved from <link xlink:type="simple" xlink:href="../110/235110.xml">
layer 4-7 switches</link> in the late <link xlink:type="simple" xlink:href="../635/34635.xml">
1990</link>s when it became apparent that traditional load balancing techniques were not robust enough to handle the increasingly complex mix of application traffic being delivered over a wider variety of network connectivity options. </p>

<sec>
<st>
 Application delivery techniques </st>

<p>

The Internet was designed according to the end-to-end principle <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref>. This principle keeps the core network relatively simple and moves the intelligence as much as possible to the network end-points: the hosts and clients. An Application Delivery Network (ADN) enhances the delivery of applications across the Internet by employing a number of optimization techniques. Many of these techniques are based on established best-practices employed to efficiently route traffic at the network layer including redundancy and load balancing <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%222%22])">2</ref> </p>
<p>

In theory, an Application Delivery Network (ADN) is closely related to a <link xlink:type="simple" xlink:href="../860/880860.xml">
content delivery network</link>. The difference between the two delivery networks lies in the intelligence of the ADN to understand and optimize applications, usually referred to as application fluency <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%223%22])">3</ref>.</p>
<p>

Application delivery uses one or more <link xlink:type="simple" xlink:href="../110/235110.xml">
layer 4–7 switches</link>, also known as a web switch, content switch, or multilayer switch to intelligently distribute traffic to a pool, also known as a cluster or farm, of servers. The application delivery controller (ADC) is assigned a single virtual IP address (VIP) that represents the pool of servers. Traffic arriving at the ADC is then directed to one of the real <link xlink:type="simple" xlink:href="../455/33455.xml">
web servers</link> based on a number of factors including application specific data values, application transport protocol, availability of servers, current performance metrics, and client-specific parameters. An ADN provides the advantages of load distribution, increase in capacity of servers, improved scalability, security, and increased reliability through application specific health checks.</p>
<p>

Increasingly the ADN comprises a redundant pair of ADC on which is integrated a number of different feature sets designed to provide security, availability, reliability, and acceleration functions. In some cases these devices are still separate entities, deployed together as a network of devices through which application traffic is delivered, each providing specific functionality that enhances the delivery of the application.</p>

</sec>
<sec>
<st>
ADN optimization techniques</st>

<ss1>
<st>
TCP multiplexing</st>

<p>

TCP Multiplexing is loosely based on established <link xlink:type="simple" xlink:href="../352/2231352.xml">
connection pooling</link> techniques utilized by application server platforms to optimize the execution of database queries from within applications. An ADC establishes a number of connections to the servers in its pool and keeps the connections open. When a request is received by the ADC from the client, the request is evaluated and then directed to a server over an existing connection. This has the effect of reducing the overhead imposed by establishing and tearing down the <link xlink:type="simple" xlink:href="../538/30538.xml">
TCP</link> connection with the server, improving the responsiveness of the application. </p>
<p>

Some ADN implementations take this technique one step further and also multiplex HTTP and application requests. This has the benefit of executing requests in parallel, which enhances the performance of the application.</p>

</ss1>
<ss1>
<st>
TCP optimization</st>

<p>

There are a number of RFCs which describe mechanisms for improving the performance of TCP. Many ADN implement these RFCs in order to provide enhanced delivery of applications through more efficient use of TCP. </p>
<p>

The RFCs most commonly implemented are: </p>
<p>

<list>
<entry level="1" type="bullet">

 Delayed Acknowledgements <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%224%22])">4</ref></entry>
<entry level="1" type="bullet">

 Nagle Algorithm <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%225%22])">5</ref></entry>
<entry level="1" type="bullet">

 Selective Acknowledgements<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%226%22])">6</ref><ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%227%22])">7</ref></entry>
<entry level="1" type="bullet">

 Explicit Congestion Notification ECN<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%228%22])">8</ref><ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%229%22])">9</ref></entry>
<entry level="1" type="bullet">

 Limited and Fast Retransmits<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2210%22])">10</ref><ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2211%22])">11</ref></entry>
<entry level="1" type="bullet">

 Adaptive Initial Congestion Windows<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2212%22])">12</ref></entry>
</list>
</p>

</ss1>
<ss1>
<st>
Data compression and caching</st>

<p>

ADNs also provide optimization of application data through caching and compression techniques. There are two types of compression used by ADNs today: industry standard HTTP compression and proprietary data reduction algorithms. It is important to note that the cost in CPU cycles to compress data when traversing a LAN can result in a negative performance impact and therefore best practices are to only utilize compression when delivering applications via a WAN or particularly congested high-speed data link.  </p>
<p>

<link xlink:type="simple" xlink:href="../757/4954757.xml">
HTTP compression</link> is asymmetric and transparent to the client. Support for HTTP compression is built into <link xlink:type="simple" xlink:href="../455/33455.xml">
web servers</link> and web browsers. All commercial ADN products currently support HTTP compression. </p>
<p>

A second compression technique is achieved through data reduction algorithms. Because these algorithms are proprietary and modify the application traffic, they are symmetric and require a device to reassemble the application traffic before the client can receive it. A separate class of devices known as WAN Optimization Controllers (WOC) provide this functionality, but the technology has been slowly added to the ADN portfolio over the past few years as this class of device continues to become more application aware, providing additional features for specific applications such as <link xlink:type="simple" xlink:href="../873/349873.xml">
CIFS and SAMBA</link>.</p>

</ss1>
</sec>
<sec>
<st>
ADN reliability and availability techniques</st>

<ss1>
<st>
Advanced health checking</st>

<p>

Advanced health checking is the ability of an ADN to determine not only the state of the server on which an application is hosted, but the status of the application it is delivering. Advanced health checking techniques allow the ADC to intelligently determine whether or not the content being returned by the server is correct and should be delivered to the client. </p>
<p>

This feature enables other reliability features in the ADN, such as resending a request to a different server if the content returned by the original server is found to be erroneous. </p>

</ss1>
<ss1>
<st>
Load balancing algorithms</st>

<p>

The load balancing algorithms found in today's ADN are far more advanced than the simplistic round-robin and least connections algorithms used in the early <link xlink:type="simple" xlink:href="../635/34635.xml">
1990</link>s. These algorithms were originally loosely based on operating systems' scheduling algorithms, but have since evolved to factor in conditions peculiar to networking and application environments. It is more accurate to describe today's "load balancing" algorithms as application routing algorithms, as most ADN employ application awareness to determine whether an application is available to respond to a request. This includes the ability of the ADN to determine not only whether the application is available, but whether or not the application can respond to the request within specified parameters, often referred to as an <link xlink:type="simple" xlink:href="../021/775021.xml">
service level agreement</link>. </p>
<p>

Typical industry standard load balancing algorithms available today include: </p>
<p>

<list>
<entry level="1" type="bullet">

 Round Robin</entry>
<entry level="1" type="bullet">

 Least Connections</entry>
<entry level="1" type="bullet">

 Fastest Response Time</entry>
<entry level="1" type="bullet">

 Weighted Round Robin</entry>
<entry level="1" type="bullet">

 Weighted Least Connections</entry>
<entry level="1" type="bullet">

 Custom values assigned to individual servers in a pool based on SNMP or other communication mechanism</entry>
</list>
</p>

</ss1>
<ss1>
<st>
Fault tolerance</st>

<p>

The ADN provides fault tolerance at the server level, within pools or farms. This is accomplished by designating specific servers as a 'backup' that is activated automatically by the ADN in the event that the primary server(s) in the pool fail.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2213%22])">13</ref></p>
<p>

The ADN also ensures application availability and reliability through its ability to seamlessly "failover" to a secondary device in the event of a hardware or software failure. This ensures that traffic continues to flow in the event of a failure in one device, thereby providing fault tolerance for the applications. Fault tolerance is implemented in ADNs through either a network or serial based connection. </p>

<ss2>
<st>
Network based failover</st>
<p>

The Virtual IP Address (VIP) is shared between two devices. A heartbeat daemon on the secondary device verifies that the primary device is active. In the event that the heartbeat is lost, the secondary device assumes the shared VIP and begins servicing requests. This process is not immediate, and though most ADN replicate sessions from the primary to the secondary, there is no way to guarantee that sessions initiated during the time it takes for the secondary to assume the VIP and begin managing traffic will be maintained. </p>

</ss2>
<ss2>
<st>
Serial based failover</st>
<p>

In a serial connection based failover configuration two ADN devices communicate via a standard <link xlink:type="simple" xlink:href="../023/26023.xml">
RS232</link> connection instead of the network, and all sharing of session information and status is exchanged over this connection. Failover is nearly instantaneous, though it suffers from the same constraints regarding sessions initiated while the primary device is failing as network based failover.</p>

</ss2>
</ss1>
</sec>
<sec>
<st>
ADN security</st>

<ss1>
<st>
Transport layer security</st>
<p>

Although often erroneously assigned to the application layer, <message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<standard wordnetid="107260623" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../813/187813.xml">
SSL</link></system_of_measurement>
</rule>
</direction>
</standard>
</protocol>
</message>
 is the most common method of securing application traffic through an ADN today. SSL uses <link xlink:type="simple" xlink:href="../112/194112.xml">
PKI</link> to establish a secure connection between the client and the ADN, making it nearly impossible for attackers to decrypt the data in transit or hijack the session.</p>

</ss1>
<ss1>
<st>
Application layer security</st>

<ss2>
<st>
Resource cloaking</st>
<p>

The use of a virtual IP address (VIP) and position of the ADN in the network provides the means through which certain resources can be cloaked, or hidden, from the client. Because the ADN is designed to understand applications and application protocols, such as <link xlink:type="simple" xlink:href="../104/2701104.xml">
HTTP</link>, it can manipulate certain aspects of the protocol to cloak the servers in the pool and prevent potentially useful information regarding the software and hardware infrastructure from being exposed. </p>
<p>

A typical use of this functionality is to hide the operating system and server software used to host the application. This is usually accomplished by rewriting the Server field in an HTTP response <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2214%22])">14</ref>. </p>
<p>

A second typical use of this functionality is the exploitation of the ADN's ability to rewrite the <standard wordnetid="107260623" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../146/32146.xml">
URI</link></system_of_measurement>
</standard>
 portion of an HTTP request. The client is presented with a URI and VIP that are known only to the ADN, and upon receiving the request the ADN may either (a) rewrite the URI and send a 302 redirect <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2215%22])">15</ref> or (b) transparently translates the URI and responds to the client as if the URI were the right one in the first place.</p>

</ss2>
<ss2>
<st>
Application firewall</st>
<p>

In recent years commercial ADNs have begun to include <link xlink:type="simple" xlink:href="../717/2268717.xml">
application firewall</link> functionality to further secure applications during the delivery process. This is a hotly debated subject with many security professionals arguing that the functionality included in an application firewall are unnecessary and should be handled by the application while others consider employing as much security as possible, regardless of position in the delivery network, to be the best practice. Many commercial ADN companies have acquired and integrated these functions and present such features as part of a <event wordnetid="100029378" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<link xlink:type="simple" xlink:href="../195/7991195.xml">
defense in depth</link></activity>
</procedure>
</psychological_feature>
</act>
</event>
 strategy often cited by security professionals.</p>

</ss2>
</ss1>
<ss1>
<st>
Network layer security</st>

<p>

The ADN is most often deployed in the DMZ at the edge of the network. This results in exposure to potential network layer attacks including <link xlink:type="simple" xlink:href="../776/39776.xml">
Denial of Service (DoS)</link> from ICMP and SYN floods. As a result, the ADN must necessarily protect not only itself but the applications is it delivering from succumbing to such attacks. The ADN generally employs a number of protections against typical network layer attacks though it does not implement the full security offered by an <link xlink:type="simple" xlink:href="../059/269059.xml">
IPS</link>.  Some of the Network Layer Security technologies that may be employed by ADN devices include:</p>

<ss2>
<st>
Delayed binding</st>
<p>

Delayed binding, also called TCP splicing, is the postponement of the connection between the client and the server in order to obtain sufficient information to make a routing decision. Some application switches and routers delay binding the client session to the server until the proper handshakes are complete so as to prevent Denial of Service attacks.</p>

</ss2>
<ss2>
<st>
IP filtering</st>
<p>

ADNs often have the ability to filter traffic based on <link xlink:type="simple" xlink:href="../589/61589.xml">
Access Control List</link>s (ACLs), Bogus IP ranges (Bogon filtering) and deep patcket inspection pattern matching.  In some cases, thresholds or rate limiting of IP addresses or ranges of IP addresses may be employed.</p>

</ss2>
</ss1>
</sec>
<sec>
<st>
Traffic management</st>
<p>

ADNs are increasingly adding advanced traffic management functionality. The deep packet inspection capabilities of some of these products can identify identify traffic by application type and can be used to analyze, block, shape and prioritize traffic.</p>

</sec>
<sec>
<st>
See also</st>

<ss1>
<st>
Commercial ADNs</st>
<p>

<list>
<entry level="1" type="bullet">

 <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../477/481477.xml">
Akamai Technologies</link></company>
</entry>
<entry level="1" type="bullet">

 <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../579/5650579.xml">
Blue Coat Systems</link></company>
</entry>
<entry level="1" type="bullet">

 <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../045/16258045.xml">
CDNetworks</link></company>
</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../948/309948.xml">
Citrix</link></entry>
<entry level="1" type="bullet">

 <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../746/51746.xml">
Cisco Systems</link></company>
</entry>
<entry level="1" type="bullet">

 <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../811/7633811.xml">
Crescendo Networks</link></company>
</entry>
<entry level="1" type="bullet">

 <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../455/2570455.xml">
F5 Networks</link></company>
 </entry>
<entry level="1" type="bullet">

 <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../051/997051.xml">
Foundry Networks</link></company>
</entry>
<entry level="1" type="bullet">

 <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../426/675426.xml">
Juniper Networks</link></company>
</entry>
<entry level="1" type="bullet">

 <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../667/6868667.xml">
NetQoS</link></company>
</entry>
<entry level="1" type="bullet">

 <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../243/21243.xml">
Nortel</link></company>
</entry>
<entry level="1" type="bullet">

 <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../533/3401533.xml">
Radware</link></company>
</entry>
<entry level="1" type="bullet">

 <company wordnetid="108058098" confidence="0.8">
<institution wordnetid="108053576" confidence="0.8">
<link xlink:type="simple" xlink:href="../980/26980.xml">
Sun Microsystems</link></institution>
</company>
</entry>
</list>
</p>

</ss1>
</sec>
<sec>
<st>
Notes</st>


<p>

<reflist>
<entry id="1">
 <weblink xlink:type="simple" xlink:href="http://web.mit.edu/Saltzer/www/publications/endtoend/endtoend.pdf">
Saltzer, J. H., Reed, D. P., Clark, D. D.: “End-to-End Arguments in System Design,” ACM Transactions on Communications, 2(4), 1984</weblink></entry>
<entry id="2">
Halabi, Bassam: "Internet Routing Architectures", New Riders Publishing, 1997</entry>
<entry id="3">
http://www.infoworld.com/article/05/07/18/29FEintelnet_1.html?NETWORK%20STANDARDS Erlanger, Leon: "Building the Intelligent Network," InfoWorld, July 2005</entry>
<entry id="4">
<weblink xlink:type="simple" xlink:href="http://www.faqs.org/rfcs/rfc896.html">
RFC 896: Congestion Control in IP/TCP Internetworks</weblink></entry>
<entry id="5">
<weblink xlink:type="simple" xlink:href="http://www.faqs.org/rfcs/rfc1122.html">
RFC 1122: Requirements for Internet Hosts -- Communication Layers</weblink></entry>
<entry id="6">
<weblink xlink:type="simple" xlink:href="http://www.faqs.org/rfcs/rfc2018.html">
RFC 2018: TCP Selective Acknowledgment Options</weblink></entry>
<entry id="7">
<weblink xlink:type="simple" xlink:href="http://www.faqs.org/rfcs/rfc2883.html">
RFC 2883: An Extension to the Selective Acknowledgement (SACK) Option for TCP</weblink></entry>
<entry id="8">
<weblink xlink:type="simple" xlink:href="http://www.faqs.org/rfcs/rfc3168.html">
RFC 3168: The Addition of Explicit Congestion Notification to TCP</weblink></entry>
<entry id="9">
<weblink xlink:type="simple" xlink:href="http://www.faqs.org/rfcs/rfc2481.html">
RFC 2481: A Proposal to add Explicit Congestion Notification (ECN) to IP</weblink></entry>
<entry id="10">
<weblink xlink:type="simple" xlink:href="http://www.faqs.org/rfcs/rfc3042.html">
RFC 3042: Enhancing TCP's Loss Recovery Using Limited Transmit</weblink></entry>
<entry id="11">
<weblink xlink:type="simple" xlink:href="http://www.faqs.org/rfcs/rfc2582.html">
RFC 2582: The NewReno Modification to TCP's Fast Recovery Algorithm</weblink></entry>
<entry id="12">
<weblink xlink:type="simple" xlink:href="http://www.ietf.org/rfc/rfc3390.txt">
RFC 3390: Increasing TCP's Initial Window</weblink></entry>
<entry id="13">
<weblink xlink:type="simple" xlink:href="http://www.networkcomputing.com/1219/1219buyers2.html">
MacVittie, Lori: "Content Switches", Network Computing, July, 2001</weblink></entry>
<entry id="14">
<weblink xlink:type="simple" xlink:href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec6.html#sec6.2">
RFC 2616: HyperText Transport Protocol, Response Header Fields</weblink></entry>
<entry id="15">
<weblink xlink:type="simple" xlink:href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.3">
RFC 2616: HyperText Transport Protocol, Response Codes</weblink></entry>
</reflist>
</p>

</sec>
<sec>
<st>
External links</st>
<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://safari.oreilly.com/0131014684">
Optimizing Network Performance with Content Switching: Server, Firewall, and Cache Load Balancing</weblink> </entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.networkcomputing.com/1403/1403ws1.html">
Making Layer 7 Work for You</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://btquarterly.com/?mc=get-everybody-boat&amp;page=ad-viewresearch">
Application Delivery Networks: Get Everyone In The Boat</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.jetnexus.com/ADC_Market_growth.html">
The Application Delivery Controller Market Growth </weblink></entry>
</list>

</p>
</sec>
</bdy>
</article>
