<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 18:03:10[mciao0825] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>Probabilistic encryption</title>
<id>1051442</id>
<revision>
<id>232133908</id>
<timestamp>2008-08-15T16:39:01Z</timestamp>
<contributor>
<username>WhisperToMe</username>
<id>15708</id>
</contributor>
</revision>
<categories>
<category>Probability theory</category>
<category>Theory of cryptography</category>
</categories>
</header>
<bdy>

<b>Probabilistic encryption</b> is the use of <link xlink:type="simple" xlink:href="../523/19196523.xml">
randomness</link> in an <link xlink:type="simple" xlink:href="../294/10294.xml">
encryption</link> algorithm, so that when encrypting the same message several times it will, in general, yield different ciphertexts.  The term "probabilistic encryption" is typically used in reference to <link>
public key</link> encryption algorithms, however various <link xlink:type="simple" xlink:href="../042/53042.xml">
symmetric key encryption</link> algorithms achieve a similar property (e.g., <link xlink:type="simple" xlink:href="../594/4594.xml">
block cipher</link>s when used in a chaining mode such as <link xlink:type="simple" xlink:href="../202/160202.xml">
CBC</link>).  To be <link xlink:type="simple" xlink:href="../585/960585.xml">
semantically secure</link>, that is, to hide even partial information about the <link xlink:type="simple" xlink:href="../935/157935.xml">
plaintext</link>, an encryption algorithm must be <link xlink:type="simple" xlink:href="../383/495383.xml">
probabilistic</link>. <p>

Probabilistic encryption is particularly important when using <link>
public key cryptography</link>.  Suppose that the <operation wordnetid="100955060" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<attack wordnetid="100972621" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<link xlink:type="simple" xlink:href="../126/789126.xml">
adversary</link></activity>
</psychological_feature>
</act>
</attack>
</event>
</operation>
 observes a ciphertext, and suspects that the plaintext is either "YES" or "NO", or has a hunch that the plaintext might be "ATTACK AT CALAIS". When a <link xlink:type="simple" xlink:href="../703/2343703.xml">
deterministic encryption</link> algorithm is used, the adversary can simply try encrypting each of his guesses under the recipient's public key, and compare each result to the target ciphertext.  To combat this attack, public key encryption schemes must incorporate an element of randomness, ensuring that each plaintext maps into one of a large number of possible ciphertexts.</p>
<p>

An intuitive approach to converting a deterministic encryption scheme into a probabilistic one is to simply pad the plaintext with a random string before encrypting with the deterministic algorithm.  Conversely, decryption involves applying a deterministic algorithm and ignoring the random padding.  However, early schemes which applied this naive approach were broken due to limitations in some deterministic encryption schemes.  Techniques such as <link xlink:type="simple" xlink:href="../249/1579249.xml">
OAEP</link> integrate random padding in a manner that is secure using any <link xlink:type="simple" xlink:href="../753/206753.xml">
trapdoor permutation</link>.</p>
<p>

The first provably-secure probabilistic public-key encryption scheme was proposed by <scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../178/842178.xml">
Shafi Goldwasser</link></scientist>
 and <scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../119/1385119.xml">
Silvio Micali</link></scientist>
, based on the hardness of the <link xlink:type="simple" xlink:href="../041/1183041.xml">
quadratic residuosity problem</link> and had a message expansion factor equal to the public key size.  More efficient probabilistic encryption algorithms include <link xlink:type="simple" xlink:href="../458/59458.xml">
Elgamal</link>, <link xlink:type="simple" xlink:href="../685/480685.xml">
Paillier</link>, <message wordnetid="106253690" confidence="0.8">
<cipher wordnetid="106254239" confidence="0.8">
<link xlink:type="simple" xlink:href="../674/18414674.xml">
MCC</link></cipher>
</message>
 and various constructions under the <link xlink:type="simple" xlink:href="../286/451286.xml">
random oracle model</link>, including <link xlink:type="simple" xlink:href="../249/1579249.xml">
Optimal Asymmetric Encryption Padding</link> (OAEP).</p>
<p>

Example of probabilistic encryption using any trapdoor permutation:</p>
<p>

<list>
<entry level="1" type="bullet">

 <it>x</it> - <it>single bit</it> plaintext</entry>
<entry level="1" type="bullet">

 <it>f</it> - <link xlink:type="simple" xlink:href="../753/206753.xml">
trapdoor permutation</link> (deterministic encryption algorithm)</entry>
<entry level="1" type="bullet">

 <it>b</it> - <link xlink:type="simple" xlink:href="../871/1182871.xml">
hard core predicate</link> of <it>f''</it></entry>
<entry level="1" type="bullet">

 <it>r</it> - random string</entry>
</list>
</p>
<p>

<math>
{\rm Enc}(x) = (f(r), x \oplus b(r))
</math></p>
<p>

<math>
{\rm Dec}(y, z) = b(f^{-1}(y)) \oplus z
</math></p>
<p>

This is inefficient because only a single bit is encrypted. In other words, the message expansion factor is equal to the public key size.</p>
<p>

Example of probabilistic encryption in the random oracle model:</p>
<p>

<list>
<entry level="1" type="bullet">

 <it>x</it> - plaintext</entry>
<entry level="1" type="bullet">

 <it>f</it> - <link xlink:type="simple" xlink:href="../753/206753.xml">
trapdoor permutation</link> (deterministic encryption algorithm)</entry>
<entry level="1" type="bullet">

 <it>h</it> - <link xlink:type="simple" xlink:href="../286/451286.xml">
random oracle</link> (typically implemented using a publicly specified <link xlink:type="simple" xlink:href="../526/439526.xml">
hash function</link>)</entry>
<entry level="1" type="bullet">

 <it>r</it> - random string</entry>
</list>
</p>
<p>

<math>
{\rm Enc}(x) = (f(r), x \oplus h(r))
</math></p>
<p>

<math>
{\rm Dec}(y, z) = h(f^{-1}(y)) \oplus z
</math></p>

<sec>
<st>
See also</st>
<p>

<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../312/2701312.xml">
Efficient Probabilistic Public-Key Encryption Scheme</link></entry>
</list>
</p>

</sec>
<sec>
<st>
External links</st>
<p>

<list>
<entry level="1" type="bullet">

 Shafi Goldwasser and Silvio Micali, <weblink xlink:type="simple" xlink:href="http://theory.lcs.mit.edu/~cis/pubs/shafi/1984-jcss.pdf">
Probabilistic Encryption</weblink>, Special issue of Journal of Computer and Systems Sciences, Vol. 28, No. 2, pages 270-299, April 1984</entry>
</list>
</p>

</sec>
</bdy>
</article>
