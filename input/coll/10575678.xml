<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 17.04.2009 00:26:07[mciao0827] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<event  confidence="0.8" wordnetid="100029378">
<rule  confidence="0.8" wordnetid="105846932">
<act  confidence="0.8" wordnetid="100030358">
<psychological_feature  confidence="0.8" wordnetid="100023100">
<procedure  confidence="0.8" wordnetid="101023820">
<activity  confidence="0.8" wordnetid="100407535">
<algorithm  confidence="0.8" wordnetid="105847438">
<header>
<title>Maximum subarray problem</title>
<id>10575678</id>
<revision>
<id>213242507</id>
<timestamp>2008-05-18T13:37:24Z</timestamp>
<contributor>
<username>Derek farn</username>
<id>752956</id>
</contributor>
</revision>
<categories>
<category>Articles with example Python code</category>
<category>Optimization algorithms</category>
<category>Dynamic programming</category>
</categories>
</header>
<bdy>

In <link xlink:type="simple" xlink:href="../323/5323.xml">
computer science</link>, the <b>maximum subarray problem</b> is the task of finding the contiguous subarray within a one-dimensional <link xlink:type="simple" xlink:href="../052/2052.xml">
array</link> of numbers which has the largest sum. For example, for the sequence of values &amp;minus;2, 1, &amp;minus;3, 4, &amp;minus;1, 2, 1, &amp;minus;5, 4; the contiguous subarray with the largest sum is 4, &amp;minus;1, 2, 1, with sum 6.<p>

The problem was first posed by <link>
Ulf Grenander</link> of <university wordnetid="108286163" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../157/4157.xml">
Brown University</link></university>
 in 1977, as a simplified model for <link xlink:type="simple" xlink:href="../806/140806.xml">
maximum likelihood</link> estimation of patterns in digitized images. A <link xlink:type="simple" xlink:href="../258/754258.xml">
linear time</link> <link xlink:type="simple" xlink:href="../775/775.xml">
algorithm</link> was found soon afterwards by <link>
Jay Kadane</link> of <link xlink:type="simple" xlink:href="../093/48093.xml">
Carnegie-Mellon University</link> (<link xlink:type="simple" xlink:href="#xpointer(//cite[@id=%22CITEREFBentley1984%22])">
Bentley (1984)</link>).</p>

<sec>
<st>
Kadane's algorithm</st>
<p>

Kadane's algorithm consists of a scan through the array values, computing at each position the maximum subarray ending at that position. This subarray is either empty (in which case <link xlink:type="simple" xlink:href="../748/209748.xml">
its sum is zero</link>) or consists of one more element than the maximum subarray ending at the previous position. Thus, the problem can be solved with the following code, expressed here in <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../862/23862.xml">
Python</link></programming_language>
:</p>

<p>

def max_subarray(A):
max_so_far = max_ending_here = 0
for x in A:
max_ending_here = max(0, max_ending_here + x)
max_so_far = max(max_so_far, max_ending_here)
return max_so_far</p>

<p>

Because of the way this algorithm uses optimal substructures (the maximum subarray ending at each position is calculated in a simple way from a related but smaller and overlapping subproblem, the maximum subarray ending at the previous position) this algorithm can be viewed as a simple example of <link xlink:type="simple" xlink:href="../297/125297.xml">
dynamic programming</link>.</p>

</sec>
<sec>
<st>
Generalizations</st>
<p>

Similar problems may be posed for higher dimensional arrays, but their solution is more complicated; see, e.g., <link xlink:type="simple" xlink:href="#xpointer(//cite[@id=%22CITEREFTakaoka2002%22])">
Takaoka (2002)</link>. <link xlink:type="simple" xlink:href="#xpointer(//cite[@id=%22CITEREFBrodalJ=C3=B8rgensen2007%22])">
Brodal &amp; Jørgensen (2007)</link> showed how to find the <it>k</it> largest subarray sums in a one-dimensional array, in the optimal time bound O(<it>n</it>&nbsp;+&nbsp;<it>k</it>).</p>

</sec>
<sec>
<st>
References</st>
<p>

<list>
<entry level="1" type="bullet">

 <cite id="CITEREFBentley1984" style="font-style:normal"><link>
Bentley, Jon</link>&#32;(1984),&#32;"Programming pearls: algorithm design techniques",&#32;<it><work wordnetid="104599396" confidence="0.8">
<product wordnetid="104007894" confidence="0.8">
<creation wordnetid="103129123" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<periodical wordnetid="106593296" confidence="0.8">
<publication wordnetid="106589574" confidence="0.8">
<link xlink:type="simple" xlink:href="../161/291161.xml">
Communications of the ACM</link></publication>
</periodical>
</artifact>
</creation>
</product>
</work>
</it>&#32;<b>27</b>(9):  865–873, <document wordnetid="106470073" confidence="0.8">
<written_communication wordnetid="106349220" confidence="0.8">
<writing wordnetid="106362953" confidence="0.8">
<link xlink:type="simple" xlink:href="../994/422994.xml">
doi</link></writing>
</written_communication>
</document>
:<weblink xlink:type="simple" xlink:href="http://dx.doi.org/10.1145%2F358234.381162">
10.1145/358234.381162</weblink></cite>&nbsp;.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 <cite id="CITEREFBrodalJ.C3.B8rgensen2007" style="font-style:normal">Brodal, Gerth Stølting&#32;&amp;&#32;Jørgensen, Allan Grønlund&#32;(2007),&#32;"A linear time algorithm for the k maximal sums problem",&#32;<it>Mathematical Foundations of Computer Science 2007</it>, Lecture Notes in Computer Science, <b>4708</b>, Springer-Verlag, pp. 442–453, <document wordnetid="106470073" confidence="0.8">
<written_communication wordnetid="106349220" confidence="0.8">
<writing wordnetid="106362953" confidence="0.8">
<link xlink:type="simple" xlink:href="../994/422994.xml">
doi</link></writing>
</written_communication>
</document>
:<weblink xlink:type="simple" xlink:href="http://dx.doi.org/10.1007%2F978-3-540-74456-6_40">
10.1007/978-3-540-74456-6_40</weblink></cite>&nbsp;.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 <cite id="CITEREFTakaoka2002" style="font-style:normal">Takaoka, T.&#32;(2002),&#32;"<weblink xlink:type="simple" xlink:href="http://www.cosc.canterbury.ac.nz/tad.takaoka/subarray.ps">
Efficient algorithms for the maximum subarray problem by distance matrix multiplication</weblink>",&#32;<it>Electronic Notes in Theoretical Compututer Science</it>&#32;<b>61</b>, </cite>&nbsp;.</entry>
</list>
</p>

</sec>
<sec>
<st>
 External links </st>
<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://computationalthinking.googlepages.com/kadanealgorithm">
Kadane's Algorithm</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.algorithmist.com/index.php/Kadane's_Algorithm">
www.algorithmist.com</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://alexeigor.wikidot.com/kadane">
alexeigor.wikidot.com</weblink></entry>
</list>
</p>

</sec>
</bdy>
</algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</article>
