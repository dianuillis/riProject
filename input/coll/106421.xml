<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 15:58:21[mciao0828] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<message  confidence="0.8" wordnetid="106598915">
<information  confidence="0.8" wordnetid="106634376">
<structure  confidence="0.8" wordnetid="104341686">
<artifact  confidence="0.8" wordnetid="100021939">
<area  confidence="0.8" wordnetid="102735688">
<library  confidence="0.8" wordnetid="103660909">
<format  confidence="0.8" wordnetid="106636806">
<room  confidence="0.8" wordnetid="104105893">
<header>
<title>Library (computing)</title>
<id>106421</id>
<revision>
<id>239760794</id>
<timestamp>2008-09-20T10:05:53Z</timestamp>
<contributor>
<username>SieBot</username>
<id>4005189</id>
</contributor>
</revision>
<categories>
<category>Computer libraries</category>
<category>Operating system technology</category>
<category>Computer file formats</category>
</categories>
</header>
<bdy>

<image location="right" width="277px" src="Ogg_vorbis_libs_and_application_dia.svg" type="thumb">
<caption>

Illustration of an application which uses libvorbisfile.so to play an <link xlink:type="simple" xlink:href="../489/32489.xml">
Ogg Vorbis</link> file.
</caption>
</image>
<p>

In <link xlink:type="simple" xlink:href="../323/5323.xml">
computer science</link>, a <b>library</b> is a collection of <link xlink:type="simple" xlink:href="../988/40988.xml">
subroutine</link>s used to develop <link xlink:type="simple" xlink:href="../309/5309.xml">
software</link>. Libraries contain code and data that provide services to independent programs. This allows code and data to be shared and changed in a <link xlink:type="simple" xlink:href="../133/939133.xml">
modular</link> fashion. Some <link xlink:type="simple" xlink:href="../392/217392.xml">
executable</link>s are both standalone programs and libraries, but most libraries are not executables. Executables and libraries make references known as <it>links</it> to each other through the process known as <it>linking</it>, which is typically done by a <link xlink:type="simple" xlink:href="../566/18566.xml">
linker</link>.</p>
<p>

Most modern <link xlink:type="simple" xlink:href="../194/22194.xml">
operating system</link>s (OS) provide libraries that implement the majority of system services. Such libraries have <link xlink:type="simple" xlink:href="../695/550695.xml">
commoditize</link>d the services a modern application expects an OS to provide. As such, most code used by modern applications is provided in these libraries.</p>

<sec>
<st>
History</st>
<p>

The earliest programming concepts analogous to libraries were intended to separate <link xlink:type="simple" xlink:href="../040/18985040.xml">
data</link> definitions from the program <link xlink:type="simple" xlink:href="../704/407704.xml">
implementation</link>. The <b>COMPOOL</b> (Communication Pool) concept was brought to popular attention by <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../748/224748.xml">
JOVIAL</link></programming_language>
 in 1959, although it borrowed the idea from the large-system <site wordnetid="108651247" confidence="0.8">
<region wordnetid="108630985" confidence="0.8">
<system wordnetid="108435388" confidence="0.8">
<location wordnetid="100027167" confidence="0.8">
<tract wordnetid="108673395" confidence="0.8">
<geographical_area wordnetid="108574314" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<network wordnetid="108434259" confidence="0.8">
<link xlink:type="simple" xlink:href="../005/28005.xml">
SAGE</link></network>
</group>
</geographical_area>
</tract>
</location>
</system>
</region>
</site>
 software. Following the computer science principles of <link xlink:type="simple" xlink:href="../273/234273.xml">
Separation of Concerns</link> and <link xlink:type="simple" xlink:href="../501/79501.xml">
Information Hiding</link>, "Comm Pool's purpose was to permit the sharing of System Data among many programs by providing a centralized data description." (Wexelblat 1981:369)</p>
<p>

<link xlink:type="simple" xlink:href="../799/6799.xml">
COBOL</link> also included "primitive capabilities for a library system" in 1959 (Wexelblat 1981:274), but <expert wordnetid="109617867" confidence="0.8">
<peer wordnetid="109626238" confidence="0.8">
<physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<interior_designer wordnetid="110210648" confidence="0.8">
<specialist wordnetid="110631941" confidence="0.8">
<intellectual wordnetid="109621545" confidence="0.8">
<colleague wordnetid="109935990" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<associate wordnetid="109816771" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<alumnus wordnetid="109786338" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<employee wordnetid="110053808" confidence="0.8">
<scholar wordnetid="110557854" confidence="0.8">
<link xlink:type="simple" xlink:href="../921/2963921.xml">
Jean Sammet</link></scholar>
</employee>
</causal_agent>
</alumnus>
</worker>
</associate>
</scientist>
</colleague>
</intellectual>
</specialist>
</interior_designer>
</person>
</physical_entity>
</peer>
</expert>
 described them as "inadequate library facilities" in retrospect. (Wexelblat 1981:258)</p>
<p>

Another major contributor to the modern library concept was the <link xlink:type="simple" xlink:href="../988/40988.xml">
subprogram</link> innovation of <link xlink:type="simple" xlink:href="../168/11168.xml">
FORTRAN</link>. FORTRAN subprograms can be compiled independently of each other, but the compiler lacks a <link xlink:type="simple" xlink:href="../566/18566.xml">
linker</link>, so <link>
type checking</link> between subprograms is impossible. (Wilson et al. 1988:126)</p>
<p>

Finally, the influential <link xlink:type="simple" xlink:href="../513/29513.xml">
Simula 67</link> cannot be overlooked. Simula was the first <link xlink:type="simple" xlink:href="../757/22757.xml">
object-oriented programming</link> language, and its <idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<link xlink:type="simple" xlink:href="../392/7392.xml">
classes</link></concept>
</idea>
 are nearly identical to the modern concept as used in <message wordnetid="106598915" confidence="0.8">
<request wordnetid="106513366" confidence="0.8">
<link xlink:type="simple" xlink:href="../881/15881.xml">
Java</link></request>
</message>
, <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../038/72038.xml">
C++</link></programming_language>
, and <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../196/2356196.xml">
C#</link></programming_language>
. The <it>class</it> concept of Simula was also a progenitor of the <it>package</it> in <physical_entity wordnetid="100001930" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../242/1242.xml">
Ada</link></causal_agent>
</physical_entity>
 and the <it>module</it> of <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../259/81259.xml">
Modula-2</link></programming_language>
. (Wilson et al. 1988:52) Even when originally developed in 1965, Simula classes could be included in library files and added at compile time. (Wexelblat 1981:716)</p>

</sec>
<sec>
<st>
Types</st>

<ss1>
<st>
Static libraries</st>

<p>

<indent level="1">

<it>Main article: <link xlink:type="simple" xlink:href="../227/2692227.xml">
Static Library</link></it>
</indent>

Historically, libraries could only be <it>static</it>. A static library, also known as an <it>archive</it>, consists of a set of <link xlink:type="simple" xlink:href="../988/40988.xml">
routines</link> which are copied into a target application by the <link xlink:type="simple" xlink:href="../739/5739.xml">
compiler</link>, <link xlink:type="simple" xlink:href="../566/18566.xml">
linker</link>, or binder, producing <link xlink:type="simple" xlink:href="../307/337307.xml">
object file</link>s and a stand-alone executable file. This process, and the stand-alone executable file, are known as a <link xlink:type="simple" xlink:href="../146/2401146.xml">
static build</link> of the target application. Actual addresses for jumps and other routine calls are stored in a relative or symbolic form which cannot be resolved until all code and libraries are assigned final static addresses.</p>
<p>

The linker resolves all of the unresolved addresses into fixed or relocatable addresses (from a common base) by loading all code and libraries into actual runtime memory locations. This linking process can take as much, or more time than the compilation process, and must be performed when any of the modules is recompiled. Most compiled languages have a standard library (for example, the <link xlink:type="simple" xlink:href="../378/324378.xml">
C standard library</link>) but programmers can also create their own custom libraries. Commercial compiler publishers provide both standard and custom libraries with their compiler products.</p>
<p>

A <link xlink:type="simple" xlink:href="../566/18566.xml">
linker</link> may work on specific types of object files, and thus require specific (compatible) types of libraries. Collecting object files into a static library may ease their distribution and use. A client, either a program or a library subroutine, accesses a library object by referencing just its <it>name</it>. The linking process <it>resolves</it> references by searching the libraries in the order given. Usually, it is not considered an error if a name can be found multiple times in a given set of libraries</p>

</ss1>
<ss1>
<st>
Dynamic linking</st>
<p>

Dynamic linking means that the subroutines of a library are loaded into an application program at <link xlink:type="simple" xlink:href="../263/192263.xml">
runtime</link>, rather than being linked in at <link xlink:type="simple" xlink:href="../766/191766.xml">
compile time</link>, and remain as separate <link xlink:type="simple" xlink:href="../077/7077.xml">
files</link> on <artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<medium wordnetid="106254669" confidence="0.8">
<link xlink:type="simple" xlink:href="../472/Species_8472.xml">
disk</link></medium>
</instrumentality>
</artifact>
. Only a minimum amount of work is done at compile time by the <link xlink:type="simple" xlink:href="../566/18566.xml">
linker</link>; it only records what library routines the program needs and the index names or numbers of the routines in the library. The majority of the work of linking is done at the time the application is loaded (<link xlink:type="simple" xlink:href="../773/483773.xml">
loadtime</link>) or during execution (runtime). The necessary linking code, called a <structure wordnetid="104341686" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<area wordnetid="102735688" confidence="0.8">
<library wordnetid="103660909" confidence="0.8">
<room wordnetid="104105893" confidence="0.8">
<link xlink:type="simple" xlink:href="../773/483773.xml">
loader</link></room>
</library>
</area>
</artifact>
</structure>
, is actually part of the underlying <link xlink:type="simple" xlink:href="../194/22194.xml">
operating system</link>. At the appropriate time the loader finds the relevant libraries on disk and adds the relevant data from the libraries to the <link xlink:type="simple" xlink:href="../178/45178.xml">
process's</link> memory space.</p>
<p>

Some operating systems can only link in a library at loadtime, before the process starts executing; others may be able to wait until after the process has started to execute and link in the library just when it is actually referenced (i.e., during <link xlink:type="simple" xlink:href="../263/192263.xml">
runtime</link>). The latter is often called "delay loading" or "deferred loading". In either case, such a library is called a <b>dynamically linked</b> library.</p>
<p>

The nature of dynamic linking makes it a common boundary in <link xlink:type="simple" xlink:href="../810/803810.xml">
software license</link>s.</p>
<p>

<link xlink:type="simple" xlink:href="../659/23659.xml">
Plugin</link>s are one common usage of dynamically linked libraries, which is especially useful when the libraries can be replaced by other libraries with a similar interface, but different functionality. Software may be said to have a "plugin architecture" if it uses libraries for core functionality with the intention that they can be replaced. Note, however, that the use of dynamically linked libraries in an application's architecture does not necessarily mean that they may be replaced.</p>
<p>

Dynamic linking was originally developed in the <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../847/18847.xml">
Multics</link></O>
 operating system, starting in 1964. It was also a feature of MTS (the <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../432/148432.xml">
Michigan Terminal System</link></O>
), built in the late 1960s.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref> In <link xlink:type="simple" xlink:href="../890/18890.xml">
Microsoft Windows</link>, dynamically-linked libraries are called <link xlink:type="simple" xlink:href="../077/2701077.xml">
dynamic-link libraries</link> or "DLLs".</p>

<ss2>
<st>
Relocation</st>

<p>

<indent level="1">

<it>Main article: <structure wordnetid="104341686" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<area wordnetid="102735688" confidence="0.8">
<library wordnetid="103660909" confidence="0.8">
<room wordnetid="104105893" confidence="0.8">
<link xlink:type="simple" xlink:href="../963/1938963.xml">
Relocation (computer science)</link></room>
</library>
</area>
</artifact>
</structure>
</it>
</indent>
One wrinkle that the loader must handle is that the actual location in memory of the library data cannot be known until after the executable and all dynamically linked libraries have been loaded into memory. This is because the memory locations used depend on which specific dynamic libraries have been loaded. It is not possible to depend on the absolute location of the data in the executable, nor even in the library, since conflicts between different libraries would result: if two of them specified the same or overlapping addresses, it would be impossible to use both in the same program.</p>
<p>

However, in practice, the shared libraries on most systems do not change often. Therefore, it is possible to compute a likely load address for every shared library on the system before it is needed, and store that information in the libraries and executables. If every shared library that is loaded has undergone this process, then each will load at their predetermined addresses, which speeds up the process of dynamic linking. This optimization is known as <link xlink:type="simple" xlink:href="../962/1667962.xml">
prebinding</link> in Mac OS X and <link xlink:type="simple" xlink:href="../361/5082361.xml">
prelinking</link> in Linux. Disadvantages of this technique include the time required to precompute these addresses every time the shared libraries change, the inability to use <link xlink:type="simple" xlink:href="../515/866515.xml">
address space layout randomization</link>, and the requirement of sufficient virtual address space for use (a problem that will be alleviated by the adoption of <link xlink:type="simple" xlink:href="../285/148285.xml">
64-bit</link> architectures, at least for the time being).</p>
<p>

An old method was to examine the program at load time and replace all references to data in the libraries with pointers to the appropriate memory locations once all libraries have been loaded. On <structure wordnetid="104341686" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<window wordnetid="104587648" confidence="0.8">
<supporting_structure wordnetid="104361095" confidence="0.8">
<framework wordnetid="103391770" confidence="0.8">
<link xlink:type="simple" xlink:href="../311/168311.xml">
Windows 3.1</link></framework>
</supporting_structure>
</window>
</artifact>
</structure>
 (and some <link xlink:type="simple" xlink:href="../630/46630.xml">
embedded system</link>s such as <physical_entity wordnetid="100001930" confidence="0.8">
<expert wordnetid="109617867" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<calculator wordnetid="109887034" confidence="0.8">
<link xlink:type="simple" xlink:href="../399/54399.xml">
Texas Instruments calculators</link></calculator>
</causal_agent>
</person>
</expert>
</physical_entity>
), the references to <link xlink:type="simple" xlink:href="../153/475153.xml">
patch</link> were arranged as <link xlink:type="simple" xlink:href="../167/18167.xml">
linked list</link>s, allowing easy enumeration and replacement. Nowadays, most dynamic library systems link a <link xlink:type="simple" xlink:href="../294/475294.xml">
symbol table</link> with blank addresses into the program at compile time. All references to code or data in the library pass through this table, the <it>import directory</it>. At load time the table is modified with the location of the library code/data by the loader/linker. This process is still slow enough to significantly affect the speed of programs that call other programs at a very high rate, such as certain <link xlink:type="simple" xlink:href="../938/28938.xml">
shell script</link>s.</p>
<p>

The library itself contains a <link xlink:type="simple" xlink:href="../800/6894800.xml">
jump table</link> of all the methods within it, known as <it>entry points</it>. Calls into the library "jump through" this table, looking up the location of the code in memory, then calling it. This introduces overhead in calling into the library, but the delay is usually so small as to be negligible.</p>

</ss2>
<ss2>
<st>
Locating libraries at runtime</st>

<p>

<indent level="1">

<it>Main article: <accomplishment wordnetid="100035189" confidence="0.8">
<structure wordnetid="104341686" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<area wordnetid="102735688" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<library wordnetid="103660909" confidence="0.8">
<action wordnetid="100037396" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<feat wordnetid="100036762" confidence="0.8">
<room wordnetid="104105893" confidence="0.8">
<link xlink:type="simple" xlink:href="../079/3600079.xml">
Dynamic linker</link></room>
</feat>
</psychological_feature>
</act>
</action>
</library>
</event>
</area>
</artifact>
</structure>
</accomplishment>
</it>
</indent>
Dynamic linkers/loaders vary widely in functionality. Some depend on explicit paths to the libraries being stored in the executable. Any change to the library naming or layout of the filesystem will cause these systems to fail. More commonly, only the name of the library (and not the path) is stored in the executable, with the operating system supplying a system to find the library on-disk based on some algorithm.</p>
<p>

One of the biggest disadvantages of dynamic linking is that the executables depend on the separately stored libraries in order to function properly. If the library is deleted, moved, or renamed, or if an incompatible version of the DLL is copied to a place that is earlier in the search, the executable would fail to load. On Windows this is commonly known as <structure wordnetid="104341686" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<window wordnetid="104587648" confidence="0.8">
<supporting_structure wordnetid="104361095" confidence="0.8">
<framework wordnetid="103391770" confidence="0.8">
<link xlink:type="simple" xlink:href="../441/59441.xml">
DLL hell</link></framework>
</supporting_structure>
</window>
</artifact>
</structure>
.</p>

<ss3>
<st>
Unix-like systems</st>
<p>

Most <family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../815/31815.xml">
Unix-like</link></family>
 systems have a "search path" specifying file system <link xlink:type="simple" xlink:href="../027/5515027.xml">
directories</link> in which to look for dynamic libraries. On some systems, the default path is specified in a <link xlink:type="simple" xlink:href="../613/463613.xml">
configuration file</link>; in others, it is hard coded into the dynamic loader. Some <link xlink:type="simple" xlink:href="../392/217392.xml">
executable file</link> formats can specify additional directories in which to search for libraries for a particular program. This can usually be overridden with an <link xlink:type="simple" xlink:href="../504/349504.xml">
environment variable</link>, although it is disabled for <link xlink:type="simple" xlink:href="../629/1054629.xml">
setuid</link> and setgid programs, so that a user can't force such a program to run arbitrary code. Developers of libraries are encouraged to place their dynamic libraries in places in the default search path. On the downside, this can make installation of new libraries problematic, and these "known" locations quickly become home to an increasing number of library files, making management more complex.
</p>
</ss3>
<ss3>
<st>
Microsoft Windows</st>
<p>

Microsoft Windows will check the <link xlink:type="simple" xlink:href="../933/1164933.xml">
registry</link> to determine the proper place to find an <link xlink:type="simple" xlink:href="../497/93497.xml">
ActiveX</link> DLL, but for other DLLs it will check the directory that the program was loaded from; the current working directory; any directories set by calling the SetDllDirectory() function; the System32, System, and Windows directories; and finally the directories specified by the PATH <link xlink:type="simple" xlink:href="../504/349504.xml">
environment variable</link>.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%222%22])">2</ref> Applications written for the <platform wordnetid="103961939" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<surface wordnetid="104362025" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<tool wordnetid="104451818" confidence="0.8">
<horizontal_surface wordnetid="103536348" confidence="0.8">
<implement wordnetid="103563967" confidence="0.8">
<link xlink:type="simple" xlink:href="../402/60402.xml">
.NET Framework</link></implement>
</horizontal_surface>
</tool>
</instrumentality>
</surface>
</artifact>
</platform>
 framework (since in 2002), also check the <link xlink:type="simple" xlink:href="../612/1766612.xml">
Global Assembly Cache</link> as the primary store of shared dll files to remove the issue of <structure wordnetid="104341686" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<window wordnetid="104587648" confidence="0.8">
<supporting_structure wordnetid="104361095" confidence="0.8">
<framework wordnetid="103391770" confidence="0.8">
<link xlink:type="simple" xlink:href="../441/59441.xml">
DLL hell</link></framework>
</supporting_structure>
</window>
</artifact>
</structure>
.
</p>
</ss3>
<ss3>
<st>
OpenStep</st>
<p>

<link xlink:type="simple" xlink:href="../114/53114.xml">
OpenStep</link> used a more flexible system, collecting a list of libraries from a number of known locations (similar to the PATH concept) when the system first starts. Moving libraries around causes no problems at all, although there is a time cost when first starting the system.
</p>
</ss3>
<ss3>
<st>
AmigaOS</st>
<p>

Under <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../304/18933304.xml">
AmigaOS</link></O>
 generic system libraries are stored in a directory defined by the <it>LIBS:</it> path assignment and application-specific libraries can be stored in the same directory as the application's executable. AmigaOS will search these locations when an executable attempts to launch a shared library. An application may also supply an explicit path when attempting to launch a library.</p>

</ss3>
</ss2>
<ss2>
<st>
Shared libraries</st>
<p>

In addition to being loaded statically or dynamically, libraries are also often classified according to how they are shared among programs. Dynamic libraries almost always offer some form of sharing, allowing the same library to be used by multiple programs at the same time. Static libraries, by definition, cannot be shared. The term "linker" comes from the process of copying procedures or subroutines which may come from "relocatable" libraries and adjusting or "linking" the machine address to the final locations of each module.</p>
<p>

The <b>shared library</b> term is slightly ambiguous, because it covers at least two different concepts. First, it is the sharing of code located on disk by unrelated programs. The second concept is the sharing of code in memory, when programs execute the same physical page of RAM, mapped into different address spaces. It would seem that the latter would be preferable, and indeed it has a number of advantages. For instance on the <link xlink:type="simple" xlink:href="../114/53114.xml">
OpenStep</link> system, applications were often only a few hundred kilobytes in size and loaded almost instantly; the <it>vast</it> majority of their code was located in libraries that had already been loaded for other purposes by the operating system. There is a cost, however; shared code must be specifically written to run in a multitasking environment. In some older environments such as 16 bit Windows or MPE for the HP 3000, only stack based data (local) was allowed, or other significant restrictions were placed on writing a DLL.</p>
<p>

RAM sharing can be accomplished by using <link xlink:type="simple" xlink:href="../303/571303.xml">
position independent code</link> as in <family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../642/31642.xml">
Unix</link></family>
, which leads to a complex but flexible architecture, or by using position dependent code as in Windows and <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../409/22409.xml">
OS/2</link></O>
. These systems make sure, by various tricks like pre-mapping the address space and reserving slots for each DLL, that code has a great probability of being shared. Windows DLLs are not shared libraries in the Unix sense. The rest of this section concentrates on aspects common to both variants.</p>
<p>

In most modern <link xlink:type="simple" xlink:href="../194/22194.xml">
operating system</link>s, shared libraries can be of the same format as the "regular" executables. This allows two main advantages: first, it requires making only one loader for both of them, rather than two (having the single loader is considered well worth its added complexity). Secondly, it allows the executables also to be used as DLLs, if they have a symbol table. Typical executable/DLL formats are <link xlink:type="simple" xlink:href="../914/9914.xml">
ELF</link> and <format wordnetid="106636806" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../222/694222.xml">
Mach-O</link></format>
 (both in Unix) and <format wordnetid="106636806" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../063/65063.xml">
PE</link></format>
 (Windows). In Windows, the concept was taken one step further, with even system resources such as fonts being bundled in the DLL file format. The same is true under OpenStep, where the universal "bundle" format is used for almost all system resources.</p>
<p>

The term DLL is mostly used on Windows and <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../409/22409.xml">
OS/2</link></O>
 products. On Unix and <family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../815/31815.xml">
Unix-like</link></family>
 platforms, the term <it>shared library</it> or <it>shared object</it> is more commonly used; consequently, the most common <link xlink:type="simple" xlink:href="../957/147957.xml">
filename extension</link> for shared library files is .so, usually followed by another dot and a version number. This is technically justified in view of the different semantics. More explanations are available in the <link xlink:type="simple" xlink:href="../303/571303.xml">
position independent code</link> article.</p>
<p>

In some cases, an operating system can become overloaded with different versions of DLLs, which impedes its performance and stability. Such a scenario is known as <structure wordnetid="104341686" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<window wordnetid="104587648" confidence="0.8">
<supporting_structure wordnetid="104361095" confidence="0.8">
<framework wordnetid="103391770" confidence="0.8">
<link xlink:type="simple" xlink:href="../441/59441.xml">
DLL hell</link></framework>
</supporting_structure>
</window>
</artifact>
</structure>
. Most modern operating systems, after 2001, have clean-up methods to eliminate such situations.</p>

</ss2>
<ss2>
<st>
Dynamic loading</st>

<p>

<indent level="1">

<it>Main article: <structure wordnetid="104341686" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<area wordnetid="102735688" confidence="0.8">
<library wordnetid="103660909" confidence="0.8">
<room wordnetid="104105893" confidence="0.8">
<link xlink:type="simple" xlink:href="../591/10131591.xml">
Dynamic loading</link></room>
</library>
</area>
</artifact>
</structure>
</it>
</indent>
Dynamic loading is a subset of dynamic linking where a dynamically linked library loads and unloads at <link xlink:type="simple" xlink:href="../263/192263.xml">
run-time</link> on request. Such a request may be made implicitly at <link>
compile-time</link> or explicitly at <link xlink:type="simple" xlink:href="../263/192263.xml">
run-time</link>. Implicit requests are made at compile-time when a linker adds library references that include file paths or simply file names. Explicit requests are made when applications make direct calls to an operating system's API at runtime.</p>
<p>

Most operating systems that support dynamically linked libraries also support dynamically loading such libraries via a <link xlink:type="simple" xlink:href="../263/192263.xml">
run-time</link> linker <link xlink:type="simple" xlink:href="../ury/24th_century.xml">
API</link>. For instance, <link xlink:type="simple" xlink:href="../890/18890.xml">
Microsoft Windows</link> uses the API functions LoadLibrary, LoadLibraryEx, FreeLibrary and GetProcAddress with <link xlink:type="simple" xlink:href="../077/2701077.xml">
Microsoft Dynamic Link Libraries</link>; <standard wordnetid="107260623" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../305/23305.xml">
POSIX</link></system_of_measurement>
</standard>
 based systems, including most UNIX and UNIX-like systems, use dlopen, dlclose and dlsym. Some development systems automate this process.</p>

</ss2>
</ss1>
<ss1>
<st>
Remote libraries</st>
<p>

Another solution to the library issue is to use completely separate executables (often in some lightweight form) and call them using a <link xlink:type="simple" xlink:href="../346/26346.xml">
remote procedure call</link> (RPC) over a network to another computer. This approach maximizes operating system re-use: the code needed to support the library is the same code being used to provide application support and security for every other program. Additionally, such systems do not require the library to exist on the same machine, but can forward the requests over the network.</p>
<p>

The downside to such an approach is that every library call requires a considerable amount of overhead. RPC calls are much more expensive than calling a shared library which has already been loaded on the same machine. This approach is commonly used in a distributed architecture which makes heavy use of such remote calls, notably client-server systems and <link xlink:type="simple" xlink:href="../154/165154.xml">
application server</link>s such as <message wordnetid="106598915" confidence="0.8">
<idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<component wordnetid="105868954" confidence="0.8">
<request wordnetid="106513366" confidence="0.8">
<part wordnetid="105867413" confidence="0.8">
<link xlink:type="simple" xlink:href="../750/42750.xml">
Enterprise JavaBean</link></part>
</request>
</component>
</concept>
</idea>
</message>
s.</p>

</ss1>
<ss1>
<st>
Object Libraries</st>
<p>

Although dynamic linking was originally developed in the 1960s, it did not reach consumer operating systems until the late 1980s; it was generally available in some form in most operating systems by the early 1990s. It was during this same period that <link xlink:type="simple" xlink:href="../757/22757.xml">
object-oriented programming</link> (OOP) was becoming a significant part of the programming landscape. OOP with runtime binding requires additional information that traditional libraries don't supply; in addition to the names and entry points of the code located within, they also require a list of the objects on which they depend. This is a side-effect of one of OOP's main advantages, inheritance, which means that the complete definition of any method may be defined in a number of places. This is more than simply listing that one library requires the services of another; in a true OOP system, the libraries themselves may not be known at <link xlink:type="simple" xlink:href="../766/191766.xml">
compile time</link>, and vary from system to system.</p>
<p>

At the same time another common area for development was the idea of multi-tier programs, in which a "display" running on a desktop computer would use the services of a <link xlink:type="simple" xlink:href="../266/20266.xml">
mainframe</link> or <link xlink:type="simple" xlink:href="../272/20272.xml">
minicomputer</link> for data storage or processing. For instance, a program on a GUI-based computer would send messages to a minicomputer to return small samples of a huge dataset for display. Remote procedure calls already handled these tasks, but there was no standard <message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<link xlink:type="simple" xlink:href="../346/26346.xml">
RPC system</link></rule>
</direction>
</protocol>
</message>
.</p>
<p>

It was not long before the majority of the minicomputer and mainframe vendors were working on projects to combine the two, producing an OOP library format that could be used anywhere. Such systems were known as <b>object libraries</b>, or <b>distributed objects</b> if they supported remote access (not all did). Microsoft's COM is an example of such a system for local use, DCOM a modified version that support remote access.</p>
<p>

For some time object libraries were the "next big thing" in the programming world. There were a number of efforts to create systems that would run across platforms, and companies competed to try to get developers locked into their own system. Examples include <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../259/18622259.xml">
IBM</link></company>
's <link xlink:type="simple" xlink:href="../682/811682.xml">
System Object Model</link> (SOM/DSOM), <company wordnetid="108058098" confidence="0.8">
<institution wordnetid="108053576" confidence="0.8">
<link xlink:type="simple" xlink:href="../980/26980.xml">
Sun Microsystems</link></institution>
</company>
' <link xlink:type="simple" xlink:href="../139/1344139.xml">
Distributed Objects Everywhere</link> (DOE), <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../694/21694.xml">
NeXT</link></company>
's <link xlink:type="simple" xlink:href="../001/61001.xml">
Portable Distributed Objects</link> (PDO), <link xlink:type="simple" xlink:href="../276/8276.xml">
Digital</link>'s <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../995/1063995.xml">
ObjectBroker</link></instrumentality>
</artifact>
</system>
, Microsoft's <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<model wordnetid="110324560" confidence="0.8">
<idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<assistant wordnetid="109815790" confidence="0.8">
<component wordnetid="105868954" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<part wordnetid="105867413" confidence="0.8">
<link xlink:type="simple" xlink:href="../007/17058007.xml">
Component Object Model</link></part>
</causal_agent>
</worker>
</component>
</assistant>
</concept>
</idea>
</model>
</person>
</physical_entity>
 (COM/DCOM), and any number of <link xlink:type="simple" xlink:href="../799/4096799.xml">
CORBA</link>-based systems.</p>
<p>

In the end, it turned out that OOP libraries were <b>not</b> the next big thing. With the exception of Microsoft's COM and NeXT's (now <link xlink:type="simple" xlink:href="../856/856.xml">
Apple Computer</link>) PDO, all of these efforts have since ended.</p>
<p>

The <link xlink:type="simple" xlink:href="../609/265609.xml">
JAR file format</link> is mainly used for object libraries in the <message wordnetid="106598915" confidence="0.8">
<request wordnetid="106513366" confidence="0.8">
<link xlink:type="simple" xlink:href="../881/15881.xml">
Java programming language</link></request>
</message>
. It consists of (sometimes compressed) classes in bytecode format and is loaded by a java virtual machine or special class loaders.</p>

</ss1>
</sec>
<sec>
<st>
Naming</st>
<p>

<list>
<entry level="1" type="bullet">

<O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../304/18933304.xml">
AmigaOS</link></O>
 libraries are named ".library" (exp.: mathieeedoubtrans.library). These are separate files (shared libraries) that are invoked by the program that is running, and are dynamically-loaded but are not dynamically linked. Once the library has been invoked usually it not could deallocate memory and resources it asked for. User can force a "flushlibs" option by using AmigaDOS command <b>Avail</b> (that checks free memory in the system and has the option <b>Avail flush</b> that frees memory from libraries remaining open by programs). Since AmigaOS 4.0 July 2007 First Update, support for shared objects and dynamic linking has been introduced. Now also in Amiga can exist ".so" objects, together with ".library files".</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../875/11875.xml">
GNU</link>/<O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../297/6097297.xml">
Linux</link></O>
, <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../145/46145.xml">
Solaris</link></database>
</wordnet>
</lexical_database>
</electronic_database>
</information>
</message>
 and other <link xlink:type="simple" xlink:href="../445/598445.xml">
System V Release 4</link> derivatives, and <link xlink:type="simple" xlink:href="../807/1223807.xml">
BSD</link> variants</entry>
<entry level="1" type="indent">

libfoo.a and libfoo.so files are placed in directories like /lib, /usr/lib or /usr/local/lib. The filenames always start with lib, and end with .a (<link xlink:type="simple" xlink:href="../110/469110.xml">
archive</link>, static library) or .so (<link xlink:type="simple" xlink:href="../421/106421.xml">
shared object</link>, dynamically linked library), with an optional interface number. For example libfoo.so.2 is the second major interface revision of the dynamically linked library libfoo. Old <family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../642/31642.xml">
Unix</link></family>
 versions would use major and minor library revision numbers (libfoo.so.1.2) while contemporary Unixes will only use major revision numbers (libfoo.so.1). Dynamically <it>loaded</it> libraries are placed in /usr/libexec and similar directories. The .la files sometimes found in the library directories are <link xlink:type="simple" xlink:href="../800/172800.xml">
libtool</link> archives, not usable by the system as such.</entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../640/20640.xml">
Mac OS X</link> and upwards</entry>
<entry level="1" type="indent">

The system inherits static library conventions from <link xlink:type="simple" xlink:href="../807/1223807.xml">
BSD</link>, with the library being in a .a file, and can use .so-style dynamically-linked libraries (with the .dylib suffix instead). Most libraries in Mac OS X, however, are "frameworks", placed inside of special directories called "<link xlink:type="simple" xlink:href="../670/2487670.xml">
bundles</link>", which wrap the library's required files and metadata. For example a library called "My Neat Library" would be implemented in a bundle called "My Neat Library.framework".</entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../890/18890.xml">
Microsoft Windows</link></entry>
<entry level="2" type="bullet">

.<format wordnetid="106636806" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../077/2701077.xml">
DLL</link></format>
 files are <format wordnetid="106636806" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../077/2701077.xml">
dynamically linkable libraries</link></format>
. Other file name patterns may be used for specific purpose DLLs, e.g. *.OCX for <link xlink:type="simple" xlink:href="../500/93500.xml">
OCX</link> control libraries. The interface revisions are either encoded in the files, or abstracted away using <link xlink:type="simple" xlink:href="../007/17058007.xml">
COM-object</link> interfaces. Depending on how they are compiled, *.LIB files can be either static libraries or representations of dynamically linkable libraries needed only during compilation, known as "Import Libraries". Unlike in the <link xlink:type="simple" xlink:href="../642/31642.xml">
UNIX</link> world, where different file extensions are used, when linking against .LIB file in <link xlink:type="simple" xlink:href="../890/18890.xml">
Windows</link> one must first know if it is a regular static library or an import library. In the latter case, a .<format wordnetid="106636806" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../077/2701077.xml">
DLL</link></format>
 file must be present at runtime.</entry>
</list>
</p>

</sec>
<sec>
<st>
See also</st>
<p>

<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../559/1086559.xml">
Code reuse</link></entry>
<entry level="1" type="bullet">

 <structure wordnetid="104341686" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<area wordnetid="102735688" confidence="0.8">
<library wordnetid="103660909" confidence="0.8">
<room wordnetid="104105893" confidence="0.8">
<link xlink:type="simple" xlink:href="../566/18566.xml">
Linker</link></room>
</library>
</area>
</artifact>
</structure>
</entry>
<entry level="1" type="bullet">

 <structure wordnetid="104341686" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<area wordnetid="102735688" confidence="0.8">
<library wordnetid="103660909" confidence="0.8">
<room wordnetid="104105893" confidence="0.8">
<link xlink:type="simple" xlink:href="../773/483773.xml">
Loader (computing)</link></room>
</library>
</area>
</artifact>
</structure>
</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../077/2701077.xml">
Microsoft Dynamic Link Library</link></entry>
<entry level="1" type="bullet">

 <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<structure wordnetid="104341686" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<area wordnetid="102735688" confidence="0.8">
<library wordnetid="103660909" confidence="0.8">
<format wordnetid="106636806" confidence="0.8">
<room wordnetid="104105893" confidence="0.8">
<link xlink:type="simple" xlink:href="../307/337307.xml">
Object file</link></room>
</format>
</library>
</area>
</artifact>
</structure>
</information>
</message>
</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../659/23659.xml">
Plugin</link></entry>
<entry level="1" type="bullet">

 <structure wordnetid="104341686" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<area wordnetid="102735688" confidence="0.8">
<library wordnetid="103660909" confidence="0.8">
<room wordnetid="104105893" confidence="0.8">
<link xlink:type="simple" xlink:href="../962/1667962.xml">
Prebinding</link></room>
</library>
</area>
</artifact>
</structure>
</entry>
<entry level="1" type="bullet">

 <structure wordnetid="104341686" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<area wordnetid="102735688" confidence="0.8">
<library wordnetid="103660909" confidence="0.8">
<room wordnetid="104105893" confidence="0.8">
<link xlink:type="simple" xlink:href="../227/2692227.xml">
Static library</link></room>
</library>
</area>
</artifact>
</structure>
</entry>
<entry level="1" type="bullet">

 <structure wordnetid="104341686" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<area wordnetid="102735688" confidence="0.8">
<library wordnetid="103660909" confidence="0.8">
<room wordnetid="104105893" confidence="0.8">
<link xlink:type="simple" xlink:href="../238/473238.xml">
Runtime library</link></room>
</library>
</area>
</artifact>
</structure>
</entry>
<entry level="1" type="bullet">

 <idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<component wordnetid="105868954" confidence="0.8">
<part wordnetid="105867413" confidence="0.8">
<link xlink:type="simple" xlink:href="../874/274874.xml">
Visual Component Library</link></part>
</component>
</concept>
</idea>
 (VCL)</entry>
<entry level="1" type="bullet">

 <idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<component wordnetid="105868954" confidence="0.8">
<part wordnetid="105867413" confidence="0.8">
<link xlink:type="simple" xlink:href="../878/274878.xml">
Component Library for Cross Platform</link></part>
</component>
</concept>
</idea>
 (CLX)</entry>
<entry level="1" type="bullet">

 <link>
Free Component Library</link> (FCL, <physical_entity wordnetid="100001930" confidence="0.8">
<communicator wordnetid="109610660" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<compiler wordnetid="109946957" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<writer wordnetid="110794014" confidence="0.8">
<link xlink:type="simple" xlink:href="../429/638429.xml">
Free Pascal's</link></writer>
</causal_agent>
</compiler>
</person>
</communicator>
</physical_entity>
 equivalent of VCL)</entry>
<entry level="1" type="bullet">

 <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../564/2083564.xml#xpointer(//*[./st=%22LCL%22])">
Lazarus Component Library</link></software>
 (LCL)</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../378/324378.xml">
C standard library</link></entry>
<entry level="1" type="bullet">

 <structure wordnetid="104341686" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<area wordnetid="102735688" confidence="0.8">
<library wordnetid="103660909" confidence="0.8">
<room wordnetid="104105893" confidence="0.8">
<link xlink:type="simple" xlink:href="../635/11303635.xml">
Java Class Library</link></room>
</library>
</area>
</artifact>
</structure>
</entry>
<entry level="1" type="bullet">

 <artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<tool wordnetid="104451818" confidence="0.8">
<implement wordnetid="103563967" confidence="0.8">
<link xlink:type="simple" xlink:href="../151/8885151.xml">
Base Class Library</link></implement>
</tool>
</instrumentality>
</artifact>
</entry>
</list>
</p>

</sec>
<sec>
<st>
References</st>

<ss1>
<st>
Footnotes</st>

<p>

<reflist>
<entry id="1">
 <cite style="font-style:normal">"A History of MTS"&#32;. <it>Information Technology Digest</it>&#32;<b>5</b>&#32;(5).</cite>&nbsp;</entry>
<entry id="2">
"<weblink xlink:type="simple" xlink:href="http://msdn2.microsoft.com/en-us/library/ms682586.aspx">
Dynamic-Link Library Search Order</weblink>".&#32;<it>Microsoft Developer
Network Library</it>.&#32;  Microsoft&#32;(<link>
2007-10-04</link>).&#32;Retrieved on <link>
2007-10-04</link>.</entry>
</reflist>

</p>
</ss1>
<ss1>
<st>
Notations</st>
<p>

<list>
<entry level="1" type="bullet">

  <cite id="CITEREFWexelblat1981" style="font-style:normal">Wexelblat, Richard&#32;(1981),&#32;<it>History of Programming Languages</it>, ACM Monograph Series, New York, NY: Academic Press (A subsidiary of <link xlink:type="simple" xlink:href="../334/1604334.xml">
Harcourt Brace</link>), ISBN 0-12-745040-8</cite>&nbsp;</entry>
<entry level="1" type="bullet">

  <cite id="CITEREFWilsonClark1988" style="font-style:normal">Wilson, L.B.&#32;&amp;&#32;Clark, R.G.&#32;(1988),&#32;<it>Comparative Programming Languages</it>, Wokingham, England: Addison-Wesley, ISBN 0-201-18483-4</cite>&nbsp;</entry>
</list>
</p>

</ss1>
</sec>
<sec>
<st>
External links</st>
<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.dwheeler.com/program-library/">
Program Library HOWTO for Linux</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.iecc.com/linker/linker09.html">
Shared Libraries - 'Linkers and Loaders' by John R. Levine</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.iecc.com/linker/linker10.html">
Dynamic Linking and Loading - 'Linkers and Loaders' by John R. Levine</weblink></entry>
<entry level="1" type="bullet">

 Article <it><weblink xlink:type="simple" xlink:href="http://objprelink.sourceforge.net/objprelink.html">
Faster C++ program startups by improving runtime linking efficiency</weblink></it> by Léon Bottou and John Ryland</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.enderunix.org/simsek/articles/libraries.pdf">
How to Create Program Libraries</weblink> by Baris Simsek</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.csa.iisc.ernet.in/resources/documentation/hypertext/bfd/bfd_toc.html">
LIB BFD</weblink> - the Binary File Descriptor Library</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://lcsd05.cs.tamu.edu">
1st Library-Centric Software Design Workshop LCSD'05 at OOPSLA'05</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://lcsd.cs.tamu.edu/2006/">
2nd Library-Centric Software Design Workshop LCSD'06 at OOPSLA'06</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://people.redhat.com/drepper/dsohowto.pdf">
How to create shared library(with much background info)</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.ibm.com/developerworks/linux/library/l-dynamic-libraries/">
Anatomy of Linux dynamic libraries</weblink></entry>
</list>
</p>


</sec>
</bdy>
</room>
</format>
</library>
</area>
</artifact>
</structure>
</information>
</message>
</article>
