<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 17.04.2009 00:23:14[mciao0825] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>STXIT</title>
<id>10663780</id>
<revision>
<id>240980750</id>
<timestamp>2008-09-25T20:24:52Z</timestamp>
<contributor>
<username>Rfc1394</username>
<id>30225</id>
</contributor>
</revision>
<categories>
<category>IBM Mainframe computer operating systems</category>
</categories>
</header>
<bdy>

<b>STXIT</b> was an <platform wordnetid="103961939" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<surface wordnetid="104362025" confidence="0.8">
<horizontal_surface wordnetid="103536348" confidence="0.8">
<link xlink:type="simple" xlink:href="../294/29294.xml">
IBM System/360</link></horizontal_surface>
</surface>
</artifact>
</platform>
 series <link xlink:type="simple" xlink:href="../266/20266.xml">
mainframe computer</link> <idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<link xlink:type="simple" xlink:href="../560/20560.xml">
macro</link></concept>
</idea>
 instruction under the <link xlink:type="simple" xlink:href="../682/32682.xml">
DOS/VSE</link> operating system, and was also available for the <link xlink:type="simple" xlink:href="../868/2608868.xml">
Univac 90/60</link> series mainframe running its TOS/DOS operating system and later on its <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../509/14446509.xml">
VS/9</link></database>
</wordnet>
</lexical_database>
</electronic_database>
</information>
</message>
 operating system.<p>

The macro was an abbreviation of the term "Set Exit," and was used by programs written in <link xlink:type="simple" xlink:href="../368/1368.xml">
assembly language</link>.  It is used to create a recovery routine in the event of program errors, similar to <link xlink:type="simple" xlink:href="../602/938602.xml">
signal</link> handlers in C and <link xlink:type="simple" xlink:href="../756/3624756.xml">
Try/Finally</link> blocks in C++ and other object oriented languages.</p>
<p>

The STXIT macro would provide an error recovery address for several major types of errors and certain operator signals.  The errors covered depended upon the operating system.  In general, the errors which it provided recovery included 
<list>
<entry level="1" type="bullet">

 address protection violate (accessing memory not owned by the application)</entry>
<entry level="1" type="bullet">

 privilege violation (attempts to execute privileged instructions)</entry>
<entry level="1" type="bullet">

 divide check (division by zero)</entry>
<entry level="1" type="bullet">

 floating point check (floating point <link xlink:type="simple" xlink:href="../576/1254576.xml">
underflow</link> or <link xlink:type="simple" xlink:href="../475/41475.xml">
overflow</link>)</entry>
<entry level="1" type="bullet">

 timer runout (where a timer set by the program has expired) this particular interrupt is not actually an error, it is how a program responds to a watchdog timer</entry>
<entry level="1" type="bullet">

 Interrupt resume, a function on the <link xlink:type="simple" xlink:href="../868/2608868.xml">
Univac 90/60</link> where an <link xlink:type="simple" xlink:href="../528/644528.xml">
interactive</link> user has issued a break to a program to go to command mode, and issued an INTR command to cause the program to resume at the INTR point.  If the program has not specified an INTR resume address, the INTR command is rejected.  This is similar to the REENTER command on the <link xlink:type="simple" xlink:href="../309/69309.xml">
RT11</link> operating system on Digital computers.</entry>
</list>
</p>
<p>

The format of the Macro call was similar to the following (all parameters are optional except the R parameter, which is required)</p>
<p>

<it>label</it> STXIT R,<it>error1</it>,<it>error2</it>,<it>error3</it>,etc comment</p>
<p>

Where
<list>
<entry level="1" type="bullet">

 <it>label</it> was the optional branch label used for the instruction</entry>
<entry level="1" type="bullet">

 STXIT is the name of the macro to the called</entry>
<entry level="1" type="bullet">

 R is used to indicate the class of STXIT call to be made (there were other formats created later)</entry>
<entry level="1" type="bullet">

 <it>error1</it> is the label of a routine used to handle error class 1 and</entry>
<entry level="1" type="bullet">

 <it>error2</it> is the label of a routine used to handle error class 2, etc.</entry>
<entry level="1" type="bullet">

 everything beginning one space after the last parameter was a comment about the macro call</entry>
</list>
</p>
<p>

The exact classes of which error is handled by which parameter cannot be given by this article because different versions of STXIT among different operating systems have used different parameter values.</p>
<p>

The error routines are specified according to certain requirements, e.g. the first error routine might be used to handle program checks such as divide by zero, the second might be to handle interval timer runout, and another might be used to handle an indication from the operating system that the machine is being shut down and the program has to perform a checkpoint and terminate itself, or it will be terminated abruptly.</p>
<p>

If a class of error is not being handled, it is omitted, and there would be two (or more) commas in a row to indicate this. An unhandled class of error causes that error to be handled by the operating system's "default" handler.  For critical errors, the program crashes and is terminated; for non-critical errors the error is ignored.</p>
<p>

Later error recovery systems would provide for specifying errors explicitly as opposed to by the position of the parameter on the STXIT macro.</p>
<p>

On IBM mainframes, newer operating systems such as <link xlink:type="simple" xlink:href="../217/9815217.xml">
OS/VS1</link> replaced the STXIT macro with the <link>
STAE</link> ("Set Task Abnormal Exit") macro.  Univac's <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../509/14446509.xml">
VS/9</link></database>
</wordnet>
</lexical_database>
</electronic_database>
</information>
</message>
 continued to support STXIT but also added the <link>
CRTN</link> ("Contingency Routine") macro to provide even more powerful error recovery, as well as recovery of some errors which STXIT did not capture.</p>

</bdy>
</article>
