<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 17.04.2009 00:33:11[mciao0827] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<know-how  confidence="0.8" wordnetid="105616786">
<method  confidence="0.8" wordnetid="105660268">
<header>
<title>Statistical static timing analysis</title>
<id>10864076</id>
<revision>
<id>177130954</id>
<timestamp>2007-12-11T02:55:25Z</timestamp>
<contributor>
<username>Kim Bruning</username>
<id>41050</id>
</contributor>
</revision>
<categories>
<category>Digital electronics</category>
<category>electronic design automation</category>
<category>Formal methods</category>
</categories>
</header>
<bdy>

Conventional <link xlink:type="simple" xlink:href="../747/2546747.xml">
static timing analysis</link> (STA) has been a stock analysis algorithm for the design of digital circuits over the last 30 years. However, in recent years the increased variation in semiconductor devices and interconnect has introduced a number of issues that cannot be handled by traditional (deterministic) STA.  This has led to considerable research into <b>statistical static timing analysis</b>, which replaces the normal deterministic timing of gates and interconnects with probability distributions, and gives a distribution of possible circuit outcomes rather than a single outcome.
<sec>
<st>
 Why STA is popular </st>

<p>

Old fashioned deterministic STA is popular for good reasons:
<list>
<entry level="1" type="bullet">

It requires no vectors, so it does not miss paths.</entry>
<entry level="1" type="bullet">

The run time is linear in circuit size (for the basic algorithm).</entry>
<entry level="1" type="bullet">

The result is conservative.</entry>
<entry level="1" type="bullet">

It typically uses some fairly simple libraries (typically delay and output slope as a function of input slope and output load).</entry>
<entry level="1" type="bullet">

It is easy to extend to incremental operation for use in optimization.</entry>
</list>
</p>

</sec>
<sec>
<st>
 Limits of conventional STA </st>

<p>

STA, while very successful, has a number of limitations:
<list>
<entry level="1" type="bullet">

Cannot easily handle within-die correlation, especially if spatial correlation is included.</entry>
<entry level="1" type="bullet">

Needs many <it>corners</it> to handle all possible cases.</entry>
<entry level="1" type="bullet">

If there are significant random variations, then in order to be conservative at all times, it is too pessimistic to result in competitive products.</entry>
<entry level="1" type="bullet">

Changes to address various correlation problems, such as CPPR (Common Path Pessimism Removal) make the basic algorithm slower than linear time, or non-incremental, or both.</entry>
</list>
</p>
<p>

SSTA attacks these limitations more or less directly.  First, SSTA uses sensitivities to find correlations among delays.  Then it uses these correlations when computing how to add statistical distributions of delays.  </p>
<p>

Interestingly, there is no technical reason why determistic STA could not be enhanced to handle correlation and sensitivities, by keeping a vector of senstivities with each value as SSTA does.  Historically, this seemed like a big burden to add to STA, whereas it was clear it was needed for SSTA, so no-one complained.  See some of the criticism of SSTA below where this alternative is proposed.</p>

</sec>
<sec>
<st>
 Methods of SSTA </st>

<p>

There are two main categories of SSTA algorithms - path-based and block-based methods.  </p>
<p>

A path-based algorithm<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref> sums gate and wire delays on specific paths. The statistical calculation is simple, but the paths of interest must be identified prior to running the analysis. There is the potential that some other paths may be relevant but not analyzed so path selection is important.</p>
<p>

A block-based algorithm<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%222%22])">2</ref> generates the arrival times (and required) times for each node, working forward (and backward) from the clocked elements.  The advantage is completeness, and no need for path selection.  The biggest problem is that a statistical max (or min) operation that also considered correlation is needed, which is a hard technical problem.</p>

</sec>
<sec>
<st>
 Criticism of SSTA </st>

<p>

A number of criticisms have been leveled at SSTA:
<list>
<entry level="1" type="bullet">

It's too complex, especially with realistic (non-gaussian) distributions.</entry>
<entry level="1" type="bullet">

It's hard to couple to an optimization flow or algorithm.</entry>
<entry level="1" type="bullet">

It's hard to get the data the algorithm needs.  Even if you can get this data, it is likely to be time-varying and hence unreliable.</entry>
<entry level="1" type="bullet">

If used seriously by the customers of a fab, it restricts the changes the fab might make, if they change that statistical properties of the process.</entry>
<entry level="1" type="bullet">

The benefit is relatively small, compared to an enhanced deterministic STA that also takes into account sensitivities and correlation<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%223%22])">3</ref>.</entry>
</list>
</p>

</sec>
<sec>
<st>
 See also </st>
<p>

<list>
<entry level="1" type="bullet">

<know-how wordnetid="105616786" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<link xlink:type="simple" xlink:href="../747/2546747.xml">
Static timing analysis</link></method>
</know-how>
</entry>
</list>
</p>

</sec>
<sec>
<st>
 References </st>
<p>

<reflist>
<entry id="1">
Orshansky, M.; Keutzer, K., 2002, <weblink xlink:type="simple" xlink:href="http://dx.doi.org/10.1109/DAC.2002.1012687">
A general probabilistic framework for worst case timing analysis</weblink> , Design Automation Conference, 2002. Proceedings. 39th, Vol., Iss., 2002, Pages: 556&ndash;561.</entry>
<entry id="2">
Visweswariah, C.; Ravindran, K.; Kalafala, K.; Walker, S.G.; Narayan, S.; Beece, D.K.; Piaget, J.; Venkateswaran, N.; Hemmett, J.G., 2006, <weblink xlink:type="simple" xlink:href="http://dx.doi.org/10.1109/TCAD.2005.862751">
First-Order Incremental Block-Based Statistical Timing Analysis</weblink> , IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems, , Vol.25, Iss.10, Oct. 2006, Pages: 2170&ndash;2180</entry>
<entry id="3">
Noel Menezes.&#32;"<weblink xlink:type="simple" xlink:href="http://www.ispd.cc/slides07/noel.pdf">
The Good, the Bad, and the Statistical</weblink>".&#32;  ISPD 2007.</entry>
</reflist>



</p>
</sec>
</bdy>
</method>
</know-how>
</article>
