<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 18:06:48[mciao0827] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<physical_entity  confidence="0.8" wordnetid="100001930">
<automaton  confidence="0.8" wordnetid="109825519">
<person  confidence="0.8" wordnetid="100007846">
<causal_agent  confidence="0.8" wordnetid="100007347">
<anomaly  confidence="0.8" wordnetid="109606527">
<header>
<title>Hashlife</title>
<id>1095547</id>
<revision>
<id>223929489</id>
<timestamp>2008-07-06T15:47:51Z</timestamp>
<contributor>
<username>Lightbot</username>
<id>7178666</id>
</contributor>
</revision>
<categories>
<category>Cellular automata</category>
</categories>
</header>
<bdy>

<b>Hashlife</b> is an <link xlink:type="simple" xlink:href="../775/775.xml">
algorithm</link> for computing the long-term fate of a given starting configuration in <link xlink:type="simple" xlink:href="../342/54342.xml">
various Life rules</link>. The algorithm was invented by <person wordnetid="100007846" confidence="0.9508927676800064">
<programmer wordnetid="110481268" confidence="0.9173553029164789">
<link xlink:type="simple" xlink:href="../528/505528.xml">
Bill Gosper</link></programmer>
</person>
 in the early 1980s while he was engaged in research at the <link xlink:type="simple" xlink:href="../164/34164.xml">
Xerox</link> <village wordnetid="108672738" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../445/53445.xml">
Palo Alto</link></village>
 research center. Hashlife was originally implemented on <computer wordnetid="103082979" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<company wordnetid="108058098" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<machine wordnetid="103699975" confidence="0.8">
<digital_computer wordnetid="103196324" confidence="0.8">
<workstation wordnetid="104603399" confidence="0.8">
<institution wordnetid="108053576" confidence="0.8">
<link xlink:type="simple" xlink:href="../195/28195.xml">
Symbolics</link></institution>
</workstation>
</digital_computer>
</machine>
</device>
</company>
</instrumentality>
</artifact>
</computer>
 <computer wordnetid="103082979" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<machine wordnetid="103699975" confidence="0.8">
<digital_computer wordnetid="103196324" confidence="0.8">
<workstation wordnetid="104603399" confidence="0.8">
<link xlink:type="simple" xlink:href="../123/18123.xml">
Lisp machine</link></workstation>
</digital_computer>
</machine>
</device>
</instrumentality>
</artifact>
</computer>
s with the aid of the <link xlink:type="simple" xlink:href="../640/1332640.xml">
Flavors</link> extension.
<sec>
<st>
Hashlife</st>
<p>

Hashlife is designed to exploit large amounts of spatial and temporal <link xlink:type="simple" xlink:href="../582/1953582.xml">
redundancy</link> in most Life rules. For example, in <idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<rule wordnetid="105846054" confidence="0.8">
<link xlink:type="simple" xlink:href="../035/37035.xml">
Conway's Life</link></rule>
</concept>
</idea>
, the maximum density of live cells in a region is only 1/2, and many seemingly random patterns end up as collections of simple <link xlink:type="simple" xlink:href="../362/3132362.xml">
still lifes</link> and <link xlink:type="simple" xlink:href="../941/1001941.xml">
oscillators</link>.</p>

<ss1>
<st>
Representation</st>
<p>

The field is typically treated as a theoretically <link xlink:type="simple" xlink:href="../455/15455.xml">
infinite</link> grid, with the <link>
pattern</link> in question centered near the <link xlink:type="simple" xlink:href="../432/1313432.xml">
origin</link>. A <link xlink:type="simple" xlink:href="../097/577097.xml">
quadtree</link> is used to represent the field. An update operation takes the square of 22<it>k</it> cells, 2<it>k</it> on a side, at the <it>k</it>th level of the tree, and computes the next generation of the 2<it>k</it>-1-by-2<it>k</it>-1 square of cells in the center.</p>

</ss1>
<ss1>
<st>
Hashing</st>
<p>

While a quadtree trivially has far more <link xlink:type="simple" xlink:href="../671/2554671.xml">
overhead</link> than other simpler representations (such as using a <link xlink:type="simple" xlink:href="../728/19008728.xml">
matrix</link> of <link xlink:type="simple" xlink:href="../364/3364.xml">
bit</link>s), it allows for various optimizations. As the name suggests, it uses <link xlink:type="simple" xlink:href="../833/13833.xml">
hash table</link>s to store the nodes of the quadtree. Many subpatterns in the tree are usually identical to each other; for example the pattern being studied may contain many copies of the same <link xlink:type="simple" xlink:href="../233/796233.xml">
spaceship</link>, or even large swathes of empty space. These subpatterns will all <link xlink:type="simple" xlink:href="../790/13790.xml">
hash</link> to the same position in the hash table, and thus many copies of the same subpattern can be stored using the same hash table entry. In addition, these subpatterns only need to be evaluated once, not once per copy as in other Life algorithms.</p>
<p>

This itself leads to significant improvements in resource requirements; for example a generation of the various <link>
breeders</link> and <link>
spacefillers</link>, which grow at <link xlink:type="simple" xlink:href="../000/23000.xml">
polynomial</link> speeds, can be evaluated in Hashlife using <link xlink:type="simple" xlink:href="../300/4001300.xml">
logarithmic</link> space and time.</p>

</ss1>
<ss1>
<st>
Superspeed and caching</st>
<p>

A further speedup for many patterns can be further achieved by evolving different nodes at different speeds. For example, one could compute twice the number of generations forward for a node at the (<it>k</it>+1)-th level compared to one at the <it>k</it>th. For sparse or repetitive patterns such as the classical <link xlink:type="simple" xlink:href="../984/1158984.xml">
glider gun</link>, this can result in tremendous speedups, paradoxically allowing one to compute <it>bigger</it> patterns at <it>higher</it> generations <it>faster</it>, sometimes <link xlink:type="simple" xlink:href="../933/191933.xml">
exponentially</link>. To take full advantage of this feature, subpatterns from past generations should be <link xlink:type="simple" xlink:href="../829/6829.xml">
saved</link> as well.</p>
<p>

Since different patterns are allowed to run at different speeds, some implementations, like Gosper's own hlife program, do not have an interactive display, but simply compute a preset end result for a starting pattern, usually run from the <link xlink:type="simple" xlink:href="../707/6707.xml">
command line</link>. More recent programs such as Golly, however, have a graphical interface that can be driven by a Hashlife-based engine.</p>
<p>

The typical behavior of a Hashlife program on a conducive pattern is as follows: first the algorithm runs slower compared to other algorithms because of the constant overhead associated with <link xlink:type="simple" xlink:href="../790/13790.xml">
hashing</link> and building the <link xlink:type="simple" xlink:href="../097/577097.xml">
tree</link>; but later, enough data will be gathered and its speed will increase tremendously - the rapid increase in speed is often described as <link xlink:type="simple" xlink:href="../933/191933.xml">
"exploding"</link>.</p>

</ss1>
</sec>
<sec>
<st>
Drawbacks</st>
<p>

Hashlife can consume significantly more <link xlink:type="simple" xlink:href="../847/25847.xml">
memory</link> than other algorithms, especially on moderate-sized patterns with a lot of entropy, or which contain subpatterns poorly aligned to the bounds of the quadtree nodes (ie. power-of-two sizes); the cache is a vulnerable component. It can also consume more time than other algorithms on these patterns. Golly, among other Life simulators, have options for toggling between Hashlife and conventional algorithms.</p>
<p>

Hashlife is also significantly more complex to <link xlink:type="simple" xlink:href="../311/5311.xml">
implement</link>. For example, it needs a dedicated <link xlink:type="simple" xlink:href="../734/6734.xml">
garbage collector</link> to remove unused nodes from the cache. While an amateur programmer might be able to write a simple Life player over an afternoon, few Hashlife implementations exist.</p>

</sec>
<sec>
<st>
See also</st>
<p>

<list>
<entry level="1" type="bullet">

 <idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<rule wordnetid="105846054" confidence="0.8">
<link xlink:type="simple" xlink:href="../035/37035.xml">
Conway's Game of Life</link></rule>
</concept>
</idea>
</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../779/225779.xml">
Optimization</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../375/468375.xml">
Functional data structures</link>, of which the hashed quadtree is one</entry>
</list>
</p>

</sec>
<sec>
<st>
References</st>
<p>

<list>
<entry level="1" type="bullet">

 "Exploiting Regularities in Large Cellular Spaces", Bill Gosper. 1984, pp. 75-80 from Volume 10 of <it>Physica D. Nonlinear Phenomena''</it></entry>
</list>
</p>

</sec>
<sec>
<st>
External links</st>
<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.ericweisstein.com/encyclopedias/life/HashLife.html">
HashLife from Eric Weisstein's Treasure Trove of Life</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://tomas.rokicki.com/hlife/">
Tomas Rokicki's implementation of hashlife</weblink></entry>
<entry level="2" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://golly.sourceforge.net/">
Golly</weblink> -(cross-platform Windows/Linux/Mac successor program)</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.argentum.freeserve.co.uk/lex_h.htm#hashlife">
Entry</weblink> in the <weblink xlink:type="simple" xlink:href="http://www.argentum.freeserve.co.uk/lex_home.htm">
Life Lexicon</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.ddj.com/dept/ai/184406478">
Explanation of the algorithm</weblink> from <link xlink:type="simple" xlink:href="../768/173768.xml">
Dr Dobb's Journal</link></entry>
</list>
</p>

</sec>
</bdy>
</anomaly>
</causal_agent>
</person>
</automaton>
</physical_entity>
</article>
