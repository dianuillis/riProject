<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 17.04.2009 00:38:45[mciao0827] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<system  confidence="0.8" wordnetid="104377057">
<artifact  confidence="0.8" wordnetid="100021939">
<instrumentality  confidence="0.8" wordnetid="103575240">
<entity  confidence="0.9511911446218017" wordnetid="100001740">
<header>
<title>Database models</title>
<id>10973520</id>
<revision>
<id>243796773</id>
<timestamp>2008-10-08T01:53:22Z</timestamp>
<contributor>
<username>SmackBot</username>
<id>433328</id>
</contributor>
</revision>
<categories>
<category>Databases</category>
<category>Database management systems</category>
<category>Articles to be merged since October 2008</category>
<category>All articles to be merged</category>
<category>Database theory</category>
</categories>
</header>
<bdy>

<table class="metadata plainlinks ambox ">
<row>
<col>

ambox-move" style=""</col>
</row>
<row>
<col class="mbox-image"><p>

<image width="50px" src="Merge-arrow.svg">
<caption>

Merge arrow
</caption>
</image>
</p>
</col>
<col style="" class="mbox-text">
 It has been suggested that this article or section be  into . ()</col>
</row>
</table>

<p>

<table style="padding:0.3em; margin-left:15px; border:1px solid #A3B1BF; background:#f5faff; text-align:center; font-size:95%; line-height1.5em; width:160px;" align="right">
<header style="background:#cedff2; padding:0.3em;">
<link xlink:type="simple" xlink:href="../170/1659170.xml">
Database model</link></header>
<row>
<col style="padding:0.1em; font-size:0.9em; background-color:#cedff2">
Common models</col>
</row>
<row>
<col>
<link xlink:type="simple" xlink:href="../075/247075.xml">
Hierarchical</link>
<link xlink:type="simple" xlink:href="../098/185098.xml">
Network</link>
<link xlink:type="simple" xlink:href="../220/26220.xml">
Relational</link>
<system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../960/68960.xml">
Object-relational</link></instrumentality>
</artifact>
</system>

<system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../826/22826.xml">
Object</link></instrumentality>
</artifact>
</system>
</col>
</row>
<row>
<col style="padding:0.1em; font-size:0.9em; background-color:#cedff2">
Other models</col>
</row>
<row>
<col>
<system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../803/1532803.xml">
Associative</link></instrumentality>
</artifact>
</system>

<link xlink:type="simple" xlink:href="../366/1183366.xml">
Concept-oriented</link>
<system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../290/519290.xml">
Multi-dimensional</link></instrumentality>
</artifact>
</system>

<link xlink:type="simple" xlink:href="../680/19558680.xml">
Semantic</link>
<link xlink:type="simple" xlink:href="../738/872738.xml">
Star schema</link>
<link xlink:type="simple" xlink:href="../351/1442351.xml">
XML database</link></col>
</row>
</table>

A <link xlink:type="simple" xlink:href="../871/82871.xml">
data model</link> is not just a way of structuring data: it also defines a set of operations that can be performed on the data. The relational model, for example, defines operations such as <link xlink:type="simple" xlink:href="../285/665285.xml">
select</link>, <link>
project</link>, and <link xlink:type="simple" xlink:href="../204/665204.xml">
join</link>. Although these operations may not be explicit in a particular <link xlink:type="simple" xlink:href="../528/494528.xml">
query language</link>, they provide the foundation on which a query language is built. Examples of databases include word processors, dictionary, mail merges, user preferences and information management systems.</p>

<sec>
<st>
Models</st>
<p>

Various techniques are used to model data structure. Most database systems are built around one particular data model, although it is increasingly common for products to offer support for more than one model. For any one <link xlink:type="simple" xlink:href="../858/19858.xml">
logical model</link> various physical implementations may be possible, and most products will offer the user some level of control in tuning the <link>
physical implementation</link>, since the choices that are made have a significant effect on performance. An example of this is the <link xlink:type="simple" xlink:href="../220/26220.xml">
relational model</link>: all serious implementations of the relational model allow the creation of indexes which provide fast access to rows in a table if the values of certain columns are known.</p>

<ss1>
<st>
Flat model</st>
<p>

<it>This may not strictly qualify as a data model, as defined above.</it>
The <link xlink:type="simple" xlink:href="../973/573973.xml">
flat (or table) model</link> consists of a single, two-dimensional array of <link xlink:type="simple" xlink:href="../040/18985040.xml">
data</link> elements, where all members of a given column are assumed to be similar values, and all members of a row are assumed to be related to one another. For instance, columns for name and password that might be used as a part of a system security database. Each row would have the specific password associated with an individual user. Columns of the table often have a type associated with them, defining them as character data, date or time information, integers, or floating point numbers.</p>

</ss1>
<ss1>
<st>
Hierarchical model</st>

<p>

<indent level="1">

<it>Main article: <link xlink:type="simple" xlink:href="../075/247075.xml">
Hierarchical model</link></it>
</indent>
In a <link xlink:type="simple" xlink:href="../075/247075.xml">
hierarchical model</link>, data is organized into a tree-like structure, implying a single upward link in each record to describe the nesting, and a sort field to keep the records in a particular order in each same-level list. Hierarchical structures were widely used in the early mainframe database management systems, such as the Information Management System (IMS) by IBM, and now describe the structure of XML documents. This structure allows one 1:N relationship between two types of data. This structure is very efficient to describe many relationships in the real world; recipes, table of contents, ordering of paragraphs/verses, any nested and sorted information. However, the hierarchical structure is inefficient for certain database operations when a full path (as opposed to upward link and sort field) is not also included for each record.</p>
<p>

One limitation of the hierarchical model is its inability to efficiently represent redundancy in data. <link>
Entity-Attribute-Value</link> database models like <weblink xlink:type="simple" xlink:href="http://www.swinklink.com/">
Caboodle</weblink> by <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../847/1442847.xml">
Swink</link></company>
 are based on this structure.</p>
<p>

Parent–child relationship: Child may only have one parent but a parent can have multiple children. Parents and children are tied together by links called "pointers“. A parent will have a list of pointers to each of their children.</p>

</ss1>
<ss1>
<st>
Network model</st>

<p>

<indent level="1">

<it>Main article: <link xlink:type="simple" xlink:href="../098/185098.xml">
Network model</link></it>
</indent>
The <link xlink:type="simple" xlink:href="../098/185098.xml">
network model</link> (defined by the <information wordnetid="105816287" confidence="0.8">
<datum wordnetid="105816622" confidence="0.8">
<link xlink:type="simple" xlink:href="../351/309351.xml">
CODASYL</link></datum>
</information>
 specification) organizes data using two fundamental constructs, called <it>records</it> and <it>sets</it>. Records contain fields (which may be organized hierarchically, as in the programming language <link xlink:type="simple" xlink:href="../799/6799.xml">
COBOL</link>). Sets (not to be confused with mathematical sets) define <link xlink:type="simple" xlink:href="../383/2621383.xml">
one-to-many</link> relationships between records: one owner, many members. A record may be an owner in any number of sets, and a member in any number of sets.</p>
<p>

The network model is a variation on the hierarchical model, to the extent that it is built on the concept of multiple branches (lower-level structures) emanating from one or more nodes (higher-level structures), while the model differs from the hierchical model in that branches can be connected to multiple nodes. The network model is able to represent redundancy in data more efficiently than is the hierarchical model.</p>
<p>

The operations of the network model are navigational in style: a program maintains a current position, and navigates from one record to another by following the relationships in which the record participates. Records can also be located by supplying key values.</p>
<p>

Although it is not an essential feature of the model, network databases generally implement the set relationships by means of <link xlink:type="simple" xlink:href="../018/459018.xml">
pointer</link>s that directly address the location of a record on disk. This gives excellent retrieval performance, at the expense of operations such as database loading and reorganization.</p>
<p>

Most <link xlink:type="simple" xlink:href="../826/22826.xml">
Object databases</link> use the navigational concept to provide fast navigation across networks of objects, generally using Object Identifiers as "smart" pointers to related objects. <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../433/10375433.xml">
Objectivity/DB</link></instrumentality>
</artifact>
</system>
, for instance, implements named 1:1, 1:many, Many:1 and Many:Many named relationships that can cross databases. Many <link xlink:type="simple" xlink:href="../826/22826.xml">
object databases</link> also support <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../004/29004.xml">
SQL</link></programming_language>
, combining the strengths of both models.</p>

</ss1>
<ss1>
<st>
Relational model</st>

<p>

<indent level="1">

<it>Main article: <link xlink:type="simple" xlink:href="../220/26220.xml">
Relational model</link></it>
</indent>
The <link xlink:type="simple" xlink:href="../220/26220.xml">
relational model</link> was introduced in an <weblink xlink:type="simple" xlink:href="http://www.acm.org/classics/nov95/toc.html">
academic paper</weblink> by <link xlink:type="simple" xlink:href="../548/93548.xml">
E. F. Codd</link> in 1970 as a way to make database management systems more independent of any particular application. It is a mathematical model defined in terms of <link xlink:type="simple" xlink:href="../970/74970.xml">
predicate logic</link> and <link xlink:type="simple" xlink:href="../553/27553.xml">
set theory</link>.</p>
<p>

The products that are generally referred to as <link xlink:type="simple" xlink:href="../873/25873.xml">
relational database</link>s in fact implement a model that is only an approximation to the mathematical model defined by Codd. Three key terms are used extensively in relational database models: <it>relations</it>, <it>attributes</it>, and <it>domains</it>. A relation is a table with columns and rows. The named columns of the relation are called attributes, and the domain is the set of values the attributes are allowed to take.</p>
<p>

The basic data structure of the relational model is the table, where information about a particular entity (say, an employee) is represented in columns and rows (also called <link xlink:type="simple" xlink:href="../729/132729.xml">
tuple</link>s). Thus, the "relation" in "relational database" refers to the various tables in the database; a relation is a set of tuples. The columns enumerate the various attributes of the entity (the employee's name, address or phone number, for example), and a row is an actual instance of the entity (a specific employee) that is represented by the relation. As a result, each tuple of the employee table represents various attributes of a single employee.</p>
<p>

All relations (and, thus, tables) in a relational database have to adhere to some basic rules to qualify as relations. First, the ordering of columns is immaterial in a table. Second, there can't be identical tuples or rows in a table. And third, each tuple will contain a single value for each of its attributes.</p>
<p>

A relational database contains multiple tables, each similar to the one in the "flat" <link xlink:type="simple" xlink:href="../170/1659170.xml">
database model</link>. One of the strengths of the relational model is that, in principle, any value occurring in two different records (belonging to the same table or to different tables), implies a relationship among those two records.  Yet, in order to enforce explicit integrity constraints, 
relationships between records in tables can also be defined explicitly, by identifying or non-identifying parent-child relationships characterized by assigning cardinality (1:1, (0)1:M, M:M). Tables can also have a designated single attribute or a set of attributes that can act as a "key", which can be used to uniquely identify each tuple in the table. </p>
<p>

A key that can be used to uniquely identify a row in a table is called a primary key. Keys are commonly used to join or combine data from two or more tables. For example, an <it>Employee</it> table may contain a column named <it>Location</it> which contains a value that matches the key of a <it>Location</it> table. Keys are also critical in the creation of indexes, which facilitate fast retrieval of data from large tables. Any column can be a key, or multiple columns can be grouped together into a compound key. It is not necessary to define all the keys in advance; a column can be used as a key even if it was not originally intended to be one.</p>
<p>

A key that has an external, real-world meaning (such as a person's name, a book's <link xlink:type="simple" xlink:href="../919/14919.xml">
ISBN</link>, or a car's serial number) is sometimes called a "natural" key. If no natural key is suitable (think of the many people named <it>Brown</it>), an arbitrary or surrogate key can be assigned (such as by giving employees ID numbers). In practice, most databases have both generated and natural keys, because generated keys can be used internally to create links between rows that cannot break, while natural keys can be used, less reliably, for searches and for integration with other databases. (For example, records in two independently developed databases could be matched up by <link xlink:type="simple" xlink:href="../702/48702.xml">
social security number</link>, except when the social security numbers are incorrect, missing, or have changed.)</p>

<ss2>
<st>
Relational operations</st>
<p>

Users (or programs) request data from a relational database by sending it a <link xlink:type="simple" xlink:href="../390/679390.xml">
query</link> that is written in a special language, usually a dialect of <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../004/29004.xml">
SQL</link></programming_language>
. Although SQL was originally intended for end-users, it is much more common for SQL queries to be embedded into software that provides an easier user interface. Many web sites, such as Wikipedia, perform SQL queries when generating pages.</p>
<p>

In response to a query, the database returns a result set, which is just a list of rows containing the answers. The simplest query is just to return all the rows from a table, but more often, the rows are filtered in some way to return just the answer wanted.</p>
<p>

Often, data from multiple tables are combined into one, by doing a <link xlink:type="simple" xlink:href="../204/665204.xml">
join</link>. Conceptually, this is done by taking all possible combinations of rows (the <idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<link xlink:type="simple" xlink:href="../795/5795.xml">
Cartesian product</link></concept>
</idea>
), and then filtering out everything except the answer. In practice, relational database management systems rewrite ("<system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../441/1732441.xml">
optimize</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</instrumentality>
</artifact>
</system>
") queries to perform faster, using a variety of techniques.</p>
<p>

There are a number of relational operations in addition to join. These include project (the process of eliminating some of the columns), restrict (the process of eliminating some of the rows), union (a way of combining two tables with similar structures), difference (which lists the rows in one table that are not found in the other), intersect (which lists the rows found in both tables), and product (mentioned above, which combines each row of one table with each row of the other). Depending on which other sources you consult, there are a number of other operators - many of which can be defined in terms of those listed above. These include semi-join, outer operators such as outer join and outer union, and various forms of division. Then there are operators to rename columns, and summarizing or aggregating operators, and if you permit relation values as attributes (RVA - <link xlink:type="simple" xlink:href="../377/8377.xml">
relation-valued attribute</link>), then operators such as group and ungroup. The SELECT statement in SQL serves to handle all of these except for the group and ungroup operators.</p>
<p>

The flexibility of relational databases allows programmers to write queries that were not anticipated by the database designers. As a result, relational databases can be used by multiple applications in ways the original designers did not foresee, which is especially important for databases that might be used for a long time (perhaps several decades). This has made the idea and implementation of relational databases very popular with businesses.</p>

</ss2>
<ss2>
<st>
Normal Forms</st>

<p>

<indent level="1">

<it>Main article: <relationship wordnetid="113928668" confidence="0.8">
<confinement wordnetid="113998576" confidence="0.8">
<state wordnetid="100024720" confidence="0.8">
<subjugation wordnetid="113996300" confidence="0.8">
<constraint wordnetid="113998781" confidence="0.8">
<link xlink:type="simple" xlink:href="../640/8640.xml">
Database normalization</link></constraint>
</subjugation>
</state>
</confinement>
</relationship>
</it>
</indent>
Relations are classified based upon the types of anomalies to which they're vulnerable.  A database that's in the first normal form is vulnerable to all types of anomalies, while a database that's in the domain/key normal form has no modification anomalies.  Normal forms are hierarchical in nature.  That is, the lowest level is the first normal form, and the database cannot meet the requirements for higher level normal forms without first having met all the requirements of the lesser normal forms.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref></p>

</ss2>
</ss1>
<ss1>
<st>
Dimensional model</st>
<p>

The <link xlink:type="simple" xlink:href="../079/12321079.xml">
dimensional model</link> is a specialized adaptation of the relational model used to represent data in <link xlink:type="simple" xlink:href="../990/7990.xml">
data warehouse</link>s in a way that data can be easily summarized using <link xlink:type="simple" xlink:href="../239/189239.xml">
OLAP</link> queries. In the dimensional model, a database consists of a single large table of facts that are described using dimensions and measures. A dimension provides the context of a fact (such as who participated, when and where it happened, and its type) and is used in queries to group related facts together. Dimensions tend to be discrete and are often hierarchical; for example, the location might include the building, state, and country. A measure is a quantity describing the fact, such as revenue. It's important that measures can be meaningfully aggregated - for example, the revenue from different locations can be added together.</p>
<p>

In an OLAP query, dimensions are chosen and the facts are grouped and added together to create a summary.</p>
<p>

The dimensional model is often implemented on top of the relational model using a <link xlink:type="simple" xlink:href="../738/872738.xml">
star schema</link>, consisting of one table containing the facts and surrounding tables containing the dimensions. Particularly complicated dimensions might be represented using multiple tables, resulting in a <link xlink:type="simple" xlink:href="../338/1464338.xml">
snowflake schema</link>.</p>
<p>

A data warehouse can contain multiple star schemas that share dimension tables, allowing them to be used together. Coming up with a standard set of dimensions is an important part of dimensional modeling.</p>

</ss1>
<ss1>
<st>
Object database models</st>

<p>

<indent level="1">

<it>Main article: <link xlink:type="simple" xlink:href="../960/68960.xml">
Object-relational model</link></it>
</indent>

<indent level="1">

<it>Main article: <link xlink:type="simple" xlink:href="../487/5646487.xml">
Object model</link></it>
</indent>
In recent years, the <link xlink:type="simple" xlink:href="../757/22757.xml">
object-oriented</link> paradigm has been applied to database technology, creating a new programming model known as <link xlink:type="simple" xlink:href="../826/22826.xml">
object database</link>s. These databases attempt to bring the database world and the application programming world closer together, in particular by ensuring that the database uses the same <link xlink:type="simple" xlink:href="../701/199701.xml">
type system</link> as the application program. This aims to avoid the overhead (sometimes referred to as the <it><link xlink:type="simple" xlink:href="../278/2063278.xml">
impedance mismatch</link></it>) of converting information between its representation in the database (for example as rows in tables) and its representation in the application program (typically as objects). At the same time, object databases attempt to introduce the key ideas of object programming, such as <link xlink:type="simple" xlink:href="../301/10301.xml">
encapsulation</link> and <link xlink:type="simple" xlink:href="../811/261811.xml">
polymorphism</link>, into the world of databases.</p>
<p>

A variety of these ways have been tried for storing objects in a database. Some products have approached the problem from the application programming end, by making the objects manipulated by the program <link xlink:type="simple" xlink:href="../689/24689.xml">
persistent</link>. This also typically requires the addition of some kind of query language, since conventional programming languages do not have the ability to find objects based on their information content. Others have attacked the problem from the database end, by defining an object-oriented data model for the database, and defining a database programming language that allows full programming capabilities as well as traditional query facilities.</p>
<p>

Object databases suffered because of a lack of standardization: although standards were defined by <link xlink:type="simple" xlink:href="../009/1064009.xml">
ODMG</link>, they were never implemented well enough to ensure interoperability between products. Nevertheless, object databases have been used successfully in many applications: usually specialized applications such as engineering databases or molecular biology databases rather than mainstream commercial data processing. However, object database ideas were picked up by the relational vendors and influenced extensions made to these products and indeed to the <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../004/29004.xml">
SQL</link></programming_language>
 language.</p>

</ss1>
</sec>
<sec>
<st>
References</st>

<p>

<reflist>
<entry id="1">
David M. Kroenke, <it>Database Processing: Fundamentals, Design, and Implementation</it> (1997), Prentice-Hall, Inc., pages 130-144</entry>
</reflist>
</p>

</sec>
<sec>
<st>
See also</st>

<p>

<list>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../170/1659170.xml">
List of Database Models</link></entry>
</list>
</p>

<p>

<table style=";" class="navbox" cellspacing="0">
<row>
<col style="padding:2px;">
<table style="width:100%;background:transparent;color:inherit;;" class="nowraplinks collapsible autocollapse " cellspacing="0">
<row>
<header colspan="2" style=";" class="navbox-title">
<link xlink:type="simple" xlink:href="../513/8513.xml">
Database management system</link>s</header>
</row>
<row style="height:2px;">

</row>
<row>
<col colspan="2" style=";" class="navbox-abovebelow">
<system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../520/10973520.xml">
Database models</link></instrumentality>
</artifact>
</system>

&nbsp;·  <relationship wordnetid="113928668" confidence="0.8">
<confinement wordnetid="113998576" confidence="0.8">
<state wordnetid="100024720" confidence="0.8">
<subjugation wordnetid="113996300" confidence="0.8">
<constraint wordnetid="113998781" confidence="0.8">
<link xlink:type="simple" xlink:href="../640/8640.xml">
Database normalization</link></constraint>
</subjugation>
</state>
</confinement>
</relationship>
&nbsp;·  <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../365/10983365.xml">
Database storage</link></instrumentality>
</artifact>
</system>
&nbsp;·  <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../515/1990515.xml">
Distributed DBMS</link></instrumentality>
</artifact>
</system>
&nbsp;·  <link xlink:type="simple" xlink:href="../718/445718.xml">
Referential integrity</link>&nbsp;·  <link xlink:type="simple" xlink:href="../285/175285.xml">
Relational algebra</link>&nbsp;·  <link xlink:type="simple" xlink:href="../769/175769.xml">
Relational calculus</link>&nbsp;·  <link xlink:type="simple" xlink:href="../873/25873.xml">
Relational database</link>&nbsp;·  <link xlink:type="simple" xlink:href="../743/98743.xml">
Relational DBMS</link>&nbsp;·  <link xlink:type="simple" xlink:href="../220/26220.xml">
Relational model</link>&nbsp;·  <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../960/68960.xml">
Object-relational database</link></instrumentality>
</artifact>
</system>
&nbsp;·  <link xlink:type="simple" xlink:href="../409/212409.xml">
Transaction processing</link></col>
</row>
<row style="height:2px;">

</row>
<row>
<col style=";;" class="navbox-group">
Concepts</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<link xlink:type="simple" xlink:href="../377/8377.xml">
Database</link>&nbsp;·  <link xlink:type="simple" xlink:href="../776/60776.xml">
ACID</link>&nbsp;·  <link xlink:type="simple" xlink:href="../180/287180.xml">
CRUD</link>&nbsp;·  <link xlink:type="simple" xlink:href="../540/2002540.xml">
Null</link>&nbsp;·  <link xlink:type="simple" xlink:href="../975/336975.xml">
Candidate key</link>&nbsp;·  <link xlink:type="simple" xlink:href="../065/259065.xml">
Foreign key</link>&nbsp;·  <link xlink:type="simple" xlink:href="../099/6850099.xml">
Primary key</link>&nbsp;·  <link xlink:type="simple" xlink:href="../952/1137952.xml">
Superkey</link>&nbsp;·  <link xlink:type="simple" xlink:href="../950/472950.xml">
Surrogate key</link></col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
Objects</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-even">
<system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../316/1384316.xml">
Trigger</link></instrumentality>
</artifact>
</system>
&nbsp;·  <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../226/1960226.xml">
View</link></instrumentality>
</artifact>
</system>
&nbsp;·  <link xlink:type="simple" xlink:href="../163/1701163.xml">
Table</link>&nbsp;·  <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../836/2104836.xml">
Cursor</link></instrumentality>
</artifact>
</system>
&nbsp;·  <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../974/245974.xml">
Log</link></instrumentality>
</artifact>
</system>
&nbsp;·  <link xlink:type="simple" xlink:href="../953/233953.xml">
Transaction</link>&nbsp;·  <link xlink:type="simple" xlink:href="../076/1711076.xml">
Index</link>&nbsp;·  <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../251/277251.xml">
Stored procedure</link></instrumentality>
</artifact>
</system>
&nbsp;·  <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../101/1983101.xml">
Partition</link></instrumentality>
</artifact>
</system>
</col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
<programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../004/29004.xml">
SQL</link></programming_language>
</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<link xlink:type="simple" xlink:href="../285/665285.xml">
Select</link>&nbsp;·  <link xlink:type="simple" xlink:href="../237/903237.xml">
Insert</link>&nbsp;·  <link xlink:type="simple" xlink:href="../573/1220573.xml">
Update</link>&nbsp;·  <link xlink:type="simple" xlink:href="../931/4347931.xml">
Merge</link>&nbsp;·  <link xlink:type="simple" xlink:href="../216/1701216.xml">
Delete</link>&nbsp;·  <link xlink:type="simple" xlink:href="../204/665204.xml">
Join</link>&nbsp;·  <link xlink:type="simple" xlink:href="../258/11308258.xml">
Union</link>&nbsp;·  <link xlink:type="simple" xlink:href="../018/452018.xml">
Create</link>&nbsp;·  <link xlink:type="simple" xlink:href="../018/452018.xml">
Drop</link>&nbsp;·  <link xlink:type="simple" xlink:href="../953/233953.xml#xpointer(//*[./st=%22In+SQL%22])">
Begin work</link>&nbsp;·  <link xlink:type="simple" xlink:href="../958/1626958.xml">
Commit</link>&nbsp;·  <link xlink:type="simple" xlink:href="../240/1015240.xml">
Rollback</link>&nbsp;·  <link xlink:type="simple" xlink:href="../664/2554664.xml">
Truncate</link>&nbsp;·  <link xlink:type="simple" xlink:href="../018/452018.xml">
Alter</link>&nbsp;·  <link xlink:type="simple" xlink:href="../499/19041499.xml">
XSQL</link></col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
Implementations</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-even">
<link xlink:type="simple" xlink:href="../873/25873.xml">
Relational</link>&nbsp;·  <link xlink:type="simple" xlink:href="../973/573973.xml">
Flat file</link>&nbsp;·  <link xlink:type="simple" xlink:href="../069/1971069.xml">
Deductive</link>&nbsp;·  <link xlink:type="simple" xlink:href="../079/12321079.xml">
Dimensional</link>&nbsp;·  <link xlink:type="simple" xlink:href="../075/247075.xml">
Hierarchical</link>&nbsp;·  <link xlink:type="simple" xlink:href="../098/185098.xml">
Network</link>&nbsp;·  <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../414/15002414.xml">
Document-oriented</link></instrumentality>
</artifact>
</system>
&nbsp;·  <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../826/22826.xml">
Object-oriented</link></instrumentality>
</artifact>
</system>
&nbsp;·  <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../960/68960.xml">
Object-relational</link></instrumentality>
</artifact>
</system>
&nbsp;·  <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../471/1252471.xml">
Temporal</link></instrumentality>
</artifact>
</system>
&nbsp;·  <link xlink:type="simple" xlink:href="../351/1442351.xml">
XML data stores</link>&nbsp;·  <link xlink:type="simple" xlink:href="../386/16727386.xml">
Triple stores</link></col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
Components</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<link xlink:type="simple" xlink:href="../356/217356.xml">
Concurrency control</link>&nbsp;·  <link xlink:type="simple" xlink:href="../139/645139.xml">
Data dictionary</link>&nbsp;·  <link xlink:type="simple" xlink:href="../755/42755.xml">
JDBC</link>&nbsp;·  <link xlink:type="simple" xlink:href="../701/168701.xml">
ODBC</link>&nbsp;·  <link xlink:type="simple" xlink:href="../528/494528.xml">
Query language</link>&nbsp;·  <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../441/1732441.xml">
Query optimizer</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</instrumentality>
</artifact>
</system>
&nbsp;·  <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../792/1710792.xml">
Query plan</link></instrumentality>
</artifact>
</system>
</col>
</row>
<row style="height:2px;">

</row>
<row>
<col colspan="2" style=";" class="navbox-abovebelow">
<b>Database products:</b> <link xlink:type="simple" xlink:href="../860/1568860.xml">
Object-oriented</link> (<link xlink:type="simple" xlink:href="../534/1593534.xml">
comparison</link>)
&nbsp;·  <link xlink:type="simple" xlink:href="../820/1568820.xml">
Relational</link> (<link xlink:type="simple" xlink:href="../036/1569036.xml">
comparison</link>)&nbsp;·  <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../414/15002414.xml">
Document-oriented</link></instrumentality>
</artifact>
</system>
</col>
</row>
</table>
</col>
</row>
</table>

</p>


</sec>
</bdy>
</entity>
</instrumentality>
</artifact>
</system>
</article>
