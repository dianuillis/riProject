<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 18:08:19[mciao0825] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<computer  confidence="0.8" wordnetid="103082979">
<artifact  confidence="0.8" wordnetid="100021939">
<instrumentality  confidence="0.8" wordnetid="103575240">
<device  confidence="0.8" wordnetid="103183080">
<machine  confidence="0.8" wordnetid="103699975">
<header>
<title>English Electric KDF9</title>
<id>1111421</id>
<revision>
<id>243172225</id>
<timestamp>2008-10-05T13:10:06Z</timestamp>
<contributor>
<username>Clarkk</username>
<id>30773</id>
</contributor>
</revision>
<categories>
<category>Early computers</category>
</categories>
</header>
<bdy>

<b>KDF9</b> was an early British computer designed and built by <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../889/390889.xml">
English Electric</link></company>
, later <link>
English Electric Leo Marconi, EELM</link>, later still incorporated into <company wordnetid="108058098" confidence="0.8">
<institution wordnetid="108053576" confidence="0.8">
<link xlink:type="simple" xlink:href="../789/515789.xml">
ICL</link></institution>
</company>
. It first came into service in <link xlink:type="simple" xlink:href="../550/34550.xml">
1964</link> and was still in use in <link xlink:type="simple" xlink:href="../640/34640.xml">
1980</link> in at least one installation. The present article presents a synoptic overview of the architecture of the KDF9; for a more complete account, see ‘The Architecture of the KDF9 Computer’, and ‘KDF9 Usercode Programming Manual’, at the links below.
<sec>
<st>
Architecture</st>
<p>

The logic circuits of the KDF9 were entirely solid-state. The KDF9 used transformer-coupled <link xlink:type="simple" xlink:href="../752/417752.xml">
diode-transistor logic</link>, built from germanium diodes, about 20,000 transistors, and about 2,000 toroid pulse transformers<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref>. They ran on a 1 MHz two-phase clock. The maximum configuration incorporated 32K words of 48-bit core storage (192K bytes) with a cycle time of 6 microseconds. Each word could hold a 48-bit integer or floating-point number, two 24-bit integer or floating-point numbers, six 8-bit instruction <it>syllables</it>, or eight 6-bit characters. There was also provision for efficient handling of double-word, 96-bit, numbers in both integer and floating point formats.  However, there was no facility for byte or character addressing, so that non-numerical work suffered by comparison. Moreover, there was no standard character set. Each I/O device type had its own more or less similar character code. Not every character that could be read from paper tape could be successfully printed, for example. </p>

<ss1>
<st>
Registers</st>
<p>

The CPU architecture featured three register sets. The <it>Nest</it> was a 16-deep pushdown stack of arithmetic registers, The <it>SJNS</it> (Subroutine Jump Nesting Store) was a similar stack of return addresses. The <it>Q Store</it> was a set of 16 index registers, each of 48 bits divided into <it>Counter</it> (C), <it>Increment</it> (I) and <it>Modifier</it> (M) parts of 16 bits each. Flags on a memory-reference instruction specified whether the address should be modified by the M part of a Q Store, and, if so, whether the C part should be decremented by 1 and the M part incremented by the contents of the I part.  This made the coding of counting loops very efficient.</p>

</ss1>
<ss1>
<st>
Instruction set</st>
<p>

Instructions were of 1, 2 or 3 syllables. Most arithmetic took place at the top of the Nest and used <it>zero-address</it>, 1-syllable instructions, although address arithmetic and index updating were handled separately in the Q store. Q Store handling, and some memory reference instructions, used 2 syllables. Memory reference instructions with a 16-bit address offset, most jump instructions, and 16-bit literal load instructions, all used 3 syllables. </p>
<p>

Dense instruction coding, and extensive use of the register sets, meant that relatively few store accesses were needed for common scientific codes, such as scalar product and polynomial inner loops. This did much to offset the relatively slow core cycle time, giving the KDF9 about a half of the speed of its more famous, but much more expensive and much less commercially successful contemporary, the Manchester/<company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../059/1124059.xml">
Ferranti</link></company>
 <link xlink:type="simple" xlink:href="../548/19278548.xml">
Atlas Computer</link>.</p>

</ss1>
<ss1>
<st>
Multiprogramming (Timesharing)</st>
<p>

The KDF9 was one of the earliest fully hardware-secured multiprogramming systems. Up to four programs could be run at once under the control of its elegantly simple operating system, the <it>Timesharing Director</it>, each being locked into its own core area by BA (Base Address) and NOL (Number of Locations) registers. Each program had its own sets of stack and Q store registers, which were activated when that program was dispatched, so that context switching was very efficient. Each program could drive hardware I/O devices directly, but was limited by hardware checks to those that the Director had allocated to it. Any attempt to use an unallocated device caused an error interrupt. A similar interrupt resulted from overfilling or (over-emptying) the Nest or SJNS, or attempting to access storage at an address above that given in the NOL register. Somewhat different was the Lock-Out interrupt, which resulted from trying to access an area of store that was currently being used by an I/O device, so that there was hardware mutual exclusion of access to DMA buffers. When a program blocked on a Lock-Out, or by voluntarily waiting for an I/O transfer to terminate, it was interrupted and Director switched to the program of highest priority that was not itself blocked. When a Lock-Out cleared, or an awaited transfer terminated, and the newly unblocked program was of higher priority than the program currently running, an interrupt to Director allowed for an immediate context switch.</p>
<p>

Later operating systems, including <link xlink:type="simple" xlink:href="../027/1319027.xml">
Eldon</link> at the University of Leeds, and <link>
Egdon/COTAN</link>, developed by a collaboration of Culham Laboratories, the University of Glasgow, and others, were fully interactive multi-access systems, usually with <link xlink:type="simple" xlink:href="../364/24364.xml">
PDP-8</link> front ends to handle the terminals. </p>
<p>

The Kidsgrove and Whetstone <link xlink:type="simple" xlink:href="../453/1453.xml">
Algol 60</link> compilers were among the first of their class. The Kidsgrove compiler stressed optimization; the Whetstone compiler produced an interpretive object code aimed at debugging. It was by instrumenting the latter that Brian Wichmann obtained the statistics on program behaviour that led him to devise the <standard wordnetid="107260623" confidence="0.8">
<benchmark wordnetid="107261143" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../978/1012978.xml">
Whetstone</link></system_of_measurement>
</benchmark>
</standard>
 benchmark for scientific computation, which inspired in turn the <standard wordnetid="107260623" confidence="0.8">
<benchmark wordnetid="107261143" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../709/8709.xml">
Dhrystone</link></system_of_measurement>
</benchmark>
</standard>
 benchmark for non-numerical workloads.</p>

</ss1>
</sec>
<sec>
<st>
Reminiscence</st>
<p>

Machine code programming used an unusual form of octal, known locally as 'bastardised octal'. It represented 8 bits with three octal digits but the first represented only two bits, whilst the others, the usual three.</p>
<p>

Within English Electric, its predecessor, <computer wordnetid="103082979" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<machine wordnetid="103699975" confidence="0.8">
<link xlink:type="simple" xlink:href="../722/988722.xml">
DEUCE</link></machine>
</device>
</instrumentality>
</artifact>
</computer>
, had a well-used matrix package. The unreliability of valve machines led to the inclusion of a sum-check mechanism to detect single errors in matrix operations. The package used fixed-point arithmetic, in which the sum-checks were precise. However, when the corresponding package was implemented on KDF9, it used floating point, a new concept that had only limited mathematical analysis. It quickly became clear that sum checks were no longer precise and a project was established in an attempt to provide a usable check. (In floating point (A+B)+C is not necessarily the same as A+(B+C) i.e. the + operation is not associative.) Before long, however, it was recognised that error rates with transistor machines was not an issue - they either worked or did not! Consequently the idea of sum checks was abandoned. The initial matrix package proved a very useful system testing tool as it was able to generate lengthy performance checks well before more formal test packages which were subsequently developed.</p>
<p>

Legend has it that the KDF9 was developed as project KD9 (Kidsgrove Development 9) and that the 'F' in its designation was contributed by the then Chairman after a long and tedious discussion on what to name the machine at launch - "I don't care if you call it the .......".  (See also <link xlink:type="simple" xlink:href="../348/4995348.xml">
KDF8</link> for the parallel development and use of a Commercially-oriented computer.)  </p>
<p>

The Egdon operating system was so named because one was going to <link xlink:type="simple" xlink:href="../042/601042.xml">
UKAEA</link> <reactor wordnetid="104057846" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<facility wordnetid="103315023" confidence="0.8">
<station wordnetid="104306080" confidence="0.8">
<electrical_device wordnetid="103269401" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<link xlink:type="simple" xlink:href="../127/5485127.xml">
Winfrith</link></device>
</electrical_device>
</station>
</facility>
</instrumentality>
</artifact>
</reactor>
: in Thomas Hardy's book <it>The Return of the Native</it> Winfrith Heath is called Egdon Heath.  Their Fortran was called Egtran.  Eldon was so named because Leeds University's computer was located in a converted Eldon chapel.</p>
<p>

During the "foot and mouth" trauma of 1968 the Grand National was run on English Electric's Bureau KDF9 in Hartree House, Queensway, London with Raymond Glendinning leaning over the back of the line printer, reading the printout to the world of BBC radio!</p>

</sec>
<sec>
<st>
External links</st>


<p>

<reflist>
<entry id="1">
<weblink xlink:type="simple" xlink:href="http://www.cs.man.ac.uk/CCS/res/res18.htm#c">
"The KDF9 Computer - 30 Years On"</weblink></entry>
</reflist>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.findlayw.plus.com/KDF9/KDF9%20Lectures%20by%20JWP.pdf">
The Architecture of the KDF9 Computer</weblink> (pdf)</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://frink.ucg.ie/~bfoley/edhist/kdf9pm/kdf9pm.html">
KDF9 Usercode Programming Manual</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.cs.ncl.ac.uk/research/pubs/articles/papers/427.pdf">
History of KDF9 Algol compiler</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.cs.ncl.ac.uk/research/pubs/books/papers/124.pdf">
The Whetstone KDF9 Algol Translator</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.cs.ncl.ac.uk/research/pubs/trNN/papers/38.pdf">
Whetstone compiler, 1962</weblink> (pdf)</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.cs.man.ac.uk/CCS/res/res04.htm#d">
Some KDF9 Algol compiler anecdotes</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.cs.ncl.ac.uk/research/pubs/trNN/papers/34.pdf">
Presentation on KDF9 Algol on visit from Dijkstra</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://homepages.cwi.nl/~dik/english/codes/8tape.html#kdf">
KDF9 8-level papertape format</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://themotionstore.com/leeedavison/kdf9/">
KDF9 Nest</weblink> (images)</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://history.dcs.ed.ac.uk/archive/languages/atlas-autocode/imp9.imp.txt">
Source Code for KDF9 port of Atlas Autocode compiler</weblink></entry>
</list>
</p>

</sec>
</bdy>
</machine>
</device>
</instrumentality>
</artifact>
</computer>
</article>
