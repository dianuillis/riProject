<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 16:03:34[mciao0826] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<artifact  confidence="0.8" wordnetid="100021939">
<header>
<title>Anti-aliasing</title>
<id>113507</id>
<revision>
<id>244332323</id>
<timestamp>2008-10-10T08:32:42Z</timestamp>
<contributor>
<username>Lightmouse</username>
<id>4469495</id>
</contributor>
</revision>
<categories>
<category>Computer graphic artifacts</category>
<category>Digital typography</category>
<category>Image processing</category>
</categories>
</header>
<bdy>
<p>

In <link xlink:type="simple" xlink:href="../TN$$/HT$C$_T$yT$N$.xml">
digital signal processing</link>, <b>anti-aliasing</b> is the technique of minimizing the distortion artifacts known as <link xlink:type="simple" xlink:href="../474/151474.xml">
aliasing</link> when representing a high-resolution signal at a lower resolution. Anti-aliasing is used in <link xlink:type="simple" xlink:href="../597/3616597.xml">
digital photography</link>, <link xlink:type="simple" xlink:href="../210/18567210.xml">
computer graphics</link>, <link xlink:type="simple" xlink:href="../712/53712.xml">
digital audio</link>, and many other applications.</p>
<p>

In the image domain, aliasing artifacts can appear as wavy lines or bands, <link>
moiré</link> patterns, popping, <link xlink:type="simple" xlink:href="../295/41295.xml">
strobing</link>, or as unwanted sparkling. In the sound domain they can appear as rough, dissonant, or spurious tones, or as noise.</p>
<p>

Anti-aliasing means removing signal components that have a higher <link xlink:type="simple" xlink:href="../779/10779.xml">
frequency</link> than is able to be properly resolved by the recording (or sampling) device.  This removal is done before (re)sampling at a lower resolution. When sampling is performed without removing this part of the signal, it causes undesirable artifacts such as the black-and-white noise near the top of figure 1-a <link xlink:type="simple" xlink:href="#xpointer(//*[./st=%22Figure1%22])">
below</link>. </p>
<p>

In signal acquisition and audio, anti-aliasing is often done using an analog <link xlink:type="simple" xlink:href="../949/1291949.xml">
anti-aliasing filter</link> to remove the out-of-band component of the input signal prior to sampling with an <link xlink:type="simple" xlink:href="../367/40367.xml">
analog-to-digital converter</link>. In <link xlink:type="simple" xlink:href="../597/3616597.xml">
digital photography</link>, optical <link xlink:type="simple" xlink:href="../949/1291949.xml">
anti-aliasing filter</link>s are made of <link xlink:type="simple" xlink:href="../412/174412.xml">
birefringent</link> materials, and smooth the signal in the spatial optical domain.  The anti-aliasing filter essentially blurs the image slightly in order to reduce resolution to below the limit of the digital sensor (the larger the <link xlink:type="simple" xlink:href="../899/430899.xml">
pixel pitch</link>, the lower the achievable resolution at the sensor level).</p>
<p>

See the articles on signal processing and <link xlink:type="simple" xlink:href="../474/151474.xml">
aliasing</link> for more information about the theoretical justifications for anti-aliasing. The remainder of this article is dedicated to anti-aliasing methods in <link xlink:type="simple" xlink:href="../210/18567210.xml">
computer graphics</link>.</p>

<sec>
<st>
Examples</st>
<p>

<table style="margin-left:5px;" align="right" width="300">
<row>
<col>
<image width="150px" src="aliased.png">
<caption>

An un-anti-aliased picture of a checkerboard from an angle looks random in the distance, and has unsmooth lines in the foreground.
</caption>
</image>
(a)</col>
<col>
<image width="150px" src="antialiased.png">
<caption>

The same picture, anti-aliased, blurs into a gray in the distance, and has smoother lines in the foreground.
</caption>
</image>
(b)</col>
<col>
<image width="150px" src="antialiased-sinc.png">
<caption>

There are different algorithms for anti-aliasing, creating a slightly different appearance.
</caption>
</image>
(c)</col>
</row>
<row>

<col>
Figure 1</col>
</row>
</table>

<image width="150px" src="antialiased-zoom.png">
<caption>

Figure 2
</caption>
</image>
</p>
<p>

Figure 1-a illustrates the visual distortion that occurs when anti-aliasing is not used. Notice that near the top of the image, where the checkerboard is very distant, the image is impossible to recognize, and is not aesthetically appealing. By contrast, figure 1-b is anti-aliased. The checkerboard near the top blends into gray, which is usually the desired effect when the <link xlink:type="simple" xlink:href="../184/1191184.xml">
resolution</link> is insufficient to show the detail. Even near the bottom of the image, the edges appear much smoother in the anti-aliased image. Figure 1-c shows another anti-aliasing <link xlink:type="simple" xlink:href="../775/775.xml">
algorithm</link>, based on the <link xlink:type="simple" xlink:href="../637/267637.xml">
sinc filter</link>, which is considered better than the algorithm used in 1-b. 
Figure 2 shows magnified portions of Figure 1 for comparison. The left half of the image is taken from Figure 1-a, and the right half of the image is taken from Figure 1-c. Observe that the gray <link xlink:type="simple" xlink:href="../665/23665.xml">
pixel</link>s help make 1-c much smoother than 1-a, though they are not very attractive at the scale used in Figure 2.</p>

<p>

<table>
<row>
<col valign="top">
<image width="150px" src="Anti-aliased-diamonds.png">
<caption>

Anti-aliased-diamonds.png
</caption>
</image>
Compare the diamond on the left with the anti-aliased one on the right</col>
<col rowspan="2">
<image width="150px" src="Anti-aliased_diamond_enlarged.png">
<caption>

Anti-aliased diamond enlarged.png
</caption>
</image>
Enlarged view</col>
</row>
<row>
<col valign="bottom">
Figure 3</col>
</row>
</table>
</p>
<p>

Fig 3 shows how anti-aliasing smooths the outline. Text is affected in just the same way.</p>


</sec>
<sec>
<st>
First-principles approach to anti-aliasing</st>

<p>

The idealized image has <link xlink:type="simple" xlink:href="../455/15455.xml">
infinite</link> detail, and is represented by a <link xlink:type="simple" xlink:href="../427/185427.xml">
function</link> <it>f(x,y)</it> where x and y are <link xlink:type="simple" xlink:href="../491/19725491.xml">
real number</link>s defining <link xlink:type="simple" xlink:href="../931/81931.xml">
coordinate</link>s.</p>
<p>

There are infinitely many such functions. However, the computer screen is capable of displaying only finitely many different images. Indeed, an ordinary computer screen has no more than a few million pixels, and each pixel only has a finite number of colors it can display.</p>
<p>

Hence, an image <it>f(x,y)</it> must be simplified in order to be converted into a displayable form. By the <link xlink:type="simple" xlink:href="../217/54217.xml">
pigeonhole principle</link>, sometimes two different ideal images <it>f(x,y)</it> and <it>g(x,y)</it> will unavoidably be converted to the same picture on the screen. The question is how to select the best possible reduced image.</p>
<p>

An example of a poor choice is illustrated in Figure 1-a. The most direct way to simplify an image for display is to use a sample of the image at <it>f</it>(<it>i</it>,<it>j</it>) for each pixel (<it>i</it>,<it>j</it>), as illustrated. At the top of the checkerboard, multiple black and white tiles may be represented by a single pixel. But since only black and white points occur in the ideal image, an area containing both colors in similar proportion will be represented with a strange pattern of black and white. This type of aliasing is called a <link>
Moiré effect</link>.</p>
<p>

A better approach is, for each pixel, to use the average intensity of a rectangular area in the scene corresponding to the surface area of the pixel. This gives a better, but not yet ideal, "anti-aliased" appearance; figure 1-b was generated this way. To see why this works better, it helps to look at the problem from a signal-processing perspective.</p>

</sec>
<sec>
<st>
Signal processing approach to anti-aliasing</st>

<p>

In this approach, the ideal image is regarded as a <it>signal</it>, the image displayed on the screen is taken as samples, at each (<it>x,y</it>) pixel position, of a filtered version of the signal. Ideally, we would understand how the human brain would process the original signal, and provide an image on screen that will yield the most similar response by the brain.</p>
<p>

The most widely accepted analytic tool for such problems is the <mathematical_relation wordnetid="113783581" confidence="0.8">
<idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<operator wordnetid="113786413" confidence="0.8">
<function wordnetid="113783816" confidence="0.8">
<link xlink:type="simple" xlink:href="../247/52247.xml">
Fourier transform</link></function>
</operator>
</concept>
</idea>
</mathematical_relation>
. The Fourier transform decomposes our signal into basic <link xlink:type="simple" xlink:href="../516/33516.xml">
waves</link> of different frequencies, and gives us the <link xlink:type="simple" xlink:href="../649/37649.xml">
amplitude</link> of each wave in our signal. The waves are of the form:</p>
<p>

<indent level="2">

<math>\cos (2j \pi x) \cos (2k \pi y)</math>
</indent>

where <it>j</it> and <it>k</it> are arbitrary non-negative integers. (In fact, there are also waves involving the <link xlink:type="simple" xlink:href="../367/30367.xml">
sine</link>, but for the purpose of this discussion, the <link xlink:type="simple" xlink:href="../367/30367.xml">
cosine</link> will suffice; see <mathematical_relation wordnetid="113783581" confidence="0.8">
<idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<operator wordnetid="113786413" confidence="0.8">
<function wordnetid="113783816" confidence="0.8">
<link xlink:type="simple" xlink:href="../247/52247.xml">
Fourier transform</link></function>
</operator>
</concept>
</idea>
</mathematical_relation>
 for technical details.)</p>
<p>

The numbers <it>j</it> and <it>k</it> together are the <it>frequency</it> of the wave: <it>j</it> is the frequency in the <it>x</it> direction, and <it>k</it> is the frequency in the <it>y</it> direction.</p>
<p>

As has been proved in the <link>
Nyquist–Shannon sampling theorem</link>, to uniquely specify a signal of not more than <it>n</it> frequencies, you need at least <it>2n</it> <link xlink:type="simple" xlink:href="../605/201605.xml">
sample</link> points (assuming the inclusion of the sines that we omitted above).  </p>
<p>

The eye is predominantly sensitive to lower frequencies.  And so, in <link xlink:type="simple" xlink:href="../324/29324.xml">
signal processing</link>, we choose to eliminate all high frequencies from the signal, keeping only the frequencies that are low enough to be sampled correctly by our sample rate.</p>
<p>

The goal of sharply cutting off frequencies above a certain limit, known as the <link xlink:type="simple" xlink:href="../685/164685.xml">
Nyquist frequency</link>, can not be realized exactly, even with Fourier techniques, so it is always approximated, with many different choices of detailed algorithm.  Our knowledge of human visual perception is not sufficient, in general, to say what approach will look best, but in general better approximations to the Fourier ideal tend to look better.</p>
<p>

Figure 1-c was generated with the frequency-cutoff approach. It was not possible to do an exact Fourier series truncation; however, an approximation was used which we hope comes close to the correct image. To highlight the differences between 1-b and 1-c, observe that 1-c manages to be a bit clearer further up on the image than 1-b does. We are able to distinguish some texture other than uniform gray higher up on the image in 1-c than in 1-b.</p>
<p>

The basic waves need not be cosine waves. See, for instance, <link xlink:type="simple" xlink:href="../903/50903.xml">
wavelet</link>s. If one uses basic waves which are not cosine waves, one obtains a slightly different image. Some basic waves yield anti-aliasing algorithms that are not so good.  For instance, the Haar wavelet gives the uniform averaging algorithm. However, some wavelets are good, and it is possible that some wavelets are better at approximating the functioning of the human brain than the cosine basis.</p>

</sec>
<sec>
<st>
 Two dimensional considerations </st>
<p>

<image width="150px" src="Sinc(x)_x_sinc(y)_plot.jpg" type="thumb">
<caption>

Sinc function, with separate X and Y
</caption>
</image>

The above assumes that the rectangular mesh sampling is the dominant part of the problem.
It should seem odd that the filter usually considered optimal is not rotationally symmetrical, as shown in this first figure.  Since eyes can rotate in their sockets, this must have to do with the fact that we are dealing with data sampled on a <link xlink:type="simple" xlink:href="../853/2874853.xml">
square lattice</link> and not with a continuous image.  This must be the justification for doing signal processing, along each axis, as it is traditionally done on one dimensional data. <link xlink:type="simple" xlink:href="../241/2338241.xml">
Lanczos resampling</link> is based on convolution of the data with a discrete representation of the sinc function. </p>
<p>

<image width="150px" src="Sinc(r).jpg" type="thumb">
<caption>

Radial Sinc function
</caption>
</image>

If the resolution is not limited by the rectangular sampling rate of either the source or the target image, then one should ideally use rotationally symmetrical filter or interpolation functions, as though the data were a two dimensional function of continuous x and y.  The sinc function of the radius, in the second figure, has too long a tail to make a good filter (it is not even <link xlink:type="simple" xlink:href="../520/602520.xml">
square-integrable</link>).  A more appropriate analog to the one-dimensional sinc is the two-dimensional <link xlink:type="simple" xlink:href="../128/513128.xml">
Airy disc</link> amplitude, the 2D Fourier transform of a circular region in 2D frequency space, as opposed to a square region.</p>
<p>

<image width="150px" src="Gaussian_plus_its_own_curvature.jpg" type="thumb">
<caption>

Gaussian plus differential function
</caption>
</image>

One might consider a Gaussian plus enough of its second derivative to flatten the top (in the frequency domain) or sharpen it up (in the spatial domain).  This function is shown also.  Functions based on the Gaussian function are natural choices, because convolution with a Gaussian gives another Gaussian, whether applied to x and y or to the radius.  Another of its properties is that it (similarly to wavelets) is half way between being localized in the configuration (x and y) and in the spectral (j and k) representation.  As an interpolation function, a Gaussian alone seems too spread out to preserve the maximum possible detail, which is why the second derivative is added.</p>
<p>

As an example, when printing a photographic negative, with plentiful processing capability, on a printer with a hexagonal pattern, there is no reason to use sinc function interpolation.  This would treat diagonal lines differently from horizontal and vertical lines, which is like a weak form of aliasing.</p>

</sec>
<sec>
<st>
 Practical real-time anti-aliasing approximations</st>

<p>

There are only a handful of <link xlink:type="simple" xlink:href="../491/333491.xml">
primitives</link> used at the lowest level in a real-time <link xlink:type="simple" xlink:href="../775/25775.xml">
rendering</link> engine (either software or hardware accelerated.) These include "points", "lines" and "triangles". If one is to draw such a primitive in white against a black background, it is possible to design such a primitive to have fuzzy edges, achieving some sort of anti-aliasing. However, this approach has difficulty dealing with adjacent primitives (such as triangles that share an edge.)</p>
<p>

To approximate the uniform averaging algorithm, one may use an extra buffer for sub-pixel data. The initial, and least memory-hungry approach, used 16 extra bits per pixel, in a 4×4 grid. If one renders the primitives in a careful order, for instance front-to-back, it is possible to create a reasonable image.</p>
<p>

Since this requires that the primitives be in some order, and hence interacts poorly with an application programming interface such as <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../497/22497.xml">
OpenGL</link></software>
, the latest attempts simply have two or more full sub-pixels per pixel, including full color information for each sub-pixel. Some information may be shared between the sub-pixels (such as the <link xlink:type="simple" xlink:href="../904/146904.xml">
Z-buffer</link>.)</p>

<ss1>
<st>
Mipmapping</st>

<p>

<indent level="1">

<it>Main article: <structure wordnetid="104341686" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<link xlink:type="simple" xlink:href="../107/437107.xml">
Mipmap</link></artifact>
</structure>
</it>
</indent>

There is also an approach specialized for <link xlink:type="simple" xlink:href="../903/146903.xml">
texture mapping</link> called <link xlink:type="simple" xlink:href="../107/437107.xml">
mipmap</link>ping, which works by creating lower resolution, prefiltered versions of the texture map. When rendering the image, the appropriate resolution mip-map is chosen and hence the texture pixels (texels) are already filtered when they arrive on the screen. Mipmapping is generally combined with various forms of <link xlink:type="simple" xlink:href="../342/877342.xml">
texture filtering</link> in order to improve the final result.</p>

</ss1>
</sec>
<sec>
<st>
 An example of an image with extreme pseudo-random aliasing </st>
<p>

Because <link xlink:type="simple" xlink:href="../913/10913.xml">
fractals</link> have unlimited detail and no noise other than arithmetic roundoff error, they illustrate aliasing more clearly than do photographs or other measured data.  The <link>
dwells</link>, which are converted to colors at the exact centers of the pixels, go to infinity at the border of the set, so colors from centers near borders are unpredictable, due to aliasing.  This example has edge in about half of its pixels, so it shows much aliasing.  The first image is uploaded at its original sampling rate.  Since most modern software anti-aliases, one may have to download the full size version to see all of the aliasing.
The second image is calculated at five times the sampling rate and <link xlink:type="simple" xlink:href="../049/1315049.xml">
down-sampled</link> with anti-aliasing.  Assuming that we would really like something like the average color over each pixel, this one is getting closer.  It is clearly more orderly than the first.</p>
<p>

Click each image to see it big enough to get the point.</p>
<p>

<image width="150px" src="Mandelbrot_%20Turbine%20_desk_shape.jpg">
<caption>

1. As calculated with the program "MandelZot"
</caption>
</image>

<image width="150px" src="Mandelbrot_Turbine_big_all_samples.jpg">
<caption>

2. Anti-aliased by blurring and down-sampling by a factor of five
</caption>
</image>

<image width="150px" src="Mandelbrot_Budding_turbines.jpg">
<caption>

3. Edge points interpolated, then anti-aliased and down-sampled
</caption>
</image>

<image width="150px" src="Mandelbrot_Turbine_Chaff.jpg">
<caption>

4. An enhancement of the points removed from the previous image
</caption>
</image>
</p>

<p>

It happens that, in this case, there is additional information that can be used.  By re-calculating with the distance estimator, points were identified that are very close to the edge of the set, so that unusually fine detail is aliased in from the rapidly changing dwell values near the edge of the set.  The colors derived from these calculated points have been identified as unusually unrepresentative of their pixels.  Those points were replaced, in the third image, by interpolating the points around them.  This reduces the noisiness of the image but has the side effect of brightening the colors.  So this image is not exactly the same that would be obtained with an even larger set of calculated points.</p>
<p>

<image width="140px" src="Mandelbrot_Budding_Turbines_downsampled.jpg" type="thumb">
<caption>

5. Down-sampled, again, without anti-aliasing
</caption>
</image>
</p>
<p>

To show what was discarded, the rejected points, bled into a grey background, are shown in the fourth image.</p>
<p>

Finally, "Budding Turbines" is so regular that systematic (Moiré) aliasing can clearly be seen near the main "turbine axis" when it is downsized by taking the nearest pixel.  The aliasing in the first image appears random because it comes from all levels of detail, below the pixel size.  When the lower level aliasing is suppressed, to make the third image and then that is down-sampled once more, without anti-aliasing, to make the fifth image, the order on the scale of the third image appears as systematic aliasing in the fifth image.</p>
<p>

The best anti-aliasing and down-sampling method here depends on one's point of view.  When fitting the most data into a limited array of pixels, as in the fifth image, sinc function anti-aliasing would seem appropriate.  In obtaining the second and third images, the main objective is to filter out aliasing "noise", so a rotationally symmetrical function may be more appropriate.</p>

</sec>
<sec>
<st>
Full-scene anti-aliasing</st>

<p>

Modern <link xlink:type="simple" xlink:href="../624/113624.xml">
graphics card</link>s usually support some method of full-scene anti-aliasing (FSAA) to help avoid <link xlink:type="simple" xlink:href="../474/151474.xml">
aliasing</link> (or "<link xlink:type="simple" xlink:href="../362/16362.xml">
jaggies</link>") on full-screen images. The resulting image may seem softer, and should also appear more realistic. One tried and true method of avoiding or removing <link xlink:type="simple" xlink:href="../474/151474.xml">
aliasing</link> <link xlink:type="simple" xlink:href="../904/584904.xml">
artifacts</link> on full-screen <link xlink:type="simple" xlink:href="../726/503726.xml">
images</link> is <link xlink:type="simple" xlink:href="../142/4962142.xml">
supersampling</link>.</p>
<p>

However, while useful for photo-like images, a simple anti-aliasing approach (such as supersampling and then averaging) may actually worsen the appearance of some types of line art or diagrams (making the image appear fuzzy), especially where most lines are horizontal or vertical.  In these cases, a prior grid-fitting step may be useful (see <link xlink:type="simple" xlink:href="../908/3545908.xml">
hinting</link>).</p>
<p>

In general, supersampling is a technique of collecting data points at a greater <link xlink:type="simple" xlink:href="../184/1191184.xml">
resolution</link> (usually by a power of two) than the final data resolution. These data points are then combined (down-sampled) to the desired resolution, often just by a simple <link xlink:type="simple" xlink:href="../167/60167.xml">
average</link>. The combined data points have less visible aliasing artifacts (or <link>
moiré pattern</link>s).</p>
<p>

Full-scene anti-aliasing by supersampling usually means that each full frame is <link xlink:type="simple" xlink:href="../604/6604.xml">
rendered</link> at double (2x) or quadruple (4x) the <link xlink:type="simple" xlink:href="../677/7677.xml">
display</link> resolution, and then down-sampled to match the display resolution. So a 4x FSAA would render 16 supersampled <link xlink:type="simple" xlink:href="../665/23665.xml">
pixels</link> for each single pixel of each frame.</p>
<p>

More often than not, FSAA is implemented in hardware in such a way that a graphical application is unaware the images are being supersampled and then down-sampled before being displayed.</p>

</sec>
<sec>
<st>
Object-based anti-aliasing</st>

<p>

A graphics rendering system creates an image based on objects constructed of polygonal primitives whereby the aliasing effects in the image are reduced by applying an anti-aliasing scheme only to the areas of the image representing silhouette edges of the objects. The silhouette edges are anti-aliased by creating anti-aliasing primitives which vary in opacity. These anti-aliasing primitives are joined to the silhouetted edges, and create a region in the image where the objects appear to blend into the background. The method has some important advantages over the classical methods based on the <link>
accumulation buffer</link> since it generates full-scene anti-aliasing in only two passes and does not require the use of the additional memory required by the accumulation buffer. Object-based anti-aliasing was first developed at <link xlink:type="simple" xlink:href="../013/28013.xml">
Silicon Graphics</link> for their <computer wordnetid="103082979" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<machine wordnetid="103699975" confidence="0.8">
<digital_computer wordnetid="103196324" confidence="0.8">
<workstation wordnetid="104603399" confidence="0.8">
<link xlink:type="simple" xlink:href="../973/608973.xml">
Indy</link></workstation>
</digital_computer>
</machine>
</device>
</instrumentality>
</artifact>
</computer>
 workstation.</p>

</sec>
<sec>
<st>
History</st>
<p>

Important early works in the history of anti-aliasing include:</p>
<p>

<list>
<entry level="1" type="bullet">

<physical_entity wordnetid="100001930" confidence="0.8">
<peer wordnetid="109626238" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<colleague wordnetid="109935990" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<research_worker wordnetid="110523076" confidence="0.8">
<associate wordnetid="109816771" confidence="0.8">
<link xlink:type="simple" xlink:href="../061/174061.xml">
Freeman, H.</link></associate>
</research_worker>
</scientist>
</causal_agent>
</colleague>
</person>
</peer>
</physical_entity>
. "Computer processing of line drawing images", <it>ACM Computing Surveys</it> vol. 6(1), March 1974, pp. 57–97.</entry>
<entry level="1" type="bullet">

<person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../058/174058.xml">
Crow, Franklin C.</link></scientist>
</person>
. "The aliasing problem in computer-generated shaded images", <it><work wordnetid="104599396" confidence="0.8">
<product wordnetid="104007894" confidence="0.8">
<creation wordnetid="103129123" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<periodical wordnetid="106593296" confidence="0.8">
<publication wordnetid="106589574" confidence="0.8">
<link xlink:type="simple" xlink:href="../161/291161.xml">
Communications of the ACM</link></publication>
</periodical>
</artifact>
</creation>
</product>
</work>
</it>, vol. 20(11), November 1977, pp. 799–805.</entry>
<entry level="1" type="bullet">

<physical_entity wordnetid="100001930" confidence="0.8">
<peer wordnetid="109626238" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<good_person wordnetid="110138767" confidence="0.8">
<colleague wordnetid="109935990" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<adult wordnetid="109605289" confidence="0.8">
<saint wordnetid="110546850" confidence="0.8">
<professional wordnetid="110480253" confidence="0.8">
<associate wordnetid="109816771" confidence="0.8">
<link xlink:type="simple" xlink:href="../051/174051.xml">
Catmull, Edwin</link></associate>
</professional>
</saint>
</adult>
</scientist>
</causal_agent>
</colleague>
</good_person>
</person>
</peer>
</physical_entity>
. "A hidden-surface algorithm with anti-aliasing", <it>Proceedings of the 5th annual conference on Computer graphics and interactive techniques</it>, p.6–11, August 23–25, 1978.</entry>
</list>
</p>

</sec>
<sec>
<st>
See also</st>
<p>

<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../142/4962142.xml">
Supersampling</link>, a method of antialiasing</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../361/160361.xml">
Statistical sampling</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../905/6095905.xml">
Temporal anti-aliasing</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../404/621404.xml">
Anisotropic filtering</link>, another method for improving image quality by enhancing textures</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../873/19873.xml">
Measure theory</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../087/1172087.xml">
Font rasterization</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../672/455672.xml">
Color theory</link> for certain physical details pertinent to color images</entry>
<entry level="1" type="bullet">

 <artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<filter wordnetid="103339643" confidence="0.8">
<link xlink:type="simple" xlink:href="../242/1875242.xml">
Reconstruction filter</link></filter>
</device>
</instrumentality>
</artifact>
</entry>
<entry level="1" type="bullet">

 <structure wordnetid="105726345" confidence="0.8">
<idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<aspect wordnetid="105850624" confidence="0.8">
<form wordnetid="105930736" confidence="0.8">
<property wordnetid="105849040" confidence="0.8">
<feature wordnetid="105849789" confidence="0.8">
<link xlink:type="simple" xlink:href="../906/174906.xml">
Quincunx</link></feature>
</property>
</form>
</aspect>
</concept>
</idea>
</structure>
 (pattern used for anti-aliasing)</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../708/593708.xml">
Subpixel rendering</link>, an application of anti-aliasing using the properties of a color LCD screen</entry>
<entry level="1" type="bullet">

 <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../689/222689.xml">
Xiaolin Wu's line algorithm</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
 fast real-time anti-aliasing</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../391/5283391.xml">
Multisample anti-aliasing</link></entry>
</list>
</p>

</sec>
<sec>
<st>
 External links </st>
<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://lunaloca.com/tutorials/antialiasing/">
Antialiasing and Transparency Tutorial</weblink>: Explains interaction between antialiasing and transparency, especially when dealing with web graphics</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://home.no.net/dmaurer/~dersch/gamma/gamma.html">
Interpolation and Gamma Correction</weblink> In most real-world systems, <link xlink:type="simple" xlink:href="../466/68466.xml">
gamma correction</link> is required to linearize the response curve of the sensor and display systems. If this is not taken into account, the resultant non-linear distortion will defeat the purpose of anti-aliasing calculations based on the assumption of a linear system response.</entry>
<entry level="1" type="bullet">

 (French) <weblink xlink:type="simple" xlink:href="http://www.astrosurf.com/luxorion/apn-anti-aliasing.htm">
Le rôle du filtre anti-aliasing dans les APN (the function of anti-aliasing filter in dSLR)</weblink></entry>
</list>
</p>


</sec>
</bdy>
</artifact>
</article>
