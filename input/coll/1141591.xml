<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 18:13:34[mciao0826] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>Rich Internet application</title>
<id>1141591</id>
<revision>
<id>241010201</id>
<timestamp>2008-09-25T22:53:12Z</timestamp>
<contributor>
<username>FatalError</username>
<id>1054301</id>
</contributor>
</revision>
<categories>
<category>Web 2.0</category>
<category>All pages needing cleanup</category>
<category>Articles that may contain original research since July 2008</category>
<category>Articles lacking reliable references from June 2008</category>
<category>Software architecture</category>
<category>Cleanup from June 2008</category>
<category>Articles to be merged since July 2008</category>
<category>All articles to be merged</category>
<category>Wikipedia articles needing style editing from June 2008</category>
</categories>
</header>
<bdy>

<table class="metadata plainlinks ambox ">
<row>
<col>

ambox-content" style=""</col>
</row>
<row>
<col class="mbox-image"><p>

<image width="40x40px" src="Ambox_content.png">
</image>
</p>
</col>
<col style="" class="mbox-text">
 <p>

This article has multiple issues. Please help <b><weblink xlink:type="simple" xlink:href="http://localhost:18088/wiki/index.php?title=Rich_Internet_application&amp;action=edit">
improve the article</weblink></b> or discuss these issues on the .
<list>
<entry level="1" type="bullet">

 It needs <b>additional  for .</b> Tagged since June 2008.</entry>
<entry level="1" type="bullet">

 It may contain  or . Tagged since June 2008.</entry>
<entry level="1" type="bullet">

 It reads like an  and needs to be rewritten from a . Tagged since June 2008.</entry>
<entry level="1" type="bullet">

 It may require general  to meet Wikipedia's . Tagged since June 2008.</entry>
</list>
</p>
</col>
</row>
</table>

<p>

<table class="metadata plainlinks ambox ">
<row>
<col>

ambox-move" style=""</col>
</row>
<row>
<col class="mbox-image"><p>

<image width="50px" src="Merge-arrow.svg">
<caption>

Merge arrow
</caption>
</image>
</p>
</col>
<col style="" class="mbox-text">
 It has been suggested that this article or section be  into . ()</col>
</row>
</table>


For the geographical term, see <link xlink:type="simple" xlink:href="../454/298454.xml">
ria</link>.</p>
<p>

<b>Rich Internet applications</b> (RIAs) are <link xlink:type="simple" xlink:href="../311/288311.xml">
web application</link>s that have the features and functionality of traditional <artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<furnishing wordnetid="103405265" confidence="0.8">
<table wordnetid="104379243" confidence="0.8">
<furniture wordnetid="103405725" confidence="0.8">
<console_table wordnetid="103092883" confidence="0.8">
<link xlink:type="simple" xlink:href="../746/454746.xml">
desktop applications</link></console_table>
</furniture>
</table>
</furnishing>
</instrumentality>
</artifact>
. RIAs typically transfer the processing necessary for the <link xlink:type="simple" xlink:href="../249/45249.xml">
user interface</link> to the <link xlink:type="simple" xlink:href="../173/33173.xml">
web client</link> but keep the bulk of the data (i.e. the <link xlink:type="simple" xlink:href="../720/2760720.xml">
state</link> of the program, the data, etc.) back on the <link xlink:type="simple" xlink:href="../154/165154.xml">
application server</link>.</p>
<p>

RIAs typically do the following:
<list>
<entry level="1" type="bullet">

 run in a <link xlink:type="simple" xlink:href="../173/33173.xml">
web browser</link>, or do not require <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../625/634625.xml">
software installation</link></instrumentality>
</artifact>
</system>
</entry>
<entry level="1" type="bullet">

 run locally in a secure environment called a <link xlink:type="simple" xlink:href="../932/1291932.xml">
<it>sandbox''</it></link></entry>
</list>
</p>

<sec>
<st>
 History </st>
<p>

The term "rich Internet application" was introduced in a <link xlink:type="simple" xlink:href="../336/291336.xml">
white paper</link> of <link xlink:type="simple" xlink:href="../480/106480.xml">
March 2002</link> by <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../110/177110.xml">
Macromedia</link></company>
 (now merged into <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../955/1955.xml">
Adobe</link></company>
),<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref> though the concept had existed for a number of years earlier under names such as:
<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../227/3447227.xml">
Remote Scripting</link>, by <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../001/19001.xml">
Microsoft</link></company>
, circa <link xlink:type="simple" xlink:href="../647/34647.xml">
1998</link></entry>
<entry level="1" type="bullet">

 X Internet, by <weblink xlink:type="simple" xlink:href="http://www.forrester.com">
Forrester Research</weblink> in <link xlink:type="simple" xlink:href="../038/1478038.xml">
October 2000</link></entry>
<entry level="1" type="bullet">

 Rich (web) clients</entry>
<entry level="1" type="bullet">

 Rich web application</entry>
</list>
</p>
<p>

Traditional web applications centered all activity around a <link xlink:type="simple" xlink:href="../513/6513.xml">
client-server</link> architecture with a <link xlink:type="simple" xlink:href="../725/30725.xml">
thin client</link>. Under this system, all processing is done on the server, and the client is only used to display static (in this case <format wordnetid="106636806" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../191/13191.xml">
HTML</link></format>
) content. The biggest drawback with this system is that all interaction with the application must pass through the server, which requires data to be sent to the server, the server to respond, and the page to be reloaded on the client with the response.  By using a client side technology which can execute instructions on the client's computer, RIAs can circumvent this slow and synchronous loop for many user interactions. This difference is somewhat analogous to the difference between "<link xlink:type="simple" xlink:href="../402/249402.xml">
terminal</link> and <link xlink:type="simple" xlink:href="../266/20266.xml">
mainframe</link>" and <link xlink:type="simple" xlink:href="../513/6513.xml">
client-server</link>/<link xlink:type="simple" xlink:href="../586/273586.xml">
fat client</link> approaches.</p>
<p>

Internet standards have evolved slowly and continually over time to accommodate these techniques, so it is hard to draw a strict line between what constitutes a RIA and what does not.  But all RIAs share one characteristic: they introduce an intermediate layer of code, often called a <it>client engine</it>, between the user and the server. This client engine is usually downloaded as part of the instantiation of the application, and may be supplemented by further code downloads as use of the application progresses. The client engine acts as an extension of the browser, and usually takes over responsibility for rendering the application's user interface and for server communication.</p>
<p>

What can be done in a RIA may be limited by the capabilities of the system used on the client. But in general, the client engine is programmed to perform application functions that its designer believes will enhance some aspect of the user interface, or improve its responsiveness when handling certain user interactions, compared to a standard Web browser implementation. Also, while simply adding a client engine does not force an application to depart from the normal synchronous pattern of interactions between browser and server, in most RIAs the client engine performs additional asynchronous communications with servers.</p>

</sec>
<sec>
<st>
 Benefits</st>

<p>

Although developing applications to run in a web browser is a much more limiting, difficult, and intricate process than developing a regular <link xlink:type="simple" xlink:href="../586/273586.xml">
desktop application</link>, the efforts are often justified because: </p>
<p>

<list>
<entry level="1" type="bullet">

 installation footprint is smaller -- overhead for updating and distributing the application is trivial, or significantly reduced compared to a desktop or OS native application</entry>
<entry level="1" type="bullet">

 updates/upgrades to new versions can be automatic or transparent to the end user</entry>
<entry level="1" type="bullet">

 users can use the application from any computer with an internet connection</entry>
<entry level="1" type="bullet">

 many tools exist to allow off-line use of applications, such as <link xlink:type="simple" xlink:href="../928/7741928.xml">
Adobe AIR</link>, <link xlink:type="simple" xlink:href="../097/11514097.xml">
Google Gears</link>, <link xlink:type="simple" xlink:href="../537/42537.xml">
Curl</link>, and other technologies </entry>
<entry level="1" type="bullet">

 most RIA techologies allow the user experience to be consistent, regardless of what <link xlink:type="simple" xlink:href="../194/22194.xml">
operating system</link> the client uses.</entry>
<entry level="1" type="bullet">

 web-based applications are generally less prone to viral infection than running an actual executable</entry>
</list>
</p>
<p>

Because RIAs employ a client engine to interact with the user, they are:</p>
<p>

<list>
<entry level="1" type="bullet">

 <it>Richer</it>. They can offer user-interface behaviors not obtainable using only the <format wordnetid="106636806" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../191/13191.xml">
HTML</link></format>
 widgets available to standard browser-based Web applications. This richer functionality may include anything that can be implemented in the technology being used on the client side, including <link xlink:type="simple" xlink:href="../633/428633.xml">
drag and drop</link>, using a slider to change data, calculations performed only by the client and which do not need to be sent back to the server, for example, a mortgage calculator.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 <it>More responsive</it>. The interface behaviors are typically much more responsive than those of a standard Web browser that must always interact with a remote server. </entry>
</list>
</p>
<p>

The most sophisticated examples of RIAs exhibit a <link xlink:type="simple" xlink:href="../076/336076.xml">
look and feel</link> approaching that of a <link xlink:type="simple" xlink:href="../334/68334.xml">
desktop environment</link>. Using a client engine can also produce other performance benefits:</p>
<p>

<list>
<entry level="1" type="bullet">

 <it>Client/Server balance</it>. The demand for client and server computing resources is better balanced, so that the Web server need not be the workhorse that it is with a traditional Web application. This frees server resources, allowing the same server hardware to handle more client sessions concurrently. </entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 <it>Asynchronous communication</it>. The client engine can interact with the server without waiting for the user to perform an interface action such as clicking on a button or link. This allows the user to view and interact with the page <it>asynchronously</it> from the client engine's communication with the server. This option allows RIA designers to move data between the client and the server without making the user wait. Perhaps the most common application of this is pre-fetching data, in which an application anticipates a future need for certain data and downloads it to the client before the user requests it, thereby speeding up a subsequent response. <work wordnetid="100575741" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<service wordnetid="100577525" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<link xlink:type="simple" xlink:href="../648/1494648.xml">
Google Maps</link></activity>
</psychological_feature>
</act>
</service>
</event>
</work>
 uses this technique to load adjacent map segments to the client before the user scrolls them into view. </entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 <it>Network efficiency</it>. The network traffic may also be significantly reduced because an application-specific client engine can be more intelligent than a standard Web browser when deciding what data needs to be exchanged with servers. This can speed up individual requests or responses because less data is being transferred for each interaction, and overall network load is reduced. However, over-use of asynchronous calls and pre-fetching techniques can neutralize or even reverse this potential benefit. Because the code cannot anticipate exactly what every user will do next, it is common for such techniques to download extra data, not all of which is actually needed, to many or all clients.</entry>
</list>
</p>

</sec>
<sec>
<st>
 Shortcomings </st>

<p>

Shortcomings and restrictions associated with RIAs are:</p>
<p>

<list>
<entry level="1" type="bullet">

 <it>Sandboxing</it>. Because RIAs run within a <link xlink:type="simple" xlink:href="../932/1291932.xml">
sandbox</link>, they have restricted access to system resources. If assumptions about access to resources are incorrect, RIAs may fail to operate correctly.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 <it>Enabled scripting</it>. <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../845/9845.xml">
JavaScript</link></programming_language>
 or another scripting language is often required. If the user has disabled active scripting in their browser, the RIA may not function properly, if at all.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 <it>Client processing speed</it>. To achieve platform independence, some RIAs use client-side scripts written in <link xlink:type="simple" xlink:href="../089/15089.xml">
interpreted</link> languages such as <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../845/9845.xml">
JavaScript</link></programming_language>
, with a consequential loss of performance (a serious issue with mobile devices). This is not an issue with compiled client languages such as <link xlink:type="simple" xlink:href="../446/4718446.xml">
Java</link>, where performance is comparable to that of traditional compiled languages, or with <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../947/20947.xml">
Flash</link></software>
, <link xlink:type="simple" xlink:href="../537/42537.xml">
Curl</link>, or <link xlink:type="simple" xlink:href="../719/9731719.xml">
Silverlight</link>, in which the compiled code is run by a Flash, Curl or Silverlight <link xlink:type="simple" xlink:href="../659/23659.xml">
plugin</link>. Several web browser manufacturers have released or are working on new JavaScript engines to accelerate execution of JavaScript, for example <link xlink:type="simple" xlink:href="../327/189327.xml">
TraceMonkey</link>, the Javascript engine used in <software wordnetid="106566077" confidence="0.8">
<application wordnetid="106570110" confidence="0.8">
<program wordnetid="106568978" confidence="0.8">
<browser wordnetid="106571301" confidence="0.8">
<written_communication wordnetid="106349220" confidence="0.8">
<writing wordnetid="106359877" confidence="0.8">
<code wordnetid="106355894" confidence="0.8">
<coding_system wordnetid="106353757" confidence="0.8">
<link xlink:type="simple" xlink:href="../892/210892.xml">
Mozilla Firefox</link></coding_system>
</code>
</writing>
</written_communication>
</browser>
</program>
</application>
</software>
, will be optimized using "Trace Trees" in version 3.1 of the browser, and Google's webbrowser <link xlink:type="simple" xlink:href="../401/19133401.xml">
Chrome (browser)</link> has the <link xlink:type="simple" xlink:href="../716/19140716.xml">
V8 JavaScript engine</link>, which also accelerates JavaScript execution. These two technologies have both evolved due to the increasing usage of JavaScript and the growth of rich internet applications.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 <it>Script download time</it>. Although it does not have to be <it>installed</it>, the additional client-side intelligence (or <it>client engine</it>) of RIA applications needs to be delivered by the server to the client. While much of this is usually automatically <link xlink:type="simple" xlink:href="../719/437719.xml">
cached</link> it needs to be transferred at least once. Depending on the size and type of delivery, script download time may be unpleasantly long. RIA developers can lessen the impact of this delay by <software wordnetid="106566077" confidence="0.9508927676800064">
<format wordnetid="106636806" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../783/12783.xml">
compressing</link></format>
</software>
 the scripts, and by staging their delivery over multiple pages of an application.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 <it>Loss of integrity</it>. If the application-base is X/HTML, conflicts arise between the goal of an application (which naturally wants to be in control of its presentation and behaviour) and the goals of X/HTML (which naturally wants to give away control). The <standard wordnetid="107260623" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../743/8743.xml">
DOM</link></system_of_measurement>
</standard>
 interface for X/HTML makes it possible to create RIAs, but by doing so makes it impossible to guarantee correct function. Because a RIA client can modify the RIA's basic structure and override presentation and behaviour, it can cause failure of the application to work properly on the client side. Eventually, this problem could be solved by new client-side mechanisms that granted a RIA client more limited permission to modify only those resources within the scope of its application. (Standard software running natively does not have this problem because by definition a program automatically possesses all rights to all its allocated resources).</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 <it>Loss of visibility to search engines</it>. Search engines may not be able to index the text content of the application.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 <it>Dependence on an Internet connection</it>. While the ideal network-enabled replacement for a desktop application would allow users to be "occasionally connected", wandering in and out of hot-spots or from office to office, special platforms (e.g. <link xlink:type="simple" xlink:href="../928/7741928.xml">
Adobe AIR</link>, <link xlink:type="simple" xlink:href="../097/11514097.xml">
Google Gears</link>, <link xlink:type="simple" xlink:href="../537/42537.xml">
Curl</link>) are required to allow off-line functionality for RIA applications.  </entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 <it>Accessibility</it>. There are a lot of known <link xlink:type="simple" xlink:href="../305/1192305.xml">
Web accessibility</link> issues in RIAs, most notably the fact that screen readers have a hard time detecting dynamic changes (caused by JavaScript) in HTML content. The <link xlink:type="simple" xlink:href="../061/17571061.xml">
WAI-ARIA</link> suite provides a solution for this problem (via Live Regions); as well as providing a way of adding critical role, state and property information to DHTML based user interfaces.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 <it>No deployment</it>. In general, rich internet applications cannot be deployed the way traditional desktop applications can be deployed. There are, however, some exceptions to this (e.g. <link xlink:type="simple" xlink:href="../928/7741928.xml">
Adobe AIR</link> and <link xlink:type="simple" xlink:href="../537/42537.xml">
Curl</link>).</entry>
</list>
</p>

<ss1>
<st>
 Software development complications </st>
<p>

The advent of RIA technologies has introduced considerable additional complexity into Web applications. Traditional Web applications built using only standard HTML, having a relatively simple <link xlink:type="simple" xlink:href="../364/48364.xml">
software architecture</link> and being constructed using a limited set of development options, are relatively easy to design and manage. For the person or organization using RIA technologies to deliver a Web application, their additional complexity makes them harder to design, test, measure, and support. </p>
<p>

Use of RIA technology poses several new <link>
service level management</link> (SLM) challenges, not all of which are completely solved today. SLM concerns are not always the focus of application developers, and are rarely if ever perceived by application users, but they are vital to the successful delivery of an online application. Aspects of the RIA architecture that complicate management processes<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%222%22])">2</ref> are:</p>
<p>

<list>
<entry level="1" type="bullet">

 <it>RIA architecture breaks the Web page paradigm</it>. Traditional Web applications can be viewed as a series of Web pages, each of which requires a distinct download, initiated by an HTTP GET request. This model has been characterized as the <it>Web page paradigm</it>. RIAs invalidate this model, introducing additional asynchronous server communications to support a more responsive user interface. In RIAs, the time to complete a page download may no longer correspond to something a user perceives as important, because (for example) the client engine may be prefetching some of the downloaded content for future use. New measurement techniques must be devised for RIAs, to permit reporting of response time quantities that reflect the user's experience. In the absence of standard tools that do this, RIA developers must instrument their application code to produce the measurement data needed for SLM.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 <it>Asynchronous communication makes it harder to isolate performance problems</it>. Paradoxically, actions taken to enhance application responsiveness also make it harder to measure, understand, report on, and manage responsiveness. Some RIAs do not issue any further HTTP GET requests from the browser after their first page, using asynchronous requests from the client engine to initiate all subsequent downloads. The RIA client engine may be programmed to continually download new content and refresh the display, or (in applications using the <word wordnetid="106286395" confidence="0.8">
<part wordnetid="113809207" confidence="0.8">
<neologism wordnetid="106294441" confidence="0.8">
<language_unit wordnetid="106284225" confidence="0.8">
<link xlink:type="simple" xlink:href="../952/4533952.xml">
Comet</link></language_unit>
</neologism>
</part>
</word>
 approach) a server-side engine can keep pushing new content to the browser over a connection that never closes. In these cases, the concept of a "page download" is no longer applicable. These applications are commonly known as refreshless. These complications make it harder to measure and subdivide application response times, a fundamental requirement for problem isolation and service level management. Tools designed to measure traditional Web applications may -- depending on the details of the application and the tool -- report such applications either as a single Web page per HTTP request, or as an unrelated collection of server activities. Neither description reflects what is really happening at the application level. </entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 <it>The client engine makes it harder to measure response time</it>. For traditional Web applications, measurement software can reside either on the client machine or on a machine that is close to the server, provided that it can observe the flow of network traffic at the TCP and HTTP levels. Because these protocols are synchronous and predictable, a <link xlink:type="simple" xlink:href="../114/59114.xml">
packet sniffer</link> can read and interpret packet-level data, and infer the user’s experience of response time by tracking HTTP messages and the times of underlying TCP packets and acknowledgments. But the RIA architecture reduces the power of the packet sniffing approach, because the client engine breaks the communication between user and server into two separate cycles operating asynchronously -- a foreground (user-to-engine) cycle, and a background (engine-to-server) cycle. Both cycles are important, because neither stands alone; it is their relationship that defines application behavior. But that relationship depends only on the application design, which cannot (in general) be inferred by a measurement tool, especially one that can observe only one of the two cycles. Therefore the most complete RIA measurements can only be obtained using tools that reside on the client and observe both cycles.</entry>
</list>
</p>

</ss1>
</sec>
<sec>
<st>
 Current status of development </st>
<p>

RIAs are still in the early stages of development and user adoption.  There are a number of restrictions and requirements that remain:</p>
<p>

<list>
<entry level="1" type="bullet">

 <it>Browser adoption</it>: Many RIAs require modern <link xlink:type="simple" xlink:href="../173/33173.xml">
web browser</link>s in order to run. Some RIA platforms depend on advanced JavaScript engines in the browser if they use techniques such as <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<client wordnetid="109985075" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<case wordnetid="109898892" confidence="0.8">
<link xlink:type="simple" xlink:href="../360/1594360.xml">
XMLHttpRequest</link></case>
</causal_agent>
</client>
</person>
</physical_entity>
 for client-server communication, and <link xlink:type="simple" xlink:href="../059/2438059.xml">
DOM Scripting</link> and advanced <format wordnetid="106636806" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../013/164013.xml">
CSS</link></format>
 techniques to enable the rich <link xlink:type="simple" xlink:href="../249/45249.xml">
user interface</link>.  Other RIA platforms require the inconvenience of a one-time installation of a plugin, but then have an advantage of running consistently across a wider range of browsers.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 <it>Web standards</it>: Differences between web browsers can make it difficult to write an RIA that will run across all major browsers. The consistency of the Java platform or other platforms (i.e. <link xlink:type="simple" xlink:href="../928/7741928.xml">
Adobe AIR</link>, <link xlink:type="simple" xlink:href="../537/42537.xml">
Curl</link>, <link xlink:type="simple" xlink:href="../719/9731719.xml">
Silverlight</link>) using a plugin and installed runtime environment makes this task much simpler.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 <it>Development tools</it>: Some <link xlink:type="simple" xlink:href="../200/5417200.xml">
Ajax Frameworks</link> and products such as <link xlink:type="simple" xlink:href="../537/42537.xml">
Curl</link>, <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../941/1197941.xml">
Adobe Flex</link></software>
 and Microsoft <link xlink:type="simple" xlink:href="../719/9731719.xml">
Silverlight</link> provide an integrated environment in which to build RIAs.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 <it>Accessibility concerns</it>: Additional interactivity may require technical approaches that limit applications' <link xlink:type="simple" xlink:href="../109/302109.xml">
accessibility</link>. </entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 <it>User adoption</it>: Users expecting standard web applications may find that some accepted browser functionality (such as the "Back" button) may have somewhat different or even undesired behavior.</entry>
</list>
</p>

</sec>
<sec>
<st>
 RIA Related Topics </st>

<ss1>
<st>
 RIA with real-time push </st>
<p>

Traditionally, web pages have been delivered to the client only when the client requested for it. For every client request, the browser initiates an HTTP connection to the web server, which then returns the data and the connection is closed. The drawback of this approach was that the page displayed was updated only when the user explicitly refreshes the page or moves to a new page. Since transferring entire pages can take a long time, refreshing pages can introduce a long latency.</p>

</ss1>
<ss1>
<st>
 Demand for localised usage of RIA </st>
<p>

With the increasing adoption and improvement in broadband technologies, fewer users experience poor performance caused by remote latency. Furthermore one of the critical reasons for using an RIA is that many developers are looking for a language to serve up desktop applications that is not only desktop OS neutral but also installation and system issue free. </p>
<p>

RIA running in the ubiquitous web browser is a potential candidate even when used standalone or over a LAN, with the required webserver functionalities hosted locally.</p>

</ss1>
<ss1>
<st>
 Client-side functionalities and development tools for RIA needed </st>
<p>

With client-side functionalities like Javascript and DHTML, RIA can operate on top of a range of OS and webserver functionalities.</p>

</ss1>
<ss1>
<st>
 User interface languages </st>
<p>

Instead of <format wordnetid="106636806" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../191/13191.xml">
HTML</link></format>
/<format wordnetid="106636806" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../580/18984580.xml">
XHTML</link></format>
, new <link xlink:type="simple" xlink:href="../749/1567749.xml">
user interface markup language</link>s can be used in RIAs. For instance, the <link xlink:type="simple" xlink:href="../489/382489.xml">
Mozilla Foundation</link>'s XML-based <link xlink:type="simple" xlink:href="../749/1567749.xml">
user interface markup language</link> <format wordnetid="106636806" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../380/142380.xml">
XUL</link></format>
 - this could be used in RIAs though it would be restricted to Mozilla-based browsers, since it is not a <it><link xlink:type="simple" xlink:href="../594/43594.xml">
de facto</link></it> or <it><link>
de jure</link></it> standard. The <link xlink:type="simple" xlink:href="../434/33434.xml">
W3C</link>'s Rich Web Clients Activity<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%223%22])">3</ref> has initiated a <it>Web Application Formats Working Group</it> whose mission includes the development of such standards <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%224%22])">4</ref>. The original DARPA project at MIT which resulted in the W3C also resulted in the web content/programming language <link xlink:type="simple" xlink:href="../537/42537.xml">
Curl</link> which is now in version 6.0.</p>
<p>

RIA's user interfaces can also become richer through the use of scriptable <link xlink:type="simple" xlink:href="../751/27751.xml">
scalable vector graphics</link> (though not all browsers can render those natively yet) as well as <link xlink:type="simple" xlink:href="../704/28704.xml">
Synchronized Multimedia Integration Language</link> (SMIL).</p>

</ss1>
<ss1>
<st>
 Other techniques </st>
<p>

RIAs could use <standard wordnetid="107260623" confidence="0.8">
<language wordnetid="106282651" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../362/424362.xml">
XForms</link></system_of_measurement>
</language>
</standard>
 to enhance their functionality.</p>
<p>

Using <format wordnetid="106636806" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../138/34138.xml">
XML</link></format>
 and <link xlink:type="simple" xlink:href="../211/34211.xml">
XSLT</link> along with some <format wordnetid="106636806" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../580/18984580.xml">
XHTML</link></format>
, <format wordnetid="106636806" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../013/164013.xml">
CSS</link></format>
 and <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../845/9845.xml">
JavaScript</link></programming_language>
 can also be used to generate richer client side UI components like data tables that can be resorted locally on the client without going back to the server. Mozilla and Internet Explorer browsers both support this.</p>
<p>

The <link xlink:type="simple" xlink:href="../813/4732813.xml">
Omnis</link> Web Client is an ActiveX control or Netscape plug-in which can be embedded into an HTML page providing a rich application interface in the end-user's web browser.</p>

</ss1>
</sec>
<sec>
<st>
 References </st>
<p>

<reflist>
<entry id="1">
<weblink xlink:type="simple" xlink:href="http://www.adobe.com/devnet/flash/whitepapers/richclient.pdf">
Macromedia Flash MX—A next-generation rich client</weblink></entry>
<entry id="2">
Rich Internet Applications: Design, Measurement, and Management Challenges, Keynote Systems, 2006 <weblink xlink:type="simple" xlink:href="http://www.keynote.com/docs/whitepapers/RichInternet_5.pdf">
(pdf)</weblink>.</entry>
<entry id="3">
W3C&#32;(March 15 2006).&#32;"<weblink xlink:type="simple" xlink:href="http://www.w3.org/2006/rwc/">
W3C Rich Web Clients</weblink>".&#32;<it>w3c.org</it>.</entry>
<entry id="4">
W3C&#32;(March 15 2006).&#32;"<weblink xlink:type="simple" xlink:href="http://www.w3.org/2006/appformats/">
Web Application Formats Working Group</weblink>".&#32;<it>w3c.org</it>.</entry>
</reflist>
</p>

</sec>
<sec>
<st>
 See also </st>
<p>

<list>
<entry level="1" type="bullet">

<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<link xlink:type="simple" xlink:href="../586/273586.xml">
Fat client</link></device>
</instrumentality>
</artifact>
</entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../311/288311.xml">
Web application</link></entry>
</list>
</p>

</sec>
<sec>
<st>
 External links </st>
<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.w3.org/2006/rwc/">
The W3C Rich Web Clients Activity</weblink></entry>
<entry level="1" type="bullet">

 Macromedia March 2002 requirements for Rich Internet Applications: (<weblink xlink:type="simple" xlink:href="http://download.macromedia.com/pub/flash/whitepapers/richclient.pdf">
500K PDF</weblink> or <weblink xlink:type="simple" xlink:href="http://www.markme.com/jd/archives/007312.cfm">
HTML abstract</weblink>)</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.forrester.com/ER/Marketing/1,1503,214,FF.html">
October 2000 Forrester Opinion Piece</weblink> on what they then called the "X Internet".</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.flomedia.de/diploma">
Diploma Thesis: RIA - A Convergence of User Interface Paradigms of Web and Desktop, 2008</weblink> (Diploma Thesis as <weblink xlink:type="simple" xlink:href="http://www.flomedia.de/diploma/documents/DiplomaThesisFlorianMoritz.pdf">
PDF</weblink>)</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.curl.com/knowledge-center/">
RIA Knowledge Center</weblink>, sponsored by <weblink xlink:type="simple" xlink:href="http://www.curl.com/">
Curl, Inc.</weblink>, provides some resources including a free Forrester report</entry>
</list>
</p>


</sec>
</bdy>
</article>
