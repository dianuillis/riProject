<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 17.04.2009 00:49:48[mciao0825] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<event  confidence="0.8" wordnetid="100029378">
<rule  confidence="0.8" wordnetid="105846932">
<act  confidence="0.8" wordnetid="100030358">
<psychological_feature  confidence="0.8" wordnetid="100023100">
<procedure  confidence="0.8" wordnetid="101023820">
<activity  confidence="0.8" wordnetid="100407535">
<algorithm  confidence="0.8" wordnetid="105847438">
<header>
<title>Karger&apos;s algorithm</title>
<id>11491940</id>
<revision>
<id>215955372</id>
<timestamp>2008-05-30T12:49:33Z</timestamp>
<contributor>
<username>Bruyninc</username>
<id>395677</id>
</contributor>
</revision>
<categories>
<category>Graph algorithms</category>
</categories>
</header>
<bdy>

In <link xlink:type="simple" xlink:href="../323/5323.xml">
computer science</link> and <link xlink:type="simple" xlink:href="../401/12401.xml">
graph theory</link>, the <b>Karger's algorithm</b> is a <technique wordnetid="105665146" confidence="0.8">
<know-how wordnetid="105616786" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<link xlink:type="simple" xlink:href="../098/56098.xml">
Monte Carlo method</link></method>
</know-how>
</technique>
 to compute the <link xlink:type="simple" xlink:href="../130/78130.xml">
minimum cut</link> of a connected <link>
graph</link>.
<sec>
<st>
Algorithm</st>
<p>

The idea of the algorithm is based on the concept of contraction of an edge <math>e</math> in a graph. Informally speaking, the contraction of an edge makes the two nodes joined by e overlap, reducing the total number of nodes of the graph by one. The algorithm proceeds iterating contractions until only two nodes are left in the graph. With high probability, the algorithm will return a minimal cut by returning the set of edges joining the two remaining nodes.</p>

</sec>
<sec>
<st>
Contraction</st>
<p>

Informally speaking, this operation takes an edge <math>e</math> with endpoints <math>x</math> and <math>y</math> and contracts it into a new node <math>v_e</math> which becomes adjacent to all former neighbors of <math>x</math> and <math>y</math>. It is possible to formalize this concept in mathematical terms.</p>
<p>

Given a graph <math>G = \left ( V, E \right )</math> and <math>e = \lbrace x, y \rbrace \in E</math>, the contraction of <math>G</math> respect to <math>e</math> (written <math>G/e = \left ( V', E'\right )</math>) is a <link xlink:type="simple" xlink:href="../970/1774970.xml">
multigraph</link> where:</p>
<p>

<indent level="1">

<math>V' = \left( V \setminus \lbrace x, y \rbrace \right) \cup \lbrace v_e \rbrace</math>
</indent>

and:</p>
<p>

<indent level="1">

<math>E' = \lbrace \lbrace v, w \rbrace \in E \mid \lbrace v,w \rbrace \cap \lbrace x,y \rbrace = \emptyset \rbrace \cup \lbrace \lbrace v_e,w \rbrace \mid 
\lbrace x,w \rbrace \in E \setminus \lbrace e \rbrace </math>  or <math> \lbrace y,w \rbrace \in E \setminus \lbrace e \rbrace  \rbrace</math>
</indent>

It is possible to prove that this operation doesn't reduce the <link xlink:type="simple" xlink:href="../er)/6174_(number).xml">
cardinality</link> of the minimum cut, but that it might increase it.</p>

</sec>
<sec>
<st>
Pseudocode</st>
<p>

The algorithm can be implemented using two functions:</p>
<p>

<b>function</b> Karger(G, K)
min := <math>+ \infty</math>
<b>for</b> i = 1 <b>to</b> K <b>do</b>
t := Full_contraction(G)
<b>if</b> t  min <b>then</b>
min := t
<b>return</b> min</p>
<p>

<b>function</b> Full_contraction(G)
<b>for</b> i := 1 <b>to</b> |V| - 2 <b>do</b>
e := Random(<math>\varepsilon</math>)
G' = ( V', <math>\varepsilon</math>') := <math>G / e</math>
V := V'
<math>\varepsilon</math> := <math>\varepsilon</math>'
<b>return</b> |<math>\varepsilon</math>|</p>
<p>

The function Full_contraction implements the contraction of the edges following the given definition. The iteration lasts until only two nodes are left in the graph. With a certain probability, the set of edges left are the minimum cut.
It is not sure anyway that this algorithm returns a cut which is minimum, therefore K execution of Full_contraction is performed by the Karger function, where K has to be passed as a parameter. Computing the minimum of the K executions reduces the probability of having a wrong minimum cut returned.</p>

</sec>
<sec>
<st>
References</st>

<p>


</p>
<p>

<list>
<entry level="1" type="number">

 A. A. Tsay, W. S. Lovejoy, David R. Karger, <weblink xlink:type="simple" xlink:href="http://www.cs.elte.hu/~benczur/CombOptStuff/sampling.ps.gz">
Random Sampling in Cut, Flow, and Network Design Problems</weblink>, Mathematics of Operations Research, 24(2):383â€“413, 1999.</entry>
</list>
</p>


</sec>
</bdy>
</algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</article>
