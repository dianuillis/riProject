<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 17.04.2009 00:43:25[mciao0828] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<idea  confidence="0.8" wordnetid="105833840">
<concept  confidence="0.8" wordnetid="105835747">
<category  confidence="0.8" wordnetid="105838765">
<type  confidence="0.8" wordnetid="105840188">
<kind  confidence="0.8" wordnetid="105839024">
<header>
<title>Handle (computing)</title>
<id>11493669</id>
<revision>
<id>223983789</id>
<timestamp>2008-07-06T20:38:12Z</timestamp>
<contributor>
<username>Lightbot</username>
<id>7178666</id>
</contributor>
</revision>
<categories>
<category>Data types</category>
</categories>
</header>
<bdy>
<p>

A <b>handle</b> is a particular kind of <link xlink:type="simple" xlink:href="../861/319861.xml">
smart pointer</link>. Handles are used when an application references blocks of memory or objects managed by another system, such as a <link xlink:type="simple" xlink:href="../377/8377.xml">
database</link> or an <link xlink:type="simple" xlink:href="../194/22194.xml">
operating system</link>. While a pointer literally contains the address of the item to which it refers, a handle is an <link xlink:type="simple" xlink:href="../491/60491.xml">
abstract</link> reference controlled by a separate system; its opacity allows the referent to be relocated in memory by the system without invalidating the handle &mdash; impossible with pointers. The extra layer of <link xlink:type="simple" xlink:href="../206/166206.xml">
indirection</link> also increases the control the managing system has over operations performed on the referent (see <link xlink:type="simple" xlink:href="../501/79501.xml">
information hiding</link>, <link xlink:type="simple" xlink:href="../301/10301.xml">
encapsulation</link>).    </p>
<p>

Handles were a popular solution to <link xlink:type="simple" xlink:href="../924/66924.xml">
memory management</link> in operating systems of the 1980s, such as <link xlink:type="simple" xlink:href="../043/20043.xml">
Mac OS</link> and <link xlink:type="simple" xlink:href="../890/18890.xml">
Windows</link>. <family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../642/31642.xml">
Unix</link></family>
 <link xlink:type="simple" xlink:href="../754/608754.xml">
file descriptor</link>s are essentially handles. Like other desktop environments, the <link xlink:type="simple" xlink:href="../601/81601.xml">
Windows API</link> heavily uses handles to represent objects in the system and to provide a communication pathway between the operating system and <link xlink:type="simple" xlink:href="../467/93467.xml">
user space</link>. For example, a window on the desktop is represented by a handle of type HWND.   </p>
<p>

Traditional, doubly-indirect handles have fallen out of favour in recent times, as increases in available <link xlink:type="simple" xlink:href="../300/5300.xml">
memory</link> and improved <link xlink:type="simple" xlink:href="../354/32354.xml">
virtual memory</link> algorithms have made the use of the simpler pointer more attractive. However, many operating systems still apply the term to pointers to opaque, "private" data structures, or indexes into internal arrays passed from one process to its clients.</p>


</bdy>
</kind>
</type>
</category>
</concept>
</idea>
</article>
