<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 17.04.2009 00:54:47[mciao0826] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>Intel Threading Building Blocks</title>
<id>11625077</id>
<revision>
<id>218683885</id>
<timestamp>2008-06-11T18:49:08Z</timestamp>
<contributor>
<username>Rockfang</username>
<id>5403270</id>
</contributor>
</revision>
<categories>
<category>Parallel computing</category>
<category>Threads</category>
<category>Generic programming</category>
<category>Application programming interfaces</category>
<category>C++ programming language family</category>
</categories>
</header>
<bdy>

<b>Intel Threading Building Blocks</b> (also known as <b>TBB</b>) is the name of a <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../038/72038.xml">
C++</link></programming_language>
 <link xlink:type="simple" xlink:href="../218/31218.xml">
template</link> <link xlink:type="simple" xlink:href="../421/106421.xml">
library</link> developed by <link xlink:type="simple" xlink:href="../617/14617.xml">
Intel</link> for writing software programs that take advantage of <link xlink:type="simple" xlink:href="../207/3503207.xml">
multi-core</link> <link xlink:type="simple" xlink:href="../218/5218.xml">
processors</link>. The library consists of data structures and algorithms that allow a programmer to avoid some complications arising from the use of native <link xlink:type="simple" xlink:href="../679/10520679.xml">
threading</link> packages such as <link xlink:type="simple" xlink:href="../671/634671.xml">
POSIX threads</link>, Windows threads, or the portable <structure wordnetid="104341686" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<area wordnetid="102735688" confidence="0.8">
<library wordnetid="103660909" confidence="0.8">
<room wordnetid="104105893" confidence="0.8">
<link xlink:type="simple" xlink:href="../324/711324.xml">
Boost Threads</link></room>
</library>
</area>
</artifact>
</structure>
 in which individual threads of execution are created, synchronized, and terminated manually. Instead the library abstracts access to the multiple processors by allowing the operations to be treated as "tasks," which are allocated to individual cores dynamically by the library's run-time engine, and by automating efficient use of the <link xlink:type="simple" xlink:href="../829/6829.xml">
cache</link>. This approach groups TBB in a family of solutions for parallel programming aiming to decouple the programming from the particulars of the underlying machine.
<sec>
<st>
Implementation</st>
<p>

TBB implements "task stealing" to balance a parallel workload across available processing cores in order to increase core utilization and therefore scaling. The TBB task stealing model is similar to the work stealing model applied in <link xlink:type="simple" xlink:href="../803/945803.xml">
Cilk</link>. Initially, the workload is evenly divided among the available processor cores. If one core completes its work while other cores still have a significant amount of work in their queue, TBB reassigns some of the work from one of the busy cores to the idle core. This dynamic capability decouples the programmer from the machine, allowing applications written using the library to scale to utilize the available processing cores with no changes to the source code or the executable program file.</p>
<p>

TBB uses <link xlink:type="simple" xlink:href="../218/31218.xml">
templates</link> thereby relying on compile-time <link xlink:type="simple" xlink:href="../930/24930.xml">
polymorphism</link> that can be more temporally efficient than traditional run-time polymorphism since modern C++ <link xlink:type="simple" xlink:href="../739/5739.xml">
compiler</link>s are tuned to minimize any abstraction penalty arising from heavy use of templates such as <link xlink:type="simple" xlink:href="../777/156777.xml">
Standard Template Library</link> and TBB.</p>

</sec>
<sec>
<st>
 Library contents </st>

<p>

TBB is a collection of components for parallel programming:
<list>
<entry level="1" type="bullet">

 Basic algorithms: parallel_for, parallel_reduce, parallel_scan</entry>
<entry level="1" type="bullet">

 Advanced algorithms: parallel_while, pipeline, parallel_sort</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../615/5170615.xml">
Container</link>s: concurrent_queue, concurrent_vector, concurrent_hash_map</entry>
<entry level="1" type="bullet">

 Scalable memory allocation: scalable_malloc, scalable_free, scalable_realloc, scalable_calloc, scalable_allocator, cache_aligned_allocator</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../827/36827.xml">
Mutual exclusion</link>: mutex, spin_mutex, queuing_mutex, spin_rw_mutex, queuing_rw_mutex</entry>
<entry level="1" type="bullet">

 <plant_part wordnetid="113086908" confidence="0.8">
<natural_object wordnetid="100019128" confidence="0.8">
<kernel wordnetid="113137010" confidence="0.8">
<link xlink:type="simple" xlink:href="../560/2114560.xml">
Atomic operation</link></kernel>
</natural_object>
</plant_part>
s: fetch_and_add, fetch_and_increment, fetch_and_decrement, compare_and_swap, fetch_and_store</entry>
<entry level="1" type="bullet">

 Timing: portable fine grained global time stamp</entry>
<entry level="1" type="bullet">

 Task Scheduler: direct access to control the creation and activation of tasks</entry>
</list>
</p>

</sec>
<sec>
<st>
 History </st>

<p>

Version 1.0 was introduced by Intel on August 29, 2006, the year after the introduction of Intel's first dual-core x86 processor, the <chip wordnetid="103020034" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<microprocessor wordnetid="103760310" confidence="0.8">
<conductor wordnetid="103088707" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<semiconductor_device wordnetid="104171831" confidence="0.8">
<link xlink:type="simple" xlink:href="../876/1560876.xml">
Pentium D</link></semiconductor_device>
</device>
</conductor>
</microprocessor>
</instrumentality>
</artifact>
</chip>
.</p>
<p>

Version 1.1 was introduced on April 10, 2007.  This version introduced auto_partitioner which offered an automatic alternative to specifying a grain size parameter to estimate the best granularity for your tasks. This version was added to the Intel C++ Compiler 10.0 with the new Professional Edition later that year on June 5.</p>
<p>

Version 2.0 was introduced on July 24, 2007. This version included the release of the source code and the creation of an open source project.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref> The license used for open source is the same as the one used by the <physical_entity wordnetid="100001930" confidence="0.8">
<communicator wordnetid="109610660" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<compiler wordnetid="109946957" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<writer wordnetid="110794014" confidence="0.8">
<link xlink:type="simple" xlink:href="../323/12323.xml">
GNU Compiler Collection</link></writer>
</causal_agent>
</compiler>
</person>
</communicator>
</physical_entity>
 <link xlink:type="simple" xlink:href="../104/384104.xml">
C++ standard library</link>, a <link>
GPLv2</link> with an "runtime exception" (because of being template heavy code that usually becomes part of the executable after compilation). TBB is still available in a commercial version (without source code) with support but with no differences in functionality from the open source version.</p>
<p>

Possible future version features were outlined in a posting to the project web site.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%222%22])">2</ref></p>
<p>

Between July 2007 and March 2008, significant development was put into improvements in the TBB container classes (especially concurrent_vector), and a new algorithm (parallel_do) was developed. These features were made available in open source TBB development releases during this time period.</p>
<p>

The new parallel_do component is a replacement for parallel_while, which will eventually be deprecated. The parallel_do component is structured in a manner that is consistent with the other TBB algorithms (parallel_for, parallel_reduce, parallel_scan), making its application simpler and more intuitive for developers than was the case with parallel_while.</p>

</sec>
<sec>
<st>
 Systems supported </st>

<p>

The TBB commercial release 2.0 supports <link xlink:type="simple" xlink:href="../890/18890.xml">
Microsoft Windows</link> (XP or newer), <link xlink:type="simple" xlink:href="../640/20640.xml">
Mac OS X</link> (version 10.4.4 or higher) and <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../297/6097297.xml">
Linux</link></O>
 using compilers <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../204/166204.xml">
Visual C++</link></software>
 (version 7.1 or higher, on Windows OS only), <physical_entity wordnetid="100001930" confidence="0.8">
<communicator wordnetid="109610660" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<compiler wordnetid="109946957" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<writer wordnetid="110794014" confidence="0.8">
<link xlink:type="simple" xlink:href="../849/8208849.xml">
Intel C++ Compiler</link></writer>
</causal_agent>
</compiler>
</person>
</communicator>
</physical_entity>
 (version 9.0 or higher) or <physical_entity wordnetid="100001930" confidence="0.8">
<communicator wordnetid="109610660" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<compiler wordnetid="109946957" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<writer wordnetid="110794014" confidence="0.8">
<link xlink:type="simple" xlink:href="../323/12323.xml">
GNU Compiler Collection</link></writer>
</causal_agent>
</compiler>
</person>
</communicator>
</physical_entity>
 (gcc).<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%223%22])">3</ref> Additionally, the open source builds of TBB supports <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../145/46145.xml">
Solaris</link></database>
</wordnet>
</lexical_database>
</electronic_database>
</information>
</message>
 <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%224%22])">4</ref> and <platform wordnetid="103961939" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<surface wordnetid="104362025" confidence="0.8">
<horizontal_surface wordnetid="103536348" confidence="0.8">
<link xlink:type="simple" xlink:href="../554/7580554.xml">
FreeBSD</link></horizontal_surface>
</surface>
</artifact>
</platform>
.</p>

<ss1>
<st>
Open source operating systems</st>

<p>

As of March 2008, TBB is available in <platform wordnetid="103961939" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<surface wordnetid="104362025" confidence="0.8">
<horizontal_surface wordnetid="103536348" confidence="0.8">
<link xlink:type="simple" xlink:href="../554/7580554.xml">
FreeBSD</link></horizontal_surface>
</surface>
</artifact>
</platform>
 and has been packaged into the following <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../297/6097297.xml">
Linux</link></O>
 distributions:</p>
<p>

<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../242/8242.xml">
Debian Linux</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../298/990298.xml">
Ubuntu</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../070/9951070.xml">
Fedora</link></entry>
</list>
</p>

</ss1>
</sec>
<sec>
<st>
See also</st>
<p>

<list>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../162/145162.xml">
Parallel computing</link></entry>
</list>
</p>

</sec>
<sec>
<st>
Notes</st>

<p>

<reflist>
<entry id="1">
<weblink xlink:type="simple" xlink:href="http://www.threadingbuildingblocks.org">
Thread Building Blocks</weblink></entry>
<entry id="2">
Dave Sekowski&#32;(October 10, 2007).&#32;"<weblink xlink:type="simple" xlink:href="http://softwarecommunity.intel.com/articles/eng/1576.htm">
Next Major TBB Release Features</weblink>".&#32;Retrieved on <link>
2008-04-07</link>.</entry>
<entry id="3">
"<weblink xlink:type="simple" xlink:href="http://cache-www.intel.com/cd/00/00/31/26/312687_312687.pdf">
Intel Threading Building Blocks - Release Notes Version 2.0</weblink>".&#32;Retrieved on <link>
2008-04-07</link>.</entry>
<entry id="4">
"<weblink xlink:type="simple" xlink:href="http://developers.sun.com/solaris/articles/tbb_intro.html">
Using Intel's Threaded Building Blocks (TBB) With Sun Studio Express</weblink>".&#32;Retrieved on <link>
2008-05-08</link>.</entry>
</reflist>
</p>

</sec>
<sec>
<st>
References</st>
<p>

<list>
<entry level="1" type="bullet">

 Reinders, James (2007, July). <weblink xlink:type="simple" xlink:href="http://www.oreilly.com/catalog/9780596514808">
<it>Intel Threading Building Blocks: Outfitting C++ for Multi-core Processor Parallelism''</it></weblink> (Paperback) Sebastopol: O'Reilly Media, ISBN 978-0-596-51480-8.</entry>
<entry level="1" type="bullet">

 Voss, M. (2006, October). <weblink xlink:type="simple" xlink:href="http://www.devx.com/cplus/Article/32935">
"Demystify Scalable Parallelism with Intel Threading Building Blocks' Generic Parallel Algorithms."</weblink></entry>
<entry level="1" type="bullet">

 Voss, M. (2006, December). <weblink xlink:type="simple" xlink:href="http://www.devx.com/cplus/Article/33334">
"Enable Safe, Scalable Parallelism with Intel Threading Building Blocks' Concurrent Containers."</weblink></entry>
<entry level="1" type="bullet">

 Hudson, R. L., B. Saha, et al. (2006, June). <weblink xlink:type="simple" xlink:href="http://doi.acm.org/10.1145/1133956.1133967">
"McRT-Malloc: a scalable transactional memory allocator."</weblink> Proceedings of the 2006 International Symposium on Memory Management. New York: ACM Press, pp. 74-83.</entry>
</list>
</p>

</sec>
<sec>
<st>
External links</st>
<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.intel.com/software/products/tbb">
Intel Threading Building Blocks Product Home</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.threadingbuildingblocks.org">
Threading Building Blocks Open Source Project Home</weblink></entry>
</list>
</p>

<p>

<table style=";" class="navbox" cellspacing="0">
<row>
<col style="padding:2px;">
<table style="width:100%;background:transparent;color:inherit;;" class="nowraplinks collapsible autocollapse " cellspacing="0">
<row>
<header colspan="2" style=";" class="navbox-title">
<link xlink:type="simple" xlink:href="../162/145162.xml">
Parallel computing</link>topics</header>
</row>
<row style="height:2px;">

</row>
<row>
<col style=";;" class="navbox-group">
General</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<condition wordnetid="113920835" confidence="0.8">
<state wordnetid="100024720" confidence="0.8">
<problem wordnetid="114410605" confidence="0.8">
<difficulty wordnetid="114408086" confidence="0.8">
<link xlink:type="simple" xlink:href="../527/832527.xml">
High-performance computing</link></difficulty>
</problem>
</state>
</condition>
</col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
Parallelism</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-even">
<link xlink:type="simple" xlink:href="../148/14229148.xml">
Bit-level parallelism</link>&nbsp;·  <link xlink:type="simple" xlink:href="../960/245960.xml">
Instruction level parallelism</link>&nbsp;·  <link xlink:type="simple" xlink:href="../420/9467420.xml">
Data parallelism</link>&nbsp;·  <link xlink:type="simple" xlink:href="../070/9468070.xml">
Task parallelism</link></col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
Threads</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<link xlink:type="simple" xlink:href="../877/313877.xml">
Superthreading</link>&nbsp;·  <link xlink:type="simple" xlink:href="../443/151443.xml">
Hyperthreading</link></col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
Theory</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-even">
<link xlink:type="simple" xlink:href="../612/1448612.xml">
Speedup</link>&nbsp;·  <idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<rule wordnetid="105846054" confidence="0.8">
<link xlink:type="simple" xlink:href="../ury/24th_century.xml">
Amdahl's law</link></rule>
</concept>
</idea>
&nbsp;·  <class wordnetid="107997703" confidence="0.8">
<collection wordnetid="107951464" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<link xlink:type="simple" xlink:href="../349/222349.xml">
Flynn's taxonomy</link></group>
</collection>
</class>
 (<link xlink:type="simple" xlink:href="../630/1103630.xml">
SISD</link>&nbsp;&amp;bull;  <link xlink:type="simple" xlink:href="../359/55359.xml">
SIMD</link>&nbsp;&amp;bull;  <link xlink:type="simple" xlink:href="../666/991666.xml">
MISD</link>&nbsp;&amp;bull;  <link xlink:type="simple" xlink:href="../139/157139.xml">
MIMD</link>)&nbsp;·  <link xlink:type="simple" xlink:href="../721/3505721.xml">
Cost efficiency</link>&nbsp;·  <idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<rule wordnetid="105846054" confidence="0.8">
<link xlink:type="simple" xlink:href="../252/4243252.xml">
Gustafson's law</link></rule>
</concept>
</idea>
&nbsp;·  <link xlink:type="simple" xlink:href="../042/9453042.xml">
Karp-Flatt metric</link>&nbsp;·  <link xlink:type="simple" xlink:href="../068/15167068.xml">
Parallel slowdown</link></col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
Elements</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<link xlink:type="simple" xlink:href="../178/45178.xml">
Process</link>&nbsp;·  <link xlink:type="simple" xlink:href="../303/45303.xml">
Thread</link>&nbsp;·  <link xlink:type="simple" xlink:href="../712/5533712.xml">
Fiber</link>&nbsp;·  <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<model wordnetid="110324560" confidence="0.8">
<assistant wordnetid="109815790" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../675/956675.xml">
Parallel Random Access Machine</link></causal_agent>
</worker>
</assistant>
</model>
</person>
</physical_entity>
</col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
Coordination</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-even">
<link xlink:type="simple" xlink:href="../020/64020.xml">
Multiprocessing</link>&nbsp;·  <link xlink:type="simple" xlink:href="../679/10520679.xml">
Multithreading</link>&nbsp;·  <link xlink:type="simple" xlink:href="../857/6857.xml">
Multitasking</link>&nbsp;·  <link xlink:type="simple" xlink:href="../818/399818.xml">
Memory coherency</link>&nbsp;·  <link xlink:type="simple" xlink:href="../865/176865.xml">
Cache coherency</link>&nbsp;·  <link xlink:type="simple" xlink:href="../263/4736263.xml">
Barrier</link>&nbsp;·  <link xlink:type="simple" xlink:href="../017/4726017.xml">
Synchronization</link>&nbsp;·  <link xlink:type="simple" xlink:href="../501/8501.xml">
Distributed computing</link>&nbsp;·  <link xlink:type="simple" xlink:href="../373/49373.xml">
Grid computing</link></col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
<link xlink:type="simple" xlink:href="../311/5311.xml">
Programming</link></col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<paradigm wordnetid="113804375" confidence="0.8">
<linguistic_relation wordnetid="113797142" confidence="0.8">
<inflection wordnetid="113803782" confidence="0.8">
<grammatical_relation wordnetid="113796779" confidence="0.8">
<link xlink:type="simple" xlink:href="../375/2242375.xml">
Programming model</link></grammatical_relation>
</inflection>
</linguistic_relation>
</paradigm>
&nbsp;·  <link xlink:type="simple" xlink:href="../888/3453888.xml">
Implicit parallelism</link>&nbsp;·  <link xlink:type="simple" xlink:href="../332/3095332.xml">
Explicit parallelism</link></col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
<link xlink:type="simple" xlink:href="../310/5310.xml">
Hardware</link></col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-even">
<link xlink:type="simple" xlink:href="../896/18949896.xml">
Computer cluster</link>&nbsp;·  <link xlink:type="simple" xlink:href="../542/66542.xml">
Beowulf</link>&nbsp;·  <link xlink:type="simple" xlink:href="../318/50318.xml">
Symmetric multiprocessing</link>&nbsp;·  <link xlink:type="simple" xlink:href="../643/40643.xml">
Non-Uniform Memory Access</link>&nbsp;·  <link xlink:type="simple" xlink:href="../307/910307.xml">
Cache only memory architecture</link>&nbsp;·  <link xlink:type="simple" xlink:href="../506/2576506.xml">
Asymmetric multiprocessing</link>&nbsp;·  <link xlink:type="simple" xlink:href="../021/315021.xml">
Simultaneous multithreading</link>&nbsp;·  <link xlink:type="simple" xlink:href="../653/825653.xml">
Shared memory</link>&nbsp;·  <link xlink:type="simple" xlink:href="../887/234887.xml">
Distributed memory</link>&nbsp;·  <link xlink:type="simple" xlink:href="../049/584049.xml">
Massive parallel processing</link>&nbsp;·  <link xlink:type="simple" xlink:href="../702/51702.xml">
Superscalar processing</link>&nbsp;·  <link xlink:type="simple" xlink:href="../205/58205.xml">
Vector processing</link>&nbsp;·  <link xlink:type="simple" xlink:href="../153/37153.xml">
Supercomputer</link>&nbsp;·  <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<model wordnetid="110324560" confidence="0.8">
<assistant wordnetid="109815790" confidence="0.8">
<paradigm wordnetid="113804375" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<linguistic_relation wordnetid="113797142" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<inflection wordnetid="113803782" confidence="0.8">
<grammatical_relation wordnetid="113796779" confidence="0.8">
<link xlink:type="simple" xlink:href="../727/2786727.xml">
Stream processing</link></grammatical_relation>
</inflection>
</causal_agent>
</linguistic_relation>
</worker>
</paradigm>
</assistant>
</model>
</person>
</physical_entity>
&nbsp;·  <substance wordnetid="100019613" confidence="0.8">
<paper wordnetid="114974264" confidence="0.8">
<card wordnetid="102962545" confidence="0.8">
<part wordnetid="113809207" confidence="0.8">
<material wordnetid="114580897" confidence="0.8">
<link xlink:type="simple" xlink:href="../939/1268939.xml">
GPGPU</link></material>
</part>
</card>
</paper>
</substance>
</col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
<link xlink:type="simple" xlink:href="../309/5309.xml">
Software</link></col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<link xlink:type="simple" xlink:href="../843/399843.xml">
Distributed shared memory</link> &nbsp;·  <link xlink:type="simple" xlink:href="../765/416765.xml">
Application checkpointing</link>&nbsp;·  <link xlink:type="simple" xlink:href="../129/2738129.xml">
Warewulf</link></col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
<link xlink:type="simple" xlink:href="../ury/24th_century.xml">
API</link>s</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-even">
<standard wordnetid="107260623" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../671/634671.xml">
POSIX Threads</link></system_of_measurement>
</standard>
&nbsp;·  <link xlink:type="simple" xlink:href="../842/381842.xml">
OpenMP</link>&nbsp;·  <link xlink:type="simple" xlink:href="../466/221466.xml">
Message Passing Interface (MPI)</link>&nbsp;·  <link xlink:type="simple" xlink:href="../616/1057616.xml">
UPC</link>&nbsp;·  <link xlink:type="simple" xlink:href="../077/11625077.xml">
Intel Threading Building Blocks</link>&nbsp;·  <structure wordnetid="104341686" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<area wordnetid="102735688" confidence="0.8">
<library wordnetid="103660909" confidence="0.8">
<room wordnetid="104105893" confidence="0.8">
<link xlink:type="simple" xlink:href="../324/711324.xml#xpointer(//*[./st=%22Multithreading+=E2=80=93+Boost.Thread%22])">
Boost.Thread</link></room>
</library>
</area>
</artifact>
</structure>
</col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
Problems</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../712/1738712.xml">
Embarrassingly parallel</link></instrumentality>
</artifact>
</system>
&nbsp;·  <condition wordnetid="113920835" confidence="0.8">
<state wordnetid="100024720" confidence="0.8">
<problem wordnetid="114410605" confidence="0.8">
<difficulty wordnetid="114408086" confidence="0.8">
<link xlink:type="simple" xlink:href="../754/439754.xml">
Grand Challenge</link></difficulty>
</problem>
</state>
</condition>
&nbsp;·  <plant_part wordnetid="113086908" confidence="0.8">
<natural_object wordnetid="100019128" confidence="0.8">
<kernel wordnetid="113137010" confidence="0.8">
<link xlink:type="simple" xlink:href="../798/12332798.xml">
Software lockout</link></kernel>
</natural_object>
</plant_part>
</col>
</row>
</table>
</col>
</row>
</table>
</p>



</sec>
</bdy>
</article>
