<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 17.04.2009 00:57:08[mciao0827] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>Gossip protocol</title>
<id>11663321</id>
<revision>
<id>233142203</id>
<timestamp>2008-08-20T16:50:00Z</timestamp>
<contributor>
<username>Zorrobot</username>
<id>7218328</id>
</contributor>
</revision>
<categories>
<category>Articles lacking in-text citations</category>
<category>Network architecture</category>
<category>Wikipedia articles needing rewrite</category>
<category>Articles with weasel words</category>
</categories>
</header>
<bdy>

<table class="metadata plainlinks ambox ">
<row>
<col>

ambox-content" style=""</col>
</row>
<row>
<col class="mbox-image"><p>

<image width="40px" src="Crystal_Clear_app_kedit.svg">
<caption>

Notepad
</caption>
</image>
</p>
</col>
<col style="" class="mbox-text">
 <b>To comply with Wikipedia's , this article may need to be rewritten.</b>
Please help <weblink xlink:type="simple" xlink:href="http://localhost:18088/wiki/index.php?title=Gossip_protocol&amp;action=edit">
improve this article</weblink>. The may contain suggestions.</col>
</row>
</table>


<p>

<table class="metadata plainlinks ambox ">
<row>
<col>

ambox-content" style=""</col>
</row>
<row>
<col class="mbox-image"><p>

<image width="40x40px" src="Ambox_content.png">
</image>
</p>
</col>
<col style="" class="mbox-text">
 <b>This article or section contains </b>, vague phrasing that often accompanies  or  information. Such statements should be .</col>
</row>
</table>

</p>
<p>

<table class="metadata plainlinks ambox ">
<row>
<col>

ambox-style" style=""</col>
</row>
<row>
<col class="mbox-image"><p>

<image width="50px" src="Text_document_with_red_question_mark.svg">
</image>
</p>
</col>
<col style="" class="mbox-text">
 This article includes a  or , but its sources remain unclear because it lacks <b>.</b>
You can  this article by introducing more precise citations .</col>
</row>
</table>

</p>
<p>

A <b>gossip protocol</b> is a style of computer-to-computer <link xlink:type="simple" xlink:href="../235/83235.xml">
communication protocol</link> inspired by the form of <link xlink:type="simple" xlink:href="../616/12616.xml">
gossip</link> seen in social networks.  Modern distributed systems often use gossip protocols to solve problems that might be difficult to solve in other ways, either because the underlying network has an inconvenient structure, is extremely large, or because gossip solutions are sometimes the most efficient ones available.</p>
<p>

The term <b>epidemic protocol</b> is sometimes used as a synonym for a gossip protocol, because gossip spreads information in a manner similar to the spread of a virus in a biological community.</p>

<sec>
<st>
 Gossip communication </st>

<p>

The concept of <it>gossip communication</it> can be illustrated by the analogy of office workers spreading rumors.  Ted comments to Sally that he believes Fred dyes his mustache.  Sally tells Jill, while Ted repeats the idea to Sam.  As people move around and repeat the rumor, the number of individuals who have heard the rumor roughly doubles with each "step".  The doubling is an approximation that assumes employees communicate at a constant rate, and it doesn't account for gossiping twice to the same person.  (Perhaps Ted tries to tell his story to Mark, only to find that Mark already heard it from Jill).  Computer systems typically implement this type of protocol with a form of random "peer selection": with a given frequency, each machine picks another machine at random and shares any hot rumors.</p>
<p>

The power of gossip lies in the the robust spread of information. Even if Jill had trouble understanding Sally (perhaps she was whispering), she will probably run into someone else soon and can learn the news that way.</p>
<p>

Expressing these ideas in more technical terms, a gossip protocol is one that satisfies the following conditions:
<list>
<entry level="1" type="bullet">

 The core of the protocol involves periodic, pairwise, inter-process interactions.</entry>
<entry level="1" type="bullet">

 The information exchanged during these interactions is of bounded size.</entry>
<entry level="1" type="bullet">

 When agents interact, the state of at least one agent changes to reflect the state of the other.  A gossip interaction does not occur when A pings B just to measure the response time, as this does not involve the transmittal of state between agents.</entry>
<entry level="1" type="bullet">

 Reliable communication is not assumed.</entry>
<entry level="1" type="bullet">

 The frequency of the interactions is low compared to typical message latencies so that the protocol costs are negligible.</entry>
<entry level="1" type="bullet">

 There is some form of randomness in the peer selection.  Peers might be selected from the full set of nodes or from a smaller set of "neighbors".</entry>
</list>
</p>
<p>

It is useful to distinguish three prevailing styles of gossip protocol:
<list>
<entry level="1" type="bullet">

 <b>Dissemination protocols</b> (or rumor-mongering protocols).  These use gossip to spread information; they basically work by flooding agents in the network, but in a manner that produces bounded worst-case loads:</entry>
<entry level="1" type="indent">

a) <it>Event dissemination protocols</it> use gossip to carry out multicasts.  They report events, but the gossip occurs periodically and events don’t actually trigger the gossip.  One concern here is the potentially high latency from when the event occurs until it is delivered.</entry>
<entry level="1" type="indent">

b) <it>Background data dissemination protocols</it> continuously gossip about information associated with the participating nodes.  Typically, propagation latency isn’t a concern, perhaps because the information in question changes slowly or there is no significant penalty for acting upon slightly stale data. </entry>
<entry level="1" type="bullet">

 <b>Anti-entropy protocols</b> for repairing replicated data, which operate by comparing replicas and reconciling differences.  </entry>
<entry level="1" type="bullet">

 <b>Protocols that compute aggregates</b>.  These compute a network-wide aggregate by sampling information at the nodes in the network and combining the values to arrive at a system-wide value – the largest value for some measurement nodes are making, smallest, etc.  The key requirement is that the aggregate must be computable by fixed-size pairwise information exchanges; these typically terminate after a number of rounds of information exchange logarithmic in the system size, by which time an all-to-all information flow pattern will have been established.   As a side effect of aggregation, it is possible to solve other kinds of problems using gossip; for example, there are gossip protocols that can arrange the nodes in a gossip overlay into a list sorted by node-id (or some other attribute) in logarithmic time using aggregation-style exchanges of information.  Similarly, there are gossip algorithms that arrange nodes into a tree and compute aggregates such as "sum" or "count" by gossiping in a pattern biased to match the tree structure.</entry>
</list>
</p>
<p>

Many protocols that predate the earliest use of the term "gossip" fall within this rather inclusive definition.  For example, Internet <link xlink:type="simple" xlink:href="../059/10123059.xml">
routing protocol</link>s often use gossip-like information exchanges.  A gossip substrate can be used to implement a standard routed network: nodes "gossip" about traditional point-to-point messages, effectively pushing traffic through the gossip layer.  Bandwidth permitting, this implies that a gossip system can potentially support any classic protocol or implement any classical distributed service.  However, such a broadly inclusive interpretation is rarely intended.  More typically gossip protocols are those that specifially run in a regular, periodic, relatively lazy, symmetric and decentralized manner; the high degree of symmetry among nodes is particularly characteristic.  Thus, while one could run a 2-phase commit protocol over a gossip substrate, doing so would be at odds with the spirit, if not the wording, of the definition.</p>
<p>

Frequently, the most useful gossip protocols turn out to be those with exponentially rapid convergence towards a state that "emerges" with probability 1.0.  A classic distributed computing problem, for example, involves building a tree whose inner nodes are the nodes in a network and whose edges represent links between computers (for routing, as a dissemination overlay, etc).  Not all tree-building protocols are gossip protocols (for example, spanning tree constructions in which a leader initiates a flood), but gossip offers a decentralized solution that is useful in many situations.</p>
<p>

The term <it>convergently consistent</it> is sometimes used to describe protocols that achieve exponentially rapid spread of information.  For this purpose, a protocol must propagate any new information to all nodes that will be affected by the information within time logarithmic in the size of the system (the "mixing time" must be logarithmic in system size).</p>

</sec>
<sec>
<st>
 Examples </st>
<p>

Suppose that we want to find the object that most closely matches some search pattern, within a network of unknown size, but where the computers are linked to one-another and where each machine is running a small <it>agent</it> program that implements a gossip protocol.</p>
<p>

<list>
<entry level="1" type="bullet">

 To start the search, a user would ask the local agent to begin to gossip about the search string.  (We're assuming that agents either start with a known list of peers, or retrieve this information from some kind of a shared web site.)</entry>
<entry level="1" type="bullet">

 Periodically, at some rate (let's say ten times per second, for simplicity), each agent picks some other agent at random, and gossips with it.  Search strings known to A will now also be known to B, and vice versa.  In the next "round" of gossip A and B will pick additional random peers, maybe C and D.  This round-by-round doubling phenomenon makes the protocol very robust, even if some messages get lost, or some of the selected peers are the same or already know about the search string.</entry>
<entry level="1" type="bullet">

 On receipt of a search string for the first time, each agent checks its local machine for matching documents. </entry>
<entry level="1" type="bullet">

 Agents also gossip about the best match, to date.  Thus, if A gossips with B, after the interaction, A will know of the best matches known to B, and vice versa.  Best matches will "spread" through the network.</entry>
</list>
</p>
<p>

If the messages might get large (for example, if many searches are active all at the same time), a size limit should be introduced.  Also, searches should "age out" of the network.</p>
<p>

It should be easy to see that within logarithmic time in the size of the network (the number of agents), any new search string will have reached all agents.  Within an additional delay of the same approximate length, every agent will learn where the best match can be found.  In particular, the agent that started the search will have found the best match.</p>
<p>

For example, in a network with 25,000 machines, we can find the best match after about 30 rounds of gossip: 15 to spread the search string and 15 more to discover the best match.  A gossip exchange could occur as often as once every tenth of a second without imposing undue load, hence this form of network search could search a big data center in about 3 seconds.</p>
<p>

In this scenario, searches might automatically age out of the network after, say, 10 seconds.  By then, the initiator knows the answer and there is no point in further gossip about that search.</p>
<p>

Gossip protocols have also been proposed for such tasks as maintaining databases or other kinds of files in consistent states, counting the number of nodes in a network of unknown size, spreading news robustly, organizing nodes according to some structuring policy, building so-called overlay networks, computing aggregates, sorting the nodes in a network, electing leaders, etc.</p>

</sec>
<sec>
<st>
 Epidemic Algorithms </st>
<p>

Gossip protocols can be used to propagate information in a manner rather similar to the way that a viral infection spreads in a biological population.  Indeed, the mathematics of epidemics are often used to model the mathematics of gossip communication.  The term <it>epidemic algorithm</it> is sometimes employed when describing a software system in which this kind of gossip-based information propagation is employed.</p>

</sec>
<sec>
<st>
 Biased Gossip </st>
<p>

Above, we described a purely random peer-selection scheme for gossip: when agent A decides to run a gossip round, it picks some peer B uniformly and at random within the network as a whole (or launches a message on a random walk that will terminate at a random agent).  More commonly, gossip algorithms are designed so that agents interact mostly with nearby agents, and only sometimes with agents that are far away (in terms of network delay).  These <it>biased</it> gossip protocols need to ensure a sufficient degree of connectivity to avoid the risk of complete disconnection of one side of a network from the other, but if care is taken, can be faster and more efficient than protocols that are purely random.  Moreover, as a purely practical question, it is much easier to maintain lists of peers in ways that might be somewhat biased.</p>

</sec>
<sec>
<st>
 See also </st>
<p>

<list>
<entry level="1" type="bullet">

Gossip protocols are just one class among many classes of networking protocols. See also <link xlink:type="simple" xlink:href="../735/11459735.xml">
virtual synchrony</link>, distributed <link xlink:type="simple" xlink:href="../931/10931.xml">
state machine</link>s, <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../488/5722488.xml">
Paxos algorithm</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</instrumentality>
</artifact>
</system>
, database <link xlink:type="simple" xlink:href="../240/234240.xml">
transactions</link>.  Each class contains tens or even hundreds of protocols, differing in their details and performance properties but similar at the level of the guarantees offered to users.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

Some Gossip protocols replace the random peer selection mechanism with a more deterministic scheme.  For example, in the <weblink xlink:type="simple" xlink:href="http://www.actapress.com/PDFViewer.aspx?paperId=31994">
NeighbourCast</weblink> Algorithm, instead of talking to random nodes, information is spread by talking only to neighbouring nodes. There are a number of algorithms that use similar ideas.  A key requirement when designing such protocols is that the neighbor set trace out an <link xlink:type="simple" xlink:href="../313/9313.xml">
expander graph</link>.  </entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../750/25750.xml">
Routed</link></entry>
</list>
</p>

</sec>
<sec>
<st>
 References </st>


<p>



Here are some additional references to recent work from the gossip community.  The paper by Demers is considered by most researchers to be the first to have really recognized the power of these protocols and to propose a formal treatment of gossip.</p>

<p>

<list>
<entry level="1" type="bullet">

Correctness of a Gossip-based Membership Protocol. André Allavena, Alan Demers and John Hopcroft. Proc. 24th ACM Symposium on the Principle of Distributed Computing (PODC 2005).</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

Bimodal Multicast.  Kenneth P. Birman, Mark Hayden, Oznur Ozkasap, Zhen Xiao, Mihai Budiu and Yaron Minsky.  ACM Transactions on Computer Systems, Vol. 17, No. 2, pp 41-88, May, 1999.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

Epidemic algorithms for replicated database management.  Alan Demers, et al. Proc. 6th ACM PODC, Vancouver BC, 1987.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

Lightweight probabilistic broadcast.  Patrick Eugster, Rashid Guerraoui, S. B. Handurukande, Petr Kouznetsov, Anne-Marie Kermarrec. ACM Transactions on Computer Systems (TOCS)  21:4, Nov 2003. </entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

Kelips: Building an Efficient and Stable P2P DHT Through Increased Memory and Background Overhead.  Indranil Gupta, Ken Birman, Prakash Linga, Al Demers, Robbert van Renesse.  Proc. 2nd International Workshop on Peer-to-Peer Systems (IPTPS '03)</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

Systematic Design of P2P Technologies for Distributed Systems.  Indranil Gupta, Global Data Management, eds: R. Baldoni, G. Cortese, F. Davide and A. Melpignano, 2006.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

HyParView: a Membership Protocol for Reliable Gossip-based Broadcast. João Leitão, José Pereira, Luís Rodrigues. Proc. 37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

Efficient and Adaptive Epidemic-Style Protocols for Reliable and Scalable Multicast. Indranil Gupta, Ayalvadi J. Ganesh, Anne-Marie Kermarrec. IEEE Transactions on Parallel and Distributed Systems, vol. 17, no. 7, pp. 593-605, July, 2006.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

T-Man: Gossip-based overlay topology management. Márk Jelasity and Ozalp Babaoglu. Engineering Self-Organising Systems: Third International Workshop (ESOA 2005), Springer-Verlag LNCS 3910 (2006). </entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

Epidemic Broadcast Trees. João Leitão, José Pereira, Luís Rodrigues. Proc. 26th IEEE International Symposium on Reliable Distributed Systems (SRDS'07).</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

Gossip-based aggregation in large dynamic networks. Márk Jelasity, Alberto Montresor, and Ozalp Babaoglu. ACM Transactions on Computer Systems, 23(3):219–252, August 2005.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

Ordered slicing of very large overlay networks.  Márk Jelasity and Anne-Marie Kermarrec.  IEEE P2P, 2006.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

Proximity-aware superpeer overlay topologies. Gian Paolo Jesi, Alberto Montresor, and Ozalp Babaoglu. Proc SelfMan 06. Spinger-Verlag LNCS 399, Dublin, Ireland, June 2006. </entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

Spatial gossip and resource location protocols. David Kempe, Jon Kleinberg, Alan Demers. Journal of the ACM (JACM) 51: 6 (Nov 2004). </entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

Gossip-Based Computation of Aggregate Information. David Kempe, Alin Dobra, Johannes Gehrke.  Proc.  44th Annual IEEE Symposium on Foundations of Computer Science (FOCS).  2003.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

Active and Passive Techniques for Group Size Estimation in Large-Scale and Dynamic Distributed Systems. Dionysios Kostoulas , Dimitrios Psaltoulis, Indranil Gupta, Ken Birman, Al Demers. Elsevier Journal of Systems and Software, 2007.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

Build One, Get One Free: Leveraging the Coexistence of Multiple P2P Overlay Networks. Balasubramaneyam Maniymaran, Marin Bertier and Anne-Marie Kermarrec.  Proc. ICDCS, June 2007.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

Peer counting and sampling in overlay networks: random walk methods.  Laurent Massoulié, Erwan Le Merrer, Anne-Marie Kermarrec, Ayalvadi Ganesh.  Proc. 25th ACM PODC.  Denver, 2006.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

Chord on Demand.  Alberto Montresor, Márk Jelasity, and Ozalp Babaoglu. Proc. 5th Conference on Peer-to-Peer Computing (P2P),  Konstanz, Germany, August 2005.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

Introduction to Expander Graphs.  Michael Nielsen.  http://www.qinfo.org/people/nielsen/blog/archive/notes/expander_graphs.pdf. Technical report, June 2005. </entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

Building low-diameter P2P networks. G. Pandurangan, P. Raghavan, Eli Upfal.  In Proceedings of the 42nd Symposium on Foundations of Computer Science (FOCS),  2001.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

Astrolabe: A Robust and Scalable Technology for Distributed System Monitoring, Management, and Data Mining. Robbert van Renesse, Kenneth Birman and Werner Vogels. ACM Transactions on Computer Systems (TOCS) 21:2, May 2003.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

Exploiting Semantic Proximity in Peer-to-peer Content Searching.  S. Voulgaris, A.-M. Kermarrec, L. Massoulie, M. van Steen.  Proc. 10th Int'l Workshop on Future Trends in Distributed Computing Systems (FTDCS 2004), Suzhou, China, May 2004.</entry>
</list>
</p>

<p>

Although this textbook is old, many gossip researchers cite it as an authoritative source for information about the mathematical modelling of gossip and epidemic protocols:
<list>
<entry level="1" type="bullet">

<b>The Mathematical Theory of Epidemics.</b> N.J.T. Bailey, 1957.  Griffen Press.</entry>
</list>
</p>

</sec>
</bdy>
</article>
