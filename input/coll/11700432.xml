<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 17.04.2009 00:48:49[mciao0828] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<event  confidence="0.8" wordnetid="100029378">
<entity  confidence="0.9511911446218017" wordnetid="100001740">
<rule  confidence="0.8" wordnetid="105846932">
<act  confidence="0.8" wordnetid="100030358">
<psychological_feature  confidence="0.8" wordnetid="100023100">
<procedure  confidence="0.8" wordnetid="101023820">
<activity  confidence="0.8" wordnetid="100407535">
<algorithm  confidence="0.8" wordnetid="105847438">
<header>
<title>Convex hull algorithms</title>
<id>11700432</id>
<revision>
<id>242861121</id>
<timestamp>2008-10-03T23:58:25Z</timestamp>
<contributor>
<username>Twri</username>
<id>7976492</id>
</contributor>
</revision>
<categories>
<category>Convex geometry</category>
<category>Polytopes</category>
<category>Geometric algorithms</category>
</categories>
</header>
<bdy>

Algorithms that construct <link xlink:type="simple" xlink:href="../634/40634.xml">
convex hull</link>s of various objects have a broad range of applications in <link xlink:type="simple" xlink:href="../831/18831.xml">
mathematics</link> and <link xlink:type="simple" xlink:href="../323/5323.xml">
computer science</link>, see "<mathematical_relation wordnetid="113783581" confidence="0.8">
<chart wordnetid="106999802" confidence="0.8">
<visual_communication wordnetid="106873252" confidence="0.8">
<operator wordnetid="113786413" confidence="0.8">
<function wordnetid="113783816" confidence="0.8">
<link xlink:type="simple" xlink:href="../634/40634.xml#xpointer(//*[./st=%22Applications%22])">
Convex hull applications</link></function>
</operator>
</visual_communication>
</chart>
</mathematical_relation>
".<p>

In <link xlink:type="simple" xlink:href="../927/176927.xml">
computational geometry</link>, numerous algorithms are proposed for computing the convex hull of a finite set of points, with various <link xlink:type="simple" xlink:href="../543/7543.xml">
computational complexities</link>.</p>
<p>

Computing the convex hull means that a non-ambiguous and efficient <link xlink:type="simple" xlink:href="../519/8519.xml">
representation</link> of the required convex shape is constructed. The complexity of the corresponding algorithms is usually estimated in terms  of <b><it>n</it></b>, the number of input points, and <b><it>h</it></b>, the number of points on the convex hull.</p>

<sec>
<st>
 Planar case </st>

<ss1>
<st>
 Finite set of points </st>

<p>

If not all points are on the same line, then their convex hull is a convex <link xlink:type="simple" xlink:href="../621/23621.xml">
polygon</link> whose vertices are some of the points in the input set. Its most common representation is the list of its vertices ordered along its boundary clockwise or counterclockwise. In some applications it is convenient to represent a convex polygon as an intersection of a set of <link xlink:type="simple" xlink:href="../297/647297.xml">
half-planes</link>.</p>

<ss2>
<st>
 Jarvis march </st>

<p>

The simplest (although not the most time efficient in the worst case) algorithm in the plane was proposed by R.A. Jarvis in 1973. It is also called <link xlink:type="simple" xlink:href="../318/393318.xml">
gift wrapping algorithm</link>. It has <link xlink:type="simple" xlink:href="../578/44578.xml">
O</link>(<it>nh</it>) <link xlink:type="simple" xlink:href="../543/7543.xml">
time complexity</link>, where <it>n</it> is the number of points in the set, and <it>h</it> is the number of points in the hull. In the worst cases the complexity is <link xlink:type="simple" xlink:href="../578/44578.xml">
O</link>(<it>n2</it>)</p>

</ss2>
<ss2>
<st>
 Graham scan </st>

<p>

A slightly more sophisticated, but much more efficient algorithm is the <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../372/393372.xml">
Graham scan</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
, published in 1972 (O(<it>n</it> log <it>n</it>) time complexity). If the points are already sorted by one of the coordinates or by the angle to a fixed vector, then the algorithm takes O(<it>n</it>) time.</p>

</ss2>
<ss2>
<st>
 Divide and conquer </st>

<p>

Another O(<it>n</it> log <it>n</it>) solution is the <link xlink:type="simple" xlink:href="../154/201154.xml">
divide and conquer algorithm</link> for the convex hull, published in 1977 by <physical_entity wordnetid="100001930" confidence="0.8">
<peer wordnetid="109626238" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<colleague wordnetid="109935990" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<research_worker wordnetid="110523076" confidence="0.8">
<associate wordnetid="109816771" confidence="0.8">
<link xlink:type="simple" xlink:href="../906/9597906.xml">
Preparata</link></associate>
</research_worker>
</scientist>
</causal_agent>
</colleague>
</person>
</peer>
</physical_entity>
 and Hong. This algorithm is also applicable to the three dimensional case.</p>

</ss2>
<ss2>
<st>
 Optimal output-sensitive algorithms </st>

<p>

While it is not possible to do better than O(<it>n</it> log <it>n</it>) if we write the complexity only as a function of the input size <it>n</it>, we can obtain more e&amp;gt;fficient solutions by using an <link xlink:type="simple" xlink:href="../990/12127990.xml">
output-sensitive algorithm</link>. There are two famous optimal output-sensitive algorithms for the planar case with O(<it>n</it> log <it>h</it>) <link xlink:type="simple" xlink:href="../543/7543.xml">
time complexity</link>, where <it>h</it> is the number of points in the hull. The earliest one  was introduced by <link>
Kirkpatrick</link> and <link>
Seidel</link> in 1986 (who called it "the <link xlink:type="simple" xlink:href="../089/11699089.xml">
ultimate convex hull algorithm</link>"). A much simpler algorithm was developed by <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<research_worker wordnetid="110523076" confidence="0.8">
<link xlink:type="simple" xlink:href="../620/2538620.xml">
Chan</link></research_worker>
</scientist>
</causal_agent>
</person>
</physical_entity>
 in 1996, and is called <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../430/8320430.xml">
Chan's algorithm</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
.</p>

</ss2>
<ss2>
<st>
 Akl-Toussaint heuristics </st>

<p>

The following simple heuristic is often used as the first step in implementations of convex hull algorithms to improve their performance. It is based on the efficient convex hull algorithm by S. Akl and <link xlink:type="simple" xlink:href="../044/12107044.xml">
G. T. Toussaint</link>, 1978. The idea is to quickly  exclude many points that would not be part of the convex hull anyway.  This method is based on the following idea.  Find the two points with the lowest and highest x-coordinates, and the two points with the lowest and highest y-coordinates. (Each of these operations takes <link xlink:type="simple" xlink:href="../578/44578.xml">
O</link>(<it>n</it>).) These four points form a <link xlink:type="simple" xlink:href="../278/25278.xml">
convex quadrilateral</link>, and all points that lie in this quadrilateral (except for the four initially chosen vertices) are not part of the convex hull.  Finding all of these points that lie in this quadrilateral is also O(<it>n</it>), and thus, the entire operation is O(<it>n</it>). Optionally, the points with smallest and largest sums of x- and y-coordinates as well as those with smallest and largest differences of x- and y-coordinates can also be added to the quadrilateral, thus forming an irregular convex octagon, whose insides can be safely discarded.</p>

</ss2>
</ss1>
<ss1>
<st>
 Simple polygon </st>

<p>

The convex hull of a <link xlink:type="simple" xlink:href="../530/1059530.xml">
simple polygon</link> can be constructed in O(<it>n</it>) time. The basic idea is very simple. Starting from the leftmost vertex, at each step one looks at three consecutive vertices of the polygon. If the resulting angle is concave, then the middle  point is discarded and the next (along the polygon) vertex is added to the triple to be tested. If the angle is convex, then the whole triple is shifted by one vertex along the polygon. However quite a few published articles overlooked a possibility that deletion of a vertex from a polygon may result in a self-intersecting polygon, rendering further flow of the algorithm invalid. Fortunately, this case may also be handled efficiently.</p>

</ss1>
</sec>
<sec>
<st>
 Higher dimensions  </st>

<p>

For a finite set of points, the convex hull is a <link xlink:type="simple" xlink:href="../885/1817885.xml">
convex polyhedron</link> in three dimensions, or in general a <link xlink:type="simple" xlink:href="../885/1817885.xml">
convex polytope</link> for any number of dimensions, whose vertices are some of the points in the input set.  Its representation is not so simple as in the planar case, however. In higher dimensions, even if the vertices of a convex polytope are known, construction of its <link xlink:type="simple" xlink:href="../234/53234.xml">
face</link>s is a non-trivial task.</p>
<p>

A number of algorithms are known for the three-dimensional case, as well as for arbitrary dimensions. See http://www.cse.unsw.edu.au/~lambert/java/3d/hull.html.
See also <weblink xlink:type="simple" xlink:href="http://www.cs.umd.edu/~mount/754/Lects/754lects.pdf">
David Mount's Lecture Notes</weblink> for comparison. Refer to Lecture 4 for the latest developments, including
<event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../430/8320430.xml">
Chan's algorithm</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
.</p>

</sec>
<sec>
<st>
See also</st>
<p>

<list>
<entry level="1" type="bullet">

<event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../685/7847685.xml">
Orthogonal convex hull</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</entry>
</list>
</p>

</sec>
<sec>
<st>
References</st>

<p>

<list>
<entry level="1" type="bullet">

 <scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../475/4108475.xml">
Thomas H. Cormen</link></scientist>
, <scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../884/1400884.xml">
Charles E. Leiserson</link></scientist>
, <link xlink:type="simple" xlink:href="../057/68057.xml">
Ronald L. Rivest</link>, and <scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../993/3489993.xml">
Clifford Stein</link></scientist>
. <it><work wordnetid="104599396" confidence="0.8">
<product wordnetid="104007894" confidence="0.8">
<creation wordnetid="103129123" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<book wordnetid="106410904" confidence="0.8">
<publication wordnetid="106589574" confidence="0.8">
<link xlink:type="simple" xlink:href="../226/3499226.xml">
Introduction to Algorithms</link></publication>
</book>
</artifact>
</creation>
</product>
</work>
</it>, Second Edition. MIT Press and McGraw-Hill, 2001. ISBN 0-262-03293-7. Section 33.3: Finding the convex hull, pp.947&ndash;957.</entry>
<entry level="1" type="bullet">

 <physical_entity wordnetid="100001930" confidence="0.8">
<peer wordnetid="109626238" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<colleague wordnetid="109935990" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<research_worker wordnetid="110523076" confidence="0.8">
<associate wordnetid="109816771" confidence="0.8">
<link xlink:type="simple" xlink:href="../906/9597906.xml">
Franco P. Preparata</link></associate>
</research_worker>
</scientist>
</causal_agent>
</colleague>
</person>
</peer>
</physical_entity>
, <link>
S.J. Hong</link>. <it>Convex Hulls of Finite Sets of Points in Two and Three Dimensions</it>, Commun. ACM, vol. 20, no. 2, pp. 87&ndash;93, 1977.</entry>
<entry level="1" type="bullet">

  <cite style="font-style:normal" class="book"><link>
Mark de Berg</link>, <link>
Marc van Kreveld</link>, <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<research_worker wordnetid="110523076" confidence="0.8">
<link xlink:type="simple" xlink:href="../516/1177516.xml">
Mark Overmars</link></research_worker>
</scientist>
</causal_agent>
</person>
</physical_entity>
, and <link>
Otfried Schwarzkopf</link>&#32;(2000). Computational Geometry, 2nd revised edition,&#32;<link xlink:type="simple" xlink:href="../949/1418949.xml">
Springer-Verlag</link>. ISBN 3-540-65620-0.</cite>&nbsp; Section 1.1: An Example: Convex Hulls (describes classical algorithms for 2-dimensional convex hulls). Chapter 11: Convex Hulls: pp.235&ndash;250 (describes a randomized algorithm for 3-dimensional convex hulls due to Clarkson and Shor).</entry>
</list>
</p>


</sec>
<sec>
<st>
External links</st>
<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.voronoi3d.com/index.html">
Applet for calculation and visualization of convex hull, Delaunay triangulations and Voronoi diagrams in space</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://mathworld.wolfram.com/ConvexHull.html">
Mathworld on convex hull</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.cgal.org/Part/ConvexHullAlgorithms">
 2D, 3D, and dD Convex Hull</weblink> in <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../183/11587183.xml">
CGAL</link></software>
, the Computational Geometry Algorithms Library</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.qhull.org/">
Qhull code for Convex Hull, Delaunay Triangulation, Voronoi Diagram, and Halfspace Intersection</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.itu.dk/~sestoft/gcsharp/index.html#hull">
Code in C#</weblink></entry>
</list>
</p>


</sec>
</bdy>
</algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</entity>
</event>
</article>
