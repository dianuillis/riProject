<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 18:15:37[mciao0825] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<system  confidence="0.8" wordnetid="104377057">
<artifact  confidence="0.8" wordnetid="100021939">
<instrumentality  confidence="0.8" wordnetid="103575240">
<header>
<title>Clock synchronization</title>
<id>1182359</id>
<revision>
<id>241672955</id>
<timestamp>2008-09-29T01:32:50Z</timestamp>
<contributor>
<username>Ceyockey</username>
<id>150564</id>
</contributor>
</revision>
<categories>
<category>Distributed systems</category>
<category>Synchronization</category>
<category>Clocks</category>
</categories>
</header>
<bdy>

<b>Clock synchronization</b> is a problem from <link xlink:type="simple" xlink:href="../323/5323.xml">
computer science</link> and <link xlink:type="simple" xlink:href="../251/9251.xml">
engineering</link> which deals with the idea that internal <link xlink:type="simple" xlink:href="../449/6449.xml">
clock</link>s of several computers may differ.  Even when initially set accurately, real clocks will differ after some amount of time due to <link xlink:type="simple" xlink:href="../924/6083924.xml">
clock drift</link>, caused by clocks counting time at slightly different rates. There are several problems that occur as a repercussion of rate differences and several solutions, some being more appropriate than others in certain contexts.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref>
<p>

In serial communication, some people<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%222%22])">2</ref> use the term "clock synchronization" merely to discuss getting one metronome-like <link xlink:type="simple" xlink:href="../693/182693.xml">
clock signal</link> to pulse at the same frequency as another one -- <link>
frequency synchronization</link> and <link xlink:type="simple" xlink:href="../436/1832436.xml">
phase synchronization</link>. Such "clock synchronization" is used in <link xlink:type="simple" xlink:href="../623/2723623.xml">
synchronization in telecommunications</link> and <link xlink:type="simple" xlink:href="../486/60486.xml">
automatic baud rate detection</link>.</p>


<sec>
<st>
Problems</st>
<p>

Besides the incorrectness of the time itself, there are problems associated with clock skew that take on more complexity in a <link xlink:type="simple" xlink:href="../501/8501.xml">
distributed system</link> in which several computers will need to realize the same global time.</p>
<p>

For instance, in <family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../642/31642.xml">
Unix</link></family>
 systems the <it><link xlink:type="simple" xlink:href="../194/176194.xml">
make</link></it> command is used to <link xlink:type="simple" xlink:href="../932/40932.xml">
compile</link> new or modified code without the need to recompile unchanged code. The <it>make</it> command uses the clock of the machine it runs on to determine which source files need to be recompiled. If the sources reside on a separate <link xlink:type="simple" xlink:href="../151/41151.xml">
file server</link> and the two machines have unsynchronized clocks, the <it>make</it> program might not produce the correct results.</p>

</sec>
<sec>
<st>
Solutions</st>
<p>

In a <link xlink:type="simple" xlink:href="../488/402488.xml">
centralized system</link> the solution is trivial; the centralized server will dictate the system time.  <link xlink:type="simple" xlink:href="../926/17296926.xml">
Cristian's algorithm</link> and the <link xlink:type="simple" xlink:href="../870/17296870.xml">
Berkeley Algorithm</link> are some solutions to the clock synchronization problem in a centralized server environment. 
In a <link xlink:type="simple" xlink:href="../501/8501.xml">
distributed system</link> the problem takes on more complexity because a global time is not easily known.  The most used clock synchronization solution on the Internet is the <message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<standard wordnetid="107260623" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../886/159886.xml">
Internet Network Time Protocol (NTP)</link></system_of_measurement>
</rule>
</direction>
</standard>
</protocol>
</message>
 which is a layered client-server architecture based on UDP message passing. <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../021/2173021.xml">
Lamport timestamps</link></instrumentality>
</artifact>
</system>
 and <link xlink:type="simple" xlink:href="../702/1376702.xml">
Vector clocks</link> are concepts of the logical clocks in distributed systems.</p>

<ss1>
<st>
Cristian's algorithm</st>

<p>

<indent level="1">

<it>Main article: <link xlink:type="simple" xlink:href="../926/17296926.xml">
Cristian's algorithm</link></it>
</indent>
Cristian's algorithm relies on the existence of a time server.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%223%22])">3</ref>  The time server maintains its clock by using a <link xlink:type="simple" xlink:href="../511/164511.xml">
radio clock</link> or other accurate time source, then all other computers in the system stay synchronized with it.  A time client will maintain its clock by making a <link xlink:type="simple" xlink:href="../988/40988.xml">
procedure call</link> to the time server.  Variations of this algorithm make more precise time calculations by factoring in network <link xlink:type="simple" xlink:href="../077/43077.xml">
propagation</link> time.</p>

</ss1>
<ss1>
<st>
Berkeley algorithm</st>
<p>

This algorithm is more suitable for systems where a radio clock is not present, this system has no way of making sure of the actual time other than by maintaining a global average time as the global time. A time server will periodically fetch the time from all the time clients, average the results, and then report back to the clients the adjustment that needs be made to their local clocks to achieve the average.  This algorithm highlights the fact that internal clocks may vary not only in the time they contain but also in the clock rate.
Often, any client whose clock differs by a value outside of a given tolerance is disregarded when averaging the results.  This prevents the overall system time from being drastically skewed due to one erroneous clock.</p>

</ss1>
<ss1>
<st>
Clock Sampling Mutual Network Synchronization</st>
<p>

This algorithm is a class of mutual network synchronization algorithm in which no master or reference clocks are needed. All clocks equally participate in the synchronization of the network by exchanging their timestamps using regular beacon packets. CS-MNS is suitable for distributed and mobile applications. It has been shown to be scalable, accurate in the order of few microseconds, and compatible to IEEE 802.11 and similar standards.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%224%22])">4</ref></p>

</ss1>
</sec>
<sec>
<st>
See also</st>

<p>

<table style="background:#f9f9f9; font-size:85%; line-height:110%; ">
<row>
<col>
 <image width="32x28px" src="MontreGousset001.jpg">
</image>
</col>
<col style="padding:0 0.2em;">
 <b><it>
Time&#32;portal</it></b></col>
</row>
</table>
</p>
<p>

<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../334/334.xml">
International Atomic Time</link></entry>
<entry level="1" type="bullet">

 <message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<standard wordnetid="107260623" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../886/159886.xml">
Network Time Protocol</link></system_of_measurement>
</rule>
</direction>
</standard>
</protocol>
</message>
</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../702/1376702.xml">
Vector clocks</link></entry>
<entry level="1" type="bullet">

 <standard wordnetid="107260623" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../269/2142269.xml">
Precision Time Protocol</link></system_of_measurement>
</standard>
</entry>
</list>
</p>

</sec>
<sec>
<st>
 References </st>

<p>

<reflist>
<entry id="1">
 <cite style="font-style:normal" class="book"><person wordnetid="100007846" confidence="0.9508927676800064">
<professor wordnetid="110480730" confidence="0.9173553029164789">
<link xlink:type="simple" xlink:href="../110/3110.xml">
Tanenbaum, Andrew S.</link></professor>
</person>
;&#32;Maarten van Steen&#32;(2002). Distributed Systems : Principles and Paradigms.&#32;<link xlink:type="simple" xlink:href="../050/5421050.xml">
Prentice Hall</link>. ISBN 0-13-088893-1.</cite>&nbsp;</entry>
<entry id="2">
<weblink xlink:type="simple" xlink:href="http://heather.cs.ucdavis.edu/~matloff/Networks/Serial/Serial.pdf">
"Transmission on a Serial Line"</weblink>
</entry>
<entry id="3">
 <cite id="CITEREFCristian1989" style="font-style:normal">Cristian, F.&#32;(1989),&#32;"<weblink xlink:type="simple" xlink:href="http://www.springerlink.com/content/j5250h34013874jv/">
Probabilistic clock synchronization</weblink>",&#32;<it>Distributed Computing</it>&#32;(Springer)&#32;<b>3</b>(3):  146-158, </cite>&nbsp;</entry>
<entry id="4">
 <cite id="CITEREFRentelKunz2005" style="font-style:normal">Rentel, C.&#32;&amp;&#32;Kunz, T.&#32;(2005),&#32;"<weblink xlink:type="simple" xlink:href="http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=1424575">
A clock-sampling mutual network synchronization algorithm for wireless ad hoc networks</weblink>",&#32;<it>IEEE Wireless Communications and Networking Conference</it>&#32;(IEEE Press)&#32;<b>1</b>:  638-644, </cite>&nbsp;</entry>
</reflist>
</p>


</sec>
</bdy>
</instrumentality>
</artifact>
</system>
</article>
