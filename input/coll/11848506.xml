<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 17.04.2009 00:53:15[mciao0828] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>Opportunistic Locking</title>
<id>11848506</id>
<revision>
<id>214084036</id>
<timestamp>2008-05-22T00:59:18Z</timestamp>
<contributor>
<username>Dezidor</username>
<id>1529049</id>
</contributor>
</revision>
<categories>
<category>concurrency control</category>
</categories>
</header>
<bdy>

In the <message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<link xlink:type="simple" xlink:href="../873/349873.xml">
SMB</link></rule>
</direction>
</protocol>
</message>
 protocol, <b>Opportunistic Locking</b> (also referred to as OpLocks) is a file locking mechanism designed to improve performance by controlling caching of files on the client. Contrary to traditional locking, OpLocks are not used in order to provide mutual exclusion, rather the main goal of OpLocks is to provide synchronization for caching.
<sec>
<st>
Locking types</st>
<p>

In the <message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<link xlink:type="simple" xlink:href="../873/349873.xml">
SMB</link></rule>
</direction>
</protocol>
</message>
 protocol there are 3 types of Opportunistic Locks:
</p>
<ss1>
<st>
Batch Locks</st>
<p>

Batch OpLocks were created originally to support a particular behavior of MS-DOS batch file execution operation in which the file is opened and closed many times in a short period. This is an obvious performance problem. To solve this, a client may ask for a Batch type OpLock. In this case, the client delays sending the close request and if a subsequent open request is given, the two requests cancel each other.
</p>
</ss1>
<ss1>
<st>
Exclusive Locks</st>
<p>

When a client opens a file hosted on an SMB server which is not opened by any other process (or other clients) the client receives an <b>Exclusive OpLock</b> from the server. This means that the client may now assume that it is the only process with access to this particular file, and the client may now cache all changes to the file before committing it to the server. This is an obvious performance boost, since fewer round-trips are required in order to read and write to the file.
If another client/process tries to open the same file, the server sends a message to the client (called a break or revocation) which invalidates the exclusive lock previously given to the client. The client then flushes all changes to the file.</p>

</ss1>
<ss1>
<st>
Level 2 OpLocks</st>
<p>

If a file is opened by a third party while an Exclusive OpLock is held by a client, the client has to relinquish its exclusive OpLock to allow the other client's write/read access. A client may then receive a "Level 2 OpLock" from the server. A Level 2 OpLock allows the caching of read requests but excludes write caching.</p>

</ss1>
</sec>
<sec>
<st>
Breaks</st>
<p>

In contrast with the <message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<link xlink:type="simple" xlink:href="../873/349873.xml">
SMB</link></rule>
</direction>
</protocol>
</message>
 protocol's "standard", a break request may be sent from <it>server</it> to client to inform the client that an OpLock is no longer valid. This happens, for example, when another client wishes to open a file in a way that invalidates the OpLock. The first client is then sent an OpLock break and required to send all its local changes (in case of batch or exclusive OpLocks) if any and acknowledge the OpLock break. Upon this acknowledgment the server can reply to the second client in a consistent manner.</p>

</sec>
<sec>
<st>
See also</st>
<p>

<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../011/233011.xml">
Optimistic concurrency control</link></entry>
</list>
</p>

</sec>
</bdy>
</article>
