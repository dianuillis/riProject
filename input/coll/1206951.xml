<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 18:18:07[mciao0826] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<event  confidence="0.8" wordnetid="100029378">
<rule  confidence="0.8" wordnetid="105846932">
<act  confidence="0.8" wordnetid="100030358">
<psychological_feature  confidence="0.8" wordnetid="100023100">
<procedure  confidence="0.8" wordnetid="101023820">
<activity  confidence="0.8" wordnetid="100407535">
<algorithm  confidence="0.8" wordnetid="105847438">
<header>
<title>Shortest seek first</title>
<id>1206951</id>
<revision>
<id>175388388</id>
<timestamp>2007-12-03T01:55:44Z</timestamp>
<contributor>
<username>Danny</username>
<id>584</id>
</contributor>
</revision>
<categories>
<category>Disk scheduling algorithms</category>
<category>Scheduling algorithms</category>
</categories>
</header>
<bdy>

<b>Shortest seek first</b> is a disk <link>
scheduling</link> algorithm to determine the motion of the disk's arm and head in servicing read and write requests.
<sec>
<st>
 Description </st>
<p>

This is a direct improvement upon a first-come first-served (<event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../347/11347.xml">
FIFO</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
) algorithm. The drive maintains an incoming buffer of requests, and tied with each request is a cylinder number of the request. Lower cylinder numbers indicate that the cylinder is closest to the spindle, and higher numbers indicate the cylinder is further away. </p>
<p>

The shortest seek first algorithm determines which request is closest to the current position of the head, and then services that request next.</p>

</sec>
<sec>
<st>
 Analysis </st>
<p>

The shortest seek first algorithm has the direct benefit of simplicity and is clearly advantageous in comparison to the FIFO method, in that overall arm movement is reduced, resulting in lower average response time. </p>
<p>

However, since the buffer is always getting new requests, these can skew the service time of requests that may be farthest away from the disk head's current location, if the new requests were consistently away from the outlying request, resulting in a performance degradation due to <link xlink:type="simple" xlink:href="../591/501591.xml">
starvation</link>. </p>
<p>

The <link xlink:type="simple" xlink:href="../990/1206990.xml">
elevator algorithm</link> is one way of reducing arm movement/response time, and ensuring consistent servicing of requests</p>


</sec>
</bdy>
</algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</article>
