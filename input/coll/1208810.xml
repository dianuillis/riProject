<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 18:18:20[mciao0828] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<O  confidence="0.9508927676800064" wordnetid="106832680">
<header>
<title>Stratus VOS</title>
<id>1208810</id>
<revision>
<id>237150016</id>
<timestamp>2008-09-08T21:49:57Z</timestamp>
<contributor>
<username>Ghettoblaster</username>
<id>6603820</id>
</contributor>
</revision>
<categories>
<category>Operating systems</category>
</categories>
</header>
<bdy>
<template>
<name>infobox OS</name>
<parameters>
<family>
<link xlink:type="simple" xlink:href="../847/18847.xml">
multics</link>-like</family>
<name>
VOS</name>
<caption>
Stratus VOS</caption>
<license>
Kernel: <company wordnetid="108058098" confidence="0.8">
<institution wordnetid="108053576" confidence="0.8">
<link xlink:type="simple" xlink:href="../830/906830.xml">
Stratus Technologies</link></institution>
</company>
Drivers, libraries, and user-land programs: <company wordnetid="108058098" confidence="0.8">
<institution wordnetid="108053576" confidence="0.8">
<link xlink:type="simple" xlink:href="../830/906830.xml">
Stratus Technologies</link></institution>
</company>
, Other</license>
<kernel_type>
<link xlink:type="simple" xlink:href="../825/20825.xml">
Monolithic kernel</link></kernel_type>
<working_state>
Current</working_state>
</parameters>
</template>


<b>VOS</b> is a proprietary <link xlink:type="simple" xlink:href="../194/22194.xml">
operating system</link> running on <company wordnetid="108058098" confidence="0.8">
<institution wordnetid="108053576" confidence="0.8">
<link xlink:type="simple" xlink:href="../830/906830.xml">
Stratus Technologies</link></institution>
</company>
 computer systems. Currently VOS is only available on Stratus's ftServer and Continuum platforms,<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref> and is typically used in critical transaction processing scenarios where the built-in fault-tolerance delivers extremely high-availability.
<sec>
<st>
History</st>
<p>

According to the Stratus FAQ,<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%222%22])">2</ref> VOS was designed from its inception as a high-security transaction-processing environment tailored to fault-tolerant hardware. It incorporates much of the design experience that came out of the famous MIT/Bell-Laboratories/General-Electric (later Honeywell) <link xlink:type="simple" xlink:href="../847/18847.xml">
MULTICS</link> project. </p>
<p>

In recent years efforts have been made towards <standard wordnetid="107260623" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../305/23305.xml">
POSIX</link></system_of_measurement>
</standard>
-compliance,<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%223%22])">3</ref> and a number of open source projects can run on VOS.</p>

</sec>
<sec>
<st>
Development</st>

<ss1>
<st>
Programming in VOS</st>
<p>

VOS supports its own non-standard dialects of <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../708/23708.xml">
PL/I</link></programming_language>
, <link xlink:type="simple" xlink:href="../799/6799.xml">
COBOL</link>, <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../773/23773.xml">
Pascal</link></programming_language>
, <link xlink:type="simple" xlink:href="../168/11168.xml">
FORTRAN</link>, <link>
VOS C</link>, <link xlink:type="simple" xlink:href="../015/4015.xml">
BASIC</link>, and POSIX <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../038/72038.xml">
C++</link></programming_language>
.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%224%22])">4</ref> Most of these languages are extended to be able to make VOS system calls (e.g. s$seq_read to read a record from a file), and to support variable length strings in PL/1 style. Developers typically code in their favourite text editor, or offline, before compiling on the system. In older versions of VOS, program modules must be compiled on the system they are to be used on. Modern versions of VOS offer cross compilers.</p>
<p>

VOS now has support for CORBA and POSIX.1.</p>
<p>

Values in VOS are generally <link xlink:type="simple" xlink:href="../026/43026.xml">
big endian</link>, and the built-in indexing of files often relies on this.  On servers with <chip wordnetid="103020034" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<microprocessor wordnetid="103760310" confidence="0.8">
<conductor wordnetid="103088707" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<semiconductor_device wordnetid="104171831" confidence="0.8">
<link xlink:type="simple" xlink:href="../668/24668.xml">
Pentium</link></semiconductor_device>
</device>
</conductor>
</microprocessor>
</instrumentality>
</artifact>
</chip>
 processors, the compilers do a byte swap before reading or writing values to memory.</p>

</ss1>
<ss1>
<st>
Command Macro Language</st>
<p>

VOS has a fairly complete command macro language which can be used to create menu systems, automate tasks etc. VOS command macros accept arguments on the command-line or via a user interface "form". Arguments are defined at the beginning of the command macro in a "parameters" section. The language supports a range of statements, including if/then/else, boolean operations, "while" loops, "goto" and excellent error reporting. The command macro language can be executed in interactive and non-interactive modes. It can be used to automate programs, capturing prompts and sending appropriate responses. This has led Stratus to limit the capabilities of the command macro language.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%225%22])">5</ref></p>
<p>

The macro language lacks support for user-defined functions and does not easily support include files. The string handling is prone to errors, especially with embedded control characters.</p>

</ss1>
</sec>
<sec>
<st>
Overview</st>
<p>

VOS was coded mainly in PL/I with a small amount of assembly language before it was migrated to ftServer series but now it is coded in POSIX compliant C &amp; C++, assembly language &amp; legacy PL1. It's overall structure has much in common with Multics, and many of the systems sophisticated features can be traced back to Multics to varying degrees. The system exposes a number of fundamental abstractions to the software designer or programmer, most notable being
<list>
<entry level="1" type="bullet">

Processes</entry>
<entry level="1" type="bullet">

Devices</entry>
<entry level="1" type="bullet">

Hard Disks</entry>
<entry level="1" type="bullet">

Various IPC mechanisms</entry>
<entry level="1" type="bullet">

Tasks</entry>
</list>
</p>
<p>

A process is the scheduled entity in VOS and each process has a set of attributes that govern how it is manipulated by the system, for example processes have a <it>user name</it> and <it>process name</it>, the former is used by VOS to determine the processes access rights to external devices and items with the file system, of fundamental significance is a processes privileged flag which is a binary attribute; privileged processes may perform privileged operations, this mechanism being used to restrict certain potentially powerful operations that can have system wide consequences (e.g shutting down the system, dismounting a hard disk etc.).</p>

</sec>
<sec>
<st>
Distribution</st>
<p>

VOS is distributed only by <company wordnetid="108058098" confidence="0.8">
<institution wordnetid="108053576" confidence="0.8">
<link xlink:type="simple" xlink:href="../830/906830.xml">
Stratus Technologies</link></institution>
</company>
, usually arriving on a 3.5 mm DAT tape. Installations may be done by the Stratus Field Engineer or by the systems' SysAdmin.</p>

</sec>
<sec>
<st>
Interface</st>
<p>

The <link xlink:type="simple" xlink:href="../707/6707.xml">
command line interface</link> is the main, and most powerful, user interface for a VOS system.</p>
<p>

Users may be locked into "form" based sub-system by command macro scripts<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%226%22])">6</ref> if required, although a skilled user would be able to break out of this and get command-line access.</p>
<p>

Command macros and programs can be invoked with an argument to display a form listing all the available parameters, which the user can navigate using the "tab" key. Each parameter can be restricted to control what the user can input. This includes lists of valid values, numeric-only, text-only, etc. Parameters can also be hidden using a "secret" tag, or made mandatory.</p>
<p>

All commands in VOS are typed out in full with underbars to separate words, for example change_current_dir to change directory to a given path.  </p>
<p>

Every user has a file which contains a list of standard abbreviations for common commands, command strings, or commands with common variables. Command abbreviations are conventionally named after the first letters of the command they represent, so ccd foodir may be expanded to change_current_dir foodir.  </p>
<p>

The user can add, delete or modify the abbreviations, and many experienced VOS users have an abbreviations file built up over a long time that they bring with them to new systems and jobs.</p>
<p>

VOS processes run a start-up command start_up.cm on login (and also for non-interactive processes). This command macro can be used for a variety of purposes including loading multiple custom abbreviations file, setting custom file-paths, loading emacs customisations etc. Experienced users will also generally have a custom start-up command macro that they may wish to use on new systems.</p>

</sec>
<sec>
<st>
Applications</st>

<ss1>
<st>
System applications</st>
<p>

VOS is used on Continuum and ftServer systems, both of which are designed to be highly fault-tolerant. As such, these systems are typically used in safety-critical or mission-critical applications, typically banks, hospitals, telecommunications and transaction processing companies.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%227%22])">7</ref></p>

</ss1>
<ss1>
<st>
Communications</st>
<p>

VOS supports the following protocols<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%224%22])">4</ref></p>
<p>

<list>
<entry level="1" type="bullet">

TCP/IP</entry>
<entry level="1" type="bullet">

X.25</entry>
<entry level="1" type="bullet">

SNA</entry>
<entry level="1" type="bullet">

SDLC/QLLC</entry>
<entry level="1" type="bullet">

Async</entry>
<entry level="1" type="bullet">

Bisync</entry>
<entry level="1" type="bullet">

LAPB</entry>
<entry level="1" type="bullet">

Poll/Select</entry>
<entry level="1" type="bullet">

RJE/HASP</entry>
<entry level="1" type="bullet">

ALC/SLC</entry>
<entry level="1" type="bullet">

Visa, S.W.I.F.T., NASDAQ, FAS, CHIPS, AMEX</entry>
<entry level="1" type="bullet">

MQ Series</entry>
</list>
</p>
<p>

Older versions of VOS implemented a non-OSI standard TCP/IP known as OS-TCP. VOS since version 14.x has implemented OSI-compliant Streams-TCP. Older applications using OS-TCP have to be ported in order to use STCP.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%228%22])">8</ref> This can mean the loss of functionality as OS-TCP supported several functions that are no OSI-compliant and have therefore being abandoned.</p>

</ss1>
</sec>
<sec>
<st>
Fault tolerance</st>
<p>

Fault tolerance is built into VOS from the bottom up. On a hardware level, major devices are run in lock stepped duplex mode, meaning that there are two identical devices performing the same action at the same time. These devices are actively monitored by the operating system which can correct any minor inconsistencies (such as bad disk-writes or reads). Any devices which report an unacceptable number of faults are removed from service by the system. This includes CPUs, disk drives, communications devices etc. The system will continue processing as normal and if properly configured, a Stratus-supported system will automatically raise a fault ticket with Stratus Customer Service, who can dial into the system using a dedicated link to investigate the problem and dispatch replacement parts.</p>
<p>

Typically a modern Stratus ftServer or Continuum can expect to see 99.999% uptime. This is not to say that the applications running on these systems will achieve this level of uptime, only that the operating system will not crash due to an operating system bug.</p>

</sec>
<sec>
<st>
File system</st>
<p>

VOS supports a number of unique file types:
<list>
<entry level="1" type="bullet">

 Stream files: a stream of binary data, corresponding directly with the concept of a file on other operating systems.</entry>
<entry level="1" type="bullet">

 Fixed files: a sequence of records of a fixed size. </entry>
<entry level="1" type="bullet">

 Relative files: a sequence of records of a fixed file supporting random access</entry>
<entry level="1" type="bullet">

 Sequential files: a sequence of records of variable size</entry>
<entry level="1" type="bullet">

 Queue files: file-system based backup for <link xlink:type="simple" xlink:href="../709/429709.xml">
message queue</link>s</entry>
<entry level="1" type="bullet">

 Pipes: <link xlink:type="simple" xlink:href="../167/714167.xml">
named pipe</link>s for <link xlink:type="simple" xlink:href="../106/152106.xml">
inter-process communication</link></entry>
<entry level="1" type="bullet">

 Transaction files: these provide support for journal based rollback </entry>
</list>

The VOS API allows the creation of multiple indexes a file, sorting according to the contents of a record, or an external key.  A VOS file can be used as a sorted database table.</p>
<p>

VOS uses a proprietary file naming syntax which includes the system name, module name, disk number, and directory, with components separated by the "&amp;gt;" symbol. Typically the system disk will be housed in the same module as the CPU, #m1, so a text file in a SysAdmin home directory would be referenced as</p>
<p>

%systemname#m1_d01&amp;gt;SysAdmin&amp;gt;Joe_Bean&amp;gt;testfile.txt</p>
<p>

VOS disk allocation  and memory is organised in "blocks", each block being 4,096 bytes. Memory takes the form of RAM or paging. VOS systems support paging partitions and paging files. In modern versions of VOS, paging files can be created dynamically by the SysAdmin (but not removed without a reboot). These paging files can in theory consist of more than one extent (which is viewed by the kernel as a mini-paging partition) which may or may not be contiguous. However, non-contiguous extents are NOT recommended as they greatly increase disk activity. Admin should create the largest possible extent for the paging files as early as possible after the system has been booted.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%229%22])">9</ref></p>

<ss1>
<st>
File system security</st>
<p>

VOS supports write, read, execute, and null access to all files, directories and devices. Access can be assigned to users, groups, or the world. Only read access is required to run an executable program.</p>
<p>

VOS inherited access control lists from <link xlink:type="simple" xlink:href="../847/18847.xml">
multics</link> and also implements directory access control lists. If a file does not have an access control list, the containing directory's default access control list applies.</p>
<p>

Access to devices is typically controlled by creating a file which is linked to the device by the administrator. Access is then given to this file, and this sets the access on the device.</p>
<p>

Access to operating systems commands is controlled by adding the command to a table in the system directory, and defining which users or groups have access to that command. Badly configuring this file has been known to force reboots of systems.</p>

</ss1>
</sec>
<sec>
<st>
See also</st>
<p>

<list>
<entry level="1" type="bullet">

<company wordnetid="108058098" confidence="0.8">
<institution wordnetid="108053576" confidence="0.8">
<link xlink:type="simple" xlink:href="../830/906830.xml">
Stratus Technologies</link></institution>
</company>
</entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../720/2573720.xml">
Fault tolerant</link></entry>
</list>
</p>

</sec>
<sec>
<st>
References</st>

<p>

<reflist>
<entry id="1">
http://www.stratus.com/products/index.htm</entry>
<entry id="2">
ftp://ftp.stratus.com/vos/faq.txt</entry>
<entry id="3">
<weblink xlink:type="simple" xlink:href="ftp://ftp.stratus.com/vos/posix/posix.html">
VOS POSIX and Open-Source Software</weblink></entry>
<entry id="4">
<weblink xlink:type="simple" xlink:href="http://www.stratus.com/products/vos/tech.htm">
Stratus Technologies : Products : Operating Systems : VOS : VOS Technical Specifications</weblink></entry>
<entry id="5">
http://groups.google.ie/group/comp.sys.stratus/browse_thread/thread/521e96daaf84d858?hl=en</entry>
<entry id="6">
http://stratadoc.stratus.com/vos/14.7.1/r285-03/wwhelp/wwhimpl/js/html/wwhelp.htm?context=r285-03&amp;file=ch1r285-03.html</entry>
<entry id="7">
<weblink xlink:type="simple" xlink:href="http://www.stratus.com/products/reference/index.htm">
Stratus Technologies : Client Success Stories</weblink></entry>
<entry id="8">
http://stratadoc.stratus.com/vos/14.7.1/r418-03/wwhelp/wwhimpl/js/html/wwhelp.htm?context=r418-03&amp;file=ch1r418-03.html</entry>
<entry id="9">
http://groups.google.ie/group/comp.sys.stratus/browse_thread/thread/0cd3ca08e000cd2e?hl=en</entry>
</reflist>
</p>

</sec>
<sec>
<st>
External links</st>
<p>

<list>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.stratus.com/">
http://www.stratus.com/</weblink> Stratus Technologies homepage</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://groups.google.com/group/comp.sys.stratus">
http://groups.google.com/group/comp.sys.stratus</weblink> Comp.Sys.Stratus</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://ftp.stratus.com/index.html">
http://ftp.stratus.com/index.html</weblink> Stratus Public FTP Server</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://stratadoc.stratus.com/splash/vos.html">
http://stratadoc.stratus.com/splash/vos.html</weblink> Stratus Documentation Site</entry>
</list>
</p>

</sec>
</bdy>
</O>
</article>
