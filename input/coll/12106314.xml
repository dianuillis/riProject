<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 17.04.2009 01:08:17[mciao0825] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<event  confidence="0.8" wordnetid="100029378">
<rule  confidence="0.8" wordnetid="105846932">
<act  confidence="0.8" wordnetid="100030358">
<psychological_feature  confidence="0.8" wordnetid="100023100">
<procedure  confidence="0.8" wordnetid="101023820">
<activity  confidence="0.8" wordnetid="100407535">
<algorithm  confidence="0.8" wordnetid="105847438">
<header>
<title>Jenkins-Traub algorithm</title>
<id>12106314</id>
<revision>
<id>228523672</id>
<timestamp>2008-07-29T02:34:45Z</timestamp>
<contributor>
<username>Cardamon</username>
<id>2007187</id>
</contributor>
</revision>
<categories>
<category>Numerical analysis</category>
<category>Root-finding algorithms</category>
</categories>
</header>
<bdy>

The <b>Jenkins-Traub algorithm for polynomial zeros</b> is a fast globally convergent iterative method. It has been described as <it>practically a standard in black-box polynomial root-finders</it>.<p>

Given a polynomial <it>P</it>,</p>
<p>

<indent level="1">

<math>P(z)=\sum_{i=0}^na_iz^{n-i}, \quad a_0=1,\quad a_n\ne 0</math>
</indent>

with complex coefficients compute approximations to the <it>n</it> zeros <math>\alpha_1,\alpha_1,\dots,\alpha_n</math> of <it>P</it>(<it>z</it>). 
There is a variation of the Jenkins-Traub algorithm which is faster if the coefficients are real. The Jenkins-Traub algorithm has stimulated considerable research on theory and software for methods of this type.</p>

<sec>
<st>
Overview</st>
<p>

The Jenkins-Traub algorithm is a three-stage process for calculating the zeros of a <link xlink:type="simple" xlink:href="../000/23000.xml">
polynomial</link> with complex coefficents. See Jenkins and <physical_entity wordnetid="100001930" confidence="0.8">
<peer wordnetid="109626238" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<intellectual wordnetid="109621545" confidence="0.8">
<colleague wordnetid="109935990" confidence="0.8">
<alumnus wordnetid="109786338" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<scholar wordnetid="110557854" confidence="0.8">
<associate wordnetid="109816771" confidence="0.8">
<link xlink:type="simple" xlink:href="../276/7952276.xml">
Traub</link></associate>
</scholar>
</scientist>
</causal_agent>
</alumnus>
</colleague>
</intellectual>
</person>
</peer>
</physical_entity>
<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref> .
A description can also be found in Ralston and <person wordnetid="100007846" confidence="0.9508927676800064">
<mathematician wordnetid="110301261" confidence="0.9173553029164789">
<link xlink:type="simple" xlink:href="../429/15046429.xml">
Rabinowitz</link></mathematician>
</person>
<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%222%22])">2</ref> p. 383.
The algorithm is similar in spirit to the two-stage algorithm studied by Traub<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%223%22])">3</ref>. </p>
<p>

The three-stages of the algorithm are these:
<list>
<entry level="1" type="bullet">

Stage One: No-Shift Process. </entry>
</list>

This stage is not necessary from theoretical considerations alone, but is useful in practice.
<list>
<entry level="1" type="bullet">

Stage Two: Fixed-Shift Process. </entry>
</list>

A sequence of polynomials <math>H^{(\lambda+1)}(z)</math> is generated, <math>\lambda=0,1,\dots,L-1</math>.
<list>
<entry level="1" type="bullet">

Stage Three: Variable-Shift Process. </entry>
</list>

The <math>H^{(\lambda)}(z)</math> are now generated using the variable shifts <math>s_{\lambda}</math> which are generated by </p>
<p>

<indent level="1">

<math>s_{\lambda+1}=s_\lambda- \frac{P(s_\lambda)}{\bar H^{(\lambda+1)}(s_\lambda)}, \quad \lambda=L,L+1,\dots,</math>
</indent>

where <math>\bar H^{(\lambda+1)}(z)</math> is <math>H^{(\lambda)}(z)</math> divided by its leading coefficient.</p>
<p>

It can be shown that provided <it>L</it> is chosen sufficiently large <it>s</it>&amp;lambda; always converges to a zero of <it>P</it>. After an approximate zero has been found the degree of <it>P</it> is reduced by one by deflation and the algorithm is performed on the new polynomial until all the zeros have been computed.</p>
<p>

The algorithm converges for any distribution of zeros. Furthermore, the convergence is faster than the quadratic convergence of Newton-Raphson iteration.</p>

</sec>
<sec>
<st>
What gives the algorithm its power?</st>
<p>

Compare with the <link xlink:type="simple" xlink:href="../145/22145.xml">
Newton-Raphson iteration</link></p>
<p>

<indent level="1">

<math>z_{i+1}=z_i - \frac{P(z_i)}{P^{\prime}(z_i)}.</math>
</indent>

The iteration uses the given <it>P</it> and <math>\scriptstyle P^{\prime}</math>. In contrast the third-stage of Jenkins-Traub</p>
<p>

<indent level="1">

<math>s_{\lambda+1}=s_\lambda- \frac{P(s_\lambda)}{\bar H^{(\lambda+1)}(s_\lambda)}</math>
</indent>

is precisely a Newton-Raphson iteration performed on certain <link xlink:type="simple" xlink:href="../210/361210.xml">
rational functions</link>. More precisely, Newton-Raphson is being performed on a sequence of rational functions </p>
<p>

<indent level="1">

<math>P(z)/H^{(\lambda)}</math>. 
</indent>

For <math>\lambda</math> sufficiently large, </p>
<p>

<indent level="1">

<math>P(z)/H^{(\lambda)}</math>
</indent>

is as close as desired to a first degree polynomial </p>
<p>

<indent level="1">

<math>z-\alpha_1</math>, 
</indent>

where <math>\alpha_1</math> is one of the zeros of <math>P</math>. Even though Stage 3 is precisely a Newton-Raphson iteration, differentiation is not performed.</p>

</sec>
<sec>
<st>
Real coefficients</st>
<p>

The Jenkins-Traub algorithm described earlier works for polynomials with complex coefficients. The same authors also created a three-stage algorithm for polynomials with real coefficients. See Jenkins and Traub <weblink xlink:type="simple" xlink:href="http://links.jstor.org/sici?sici=0036-1429%28197012%297%3A4%3C545%3AATAFRP%3E2.0.CO%3B2-J">
A Three-Stage Algorithm for Real Polynomials Using Quadratic Iteration</weblink>.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%224%22])">4</ref> The algorithm finds either a linear or quadratic factor working completely in real arithmetic. If the complex and real algorithms are applied to the same real polynomial, the real algorithm is about four times as fast. The real algorithm always converges and the rate of convergence is greater than second order.</p>

</sec>
<sec>
<st>
A connection with the shifted QR algorithm</st>
<p>

There is a surprising connection with the shifted QR algorithm for computing matrix eigenvalues. See Dekker and Traub <weblink xlink:type="simple" xlink:href="http://linkinghub.elsevier.com/retrieve/pii/0024379571900358">
The shifted QR algorithm for Hermitian matrices</weblink>.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%225%22])">5</ref> Again the shifts may be viewed as Newton-Raphson iteration on a sequence of rational functions converging to a first degree polynomial.</p>

</sec>
<sec>
<st>
Software and testing</st>
<p>

The software for the Jenkins-traub algorithm was published as Jenkins and Traub <weblink xlink:type="simple" xlink:href="http://portal.acm.org/citation.cfm?id=361262&amp;coll=portal&amp;dl=ACM">
Algorithm 419: Zeros of a Complex Polynomial</weblink>.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%226%22])">6</ref> The software for the real algorithm was published as Jenkins <weblink xlink:type="simple" xlink:href="http://portal.acm.org/citation.cfm?id=355643&amp;coll=ACM&amp;dl=ACM">
Algorithm 493: Zeros of a Real Polynomial</weblink>.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%227%22])">7</ref></p>
<p>

The methods have been extensively tested by many people. As predicted they enjoy faster than quadratic convergence for all distributions of zeros. They have been described as <it>practically a standard in black-box polynomial root finders</it>; see Press, et al., <work wordnetid="104599396" confidence="0.8">
<product wordnetid="104007894" confidence="0.8">
<creation wordnetid="103129123" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<book wordnetid="106410904" confidence="0.8">
<publication wordnetid="106589574" confidence="0.8">
<link xlink:type="simple" xlink:href="../539/632539.xml">
Numerical Recipes</link></publication>
</book>
</artifact>
</creation>
</product>
</work>
,<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%228%22])">8</ref> p. 380. </p>
<p>

However there are polynomials which can cause loss of precision as illustrated by the following example. The polynomial has all its zeros lying on two half-circles of different radii. Wilkinson recommends that it is desirable for stable deflation that smaller zeros be computed first. The second-stage shifts are chosen so that the zeros on the smaller half circle are found first. After deflation the polynomial with the zeros on the half circle is known to be ill-conditioned if the degree is large; see Wilkinson,<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%229%22])">9</ref> p. 64. The original polynomial was of degree 60 and suffered severe deflation instability.</p>

</sec>
<sec>
<st>
References</st>


<p>

<reflist>
<entry id="1">
Jenkins, M. A. and Traub, J. F. (1970), <weblink xlink:type="simple" xlink:href="http://www.springerlink.com/content/q6w17w30035r2152/?p=ae17d723839045be82d270b45363625f&amp;pi=1">
A Three-Stage Variables-Shift Iteration for Polynomial Zeros and Its Relation to Generalized Rayleigh Iteration</weblink>, Numer. Math. 14, 252-263.</entry>
<entry id="2">
Ralston, A. and Rabinowitz, P. (1978), A First Course in Numerical Analysis, 2nd ed., McGraw-Hill, New York.</entry>
<entry id="3">
Traub, J. F. (1966), <weblink xlink:type="simple" xlink:href="http://links.jstor.org/sici?sici=0025-5718(196601)20%3A93%3C113%3AACOGCI%3E2.0.CO%3B2-3">
A Class of Globally Convergent Iteration Functions for the Solution of Polynomial Equations</weblink>, Math. Comp., 20(93), 113-138.</entry>
<entry id="4">
Jenkins, M. A. and Traub, J. F. (1970), <weblink xlink:type="simple" xlink:href="http://links.jstor.org/sici?sici=0036-1429%28197012%297%3A4%3C545%3AATAFRP%3E2.0.CO%3B2-J">
A Three-Stage Algorithm for Real Polynomials Using Quadratic Iteration</weblink>, SIAM J. Numer. Anal., 7(4), 545-566.</entry>
<entry id="5">
Dekker, T. J. and Traub, J. F. (1971), <weblink xlink:type="simple" xlink:href="http://linkinghub.elsevier.com/retrieve/pii/0024379571900358">
The shifted QR algorithm for Hermitian matrices</weblink>, Lin. Algebra Appl., 4(2), 137-154.</entry>
<entry id="6">
 Jenkins, M. A. and Traub, J. F. (1972), <weblink xlink:type="simple" xlink:href="http://portal.acm.org/citation.cfm?id=361262&amp;coll=portal&amp;dl=ACM">
Algorithm 419: Zeros of a Complex Polynomial</weblink>, Comm. ACM, 15, 97-99.</entry>
<entry id="7">
Jenkins, M. A. (1975), <weblink xlink:type="simple" xlink:href="http://portal.acm.org/citation.cfm?id=355643&amp;coll=ACM&amp;dl=ACM">
Algorithm 493: Zeros of a Real Polynomial</weblink>, ACM TOMS, 1, 178-189.</entry>
<entry id="8">
Press, W. H., <physical_entity wordnetid="100001930" confidence="0.8">
<physicist wordnetid="110428004" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<link xlink:type="simple" xlink:href="../784/1778784.xml">
Teukolsky, S. A.</link></scientist>
</causal_agent>
</person>
</physicist>
</physical_entity>
, Vetterling, W. T. and Flannery, B. P. (2002), Numerical Recipes in C++: The Art of Scientific Computing, 2nd. ed., Cambridge University Press, New York.</entry>
<entry id="9">
Wilkinson, J. H. (1963), Rounding Errors in Algebraic Processes, Prentice Hall, Englewood Cliffs, N.J.</entry>
</reflist>
</p>

</sec>
<sec>
<st>
External links</st>
<p>

<list>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://math.fullerton.edu/mathews/n2003/jenkinstraub/JenkinsTraubBib/Links/JenkinsTraubBib_lnk_2.html">
Additional Bibliography for the Jenkins-Traub Method</weblink></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://math.fullerton.edu/mathews/n2003/jenkinstraub/JenkinsTraubBib/Links/JenkinsTraubBib_lnk_1.html">
Internet Resources for the Jenkins-Traub Method</weblink></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.hvks.com/Numerical/winsolve.htm">
A free downloadable Windows application using the Jenkins-Traub Method for polynomials with real and complex coefficients</weblink></entry>
</list>
</p>

</sec>
</bdy>
</algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</article>
