<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 17.04.2009 01:08:19[mciao0825] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>Resource oriented architecture</title>
<id>12107449</id>
<revision>
<id>242166497</id>
<timestamp>2008-10-01T04:31:08Z</timestamp>
<contributor>
<username>SmackBot</username>
<id>433328</id>
</contributor>
</revision>
<categories>
<category>Software architecture</category>
<category>Orphaned articles from September 2008</category>
<category>Neologisms</category>
<category>All orphaned articles</category>
</categories>
</header>
<bdy>

<table class="metadata plainlinks ambox ">
<row>
<col>

ambox-content" style=""</col>
</row>
<row>
<col class="mbox-image"><p>

<image width="40x40px" src="Ambox_content.png">
</image>
</p>
</col>
<col style="" class="mbox-text">
 <b>An editor has expressed concern that this article may be documenting a . </b>
This new term needs . </col>
</row>
</table>

<p>

<table class="metadata plainlinks ambox ">
<row>
<col>

ambox-style" style=""</col>
</row>
<row>
<col class="mbox-image"><p>

<image width="44px" src="Wiki_letter_w.svg">
</image>
</p>
</col>
<col style="" class="mbox-text">
 <b>This article is  as few or no other articles <weblink xlink:type="simple" xlink:href="http://localhost:18088/wiki/index.php?title=Special:Whatlinkshere&amp;target=Resource_oriented_architecture&amp;namespace=0">
link to it</weblink>.</b>
Please help  in articles on <weblink xlink:type="simple" xlink:href="http://www.google.com/search?hl=en&amp;as_qdr=all&amp;q=+site%3Aen.wikipedia.org+%22Resource+oriented+architecture%22">
related topics</weblink>. <it>(September 2008)''</it></col>
</row>
</table>
</p>
<p>


<b>Resource Oriented Architecture</b> (or, ROA) is a specific set of guidelines of an implementation of the <link xlink:type="simple" xlink:href="../222/907222.xml">
REST</link> architecture.</p>
<p>

REST, or Representational State Transfer (see Roy Thomas Fielding's Doctoral Thesis "Architectural Styles and
the Design of Network-based Software Architectures" <weblink xlink:type="simple" xlink:href="http://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm">
http://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm</weblink>), describes a series of architectural constraints that exemplify how the web's design emerged. Various concrete implementations of these ideas have been created throughout time, but it has been difficult to discuss the REST architecture without blurring the lines between actual software, or the architectural principals behind them.</p>
<p>

In Chapter 5 of his thesis, Fielding documents how the world wide web is designed to be constrained by the REST series of limitations. These are still fairly abstract and have been interpreted in various ways in designing new frameworks, systems, and websites. In the past, heated exchanges have been made about whether <message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<link xlink:type="simple" xlink:href="../346/26346.xml">
RPC</link></rule>
</direction>
</protocol>
</message>
-style REST architectures are RESTful.</p>

<sec>
<st>
 Guidelines for Clarification </st>
<p>

The Resource Oriented Architecture documented by Sam Ruby gives concrete advice on specific technical details. Naming these collections of guidelines "Resource Oriented Architecture" may allow developers to discuss the benefits of an architecture in the context of ROA.</p>
<p>

Example guidelines include:
<list>
<entry level="1" type="bullet">

 Query string parameters are appropriate if they are inputs to a Resource which is an algorithm</entry>
<entry level="2" type="bullet">

 Otherwise, these values should be moved into the URI</entry>
<entry level="1" type="bullet">

 Prefer pragmatic uses of putting data into URI, instead of using HTTP Headers</entry>
<entry level="2" type="bullet">

 A resource can use file extension in the URI, instead of Content-Type negotiation</entry>
<entry level="1" type="bullet">

 RPC-style APIs are avoided in favor of Resources and protocols</entry>
<entry level="1" type="bullet">

 A representation of a resource should have many links to the other Resources in the application, so that a client can discover state transitions</entry>
<entry level="1" type="bullet">

 URI templates provide the technology behind specifiying families of URI to clients.</entry>
</list>
</p>

</sec>
<sec>
<st>
 Common Guidelines </st>

<p>

Some guidelines are already common within the larger REST communities:</p>
<p>

<list>
<entry level="1" type="bullet">

 Applications should expose many URIs (possibly an infinite number of them), once for each Resource (any resources in your applications should be unambiguously accessible via a unique URI)</entry>
<entry level="1" type="bullet">

 Cookies representing IDs into a server side session are not RESTFul</entry>
<entry level="1" type="bullet">

 Combinations of resources (i.e. a particular account viewing results a particular database query) can be RESTful if (and only if) the combination can be represented as a URI.</entry>
<entry level="1" type="bullet">

 RESTful URIs should facilitate "cut &amp; paste" (that's the notion of "transfer" of the "representational state")</entry>
</list>
</p>

</sec>
<sec>
<st>
 Existing Frameworks </st>
<p>

RESTful Web Services discusses many software frameworks which provide some or many features of the ROA. These include</p>
<p>

<list>
<entry level="1" type="bullet">

 <link>
Seam Framework</link></entry>
<entry level="1" type="bullet">

 <link>
Jersey JSR-311 or JAX-RS</link></entry>
<entry level="1" type="bullet">

 <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../401/1421401.xml">
Ruby on Rails</link></software>
</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../962/315962.xml">
NetKernel</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../969/854969.xml">
Django</link> and <link xlink:type="simple" xlink:href="../599/3177599.xml">
Turbogears</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../929/15612929.xml">
Restlet</link></entry>
</list>
</p>

</sec>
<sec>
<st>
 Why the Web? </st>
<p>

While REST is a set of architectural guidelines applicable to various types of computing infrastructures, Resource Oriented Architecture (ROA) is only coupled with the web. This architecture is therefore useful mostly to businesses that consider the web as the computing/publishing platform of choice.</p>
<p>

The power of the web seems to mostly reside in its ability to lower the barriers to entry for human users who may not be highly trained in using computing machinery. As such, the web widens the market reach for any business that decides to publish some of its content in electronic format.</p>
<p>

On the web, such published content is regarded as a resource <weblink xlink:type="simple" xlink:href="http://en.wikipedia.org/wiki/Resource_%28Web%29">
http://en.wikipedia.org/wiki/Resource_%28Web%29</weblink>.</p>

</sec>
<sec>
<st>
 The World of Representations </st>
<p>

Humans live in the world of representations. Representation, as a concept, is an attempt (arguably futile) to reach certain acceptable level of objectivity.</p>
<p>

For example, if a person wants to buy a house, that person needs to qualify for a mortgage. If that person explains to the mortgage broker that he has $50,000.00 cash available for the down payment toward purchasing the house, the broker will not go ahead and approve the mortgage, even though the quoted amount would be fully satisfactory. What the mortgage broker needs is a more <it>objective</it> argument that would reassure the issuer that the party asking for the mortgage does indeed have enough money for the down payment.</p>
<p>

But how is the issuer to go about obtaining the more objective proof? Certainly not by going directly into the applicant's safety vault and counting the money deposited there. Instead, the issuer is simply expecting to receive a <it>representation</it> of that person's balance in his bank account.</p>
<p>

That <it>representation</it> projects a sufficient illusion of objectivity, so that the involved parties could sufficiently relax and that the business transaction can eventually take place.</p>
<p>

In the same manner, any transaction that transpires on the web is based on the similar <it>representational</it> logic. The actual resource is never being touched. Instead, various representations of the said resource are being prepared, rendered, and shipped to the clients for consumption. Same as in the real world, where the mortgage issuer will never actually touch client's money, but will instead be satisfied with a mere piece of paper representing the balance, resources on the web never get to be directly manipulated by the clients.</p>

</sec>
</bdy>
</article>
