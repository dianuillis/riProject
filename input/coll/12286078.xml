<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 17.04.2009 01:20:27[mciao0826] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>Workflow application</title>
<id>12286078</id>
<revision>
<id>218129555</id>
<timestamp>2008-06-09T08:21:23Z</timestamp>
<contributor>
<username>Heinovh</username>
<id>214320</id>
</contributor>
</revision>
<categories>
<category>Workflow technology</category>
</categories>
</header>
<bdy>

A <b>workflow application</b> is where various applications, components and people must be involved in the processing of data to complete an instance of a process. For example, consider a purchase order that moves through various departments for authorization and eventual purchase. The orders may be treated as messages, which are put into various queues for processing. It is critical that the state of the queues are captured.  A workflow process involves constant change and update. You can introduce new components into the operation without changing any code.<p>

There are two ways of developing workflow applications. The first one is to design workflow models in a dedicated language and then to link the tasks in these models to worklist handlers (for human tasks) or software applications (for automated tasks). Workflow languages usually come with an associated graphical notation, but some are textual or XML-based. Languages that can be used for workflow definition in this way include:
<list>
<entry level="1" type="bullet">

Dedicated workflow specification languages:</entry>
<entry level="2" type="bullet">

<standard wordnetid="107260623" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../263/4261263.xml">
XPDL</link></system_of_measurement>
</standard>
</entry>
<entry level="2" type="bullet">

<link xlink:type="simple" xlink:href="../131/4838131.xml">
YAWL</link></entry>
<entry level="2" type="bullet">

<link>
SCUFL</link></entry>
<entry level="1" type="bullet">

Executable process definition languages based on <link xlink:type="simple" xlink:href="../483/93483.xml">
Web Service</link>s: </entry>
<entry level="2" type="bullet">

<link xlink:type="simple" xlink:href="../947/334947.xml">
BPEL</link></entry>
<entry level="2" type="bullet">

<link xlink:type="simple" xlink:href="../839/5938839.xml">
BPML</link></entry>
<entry level="2" type="bullet">

<link xlink:type="simple" xlink:href="../126/235126.xml">
WSFL</link></entry>
<entry level="2" type="bullet">

<link xlink:type="simple" xlink:href="../239/4296239.xml">
XLANG</link></entry>
<entry level="2" type="bullet">

<link xlink:type="simple" xlink:href="../136/11441136.xml">
Wf-XML</link></entry>
<entry level="2" type="bullet">

<link>
SWSL</link></entry>
<entry level="1" type="bullet">

<standard wordnetid="107260623" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../359/425359.xml">
Job Definition Format</link></system_of_measurement>
</standard>
s</entry>
</list>
</p>
<p>

Another approach to develop workflow applications is to use a programming language in conjunction with libraries and interfaces that capture abstractions for task coordination. The following are examples of such libraries and interfaces:
<list>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../163/3846163.xml">
Windows Workflow Foundation</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../017/3457017.xml">
Workflow OSID</link></entry>
</list>
</p>
<p>

It is also possible to use languages designed for <link xlink:type="simple" xlink:href="../621/1674621.xml">
business process modeling</link> (e.g. the <link xlink:type="simple" xlink:href="../586/3015586.xml">
Business Process Modeling Notation</link>) to specify workflows. However, to fit the purpose of workflow specification, such notations need to be enhanced with additional constructs to capture data passing, data transformations and routing conditions, to bind tasks to their implementation, etc.. Indeed, business process modeling is about capturing business processes at a higher level of abstraction, in order to enable their analysis through methods such as simulation. Meanwhile, workflow specification is about capturing processes at a level of detail that is sufficient to enable their execution.</p>
<p>

For the purpose of static analysis, e.g. to detect semantic errors at design-time, it is also possible to represent workflow in a mathematical form using formal notations such as <language wordnetid="106282651" confidence="0.8">
<link xlink:type="simple" xlink:href="../192/225192.xml">
Petri net</link></language>
s.</p>


</bdy>
</article>
