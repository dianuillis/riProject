<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 15:26:11[mciao0825] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<event  confidence="0.8" wordnetid="100029378">
<rule  confidence="0.8" wordnetid="105846932">
<act  confidence="0.8" wordnetid="100030358">
<psychological_feature  confidence="0.8" wordnetid="100023100">
<procedure  confidence="0.8" wordnetid="101023820">
<activity  confidence="0.8" wordnetid="100407535">
<algorithm  confidence="0.8" wordnetid="105847438">
<header>
<title>Genetic programming</title>
<id>12424</id>
<revision>
<id>244555761</id>
<timestamp>2008-10-11T12:09:11Z</timestamp>
<contributor>
<username>Diego Moya</username>
<id>124142</id>
</contributor>
</revision>
<categories>
<category>Genetic programming</category>
<category>Intelligence</category>
<category>Evolutionary algorithms</category>
<category>Operations research</category>
<category>Genetic algorithms</category>
<category>Mathematical optimization</category>
</categories>
</header>
<bdy>

In <link xlink:type="simple" xlink:href="../164/1164.xml">
artificial intelligence</link>, <b>genetic programming (GP)</b> is an <link xlink:type="simple" xlink:href="../837/190837.xml">
evolutionary algorithm</link> based methodology <link>
inspired</link> by <link xlink:type="simple" xlink:href="../101/418101.xml">
biological evolution</link> to find <link xlink:type="simple" xlink:href="../783/5783.xml">
computer program</link>s that perform a user-defined task. It is a specialization of <link xlink:type="simple" xlink:href="../254/40254.xml">
genetic algorithms</link> where each individual is a computer program. Therefore it is a <link xlink:type="simple" xlink:href="../488/233488.xml">
machine learning</link> technique used to optimize a population of computer programs according to a <link xlink:type="simple" xlink:href="../599/310599.xml">
fitness landscape</link> determined by a program's ability to perform a given computational task.
<sec>
<st>
 History </st>
<p>

The roots of GP begin with the <link xlink:type="simple" xlink:href="../837/190837.xml">
evolutionary algorithms</link> first utilized by <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<mathematician wordnetid="110301261" confidence="0.8">
<link xlink:type="simple" xlink:href="../217/16752217.xml">
Nils Aall Barricelli</link></mathematician>
</scientist>
</causal_agent>
</person>
</physical_entity>
 in 1954 as applied to evolutionary simulations but <link xlink:type="simple" xlink:href="../837/190837.xml">
evolutionary algorithms</link> became widely recognized as optimization methods as a result of the work of <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<link xlink:type="simple" xlink:href="../355/11554355.xml">
Ingo Rechenberg</link></scientist>
</causal_agent>
</person>
</physical_entity>
 in the 1960s and early 1970s - his group was able to solve complex engineering problems through <link xlink:type="simple" xlink:href="../033/940033.xml">
evolution strategies</link> (1971 PhD thesis and resulting 1973 book). Also highly influential was the work of <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<psychologist wordnetid="110488865" confidence="0.8">
<link xlink:type="simple" xlink:href="../373/1713373.xml">
John Holland</link></psychologist>
</scientist>
</causal_agent>
</person>
</physical_entity>
 in the early 1970s, and particularly his 1975 book. </p>
<p>

The first results on the GP methodology were reported by <link>
Stephen F. Smith</link> (1980)<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref>. In 1981 Forsyth reported the evolution of small programs in forensic science for the UK police. The first statement of modern Genetic Programming (that is, procedural languages organized in tree-based structures and operated on by suitably defined GA-operators) was given by <link>
Nichael L. Cramer</link> (1985),<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%222%22])">2</ref> and independently by <link>
JÃ¼rgen Schmidhuber</link>(1987).  This work was later greatly expanded by <link xlink:type="simple" xlink:href="../867/147867.xml">
John R. Koza</link>, a main proponent of GP who has  pioneered the application of genetic programming in various complex optimization and search problems <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%223%22])">3</ref>.  It should be noted that in his seminal work Koza (1992, see bibliography) posits GP as a generalization of genetic algorithms rather than a specialization.</p>
<p>

GP is very computationally intensive and so in the 1990s it was mainly used to solve relatively simple problems. But more recently, thanks to improvements in GP technology and to the <link xlink:type="simple" xlink:href="../418/39418.xml">
exponential growth in CPU power</link>, GP produced many novel and outstanding results in areas such as <link xlink:type="simple" xlink:href="../220/25220.xml">
quantum computing</link>, electronic design, game playing, <link xlink:type="simple" xlink:href="../656/144656.xml">
sorting</link>, <link xlink:type="simple" xlink:href="../149/19386149.xml">
searching</link> and many more.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%224%22])">4</ref> These results include the replication or development of several post-year-2000 inventions. GP has also been applied to <link xlink:type="simple" xlink:href="../654/783654.xml">
evolvable hardware</link> as well as computer programs. There are several GP patents listed in the web site <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%225%22])">5</ref>.</p>
<p>

Developing a theory for GP has been very difficult and so in the 1990s GP was considered a sort of outcast among search techniques. But after a series of breakthroughs in the early 2000s, the theory of GP has had a formidable and rapid development. So much so that it has been possible to build exact probabilistic models of GP (schema theories and <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<model wordnetid="110324560" confidence="0.8">
<assistant wordnetid="109815790" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../876/60876.xml">
Markov chain</link></causal_agent>
</worker>
</assistant>
</model>
</person>
</physical_entity>
 models). </p>

</sec>
<sec>
<st>
Chromosome representation</st>
<p>

<image width="150px" src="Genetic_Program_Tree.png" type="frame">
<caption>

A function represented as a tree structure
</caption>
</image>

GP evolves computer programs, traditionally represented in memory as <link xlink:type="simple" xlink:href="../821/41821.xml">
tree structure</link>s. Trees can be easily evaluated in a recursive manner. Every tree node has an operator function and every terminal node has an operand, making mathematical expressions easy to evolve and evaluate.  Thus traditionally GP favors the use of <link xlink:type="simple" xlink:href="../015/23015.xml">
programming languages</link> that naturally embody tree structures (for example, <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../016/18016.xml">
Lisp</link></programming_language>
; other <link xlink:type="simple" xlink:href="../933/10933.xml">
functional programming languages</link> are also suitable).</p>
<p>

Non-tree representations have been suggested and successfully implemented, such as the simpler <link xlink:type="simple" xlink:href="../294/1217294.xml">
linear genetic programming</link> which suits the more traditional <link xlink:type="simple" xlink:href="../847/197847.xml">
imperative languages</link> [see, for example, Banzhaf ''et al.'' (1998)]. The commercial GP software Discipulus,<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%226%22])">6</ref> uses AIM, automatic induction of binary machine code<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%227%22])">7</ref> to achieve better performance.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%228%22])">8</ref> MicroGP<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%229%22])">9</ref> uses a representation similar to linear GP to generate programs that fully exploit the syntax of a given <link xlink:type="simple" xlink:href="../368/1368.xml">
assembly language</link>.</p>

</sec>
<sec>
<st>
Genetic operators</st>
<p>

The main operators used in <link xlink:type="simple" xlink:href="../837/190837.xml">
evolutionary algorithms</link> such as GP are crossover and mutation. </p>

<ss1>
<st>
Crossover</st>
<p>

Crossover is applied on an individual by simply switching one of its nodes with another node from another individual in the population. With a tree-based representation, replacing a node means replacing the whole branch. This adds greater effectiveness to the crossover operator. The expressions resulting from crossover are very much different from their initial parents. </p>
<p>

The following code suggests a simple implementation of individual deformation using crossover: </p>
<p>

individual.Children[randomChildIndex] = otherIndividual.Children[randomChildIndex];</p>

</ss1>
<ss1>
<st>
Mutation</st>
<p>

Mutation affects an individual in the population. It can replace a whole node in the selected individual, or it can replace just the node's information. To maintain integrity, operations must be <link xlink:type="simple" xlink:href="../136/41136.xml">
fail-safe</link> or the type of information the node holds must be taken into account.  For example, mutation must be aware of binary operation nodes, or the operator must be able to handle missing values.</p>
<p>

A simple piece of code:</p>
<p>

individual. Information = randomInformation;</p>
<p>

or</p>
<p>

individual = generateNewIndividual;</p>

</ss1>
</sec>
<sec>
<st>
Meta-Genetic Programming</st>

<p>

Meta-Genetic Programming is the proposed <link xlink:type="simple" xlink:href="../464/4615464.xml">
meta learning</link> technique of evolving a genetic programming system using genetic programming itself.  <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2210%22])">10</ref>. It suggests that chromosomes, crossover, and mutation were themselves evolved, therefore like their real life counterparts should be allowed to change on their own rather than being determined by a human programmer.  Meta-GP was proposed by <link>
JÃ¼rgen Schmidhuber</link> in 1987 <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2211%22])">11</ref>; it is a recursive but terminating algorithm, allowing it to avoid infinite recursion.</p>
<p>

Critics of this idea often say this approach is overly broad in scope. However, it might be possible to constrain the fitness criterion onto a general class of results, and so obtain an evolved GP that would more efficiently produce results for sub-classes. This might take the form of a Meta evolved GP for producing human walking algorithms which is then used to evolve human running, jumping, etc. The fitness criterion applied to the Meta GP would simply be one of efficiency.</p>
<p>

For general problem classes there may be no way to show that Meta GP will reliably produce results more efficiently than a created algorithm other than exhaustion. The same holds for standard GP and other search algorithms.</p>

</sec>
<sec>
<st>
 See also </st>
<p>

<list>
<entry level="1" type="bullet">

<link>
Bio-inspired computing</link></entry>
<entry level="1" type="bullet">

<event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../818/1098818.xml">
Gene expression programming</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</entry>
<entry level="1" type="bullet">

<event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../944/3558944.xml">
Genetic representation</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</entry>
<entry level="1" type="bullet">

<event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../640/5609640.xml">
Grammatical evolution</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../254/40254.xml">
Genetic algorithms</link></entry>
</list>
</p>

</sec>
<sec>
<st>
 References and notes </st>
<p>

<reflist>
<entry id="1">
<weblink xlink:type="simple" xlink:href="http://www-2.cs.cmu.edu/~sfs/">
Stephen F. Smith</weblink></entry>
<entry id="2">
<weblink xlink:type="simple" xlink:href="http://www.sover.net/~nichael/nlc-publications/icga85/index.html">
Nichael Cramer's HomePage</weblink></entry>
<entry id="3">
<weblink xlink:type="simple" xlink:href="http://www.genetic-programming.com/">
genetic-programming.com-Home-Page</weblink></entry>
<entry id="4">
<weblink xlink:type="simple" xlink:href="http://www.genetic-programming.com/humancompetitive.html">
humancompetitive</weblink></entry>
<entry id="5">
<weblink xlink:type="simple" xlink:href="http://www.genetic-programming.com/patents.html">
jkpubs2001</weblink></entry>
<entry id="6">
<weblink xlink:type="simple" xlink:href="http://www.aimlearning.com">
Genetic Programming is a powerful regression and classification tool with significant advantages over neural networks, decision trees, support vector machines and robust regression. It is fast, powerful and has a proven track record of results</weblink></entry>
<entry id="7">
(<person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../663/11651663.xml">
Peter Nordin</link></scientist>
</person>
, 1997, Banzhaf et al., 1998, Section 11.6.2-11.6.3)</entry>
<entry id="8">
<weblink xlink:type="simple" xlink:href="http://www.aimlearning.com/aigp31.pdf">
aigp3.dvi</weblink></entry>
<entry id="9">
<weblink xlink:type="simple" xlink:href="http://www.cad.polito.it/research/microgp.html">
Research: MicroGP</weblink></entry>
<entry id="10">
<weblink xlink:type="simple" xlink:href="http://www.helpmefigurethisout.com/">
Welcome to www.helpmefigurethisout.com</weblink></entry>
<entry id="11">
<weblink xlink:type="simple" xlink:href="http://www.idsia.ch/~juergen/diploma.html">
1987 THESIS ON LEARNING HOW TO LEARN, METALEARNING, META GENETIC PROGRAMMING, CREDIT-CONSERVING MACHINE LEARNING ECONOMY</weblink></entry>
</reflist>
</p>

</sec>
<sec>
<st>
 Bibliography </st>
<p>

<list>
<entry level="1" type="bullet">

Banzhaf, W., Nordin, P., Keller, R.E., Francone, F.D. (1998), <it>Genetic Programming: An Introduction: On the Automatic Evolution of Computer Programs and Its Applications</it>, Morgan Kaufmann</entry>
<entry level="1" type="bullet">

Barricelli, Nils Aall (1954), <it>Esempi numerici di processi di evoluzione,</it>  Methodos, pp. 45-68.</entry>
<entry level="1" type="bullet">

Crosby, Jack L. (1973), <it>Computer Simulation in Genetics,</it>  John Wiley &amp; Sons, London.</entry>
<entry level="1" type="bullet">

Cramer, Nichael Lynn (1985), "<weblink xlink:type="simple" xlink:href="http://www.sover.net/~nichael/nlc-publications/icga85/index.html">
A representation for the Adaptive Generation of Simple Sequential Programs</weblink>" in <it>Proceedings of an International Conference on Genetic Algorithms and the Applications</it>, Grefenstette, John J. (ed.), Carnegie Mellon University</entry>
<entry level="1" type="bullet">

Fogel, David B. (2000) <it>Evolutionary Computation: Towards a New Philosophy of Machine Intelligence</it> IEEE Press, New York. </entry>
<entry level="1" type="bullet">

Fogel, David B. (editor) (1998) <it>Evolutionary Computation: The Fossil Record,</it> IEEE Press, New York.</entry>
<entry level="1" type="bullet">

Forsyth, Richard (1981), <weblink xlink:type="simple" xlink:href="http://www.cs.bham.ac.uk/~wbl/biblio/gp-html/kybernetes_forsyth.html">
BEAGLE A Darwinian Approach to Pattern Recognition</weblink> Kybernetes, Vol. 10, pp. 159-166.</entry>
<entry level="1" type="bullet">

Fraser, Alex S. (1957), <it>Simulation of Genetic Systems by Automatic Digital Computers. I. Introduction.</it>  Australian Journal of Biological Sciences  vol. 10  484-491.</entry>
<entry level="1" type="bullet">

Fraser, Alex and Donald Burnell (1970), <it>Computer Models in Genetics,</it>  McGraw-Hill, New York.</entry>
<entry level="1" type="bullet">

Holland, John H (1975), <it>Adaptation in Natural and Artificial Systems</it>, University of Michigan Press, Ann Arbor</entry>
<entry level="1" type="bullet">

Koza, J.R. (1990), <it>Genetic Programming: A Paradigm for Genetically Breeding Populations of Computer Programs to Solve Problems</it>, Stanford University Computer Science Department technical report <weblink xlink:type="simple" xlink:href="http://www.genetic-programming.com/jkpdf/tr1314.pdf">
STAN-CS-90-1314</weblink>. A thorough report, possibly used as a draft to his 1992 book.</entry>
<entry level="1" type="bullet">

Koza, J.R. (1992), <it>Genetic Programming: On the Programming of Computers by Means of Natural Selection</it>, MIT Press</entry>
<entry level="1" type="bullet">

Koza, J.R. (1994), <it>Genetic Programming II: Automatic Discovery of Reusable Programs</it>, MIT Press</entry>
<entry level="1" type="bullet">

Koza, J.R., Bennett, F.H., Andre, D., and Keane, M.A. (1999), <it>Genetic Programming III: Darwinian Invention and Problem Solving</it>, Morgan Kaufmann</entry>
<entry level="1" type="bullet">

Koza, J.R., Keane, M.A., Streeter, M.J., Mydlowec, W., Yu, J., Lanza, G. (2003), <it>Genetic Programming IV: Routine Human-Competitive Machine Intelligence</it>, Kluwer Academic Publishers</entry>
<entry level="1" type="bullet">

Langdon, W. B., Poli, R. (2002), <it>Foundations of Genetic Programming</it>, Springer-Verlag</entry>
<entry level="1" type="bullet">

Nordin, J.P., (1997) Evolutionary Program Induction of Binary Machine Code and its Application. Krehl Verlag, Muenster, Germany.</entry>
<entry level="1" type="bullet">

 <cite style="font-style:normal" class="book">Poli, R., Langdon, W. B., McPhee, N. F.&#32;(2008). A Field Guide to Genetic Programming.&#32;Lulu.com, freely available from the internet. ISBN 978-1-4092-0073-4.</cite>&nbsp;</entry>
<entry level="1" type="bullet">

Rechenberg, I. (1971): Evolutionsstrategie - Optimierung technischer Systeme nach Prinzipien der biologischen Evolution (PhD thesis). Reprinted by Fromman-Holzboog (1973).</entry>
<entry level="1" type="bullet">

 Schmidhuber, J. (1987). Evolutionary principles in self-referential learning. (On learning how to learn: The meta-meta-... hook.) Diploma thesis, Institut f. Informatik, Tech. Univ. Munich.</entry>
<entry level="1" type="bullet">

Smith, S.F. (1980), <it>A Learning System Based on Genetic Adaptive Algorithms</it>, PhD dissertation (University of Pittsburgh)</entry>
<entry level="1" type="bullet">

Smith, Jeff S. (2002), <weblink xlink:type="simple" xlink:href="http://www.softtechdesign.com/GA/EvolvingABetterSolution-GA.html">
Evolving a Better Solution</weblink>, Developers Network Journal, March 2002 issue</entry>
</list>
</p>

</sec>
<sec>
<st>
 External links </st>
<p>

<list>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.gp-field-guide.org.uk/">
A Field Guide to Genetic Programming</weblink> by Poli, Langdon, and McPhee.  Available as a free PDF, or in printed form from Lulu.com.</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://uk.geocities.com/markcsinclair/abstracts.html#aiy97/">
Aymen S Saket &amp; Mark C Sinclair</weblink></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://tech.groups.yahoo.com/group/genetic_programming/">
Mailing list genetic_programming@yahoogroups.com</weblink></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.faqs.org/faqs/ai-faq/genetic/part1/preamble.html">
The Hitch-Hiker's Guide to Evolutionary Computation</weblink></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.genetic-programming.com">
John Koza's Genetic Programming Site</weblink></entry>
<entry level="1" type="bullet">

<link>
JÃ¼rgen Schmidhuber</link>'s <weblink xlink:type="simple" xlink:href="http://www.idsia.ch/~juergen/gp.html">
 GP Site, with pre-Koza GP papers (1987)</weblink></entry>
<entry level="1" type="bullet">

<link>
JÃ¼rgen Schmidhuber</link>'s <weblink xlink:type="simple" xlink:href="http://www.idsia.ch/~juergen/diploma.html">
 Meta-GP thesis (1987)</weblink></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.cs.bham.ac.uk/~wbl/biblio/README.html">
GP bibliography</weblink></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.cs.ucl.ac.uk/staff/W.Langdon/homepages.html">
People who work on GP</weblink></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.it-weise.de/projects/book.pdf">
Global Optimization Techniques and Genetic Programming Applied to Distributed Computing</weblink></entry>
</list>
</p>
<p>

Implementations:
<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://genetic.moonlander.googlepages.com/home">
Online moonlander demo</weblink> (JavaScript)</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.dna-evolutions.com/dnaappletsample.html">
Demo applet of a genetic algorithm solving TSPs and VRPTW problems</weblink> (.NET and Java)</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://uk.geocities.com/markcsinclair/ps/galesia97_aiy.ps.gz">
GP for the Optimization of the European Optical Network, Aymen Saket &amp; Mark C Sinclair</weblink></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.jaga.org">
JAGA - Extensible and pluggable open source API for implementing genetic algorithms and genetic programming applications</weblink> (Java)</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://gpe.sourceforge.net/">
GPE - Framework for conducting experiments in Genetic Programming</weblink> (.NET)</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.lalena.com/ai/ant/">
lalena.com - A Genetic Program for simulating ant food collection behaviors. Free download</weblink> (.NET)</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://dgpf.sourceforge.net/">
DGPF - simple Genetic Programming research system</weblink> (Java)</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://jgap.sourceforge.net">
JGAP - Java Genetic Algorithms and Genetic Programming, an open-source framework</weblink> (Java)</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://cui.unige.ch/spc/tools/n-genes/">
n-genes - Java Genetic Algorithms and Genetic Programming (stack oriented) framework</weblink> (Java)</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://pmdgp.sourceforge.net/">
PMDGP - object oriented framework for solving genetic programming problems</weblink> (C++)</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://drp.rubyforge.org">
DRP - Directed Ruby Programming, Genetic Programming &amp; Grammatical Evolution Library</weblink> (Ruby)</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://gplab.sourceforge.net">
GPLAB - A Genetic Programming Toolbox for MATLAB</weblink> (MATLAB)</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.staff.ncl.ac.uk/d.p.searson/gptips.htm">
GPTIPS - Genetic Programming Tool for MATLAB</weblink> (MATLAB)</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://emergent.brynmawr.edu/pyro/?page=PyroModuleEvolutionaryAlgorithms">
PyRobot - Evolutionary Algorithms (GA + GP) Modules, Open Source</weblink> (Python)</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://perlgp.org">
PerlGP - Grammar-based genetic programming in Perl</weblink> (Perl)</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://lancet.mit.edu/ga/">
GAlib - Object oriented framework with 4 different GA implementations and 4 representation types (arbitrary derivations possible)</weblink> (C++)</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.softtechdesign.com/GA/EvolvingABetterSolution-GA.html">
Java GALib - Source Forge open source Java genetic algorithm library, complete with Javadocs and examples (see bottom of page)</weblink> (Java)</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.cis.nctu.edu.tw/~gis91815/lagep/lagep.html">
LAGEP. Supporting single/multiple population genetic programming to generate mathematical functions. Open Source, OpenMP used.</weblink> (C/C++)</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://hampshire.edu/lspector/push.html">
PushGP, a strongly typed, stack-based genetic programming system that allows GP to manipulate its own code (auto-constructive evolution) </weblink> (Lisp/C++/Javascript/Java)</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.cs.bham.ac.uk/~cmf/GPLib/index.html">
GPLib, a GP library from the University of Birmingham, UK</weblink> (C++)</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://jgprog.sourceforge.net/">
Groovy Java Genetic Programming</weblink> (Java)</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.progranism.com/">
Progranisms, self copying/evolving programs</weblink></entry>
</list>
</p>
<p>

Possibly most used:
<list>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://cs.gmu.edu/~eclab/projects/ecj/">
ECJ - Evolutionary Computation/Genetic Programming research system</weblink> (Java)</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://beagle.sf.net/">
Beagle - Open BEAGLE, a versatile EC framework</weblink> (C++ with STL)</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://eodev.sourceforge.net/">
EO Evolutionary Computation Framework</weblink> (C++ with static polymorphism)</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.cs.ucl.ac.uk/staff/W.Langdon/ftp/weinbenner/gp.html">
GPC++ - Genetic Programming C++ Class Library</weblink> (C++)</entry>
</list>
</p>
<p>

Companies:
<list>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.icuintelligence.com">
ICU Intelligence AB</weblink></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.irobis.com/">
Institute of Robotics in Scandinavia AB (iRobis)</weblink></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.aitellu.com/Aitellu/en">
Aitellu AB</weblink></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.gepsoft.com/">
Gepsoft Limited</weblink></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.aimlearning.com/">
RML Technologies, Inc.</weblink></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.quantumtrader.com/">
Quantum Trader (Trading System application)</weblink></entry>
</list>






</p>

</sec>
</bdy>
</algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</article>
