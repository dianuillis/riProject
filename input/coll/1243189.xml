<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 18:20:31[mciao0827] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<artifact  confidence="0.8" wordnetid="100021939">
<instrumentality  confidence="0.8" wordnetid="103575240">
<device  confidence="0.8" wordnetid="103183080">
<header>
<title>USB mass storage device class</title>
<id>1243189</id>
<revision>
<id>239388899</id>
<timestamp>2008-09-18T22:08:32Z</timestamp>
<contributor>
<username>CommonsDelinker</username>
<id>2304267</id>
</contributor>
</revision>
<categories>
<category>USB</category>
<category>Computer storage devices</category>
</categories>
</header>
<bdy>

The <b>USB mass storage device class</b> or <b>USB MSC</b> or <b>UMS</b> is a set of computing <message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<link xlink:type="simple" xlink:href="../770/630770.xml">
communications protocols</link></rule>
</direction>
</protocol>
</message>
 defined by the <link xlink:type="simple" xlink:href="../157/1460157.xml">
USB Implementers Forum</link> that run on the <bus wordnetid="102924116" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../073/32073.xml">
Universal Serial Bus</link></bus>
. The standard provides an interface to a variety of storage devices.<p>

<image location="right" width="150px" src="USB_flash_drive.jpg" type="thumb">
<caption>

A <artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<medium wordnetid="106254669" confidence="0.8">
<link xlink:type="simple" xlink:href="../414/400414.xml">
USB flash drive</link></medium>
</device>
</instrumentality>
</artifact>
 like this one, will typically implement the USB mass storage device class.
</caption>
</image>
</p>
<p>

Some of the devices which are connected to computers via this standard are:
<list>
<entry level="1" type="bullet">

 external magnetic <link xlink:type="simple" xlink:href="../777/13777.xml">
hard drive</link>s</entry>
<entry level="1" type="bullet">

 external optical drives, including <link xlink:type="simple" xlink:href="../429/6429.xml">
CD</link> and <medium wordnetid="106254669" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../498/11014498.xml">
DVD</link></medium>
 reader and writer drives</entry>
<entry level="1" type="bullet">

 portable <link xlink:type="simple" xlink:href="../595/50595.xml">
flash memory</link> <artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<medium wordnetid="106254669" confidence="0.8">
<link xlink:type="simple" xlink:href="../414/400414.xml">
devices</link></medium>
</device>
</instrumentality>
</artifact>
</entry>
<entry level="1" type="bullet">

 adapters bridging between standard flash <link xlink:type="simple" xlink:href="../855/212855.xml">
memory card</link>s and a USB connection</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../797/52797.xml">
digital camera</link>s</entry>
<entry level="1" type="bullet">

 various <link xlink:type="simple" xlink:href="../424/1247424.xml">
digital audio player</link>s &amp; <link xlink:type="simple" xlink:href="../437/1560437.xml">
portable media player</link>s</entry>
<entry level="1" type="bullet">

 <artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<medium wordnetid="106254669" confidence="0.8">
<link xlink:type="simple" xlink:href="../518/4397518.xml">
Card reader</link></medium>
</instrumentality>
</artifact>
s</entry>
<entry level="1" type="bullet">

 Portable Gaming systems (Nokia N-GAGE/Sony PSP)</entry>
<entry level="1" type="bullet">

 personal data assistants and handheld computers</entry>
<entry level="1" type="bullet">

 some newer mobile phones, such as the <link xlink:type="simple" xlink:href="../807/4226807.xml">
Sony Ericsson K800</link> and <cellular_telephone wordnetid="102992529" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../458/5827458.xml">
K510</link></cellular_telephone>
, <cellular_telephone wordnetid="102992529" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../028/8016028.xml">
Nokia N73</link></cellular_telephone>
, <link xlink:type="simple" xlink:href="../251/5703251.xml">
Nokia E61</link></entry>
</list>
</p>
<p>

Devices which support this standard are referred to as <b>MSC</b> (Mass Storage Class) devices. While MSC is the official abbreviation, <b>UMS</b> (Universal Mass Storage) has become common in on-line jargon.</p>

<sec>
<st>
Operating system support</st>
<p>

Most current mainstream <link xlink:type="simple" xlink:href="../194/22194.xml">
operating system</link>s include support for USB mass storage devices, although support on older systems is available through patches.</p>

<ss1>
<st>
Microsoft Windows</st>

<p>

<version wordnetid="107173585" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../064/34064.xml">
Windows 95</link></version>
 OSR2.1, an update to the operating system, featured very limited support for USB. During that time, no generic USB mass storage driver was produced by Microsoft, even for <version wordnetid="107173585" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../433/75433.xml">
Windows 98</link></version>
.  This meant that a device-specific driver was needed for each type of USB storage device.  Today, generic drivers which support USB flash drives even in Windows 98 are available as free downloads.  By 2000, the problem was almost solved. Products designed for <version wordnetid="107173585" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../458/75458.xml">
Windows Me</link></version>
 and <version wordnetid="107173585" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../941/33941.xml">
Windows 2000</link></version>
 (where a specific driver was required only for rare devices) are only fully corrected in subsequent OSes.  On <version wordnetid="107173585" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../068/208068.xml">
Windows Server 2003</link></version>
, however, a drive letter has to be assigned to it in order to access it. This can be done in Disk Management (under Computer Management (local) | Storage | Disk Management).</p>
<p>

There is no native (supplied by Microsoft) support for USB in <family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../438/33438.xml">
Windows NT</link></family>
, earlier versions of Windows, or <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../027/20027.xml">
MS-DOS</link></O>
, although some third-party solutions exist for each OS.  A third party <weblink xlink:type="simple" xlink:href="http://www.technical-assistance.co.uk/kb/usbmsd98.php">
driver</weblink> for Windows 98 and <version wordnetid="107173585" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../433/75433.xml#xpointer(//*[./st=%22Windows+98+Second+Edition%22])">
Windows 98SE</link></version>
 is also now available. There is also a USB UMS <weblink xlink:type="simple" xlink:href="http://ftp1.digi.com/support/driver/i4usb403.exe">
driver</weblink> for <link xlink:type="simple" xlink:href="../680/795680.xml">
Windows NT 4</link>.<O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../207/99207.xml">
FreeDOS</link></O>
 supports USB mass storage as <link xlink:type="simple" xlink:href="../270/240270.xml">
ASPI</link> devices.</p>
<p>

<O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../656/1275656.xml">
Windows Mobile</link></O>
 supports accessing of the most USB mass storage devices formatted with <link xlink:type="simple" xlink:href="../045/53045.xml">
FAT</link> on devices with USB Host, although portable devices typically cannot provide enough power for <link xlink:type="simple" xlink:href="../379/891379.xml">
disk enclosure</link>s containing hard drives (a 2.5" <link xlink:type="simple" xlink:href="../777/13777.xml">
hard drive</link> typically requires the maximum 2.5&nbsp;<link xlink:type="simple" xlink:href="../112/38112.xml">
W</link> provided by the USB specification). On the other way around, Windows Mobile devices can not show their file systems as a mass storage device unless the device implementer explicitly decides to add such functionality. However, third party applications exist to add MSC emulation to most WM devices (commercial "Softick CardExport" and free "WM5torage"). Generally only memory cards can be exported, and not internal storage memory, due to the complications outlined below.</p>

</ss1>
<ss1>
<st>
Mac OS</st>

<p>

<link xlink:type="simple" xlink:href="../856/856.xml">
Apple Computer</link>'s <link xlink:type="simple" xlink:href="../043/20043.xml">
Mac OS</link> 8.5.1 supports USB mass storage through an optional driver.
Mac OS 9 and <link xlink:type="simple" xlink:href="../640/20640.xml">
Mac OS X</link> support USB mass storage natively.</p>

</ss1>
<ss1>
<st>
Unix-like</st>

<p>

The <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../510/18510.xml">
Linux kernel</link></software>
 has supported USB mass storage devices via a <link>
generic driver</link> since kernel version 2.4 (year 2001), and a <link xlink:type="simple" xlink:href="../566/946566.xml">
backport</link> to kernel 2.2 has also been made. <link xlink:type="simple" xlink:href="../145/46145.xml">
Solaris</link> also supports devices since the 2.8 release and up (year 1998), <link xlink:type="simple" xlink:href="../495/21495.xml">
NetBSD</link> since the 1.5 release and up (year 2000), <platform wordnetid="103961939" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<surface wordnetid="104362025" confidence="0.8">
<horizontal_surface wordnetid="103536348" confidence="0.8">
<link xlink:type="simple" xlink:href="../554/7580554.xml">
FreeBSD</link></horizontal_surface>
</surface>
</artifact>
</platform>
 since the 4.0 release and up (year 2000), and <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../571/18949571.xml">
OpenBSD</link></O>
 since the 2.7 release and up (year 2000).</p>

</ss1>
<ss1>
<st>
AmigaOS</st>

<p>

<O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../304/18933304.xml">
AmigaOS</link></O>
 supports UMASS storage devices through <weblink xlink:type="simple" xlink:href="http://platon42.de/poseidon.html">
Poseidon</weblink>, a third-party USB stack which has become a de facto standard. It supports various USB device types through a modular system of Hardware Independent Device Driver (HIDD) classes. Poseidon as used in AmigaOS Classic up to version 4.0, and in the <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../521/263521.xml">
MorphOS</link></O>
 operating system. The supposedly final AmigaOS version of the Poseidon stack is released OEM licensed with the Deneb USB card in May 2008.
AmigaOS 4.0 has its own USB stack called <link>
Sirion</link>, though it can still use Poseidon.
A new USB stack called <weblink xlink:type="simple" xlink:href="http://utilitybase.com/projects/anaiis">
ANAIIS</weblink> (Another Native Amiga IO Interface Stack) is available for all Amiga platforms with Highway or Subway hardware, but does not yet support UMASS.</p>
<p>

FAT16 and FAT32 filesystems are supported by the <link>
FAT95</link> filesystem.</p>
<p>

<link xlink:type="simple" xlink:href="../614/11193614.xml">
AROS</link>, an <link xlink:type="simple" xlink:href="../758/18938758.xml">
Open Source</link> AmigaOS clone for <link xlink:type="simple" xlink:href="../617/14617.xml">
Intel</link> based PCs, does support UHCI and OHCI USB root hubs (since May 2007) but does not yet support USB mass storage class.</p>

</ss1>
<ss1>
<st>
Game consoles</st>

<p>

The <system wordnetid="104377057" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../833/7514833.xml">
Xbox 360</link></system>
 and <system wordnetid="104377057" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../951/24951.xml">
PlayStation 3</link></system>
 support most mass storage devices.</p>

</ss1>
<ss1>
<st>
Graphing Calculators</st>

<p>

Independent developers have released drivers for the <link xlink:type="simple" xlink:href="../169/615169.xml">
TI-84 Plus</link> and <link xlink:type="simple" xlink:href="../169/615169.xml">
TI-84 Plus Silver Edition</link> in order to access USB mass storage devices. <link xlink:type="simple" xlink:href="../689/2492689.xml">
usb8x</link> contains the driver for this access, while <link>
msd8x</link> handles the user interface.</p>

</ss1>
</sec>
<sec>
<st>
Device access</st>

<p>

<image location="right" width="150px" src="Usbcardreader.png" type="thumb">
<caption>

A USB <artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<medium wordnetid="106254669" confidence="0.8">
<link xlink:type="simple" xlink:href="../518/4397518.xml">
Card reader</link></medium>
</instrumentality>
</artifact>
 like this one, will typically implement the USB mass storage device class.
</caption>
</image>
</p>
<p>

The USB mass storage specification does not require any particular <link xlink:type="simple" xlink:href="../280/1010280.xml">
file system</link> to be used on conforming devices.  Instead, it provides a simple interface to read and write sectors of data&mdash;much like the low-level interface used to access any <link xlink:type="simple" xlink:href="../777/13777.xml">
hard drive</link>&mdash;using the "<link xlink:type="simple" xlink:href="../313/28313.xml">
SCSI</link> transparent command set."  Operating systems may treat the USB drive like a hard drive, and can format it with any file system they like.</p>
<p>

Because of its ubiquity and relative simplicity, the most common file system on <link xlink:type="simple" xlink:href="../630/46630.xml">
embedded devices</link> such as <artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<medium wordnetid="106254669" confidence="0.8">
<link xlink:type="simple" xlink:href="../414/400414.xml">
USB flash drive</link></medium>
</device>
</instrumentality>
</artifact>
s, cameras, or digital audio players is Microsoft's <link xlink:type="simple" xlink:href="../045/53045.xml">
FAT</link> or <link>
FAT32</link> file system with (optional) <link xlink:type="simple" xlink:href="../045/53045.xml">
support for long names</link>. Large USB-based hard disks may come formatted with <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../184/39184.xml">
NTFS</link></instrumentality>
</artifact>
</system>
, which is much less supported outside <link xlink:type="simple" xlink:href="../890/18890.xml">
Microsoft Windows</link>.  However, a <link xlink:type="simple" xlink:href="../414/400414.xml">
keydrive</link> or any other device may be formatted using another filesystem (for example <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../752/927752.xml">
HFS Plus</link></instrumentality>
</artifact>
</system>
 on an <link xlink:type="simple" xlink:href="../979/19006979.xml">
Apple Macintosh</link>, or <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../194/39194.xml">
Ext2</link></instrumentality>
</artifact>
</system>
 under <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../297/6097297.xml">
Linux</link></O>
, or <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../992/250992.xml">
Unix File System</link></instrumentality>
</artifact>
</system>
 under <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../145/46145.xml">
Solaris</link></database>
</wordnet>
</lexical_database>
</electronic_database>
</information>
</message>
 or BSD).  Of course, this choice may limit other operating systems' ability to access the contents of the device.</p>
<p>

In cameras, MP3 players, and similar gadgets which must access the file system independently from an external host, the FAT filesystem is typically preferred by device manufacturers.</p>

</sec>
<sec>
<st>
Complications of the mass-storage device class</st>

<p>

The mass storage interface is an attractive option for many devices, such as cameras and media players, which are nonetheless capable of more functionality than being simple data repositories.  By presenting themselves as simple datastores, these devices can take advantage of the high degree of support for the USB mass-storage device class in current operating systems' USB driver stacks and allow easy read and write access to their internal memories.  The downside of doing so is that it prevents the device from easily presenting its actual functional behavior across the USB interface too.  For example, the makers of a digital still camera would also like it to implement the <link xlink:type="simple" xlink:href="../180/1032180.xml">
USB still-image device class</link>, allowing it to be controlled by image capture software.</p>
<p>

Some USB digital cameras feature a switch allowing them to appear either as a mass-storage device or as a still-picture device (<link xlink:type="simple" xlink:href="../384/648384.xml">
PictBridge</link> or <message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<link xlink:type="simple" xlink:href="../180/1032180.xml">
PTP</link></rule>
</direction>
</protocol>
</message>
), but they cannot be both at the same time because file system layers in operating systems usually assume that they are the only user. As a result of this, the PTP implementation in the device would be unable to change the underlying filesystem without making the host's operating system's notion of the changed sectors inconsistent.</p>

<ss1>
<st>
 Flash-based devices </st>
<p>

Disk <link xlink:type="simple" xlink:href="../280/1010280.xml">
file system</link>s were not devised with <link xlink:type="simple" xlink:href="../595/50595.xml">
flash memory</link> in mind.
Flash-specific concerns like <link xlink:type="simple" xlink:href="../595/50595.xml#xpointer(//*[./st=%22Limitations%22])">
limited number of writes per cell</link> can be affected by a write-heavy <link xlink:type="simple" xlink:href="../280/1010280.xml">
file system</link>, causing flash memory manufacturers to reserve about 5 percent of each medium's capacity for <link xlink:type="simple" xlink:href="../505/343505.xml">
wear leveling</link>.
On the other hand, issues such as <link xlink:type="simple" xlink:href="../369/3909369.xml">
fragmentation</link> or contiguity which affect magnetic disk performance are irrelevant in flash, because they impose no appreciable <link xlink:type="simple" xlink:href="../558/14558.xml">
I/O</link> <link xlink:type="simple" xlink:href="../192/28192.xml">
seeking delay</link>s. However, fragmentation may lead to reduced performance with file systems that use <link xlink:type="simple" xlink:href="../756/1721756.xml">
extent</link>s.</p>

</ss1>
<ss1>
<st>
 Hard drive-based devices </st>
<p>

Many modern hard drives support additional advanced commands, such as <link xlink:type="simple" xlink:href="../704/1046704.xml">
Native Command Queuing</link>, which may increase performance, and <link xlink:type="simple" xlink:href="../280/634280.xml">
S.M.A.R.T.</link>, which allows a computer to measure various indicators of drive reliability.  These exist as extensions to the basic low-level command sets used by hard drives, such as <link xlink:type="simple" xlink:href="../313/28313.xml">
SCSI</link>, <link xlink:type="simple" xlink:href="../151/174151.xml">
SATA</link>, or <link xlink:type="simple" xlink:href="../413/1855413.xml">
PATA</link>.</p>
<p>

These features do not work when hard drives are encapsulated in a <link xlink:type="simple" xlink:href="../379/891379.xml">
disk enclosure</link> supporting the USB mass storage interface.  USB mass storage provides a <it>generic</it> interface which only provides basic read/write commands, as outlined above.  This works perfectly well for basic data transfer using hard drive-based devices, however it means that there is no simple way to send advanced, device-specific commands to USB mass storage devices (although devices may create their own communication protocols over the <link>
USB</link>-standard "control interface").</p>
<p>

The new <link>
eSATA</link> standard for external drives promises to address this issue, since it extends the internal SATA bus to external disks without any intermediate translation layer.</p>

</ss1>
</sec>
<sec>
<st>
See also</st>
<p>

<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../155/1845155.xml">
Disk encryption software</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../619/1096619.xml">
Media Transfer Protocol</link></entry>
<entry level="1" type="bullet">

 <message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<link xlink:type="simple" xlink:href="../180/1032180.xml">
Picture Transfer Protocol</link></rule>
</direction>
</protocol>
</message>
</entry>
<entry level="1" type="bullet">

 <artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<medium wordnetid="106254669" confidence="0.8">
<link xlink:type="simple" xlink:href="../414/400414.xml">
USB flash drive</link></medium>
</device>
</instrumentality>
</artifact>
</entry>
</list>
</p>

</sec>
<sec>
<st>
External links</st>
<p>

<list>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.technical-assistance.co.uk/kb/usbmsd98.php">
Installing USB Mass Storage Devices on Windows 98</weblink> - Generic driver download for Windows 98SE to allow USB mass storage devices to work</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.lvr.com/mass_storage.htm">
Jan Axelson's Usb Mass Storage article &amp; book</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.usb.org/developers/devclass_docs/usb_msc_overview_1.2.pdf">
Mass Storage device class specification</weblink> — on the site of the USB Implementers Forum.</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.usb.org/developers/devclass_docs/usb_msc_boot_1.0.pdf">
Bootability specification Mass Storage bootability specification</weblink> — describes how bootable USB Mass Storage devices should work.</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.usb.org/developers/devclass_docs/usbmassbulk_10.pdf">
"USB Mass Storage BOT" </weblink> is a link that often rots, lately found buried at <weblink xlink:type="simple" xlink:href="http://usb.org">
"USB"</weblink> -&amp;gt; Developers -&amp;gt; Documents -&amp;gt; Class Specs -&amp;gt; Approved -&amp;gt; Mass Storage -&amp;gt; "Mass Storage Bulk Only 1.0".</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.microsoft.com/whdc/device/storage/usbfaq.mspx">
"Microsoft USB Storage FAQ"</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.kernel.org/git/?p=linux/kernel/git/torvalds/linux-2.6.git;a=blob;f=drivers/usb/gadget/file_storage.c">
USB Mass Storage Device Source Code in Linux</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.kernel.org/git/?p=linux/kernel/git/torvalds/linux-2.6.git;a=tree;f=drivers/usb/storage">
USB Mass Storage Host Source Code in Linux</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://marketingasolicitor.com/?p=121">
Using a USB Mass Storage Device with an Xbox 360</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.usb-server.com/usb-client.html">
USB Server</weblink></entry>
</list>
</p>


</sec>
</bdy>
</device>
</instrumentality>
</artifact>
</article>
