<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 17.04.2009 01:34:31[mciao0827] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<event  confidence="0.8" wordnetid="100029378">
<rule  confidence="0.8" wordnetid="105846932">
<act  confidence="0.8" wordnetid="100030358">
<psychological_feature  confidence="0.8" wordnetid="100023100">
<procedure  confidence="0.8" wordnetid="101023820">
<activity  confidence="0.8" wordnetid="100407535">
<algorithm  confidence="0.8" wordnetid="105847438">
<header>
<title>Fisher-Yates shuffle</title>
<id>12684962</id>
<revision>
<id>243521765</id>
<timestamp>2008-10-06T21:42:56Z</timestamp>
<contributor>
<username>Not-just-yeti</username>
<id>1452387</id>
</contributor>
</revision>
<categories>
<category>Combinatorial algorithms</category>
<category>Randomness</category>
<category>Articles with example Java code</category>
<category>Permutations</category>
</categories>
</header>
<bdy>

The <b>Fisher-Yates shuffle</b>, named after <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../824/140824.xml">
Ronald Fisher</link></scientist>
</person>
 and <physical_entity wordnetid="100001930" confidence="0.8">
<president wordnetid="110468559" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<adult wordnetid="109605289" confidence="0.8">
<professional wordnetid="110480253" confidence="0.8">
<educator wordnetid="110045713" confidence="0.8">
<executive wordnetid="110069645" confidence="0.8">
<statistician wordnetid="110653238" confidence="0.8">
<administrator wordnetid="109770949" confidence="0.8">
<leader wordnetid="109623038" confidence="0.8">
<corporate_executive wordnetid="109966255" confidence="0.8">
<academician wordnetid="109759069" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<head wordnetid="110162991" confidence="0.8">
<mathematician wordnetid="110301261" confidence="0.8">
<research_worker wordnetid="110523076" confidence="0.8">
<link xlink:type="simple" xlink:href="../733/165733.xml">
Frank Yates</link></research_worker>
</mathematician>
</head>
</causal_agent>
</academician>
</corporate_executive>
</leader>
</administrator>
</statistician>
</executive>
</educator>
</professional>
</adult>
</scientist>
</person>
</president>
</physical_entity>
, also known as the <b>Knuth shuffle</b>, after <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../095/8095.xml">
Donald Knuth</link></scientist>
</person>
, is an <link xlink:type="simple" xlink:href="../775/775.xml">
algorithm</link> for generating a <link xlink:type="simple" xlink:href="../236/1493236.xml">
random permutation</link> of a <link xlink:type="simple" xlink:href="../742/11742.xml">
finite set</link>—in plain terms, for randomly <link xlink:type="simple" xlink:href="../189/23189.xml">
shuffling</link> the set.  A variant of the Fisher-Yates shuffle, known as <b>Sattolo's algorithm</b>, may be used to generate <link xlink:type="simple" xlink:href="../166/449166.xml">
cyclic permutation</link>s instead.  Properly implemented, the Fisher-Yates shuffle is <link xlink:type="simple" xlink:href="../099/184099.xml">
unbiased</link>, so that every permutation is equally likely.  The modern version of the algorithm is also rather efficient, requiring only time proportional to the number of items being shuffled and no additional storage space.<p>

The basic process of Fisher-Yates shuffling is similar to randomly picking numbered tickets out of a hat, or cards from a deck, one after another until there are no more left.  What the specific algorithm provides is a way of doing this numerically in an efficient and rigorous manner that, properly done, guarantees an unbiased result.</p>

<sec>
<st>
 Fisher and Yates' original method </st>

<p>

The Fisher-Yates shuffle, in its original form, was described in 1938 by <link xlink:type="simple" xlink:href="../824/140824.xml">
Ronald A. Fisher</link> and <physical_entity wordnetid="100001930" confidence="0.8">
<president wordnetid="110468559" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<adult wordnetid="109605289" confidence="0.8">
<professional wordnetid="110480253" confidence="0.8">
<educator wordnetid="110045713" confidence="0.8">
<executive wordnetid="110069645" confidence="0.8">
<statistician wordnetid="110653238" confidence="0.8">
<administrator wordnetid="109770949" confidence="0.8">
<leader wordnetid="109623038" confidence="0.8">
<corporate_executive wordnetid="109966255" confidence="0.8">
<academician wordnetid="109759069" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<head wordnetid="110162991" confidence="0.8">
<mathematician wordnetid="110301261" confidence="0.8">
<research_worker wordnetid="110523076" confidence="0.8">
<link xlink:type="simple" xlink:href="../733/165733.xml">
Frank Yates</link></research_worker>
</mathematician>
</head>
</causal_agent>
</academician>
</corporate_executive>
</leader>
</administrator>
</statistician>
</executive>
</educator>
</professional>
</adult>
</scientist>
</person>
</president>
</physical_entity>
 in their book <it>Statistical tables for biological, agricultural and medical research</it>.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref>  (Later editions describe a somewhat different method attributed to <link xlink:type="simple" xlink:href="../009/1418009.xml">
C. R. Rao</link>.)  Their method was designed to be implemented using pencil and paper, with a precomputed table of random numbers as the source of randomness.  The basic method given for generating a random permutation of the numbers 1–<it>N</it> goes as follows:</p>
<p>

<list>
<entry level="1" type="number">

 Write down the numbers from one to <it>N</it>.</entry>
<entry level="1" type="number">

 Pick a random number <it>k</it> between one and the number of unstruck numbers remaining (inclusive).</entry>
<entry level="1" type="number">

 Counting from the low end, strike out the <it>k</it>th number not yet struck out, and write it down elsewhere.</entry>
<entry level="1" type="number">

 Repeat from step 2 until all the numbers have been struck out.</entry>
<entry level="1" type="number">

 The sequence of numbers written down in step 3 is now a random permutation of the original numbers.</entry>
</list>
</p>
<p>

Provided that the random numbers picked in step 2 above are truly random and unbiased, so will the resulting permutation be.  Fisher and Yates took care to describe how to obtain such random numbers in any desired range from the supplied tables in a manner which avoids any bias.  They also suggested the possibility of using a simpler method — picking random numbers from one to <it>N</it> and discarding any duplicates—to generate the first half of the permutation, and only applying the more complex algorithm to the remaining half, where picking a duplicate number would otherwise become frustratingly common.</p>

</sec>
<sec>
<st>
 The modern algorithm </st>

<p>

The modern version of the Fisher-Yates shuffle, designed for computer use, was introduced by <link>
Richard Durstenfeld</link> in 1964 in <it><work wordnetid="104599396" confidence="0.8">
<product wordnetid="104007894" confidence="0.8">
<creation wordnetid="103129123" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<periodical wordnetid="106593296" confidence="0.8">
<publication wordnetid="106589574" confidence="0.8">
<link xlink:type="simple" xlink:href="../161/291161.xml">
Communications of the ACM</link></publication>
</periodical>
</artifact>
</creation>
</product>
</work>
</it> volume 7, issue 7, as "Algorithm 235: Random permutation",<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%222%22])">2</ref> and was popularized by <link xlink:type="simple" xlink:href="../095/8095.xml">
Donald E. Knuth</link> in volume 2 of his book <it><work wordnetid="104599396" confidence="0.8">
<product wordnetid="104007894" confidence="0.8">
<creation wordnetid="103129123" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<book wordnetid="106410904" confidence="0.8">
<publication wordnetid="106589574" confidence="0.8">
<link xlink:type="simple" xlink:href="../358/31358.xml">
The Art of Computer Programming</link></publication>
</book>
</artifact>
</creation>
</product>
</work>
</it> as "Algorithm P".<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%223%22])">3</ref>  Neither Durstenfeld nor Knuth, in the first edition of his book, acknowledged the earlier work of Fisher and Yates in any way, and may not have been aware of it.  Subsequent editions of <it>The Art of Computer Programming</it> do, however, mention Fisher and Yates' contribution.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%224%22])">4</ref></p>
<p>

The algorithm described by Durstenfeld differs from that given by Fisher and Yates in a small but significant way.  Whereas a naive computer implementation of Fisher and Yates' method would spend needless time counting the remaining numbers in step 3 above, Durstenfeld's solution is to move the "struck" numbers to the end of the list by swapping them with the last unstruck number at each iteration.  This reduces the algorithm's <link xlink:type="simple" xlink:href="../543/7543.xml">
time complexity</link> to <it>O</it>(<it>n</it>), compared to <it>O</it>(<it>n</it>2) for the naive implementation.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%225%22])">5</ref>   The algorithm thus becomes, for a set of N elements:</p>
<p>

<list>
<entry level="1" type="number">

 Let <it>A</it>1 := 1, <it>A</it>2 := 2 and so on up to <it>AN</it> := <it>N</it>, and let <it>n</it> := <it>N</it>.</entry>
<entry level="1" type="number">

 Pick a random number <it>k</it> between 1 and <it>n</it> inclusive.</entry>
<entry level="1" type="number">

 If <it>k</it> ≠ <it>n</it>, swap the values of <it>Ak</it> and <it>An</it>.</entry>
<entry level="1" type="number">

 Decrease <it>n</it> by one.</entry>
<entry level="1" type="number">

 Repeat from step 2 until <it>n</it> is less than 2.</entry>
</list>
</p>
<p>

The Fisher-Yates shuffle, as implemented by Durstenfeld, is an <it>in-place shuffle</it>.  That is, given a preinitialized array, it shuffles the elements of the array in place, rather than producing a shuffled copy of the array.  This can be an advantage if the array to be shuffled is large.  An example implementation of Durstenfeld's algorithm in <message wordnetid="106598915" confidence="0.8">
<request wordnetid="106513366" confidence="0.8">
<link xlink:type="simple" xlink:href="../881/15881.xml">
Java</link></request>
</message>
 (with <link xlink:type="simple" xlink:href="../052/2052.xml#xpointer(//*[./st=%22Index+of+the+first+element%22])">
0-based arrays</link>) is:</p>

<p>

public static void shuffle (int array) 
{
Random rng = new Random();   // i.e., java.util.Random.
int n = array.length;        // The number of items left to shuffle (loop invariant).
while (n &amp;gt; 1) 
{
int k = rng.nextInt(n);  // 0 = k  n.
n--;                     // n is now the last pertinent index;
int temp = array[n];     // swap array[n] with array[k] (does nothing if k == n).
array[n] = array[k];
array[k] = temp;
}
}</p>

<p>

The implementation above relies on Random.nextInt(<it>int</it>) providing sufficiently random and unbiased results; see below for potential problems if this is not the case.</p>

</sec>
<sec>
<st>
 Examples </st>


<ss1>
<st>
 Pencil-and-paper method </st>

<p>

As an example, we'll permute the numbers from 1 to 8 using <link xlink:type="simple" xlink:href="#xpointer(//*[./st=%22Fisher+and+Yates'+original+method%22])">
Fisher and Yates' original method</link>.  We'll start by writing the numbers out on a piece of scratch paper:</p>
<p>

<table class="wikitable">
<header>
Range</header>
<header>
Roll</header>
<header>
Scratch</header>
<header>
Result</header>
<row>
<col>
&nbsp;</col>
<col>
&nbsp;</col>
<col>
1 2 3 4 5 6 7 8</col>
<col>
&nbsp;</col>
</row>
</table>
</p>
<p>

Now we roll a random number <it>k</it> from 1 to 8—let's make it 3—and strike out the <it>k</it>th (i.e. third) number (3, of course) on the scratch pad and write it down as the result:</p>
<p>

<table class="wikitable">
<header>
Range</header>
<header>
Roll</header>
<header>
Scratch</header>
<header>
Result</header>
<row>
<col>
1–8</col>
<col>
3</col>
<col>
1 2 3 4 5 6 7 8</col>
<col>
3</col>
</row>
</table>
</p>
<p>

Now we pick a second random number, this time from 1 to 7: it turns out to be 4.  Now we strike out the fourth number <it>not yet struck</it> off the scratch pad—that's number 5—and add it to the result:</p>
<p>

<table class="wikitable">
<header>
Range</header>
<header>
Roll</header>
<header>
Scratch</header>
<header>
Result</header>
<row>
<col>
1–7</col>
<col>
4</col>
<col>
1 2 3 4 5 6 7 8</col>
<col>
3 5</col>
</row>
</table>
</p>
<p>

Now we pick the next random number from 1 to 6, and then from 1 to 5, and so on, always repeating the strike-out process as above:</p>
<p>

<table class="wikitable">
<header>
Range</header>
<header>
Roll</header>
<header>
Scratch</header>
<header>
Result</header>
<row>
<col>
1–6</col>
<col>
5</col>
<col>
1 2 3 4 5 6 7 8</col>
<col>
3 5 7</col>
</row>
<row>
<col>
1–5</col>
<col>
3</col>
<col>
1 2 3 4 5 6 7 8</col>
<col>
3 5 7 4</col>
</row>
<row>
<col>
1–4</col>
<col>
4</col>
<col>
1 2 3 4 5 6 7 8</col>
<col>
3 5 7 4 8</col>
</row>
<row>
<col>
1–3</col>
<col>
1</col>
<col>
1 2 3 4 5 6 7 8</col>
<col>
3 5 7 4 8 1</col>
</row>
<row>
<col>
1–2</col>
<col>
2</col>
<col>
1 2 3 4 5 6 7 8</col>
<col>
3 5 7 4 8 1 6</col>
</row>
<row>
<col>
&nbsp;</col>
<col>
&nbsp;</col>
<col>
1 2 3 4 5 6 7 8</col>
<col>
3 5 7 4 8 1 6 2</col>
</row>
</table>
</p>

</ss1>
<ss1>
<st>
 Modern method </st>

<p>

We'll now do the same thing using <link xlink:type="simple" xlink:href="#xpointer(//*[./st=%22The+modern+algorithm%22])">
Durstenfeld's version</link> of the algorithm: this time, instead of striking out the chosen numbers and copying them elsewhere, we'll swap them with the last number not yet chosen.  We'll start by writing out the numbers from 1 to 8 as before.  For clarity, we'll use a vertical bar (&#124;) to separate the part of the list that has already been processed from the part that hasn't been permuted yet; of course, no such separator is actually used in the real algorithm:</p>
<p>

<table class="wikitable">
<header>
Range</header>
<header>
Roll</header>
<header>
Scratch &#124; Result</header>
<row>
<col>
&nbsp;</col>
<col>
&nbsp;</col>
<col>
1 2 3 4 5 6 7 8 &#124;</col>
</row>
</table>
</p>
<p>

For our first roll, we roll a random number from 1 to 8: this time it's 6, so we swap the 6th and 8th numbers in the list:</p>
<p>

<table class="wikitable">
<header>
Range</header>
<header>
Roll</header>
<header>
Scratch &#124; Result</header>
<row>
<col>
1–8</col>
<col>
6</col>
<col>
1 2 3 4 5 <b>8</b> 7 &#124; <b>6</b></col>
</row>
</table>
</p>
<p>

The next random number we roll from 1 to 7, and turns out to be 2.  Thus, we swap the 2nd and 7th numbers and move on:</p>
<p>

<table class="wikitable">
<header>
Range</header>
<header>
Roll</header>
<header>
Scratch &#124; Result</header>
<row>
<col>
1–7</col>
<col>
2</col>
<col>
1 <b>7</b> 3 4 5 8 &#124; <b>2</b> 6</col>
</row>
</table>
</p>
<p>

The next random number we roll is from 1 to 6, and just happens to be 6, which means we leave the 6th number in the list (which, after the swap above, is now number 8) in place and just move to the next step.  Again, we proceed the same way until the permutation is complete:</p>
<p>

<table class="wikitable">
<header>
Range</header>
<header>
Roll</header>
<header>
Scratch &#124; Result</header>
<row>
<col>
1–6</col>
<col>
6</col>
<col>
1 7 3 4 5 &#124; <b>8</b> 2 6</col>
</row>
<row>
<col>
1–5</col>
<col>
1</col>
<col>
<b>5</b> 7 3 4 &#124; <b>1</b> 8 2 6</col>
</row>
<row>
<col>
1–4</col>
<col>
3</col>
<col>
5 7 <b>4</b> &#124; <b>3</b> 1 8 2 6</col>
</row>
<row>
<col>
1–3</col>
<col>
3</col>
<col>
5 7 &#124; <b>4</b> 3 1 8 2 6</col>
</row>
<row>
<col>
1–2</col>
<col>
1</col>
<col>
<b>7</b> &#124; <b>5</b> 4 3 1 8 2 6</col>
</row>
</table>
</p>
<p>

At this point there's nothing more that can be done, so the resulting permutation is 7 5 4 3 1 8 2 6.</p>

</ss1>
</sec>
<sec>
<st>
 Variants </st>


<ss1>
<st>
 Sattolo's algorithm </st>

<p>

A very similar algorithm was published in 1986 by <link>
Sandra Sattolo</link> for generating uniformly distributed <link xlink:type="simple" xlink:href="../166/449166.xml">
cyclic permutation</link>s.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%226%22])">6</ref>  The only difference between Durstenfeld's and Sattolo's algorithms is that in the latter, in step 2 above, the random number <it>k</it> is chosen from the range between 1 and <it>n</it>−1 (rather than between 1 and <it>n</it>) inclusive.  To turn the Java example above into an example of Sattolo's algorithm, simply replace rng.nextInt(n) with rng.nextInt(n-1) in the code.  This simple change modifies the algorithm so that the resulting permutation always consists of a single cycle.</p>
<p>

In fact, as described below, it's quite easy to <it>accidentally</it> implement Sattolo's algorithm when the ordinary Fisher-Yates shuffle is intended.  This will bias the results by causing the permutations to be picked from the smaller set of (<it>N</it>−1)! cyclic permutations instead of the full set of all <it>N</it>! possible permutations.</p>
<p>

The fact that Sattolo's algorithm in fact produces a cyclic permutation, and that it produces each such permutation with equal probability, may not be immediately obvious.  The former can be shown inductively:  Assume that, before step 2 of the modified algorithm, the permutation has <it>n</it> distinct cycles, each containing exactly one member <it>Ai</it> for which <it>i</it> ≤ <it>n</it>.  This is clearly true at the start, when <it>Ai</it> = <it>i</it> for all 1 ≤ <it>i</it> ≤ <it>N</it>, and <it>n</it> = <it>N</it>.  Given the assumption, for any randomly chosen <it>k</it>  <it>n</it>, <it>An</it> and <it>Ak</it> must belong to distinct cycles, and thus swapping their values in step 3 will merge those cycles, reducing the number of distinct cycles by one.  This merged cycle will have two members (<it>An</it> and <it>Ak</it>) with indices less than or equal to <it>n</it>, but will lose one of them when <it>n</it> is correspondingly decreased by one in step 4, and thus the assumption given above will continue to hold.  Eventually, of course, <it>n</it>, and thus the number of cycles, will decrease down to one, at which point the algorithm will terminate.</p>
<p>

As for the equal probability of the permutations, it suffices to observe that the modified algorithm involves (<it>N</it>−1)! distinct possible sequences of swaps, each of which clearly produces a different permutation, and each of which occurs—assuming the random number source is unbiased—with equal probability.  Since (<it>N</it>−1)!, the number of distinct permutations the algorithm can produce, is also known to be exactly the total number of cyclic permutations of <it>N</it> elements, it is clear that the algorithm must be able to produce them all.</p>

</ss1>
</sec>
<sec>
<st>
 Comparison with other shuffling algorithms </st>

<p>

The Fisher-Yates shuffle is quite efficient; indeed, its asymptotic time and space complexity are optimal.  Combined with a high-quality unbiased random number source, it is also guaranteed to produce unbiased results.  Compared to some other solutions, it also has the advantage that, if only part of the resulting permutation is needed, it can be stopped halfway through, or even stopped and restarted repeatedly, generating the permutation incrementally as needed.</p>
<p>

In <link xlink:type="simple" xlink:href="../842/189842.xml">
high-level programming language</link>s with a fast built-in <link xlink:type="simple" xlink:href="../442/28442.xml">
sorting algorithm</link>, an alternative method, where each element of the set to be shuffled is assigned a random number and the set is then sorted according to these numbers, may be faster in practice, despite having worse asymptotic time complexity (<it>O</it>(<it>n</it> log <it>n</it>) vs. <it>O</it>(<it>n</it>)).  Like the Fisher-Yates shuffle, this method will also produce unbiased results if correctly implemented, and may be more tolerant of certain kinds of bias in the random numbers.  However, care must be taken to ensure that the assigned random numbers are never duplicated, since sorting algorithms in general won't order elements randomly in case of a tie.</p>
<p>

A variant of the above method that has seen some use in languages that support sorting with user-specified comparison functions is to shuffle a list by sorting it with a comparison function that returns random values.  However, <it>this does not always work</it>: with a number of commonly used sorting algorithms, the results end up biased due to internal asymmetries in the sorting implementation.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%227%22])">7</ref></p>


</sec>
<sec>
<st>
 Potential sources of bias </st>

<p>

Care must be taken when implementing the Fisher-Yates shuffle, both in the implementation of the algorithm itself and in the generation of the random numbers it is built on, otherwise the results may show detectable bias.  A number of common sources of bias have been listed below.</p>

<ss1>
<st>
 Implementation errors </st>

<p>

A common error when implementing the Fisher-Yates shuffle is to pick the random numbers from the wrong range.  The resulting algorithm may appear to work, but will produce biased results.  For example, a common <link xlink:type="simple" xlink:href="../723/271723.xml">
off-by-one error</link> would be moving the line n-- <it>before</it> the line k = rng.nextInt(n) in <link xlink:type="simple" xlink:href="#xpointer(//*[./st=%22The+modern+algorithm%22])">
the Java example above</link>, so that <it>k</it>  always strictly less than the index it will be swapped with.  (In Java, Random.nextInt(<it>int</it>) returns a random non-negative integer <it>less than</it> its argument.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%228%22])">8</ref>)  This turns the Fisher-Yates shuffle into <link xlink:type="simple" xlink:href="#xpointer(//*[./st=%22Sattolo's+algorithm%22])">
Sattolo's algorithm</link>, which only ever produces cyclic permutations: in particular, it is easy to see that, with this modification, the last element of the array can never end up in its original position.</p>
<p>

Similarly, always selecting <it>k</it> from the entire range of valid array indexes on <it>every</it> iteration (<it>i.e.</it> using k = rng.nextInt(array.length) in the Java example above) also produces a result which is biased, albeit less obviously so.  This can be seen from the fact that doing so yields <it>NN</it> distinct possible sequences of swaps, whereas there are only <link xlink:type="simple" xlink:href="../606/10606.xml">
<it>N</it>!</link> possible permutations of an <it>N</it>-element array.  Since <it>NN</it> can never be evenly divisible by <it>N</it>! (as the latter is divisible by <it>N</it>−1, which shares no <link xlink:type="simple" xlink:href="../924/378924.xml">
prime factor</link>s with <it>N</it>), some permutations must be produced by more of the <it>NN</it> sequences of swaps than others.</p>

</ss1>
<ss1>
<st>
 Modulo bias </st>

<p>

Doing a Fisher-Yates shuffle involves picking <link xlink:type="simple" xlink:href="../214/1699214.xml">
uniformly distributed</link> random integers from various ranges.  Most <link xlink:type="simple" xlink:href="../939/2736939.xml">
random number generator</link>s, however—whether true or <link xlink:type="simple" xlink:href="../210/23210.xml">
pseudorandom</link>—will only directly provide numbers in some fixed range, such as, say, from 0 to 232−1.  A simple and commonly used way to force such numbers into a desired smaller range is to apply the <link xlink:type="simple" xlink:href="../428/1352428.xml">
modulo operator</link>; that is, to divide them by the size of the range and take the remainder.  However, the need, in a Fisher-Yates shuffle, to generate random numbers in every range from 0–1 to 0–<it>N</it> pretty much guarantees that some of these ranges will not evenly divide the natural range of the random number generator.  Thus, the remainders will not always be evenly distributed and, worse yet, the bias will be systematically in favor of small remainders.</p>
<p>

For example, assume that your random number source gives numbers from 0 to 99 (as was the case for Fisher and Yates' original tables), and that you wish to obtain an unbiased random number from 0 to 15.  If you simply divide the numbers by 16 and take the remainder, you'll find that the numbers 0–3 occur about 17% more often than others.  This is because 16 does not evenly divide 100: the largest multiple of 16 less than or equal to 100 is 6×16 = 96, and it is the numbers in the incomplete range 96–99 that cause the bias.  The simplest way to fix the problem is to discard those numbers before taking the remainder and to keep trying again until a number in the suitable range comes up.  While in principle this could, in the worst case, take forever, in practice the <link xlink:type="simple" xlink:href="../653/9653.xml">
expected number of retries</link> will always be less than one.</p>
<p>

A related problem occurs with implementations that first generate a random <link xlink:type="simple" xlink:href="../376/11376.xml">
floating-point</link> number—usually in the range [0,1)—and then multiply it by the size of the desired range and round down.  The problem here is that random floating-point numbers, however carefully generated, always have only finite precision.  This means that there are only a finite number of possible floating point values in any given range, and if the range is divided into a number of segments that doesn't divide this number evenly, some segments will end up with more possible values than others.  While the resulting bias will not show the same systematic downward trend as in the previous case, it will still be there.</p>

</ss1>
<ss1>
<st>
 Limited PRNG state space </st>

<p>

An additional problem occurs when the Fisher-Yates shuffle is used with a <link xlink:type="simple" xlink:href="../524/45524.xml">
pseudorandom number generator</link>: as the sequence of numbers output by such a generator is entirely determined by its internal state at the start of a sequence, a shuffle driven by such a generator cannot possibly produce more distinct permutations than the generator has distinct possible states.  Even when the number of possible states exceeds the number of permutations, the irregular nature of the mapping from sequences of numbers to permutations means that some permutations will occur more often than others.  Thus, to minimize bias, the number of states of the PRNG should exceed the number of permutations by at least several orders of magnitude.</p>
<p>

For example, the built-in pseudorandom number generator provided by many programming languages and/or libraries may often have only 32 bits of internal state, which means it can only produce 232 different sequences of numbers.  If such a generator is used to shuffle a deck of 52 <link xlink:type="simple" xlink:href="../083/23083.xml">
playing card</link>s, it can only ever produce a vanishingly small fraction of the <link xlink:type="simple" xlink:href="../606/10606.xml">
52!</link> ≈ 2225.6 possible permutations.  It's impossible for a generator with less than 226 bits of internal state to produce all the possible permutations of a 52-card deck, and for a (reasonably) unbiased shuffle, the generator must have <it>at least</it> about 250 bits of state.</p>
<p>

A further problem occurs when a simple <link xlink:type="simple" xlink:href="../527/45527.xml">
linear congruential</link> PRNG is used with the divide-and-take-remainder method of range reduction described above.  The problem here is that the low-order bits of a linear congruential PRNG are less random than the high-order ones: the low <it>n</it> bits of the generator themselves have a period of at most 2<it>n</it>.  When the divisor is a power of two, taking the remainder essentially means throwing away the high-order bits, such that one ends up with a significantly less random value.</p>
<p>

Also, of course, no pseudorandom number generator can produce more distinct sequences than there are distinct seed values it may be initialized with.  Thus, it doesn't matter much if a generator has 1024 bits of internal state if it is only ever initialized with a 32-bit seed.</p>

</ss1>
</sec>
<sec>
<st>
 References </st>

<p>

<reflist>
<entry id="1">
 <cite style="font-style:normal" class="book">Fisher, R.A.; Yates, F.&#32;[1938]&#32;(1948). Statistical tables for biological, agricultural and medical research, 3rd ed.,&#32;London:&#32;Oliver &amp; Boyd,&#32;pp. 26–27. <commercial_enterprise wordnetid="108065093" confidence="0.8">
<company wordnetid="108058098" confidence="0.8">
<cooperative wordnetid="101100877" confidence="0.8">
<enterprise wordnetid="108056231" confidence="0.8">
<institution wordnetid="108053576" confidence="0.8">
<link xlink:type="simple" xlink:href="../885/883885.xml">
OCLC</link></institution>
</enterprise>
</cooperative>
</company>
</commercial_enterprise>
 <weblink xlink:type="simple" xlink:href="http://worldcat.org/oclc/14222135">
14222135</weblink>.</cite>&nbsp; 
(note: 6th edition, ISBN 0-02-844720-4, is <weblink xlink:type="simple" xlink:href="http://digital.library.adelaide.edu.au/coll/special/fisher/stat_tab.pdf">
available on the web</weblink>, but gives a different shuffling algorithm by C. R. Rao) 
</entry>
<entry id="2">
 <cite style="font-style:normal">Durstenfeld, Richard&#32;(July 1964).&#32;"<weblink xlink:type="simple" xlink:href="http://doi.acm.org/10.1145/364520.364540">
Algorithm 235: Random permutation</weblink>". <it>Communications of the ACM</it>&#32;<b>7</b>&#32;(7): 420. <document wordnetid="106470073" confidence="0.8">
<written_communication wordnetid="106349220" confidence="0.8">
<writing wordnetid="106362953" confidence="0.8">
<link xlink:type="simple" xlink:href="../994/422994.xml">
doi</link></writing>
</written_communication>
</document>
:<weblink xlink:type="simple" xlink:href="http://dx.doi.org/10.1145%2F364520.364540">
10.1145/364520.364540</weblink>. <symbol wordnetid="106806469" confidence="0.8">
<standard wordnetid="107260623" confidence="0.8">
<signal wordnetid="106791372" confidence="0.8">
<identifier wordnetid="107270601" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../930/234930.xml">
ISSN</link></system_of_measurement>
</identifier>
</signal>
</standard>
</symbol>
 <weblink xlink:type="simple" xlink:href="http://worldcat.org/issn/0001-0782">
0001-0782</weblink>.</cite>&nbsp;
</entry>
<entry id="3">
 <cite id="Reference-Knuth-1969" style="font-style:normal" class="book">Knuth, Donald E.&#32;(1969). The Art of Computer Programming volume 2: Seminumerical algorithms.&#32;Reading, MA:&#32;Addison-Wesley,&#32;124–125. <commercial_enterprise wordnetid="108065093" confidence="0.8">
<company wordnetid="108058098" confidence="0.8">
<cooperative wordnetid="101100877" confidence="0.8">
<enterprise wordnetid="108056231" confidence="0.8">
<institution wordnetid="108053576" confidence="0.8">
<link xlink:type="simple" xlink:href="../885/883885.xml">
OCLC</link></institution>
</enterprise>
</cooperative>
</company>
</commercial_enterprise>
 <weblink xlink:type="simple" xlink:href="http://worldcat.org/oclc/85975465">
85975465</weblink>.</cite>&nbsp;
</entry>
<entry id="4">
 <cite id="Reference-Knuth-1998" style="font-style:normal" class="book">Knuth&#32;[1969]&#32;(1998). The Art of Computer Programming vol. 2, 3rd ed.,&#32;145–146. ISBN 0-201-89684-2. <commercial_enterprise wordnetid="108065093" confidence="0.8">
<company wordnetid="108058098" confidence="0.8">
<cooperative wordnetid="101100877" confidence="0.8">
<enterprise wordnetid="108056231" confidence="0.8">
<institution wordnetid="108053576" confidence="0.8">
<link xlink:type="simple" xlink:href="../885/883885.xml">
OCLC</link></institution>
</enterprise>
</cooperative>
</company>
</commercial_enterprise>
 <weblink xlink:type="simple" xlink:href="http://worldcat.org/oclc/38207978">
38207978</weblink>.</cite>&nbsp;
</entry>
<entry id="5">
Black, Paul E.&#32;(2005-12-19).&#32;"<weblink xlink:type="simple" xlink:href="http://www.nist.gov/dads/HTML/fisherYatesShuffle.html">
Fisher-Yates shuffle</weblink>".&#32;<it>Dictionary of Algorithms and Data Structures</it>.&#32;  <link xlink:type="simple" xlink:href="../888/21888.xml">
National Institute of Standards and Technology</link>.&#32;Retrieved on <link>
2007-08-09</link>.
</entry>
<entry id="6">
 <cite style="font-style:normal">Wilson, Mark C.&#32;(2004-06-21). "<weblink xlink:type="simple" xlink:href="http://algo.inria.fr/seminars/summary/Wilson2004b.pdf">
Overview of Sattolo's Algorithm</weblink>"&#32;in <weblink xlink:type="simple" xlink:href="http://algo.inria.fr/seminars/allyears.html">
<it>Algorithms Seminar 2002–2004''</it></weblink>.&#32;F. Chyzak (ed.), summary by Éric Fusy.&#32;<it>INRIA Research Report</it>&#32;<b>5542</b>: 105–108. <symbol wordnetid="106806469" confidence="0.8">
<standard wordnetid="107260623" confidence="0.8">
<signal wordnetid="106791372" confidence="0.8">
<identifier wordnetid="107270601" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../930/234930.xml">
ISSN</link></system_of_measurement>
</identifier>
</signal>
</standard>
</symbol>
 <weblink xlink:type="simple" xlink:href="http://worldcat.org/issn/0249-6399">
0249-6399</weblink>.</cite>&nbsp;

</entry>
<entry id="7">
"<weblink xlink:type="simple" xlink:href="http://szeryf.wordpress.com/2007/06/19/a-simple-shuffle-that-proved-not-so-simple-after-all/">
A simple shuffle that proved not so simple after all</weblink>".&#32;<it>require ‘brain’</it>&#32;(2007-06-19).&#32;Retrieved on <link>
2007-08-09</link>. 
</entry>
<entry id="8">
"<weblink xlink:type="simple" xlink:href="http://java.sun.com/j2se/1.4.2/docs/api/java/util/Random.html#nextInt(int)">
java.util.Random.nextInt(int)</weblink>".&#32;<it>Java 2 Platform SE v1.4.2 documentation</it>.&#32;Retrieved on <link>
2007-08-09</link>.
</entry>
</reflist>
</p>

</sec>
</bdy>
</algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</article>
