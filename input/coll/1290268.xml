<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 18:23:58[mciao0826] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<idea  confidence="0.8" wordnetid="105833840">
<concept  confidence="0.8" wordnetid="105835747">
<header>
<title>Nested function</title>
<id>1290268</id>
<revision>
<id>241390528</id>
<timestamp>2008-09-27T20:32:32Z</timestamp>
<contributor>
<username>HenkeB</username>
<id>1164304</id>
</contributor>
</revision>
<categories>
<category>Source code</category>
<category>Programming constructs</category>
</categories>
</header>
<bdy>

<image width="320px" src="JapaneseNestingDolls.jpg" type="thumb">
<caption>

Nesting dolls (Japanese version)
</caption>
</image>

In <link xlink:type="simple" xlink:href="../311/5311.xml">
computer programming</link>, a <b>nested function</b> (or <b>nested procedure</b>/<b>subroutine</b>) is a <link xlink:type="simple" xlink:href="../988/40988.xml">
function</link> which is lexically (textually) encapsulated within another function. It can only be called by the enclosing function or by functions directly or indirectly nested within the same enclosing function. In other words, the <link xlink:type="simple" xlink:href="../068/62068.xml">
scope</link> of the nested function is limited by the enclosing function. The nesting is theoretically possible to any level of depth, although only a few levels are normally used in practice.
<ss2>
<st>
An example</st>
<p>

<it>An example using Pascal syntax:</it></p>
<p>

function E(x: real): real</p>
<p>

function F(y: real): real
begin
F := x + y
end</p>
<p>

begin
E := F(3)
end</p>

<p>

<it>and the same example in <physical_entity wordnetid="100001930" confidence="0.8">
<communicator wordnetid="109610660" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<compiler wordnetid="109946957" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<writer wordnetid="110794014" confidence="0.8">
<link xlink:type="simple" xlink:href="../323/12323.xml">
GNU C</link></writer>
</causal_agent>
</compiler>
</person>
</communicator>
</physical_entity>
 syntax:</it></p>

<p>

float E(float x)
{
float F(float y)
{
return x + y;
}
return F(3);
}</p>

<p>

The function F is nested within E (note that x is visible in F, while y is invisible outside F).</p>

</ss2>
<ss2>
<st>
Purpose</st>
<p>

Nested functions are a form of <link xlink:type="simple" xlink:href="../501/79501.xml">
information hiding</link> and are useful for dividing procedural tasks into subtasks which are only meaningful locally; it avoids cluttering other parts of the program with functions, variables, etc. unrelated to those parts. Nested functions therefore complement other structuring possibilities such as records and objects.</p>
<p>

In languages with nested functions, functions may normally also contain local <link xlink:type="simple" xlink:href="../453/12860453.xml">
constant</link>s, and <entity wordnetid="100001740" confidence="0.8">
<link xlink:type="simple" xlink:href="../800/199800.xml">
type</link></entity>
s (in addition to local <link xlink:type="simple" xlink:href="../818/32818.xml">
variable</link>s, <link xlink:type="simple" xlink:href="../065/25065.xml">
parameter</link>s, and functions), encapsulated and hidden in the same nested manner. This may further enhance the code structuring possibilities.</p>

</ss2>
<ss2>
<st>
Languages</st>
<p>

Well known languages supporting lexically nested functions include:</p>
<p>

<list>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../453/1453.xml">
Algol</link>-based languages such as <link xlink:type="simple" xlink:href="../880/692880.xml">
Algol68</link>, <speech wordnetid="107109196" confidence="0.8">
<dialect wordnetid="107155661" confidence="0.8">
<auditory_communication wordnetid="107109019" confidence="0.8">
<non-standard_speech wordnetid="107155081" confidence="0.8">
<link xlink:type="simple" xlink:href="../513/29513.xml">
Simula</link></non-standard_speech>
</auditory_communication>
</dialect>
</speech>
, <link xlink:type="simple" xlink:href="../773/23773.xml">
Pascal</link>, <link xlink:type="simple" xlink:href="../259/81259.xml">
Modula2</link>, and <link xlink:type="simple" xlink:href="../242/1242.xml">
Ada</link></entry>
<entry level="1" type="bullet">

Modern versions of <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../016/18016.xml">
Lisp</link></programming_language>
 (with lexical scope) such as <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../119/28119.xml">
Scheme</link></programming_language>
, and <link>
Common Lisp</link></entry>
<entry level="1" type="bullet">

Full support in scripting languages such as <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../845/9845.xml">
JavaScript</link></programming_language>
, and <format wordnetid="106636806" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../691/519691.xml">
ActionScript</link></format>
</entry>
<entry level="1" type="bullet">

Various degrees of support in scripting languages such as <physical_entity wordnetid="100001930" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../768/25768.xml">
Ruby</link></causal_agent>
</physical_entity>
, <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../862/23862.xml">
Python</link></programming_language>
, <link xlink:type="simple" xlink:href="../638/1146638.xml">
Perl 6</link></entry>
<entry level="1" type="bullet">

There is also a <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../021/6021.xml">
C</link></programming_language>
-related language with nested functions, the <link xlink:type="simple" xlink:href="../881/243881.xml">
D</link> language.</entry>
<entry level="1" type="bullet">

<physical_entity wordnetid="100001930" confidence="0.8">
<communicator wordnetid="109610660" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<compiler wordnetid="109946957" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<writer wordnetid="110794014" confidence="0.8">
<link xlink:type="simple" xlink:href="../323/12323.xml">
GCC</link></writer>
</causal_agent>
</compiler>
</person>
</communicator>
</physical_entity>
 also supports nested functions in <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../021/6021.xml">
C</link></programming_language>
, as a language extension. <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref></entry>
<entry level="1" type="bullet">

<programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../168/11168.xml">
Fortran</link></programming_language>
, starting with <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../168/11168.xml#xpointer(//*[./st=%22Fortran+90%22])">
Fortran-90</link></programming_language>
, supports <b>one</b> level of nested (<it>CONTAINed</it>) subroutines and functions.</entry>
</list>
</p>

<ss3>
<st>
Functional languages</st>
<p>

In <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../119/28119.xml">
Scheme</link></programming_language>
 and most other <link xlink:type="simple" xlink:href="../933/10933.xml">
functional programming</link> languages, nested functions are a common way of implementing <link xlink:type="simple" xlink:href="../775/775.xml">
algorithm</link>s with loops in them. A simple (<link xlink:type="simple" xlink:href="../742/30742.xml">
tail</link>) <link xlink:type="simple" xlink:href="../407/25407.xml">
recursive</link> inner function is created, which behaves as the algorithm's main loop, while the outer function performs startup actions that only need to be done once. In more complex cases, a number of mutually recursive functions may be created as inner functions.</p>

</ss3>
</ss2>
<ss2>
<st>
Implementation</st>
<p>

<it>There are several ways to implement nested procedures, but the classic way is as follows:</it></p>
<p>

<indent level="1">

Any non-local object, X, is reached via access-links in the <link xlink:type="simple" xlink:href="../105/1718105.xml">
activation frames</link> on the machine stack. The caller, C, assists the called procedure, P, by pushing a <it>direct</it> link to the <it>latest</it> activation of P's immediate lexical encapsulation, (P), prior to the call itself. P may then quickly find the right activation for a certain X by following a <it>fixed number</it> (P.depth - X.depth) of links (normally a small number).
</indent>

<indent level="1">

The caller creates this direct link by (itself) following C.depth - P.depth + 1 older links, leading up to the latest activation of (P), and then <it>temporarily</it> bridging over these with a direct link to that activation; the link later disappears together with P, whereby the older links beneath it, may come into use again.
</indent>

<indent level="1">

Note that P is visible for, and may therefore be called by, C if (P) = C / (C) / ((C)) / etc.
</indent>

This original method is faster than it may seem, but it is nevertheless often optimized in practical compilers (using <link xlink:type="simple" xlink:href="../105/1718105.xml">
<it>displays''</it></link> or similar techniques).</p>
<p>

Another way to implement nested functions that is used by some compilers is to convert ("lift") nested functions into non-nested functions using a process known as <link xlink:type="simple" xlink:href="../361/2230361.xml">
lambda lifting</link> during an intermediate stage in the compilation.</p>

</ss2>
<ss2>
<st>
See also</st>
<p>

<list>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../105/1718105.xml">
Call stack</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../319/62319.xml">
Closure (computer science)</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../006/1795006.xml">
Inner class</link></entry>
</list>
</p>

</ss2>
<ss2>
<st>
References</st>
<p>

<reflist>
<entry id="1">
"<weblink xlink:type="simple" xlink:href="http://gcc.gnu.org/onlinedocs/gcc/Nested-Functions.html">
Nested Functions - Using the GNU Compiler Collection (GCC)</weblink>".&#32;  GNU Project.&#32;Retrieved on <link>
2007-01-06</link>.</entry>
</reflist>
</p>


</ss2>
</bdy>
</concept>
</idea>
</article>
