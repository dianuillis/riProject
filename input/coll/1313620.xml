<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 18:25:02[mciao0828] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<event  confidence="0.8" wordnetid="100029378">
<rule  confidence="0.8" wordnetid="105846932">
<act  confidence="0.8" wordnetid="100030358">
<psychological_feature  confidence="0.8" wordnetid="100023100">
<procedure  confidence="0.8" wordnetid="101023820">
<activity  confidence="0.8" wordnetid="100407535">
<algorithm  confidence="0.8" wordnetid="105847438">
<header>
<title>Inverse quadratic interpolation</title>
<id>1313620</id>
<revision>
<id>233723722</id>
<timestamp>2008-08-23T12:25:47Z</timestamp>
<contributor>
<username>Ludovic89</username>
<id>7632703</id>
</contributor>
</revision>
<categories>
<category>Root-finding algorithms</category>
</categories>
</header>
<bdy>

In <link xlink:type="simple" xlink:href="../506/21506.xml">
numerical analysis</link>, <b>inverse quadratic interpolation</b> is a <link xlink:type="simple" xlink:href="../299/153299.xml">
root-finding algorithm</link>, meaning that it is an algorithm for solving equations of the form <it>f</it>(<it>x</it>) = 0. The idea is to use <link xlink:type="simple" xlink:href="../565/203565.xml">
quadratic interpolation</link> to approximate the <link xlink:type="simple" xlink:href="../907/14907.xml">
inverse</link> of <it>f</it>. This algorithm is rarely used on its own, but it is important because it forms part of the popular <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../323/1254323.xml">
Brent's method</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
.
<sec>
<st>
The method</st>

<p>

The inverse quadratic interpolation algorithm is defined by the <link xlink:type="simple" xlink:href="../806/146806.xml">
recurrence relation</link></p>
<p>

<indent level="1">

<math> x_{n+1} = \frac{f_{n-1}f_n}{(f_{n-2}-f_{n-1})(f_{n-2}-f_n)} x_{n-2} + \frac{f_{n-2}f_n}{(f_{n-1}-f_{n-2})(f_{n-1}-f_n)} x_{n-1} </math>
</indent>

<indent level="5">

<math> {} + \frac{f_{n-2}f_{n-1}}{(f_n-f_{n-2})(f_n-f_{n-1})} x_n, </math>
</indent>

where <it>fk</it> = <it>f</it>(<it>xk</it>). As can be seen from the recurrence relation, this method requires three initial values, <it>x</it>0, <it>x</it>1 and <it>x</it>2.</p>

</sec>
<sec>
<st>
Explanation of the method</st>

<p>

We use the three preceding iterates, <it>xn</it>&amp;minus;2, <it>xn</it>&amp;minus;1 and <it>xn</it>, with their function values, <it>fn</it>&amp;minus;2, <it>fn</it>&amp;minus;1 and <it>fn</it>. Applying the <link xlink:type="simple" xlink:href="../523/217523.xml">
Lagrange interpolation formula</link> to do quadratic interpolation on the inverse of <it>f</it> yields</p>
<p>

<indent level="1">

<math> f^{-1}(y) = \frac{(y-f_{n-1})(y-f_n)}{(f_{n-2}-f_{n-1})(f_{n-2}-f_n)} x_{n-2} + \frac{(y-f_{n-2})(y-f_n)}{(f_{n-1}-f_{n-2})(f_{n-1}-f_n)} x_{n-1} </math>
</indent>

<indent level="5">

<math> {} + \frac{(y-f_{n-2})(y-f_{n-1})}{(f_n-f_{n-2})(f_n-f_{n-1})} x_n. </math>
</indent>

We are looking for a root of <it>f</it>, so we substitute <it>y</it> = <it>f</it>(<it>x</it>) = 0 in the above equation and this results in the above recursion formula.</p>

</sec>
<sec>
<st>
Behaviour</st>

<p>

The asymptotic behaviour is very good: generally, the iterates <it>xn</it> converge fast to the root once they get close. However, performance is often quite poor if you do not start very close to the actual root. For instance, if by any chance two of the function values <it>fn</it>&amp;minus;2, <it>fn</it>&amp;minus;1 and <it>fn</it> coincide, the algorithm fails completely. Thus, inverse quadratic interpolation is seldom used as a stand-alone algorithm.</p>

</sec>
<sec>
<st>
Comparison with other root-finding methods</st>

<p>

As noted in the introduction, inverse quadratic interpolation is used in <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../323/1254323.xml">
Brent's method</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
. </p>
<p>

Inverse quadratic interpolation is also closely related to some other root-finding methods.
Using <link xlink:type="simple" xlink:href="../010/160010.xml">
linear interpolation</link> instead of quadratic interpolation gives the <link xlink:type="simple" xlink:href="../746/640746.xml">
secant method</link>. Interpolating <it>f</it> instead of the inverse of <it>f</it> gives <link xlink:type="simple" xlink:href="../991/1703991.xml">
Muller's method</link>.</p>

</sec>
<sec>
<st>
See also</st>
<p>

<list>
<entry level="1" type="bullet">

 <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../977/14680977.xml">
Successive parabolic interpolation</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
 is a related method that uses parabolas to find extrema rather than roots.</entry>
</list>
</p>

</sec>
<sec>
<st>
References</st>

<p>

<list>
<entry level="1" type="bullet">

<physical_entity wordnetid="100001930" confidence="0.8">
<expert wordnetid="109617867" confidence="0.8">
<analyst wordnetid="109790482" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<intellectual wordnetid="109621545" confidence="0.8">
<alumnus wordnetid="109786338" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<mathematician wordnetid="110301261" confidence="0.8">
<scholar wordnetid="110557854" confidence="0.8">
<link xlink:type="simple" xlink:href="../706/562706.xml">
Cleve Moler</link></scholar>
</mathematician>
</scientist>
</causal_agent>
</alumnus>
</intellectual>
</person>
</analyst>
</expert>
</physical_entity>
, <weblink xlink:type="simple" xlink:href="http://www.mathworks.com/moler/chapters.html">
Numerical Computing with MATLAB</weblink>, Section 4.5, Society for Industrial and Applied Mathematics (SIAM), 2004. ISBN 0-89871-560-1.</entry>
</list>
</p>



</sec>
</bdy>
</algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</article>
