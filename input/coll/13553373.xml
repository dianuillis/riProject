<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 17.04.2009 02:00:46[mciao0825] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>Workload Manager</title>
<id>13553373</id>
<revision>
<id>240859528</id>
<timestamp>2008-09-25T09:15:24Z</timestamp>
<contributor>
<username>Dellamarie</username>
<id>5482853</id>
</contributor>
</revision>
<categories>
<category>IBM mainframe technology</category>
<category>IBM Mainframe computer operating systems</category>
</categories>
</header>
<bdy>

In <link xlink:type="simple" xlink:href="../872/14872.xml">
IBM mainframe</link>s, <b>Workload Manager</b> (<b>WLM</b>) is a base component of <link xlink:type="simple" xlink:href="../340/39340.xml">
MVS/ESA</link> mainframe <link xlink:type="simple" xlink:href="../194/22194.xml">
operating system</link>, and its successors up to and including <link xlink:type="simple" xlink:href="../122/39122.xml">
z/OS</link>. It controls the access to system resources for the work executing on z/OS based on administrator-defined goals. Workload Manager components also exist for other operating systems. For example an <b>IBM Workload Manager</b> is also a software product for <link xlink:type="simple" xlink:href="../ury/22nd_century.xml">
AIX operating system</link>.

<sec>
<st>
 z/OS Workload Manager </st>
<p>

On a mainframe computer many different applications execute at the same time. The expectations for executing work are consistent execution times and predictable access to databases. On <link xlink:type="simple" xlink:href="../122/39122.xml">
z/OS</link> the Workload Manager (WLM) component fulfills these needs by controlling work's access to system resources based on external specifications by the system administrator.</p>
<p>

The system administrator <b>classifies</b> work to <b>service classes</b>. The classification mechanism uses work attributes like transaction names, user identifications or program names which specific applications are known to use. In addition the system administrator defines <b>goals</b> and <b>importance levels</b> for the service classes representing the application work. The goals define performance expectations for the work. Goals can be expressed as <b>response times</b>, a relative speed (termed <b>velocity</b>) or as <b>discretionary</b> if no specific requirement exists. The response time describes the duration for the work requests after they entered the system and until the application signals to WLM that the execution is completed. WLM is now interested to assure that the average response time of a set of work requests ends in the expected time or that a percentage of work requests fulfill the expectations of the end user. </p>
<p>

The definition of a response time also requires that the applications communicate with WLM. If this is not possible a relative speed measure â€“ named execution velocity - is used to describe the end user expectation to the system. 
<image location="left" width="400px" src="ExVel02.jpg" type="thumb">
<caption>

Definition of Execution Velocity
</caption>
</image>
 This measurement is based on system states which are continuously collected. The system states describe when a work request uses a system resource and when it must wait for it because it is used by other work. The latter is named a delay state. The quotient of all using states to all productive states (using and delay states) multiplied by 100 is the execution velocity. This measurement does not require any communication of the application with the WLM component but it is also more abstract than a response time goal.</p>
<p>

Finally the system administrator assigns an importance to each service class to tell WLM which service classes should get preferred access to system resources if the system load is too high to allow all work to execute. The service classes and goal definitions are organized in service policies together with other constructs for reporting and further controlling and saved as a service definition for access to WLM. The active service definition is saved on a couple data set which allows all <link xlink:type="simple" xlink:href="../122/39122.xml">
z/OS</link> systems of a <link xlink:type="simple" xlink:href="../356/2301356.xml">
Parallel Sysplex</link> cluster to access and execute towards the same performance goals. </p>
<p>

WLM is a closed control mechanism which continuously collects data about the work and system resources; compares the collected and aggregated measurements with the user definitions from the service definition and adjusts the access of the work to the system resources if the user expectations have not been achieved. This mechanism runs continuously in pre-defined time intervals. In order to compare the collected data with the goal definitions a performance index is calculated. 
<image location="left" width="400px" src="PI02.jpg" type="thumb">
<caption>

Definition of Performance Index
</caption>
</image>
 The performance index for a service class is a single number which tells whether the goal definition could be met, has been overachieved or was missed. WLM modifies the access of the service classes based on the achieved performance index and importance. For this it uses the collected data to project the possibility and result of a change. The change is executed if the forecast comes to the result that it is beneficial for the work based on the defined customer expectations. It should be noted that WLM uses a data base ranging from 20 seconds to 20 minutes to contain a statistically relevant basis of samples for its calculations. Also in one decision interval a change is performed for the benefit of one service class to maintain a controlled and predictable system. </p>
<p>

WLM controls the access of the work to the system processors, the I/O units, the system storage and starts and stops processes for work execution. The access to the system processors for example is controlled by a dispatch priority which defines a relative ranking between the units of work which want to execute. The same dispatch priority is assigned to all units of work which were classified to the same service class. As already stated the dispatch priority is not fixed and not simply derived from the importance of the service class. It changes based on goal achievement, system utilization and demand of the work for the system processors. Similar mechanisms exist for controlling all other system resources. This way of <link xlink:type="simple" xlink:href="../122/39122.xml">
z/OS</link> Workload Manager controlling the access of work to system resources is named goal oriented workload management and is in contrast to resource entitlement based workload management which defines a much more static relationship how work can access the system resources. Resource entitlement based workload management is found on larger <link xlink:type="simple" xlink:href="../642/31642.xml">
UNIX</link> operating systems for example.</p>
<p>

A major difference to workload management components on other operating systems is the close cooperation between <link xlink:type="simple" xlink:href="../122/39122.xml">
z/OS</link> Workload Manager and the major applications; middleware and subsystems executing on <link xlink:type="simple" xlink:href="../122/39122.xml">
z/OS</link>. WLM offers interfaces which allow the subsystems to tell WLM when a unit of work starts and ends in the system and to pass classification attributes which can be used by the system administrator to classify the work on the system. In addition WLM offers interfaces which allow load balancing components to place work requests on the best suited system in a parallel sysplex cluster. Additional instrumentation exists which helps database and resource managers to signal contention situations to WLM so that WLM can help the delayed work by promoting the holder of resource locks and latches. </p>
<p>

Over time <link xlink:type="simple" xlink:href="../122/39122.xml">
z/OS</link> Workload Manager became the central control component for all performance related aspects in a <link xlink:type="simple" xlink:href="../122/39122.xml">
z/OS</link> operating system. In a <link xlink:type="simple" xlink:href="../356/2301356.xml">
Parallel Sysplex</link> cluster the <link xlink:type="simple" xlink:href="../122/39122.xml">
z/OS</link> Workload Manager components work together to provide a single image view for the executing applications on the cluster. On a <link xlink:type="simple" xlink:href="../088/3968088.xml">
System z</link> with multiple virtual partitions <link xlink:type="simple" xlink:href="../122/39122.xml">
z/OS</link> WLM allows to interoperate with the <artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<link xlink:type="simple" xlink:href="../383/2301383.xml">
LPAR</link></device>
</instrumentality>
</artifact>
 <link xlink:type="simple" xlink:href="../216/1267216.xml">
Hypervisor</link> to influence the weighting of the <link xlink:type="simple" xlink:href="../122/39122.xml">
z/OS</link> partitions and to control the amount of CPU capacity which can be consumed by the logical partitions.</p>

</sec>
<sec>
<st>
 Literature </st>
<p>

<list>
<entry level="1" type="bullet">

 Paola Bari et al: System Programmer's Guide to: Workload Management. IBM Redbook, SG24-6472</entry>
</list>
</p>

</sec>
<sec>
<st>
 External links </st>
<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www-03.ibm.com/servers/eserver/zseries/zos/wlm/">
Official z/OS WLM Homepage</weblink> </entry>
</list>
</p>

</sec>
<sec>
<st>
 See also </st>
<p>

<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../970/13554970.xml">
Unit Control Block</link>, for a description how WLM controls dynamic <it>Parallel Access Volumes</it> (PAVs)</entry>
</list>
</p>





</sec>
</bdy>
</article>
