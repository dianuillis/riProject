<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 18:29:42[mciao0826] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<message  confidence="0.8" wordnetid="106598915">
<protocol  confidence="0.8" wordnetid="106665108">
<direction  confidence="0.8" wordnetid="106786629">
<rule  confidence="0.8" wordnetid="106652242">
<header>
<title>Digest access authentication</title>
<id>1381205</id>
<revision>
<id>241063732</id>
<timestamp>2008-09-26T05:00:42Z</timestamp>
<contributor>
<username>=JeffH</username>
<id>2212190</id>
</contributor>
</revision>
<categories>
<category>Request for Comments</category>
<category>HTTP</category>
<category>Cryptographic protocols</category>
</categories>
</header>
<bdy>

<table style="width: 17em;" class="infobox">
<row style="background:#AADDBB" align="center">
<col style="font-size: 110%">
 <b><message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<standard wordnetid="107260623" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<format wordnetid="106636806" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../443/13443.xml">
HTTP</link></system_of_measurement>
</format>
</rule>
</direction>
</standard>
</protocol>
</information>
</message>
</b></col>
</row>
<row>
<col>
 <link xlink:type="simple" xlink:href="../808/7716808.xml">
Persistence</link> &middot; <link xlink:type="simple" xlink:href="../757/4954757.xml">
Compression</link> &middot; <link xlink:type="simple" xlink:href="../586/13586.xml">
SSL</link></col>
</row>
<row style="background:#CCFFCC" align="center">
<col>
 <link xlink:type="simple" xlink:href="../156/13106156.xml">
Headers</link></col>
</row>
<row>
<col>
 <text wordnetid="106387980" confidence="0.8">
<line wordnetid="107012534" confidence="0.8">
<heading wordnetid="106343971" confidence="0.8">
<link xlink:type="simple" xlink:href="../769/6376769.xml">
ETag</link></heading>
</line>
</text>
 &middot; <text wordnetid="106387980" confidence="0.8">
<know-how wordnetid="105616786" confidence="0.8">
<line wordnetid="107012534" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<heading wordnetid="106343971" confidence="0.8">
<link xlink:type="simple" xlink:href="../415/5068415.xml">
Cookie</link></heading>
</method>
</line>
</know-how>
</text>
 &middot; <text wordnetid="106387980" confidence="0.8">
<line wordnetid="107012534" confidence="0.8">
<heading wordnetid="106343971" confidence="0.8">
<link xlink:type="simple" xlink:href="../885/5258885.xml">
Referer</link></heading>
</line>
</text>
</col>
</row>

<row style="background:#CCFFCC" align="center">
<col>
 <link xlink:type="simple" xlink:href="../108/1514108.xml">
Status codes</link></col>
</row>
<row>
<col>
 <written_communication wordnetid="106349220" confidence="0.8">
<code wordnetid="106667317" confidence="0.8">
<link xlink:type="simple" xlink:href="../986/11549986.xml">
200 OK</link></code>
</written_communication>
</col>
</row>
<row>
<col>
 <written_communication wordnetid="106349220" confidence="0.8">
<code wordnetid="106667317" confidence="0.8">
<link xlink:type="simple" xlink:href="../020/11550020.xml">
301 Moved permanently</link></code>
</written_communication>
</col>
</row>
<row>
<col>
 <written_communication wordnetid="106349220" confidence="0.8">
<code wordnetid="106667317" confidence="0.8">
<link xlink:type="simple" xlink:href="../022/11550022.xml">
302 Found</link></code>
</written_communication>
</col>
</row>
<row>
<col>
 <link xlink:type="simple" xlink:href="../028/11550028.xml">
303 See Other</link></col>
</row>
<row>
<col>
 <written_communication wordnetid="106349220" confidence="0.8">
<code wordnetid="106667317" confidence="0.8">
<link xlink:type="simple" xlink:href="../567/9519567.xml">
403 Forbidden</link></code>
</written_communication>
</col>
</row>
<row>
<col>
 <written_communication wordnetid="106349220" confidence="0.8">
<code wordnetid="106667317" confidence="0.8">
<link xlink:type="simple" xlink:href="../507/35507.xml">
404 Not Found</link></code>
</written_communication>
</col>
</row>
<row>
<col style="background:#CCFFCC" align="center"></col>
</row>
</table>

<b>HTTP Digest access authentication</b> is one of the agreed methods a web server can use to negotiate credentials with a web user (using the <link xlink:type="simple" xlink:href="../104/2701104.xml">
HTTP</link> protocol).  Digest authentication is intended to supersede unencrypted use of the <know-how wordnetid="105616786" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<link xlink:type="simple" xlink:href="../512/1214512.xml">
Basic access authentication</link></method>
</know-how>
, allowing user identity to be established securely without having to send a <link xlink:type="simple" xlink:href="../304/24304.xml">
password</link> in <link xlink:type="simple" xlink:href="../935/157935.xml">
plaintext</link> over the network.  Digest authentication is basically an application of <function wordnetid="113783816" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../826/18826.xml">
MD5</link></function>
 cryptographic hashing with usage of <link xlink:type="simple" xlink:href="../390/6988390.xml">
nonce</link> values to prevent <link xlink:type="simple" xlink:href="../715/5715.xml">
cryptanalysis</link>.
<sec>
<st>
 Overview </st>
<p>

Digest access authentication was originally specified by RFC 2069 (<it>An Extension to HTTP: Digest Access Authentication</it>). RFC 2069 specifies roughly a traditional digest authentication scheme with security maintained by a server generated nonce value.</p>
<p>

<math>\mathrm{HA1} = \mathrm{MD5}\Big(\mathrm{A1}\Big) = \mathrm{MD5}\Big( \mathrm{username} : \mathrm{realm} : \mathrm{password} \Big)</math></p>
<p>

<math>\mathrm{HA2} = \mathrm{MD5}\Big(\mathrm{A2}\Big) = \mathrm{MD5}\Big( \mathrm{method} : \mathrm{digestURI} \Big)</math></p>
<p>

<math>\mathrm{response} = \mathrm{MD5}\Big( \mathrm{HA1} : \mathrm{nonce} : \mathrm{HA2} \Big) </math></p>
<p>

RFC 2069 was later replaced by RFC 2617 (<it>HTTP Authentication: Basic and Digest Access Authentication</it>).  RFC 2617 introduced a number of optional security enhancements to Digest Authentication; "Quality of Protection" (qop), nonce counter incremented by client, and a client generated random nonce.  These enhancements are designed to protect against e.g. <link xlink:type="simple" xlink:href="../852/63852.xml">
chosen-plaintext attack</link> <link xlink:type="simple" xlink:href="../715/5715.xml">
cryptanalysis</link>. </p>
<p>

<math>\mathrm{HA1} = \mathrm{MD5}\Big(\mathrm{A1}\Big) = \mathrm{MD5}\Big( \mathrm{username} : \mathrm{realm} : \mathrm{password} \Big)</math></p>

<p>

If the qop directive's value is "auth" or is unspecified, then HA2 is</p>
<p>

<math>\mathrm{HA2} = \mathrm{MD5}\Big(\mathrm{A2}\Big) = \mathrm{MD5}\Big( \mathrm{method} : \mathrm{digestURI} \Big)</math></p>
<p>

If the qop directive's value is "auth-int" , then HA2 is</p>
<p>

<math>\mathrm{HA2} = \mathrm{MD5}\Big(\mathrm{A2}\Big) = \mathrm{MD5}\Big( \mathrm{method} : \mathrm{digestURI} : \mathrm H(entity-body)\Big)</math></p>

<p>

<math>\mathrm{response} = \mathrm{MD5}\Big( \mathrm{HA1} : \mathrm{nonce} : \mathrm{nonceCount} : \mathrm{clientNonce} : \mathrm{qop} : \mathrm{HA2} \Big)</math></p>

</sec>
<sec>
<st>
 Impact of MD5 security on Digest authentication </st>

<p>

The MD5 calculations used in HTTP Digest Authentication is intended to be "<link xlink:type="simple" xlink:href="../890/363890.xml">
one way</link>", meaning that it should be difficult to determine the original input when only the output is known.  If the password itself is too simple, however, then it may be possible to test all possible inputs and find a matching output (a <link xlink:type="simple" xlink:href="../784/53784.xml">
brute force attack</link>) &ndash; perhaps aided by a dictionary or suitable look-up list.  Ideally users should be forced to use long, non-trivial passwords.</p>
<p>

The HTTP scheme was designed at <organization wordnetid="108008335" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../351/37351.xml">
CERN</link></organization>
 in <link xlink:type="simple" xlink:href="../598/34598.xml">
1993</link> and does not represent subsequent improvements in authentication systems, such as the development of keyed-hash message authentication code (<written_communication wordnetid="106349220" confidence="0.8">
<code wordnetid="106667317" confidence="0.8">
<link xlink:type="simple" xlink:href="../112/17112.xml">
HMAC</link></code>
</written_communication>
). Although the <link xlink:type="simple" xlink:href="../432/18934432.xml">
cryptographic</link> construction that is used is based on the <function wordnetid="113783816" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../826/18826.xml">
MD5</link></function>
 hash function, <link xlink:type="simple" xlink:href="../369/189369.xml">
collision attack</link>s were in 2004 generally believed (e.g. <weblink xlink:type="simple" xlink:href="http://www.cryptography.com/cnews/hash.html">
Hash collision news</weblink> ) to not affect applications where the plaintext (i.e. password) is not known. However, claims in 2006 ( <weblink xlink:type="simple" xlink:href="http://eprint.iacr.org/2006/187.pdf">
Kim, Biryukov2, Preneel, Hong</weblink> On the Security of HMAC and NMAC Based on HAVAL MD4 MD5 SHA-0 and SHA-1 ) cause some doubt over other MD5 applications as well. However, so far MD5 collision attacks have not been shown to pose a threat to Digest Authentication, and the RFC 2617 allows servers to implement mechanisms to detect some collision and replay attacks. </p>
<p>

One consequence of Digest authentication design is that the server must know the password (i.e. store it in plain text) or store the same HA1 (MD5) hash that is used to calculate the client's response (see <link>
 example </link>, below). This means that if the password database at a site is compromised the attacker will be able to impersonate any user whose access credentials are stolen. Such a compromise should not affect other sites if the MD5 hash is stored rather than the password, because the realm information is used as a <link xlink:type="simple" xlink:href="../756/701756.xml">
salt</link>.  Unfortunately the scheme prevents use of different salts being used for each individual password held on the server.</p>

</sec>
<sec>
<st>
 HTTP Digest Authentication considerations </st>


<ss1>
<st>
 Advantages </st>
<p>

HTTP Digest authentication is designed to be more secure than traditional digest authentication schemes; <it>"significantly stronger than (e.g.) <message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<standard wordnetid="107260623" confidence="0.8">
<know-how wordnetid="105616786" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../914/3217914.xml">
CRAM-MD5</link></system_of_measurement>
</method>
</rule>
</direction>
</know-how>
</standard>
</protocol>
</message>
 ..."</it> (<weblink xlink:type="simple" xlink:href="http://www.ietf.org/rfc/rfc2617.txt">
RFC2617</weblink>).</p>
<p>

Some of the security strengths of HTTP Digest authentication is:
<list>
<entry level="1" type="bullet">

 The password is not used directly in the digest, but rather HA1 = MD5(username:realm:password). This allows some implementations (e.g. <link xlink:type="simple" xlink:href="../348/191348.xml">
JBoss</link> <weblink xlink:type="simple" xlink:href="http://wiki.jboss.org/wiki/Wiki.jsp?page=DIGESTAuth">
DIGESTAuth</weblink>) to store HA1 rather than the clear text password.</entry>
<entry level="1" type="bullet">

 Client nonce was introduced in RFC2617, which allows the client to prevent <link xlink:type="simple" xlink:href="../852/63852.xml">
chosen plaintext</link> attacks (which otherwise makes e.g. <link xlink:type="simple" xlink:href="../284/2403284.xml">
rainbow tables</link> a threat to digest authentication schemes).</entry>
<entry level="1" type="bullet">

 Server nonce is allowed to contain timestamps. Therefore the server may inspect nonce attributes submitted by clients, to prevent replay attacks. </entry>
<entry level="1" type="bullet">

 Server is also allowed to maintain a list of recently issued or used server nonce values to prevent reuse.</entry>
</list>
</p>

</ss1>
<ss1>
<st>
 Disadvantages </st>
<p>

Digest access authentication is intended as a security trade-off; it is intended to replace unencrypted HTTP <know-how wordnetid="105616786" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<link xlink:type="simple" xlink:href="../512/1214512.xml">
Basic access authentication</link></method>
</know-how>
 which is extremely weak. However it is not intended to replace strong authentication protocols, such as <link xlink:type="simple" xlink:href="../222/24222.xml">
Public key</link> or <message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<know-how wordnetid="105616786" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<link xlink:type="simple" xlink:href="../947/16947.xml">
Kerberos</link></method>
</rule>
</direction>
</know-how>
</protocol>
</message>
 authentication.  </p>
<p>

Security wise, there are several drawbacks with Digest access authentication:
<list>
<entry level="1" type="bullet">

 Many of the security options in RFC2617 are optional. If quality-of-protection (qop) is not specified by server, the client will operate in a security reduced legacy <weblink xlink:type="simple" xlink:href="http://www.ietf.org/rfc/rfc2069.txt">
RFC2069</weblink> mode.</entry>
<entry level="1" type="bullet">

 Digest access authentication is vulnerable to <operation wordnetid="100955060" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<attack wordnetid="100972621" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<link xlink:type="simple" xlink:href="../676/144676.xml">
Man-in-the-middle attack</link></activity>
</psychological_feature>
</act>
</attack>
</event>
</operation>
; a MitM attacker could tell clients to use Basic access authentication or legacy <weblink xlink:type="simple" xlink:href="http://www.ietf.org/rfc/rfc2069.txt">
RFC2069</weblink> Digest access authentication mode.</entry>
<entry level="1" type="bullet">

 <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../215/15215.xml">
Internet Explorer</link></software>
 5 may be incompatible with other digest access authentication implementations.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref></entry>
</list>
</p>
<p>

There is an important problem with implementing Digest access authentication. This is the requirement that either cleartext passwords or the HA1 hashes must be known in order to perform client response validation. If the authentication repository used to store passwords does not support looking up cleartext passwords or HA1 hashes, it is not possible to use HTTP Digest access authentication.</p>

</ss1>
<ss1>
<st>
 Alternative authentication protocols </st>
<p>

Some strong authentication protocols for web based applications include:
<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../222/24222.xml">
Public key</link> authentication (usually implemented with <link xlink:type="simple" xlink:href="../586/13586.xml">
HTTPS</link> / <link>
SSL</link> Client Certificates)</entry>
<entry level="1" type="bullet">

 <link>
 Kerberos</link> or <message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<know-how wordnetid="105616786" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<link xlink:type="simple" xlink:href="../807/436807.xml">
SPNEGO</link></method>
</rule>
</direction>
</know-how>
</protocol>
</message>
 authentication, primarily employed by <link xlink:type="simple" xlink:href="../050/209050.xml">
Microsoft IIS</link> running configured for "<know-how wordnetid="105616786" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<link xlink:type="simple" xlink:href="../688/596688.xml">
Integrated Windows Authentication</link></method>
</know-how>
".</entry>
</list>
</p>

<p>

Weak cleartext protocols are also in use.
<list>
<entry level="1" type="bullet">

Weaker <know-how wordnetid="105616786" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<link xlink:type="simple" xlink:href="../512/1214512.xml">
Basic access authentication</link></method>
</know-how>
 scheme is widely deployed. </entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../912/19477912.xml">
HTTP+HTML Form based authentication</link> is also widely deployed.</entry>
</list>

The weak cleartext protocols are often used together with <link xlink:type="simple" xlink:href="../586/13586.xml">
HTTPS</link> network security protocols, which resolves many of the threats Digest access authentication protocol is designed to prevent.</p>

</ss1>
</sec>
<sec>
<st>
 Example with explanation </st>

<p>

<indent level="1">

 <it>Warning: Please refer to the original specifications for a more comprehensive discussion of security issues.</it>
</indent>

The following example was originally given in RFC 2617 and is expanded here to show the full text expected for each request and response.  Note that only the "auth" (authentication) quality of protection code is covered &ndash; at the time of writing only the <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../620/18996620.xml">
Opera</link></software>
 and <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../392/17392.xml">
Konqueror</link></software>
 <link xlink:type="simple" xlink:href="../173/33173.xml">
web browser</link>s are known to support "auth-int" (authentication with integrity protection).  Although the specification mentions HTTP version 1.1 the scheme can be successfully added to a version 1.0 server, as shown here.</p>
<p>

This typical transaction consists of the following steps.</p>
<p>

<list>
<entry level="1" type="bullet">

 The client asks for a page that requires authentication but does not provide a <link xlink:type="simple" xlink:href="../990/16301990.xml">
user name</link> and password.   Typically this is because the user simply entered the address or followed a <link xlink:type="simple" xlink:href="../547/49547.xml">
link</link> to the page.</entry>
<entry level="1" type="bullet">

 The server responds with the "401" response code, providing the authentication realm and a randomly-generated, single-use value called a <link xlink:type="simple" xlink:href="../390/6988390.xml">
nonce</link>.</entry>
<entry level="1" type="bullet">

 At this point, the client will present the authentication realm (typically a description of the computer or system being accessed) to the user and prompt for a user name and password.  The user may decide to cancel at this point.</entry>
<entry level="1" type="bullet">

 Once a user name and password have been supplied, the client re-sends the same request but adds an authentication header that includes the response code.</entry>
<entry level="1" type="bullet">

 In this example, the server accepts the authentication and the page is returned.  If the user name is invalid and/or the password is incorrect, the server might return the "401" response code and the client would prompt the user again.</entry>
</list>
</p>
<p>

Note: A client may already have the required user name and password without needing to prompt the user, e.g. if they have previously been stored by a web browser.</p>
<p>

----</p>
<p>

<b>Client request (no authentication)</b>:

GET /dir/index.html HTTP/1.0
Host: localhost
</p>
<p>

(followed by a <link xlink:type="simple" xlink:href="../775/238775.xml">
new line</link>, in the form of a <link xlink:type="simple" xlink:href="../770/238770.xml">
carriage return</link> followed by a <link xlink:type="simple" xlink:href="../775/238775.xml">
line feed</link>).</p>
<p>

<b>Server response</b>:

HTTP/1.0 401 Unauthorised
Server: HTTPd/0.9
Date: Sun, 10 Apr 2005 20:26:47 GMT
WWW-Authenticate: Digest realm="testrealm@host.com",
                         qop="auth,auth-int",
                         nonce="dcd98b7102dd2f0e8b11d0f600bfb0c093",
                         opaque="5ccc069c403ebaf9f0171e9517f40e41"
Content-Type: text/html
Content-Length: 311

&amp;lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/1999/REC-html401-19991224/loose.dtd"&amp;gt;
&amp;lt;HTML&amp;gt;
  &amp;lt;HEAD&amp;gt;
    &amp;lt;TITLE&amp;gt;Error&amp;lt;/TITLE&amp;gt;
    &amp;lt;META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=ISO-8859-1"&amp;gt;
  &amp;lt;/HEAD&amp;gt;
  &amp;lt;BODY&amp;gt;&amp;lt;H1&amp;gt;401 Unauthorised.&amp;lt;/H1&amp;gt;&amp;lt;/BODY&amp;gt;
&amp;lt;/HTML&amp;gt;
</p>
<p>

<b>Client request (user name "Mufasa", password "Circle Of Life")</b>:

GET /dir/index.html HTTP/1.0
Host: localhost
Authorization: Digest username="Mufasa",
                      realm="testrealm@host.com",
                      nonce="dcd98b7102dd2f0e8b11d0f600bfb0c093",
                      uri="/dir/index.html",
                      qop=auth,
                      nc=00000001,
                      cnonce="0a4f113b",
                      response="6629fae49393a05397450978507c4ef1",
                      opaque="5ccc069c403ebaf9f0171e9517f40e41"
</p>
<p>

(followed by a blank line, as before).</p>
<p>

<b>Server response</b>:

HTTP/1.0 200 OK
Server: HTTPd/0.9
Date: Sun, 10 Apr 2005 20:27:03 GMT
Content-Type: text/html
Content-Length: 7984
</p>
<p>

(followed by a blank line and HTML text of the restricted page).</p>
<p>

----</p>
<p>

The "response" value is calculated in three steps, as follows.  Where values are combined, they are <link xlink:type="simple" xlink:href="../276/564276.xml">
delimited</link> by <link xlink:type="simple" xlink:href="../131/59131.xml">
colon</link> symbols.</p>
<p>

<list>
<entry level="1" type="number">

 The MD5 hash of the combined user name, authentication realm and password is calculated.  The result is referred to as HA1.</entry>
<entry level="1" type="number">

 The MD5 hash of the combined method and digest <standard wordnetid="107260623" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../146/32146.xml">
URI</link></system_of_measurement>
</standard>
 is calculated, e.g. of "GET" and "/dir/index.html".  The result is referred to as HA2.</entry>
<entry level="1" type="number">

 The MD5 hash of the combined HA1 result, server nonce (nonce), request counter (nc), client nonce (cnonce), quality of protection code (qop) and HA2 result is calculated.  The result is the "response" value provided by the client.</entry>
</list>
</p>
<p>

Since the server has the same information as the client, the response can be checked by performing the same calculation.  In the example given above the result is formed as follows &ndash; where MD5() represents a function used to calculate an MD5 hash, backslashes represent a continuation and the quotes shown are not used in the calculation.</p>
<p>

Completing the example given in RFC 2617 gives the following results for each step.</p>
<p>


    HA1 = MD5( "Mufasa:testrealm@host.com:Circle Of Life" )
        = 939e7578ed9e3c518a452acee763bce9

    HA2 = MD5( "GET:/dir/index.html" )
        = 39aff3a2bab6126f332b942af96d3366

    Response = MD5( "939e7578ed9e3c518a452acee763bce9:\
                     dcd98b7102dd2f0e8b11d0f600bfb0c093:\
                     00000001:0a4f113b:auth:\
                     39aff3a2bab6126f332b942af96d3366" )
             = 6629fae49393a05397450978507c4ef1
</p>
<p>

At this point the client may make another request, reusing the server nonce value (the server only issues a new nonce for each "401" response) but providing a new client nonce (cnonce).  For subsequent requests, the hexadecimal request counter (nc) must be greater than the last value it used &ndash; otherwise an attacker could simply "<link xlink:type="simple" xlink:href="../094/614094.xml">
replay</link>" an old request with the same credentials.  It is up to the server to ensure that the counter increases for each of the nonce values that it has issued, rejecting any bad requests appropriately.  Obviously changing the method, URI and/or counter value will result in a different response value.</p>
<p>

The server should remember nonce values that it has recently generated.  It may also remember when each nonce value was issued, expiring them after a certain amount of time.  If an expired value is used, the server should respond with the "401" status code and add stale=TRUE to the authentication header &ndash; indicating that the client should re-send with the new nonce provided, without prompting the user for another user name and password.</p>
<p>

The server does not need to keep any expired nonce values &ndash; it can simply assume that any unrecognised values have expired.  It is also possible for the server to only allow each nonce value to be returned once, although this forces the client to repeat every request.  Note that expiring a server nonce immediately will not work, as the client would never get a chance to use it.</p>

</sec>
<sec>
<st>
SIP Digest Authentication</st>
<p>

SIP uses basically the same digest authentication algorithm. It is specified by <weblink xlink:type="simple" xlink:href="http://www.ietf.org/rfc/rfc3261.txt">
RFC 3261</weblink>.</p>

</sec>
<sec>
<st>
Browser Implementation</st>

<p>

A 2002 analysis by eWeek Labs concluded that <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../215/15215.xml">
Internet Explorer</link></software>
 Version 5.0, as well as later versions, implements digest authentication in a way that does not comply with RFC 2617.  As a result, Internet Explorer cannot be used as a web client for a server that complies with the digest authentication standard.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref></p>

</sec>
<sec>
<st>
See also</st>
<p>

<list>
<entry level="1" type="bullet">

<message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<link xlink:type="simple" xlink:href="../860/1695860.xml">
AKA (security)</link></rule>
</direction>
</protocol>
</message>
</entry>
</list>
</p>

</sec>
<sec>
<st>
External links</st>
<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://gluga.com/tech-talk/proxy-servers-and-ntlm/">
Overview of how proxies and NTLM works, and a guide to configure NTLM-ASP for proxy bypassing</weblink></entry>
<entry level="1" type="bullet">

 RFC 2617</entry>
<entry level="1" type="bullet">

 RFC 2069 (obsolete)</entry>
</list>
</p>

</sec>
<sec>
<st>
 Notes </st>
<p>

<reflist>
<entry id="1">
Dyck, Timothy.&#32;"<weblink xlink:type="simple" xlink:href="http://www.eweek.com/c/a/Past-Reviews/IE-Apache-Clash-on-Web-Standard/">
IE, Apache Clash on Web Standard</weblink>".&#32;Retrieved on <link>
2008-06-10</link>.</entry>
</reflist>
</p>


</sec>
</bdy>
</rule>
</direction>
</protocol>
</message>
</article>
