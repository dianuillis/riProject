<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 15:27:13[mciao0826] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<kind  confidence="0.9511911446218017" wordnetid="105839024">
<algorithm  confidence="0.9508927676800064" wordnetid="105847438">
<header>
<title>Heapsort</title>
<id>13995</id>
<revision>
<id>243757117</id>
<timestamp>2008-10-07T22:37:05Z</timestamp>
<contributor>
<username>דוד שי</username>
<id>7192861</id>
</contributor>
</revision>
<categories>
<category>Articles with example pseudocode</category>
<category>Comparison sorts</category>
<category>Articles with example C code</category>
<category>Sorting algorithms</category>
<category>Heaps (structure)</category>
</categories>
</header>
<bdy>
<template>
<name>Infobox Algorithm</name>
<parameters>

<image location="none" width="150px" src="Sorting_heapsort_anim.gif">
<caption>

A run of the heapsort algorithm sorting an array of randomly permuted values. In the first stage of the algorithm the array elements are reordered to satisfy the heap property. Before the actual sorting takes place, the heap tree structure is shown briefly for illustration.
</caption>
</image>
A run of the heapsort algorithm sorting an array of randomly permuted values. In the first stage of the algorithm the array elements are reordered to satisfy the heap property. Before the actual sorting takes place, the heap tree structure is shown briefly for illustration.<time>
<it>O(n</it> log <it>n</it>)</time>
<data>
<link xlink:type="simple" xlink:href="../052/2052.xml">
Array</link></data>
<class>
<link xlink:type="simple" xlink:href="../442/28442.xml">
Sorting algorithm</link></class>
<optimal>
Sometimes</optimal>
<space>
<it>О(n)</it> total, <it>O(1)</it> auxiliary</space>
</parameters>
</template>


<p>

<b>Heapsort</b> (method) is a <link xlink:type="simple" xlink:href="../304/3189304.xml">
comparison-based</link> <link xlink:type="simple" xlink:href="../442/28442.xml">
sorting algorithm</link>, and is part of the <link xlink:type="simple" xlink:href="../352/29352.xml">
selection sort</link> family. Although somewhat slower in practice on most machines than a good implementation of <link xlink:type="simple" xlink:href="../249/3268249.xml">
quicksort</link>, it has the advantage of a worst-case <link xlink:type="simple" xlink:href="../578/44578.xml">
<b>Θ</b></link>(<it>n</it> log <it>n</it>) runtime.  Heapsort is an <link xlink:type="simple" xlink:href="../861/219861.xml">
in-place algorithm</link>, but is not a <link>
stable sort</link>.</p>

<sec>
<st>
 Overview </st>
<p>

Heapsort inserts the input list elements into a <link>
heap</link> data structure.  The largest value (in a max-heap) or the smallest value (in a min-heap) are extracted until none remain, the values having been extracted in sorted order.  The heap's invariant is preserved after each extraction, so the only cost is that of extraction.</p>
<p>

During extraction, the only space required is that needed to store the heap. In order to achieve constant space overhead, the heap is stored in the part of the input array that has not yet been sorted. (The structure of this heap is described at .)</p>
<p>

Heapsort uses two heap operations: <it>insertion</it> and <it>root deletion</it>. Each extraction places an element in the last empty location of the array.  The remaining prefix of the array stores the unsorted elements.</p>

</sec>
<sec>
<st>
 Variations </st>
<p>

<list>
<entry level="1" type="bullet">

The most important variation to the simple variant is an improvement by <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link>
R. W. Floyd</link></scientist>
</person>
 which gives in practice about 25% speed improvement by using only one comparison in each <link xlink:type="simple" xlink:href="../890/69890.xml#xpointer(//*[./st=%22Adding+to+the+heap%22])">
siftup</link> run which then needs to be followed by a <link xlink:type="simple" xlink:href="../890/69890.xml#xpointer(//*[./st=%22Deleting+the+root+from+the+heap%22])">
siftdown</link> for the original child; moreover it is more elegant to formulate. Heapsort's natural way of indexing works on indices from 1 up to the number of items. Therefore the start address of the data should be shifted such that this logic can be implemented avoiding unnecessary +/- 1 offsets in the coded algorithm.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

Ternary heapsort <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref> uses a ternary heap instead of a binary heap; that is, each element in the heap has three children. It is more complicated to program, but does a constant number of times fewer swap and comparison operations.  This is because each step in the shift operation of a ternary heap requires three comparisons and one swap, whereas in a binary heap two comparisons and one swap are required. The ternary heap does two steps in less time than the binary heap requires for three steps, which multiplies the index by a factor of 9 instead of the factor 8 of three binary steps. Ternary heapsort is about 12% faster than the simple variant of binary heapsort.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

The <b>smoothsort</b> algorithm <weblink xlink:type="simple" xlink:href="http://www.cs.utexas.edu/users/EWD/ewd07xx/EWD796a.PDF">
http://www.cs.utexas.edu/users/EWD/ewd07xx/EWD796a.PDF</weblink> <weblink xlink:type="simple" xlink:href="http://www.cs.utexas.edu/~EWD/transcriptions/EWD07xx/EWD796a.html">
http://www.cs.utexas.edu/~EWD/transcriptions/EWD07xx/EWD796a.html</weblink> is a variation of heapsort developed by <link xlink:type="simple" xlink:href="../018/10018.xml">
Edsger Dijkstra</link> in 1981. Like heapsort, smoothsort's upper bound is <link xlink:type="simple" xlink:href="../578/44578.xml">
O</link>(<it>n</it> log&nbsp;<it>n</it>). The advantage of smoothsort is that it comes closer to O(<it>n</it>) time if the input is already sorted to some degree, whereas heapsort averages O(<it>n</it> log&nbsp;<it>n</it>) regardless of the initial sorted state. Due to its complexity, smoothsort is rarely used.</entry>
</list>
</p>

</sec>
<sec>
<st>
 Comparison with other sorts </st>
<p>

Heapsort primarily competes with <link xlink:type="simple" xlink:href="../249/3268249.xml">
quicksort</link>, another very efficient general purpose nearly-in-place comparison-based sort algorithm.</p>
<p>

Quicksort is typically somewhat faster, due to better cache behavior and other factors, but the worst-case running time for quicksort is <link xlink:type="simple" xlink:href="../578/44578.xml">
O</link>(<it>n</it>2), which is unacceptable for large data sets and can be deliberately triggered given enough knowledge of the implementation, creating a security risk. See <link xlink:type="simple" xlink:href="../249/3268249.xml">
quicksort</link> for a detailed discussion of this problem, and possible solutions.</p>
<p>

Thus, because of the O(<it>n</it> log <it>n</it>) upper bound on heapsort's running time and constant upper bound on its auxiliary storage, embedded systems with real-time constraints or systems concerned with security often use heapsort. </p>
<p>

Heapsort also competes with <link xlink:type="simple" xlink:href="../039/20039.xml">
merge sort</link>, which has the same time bounds, but requires Ω(n) auxiliary space, whereas heapsort requires only a constant amount. Heapsort also typically runs more quickly in practice on machines with small or slow <link xlink:type="simple" xlink:href="../181/849181.xml">
data cache</link>s. On the other hand, merge sort has several advantages over heapsort:
<list>
<entry level="1" type="bullet">

 Like quicksort, merge sort on arrays has considerably better data cache performance, often outperforming heapsort on a modern desktop PC, because it accesses the elements in order.</entry>
<entry level="1" type="bullet">

 Merge sort is a <link>
stable sort</link>.</entry>
<entry level="1" type="bullet">

 Merge sort <link xlink:type="simple" xlink:href="../840/148840.xml">
parallelizes better</link>; the most trivial way of parallelizing merge sort achieves close to <link xlink:type="simple" xlink:href="../612/1448612.xml">
linear speedup</link>, while there is no obvious way to parallelize heapsort at all.</entry>
<entry level="1" type="bullet">

 Merge sort can be easily adapted to operate on <link xlink:type="simple" xlink:href="../167/18167.xml">
linked list</link>s and very large lists stored on slow-to-access media such as <link xlink:type="simple" xlink:href="../472/Species_8472.xml">
disk storage</link> or <link xlink:type="simple" xlink:href="../995/451995.xml">
network attached storage</link>. Heapsort relies strongly on <link xlink:type="simple" xlink:href="../612/25612.xml">
random access</link>, and its poor <link xlink:type="simple" xlink:href="../028/64028.xml">
locality of reference</link> makes it very slow on media with long access times.</entry>
</list>
</p>
<p>

An interesting alternative to Heapsort is <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<idea wordnetid="105833840" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<category wordnetid="105838765" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<kind wordnetid="105839024" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../477/363477.xml">
Introsort</link></database>
</kind>
</wordnet>
</lexical_database>
</category>
</concept>
</electronic_database>
</idea>
</information>
</message>
 which combines quicksort and heapsort to retain advantages of both: worst case speed of heapsort and average speed of quicksort.</p>

</sec>
<sec>
<st>
 Pseudocode </st>

<p>

The following is the "simple" way to implement the algorithm, in <link xlink:type="simple" xlink:href="../185/24185.xml">
pseudocode</link>, where <it>swap</it> is used to swap two elements of the array. Notice that the arrays are <b><link>
zero based</link></b> in this example. 
<b>function</b> heapSort(a, count) <b>is</b>
<b>input: </b> an unordered array <it>a</it> of length <it>count</it></p>
<p>

<it>(first place a in max-heap order)</it>
heapify(a, count)</p>
<p>

end := count - 1
<b>while</b> end &amp;gt; 0 <b>do</b>
<it>(swap the root(maximum value) of the heap with the last element of the heap)</it>
swap(a[end], a[0])
<it>(decrease the size of the heap by one so that the previous max value will</it>
<it>stay in its proper placement)</it>
end := end - 1
<it>(put the heap back in max-heap order)</it>
siftDown(a, 0, end)</p>
<p>

<b>function</b> heapify(a,count) <b>is</b>
<it>(start is assigned the index in a of the last parent node)</it>
start := (count - 2) / 2</p>
<p>

<b>while</b> start ≥ 0 <b>do</b>
<it>(sift down the node at index start to the proper place such that all nodes below</it>
<it> the start index are in heap order)</it>
siftDown(a, start, count-1)
start := start - 1
<it>(after sifting down the root all nodes/elements are in heap order)</it></p>
<p>

<b>function</b> siftDown(a, start, end) <b>is</b>
<b>input: </b> <it>end represents the limit of how far down the heap</it>
<it>to sift.</it>
root := start</p>
<p>

<b>while</b> root * 2 ≤ end <b>do</b>          <it>(While the root has at least one child)</it>
child := root * 2            <it>(root*2 points to the left child)</it>
<it>(If the child has a sibling and the child's value is less than its sibling's...)</it>
<b>if</b> child + 1  end <b>and</b> a[child]  a[child + 1] <b>then</b>
child := child + 1           <it>(... then point to the right child instead)</it>
<b>if</b> a[root]  a[child] <b>then</b>       <it>(out of max-heap order)</it>
swap(a[root], a[child])
root := child                <it>(repeat to continue sifting down the child now)</it>
<b>else</b>
<b>return</b>
The heapify function can be thought of as building a heap from the bottom up, successively shifting downward to establish the heap property.  An alternate version (shown below) that builds the heap top-down and sifts upward is conceptually simpler to grasp.  This "siftUp" version can be visualized as starting with an empty heap and successively inserting elements.  However, it is asymptotically slower: the "siftDown" version is <it>O(n)</it>, and the "siftUp" version is <it>O(n log n)</it> in the worst case.  The heapsort algorithm is <it>O(n log n)</it> overall using either version of heapify.
<b>function</b> heapify(a,count) is
<it>(end is assigned the index of the first (left) child of the root)</it>
end := 1</p>
<p>

<b>while</b> end  count
<it>(sift up the node at index end to the proper place such that all nodes above</it>
<it> the end index are in heap order)</it>
siftUp(a, 0, end)
end := end + 1
<it>(after sifting up the last node all nodes are in heap order)</it></p>
<p>

<b>function</b> siftUp(a, start, end) <b>is</b>
<b>input: </b> <it>start represents the limit of how far up the heap to sift.</it>
<it>end is the node to sift up.</it>
child := end 
<b>while</b> child &amp;gt; start
parent := floor((child - 1) ÷ 2)
<b>if</b> a[parent]  a[child] <b>then</b> <it>(out of max-heap order)</it>
swap(a[parent], a[child])
child := parent <it>(repeat to continue sifting up the parent now)</it>
<b>else</b>
<b>return</b></p>

</sec>
<sec>
<st>
 References </st>
<p>

<list>
<entry level="1" type="bullet">

 <link>
J. W. J. Williams</link>. <it>Algorithm 232 - Heapsort</it>, 1964, Communications of the ACM 7(6): 347–348.</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../900/301900.xml">
Robert W. Floyd</link>. <it>Algorithm 245 - Treesort 3</it>, 1964, Communications of the ACM 7(12): 701.</entry>
<entry level="1" type="bullet">

 <link>
Svante Carlsson</link>, <it>Average-case results on heapsort</it>, 1987, BIT 27(1): 2-17.</entry>
<entry level="1" type="bullet">

 <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../095/8095.xml">
Donald Knuth</link></scientist>
</person>
. <it>The Art of Computer Programming</it>, Volume 3: <it>Sorting and Searching</it>, Third Edition. Addison-Wesley, 1997. ISBN 0-201-89685-0. Pages 144–155 of section 5.2.3: Sorting by Selection.</entry>
<entry level="1" type="bullet">

 <scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../475/4108475.xml">
Thomas H. Cormen</link></scientist>
, <scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../884/1400884.xml">
Charles E. Leiserson</link></scientist>
, <link xlink:type="simple" xlink:href="../057/68057.xml">
Ronald L. Rivest</link>, and <scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../993/3489993.xml">
Clifford Stein</link></scientist>
. <it><work wordnetid="104599396" confidence="0.8">
<product wordnetid="104007894" confidence="0.8">
<creation wordnetid="103129123" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<book wordnetid="106410904" confidence="0.8">
<publication wordnetid="106589574" confidence="0.8">
<link xlink:type="simple" xlink:href="../226/3499226.xml">
Introduction to Algorithms</link></publication>
</book>
</artifact>
</creation>
</product>
</work>
</it>, Second Edition. MIT Press and McGraw-Hill, 2001. ISBN 0-262-03293-7. Chapters 6 and 7 Respectively: Heapsort and Priority Queues</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.cs.utexas.edu/users/EWD/ewd07xx/EWD796a.PDF">
A PDF of Dijkstra's original paper on Smoothsort</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://cis.stvincent.edu/html/tutorials/swd/heaps/heaps.html">
Heaps and Heapsort Tutorial</weblink> by David Carlson, St. Vincent College</entry>
</list>
</p>

</sec>
<sec>
<st>
 Notes </st>
<p>

<reflist>
<entry id="1">
"Data Structures Using Pascal", Tenenbaum &amp; Augenstein, 1991, page 405, gives Ternary Heapsort as an exercise for the student. "Write a sorting routine similar to the heapsort except that it uses a ternary heap."</entry>
</reflist>
</p>

</sec>
<sec>
<st>
 External links </st>

<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://tide4javascript.com/?s=Heapsort">
Analyze Heapsort in an online Javascript IDE</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://24bytes.com/Heap-Sort.html">
Heapsort </weblink> </entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www2.hawaii.edu/~copley/665/HSApplet.html">
Heapsort animated</weblink> </entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.nist.gov/dads/HTML/heapSort.html">
NIST's Dictionary of Algorithms and Data Structures: Heapsort</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.azillionmonkeys.com/qed/sort.html">
Sorting revisited</weblink></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.cs.mu.oz.au/aia/HeapSort.html">
Java-based demonstration of Heapsort</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://vision.bc.edu/~dmartin/teaching/sorting/anim-html/heap.html">
A graphical demonstration and discussion of heap sort</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://coderaptors.com/?HeapSort">
A colored graphical Java applet</weblink> which allows experimentation with initial state and shows statistics</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www2.hawaii.edu/~copley/665/HSApplet.html">
Another java demonstration of Heapsort</weblink></entry>
</list>
</p>



<p>

<table style=";" class="navbox" cellspacing="0">
<row>
<col style="padding:2px;">
<table style="width:100%;background:transparent;color:inherit;;" class="nowraplinks collapsible autocollapse " cellspacing="0">
<row>
<header colspan="3" style=";" class="navbox-title">
<link xlink:type="simple" xlink:href="../442/28442.xml">
Sorting algorithm</link>s</header>
</row>
<row style="height:2px;">

</row>
<row>
<col style=";;" class="navbox-group">
Theory</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<link xlink:type="simple" xlink:href="../543/7543.xml">
Computational complexity theory</link> | <link xlink:type="simple" xlink:href="../578/44578.xml">
Big O notation</link> | <link xlink:type="simple" xlink:href="../330/30330.xml">
Total order</link> | <link xlink:type="simple" xlink:href="../382/208382.xml">
Lists</link> | <link xlink:type="simple" xlink:href="../442/28442.xml#xpointer(//*[./st=%22Stability%22])">
Stability</link> | <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../304/3189304.xml">
Comparison sort</link></database>
</wordnet>
</lexical_database>
</electronic_database>
</information>
</message>
</col>
<col style="width:0%;padding:0px 0px 0px 2px;" rowspan="15">
<image width="200px" src="SimpleSortingNetwork.svg">
</image>
</col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
Exchange sorts</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-even">
<algorithm wordnetid="105847438" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../255/4255.xml">
Bubble sort</link></algorithm>
 | <algorithm wordnetid="105847438" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../482/159482.xml">
Cocktail sort</link></algorithm>
 | <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<idea wordnetid="105833840" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<category wordnetid="105838765" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<kind wordnetid="105839024" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../945/10807945.xml">
Odd-even sort</link></database>
</kind>
</wordnet>
</lexical_database>
</category>
</concept>
</electronic_database>
</idea>
</information>
</message>
 | <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<idea wordnetid="105833840" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<category wordnetid="105838765" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<kind wordnetid="105839024" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../439/159439.xml">
Comb sort</link></database>
</kind>
</wordnet>
</lexical_database>
</category>
</concept>
</electronic_database>
</idea>
</information>
</message>
 | <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<idea wordnetid="105833840" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<category wordnetid="105838765" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<kind wordnetid="105839024" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../127/522127.xml">
Gnome sort</link></database>
</kind>
</wordnet>
</lexical_database>
</category>
</concept>
</electronic_database>
</idea>
</information>
</message>
 | <algorithm wordnetid="105847438" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../249/3268249.xml">
Quicksort</link></algorithm>
</col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
Selection sorts</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<algorithm wordnetid="105847438" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../352/29352.xml">
Selection sort</link></algorithm>
 | <algorithm wordnetid="105847438" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../995/13995.xml">
Heapsort</link></algorithm>
 | <link xlink:type="simple" xlink:href="../450/100450.xml">
Smoothsort</link></col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
Insertion sorts</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-even">
<algorithm wordnetid="105847438" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../205/15205.xml">
Insertion sort</link></algorithm>
 | <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<idea wordnetid="105833840" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<category wordnetid="105838765" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<kind wordnetid="105839024" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../355/77355.xml">
Shell sort</link></database>
</kind>
</wordnet>
</lexical_database>
</category>
</concept>
</electronic_database>
</idea>
</information>
</message>
 | <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../027/6508027.xml">
Tree sort</link></database>
</wordnet>
</lexical_database>
</electronic_database>
</information>
</message>
 | <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<idea wordnetid="105833840" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<category wordnetid="105838765" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<kind wordnetid="105839024" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../633/2448633.xml">
Library sort</link></database>
</kind>
</wordnet>
</lexical_database>
</category>
</concept>
</electronic_database>
</idea>
</information>
</message>
 | <idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<category wordnetid="105838765" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<social_event wordnetid="107288639" confidence="0.8">
<contest wordnetid="107456188" confidence="0.8">
<game wordnetid="100456199" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<kind wordnetid="105839024" confidence="0.8">
<link xlink:type="simple" xlink:href="../256/1184256.xml">
Patience sorting</link></kind>
</psychological_feature>
</game>
</contest>
</social_event>
</event>
</category>
</concept>
</idea>
</col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
Merge sorts</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<algorithm wordnetid="105847438" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../039/20039.xml">
Merge sort</link></algorithm>
 | <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<idea wordnetid="105833840" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<category wordnetid="105838765" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<kind wordnetid="105839024" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../351/14083351.xml">
Strand sort</link></database>
</kind>
</wordnet>
</lexical_database>
</category>
</concept>
</electronic_database>
</idea>
</information>
</message>
</col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
Non-comparison sorts</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-even">
<message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<idea wordnetid="105833840" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<category wordnetid="105838765" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<kind wordnetid="105839024" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../980/25980.xml">
Radix sort</link></database>
</kind>
</wordnet>
</lexical_database>
</category>
</concept>
</electronic_database>
</idea>
</information>
</message>
 | <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<idea wordnetid="105833840" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<category wordnetid="105838765" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<kind wordnetid="105839024" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../592/97592.xml">
Bucket sort</link></database>
</kind>
</wordnet>
</lexical_database>
</category>
</concept>
</electronic_database>
</idea>
</information>
</message>
 | <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<idea wordnetid="105833840" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<category wordnetid="105838765" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<kind wordnetid="105839024" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../864/99864.xml">
Counting sort</link></database>
</kind>
</wordnet>
</lexical_database>
</category>
</concept>
</electronic_database>
</idea>
</information>
</message>
 | <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<idea wordnetid="105833840" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<category wordnetid="105838765" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<kind wordnetid="105839024" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../681/24681.xml">
Pigeonhole sort</link></database>
</kind>
</wordnet>
</lexical_database>
</category>
</concept>
</electronic_database>
</idea>
</information>
</message>
 | <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../302/11517302.xml">
Burstsort</link></database>
</wordnet>
</lexical_database>
</electronic_database>
</information>
</message>
</col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
Others</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<information wordnetid="106634376" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<message wordnetid="106598915" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<link xlink:type="simple" xlink:href="../064/897064.xml">
Topological sorting</link></procedure>
</activity>
</psychological_feature>
</wordnet>
</act>
</rule>
</event>
</message>
</algorithm>
</database>
</lexical_database>
</electronic_database>
</information>
 | <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../061/562061.xml">
Sorting network</link></database>
</wordnet>
</lexical_database>
</electronic_database>
</information>
</message>
 | <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../090/2713090.xml">
Bitonic sorter</link></database>
</wordnet>
</lexical_database>
</electronic_database>
</information>
</message>
</col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
Ineffective/jokeful sorts</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-even">
<algorithm wordnetid="105847438" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../870/99870.xml">
Bogosort</link></algorithm>
 | <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<idea wordnetid="105833840" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<category wordnetid="105838765" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<kind wordnetid="105839024" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../662/563662.xml">
Stooge sort</link></database>
</kind>
</wordnet>
</lexical_database>
</category>
</concept>
</electronic_database>
</idea>
</information>
</message>
</col>
</row>
</table>
</col>
</row>
</table>
</p>


</sec>
</bdy>
</algorithm>
</kind>
</article>
