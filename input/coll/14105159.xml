<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 17.04.2009 02:17:11[mciao0825] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<event  confidence="0.8" wordnetid="100029378">
<rule  confidence="0.8" wordnetid="105846932">
<act  confidence="0.8" wordnetid="100030358">
<psychological_feature  confidence="0.8" wordnetid="100023100">
<procedure  confidence="0.8" wordnetid="101023820">
<activity  confidence="0.8" wordnetid="100407535">
<algorithm  confidence="0.8" wordnetid="105847438">
<header>
<title>Rapidly-exploring random tree</title>
<id>14105159</id>
<revision>
<id>222701209</id>
<timestamp>2008-06-30T18:13:16Z</timestamp>
<contributor>
<username>Jiuguang Wang</username>
<id>2430726</id>
</contributor>
</revision>
<categories>
<category>Robotics</category>
<category>Search algorithms</category>
</categories>
</header>
<bdy>

<image width="200px" src="RRT_graph2.png" type="thumb">
<caption>

A dense RRT graph, after 2345 iterations, demonstrating it's capability of "space filling"
</caption>
</image>

A <b>Rapidly-exploring Random Tree (RRT)</b> is a data structure and algorithm designed for efficiently searching nonconvex, high-dimensional search spaces. Simply put, the tree is constructed in such a way that any sample in the space is added by connecting it to the closest sample already in the tree.<p>

RRT has been widely used in <link xlink:type="simple" xlink:href="../673/46673.xml">
robotics</link> <link xlink:type="simple" xlink:href="../875/4562875.xml">
path planning</link>.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref></p>

<sec>
<st>
Introduction</st>

<p>

RRTs are constructed incrementally in a way that quickly reduces the expected distance of a randomly-chosen point to the tree. RRTs are particularly suited for path planning problems that involve obstacles and differential constraints (<difference wordnetid="104748836" confidence="0.8">
<link xlink:type="simple" xlink:href="../149/1425149.xml#xpointer(//*[./st=%22Robotics%22])">
nonholonomic</link></difference>
 or kinodynamic). RRTs can be considered as a technique for generating open-loop trajectories for nonlinear systems with state constraints. An RRT can be intuitively considered as a Monte-Carlo way of biasing search into largest <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../668/177668.xml">
Voronoi regions</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
. Some variations can be considered as stochastic fractals. Usually, an RRT alone is insufficient to solve a planning problem. Thus, it can be considered as a component that can be incorporated into the development of a variety of different planning algorithms.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%222%22])">2</ref></p>

</sec>
<sec>
<st>
Algorithm</st>

<p>

For a general <link xlink:type="simple" xlink:href="../596/473596.xml">
configuration space</link> <it>C</it>, the algorithm in <link xlink:type="simple" xlink:href="../185/24185.xml">
pseudocode</link> is as follows:</p>

<p>

<b>Algorithm</b> BuildRRT
Input: Initial configuration <it>qinit</it>, number of vertices in RRT <it>K</it>, incremental distance <it>Δq</it>)
Output: RRT graph <it>G</it></p>
<p>

<it>G</it>.init(<it>qinit</it>)
<b>for</b> <it>k</it> = 1 <b>to</b> <it>K</it>
<it>qrand</it> ← RAND_CONF()
<it>qnear</it> ← NEAREST_VERTEX(<it>qrand</it>, <it>G</it>)
<it>qnew</it> ← NEW_CONF(<it>qnear</it>, <it>Δq</it>)
<it>G</it>.add_vertex(<it>qnew</it>)
<it>G</it>.add_edge(<it>qnear</it>, <it>qnew</it>)
<b>return</b> <it>G</it></p>
<p>

<list>
<entry level="1" type="bullet">

"&amp;larr;" is a loose shorthand for "changes to".  For instance, "<it>largest</it> &amp;larr; <it>item</it>" means that the value of <it>largest</it> changes to the value of <it>item</it>.</entry>
<entry level="1" type="bullet">

"<b>return</b>" terminates the algorithm and outputs the value that follows.</entry>
</list>
</p>

<p>

In the algorithm above, "<b>RAND_CONF</b>" grabs a random configuration <it>qrand</it> in <it>C</it>. This may be replaced with a function "<b>RAND_FREE_CONF</b>" that uses samples in <it>Cfree</it>, while rejecting those in <it>Cobs</it> using some collision detection algorithm.</p>
<p>

"<b>NEAREST_VERTEX</b>" is a straight-forward function that runs through all vertexes <it>v</it> in graph <it>G</it>, calculates the distance between <it>qrand</it> and <it>v</it> using some measurement function thereby returning the nearest vector.</p>
<p>

"<b>NEW_CONF</b>" selects a new configuration <it>qnew</it> by moving an incremental distance <it>Δq</it> from <it>qnear</it> in the direction of <it>qrand</it>.</p>

<ss1>
<st>
Visualization</st>

<p>

<image location="center" width="300px" src="RRT_graph1.png" type="thumb">
<caption>

A visualization of a RRT graph after 45 and 390 iterations
</caption>
</image>
</p>

</ss1>
</sec>
<sec>
<st>
References</st>

<p>

<reflist>
<entry id="1">
 <cite style="font-style:normal">Lavalle, S.M.&#32;(1998).&#32;"<weblink xlink:type="simple" xlink:href="http://citeseer.ist.psu.edu/311812.html">
Rapidly-exploring random trees: A new tool for path planning</weblink>". <it>Computer Science Dept, Iowa State University, Tech. Rep. TR</it>: 98-11. Retrieved on <link>
2008-06-30</link>.</cite>&nbsp;</entry>
<entry id="2">
http://msl.cs.uiuc.edu/rrt/about.html About RRTs, by Steve LaValle</entry>
</reflist>
</p>

</sec>
</bdy>
</algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</article>
