<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 18:31:30[mciao0825] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<system  confidence="0.8" wordnetid="104377057">
<artifact  confidence="0.8" wordnetid="100021939">
<instrumentality  confidence="0.8" wordnetid="103575240">
<header>
<title>IDMS</title>
<id>1419779</id>
<revision>
<id>228427062</id>
<timestamp>2008-07-28T17:21:06Z</timestamp>
<contributor>
<username>Mhkay</username>
<id>405026</id>
</contributor>
</revision>
<categories>
<category>Proprietary database management systems</category>
</categories>
</header>
<bdy>

<b>IDMS</b> (Integrated Database Management System) is a (<link xlink:type="simple" xlink:href="../098/185098.xml">
network</link>) <information wordnetid="105816287" confidence="0.8">
<datum wordnetid="105816622" confidence="0.8">
<link xlink:type="simple" xlink:href="../351/309351.xml">
CODASYL</link></datum>
</information>
 <link xlink:type="simple" xlink:href="../513/8513.xml">
database management system</link> first developed at <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../211/515211.xml">
B.F. Goodrich</link></company>
 and later marketed by Cullinane Database Systems (renamed <company wordnetid="108058098" confidence="0.8">
<institution wordnetid="108053576" confidence="0.8">
<link xlink:type="simple" xlink:href="../261/1973261.xml">
Cullinet</link></institution>
</company>
 in 1983). Since 1989 the product has been owned by <link xlink:type="simple" xlink:href="../752/422752.xml">
Computer Associates</link>, who renamed it <b>CA-IDMS</b>.
<sec>
<st>
History</st>
<p>

The roots of IDMS go back to Dr. <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../387/301387.xml">
Charles Bachman</link></scientist>
</person>
's IDS (<system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../750/1362750.xml">
Integrated Data Store</link></instrumentality>
</artifact>
</system>
), an early database engine developed at <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../730/12730.xml">
General Electric</link></company>
.</p>
<p>

In the early 1960s IDS was taken from its original form, by the Computer Group of the B.F. Goodrich Chemical Division, and re-written in a language called ISL (Intermediate System Language).  ISL was designed as a portable <link xlink:type="simple" xlink:href="../805/472805.xml">
system programming language</link> able to produce code for a variety of target machines.  Since ISL was actually written in its own language (ISL) it was able to be ported to other machine architectures with relative ease, and then to produce code that would execute on them.</p>
<p>

The Chemical Division computer group had given some thought to selling copies of IDMS to other companies, but was told by management that they were not in the software products business.  Eventually a deal was struck with John Cullinane to buy the rights and market the product.</p>
<p>

Because Cullinane was required to remit royalties back to <link xlink:type="simple" xlink:href="../733/530733.xml">
B.F. Goodrich</link>, all add-on products were listed and billed as separate products - even if they were mandatory for the core IDMS product to work. This sometimes confused customers.</p>
<p>

The original platforms were the GE 235 computer and GE Datanet 30 message switching computer: later the product was ported to IBM mainframes and to <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../952/7952.xml">
DEC</link></company>
 and <company wordnetid="108058098" confidence="0.8">
<institution wordnetid="108053576" confidence="0.8">
<link xlink:type="simple" xlink:href="../789/515789.xml">
ICL</link></institution>
</company>
 hardware.</p>
<p>

The IBM-ported version runs on <link xlink:type="simple" xlink:href="../872/14872.xml">
IBM mainframe</link> systems (<link xlink:type="simple" xlink:href="../294/29294.xml">
System/360</link>, <link xlink:type="simple" xlink:href="../785/59785.xml">
System/370</link>, <link xlink:type="simple" xlink:href="../266/1856266.xml">
System/390</link>, <link xlink:type="simple" xlink:href="../088/3968088.xml">
zSeries</link>, <link xlink:type="simple" xlink:href="../789/2458789.xml">
System z9</link>). In the mid-1980s, it was claimed that some 2,500 IDMS licenses had been sold. Users included the Strategic Air Command, Ford of Canada, Royal Insurance, Manulife, Hudson's Bay Company, Cleveland Clinic, Bank of Canada and <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../642/4642.xml">
BT</link></company>
 in the UK.</p>
<p>

A version for use on the DECSYSTEM series of computers was sold to DEC and was marketed as DBMS10 and later DBMS20.</p>
<p>

In 1976 the source code was sold to <company wordnetid="108058098" confidence="0.8">
<institution wordnetid="108053576" confidence="0.8">
<link xlink:type="simple" xlink:href="../789/515789.xml">
ICL</link></institution>
</company>
, who ported the software to run on their <platform wordnetid="103961939" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<surface wordnetid="104362025" confidence="0.8">
<horizontal_surface wordnetid="103536348" confidence="0.8">
<link xlink:type="simple" xlink:href="../049/2811049.xml">
2900 series</link></horizontal_surface>
</surface>
</artifact>
</platform>
 mainframes, and subsequently also on the older <link xlink:type="simple" xlink:href="../278/1977278.xml">
1900 range</link>. ICL continued development of the software independently of Cullinane, selling the original ported product under the original name <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../743/75743.xml#xpointer(//*[./st=%22Application+Development+Tools%22])">
IDMS</link></O>
 and an enhanced version as <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../743/75743.xml#xpointer(//*[./st=%22Application+Development+Tools%22])">
IDMSX</link></O>
. In this form it was used by many large UK users, an example being the Pay-As-You-Earn system operated by the UK Inland Revenue. Many of these systems are still running in 2005.</p>
<p>

In the early to mid 1980s, <link xlink:type="simple" xlink:href="../743/98743.xml">
relational database management system</link>s started to become more popular, encouraged by increasing hardware power and the move to <link xlink:type="simple" xlink:href="../272/20272.xml">
minicomputer</link>s and <link xlink:type="simple" xlink:href="../513/6513.xml">
client-server</link> architecture. Relational databases offered improved development productivity over <information wordnetid="105816287" confidence="0.8">
<datum wordnetid="105816622" confidence="0.8">
<link xlink:type="simple" xlink:href="../351/309351.xml">
CODASYL</link></datum>
</information>
 systems, and the traditional objections based on poor performance were steadily diminishing.</p>
<p>

<company wordnetid="108058098" confidence="0.8">
<institution wordnetid="108053576" confidence="0.8">
<link xlink:type="simple" xlink:href="../261/1973261.xml">
Cullinet</link></institution>
</company>
 attempted to compete against <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../259/18622259.xml">
IBM</link></company>
's <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../983/142983.xml">
DB2</link></instrumentality>
</artifact>
</system>
 and other relational databases by developing a relational front-end and a range of productivity tools. These included Automatic System Facility (ASF), which made use of a pre-existing IDMS feature called LRF (Logical Record Facility). ASF was a fill-in-the-blanks database generator that would also develop a mini-application to maintain the tables.</p>
<p>

It is difficult to judge whether such features may have been successful in extending the selling life of the product, but they made little impact in the long term. Those users who stayed with IDMS were primarily interested in its high performance, not in its relational capabilities. It was widely recognized (helped by a high-profile campaign by <link xlink:type="simple" xlink:href="../548/93548.xml">
E. F. Codd</link>, the father of the <link xlink:type="simple" xlink:href="../220/26220.xml">
relational model</link>) that there was a significant difference between a relational database and a network database with a relational veneer.</p>
<p>

IDMS legacy systems are still being run today. Few customers have migrated to Cullinet's other database offering IDMS/R.</p>

</sec>
<sec>
<st>
Integrated Data Dictionary</st>
<p>

One of the sophisticated features of IDMS was its built-in Integrated <link xlink:type="simple" xlink:href="../139/645139.xml">
Data Dictionary</link> (IDD). The IDD was primarily developed to maintain database definitions. It was itself an IDMS database.</p>
<p>

DBAs (database administrators) and other users interfaced with the IDD using a language called Data Dictionary Definition Language (DDDL).</p>
<p>

IDD was also used to store definitions and code for other products in the IDMS family such as ADS/Online and IDMS-DC.</p>
<p>

IDD's power was that it was extensible and could be used to create definitions of just about anything. Some companies used it to develop in-house doumentation.</p>

</sec>
<sec>
<st>
Overview</st>

<ss1>
<st>
Logical Data Model</st>
<p>

The data model offered to users is the <information wordnetid="105816287" confidence="0.8">
<datum wordnetid="105816622" confidence="0.8">
<link xlink:type="simple" xlink:href="../351/309351.xml">
CODASYL</link></datum>
</information>
 network model. The main structuring concepts in this model are records and sets. <b>Records</b> essentially follow the <link xlink:type="simple" xlink:href="../799/6799.xml">
COBOL</link> pattern, consisting of fields of different types: this allows complex internal structure such as repeating items and repeating groups. </p>
<p>

The most distinctive structuring concept in the Codasyl model is the <b>set</b>. Not to be confused with a mathematical set, a Codasyl set represents a one-to-many relationship between records: one owner, many members. The fact that a record can be a member in many different sets is the key factor that distinguishes the network model from the earlier <link xlink:type="simple" xlink:href="../075/247075.xml">
hierarchical model</link>. As with records, each set belongs to a named set type (different set types model different logical relationships). Sets are in fact ordered, and the sequence of records in a set can be used to convey information. A record can participate as an owner and member of any number of sets.</p>
<p>

Records have identity, the identity being represented by a value known as a <b>database key</b>. In IDMS, as in most other Codasyl implementations, the database key is directly related to the physical address of the record on disk. Database keys are also used as pointers to implement sets in the form of linked lists and trees. This close correspondence between the logical model and the physical implementation (which is not a strictly necessary part of the Codasyl model, but was a characteristic of all successful implementations) is responsible for the efficiency of database retrieval, but also makes operations such as database loading and restructuring rather expensive.</p>
<p>

Records can be accessed directly by database key, by following set relationships, or by direct access using key values. Initially the only direct access was through hashing, a mechanism known in the Codasyl model as CALC access. In IDMS, CALC access is implemented through an internal set, linking all records that share the same hash value to an owner record that occupies the first few bytes of every disk page.</p>
<p>

In subsequent years, some versions of IDMS added the ability to access records using BTree-like indexes.</p>

</ss1>
<ss1>
<st>
 Storage </st>
<p>

IDMS organizes its databases as a series of files. These files are mapped and pre-formatted into so-called <b>areas</b>. The areas are subdivided into pages which correspond to physical blocks on the disk. The database records are stored within these blocks.</p>
<p>

The DBA allocates a fixed number of pages in a file for each area. The DBA then defines which records are to be stored in each area, and details of how they are to be stored.</p>
<p>

IDMS intersperses special space-allocation pages throughout the database. These pages are used to keep track of the free space available in each page in the database. To reduce I/O requirements, the free space is only tracked for all pages when the free space for the area falls below 30%.</p>
<p>

Three methods are available for storing records in an IDMS database: Sequential, CALC, and VIA. </p>
<p>

Sequential placement (not to be confused with indexed sequential), simply places each new record at the end of the area. This option is rarely used.</p>
<p>

CALC uses a hashing algorithm to decide where to place the record; the hash key then provides efficient retrieval of the record. The entire CALC area is preformatted each with a header consisting of a special CALC "owner" record. The hashing algorithm determines a page number (from which the physical disk address can be determined), and the record is then stored on this page, or as near as possible to it, and is linked to the header record on that page using the CALC set. The CALC records are linked to the page's CALC Owner record using a single link-list (pointers). The CALC Owner located in the page header thusly owns the set of all records which target to its particular page (whether the records are stored on that page or, in the case of an overflow, on another page ).</p>
<p>

CALC provides extremely efficient storage and retrieval: IDMS can retrieve a CALC record in 1.1 I/O operations. However, the method does not cope well with changes to the value of the primary key, and expensive reorganization is needed if the number of pages needs to be expanded.</p>
<p>

VIA placement attempts to store a record near its owner in a particular set. Usually the records are clustered on the same physical page as the owner. This leads to efficient navigation when the record is accessed by following that set relationship. (VIA allows records to be stored in a different IDMS area so that they can be store separately from the owner, yet remain clustered together for efficiency.)</p>
<p>

Sets are generally maintained as linked lists, using the database key as a pointer. Every record includes a forwards link to the next record; the database designer can choose whether to include owner pointers and prior pointers (if not provided, navigation in those directions will be slower).</p>
<p>

Some versions of IDMS subsequently included the ability to define indexes: either record indexes, allowing records to be located from knowledge of a secondary key, or set indexes, allowing the members of a set to be retrieved by key value.</p>

</ss1>
</sec>
<sec>
<st>
See also</st>
<p>

<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../730/2663730.xml">
Datacom</link></entry>
<entry level="1" type="bullet">

 IBM <link xlink:type="simple" xlink:href="../260/391260.xml">
Information Management System</link></entry>
</list>
</p>

</sec>
<sec>
<st>
External links</st>
<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.ca.com/us/products/product.aspx?id=1006">
Advantage CA-IDMS</weblink></entry>
</list>
</p>

</sec>
</bdy>
</instrumentality>
</artifact>
</system>
</article>
