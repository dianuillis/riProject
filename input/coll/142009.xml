<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 16:16:45[mciao0828] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>Loss of significance</title>
<id>142009</id>
<revision>
<id>188719465</id>
<timestamp>2008-02-03T02:23:25Z</timestamp>
<contributor>
<username>Britans</username>
<id>7812149</id>
</contributor>
</revision>
<categories>
<category>Numerical analysis</category>
</categories>
</header>
<bdy>

<b>Loss of significance</b> is an undesirable effect in calculations using <link xlink:type="simple" xlink:href="../376/11376.xml">
floating-point</link> arithmetic. It occurs when an operation on two numbers increases <link xlink:type="simple" xlink:href="../422/640422.xml">
relative error</link> substantially more than it increases <link xlink:type="simple" xlink:href="../422/640422.xml">
absolute error</link>, for example in subtracting two large and nearly equal numbers. The effect is that the number of <link xlink:type="simple" xlink:href="../062/317062.xml">
accurate (significant) digits</link> in the result is reduced unacceptably. Ways to avoid this effect are studied in <link xlink:type="simple" xlink:href="../506/21506.xml">
numerical analysis</link>.<p>

In floating-point arithmetic, only a limited number of digits of the number 
are maintained; floating-point numbers can only approximate most real numbers.  </p>
<p>

Consider the <link xlink:type="simple" xlink:href="../491/19725491.xml">
real number</link></p>
<p>

<indent level="1">

<math>0.1234567891234567890.</math>
</indent>

A floating-point representation of this number on a machine
that keeps 10 floating-point digits would be </p>
<p>

<indent level="1">

<math>0.1234567891,</math>
</indent>

which is fairly close &mdash; the difference is very small in
comparison with either of the two numbers.</p>
<p>

Now perform the calculation</p>
<p>

<indent level="1">

<math>0.1234567891234567890 - 0.1234567890.</math>
</indent>

The real answer, accurate to 10 digits, is</p>
<p>

<indent level="1">

<math>0.0000000001234567890.</math>
</indent>

However, on the 10-digit floating-point machine, the calculation yields</p>
<p>

<indent level="1">

<math>0.1234567891 - 0.1234567890 = 0.0000000001.</math>
</indent>

Whereas the original numbers are accurate in all of the first
(most significant) 10 digits, their floating-point difference
is only accurate in its first digit.  This amounts to loss
of information.</p>
<p>

It is possible to do computations using an exact representation of <link xlink:type="simple" xlink:href="../024/19727024.xml">
rational number</link>s and keep all significant digits, but this is often prohibitively slower than floating-point arithmetic.  Furthermore, it usually only postpones
the problem:  What if the data is accurate to only 10 digits?
The same effect will occur.</p>
<p>

One of the most important parts of numerical analysis is to avoid
or minimize loss of significance in calculations.  If the underlying
problem is <link xlink:type="simple" xlink:href="../673/176673.xml">
well-posed</link>, there should be a 
<link xlink:type="simple" xlink:href="../807/233807.xml">
stable algorithm</link> for solving it.  The art is in finding a stable algorithm.</p>

<sec>
<st>
 Loss of significant bits </st>

<p>

Let <it>x</it> and <it>y</it> be positive normalized floating point numbers.</p>
<p>

In the subtraction <it>x</it> âˆ’ <it>y</it>, <it>r</it> significant bits are lost where</p>
<p>

<indent level="1">

<math>q \le r \le p </math>
</indent>

<indent level="1">

<math>2^{-p} \le 1 - \frac{y}{x} \le 2^{-q} </math>
</indent>

for some positive integers <it>p</it> and <it>q</it>.</p>

</sec>
<sec>
<st>
 Instability of the quadratic equation </st>

<p>

For example, consider the venerable <link xlink:type="simple" xlink:href="../175/25175.xml">
quadratic equation</link></p>
<p>

<indent level="1">

<math>a x^2 + b x + c = 0.</math>
</indent>

The quadratic equation gives the two solutions as</p>
<p>

<indent level="1">

<math> x = \frac{-b \pm \sqrt{b^2 - 4ac}}{2a}.</math>
</indent>

The case <math>a = 1</math>, <math>b = 200</math>, <math>c = -0.000015</math> will serve to illustrate the problem:</p>
<p>

<indent level="1">

<math>x^2 + 200 x - 0.000015 = 0.</math>
</indent>

We have</p>
<p>

<indent level="1">

<math>\sqrt{b^2 - 4 a c} = \sqrt{200^2 + 4 \times 1 \times 0.000015} = 200.00000015...</math>
</indent>

In real arithmetic, the roots are</p>
<p>

<indent level="1">

<math>( -200 - 200.00000015 ) / 2 = -200.000000075,</math>
</indent>
:<math>( -200 + 200.00000015 ) / 2 = .000000075.</math></p>
<p>

In 10-digit floating-point arithmetic,</p>
<p>

<indent level="1">

<math>( -200 - 200.0000001 ) / 2 = -200.00000005,</math>
</indent>
:<math>( -200 + 200.0000001 ) / 2 = .00000005.</math></p>
<p>

Notice that the solution of greater <link xlink:type="simple" xlink:href="../991/991.xml">
magnitude</link> is accurate to ten digits, but the first nonzero digit of the solution of lesser magnitude is wrong.</p>
<p>

Because of the subtraction that occurs in the quadratic equation,
it does not constitute a stable algorithm to calculate the
two roots.</p>

</sec>
<sec>
<st>
 A better algorithm </st>

<p>

A better algorithm for solving quadratic equations is based on two observations: that one solution is always accurate when the other is not, and 
that given one solution of the quadratic, the other is easy to find.</p>
<p>

If
<indent level="1">

<math> x_1 = \frac{-b + \sqrt{b^2 - 4ac}}{2a} </math>
</indent>

and
<indent level="1">

<math> x_2 = \frac{2c}{-b + \sqrt{b^2 - 4ac}} </math>
</indent>

then we have the identity</p>
<p>

<indent level="1">

<math>x_1 x_2 = c / a \ </math>.
</indent>

The algorithm is as follows.  Use the quadratic formula to find the solution of greater magnitude, which <it>does not</it> suffer from loss of precision.
Then use this identity to calculate the other root.  Since no
subtraction is involved, no loss of precision occurs.</p>
<p>

Applying this algorithm to our problem, and using 10-digit floating-point
arithmetic, the solution of greater magnitude, as before, is
<math>x_1 = -200.00000005.</math>  The other solution is then</p>
<p>

<indent level="1">

<math> x_2 = c / (-200.00000005) = 0.000000075,</math>
</indent>

which is accurate.
</p>

</sec>
</bdy>
</article>
