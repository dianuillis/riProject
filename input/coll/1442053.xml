<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 18:33:02[mciao0827] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>Reyes rendering</title>
<id>1442053</id>
<revision>
<id>240650249</id>
<timestamp>2008-09-24T10:08:22Z</timestamp>
<contributor>
<username>Korval</username>
<id>773706</id>
</contributor>
</revision>
<categories>
<category>3D computer graphics</category>
</categories>
</header>
<bdy>

<image width="250px" src="Reyes-pipeline.gif" type="thumb">
<caption>

Reyes rendering pipeline
</caption>
</image>

<b>Reyes rendering</b> is a computer software architecture used in <process wordnetid="100029677" confidence="0.8">
<physical_entity wordnetid="100001930" confidence="0.8">
<phenomenon wordnetid="100034213" confidence="0.8">
<consequence wordnetid="111410625" confidence="0.8">
<link xlink:type="simple" xlink:href="../073/10175073.xml">
3D computer graphics</link></consequence>
</phenomenon>
</physical_entity>
</process>
 to <link xlink:type="simple" xlink:href="../604/6604.xml">
render</link> photo-realistic images. It was developed in the mid-1980s by <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../872/80872.xml">
Lucasfilm</link></company>
's Computer Graphics Research Group, which is now <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../969/78969.xml">
Pixar</link></company>
. It was first used in 1982 to render images for the <it>Genesis effect</it> sequence in the movie . Pixar's <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../043/1442043.xml">
PhotoRealistic RenderMan</link></instrumentality>
</artifact>
</system>
 is one implementation of the Reyes algorithm.
According to the original paper describing the algorithm the Reyes image rendering system is "An architecture ... for fast high-quality rendering of complex images." Reyes was proposed as a collection of algorithms and data processing systems. However the terms "algorithm" and "architecture" have come to be used synonymously and are used interchangeably in this article.<p>

<it>Reyes</it> is an acronym for <it>Renders Everything You Ever Saw</it> (the name is also a pun on <natural_elevation wordnetid="109366317" confidence="0.8">
<promontory wordnetid="109399592" confidence="0.8">
<land wordnetid="109334396" confidence="0.8">
<geological_formation wordnetid="109287968" confidence="0.8">
<peninsula wordnetid="109388848" confidence="0.8">
<link xlink:type="simple" xlink:href="../178/572178.xml">
Point Reyes</link></peninsula>
</geological_formation>
</land>
</promontory>
</natural_elevation>
, California, near where Lucasfilm was located) and is suggestive of processes connected with optical imaging systems.</p>
<p>

The architecture was designed with a number of goals in mind:</p>
<p>

<list>
<entry level="1" type="bullet">

<b>Model Complexity/Diversity</b>: In order to generate visually complex and rich images users of a rendering system need to be free to model large numbers (100,000s) of complex geometric structures possibly generated using procedural models such as fractals and particle systems.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

<b>Shading Complexity</b>: Much of the visual complexity in a scene is generated by the way in which light rays interacts with solid object surfaces. Generally in computer graphics this is modelled using textures. Textures can be colored arrays of pixels, describe surface displacements or transparency or surface reflectivity. Reyes allows users to incorporate procedural shaders whereby surface structure and optical interaction is achieved using computer programs implementing procedural algorithms rather than simple look-up tables. A good portion of the algorithm is aimed at minimising the time spent by processors fetching textures from data stores.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

<b>Minimal Ray Tracing</b>: At the time that Reyes was proposed, computer systems were significantly less capable in terms of processing power and storage. This meant that <link xlink:type="simple" xlink:href="../193/17884193.xml">
ray tracing</link> a photo-realistic scene would take tens or hundreds of hours per frame. Algorithms such as Reyes which didn't generally ray trace run much faster with almost photo-realistic results.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

<b>Speed</b>: Rendering a two-hour movie at 24 frames per second in one year allows 3 minutes rendering time per frame, on average.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

<b>Image Quality</b>: Any image generated algorithm related artifacts are considered unacceptable.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

<b>Flexibility</b>: The architecture should be flexible enough to incorporate new techniques as they become available, without the need for a complete reimplementation of the algorithm.</entry>
</list>
</p>
<p>

Reyes efficiently achieves several effects that were deemed necessary for film-quality rendering: smooth curved surfaces, surface texturing, <link xlink:type="simple" xlink:href="../175/173175.xml">
motion blur</link>, and <link xlink:type="simple" xlink:href="../367/8367.xml">
depth of field</link>.</p>
<p>

Reyes renders curved surfaces, such as those represented by <link>
parametric patch</link>es, by dividing them into <it><link xlink:type="simple" xlink:href="../711/1872711.xml">
micropolygon</link>s</it>, small quadrilaterals each less than one pixel in size. Although many micropolygons are necessary to approximate curved surfaces accurately, they can be processed with simple, <link xlink:type="simple" xlink:href="../162/145162.xml">
parallelizable</link> operations. A Reyes renderer <link xlink:type="simple" xlink:href="../671/321671.xml">
tessellate</link>s high-level primitives into micropolygons on demand, dividing each primitive only as finely as necessary to appear smooth in the final image.</p>
<p>

Next, a shader system assigns a color and opacity to each micropolygon. Most Reyes renderers allow users to supply arbitrary lighting and texturing functions written in a <link xlink:type="simple" xlink:href="../200/1655200.xml">
shading language</link>. Micropolygons are processed in large grids which allow computations to be <link xlink:type="simple" xlink:href="../205/58205.xml">
vectorized</link>.</p>
<p>

Shaded micropolygons are sampled in screen space to produce the output image. Reyes employs an innovative hidden-surface algorithm or <it>hider</it> which performs the necessary integrations for motion blur and depth of field without requiring more geometry or shading samples than an unblurred render would need. The hider accumulates micropolygon colors at each pixel across time and lens position using a <technique wordnetid="105665146" confidence="0.8">
<know-how wordnetid="105616786" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<link xlink:type="simple" xlink:href="../098/56098.xml">
Monte Carlo method</link></method>
</know-how>
</technique>
 called <it><link>
stochastic sampling</link></it>.</p>
<p>

The basic Reyes <link xlink:type="simple" xlink:href="../951/1441951.xml">
pipeline</link> has the following steps:</p>
<p>

<list>
<entry level="1" type="number">

 <it>Bound.</it> Calculate the <link xlink:type="simple" xlink:href="../106/657106.xml">
bounding volume</link> of each geometric primitive.</entry>
<entry level="1" type="number">

 <it>Split.</it> Split large primitives into smaller, diceable primitives.</entry>
<entry level="1" type="number">

 <it>Dice.</it> Convert the primitive into a grid of micropolygons, each approximately the size of a pixel.</entry>
<entry level="1" type="number">

 <it>Shade.</it> Calculate lighting and shading at each vertex of the micropolygon grid.</entry>
<entry level="1" type="number">

 <it>Bust</it> the grid into individual micropolygons, each of which is bounded and checked for visibility.</entry>
<entry level="1" type="number">

 <it>Hide.</it> Sample the micropolygons, producing the final 2D image.</entry>
</list>
</p>
<p>

In this design, the renderer must store the entire frame buffer in memory since the final image cannot be output until all primitives have been processed. A common memory optimization introduces a step called <it>bucketing</it> prior to the dicing step. The output image is divided into a coarse grid of "buckets," each typically 16 by 16 pixels in size. The objects are then split roughly along the bucket boundaries and placed into buckets based on their location. Each bucket is diced and drawn individually, and the data from the previous bucket is discarded before the next bucket is processed. In this way only a frame buffer for the current bucket and the high-level descriptions of all geometric primitives must be maintained in memory. For typical scenes, this leads to a significant reduction in memory usage compared to the unmodified Reyes algorithm.</p>

<sec>
<st>
 Reyes renderers </st>
<p>

The following renderers use the Reyes algorithm in one way or the other or at least allow users to select it to produce their images:
<list>
<entry level="1" type="bullet">

<software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../460/4459460.xml">
Digits 'n Art's 3Delight</link></software>
 (<weblink xlink:type="simple" xlink:href="http://www.3delight.com/">
link</weblink>)</entry>
<entry level="1" type="bullet">

<software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../076/4459076.xml">
Aqsis</link></software>
 (<weblink xlink:type="simple" xlink:href="http://www.aqsis.org/">
link</weblink>)</entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../297/5751297.xml">
jrMan</link> (<weblink xlink:type="simple" xlink:href="http://jrman.sourceforge.net/">
link</weblink>)</entry>
<entry level="1" type="bullet">

<system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../043/1442043.xml">
Pixar's RenderMan Pro Server &amp; RenderMan for Maya</link></instrumentality>
</artifact>
</system>
 ([https://renderman.pixar.com/ link])</entry>
<entry level="1" type="bullet">

<link>
Pixels 3d Renderer</link> (<weblink xlink:type="simple" xlink:href="http://www.pixels.net/">
link</weblink>)</entry>
<entry level="1" type="bullet">

<software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../242/4459242.xml">
Pixie</link></software>
 (<weblink xlink:type="simple" xlink:href="http://pixie.sourceforge.net/">
link</weblink>)</entry>
<entry level="1" type="bullet">

<link>
DotC Software's RenderDotC</link> (<weblink xlink:type="simple" xlink:href="http://www.dotcsw.com/">
link</weblink>)</entry>
<entry level="1" type="bullet">

<link>
SideFX's Mantra</link> (<weblink xlink:type="simple" xlink:href="http://www.sidefx.com/">
link</weblink>)</entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../243/366243.xml">
e frontier Poser's FireFly</link> (<weblink xlink:type="simple" xlink:href="http://www.e-frontier.com/">
link</weblink>)</entry>
</list>
</p>

</sec>
<sec>
<st>
 References </st>

<p>

<list>
<entry level="1" type="bullet">

 <physical_entity wordnetid="100001930" confidence="0.8">
<peer wordnetid="109626238" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<intellectual wordnetid="109621545" confidence="0.8">
<colleague wordnetid="109935990" confidence="0.8">
<alumnus wordnetid="109786338" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<adult wordnetid="109605289" confidence="0.8">
<professional wordnetid="110480253" confidence="0.8">
<scholar wordnetid="110557854" confidence="0.8">
<associate wordnetid="109816771" confidence="0.8">
<link xlink:type="simple" xlink:href="../766/1991766.xml">
Robert L. Cook</link></associate>
</scholar>
</professional>
</adult>
</causal_agent>
</alumnus>
</colleague>
</intellectual>
</person>
</peer>
</physical_entity>
., <physical_entity wordnetid="100001930" confidence="0.8">
<peer wordnetid="109626238" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<colleague wordnetid="109935990" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<adult wordnetid="109605289" confidence="0.8">
<professional wordnetid="110480253" confidence="0.8">
<associate wordnetid="109816771" confidence="0.8">
<link xlink:type="simple" xlink:href="../118/1994118.xml">
Loren Carpenter</link></associate>
</professional>
</adult>
</causal_agent>
</colleague>
</person>
</peer>
</physical_entity>
, and <physical_entity wordnetid="100001930" confidence="0.8">
<peer wordnetid="109626238" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<good_person wordnetid="110138767" confidence="0.8">
<colleague wordnetid="109935990" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<adult wordnetid="109605289" confidence="0.8">
<saint wordnetid="110546850" confidence="0.8">
<professional wordnetid="110480253" confidence="0.8">
<associate wordnetid="109816771" confidence="0.8">
<link xlink:type="simple" xlink:href="../051/174051.xml">
Edwin Catmull</link></associate>
</professional>
</saint>
</adult>
</scientist>
</causal_agent>
</colleague>
</good_person>
</person>
</peer>
</physical_entity>
. "<weblink xlink:type="simple" xlink:href="http://graphics.pixar.com/Reyes/">
The Reyes Image Rendering Architecture</weblink>." <it>Computer Graphics (<social_group wordnetid="107950920" confidence="0.8">
<meeting wordnetid="108307589" confidence="0.8">
<gathering wordnetid="107975026" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<conference wordnetid="108308497" confidence="0.8">
<link xlink:type="simple" xlink:href="../279/29279.xml">
SIGGRAPH</link></conference>
</group>
</gathering>
</meeting>
</social_group>
 '87 Proceedings)</it>, pp. 95&ndash;102.</entry>
<entry level="1" type="bullet">

 <link>
Anthony A. Apodaca</link> and <link>
Larry Gritz</link>. <it>Advanced RenderMan: Creating CGI for Motion Pictures</it>. Morgan Kaufmann Publishers. ISBN 1-55860-618-1</entry>
</list>
</p>

</sec>
<sec>
<st>
 External links </st>
<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.virtualritz.com/essays/reyes-primitives-some-philosophy/">
REYES, Primitives &amp; Some Philosophy</weblink></entry>
</list>
</p>

</sec>
</bdy>
</article>
