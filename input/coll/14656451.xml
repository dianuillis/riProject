<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 17.04.2009 02:37:57[mciao0827] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>Kernelization</title>
<id>14656451</id>
<revision>
<id>209517674</id>
<timestamp>2008-05-01T18:52:08Z</timestamp>
<contributor>
<username>Andreas Kaufmann</username>
<id>72502</id>
</contributor>
</revision>
<categories>
<category>Computational complexity theory</category>
<category>Theoretical computer science</category>
</categories>
</header>
<bdy>

In <link xlink:type="simple" xlink:href="../323/5323.xml">
computer science</link>, <b>kernelization</b> is a technique for creating <link xlink:type="simple" xlink:href="../775/775.xml">
algorithms</link> for <link xlink:type="simple" xlink:href="../026/603026.xml">
fixed-parameter tractable</link> problems. Given some language L, the input to a fixed-parameter tractable problem is a pair <math>(x, k)</math> where x is a word from L and k is an integer, called the parameter. Fixed-parameter tractability is used for problems that are <link>
intractable</link>, but where it is possible to limit the <link xlink:type="simple" xlink:href="../191/58191.xml">
exponential</link> part of the runtime to some parameter k, such that the total time becomes <math>f(k) * |x|^{O(1)}</math>, where the function f only depends on k, and not on the size of x.

<sec>
<st>
Definition</st>
<p>

The idea of kernelization is to reduce the size of the input x to a function of k in polynomial time. When the input is bounded by k, we can use any exponential time algorithm, for example <link xlink:type="simple" xlink:href="../127/103127.xml">
brute-force search</link>, to find the solution. We say that a problem is kernelizable if there is a kernelization algorithm for it. More formally, a language L is kernelizable if there exists a polynomial-time algorithm that on input (x, k) creates an output (x', k') such that (x, k) is in L if and only if (x', k') is in L, and further that k' is upper bounded by a function of k and the size of x' is upper bounded by a function of k'.</p>

</sec>
<sec>
<st>
Kernelization and fixed-parameter tractability</st>
<p>

A problem is fixed-parameter tractable if and only if it is kernelizable and <link xlink:type="simple" xlink:href="../874/53874.xml">
decidable</link>. That a kernelizable and decidable problem is fixed-parameter tractable, can be seen from the definition above. Use the kernelization algorithm, which uses <math>O(|x|^c)</math> time for some c, and then solve the output from the kernelization in time <math>O(d^k)</math> for some d. The total running time is <math>O(d^k * |x|^c)</math>. The other direction, that a fixed-parameter tractable problem is kernelizable and decidable is a bit more involved. We will assume that the question is non-trivial, such that there is at least one instance that is in the language, called <math>I_{yes}</math>, and at least one instance that is not in the language, called <math>I_{no}</math>. Assume the input is (x, k), and that there exists and algorithm that runs in time <math>f(k)*|x|^c</math>. We will now construct a kernelization algorithm, by finding in polynomial time an instance (x', k) where x' is bounded by k. If the size of x is less than f(k) we can just return (x, k). Otherwise, run the algorithm that proves the problem is fixed-parameter tractable and if the answer is yes, return <math>I_{yes}</math>, otherwise return <math>I_{no}</math>. The latter is ok because when <math>|x| \geq f(k)</math>, we get also that <math>f(k) \cdot |x|^c \leq |x|^{c+1}</math>.</p>

</sec>
<sec>
<st>
Further reading</st>
<p>

<list>
<entry level="1" type="bullet">

R. G. Downey, Michael R. Fellows, Ulrike Stege. <weblink xlink:type="simple" xlink:href="http://citeseer.ist.psu.edu/downey97parameterized.html">
Parameterized Complexity: A Framework for Systematically Confronting Computational Intractability</weblink>.</entry>
<entry level="1" type="bullet">

 Faisal N. Abu-Khzam et al. <weblink xlink:type="simple" xlink:href="http://www.cs.utk.edu/~langston/projects/papers/ACFLSS.pdf">
Kernelization Algorithms for the Vertex Cover Problem: Theory and Experiments</weblink>.</entry>
</list>
</p>

</sec>
<sec>
<st>
References</st>
<p>

<list>
<entry level="1" type="bullet">

 <cite id="Reference-Downey-1999" style="font-style:normal" class="book">Downey, Rod;&#32;M. Fellows&#32;(1999). <weblink xlink:type="simple" xlink:href="http://www.springer.com/sgw/cda/frontpage/0,11855,5-0-22-1519914-0,00.html?referer=www.springer.de%2Fcgi-bin%2Fsearch_book.pl%3Fisbn%3D0-387-94883-X">
Parameterized complexity</weblink>.&#32;Springer. ISBN 0-387-94883-X.</cite>&nbsp;</entry>
<entry level="1" type="bullet">

}"&amp;gt;<weblink xlink:type="simple" xlink:href="http://localhost:18088/wiki/index.php/Kernelization#endnote_">
http://localhost:18088/wiki/index.php/Kernelization#endnote_</weblink>}" name="{}"&amp;gt;<weblink xlink:type="simple" xlink:href="http://localhost:18088/wiki/index.php/Kernelization#endnote_">
http://localhost:18088/wiki/index.php/Kernelization#endnote_</weblink>}" class="citation"&amp;gt;Faisal N. Abu-Khzam,  <it>Kernelization Algorithms for the Vertex Cover Problem: Theory and Experiments</it>,  <university wordnetid="108286163" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../111/290111.xml">
University of Tennessee</link></university>
,  2004.</entry>
</list>
</p>

</sec>
</bdy>
</article>
