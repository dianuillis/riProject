<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 16:18:14[mciao0825] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>Resource fork</title>
<id>146655</id>
<revision>
<id>239773131</id>
<timestamp>2008-09-20T12:07:45Z</timestamp>
<contributor>
<username>Tnxman307</username>
<id>5756587</id>
</contributor>
</revision>
<categories>
<category>Mac OS</category>
</categories>
</header>
<bdy>

The <b>resource fork</b> is a construct of the <link xlink:type="simple" xlink:href="../043/20043.xml">
Mac OS</link> <link xlink:type="simple" xlink:href="../194/22194.xml">
operating system</link> used to store structured data in a file, alongside unstructured data stored within the <b>data fork</b>. A resource fork stores information in a specific form, such as icons, the shapes of windows, definitions of menus and their contents, and application code (<link xlink:type="simple" xlink:href="../683/20683.xml">
machine code</link>). For example, a word processing file might store its text in the data fork, while storing any embedded images in the same file's resource fork. While the resource fork is probably used the most by applications and other <link xlink:type="simple" xlink:href="../392/217392.xml">
executable</link>s, every file is able to have a resource fork. 
<sec>
<st>
 The Macintosh file system </st>

<p>

<indent level="1">

<it>Further information: <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../347/55347.xml">
Hierarchical File System</link></instrumentality>
</artifact>
</system>
</it>
</indent>

Originally conceived and implemented by programmer <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<employee wordnetid="110053808" confidence="0.8">
<link xlink:type="simple" xlink:href="../989/3693989.xml">
Bruce Horn</link></employee>
</causal_agent>
</worker>
</person>
</physical_entity>
, the resource fork provided three important improvements to the <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../347/55347.xml">
Macintosh file system</link></instrumentality>
</artifact>
</system>
.  First, it allowed all graphical data to be stored on disk until it was needed, then retrieved, drawn on the screen, and thrown away.  This software variant of <link xlink:type="simple" xlink:href="../354/32354.xml">
virtual memory</link> helped Apple to reduce the memory requirements of the <computer wordnetid="103082979" confidence="0.9508927676800064">
<link>
Apple_Lisa</link></computer>
 from 1 MB to 128 KB in the Macintosh.  Second, because all the pictures and text were stored separately in a resource fork, for the first time it allowed a non-programmer to translate an application for a foreign market, a process called <link>
internationalization</link>.  And finally, it allows nearly all of the components of an application to be distributed in a single file, reducing clutter and simplifying application installation and removal.</p>
<p>

The resource fork is implemented in all of the <link xlink:type="simple" xlink:href="../280/1010280.xml">
filesystem</link>s used for system drives on the <link xlink:type="simple" xlink:href="../979/19006979.xml">
Macintosh</link> (<system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../727/927727.xml">
MFS</link></instrumentality>
</artifact>
</system>
, <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../347/55347.xml">
HFS</link></instrumentality>
</artifact>
</system>
 and <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../752/927752.xml">
HFS Plus</link></instrumentality>
</artifact>
</system>
). The presence of a resource fork makes it easy to store a variety of additional information, such as allowing the system to display the correct icon for a file and open it without the need for a <link>
file extension</link> in the file name. While access to the data fork works like file access on any other operating system — pick a file, pick a byte offset, read some data — access to the resource fork works more like extracting structured records from a <link xlink:type="simple" xlink:href="../377/8377.xml">
database</link>. The data fork is the same as the section used for storing actual data in other operating systems, such as <link xlink:type="simple" xlink:href="../890/18890.xml">
Microsoft Windows</link>. Microsoft Windows also has a concept of "resources," but these are completely different from resources in Mac OS.  </p>
<p>

The resource fork is sometimes used to store the <link xlink:type="simple" xlink:href="../632/18933632.xml">
metadata</link> of a file, although it can also be used for storing the actual data, as was the case with font files in the classic Mac operating systems. Note that the Macintosh file systems also have a separate area for metadata distinct from either the data or resource fork. Being part of the catalogue entry for the file, it is much faster to access this. However, the amount of data stored here is minimal, being just the creation and modification timestamps, the file type and creator codes, fork lengths, and the file name. </p>
<p>

Some files only have a resource fork. Classic 68k applications are one example, where even the executable code is contained in resources of type 'CODE'. Later PowerPC binaries store the executable code in the data fork.</p>
<p>

As resource forks are only supported on the <link xlink:type="simple" xlink:href="../280/1010280.xml">
file systems</link> HFS and HFS Plus, they cannot be used on <link xlink:type="simple" xlink:href="../194/22194.xml">
operating system</link>s which use other file systems. At present, HFS is only supported by Mac OS, effectively meaning that only machines running Mac OS can use resource forks. Even in a Mac OS system, resource forks cannot be used if the <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../992/250992.xml">
UFS file system</link></instrumentality>
</artifact>
</system>
 has been <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../625/634625.xml">
installed</link></instrumentality>
</artifact>
</system>
. In the HFS Plus file system, which is currently the system most commonly used under Mac OS, settings can be made to allow other forks in addition to the data and resource forks, to create a "multi-fork" application, but as forks can make it difficult to exchange files with other operating systems, this feature is not in common use. Even in Mac OS X, resource forks are seldom used anymore.</p>

</sec>
<sec>
<st>
 Resource identifiers </st>

<p>

Each resource has an <link xlink:type="simple" xlink:href="../656/992656.xml">
OSType</link> identifier (a four byte value) and an ID (a <link xlink:type="simple" xlink:href="../200/1609200.xml">
signed</link> 16-bit <link xlink:type="simple" xlink:href="../344/1613344.xml">
word</link>), as well as an optional name. There are standardised resource types for <link xlink:type="simple" xlink:href="../500/217500.xml">
dialog box</link>es ('DITL'), images ('<format wordnetid="106636806" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../039/352039.xml">
PICT</link></format>
'), sounds ('snd ') — and even for <link xlink:type="simple" xlink:href="../392/217392.xml">
executable</link> binaries ('CODE'), which were until the advent of the <link xlink:type="simple" xlink:href="../281/24281.xml">
PowerPC</link> <link xlink:type="simple" xlink:href="../218/5218.xml">
processor</link> without exception stored in the resource fork. Subroutines for rendering <link xlink:type="simple" xlink:href="../897/207897.xml">
window</link>s are stored in their own type of resources ('WDEF'), subroutines for rendering menus in theirs ('MDEF'), and if there is a type of data you think does not fit any of the standardised categories, you can just as well use a type of your own (eg. 'John') — actually any four characters or 32-bit value can serve as a resource type. This arrangement enabled users to easily customise not only individual applications but also the operating system itself, using tools such as <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../021/745021.xml">
ResEdit</link></software>
 to modify the resources of an application file or any of the system files.</p>
<p>

Within an application or other code, resources can be loaded simply using a combination of their type, ID or name, without regard to how and where they are stored in the resource fork. The client is returned a <idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<category wordnetid="105838765" confidence="0.8">
<type wordnetid="105840188" confidence="0.8">
<kind wordnetid="105839024" confidence="0.8">
<link xlink:type="simple" xlink:href="../292/229292.xml">
Handle</link></kind>
</type>
</category>
</concept>
</idea>
 to the loaded resource which can then be accessed like any other heap-based data. The OS component that facilitates this is the <it>Resource Manager</it>. In addition to abstracting the details of the data storage from the data itself, the Resource Manager also arranges sets of open resource forks into a stack, with the most recently opened file on top. When trying to load a resource, it will look in the top of the stack first, (perhaps the current document's resource fork), then the next one down (the application's resource fork), then the next one (system resource forks). This arrangement is very powerful — it permits local resources to override more global ones lower down — so an application can provide its own icons or fonts in place of the standard system ones, for example. It also allows an application to load resources from the system using the same API as any other resource, without regard to where or how that resource is stored — to the application, all resources are equally available and easy to use. The system reserves resource IDs in a certain range to help avoid resource conflicts arising from this. Resource Manager APIs allow the programmer to manipulate the stack and modify the search behaviour.</p>

</sec>
<sec>
<st>
 Editing resource forks </st>

<p>

As the resource fork can be edited with a <link>
resource editor</link> such as <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../021/745021.xml">
ResEdit</link></software>
, it can be used to <link xlink:type="simple" xlink:href="../843/126843.xml">
localize</link> and <link xlink:type="simple" xlink:href="../760/1656760.xml">
customize</link> <link xlink:type="simple" xlink:href="../309/5309.xml">
software</link>. In addition, most resource editors allow visual editing of data. In <link xlink:type="simple" xlink:href="../640/20640.xml">
Mac OS X</link>, it is possible to use resources when developing an application. However, if the application may need to be used in <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../992/250992.xml">
UFS</link></instrumentality>
</artifact>
</system>
, it is also possible to configure it so that the entire resource fork is moved to the data fork, using the Raw Resource File setting. The <link xlink:type="simple" xlink:href="../305/15305.xml">
integrated development environment</link>s distributed for free by <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../856/856.xml">
Apple Inc.</link></company>
, which include <skilled_worker wordnetid="110605985" confidence="0.8">
<physical_entity wordnetid="100001930" confidence="0.8">
<communicator wordnetid="109610660" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<editor wordnetid="110044879" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<compiler wordnetid="109946957" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<writer wordnetid="110794014" confidence="0.8">
<link xlink:type="simple" xlink:href="../713/557713.xml">
MPW</link></writer>
</causal_agent>
</compiler>
</worker>
</editor>
</person>
</communicator>
</physical_entity>
</skilled_worker>
 and <link>
Apple Developer's Tools</link>, include a <link xlink:type="simple" xlink:href="../739/5739.xml">
compiler</link> called Rez. This uses a dedicated language, also called Rez, which can be used to create a resource fork by compiling <link xlink:type="simple" xlink:href="../661/27661.xml">
source code</link>. A decompiler, DeRez, which can be used to change a resource fork back into Rez code is also included.</p>
<p>

In the structure of the resource fork, there is a piece of data called a "resource map" which stores the positions of resource data items. This can be used to allow <link xlink:type="simple" xlink:href="../612/25612.xml">
random access</link> to resource data based on the defined IDs and names. The resource fork can be thought of as consisting of essentially two objects, the resource map and the resource data itself, but in fact each data type is a hierarchical structure which stores multiple items of data. The format in which the information in the resource data is stored is defined based on the types of information, which are known as "resource types." Resource data often makes references to other types of data.</p>
<p>

To view the resource fork in the Terminal application.  Append "/..namedfork/rsrc" to your command.  e.g., take the command "ls -aol IMG_0593.jpg" then append the resource fork viewing suffix "ls -aol IMG_0593.jpg/..namedfork/rsrc" to view the ls -aol command information of the resource fork of file "IMG_0593.jpg"</p>

</sec>
<sec>
<st>
How a resource fork is accessed</st>
<p>

A resource fork is accessed via an <link xlink:type="simple" xlink:href="../ury/24th_century.xml">
API</link> called the <it>Resource Manager.</it>
<list>
<entry level="1" type="number">

 When a resource fork is accessed, data including the start position and length of the resource data and resource map is read in from the header.</entry>
<entry level="1" type="number">

 If a resource type to read in has been specified, a check is performed to make sure that type is present in the resource list, and the number of items of data containing that type and their offsets in the resource reference list from the start position of the resource map is found.</entry>
<entry level="1" type="number">

 The resource ID, the offset of the resource name, the resource properties, and the offset of the data from the start position of the resource data is found.</entry>
<entry level="1" type="number">

 If resource data with the specified ID or name is present in the resource data, the offset obtained above is accessed, the data length is found, and all the data stored there is read in, and returned as the return value.</entry>
</list>
</p>

</sec>
<sec>
<st>
Data types in a resource fork</st>
<p>

The smallest elements making up a resource fork are called data types. There are several data types. After a resource fork is accessed, its contents can be found by reading it in as appropriate for the data types defined in advance. Placing definitions inside the program stating how data is to be treated makes it possible to store resources called TMPL resources as well. Using this method increases the visibility of the data when viewed with a program such as ResEdit, making later editing simpler. As the Macintosh platform originated with Motorola-based processors (68k and PPC), the data is serialized to disk in <link xlink:type="simple" xlink:href="../026/43026.xml">
big endian</link> format.</p>
<p>

The following is a list of the major data types, in alphabetical order.</p>
<p>

<table class="wikitable">
<row>
<header align="left">
Data type (actual name)</header>
<header align="left">
Description</header>
</row>
<row>
<col>
BBIT (binary bit)</col>
<col>
Represents a single boolean bit (true or false). Normally the number of BBITs must be a multiple of 8.</col>
</row>
<row>
<col>
BOOL (boolean)</col>
<col>
Represents a boolean value. It consists of 2 bytes; 256 is true, and 0 is false.</col>
</row>
<row>
<col>
CHAR (character)</col>
<col>
Represents a one-byte character.</col>
</row>
<row>
<col>
CSTR (<link xlink:type="simple" xlink:href="../167/338167.xml">
C string</link>)</col>
<col>
Represents a string of the form used in the <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../021/6021.xml">
C programming language</link></programming_language>
, i.e. a series of bytes terminated by 0x00.</col>
</row>
<row>
<col>
DLNG (decimal long word integer)</col>
<col>
A decimal long word (4 byte) integer. Represents values between approximately -2.1 billion and 2.1 billion.</col>
</row>
<row>
<col>
HEXD (hex dump)</col>
<col>
Indicates that the data from this position to the end is hexadecimal. This is used to represent code resources or compressed data.</col>
</row>
<row>
<col>
HLNG (long word hexadecimal)</col>
<col>
This data is treated as a 4 byte hexadecimal value. It is used, among other things, to represent integers greater than 2.1 billion, such as unsigned long values in C.</col>
</row>
<row>
<col>
PSTR (Pascal string)</col>
<col>
Represents a Pascal string, with the first byte giving the length of the string.</col>
</row>
<row>
<col>
TNAM (type name)</col>
<col>
A string representing a value such as a <link xlink:type="simple" xlink:href="../973/147973.xml">
creator code</link>, which is always 4 bytes long.</col>
</row>
<row>
<col>
RECT (rectangle)</col>
<col>
Represents the coordinates of the corners of a rectangle. Always 8 bytes long.</col>
</row>
</table>
</p>


</sec>
<sec>
<st>
Major resource types</st>
<p>

Note that types must be 4 bytes long, so types like snd and STR actually have a space (0x20) at the end.</p>
<p>

<table class="wikitable">
<row>
<header align="left">
Name of resource type (actual name)</header>
<header align="left">
Description</header>
</row>
<row>
<col>
ALRT (alert)</col>
<col>
Defines the shape of an application alert box</col>
</row>
<row>
<col>
APPL (application)</col>
<col>
Stores application information</col>
</row>
<row>
<col>
BNDL (bundle)</col>
<col>
Defines data such as a file type icon used in an application</col>
</row>
<row>
<col>
cicn (color icon)</col>
<col>
Defines a color icon used in data</col>
</row>
<row>
<col>
clut (color palette)</col>
<col>
Defines a color used in data</col>
</row>
<row>
<col>
CNTL (control)</col>
<col>
Defines the details of a component positioned in a window</col>
</row>
<row>
<col>
CODE (code resource)</col>
<col>
Stores the machine code for the program</col>
</row>
<row>
<col>
CURS (cursor)</col>
<col>
Defines the shape of a monochrome cursor</col>
</row>
<row>
<col>
DITL (dialog item list)</col>
<col>
Defines a component of a window</col>
</row>
<row>
<col>
DLOG (dialog)</col>
<col>
Defines the shape of a dialog box for an application</col>
</row>
<row>
<col>
FREF (file reference)</col>
<col>
Defines a file type handled by an application</col>
</row>
<row>
<col>
hfdr (icon balloon help)</col>
<col>
Defines the contents and shape of the balloon help displayed when the cursor hovers over the file in the Finder</col>
</row>
<row>
<col>
icl8 (8 bit icon list)</col>
<col>
Defines an icon displayed in the Finder</col>
</row>
<row>
<col>
icns (32 bit icon list)</col>
<col>
Defines an icon displayed in the Finder</col>
</row>
<row>
<col>
ICON (icon)</col>
<col>
Defines a monochrome item used in data</col>
</row>
<row>
<col>
kind (file description)</col>
<col>
Defines a description of a file type</col>
</row>
<row>
<col>
MBAR (menu bar)</col>
<col>
Defines a menu and menu bar for an application</col>
</row>
<row>
<col>
MDEF (menu definition)</col>
<col>
Defines a menu for an application. Can also be used to define menus with complex shapes such as color palettes.</col>
</row>
<row>
<col>
MENU (menu)</col>
<col>
Defines the menu items in an application</col>
</row>
<row>
<col>
MooV (movie)</col>
<col>
Stores a QuickTime movie</col>
</row>
<row>
<col>
open (open)</col>
<col>
Defines a file type which the application can open</col>
</row>
<row>
<col>
PICT (picture)</col>
<col>
Stores a PICT image contained in the file</col>
</row>
<row>
<col>
PREF (preference)</col>
<col>
Stores the environment settings for an application</col>
</row>
<row>
<col>
snd (sound)</col>
<col>
Stores a sound used in the file</col>
</row>
<row>
<col>
STR (string)</col>
<col>
Stores a string or hexadecimal data used in the file</col>
</row>
<row>
<col>
STR# (string list)</col>
<col>
Stores multiple strings used in the file</col>
</row>
<row>
<col>
styl (style)</col>
<col>
Defines style information, such as the font, color and size of text</col>
</row>
<row>
<col>
TEXT (text)</col>
<col>
Stores text</col>
</row>
<row>
<col>
TMPL (template)</col>
<col>
Defines the format for the resource data</col>
</row>
<row>
<col>
vers (version)</col>
<col>
Defines the <link xlink:type="simple" xlink:href="../950/8273950.xml">
version</link>or region of use of the file</col>
</row>
<row>
<col>
WDEF (window definition)</col>
<col>
Defines a window for the application. Windows of an unspecified shape can also be defined.</col>
</row>
<row>
<col>
WIND (window)</col>
<col>
Defines the shape of an application window</col>
</row>
</table>
</p>


</sec>
<sec>
<st>
Major resource editors</st>
<p>

<list>
<entry level="1" type="bullet">

<software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../021/745021.xml">
ResEdit</link></software>
 (Distributed free of charge by Apple. Can be used for visual editing of resource data. If the structure of data is known, it can display a range of different types of data in a visual format.)</entry>
<entry level="1" type="bullet">

Resorcerer (Expensive, but popular, as it can be used for visual editing of many more types of data than ResEdit.)</entry>
<entry level="1" type="bullet">

HexEdit (A binary editor, which in fact is normally used more for editing the data fork rather than the resource fork.)</entry>
<entry level="1" type="bullet">

<software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../042/2108042.xml">
ResKnife</link></software>
 (Open‐source editor for Mac OS X)</entry>
</list>
</p>

</sec>
<sec>
<st>
 Compatibility problems </st>

<p>

The complexity of programming with resource forks has led to compatibility problems with other filesystems in the past. In order to transmit a Macintosh file over a network or other medium, the data and resource forks must be serialized together. A number of file formats, such as <format wordnetid="106636806" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../704/920704.xml">
MacBinary</link></format>
 and <format wordnetid="106636806" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../634/920634.xml">
BinHex</link></format>
, have been used to implement this. Command-line system tools SplitForks and FixupResourceForks allow manual flattening and merging of resource forks. In addition, a file server seeking to present filesystems to Macintosh clients must accommodate the resource fork as well as the data fork of files; <link xlink:type="simple" xlink:href="../642/31642.xml">
UNIX</link> servers usually implement this with hidden directories.</p>
<p>

Older applications written with the <link xlink:type="simple" xlink:href="../891/56891.xml">
Carbon API</link> have a potential issue when being ported to the current <link xlink:type="simple" xlink:href="../617/14617.xml">
Intel</link> Macs. While the Resource Manager and operating system know how to correctly deserialize data for common resources like "snd " or "moov," resources created using TMPL resources have to be manually byte swapped to ensure file interoperability between PPC and Intel-based versions of an application. (While the resource map and other implementation details are big endian, the Resource Manager by itself doesn't have any knowledge of the contents of a generic resource, and so cannot automatically perform the byte swapping.)</p>
<p>

Until the advent of <version wordnetid="107173585" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../975/641975.xml">
Mac OS X v10.4</link></version>
, the standard UNIX command line utilities in Mac OS X (such as cp and mv) did not respect resource forks.  To copy files with resource forks, one had to use ditto or CpMac and MvMac.</p>

</sec>
<sec>
<st>
 Other operating systems </st>
<p>

The concept of a <it>resource manager</it> for graphics objects, to save memory, originated in the OOZE package on the <link>
 Alto</link> in Smalltalk-76.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref>  The concept is now largely universal in all modern operating systems. However, the concept of the resource fork remains peculiar to the Macintosh. Most operating systems used a binary file containing resources, which is then "tacked onto" the end of an existing program file. This solution is used on <link xlink:type="simple" xlink:href="../890/18890.xml">
Microsoft Windows</link> for instance, and similar solutions are used with the <message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<link xlink:type="simple" xlink:href="../147/34147.xml">
X Window System</link></rule>
</direction>
</protocol>
</message>
, although the resources are often left as a separate file.</p>
<p>

Although the <family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../438/33438.xml">
Windows NT</link></family>
 <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../184/39184.xml">
NTFS</link></instrumentality>
</artifact>
</system>
 can support forks (and so can be a file server for Mac files), the native feature providing that support, called an <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../605/1418605.xml">
alternate data stream</link></instrumentality>
</artifact>
</system>
, has never been used extensively — certainly not as a true resource fork. However, Windows operating system features (such as the standard Summary tab in the Properties page for non-Office files) and Windows applications are using them more often now, and Microsoft was developing a <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../590/521590.xml">
next-generation file system</link></instrumentality>
</artifact>
</system>
 that has this sort of feature as basis.</p>
<p>

Early versions of the <link xlink:type="simple" xlink:href="../801/4801.xml">
BeOS</link> implemented a database within the filesystem, which could be used in a manner analogous to a resource fork. Performance issues led to a change in later releases to a system of complex filesystem attributes. Under this system resources were handled in a fashion somewhat more analogous to the Mac.</p>
<p>

<O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../304/18933304.xml">
AmigaOS</link></O>
 does not use forked files. Its <link xlink:type="simple" xlink:href="../392/217392.xml">
executable file</link>s are internally divided into a modular structure of large pieces (<link xlink:type="simple" xlink:href="../820/680820.xml">
hunk</link>) capable of storing code, data, and additional information. Similarly, data and project files have a <link xlink:type="simple" xlink:href="../666/3983666.xml">
chunk</link> structure codified in the <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<format wordnetid="106636806" confidence="0.8">
<link xlink:type="simple" xlink:href="../783/66783.xml">
IFF</link></format>
</information>
</message>
 standard. Other file types are stored similarly to other operating systems. Though not strictly a resource fork, <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../304/18933304.xml">
AmigaOS</link></O>
 stores meta data in files known as <b>.info</b> files. .info files can be identified by the .info extension; for example, if you save a project to a disk, two files will be saved, MyProject and MyProject.info. MyProject would be the actual project data and MyProject.info would contain the project icon, information regarding which program is needed to open the project (since there is no <link>
application binding</link> in AmigaOS), special project options and any user comments. .info files are invisible on the Amiga's desktop (<link xlink:type="simple" xlink:href="../699/7494699.xml">
Workbench</link>). The icon on the desktop, taken from the .info itself, is the <link xlink:type="simple" xlink:href="../249/45249.xml">
interface</link> <link xlink:type="simple" xlink:href="../686/4581686.xml">
metaphor</link> through which the user interacts both with the project itself and its associated .info file. A dialog box accessible by right-clicking the icon allows the user to see and modify the metadata present in the .info file. .info files can be seen as individual files in the <link xlink:type="simple" xlink:href="../707/6707.xml">
Command line interface</link> or a <link xlink:type="simple" xlink:href="../382/11382.xml">
File manager</link>. Modern AmigaOS clones (<link xlink:type="simple" xlink:href="../614/11193614.xml">
AROS</link>, <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../521/263521.xml">
MorphOS</link></O>
 and <link>
AOS4</link>) inherit the structure (complete with metadata) of the .info files of older AmigaOS versions, and can also accept standard <format wordnetid="106636806" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../306/24306.xml">
PNG</link></format>
 graphic files as icon bitmaps in their .info files.</p>
<p>

<company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../694/21694.xml">
NeXT</link></company>
 operating systems <link xlink:type="simple" xlink:href="../642/40642.xml">
NeXTSTEP</link> and <link xlink:type="simple" xlink:href="../114/53114.xml">
OPENSTEP</link>, and its successor, <link xlink:type="simple" xlink:href="../640/20640.xml">
Mac OS X</link>, and other systems like <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../999/167999.xml">
RISC OS</link></O>
 implemented another solution. Under these systems the resources are left in an original format, for instance, pictures are included as complete <link xlink:type="simple" xlink:href="../478/145478.xml">
TIFF</link> files instead of being encoded into some sort of container. These resources are then placed in a directory along with the executable code and "raw data". The directory (called a "<link xlink:type="simple" xlink:href="../670/2487670.xml">
bundle</link>" or "<link xlink:type="simple" xlink:href="../017/3668017.xml">
application directory</link>") is then presented to the user as the application itself. This solution provides all of the same functionality as the resource fork, but allows the resources be easily manipulated by any application – a "resource editor" (like <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../021/745021.xml">
ResEdit</link></software>
) is not needed. From the <link xlink:type="simple" xlink:href="../707/6707.xml">
command line interface</link>, the bundle appears to be a normal directory. This approach was not an option on the <link xlink:type="simple" xlink:href="../046/20046.xml">
original Macintosh OS</link>, since the file system (<system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../727/927727.xml">
MFS</link></instrumentality>
</artifact>
</system>
) did not support folders/directories. Mac OS X does retain the classic Resource Manager <link xlink:type="simple" xlink:href="../ury/24th_century.xml">
API</link> as part of its <link xlink:type="simple" xlink:href="../891/56891.xml">
Carbon</link> libraries for backward compatibility. However, the resources themselves can now be stored in separate data files within the filesystem — the Resource Manager now hides this implementation change from the client code.</p>

</sec>
<sec>
<st>
References</st>

<p>

<reflist>
<entry id="1">
"<weblink xlink:type="simple" xlink:href="http://gagne.homedns.org/~tgagne/contrib/EarlyHistoryST.html">
The Early History of Smalltalk</weblink>".&#32;Retrieved on <link>
2008-07-24</link>.}</entry>
</reflist>
</p>

</sec>
<sec>
<st>
External links</st>
<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://developer.apple.com/documentation/mac/MoreToolbox/MoreToolbox-99.html">
Description of the Resource File Format</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://developer.apple.com/documentation/Carbon/Reference/Resource_Manager/index.html">
Apple Developer Resource Library: Resource Manager Reference</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://developer.apple.com/documentation/CoreFoundation/Conceptual/CFBundles/index.html">
Apple Developer Resource Library: Resource Management, Bundles</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://docs.info.apple.com/article.html?artnum=301711">
Apple Docs: Disable .DS_Store Files On Network Disks</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://osxutils.sf.net">
osxutils</weblink> - open-source resource-fork-aware command line utilities for Mac OS X</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://folklore.org/StoryView.py?project=Macintosh&amp;story=The_Grand_Unified_Model.txt">
The Grand Unified Model</weblink> - History of the resource fork, from folklore.org</entry>
</list>
</p>

<p>

<table style=";" class="navbox" cellspacing="0">
<row>
<col style="padding:2px;">
<table style="width:100%;background:transparent;color:inherit;;" class="nowraplinks collapsible autocollapse " cellspacing="0">
<row>
<header colspan="2" style=";" class="navbox-title">
<link xlink:type="simple" xlink:href="../043/20043.xml">
Mac OS</link></header>
</row>
<row style="height:2px;">

</row>
<row>
<col style=";;" class="navbox-group">
Applications</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<link>
Apple File Security</link>&nbsp;·  <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../249/3828249.xml">
Calculator</link></software>
&nbsp;·  <link xlink:type="simple" xlink:href="../710/842710.xml">
Chooser</link>&nbsp;·  <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../966/4221966.xml">
Drive Setup</link></software>
&nbsp;·  <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<player wordnetid="110439851" confidence="0.8">
<contestant wordnetid="109613191" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../945/3405945.xml">
DVD Player</link></causal_agent>
</contestant>
</player>
</person>
</physical_entity>
&nbsp;·  <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../166/156166.xml">
Finder</link></software>
&nbsp;·  <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../169/1098169.xml">
Graphing Calculator</link></software>
&nbsp;·  <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../978/3969978.xml">
Keychain Access</link></software>
&nbsp;·  <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<spectator wordnetid="110633450" confidence="0.8">
<perceiver wordnetid="109626589" confidence="0.8">
<link xlink:type="simple" xlink:href="../191/2774191.xml">
PictureViewer</link></perceiver>
</spectator>
</causal_agent>
</person>
</physical_entity>
&nbsp;·  <link xlink:type="simple" xlink:href="../867/901867.xml">
PowerTalk</link>&nbsp;·  <link xlink:type="simple" xlink:href="../231/25231.xml">
QuickTime Player</link>&nbsp;·  <link xlink:type="simple" xlink:href="../180/2623180.xml">
Network Browser</link>&nbsp;·  <link xlink:type="simple" xlink:href="../803/6348803.xml">
Scrapbook</link>&nbsp;·  <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../710/342710.xml">
Sherlock</link></software>
&nbsp;·  <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../321/3049321.xml">
Software Update</link></software>
&nbsp;·  <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../613/696613.xml">
Stickies</link></software>
&nbsp;·  <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../083/3395083.xml">
Apple System Profiler</link></software>
&nbsp;·  <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../257/29257.xml">
SimpleText</link></software>
</col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
Developer</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-even">
<software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../698/435698.xml">
MacsBug</link></software>
&nbsp;·  <skilled_worker wordnetid="110605985" confidence="0.8">
<physical_entity wordnetid="100001930" confidence="0.8">
<communicator wordnetid="109610660" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<editor wordnetid="110044879" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<compiler wordnetid="109946957" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<writer wordnetid="110794014" confidence="0.8">
<link xlink:type="simple" xlink:href="../713/557713.xml">
Macintosh Programmer's Workshop</link></writer>
</causal_agent>
</compiler>
</worker>
</editor>
</person>
</communicator>
</physical_entity>
</skilled_worker>
&nbsp;·  <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../021/745021.xml">
ResEdit</link></software>
</col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
Technology</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<link xlink:type="simple" xlink:href="../630/1243630.xml">
Command (⌘)</link>&nbsp;·  <artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<key wordnetid="103613294" confidence="0.8">
<link xlink:type="simple" xlink:href="../528/1717528.xml">
Option (⌥)</link></key>
</device>
</instrumentality>
</artifact>
&nbsp;·  <link xlink:type="simple" xlink:href="../076/7379076.xml">
Apple menu</link>&nbsp;·  <link xlink:type="simple" xlink:href="../333/1479333.xml">
Balloon help</link>&nbsp;·  <link xlink:type="simple" xlink:href="../580/1628580.xml">
Bomb Error</link>&nbsp;·  <link>
Code Fragment Manager</link>&nbsp;·  <link xlink:type="simple" xlink:href="../077/2187077.xml">
Control Panel</link>&nbsp;·  <link xlink:type="simple" xlink:href="../362/11712362.xml">
Control Strip</link>&nbsp;·  <link xlink:type="simple" xlink:href="../973/147973.xml">
Creator code</link>&nbsp;·  <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../347/55347.xml">
Hierarchical File System</link></instrumentality>
</artifact>
</system>
&nbsp;·  <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../752/927752.xml">
HFS Plus</link></instrumentality>
</artifact>
</system>
&nbsp;·  <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../527/3049527.xml">
Keychain</link></software>
&nbsp;·  <link>
Apple Data Detectors</link>&nbsp;·  <link>
Apple Information Access Technology</link>&nbsp;·  <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../727/927727.xml">
Macintosh File System</link></instrumentality>
</artifact>
</system>
&nbsp;·  <link xlink:type="simple" xlink:href="../039/352039.xml">
PICT</link>&nbsp;·  <link xlink:type="simple" xlink:href="../439/256439.xml">
QuickDraw</link>&nbsp;·  <software wordnetid="106566077" confidence="0.9508927676800064">
<format wordnetid="106636806" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../231/25231.xml">
QuickTime</link></format>
</software>
&nbsp;·  <link xlink:type="simple" xlink:href="../655/146655.xml">
Resource fork</link>&nbsp;·  <link xlink:type="simple" xlink:href="../094/10773094.xml">
Special menu</link>&nbsp;·  <link xlink:type="simple" xlink:href="../805/2386805.xml">
System Folder</link>&nbsp;·  <link xlink:type="simple" xlink:href="../458/5144458.xml">
System suitcase</link>&nbsp;·  <link xlink:type="simple" xlink:href="../970/147970.xml">
Type code</link>&nbsp;·  <link xlink:type="simple" xlink:href="../333/1404333.xml">
WorldScript</link></col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
Related articles</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-even">
<link xlink:type="simple" xlink:href="../396/4517396.xml">
Manager</link>&nbsp;·  <link xlink:type="simple" xlink:href="../398/861398.xml">
Toolbox</link>&nbsp;·  <link xlink:type="simple" xlink:href="../617/299617.xml">
Memory Management</link>&nbsp;·  <link xlink:type="simple" xlink:href="../471/861471.xml">
Old World ROM</link>&nbsp;·  <link xlink:type="simple" xlink:href="../454/861454.xml">
New World ROM</link>&nbsp;·  <link xlink:type="simple" xlink:href="../065/866065.xml">
EFI</link></col>
</row>
</table>
</col>
</row>
</table>
</p>



</sec>
</bdy>
</article>
