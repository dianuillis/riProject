<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 16:18:15[mciao0828] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>64-bit</title>
<id>148285</id>
<revision>
<id>243867507</id>
<timestamp>2008-10-08T11:39:14Z</timestamp>
<contributor>
<username>Darth Panda</username>
<id>580942</id>
</contributor>
</revision>
<categories>
<category>Data unit</category>
</categories>
</header>
<bdy>

<table style="margin: 0 0 1em 1em" width="300" align="right" class="toccolours">
<header colspan="12" style="background:#ccccff" align="center">
<b>Processors</b></header>
<row>
<col>
 <link xlink:type="simple" xlink:href="../346/520346.xml">
4-bit</link></col>
<col>
 <link xlink:type="simple" xlink:href="../148/45148.xml">
8-bit</link></col>
<col>
 <information wordnetid="105816287" confidence="0.8">
<datum wordnetid="105816622" confidence="0.8">
<link xlink:type="simple" xlink:href="../742/9787742.xml">
12-bit</link></datum>
</information>
</col>
<col>
 <link xlink:type="simple" xlink:href="../535/64535.xml">
16-bit</link></col>
<col>
 <information wordnetid="105816287" confidence="0.8">
<datum wordnetid="105816622" confidence="0.8">
<link xlink:type="simple" xlink:href="../244/16569244.xml">
18-bit</link></datum>
</information>
</col>
<col>
 <link xlink:type="simple" xlink:href="../348/2507348.xml">
24-bit</link></col>
<col>
 <link xlink:type="simple" xlink:href="../344/2507344.xml">
31-bit</link></col>
<col>
 <link xlink:type="simple" xlink:href="../733/80733.xml">
32-bit</link></col>
<col>
 <link xlink:type="simple" xlink:href="../064/920064.xml">
36-bit</link></col>
<col>
 <link xlink:type="simple" xlink:href="../877/2572877.xml">
48-bit</link></col>
<col>
 <link xlink:type="simple" xlink:href="../285/148285.xml">
64-bit</link></col>
<col>
 <link xlink:type="simple" xlink:href="../724/1800724.xml">
128-bit</link></col>
</row>
<row>
<header colspan="12" style="background:#ccccff" align="center">
<b>Applications</b></header>
</row>
<row>
<col>
 <link>
 8-bit</link></col>
<col>
&nbsp;</col>
<col>
&nbsp;</col>
<col>
 <link>
 16-bit</link></col>
<col>
&nbsp;</col>
<col>
&nbsp;</col>
<col>
 <link>
31-bit</link></col>
<col>
 <link>
 32-bit</link></col>
<col>
&nbsp;</col>
<col>
&nbsp;</col>
<col>
 <link xlink:type="simple" xlink:href="../285/148285.xml">
64-bit</link></col>
<col>
&nbsp;</col>
</row>
<row>
<header colspan="12" style="background:#ccccff" align="center">
<b>Data Sizes</b></header>
</row>
<row>
<col>
 <link>
 4-bit</link></col>
<col>
 <link>
 8-bit</link></col>
<col>
&nbsp;</col>
<col>
16-bit</col>
<col>
&nbsp;</col>
<col>
&nbsp;</col>
<col>
&nbsp;</col>
<col>
32-bit</col>
<col>
&nbsp;</col>
<col>
&nbsp;</col>
<col>
64-bit</col>
<col>
128-bit</col>
</row>
<row valign="top">
<col colspan="12" align="center">
<link xlink:type="simple" xlink:href="../150/21150.xml">
nibble</link> &nbsp; <link xlink:type="simple" xlink:href="../365/3365.xml">
byte</link> &nbsp; <link xlink:type="simple" xlink:href="../997/4240997.xml">
octet</link> &nbsp; <idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<category wordnetid="105838765" confidence="0.8">
<unit_of_measurement wordnetid="113583724" confidence="0.8">
<definite_quantity wordnetid="113576101" confidence="0.8">
<type wordnetid="105840188" confidence="0.8">
<kind wordnetid="105839024" confidence="0.8">
<link xlink:type="simple" xlink:href="../344/1613344.xml">
word</link></kind>
</type>
</definite_quantity>
</unit_of_measurement>
</category>
</concept>
</idea>
 &nbsp; <idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<category wordnetid="105838765" confidence="0.8">
<unit_of_measurement wordnetid="113583724" confidence="0.8">
<definite_quantity wordnetid="113576101" confidence="0.8">
<type wordnetid="105840188" confidence="0.8">
<kind wordnetid="105839024" confidence="0.8">
<link xlink:type="simple" xlink:href="../344/1613344.xml#xpointer(//*[./st=%22Dword+and+Qword%22])">
dword</link></kind>
</type>
</definite_quantity>
</unit_of_measurement>
</category>
</concept>
</idea>
 &nbsp; <idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<category wordnetid="105838765" confidence="0.8">
<unit_of_measurement wordnetid="113583724" confidence="0.8">
<definite_quantity wordnetid="113576101" confidence="0.8">
<type wordnetid="105840188" confidence="0.8">
<kind wordnetid="105839024" confidence="0.8">
<link xlink:type="simple" xlink:href="../344/1613344.xml#xpointer(//*[./st=%22Dword+and+Qword%22])">
qword</link></kind>
</type>
</definite_quantity>
</unit_of_measurement>
</category>
</concept>
</idea>
</col>
</row>
</table>
<p>

In <link xlink:type="simple" xlink:href="../509/6509.xml">
computer architecture</link>, <b>64-bit</b> <link xlink:type="simple" xlink:href="../794/14794.xml">
integer</link>s, <link xlink:type="simple" xlink:href="../018/568018.xml">
memory address</link>es, or other <link xlink:type="simple" xlink:href="../040/18985040.xml#xpointer(//*[./st=%22Uses_of_data_in_computing%22])">
data</link> units are those that are at most 64 <link xlink:type="simple" xlink:href="../364/3364.xml">
bit</link>s (8 <link xlink:type="simple" xlink:href="../997/4240997.xml">
octets</link>) wide.  Also, 64-bit <link xlink:type="simple" xlink:href="../218/5218.xml">
CPU</link> and <artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<electrical_device wordnetid="103269401" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<circuit wordnetid="103033362" confidence="0.8">
<link xlink:type="simple" xlink:href="../504/199504.xml">
ALU</link></circuit>
</device>
</electrical_device>
</instrumentality>
</artifact>
 <link xlink:type="simple" xlink:href="../509/6509.xml">
architecture</link>s are those that are based on <link xlink:type="simple" xlink:href="../432/486432.xml">
register</link>s, <link xlink:type="simple" xlink:href="../773/382773.xml">
address bus</link>es, or <link xlink:type="simple" xlink:href="../631/6631.xml">
data bus</link>es of that size.</p>
<p>

<b>64-bit</b> is also a term given to a generation of computers in which 64-bit processors were the norm.</p>

<p>

'64-bit' CPUs have existed in <link xlink:type="simple" xlink:href="../153/37153.xml">
supercomputers</link> since the <link xlink:type="simple" xlink:href="../545/34545.xml">
1960s</link> and in <link xlink:type="simple" xlink:href="../672/3963672.xml">
RISC</link>-based <link xlink:type="simple" xlink:href="../181/68181.xml">
workstations</link> and <generic wordnetid="107899976" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../116/42116.xml">
server</link></generic>
s since the early <link xlink:type="simple" xlink:href="../556/34556.xml">
1990s</link>. In <link xlink:type="simple" xlink:href="../163/36163.xml">
2003</link> they were introduced to the (previously <link xlink:type="simple" xlink:href="../733/80733.xml">
32-bit</link>) mainstream <link xlink:type="simple" xlink:href="../137/18457137.xml">
personal computer</link> arena, in the form of the <link xlink:type="simple" xlink:href="../374/244374.xml">
x86-64</link> and 64-bit <link xlink:type="simple" xlink:href="../281/24281.xml">
PowerPC</link> processor architectures.</p>
<p>

A CPU that is 64-bit internally might have external <link xlink:type="simple" xlink:href="../631/6631.xml">
data bus</link>es or <link xlink:type="simple" xlink:href="../773/382773.xml">
address bus</link>es with a different size, either larger or smaller; the term "64-bit" is often used to describe the size of these buses as well. For instance, many current machines with 32-bit processors use 64-bit buses (e.g. the original <chip wordnetid="103020034" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<microprocessor wordnetid="103760310" confidence="0.8">
<conductor wordnetid="103088707" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<semiconductor_device wordnetid="104171831" confidence="0.8">
<link xlink:type="simple" xlink:href="../668/24668.xml">
Pentium</link></semiconductor_device>
</device>
</conductor>
</microprocessor>
</instrumentality>
</artifact>
</chip>
 and later CPUs), and may occasionally be referred to as "64-bit" for this reason. Likewise, some 16-bit processors (for instance, the <chip wordnetid="103020034" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<microprocessor wordnetid="103760310" confidence="0.8">
<conductor wordnetid="103088707" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<semiconductor_device wordnetid="104171831" confidence="0.8">
<link xlink:type="simple" xlink:href="../270/20270.xml">
MC68000</link></semiconductor_device>
</device>
</conductor>
</microprocessor>
</instrumentality>
</artifact>
</chip>
) were referred to as 16-/32-bit processors as they had 16-bit buses, but had some internal 32-bit capabilities. The term may also refer to the size of an instruction in the computer's <link xlink:type="simple" xlink:href="../772/47772.xml">
instruction set</link> or to any other <link xlink:type="simple" xlink:href="../040/18985040.xml">
datum</link> (e.g. 64-bit <link xlink:type="simple" xlink:href="../734/53734.xml">
double-precision</link> <idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<category wordnetid="105838765" confidence="0.8">
<type wordnetid="105840188" confidence="0.8">
<kind wordnetid="105839024" confidence="0.8">
<link xlink:type="simple" xlink:href="../376/11376.xml">
floating-point</link></kind>
</type>
</category>
</concept>
</idea>
 quantities are common). Without further qualification, "64-bit" computer architecture generally has integer <link xlink:type="simple" xlink:href="../432/486432.xml">
registers</link> that are 64 bits wide, which allows it to support (both internally and externally) 64-bit "chunks" of integer data.</p>

<sec>
<st>
Architectural implications</st>
<p>

Registers in a processor are generally divided into three groups: integer, floating point, and other. In all common general purpose processors, only the integer registers are capable of storing pointer values (that is, an address of some data in memory). The non-integer registers cannot be used to store pointers for the purpose of reading or writing to memory, and therefore cannot be used to bypass any memory restrictions imposed by the size of the integer registers.</p>
<p>

Nearly all common general purpose processors (with the notable exception of most <chip wordnetid="103020034" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<microprocessor wordnetid="103760310" confidence="0.8">
<conductor wordnetid="103088707" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<semiconductor_device wordnetid="104171831" confidence="0.8">
<link xlink:type="simple" xlink:href="../558/60558.xml">
ARM</link></semiconductor_device>
</device>
</conductor>
</microprocessor>
</instrumentality>
</artifact>
</chip>
 and 32-bit <link xlink:type="simple" xlink:href="../170/20170.xml">
MIPS</link> implementations) have integrated floating point hardware, which may or may not use 64-bit registers to hold data for processing. For example, the <link xlink:type="simple" xlink:href="../198/34198.xml">
x86</link> architecture includes the <link xlink:type="simple" xlink:href="../970/2532970.xml">
x87</link> floating-point instructions which use eight 80-bit registers in a stack configuration; later revisions of x86, also include <message wordnetid="106598915" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<link xlink:type="simple" xlink:href="../365/55365.xml">
SSE</link></direction>
</message>
 instructions, which use eight 128-bit wide registers. By contrast, the 64-bit <link xlink:type="simple" xlink:href="../971/8971.xml">
Alpha</link> family of processors defines thirty two 64-bit wide floating point registers in addition to its thirty two 64-bit wide integer registers.</p>

</sec>
<sec>
<st>
Memory limitations</st>
<p>

Most CPUs are designed so that the contents of a single integer register can store the <link xlink:type="simple" xlink:href="../018/568018.xml">
address</link> (location) of any datum in the computer's <link xlink:type="simple" xlink:href="../354/32354.xml">
virtual memory</link>. Therefore, the total number of addresses in the virtual memory – the total amount of data the computer can keep in its working area – is determined by the width of these registers. Beginning in the 1960s with the <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../259/18622259.xml">
IBM</link></company>
 <link xlink:type="simple" xlink:href="../294/29294.xml">
System/360</link>, then (amongst many others) the <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../952/7952.xml">
DEC</link></company>
 <link xlink:type="simple" xlink:href="../517/32517.xml">
VAX</link> minicomputer in the <link xlink:type="simple" xlink:href="../555/34555.xml">
1970s</link>, and then with the <chip wordnetid="103020034" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<microprocessor wordnetid="103760310" confidence="0.8">
<conductor wordnetid="103088707" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<semiconductor_device wordnetid="104171831" confidence="0.8">
<link xlink:type="simple" xlink:href="../070/15070.xml">
Intel 80386</link></semiconductor_device>
</device>
</conductor>
</microprocessor>
</instrumentality>
</artifact>
</chip>
 in the mid-<link xlink:type="simple" xlink:href="../557/34557.xml">
1980s</link>, a <it>de facto</it> consensus developed that 32 bits was a convenient register size.  A 32-bit register meant that 232 addresses, or 4 <link xlink:type="simple" xlink:href="../487/176487.xml">
GB</link> of <link xlink:type="simple" xlink:href="../847/25847.xml">
RAM</link>, could be referenced. At the time these architectures were devised, 4 GB of memory was so far beyond the typical quantities (16 MB)  available in installations that this was considered to be enough "headroom" for addressing. 4 GB addresses were considered an appropriate size to work with for another important reason: 4 billion integers are enough to assign unique references to most physically countable things in applications like <link xlink:type="simple" xlink:href="../377/8377.xml">
database</link>s.</p>
<p>

However, by the early 1990s, the continual reductions in the cost of memory led to installations with quantities of RAM approaching 4 GB, and the use of virtual memory spaces exceeding the 4-gigabyte ceiling became desirable for handling certain types of problems. In response, a number of companies began releasing new families of chips with 64-bit architectures, initially for <link xlink:type="simple" xlink:href="../153/37153.xml">
supercomputer</link>s and high-end <link xlink:type="simple" xlink:href="../181/68181.xml">
workstation</link> and <generic wordnetid="107899976" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../116/42116.xml">
server</link></generic>
 machines. 64-bit computing has gradually drifted down to the personal computer desktop, with some models in <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../856/856.xml">
Apple</link></company>
's Macintosh lines switching to <chip wordnetid="103020034" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<microprocessor wordnetid="103760310" confidence="0.8">
<conductor wordnetid="103088707" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<semiconductor_device wordnetid="104171831" confidence="0.8">
<link xlink:type="simple" xlink:href="../320/370320.xml">
PowerPC 970</link></semiconductor_device>
</device>
</conductor>
</microprocessor>
</instrumentality>
</artifact>
</chip>
 processors (termed "G5" by Apple) in 2002 and to 64-bit <link xlink:type="simple" xlink:href="../374/244374.xml">
x86-64</link> processors in 2003 (with the launch of the AMD Athlon 64), and with x86-64 processors becoming common in high-end <link xlink:type="simple" xlink:href="../032/15032.xml">
PC</link>s.</p>
<p>

The emergence of the 64-bit architecture effectively increases the memory ceiling to 264 addresses, equivalent to approximately 17.2 billion gigabytes, 16.8 million <link xlink:type="simple" xlink:href="../657/30657.xml">
terabyte</link>s, or 16 <link xlink:type="simple" xlink:href="../756/9756.xml">
exabyte</link>s of RAM. To put this in perspective, in the days when 4 <link xlink:type="simple" xlink:href="../433/207433.xml">
MB</link> of main memory was commonplace, the maximum memory ceiling of 232 addresses was about 1,000 times larger than typical memory configurations. Today, when over 2 <link xlink:type="simple" xlink:href="../487/176487.xml">
GB</link> of main memory is common, the ceiling of 264 addresses is about ten billion times larger, i.e. ten million times more headroom than the 232 case.</p>
<p>

Most 64-bit microprocessors on the market today have an artificial limit on the amount of memory they can address, because physical constraints make it highly unlikely that one will need support for the full 16.8 million terabyte capacity. For example, the AMD Athlon X2 has a 40-bit address bus and recognizes only 48 bits of the 64-bit virtual address<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref>. The newer Barcelona X4 supports a 48-bit of physical address and 48 bits of the 64-bit virtual address.</p>

</sec>
<sec>
<st>
64-bit processor timeline</st>


<p>

<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../659/34659.xml">
1961</link>: IBM delivers the <computer wordnetid="103082979" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<mainframe wordnetid="103711711" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<machine wordnetid="103699975" confidence="0.8">
<digital_computer wordnetid="103196324" confidence="0.8">
<supercomputer wordnetid="104358117" confidence="0.8">
<link xlink:type="simple" xlink:href="../708/149708.xml">
IBM 7030 Stretch</link></supercomputer>
</digital_computer>
</machine>
</device>
</mainframe>
</instrumentality>
</artifact>
</computer>
 <link xlink:type="simple" xlink:href="../153/37153.xml">
supercomputer</link>, which uses 64-bit data words and 32- or 64-bit instruction words.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../654/34654.xml">
1974</link>: <company wordnetid="108058098" confidence="0.8">
<institution wordnetid="108053576" confidence="0.8">
<link xlink:type="simple" xlink:href="../032/58032.xml">
Control Data Corporation</link></institution>
</company>
 launches the <link xlink:type="simple" xlink:href="../447/937447.xml">
CDC Star-100</link> vector supercomputer, which uses a 64-bit word architecture (previous CDC systems were based on a 60-bit architecture).</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../661/34661.xml">
1976</link>: <link xlink:type="simple" xlink:href="../315/217315.xml">
Cray Research</link> delivers the first <link xlink:type="simple" xlink:href="../171/37171.xml">
Cray-1</link> supercomputer, which is based on a 64-bit word architecture and would form the basis for later Cray vector supercomputers.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../755/34755.xml">
1983</link>: <company wordnetid="108058098" confidence="0.8">
<institution wordnetid="108053576" confidence="0.8">
<link xlink:type="simple" xlink:href="../783/6271783.xml">
Elxsi</link></institution>
</company>
 launches the Elxsi 6400 parallel <link xlink:type="simple" xlink:href="../585/927585.xml">
minisupercomputer</link>. The Elxsi architecture has 64-bit data registers but a 32-bit address space.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../703/34703.xml">
1991</link>: <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../682/20682.xml">
MIPS Technologies</link></company>
 produces the first 64-bit microprocessor, the R4000, which implements the MIPS III ISA, the third revision of their <link xlink:type="simple" xlink:href="../170/20170.xml">
MIPS architecture</link>.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%222%22])">2</ref> The CPU is used in <link xlink:type="simple" xlink:href="../013/28013.xml">
SGI</link> graphics workstations starting with the <computer wordnetid="103082979" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<machine wordnetid="103699975" confidence="0.8">
<digital_computer wordnetid="103196324" confidence="0.8">
<workstation wordnetid="104603399" confidence="0.8">
<link xlink:type="simple" xlink:href="../876/2069876.xml">
IRIS Crimson</link></workstation>
</digital_computer>
</machine>
</device>
</instrumentality>
</artifact>
</computer>
. However, 64-bit support for the R4000 would not be included in the <link xlink:type="simple" xlink:href="../537/14537.xml">
IRIX</link> <link xlink:type="simple" xlink:href="../194/22194.xml">
operating system</link> until IRIX 6.2, released in 1996. <company wordnetid="108058098" confidence="0.8">
<institution wordnetid="108053576" confidence="0.8">
<link xlink:type="simple" xlink:href="../339/17339.xml">
Kendall Square Research</link></institution>
</company>
 deliver their first KSR1 supercomputer, based on a proprietary 64-bit RISC processor architecture running <link>
OSF/1</link>.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../669/34669.xml">
1992</link>: <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../952/7952.xml">
Digital Equipment Corporation</link></company>
 (DEC) introduces the pure 64-bit <link xlink:type="simple" xlink:href="../971/8971.xml">
Alpha</link> architecture which was born from the <link xlink:type="simple" xlink:href="../744/493744.xml">
PRISM</link> project.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%223%22])">3</ref></entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../598/34598.xml">
1993</link>: DEC releases the 64-bit <link>
DEC OSF/1 AXP</link> <family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../815/31815.xml">
Unix-like</link></family>
 operating system (later renamed Tru64 UNIX) and the <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../736/32736.xml">
OpenVMS</link></O>
 operating system for Alpha systems.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../337/18948337.xml">
1994</link>: <link xlink:type="simple" xlink:href="../617/14617.xml">
Intel</link> announces plans for the 64-bit <link xlink:type="simple" xlink:href="../454/15454.xml">
IA-64</link> architecture (jointly developed with <link xlink:type="simple" xlink:href="../973/13973.xml">
Hewlett-Packard</link>) as a successor to its 32-bit <link xlink:type="simple" xlink:href="../046/15046.xml">
IA-32</link> processors. A 1998&ndash;1999 launch date is targeted. SGI releases IRIX 6.0, with 64-bit support for <link xlink:type="simple" xlink:href="../170/20170.xml">
R8000</link> CPUs.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../658/34658.xml">
1995</link>: <company wordnetid="108058098" confidence="0.8">
<institution wordnetid="108053576" confidence="0.8">
<link xlink:type="simple" xlink:href="../980/26980.xml">
Sun</link></institution>
</company>
 launches a 64-bit <link xlink:type="simple" xlink:href="../954/36954.xml">
SPARC</link> processor, the <link xlink:type="simple" xlink:href="../954/36954.xml">
UltraSPARC</link>.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%224%22])">4</ref> <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../222/58222.xml">
Fujitsu</link></company>
-owned <company wordnetid="108058098" confidence="0.8">
<institution wordnetid="108053576" confidence="0.8">
<link xlink:type="simple" xlink:href="../269/987269.xml">
HAL Computer Systems</link></institution>
</company>
 launches workstations based on a 64-bit CPU, HAL's independently designed first-generation SPARC64. IBM releases the A10 and A30 microprocessors, 64-bit PowerPC AS processors.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%225%22])">5</ref> IBM also releases a 64-bit <link xlink:type="simple" xlink:href="../769/39769.xml">
AS/400</link> system upgrade, which can convert the operating system, database and applications. DEC releases <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../736/32736.xml">
OpenVMS</link></O>
 7.0, the first full 64-bit version of OpenVMS for Alpha.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../636/34636.xml">
1996</link>: <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../197/21197.xml">
Nintendo</link></company>
 introduces the <system wordnetid="104377057" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../849/21849.xml">
Nintendo 64</link></system>
 video game console, built around a low-cost variant of the MIPS R4000. HP releases an implementation of the 64-bit 2.0 version of their <link xlink:type="simple" xlink:href="../970/24970.xml">
PA-RISC</link> processor architecture, the <link>
PA-8000</link>.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%226%22])">6</ref></entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../601/34601.xml">
1997</link>: IBM releases the <link>
RS64</link> line of 64-bit <link xlink:type="simple" xlink:href="../281/24281.xml">
PowerPC</link>/PowerPC AS processors.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../647/34647.xml">
1998</link>: IBM releases the <chip wordnetid="103020034" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<microprocessor wordnetid="103760310" confidence="0.8">
<conductor wordnetid="103088707" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<semiconductor_device wordnetid="104171831" confidence="0.8">
<link xlink:type="simple" xlink:href="../642/3314642.xml">
POWER3</link></semiconductor_device>
</device>
</conductor>
</microprocessor>
</instrumentality>
</artifact>
</chip>
 line of full-64-bit PowerPC/<chip wordnetid="103020034" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<microprocessor wordnetid="103760310" confidence="0.8">
<conductor wordnetid="103088707" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<semiconductor_device wordnetid="104171831" confidence="0.8">
<link xlink:type="simple" xlink:href="../570/60570.xml">
POWER</link></semiconductor_device>
</device>
</conductor>
</microprocessor>
</instrumentality>
</artifact>
</chip>
 processors.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%227%22])">7</ref> Sun releases <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../145/46145.xml">
Solaris 7</link></database>
</wordnet>
</lexical_database>
</electronic_database>
</information>
</message>
, with full 64-bit <link xlink:type="simple" xlink:href="../954/36954.xml">
UltraSPARC</link> support.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../553/34553.xml">
1999</link>: Intel releases the <link xlink:type="simple" xlink:href="../772/47772.xml">
instruction set</link> for the IA-64 architecture. <link xlink:type="simple" xlink:href="../ury/24th_century.xml">
AMD</link> publicly discloses its set of 64-bit extensions to IA-32, called <link xlink:type="simple" xlink:href="../374/244374.xml">
x86-64</link> (later renamed AMD64).</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../548/34548.xml">
2000</link>: IBM ships its first 64-bit <link xlink:type="simple" xlink:href="../266/1856266.xml">
ESA/390</link>-compatible <link xlink:type="simple" xlink:href="../266/20266.xml">
mainframe</link>, the <link xlink:type="simple" xlink:href="../088/3968088.xml">
zSeries</link> z900, and its new <link xlink:type="simple" xlink:href="../122/39122.xml">
z/OS</link> operating system. 64-bit <structure wordnetid="105726345" confidence="0.8">
<arrangement wordnetid="105726596" confidence="0.8">
<distribution wordnetid="105729036" confidence="0.8">
<link xlink:type="simple" xlink:href="../604/1266604.xml">
Linux on zSeries</link></distribution>
</arrangement>
</structure>
 follows almost immediately.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../551/34551.xml">
2001</link>: Intel finally ships its 64-bit processor line, now branded <chip wordnetid="103020034" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<microprocessor wordnetid="103760310" confidence="0.8">
<conductor wordnetid="103088707" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<semiconductor_device wordnetid="104171831" confidence="0.8">
<link xlink:type="simple" xlink:href="../454/15454.xml">
Itanium</link></semiconductor_device>
</device>
</conductor>
</microprocessor>
</instrumentality>
</artifact>
</chip>
, targeting high-end servers. It fails to meet expectations due to the repeated delays in getting IA-64 to market. <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../297/6097297.xml">
Linux</link></O>
 is the first operating system to run on the processor at its release.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../163/36163.xml">
2003</link>: AMD introduces its <chip wordnetid="103020034" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<microprocessor wordnetid="103760310" confidence="0.8">
<conductor wordnetid="103088707" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<semiconductor_device wordnetid="104171831" confidence="0.8">
<link xlink:type="simple" xlink:href="../237/165237.xml">
Opteron</link></semiconductor_device>
</device>
</conductor>
</microprocessor>
</instrumentality>
</artifact>
</chip>
 and <chip wordnetid="103020034" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<microprocessor wordnetid="103760310" confidence="0.8">
<conductor wordnetid="103088707" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<semiconductor_device wordnetid="104171831" confidence="0.8">
<link xlink:type="simple" xlink:href="../944/188944.xml">
Athlon 64</link></semiconductor_device>
</device>
</conductor>
</microprocessor>
</instrumentality>
</artifact>
</chip>
 processor lines, based on its AMD64 architecture which is the first x86 based 64 bit processor architecture. <link xlink:type="simple" xlink:href="../856/856.xml">
Apple</link> also ships the 64-bit "G5" PowerPC 970 CPU courtesy of IBM, along with an update to its <link xlink:type="simple" xlink:href="../640/20640.xml">
Mac OS X</link> operating system which adds partial support for 64-bit mode. Several <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../297/6097297.xml">
Linux</link></O>
 <link xlink:type="simple" xlink:href="../212/18212.xml">
distributions</link> release with support for AMD64. <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../001/19001.xml">
Microsoft</link></company>
 announces plans to create a version of its <link xlink:type="simple" xlink:href="../890/18890.xml">
Windows</link> operating system to support the AMD64 architecture. <platform wordnetid="103961939" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<surface wordnetid="104362025" confidence="0.8">
<horizontal_surface wordnetid="103536348" confidence="0.8">
<link xlink:type="simple" xlink:href="../554/7580554.xml">
FreeBSD</link></horizontal_surface>
</surface>
</artifact>
</platform>
 releases with support for AMD64.  Intel maintains that its Itanium chips would remain its only 64-bit processors.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../524/35524.xml">
2004</link>: Intel, reacting to the market success of AMD, admits it has been developing a clone of the AMD64 extensions named IA-32e (later renamed EM64T).  Intel also ships updated versions of its <chip wordnetid="103020034" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<microprocessor wordnetid="103760310" confidence="0.8">
<conductor wordnetid="103088707" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<semiconductor_device wordnetid="104171831" confidence="0.8">
<link xlink:type="simple" xlink:href="../920/269920.xml">
Xeon</link></semiconductor_device>
</device>
</conductor>
</microprocessor>
</instrumentality>
</artifact>
</chip>
 and <chip wordnetid="103020034" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<microprocessor wordnetid="103760310" confidence="0.8">
<conductor wordnetid="103088707" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<semiconductor_device wordnetid="104171831" confidence="0.8">
<link xlink:type="simple" xlink:href="../228/165228.xml">
Pentium 4</link></semiconductor_device>
</device>
</conductor>
</microprocessor>
</instrumentality>
</artifact>
</chip>
 processor families supporting the new instructions.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 2004: <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../567/207567.xml">
VIA Technologies</link></company>
 announces the <chip wordnetid="103020034" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<microprocessor wordnetid="103760310" confidence="0.8">
<conductor wordnetid="103088707" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<semiconductor_device wordnetid="104171831" confidence="0.8">
<link xlink:type="simple" xlink:href="../905/17667905.xml">
Isaiah</link></semiconductor_device>
</device>
</conductor>
</microprocessor>
</instrumentality>
</artifact>
</chip>
 64-bit processor.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%228%22])">8</ref></entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../984/35984.xml">
2005</link>: On <link xlink:type="simple" xlink:href="../793/15793.xml">
January 31</link>, Sun releases <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../145/46145.xml">
Solaris 10</link></database>
</wordnet>
</lexical_database>
</electronic_database>
</information>
</message>
 with support for AMD64 and EM64T processors. On April 30, Microsoft releases <link>
Windows XP Professional x64 Edition</link> for AMD64 and EM64T processors.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../164/36164.xml">
2006</link>: Sony, IBM, and Toshiba begin manufacturing of the 64-bit <chip wordnetid="103020034" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<microprocessor wordnetid="103760310" confidence="0.8">
<conductor wordnetid="103088707" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<semiconductor_device wordnetid="104171831" confidence="0.8">
<link xlink:type="simple" xlink:href="../950/803950.xml">
Cell processor</link></semiconductor_device>
</device>
</conductor>
</microprocessor>
</instrumentality>
</artifact>
</chip>
 for use in the <system wordnetid="104377057" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../951/24951.xml">
PlayStation 3</link></system>
, servers, workstations, and other appliances.</entry>
</list>
</p>

</sec>
<sec>
<st>
32 vs 64 bit</st>
<p>

A change from a <link xlink:type="simple" xlink:href="../733/80733.xml">
32-bit</link> to a 64-bit architecture is a fundamental alteration, as most <link xlink:type="simple" xlink:href="../194/22194.xml">
operating system</link>s must be extensively modified to take advantage of the new architecture. Other software must also be <link xlink:type="simple" xlink:href="../804/214804.xml">
ported</link> to use the new capabilities; older software is usually supported through either a <it>hardware compatibility mode</it> (in which the new processors support the older 32-bit version of the instruction set as well as the 64-bit version), through software <link xlink:type="simple" xlink:href="../558/1042558.xml">
emulation</link>, or by the actual implementation of a 32-bit processor core within the 64-bit processor (as with the Itanium processors from Intel, which include an <link xlink:type="simple" xlink:href="../198/34198.xml">
x86</link> processor core to run 32-bit x86 applications). The operating systems for those 64-bit architectures generally support both 32-bit and 64-bit applications.</p>
<p>

64-bit processors calculate particular tasks (such as factorials of large figures) twice as fast as working in 32-bit environments (given example is derived from comparison between 32-bit and 64-bit Windows Calculator; noticeable for factorial of say 100 000). This gives a general feeling of theoretical possibilities of 64-bit optimized applications.</p>
<p>

One significant exception to this is the <link xlink:type="simple" xlink:href="../769/39769.xml">
AS/400</link>, whose software runs on a virtual <link xlink:type="simple" xlink:href="../772/47772.xml">
ISA</link>, called TIMI (Technology Independent Machine Interface) which is translated to native machine code by low-level software before being executed. The low-level software is all that has to be rewritten to move the entire OS and all software to a new platform, such as when IBM transitioned their line from the older 32/48-bit "IMPI" instruction set to 64-bit PowerPC (IMPI wasn't anything like 32-bit PowerPC, so this was an even bigger transition than from a 32-bit version of an instruction set to a 64-bit version of the same instruction set).</p>
<p>

While 64-bit architectures indisputably make working with large data sets in applications such as <link xlink:type="simple" xlink:href="../733/8733.xml">
digital video</link>, scientific computing, and large <link xlink:type="simple" xlink:href="../377/8377.xml">
database</link>s easier, there has been considerable debate as to whether they or their 32-bit compatibility modes will be faster than comparably-priced 32-bit systems for other tasks. In <link xlink:type="simple" xlink:href="../374/244374.xml">
x86-64</link> architecture (AMD64), the majority of the 32-bit operating systems and applications are able to run smoothly on the 64-bit hardware.</p>
<p>

Sun's 64-bit Java virtual machines are slower to start up than their 32-bit virtual machines because Sun has only implemented the "server" <link xlink:type="simple" xlink:href="../632/220632.xml">
JIT</link> compiler (C2) for 64-bit platforms.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%229%22])">9</ref> The "client" JIT compiler (C1), which produces less efficient code but compiles much faster, is unavailable on 64-bit platforms.</p>
<p>

It should be noted that speed is not the only factor to consider in a comparison of 32-bit and 64-bit processors. Applications such as multi-tasking, stress testing, and clustering (for <link xlink:type="simple" xlink:href="../527/832527.xml">
high-performance computing</link>), HPC, may be more suited to a 64-bit architecture given the correct deployment. 64-bit clusters have been widely deployed in large organizations such as IBM, HP and Microsoft, for this reason.</p>

</sec>
<sec>
<st>
Pros and cons</st>
<p>

A common misconception is that 64-bit architectures are no better than 32-bit architectures unless the computer has more than 4 GB of memory. This is not entirely true:</p>
<p>

<list>
<entry level="1" type="bullet">

Some operating systems reserve portions of <link xlink:type="simple" xlink:href="../178/45178.xml">
process</link> <link xlink:type="simple" xlink:href="../144/507144.xml">
address space</link> for OS use, effectively reducing the total address space available for mapping memory for user programs. For instance, Windows XP DLLs and userland OS components are mapped into each process's address space, leaving only 2 to 3.8 GB (depending on the settings) address space available, even if the computer has 4 GB of RAM. This restriction is not present in 64-bit operating systems.</entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../248/8246248.xml">
Memory-mapped file</link>s are becoming less useful with 32-bit architectures, especially with the introduction of relatively cheap recordable DVD technology. A 4 GB file is no longer uncommon, and such large files cannot be memory mapped easily to 32-bit architectures; only a region of the file can be mapped into the address space, and to access such a file by memory mapping, those regions will have to be mapped into and out of the address space as needed. This is a problem, as memory mapping remains one of the most efficient disk-to-memory methods, when properly implemented by the OS.</entry>
<entry level="1" type="bullet">

Some programs such as data encryption software can benefit greatly from 64-bit registers (if the software is 64-bit compiled) and effectively execute 3 to 5 times faster on 64-bit than on 32-bit.</entry>
</list>
</p>
<p>

The main disadvantage of 64-bit architectures is that relative to 32-bit architectures the same data occupies more space in memory (due to swollen pointers and possibly other types and alignment padding). This increases the memory requirements of a given process and can have implications for efficient processor cache utilization. Maintaining a partial 32-bit model is one way to handle this and is in general reasonably effective. In fact, the highly performance-oriented <link xlink:type="simple" xlink:href="../122/39122.xml">
z/OS</link> operating system takes this approach currently, requiring program code to reside in any number of <link xlink:type="simple" xlink:href="../733/80733.xml">
32-bit</link> address spaces while data objects can (optionally) reside in 64-bit regions.</p>
<p>

Currently, most commercial <link xlink:type="simple" xlink:href="../198/34198.xml">
x86</link> software is written in 32-bit code, not 64-bit code, so it does not take advantage of the larger 64-bit address space or wider 64-bit registers and data paths on x86 processors, or the additional registers in 64-bit mode. However, users of most RISC platforms, and users of <link xlink:type="simple" xlink:href="../635/10635.xml">
free</link> or <link xlink:type="simple" xlink:href="../758/18938758.xml">
open source</link> operating systems have been able to use exclusive 64-bit computing environments for years. Not all such applications require a large address space nor manipulate 64-bit data items, so they wouldn't benefit from the larger address space or wider registers and data paths. The main advantage to 64-bit versions of such applications is the ability to access more registers in the <link xlink:type="simple" xlink:href="../374/244374.xml">
x86-64</link> architecture.</p>

<ss1>
<st>
 Software availability </st>
<p>

x86-based 64-bit systems sometimes lack equivalents to <link xlink:type="simple" xlink:href="../309/5309.xml">
software</link> that is written for 32-bit architectures. The most severe problem in Microsoft Windows is incompatible <link xlink:type="simple" xlink:href="../101/9101.xml">
device driver</link>s. Although most software can run in a 32-bit compatibility mode (also known as an <link xlink:type="simple" xlink:href="../558/1042558.xml">
emulation</link> mode, e.g. Microsoft <link xlink:type="simple" xlink:href="../798/1252798.xml">
WoW64</link> Technology for IA64) or run in 32-bit mode natively (on AMD64), it is usually impossible to run a driver (or similar software) in that mode since such a <link xlink:type="simple" xlink:href="../783/5783.xml">
program</link> usually runs in between the <link xlink:type="simple" xlink:href="../194/22194.xml">
OS</link> and the hardware, where direct <link xlink:type="simple" xlink:href="../558/1042558.xml">
emulation</link> cannot be employed. Currently the 64-bit versions for many existing device drivers are not available, so using 64-bit Microsoft Windows operating system can become frustrating as a result. However most devices made after February 2007 have 64-bit drivers available as well as many devices made in the later 2006 period.</p>
<p>

Because device drivers in operating systems with <link xlink:type="simple" xlink:href="../825/20825.xml">
monolithic kernels</link>, and in many operating systems with <link xlink:type="simple" xlink:href="../041/4345041.xml">
hybrid kernel</link>s, execute within the operating system kernel, it is possible to run the kernel as a 32-bit process while still supporting 64-bit user processes. This provides the memory and performance benefits of 64-bit for users without breaking binary compatibility with existing 32-bit device drivers, at the cost of some additional overhead within the kernel. This is the mechanism by which <link xlink:type="simple" xlink:href="../640/20640.xml">
Mac OS X</link> enables 64-bit processes while still supporting 32-bit device drivers.</p>

</ss1>
</sec>
<sec>
<st>
64-bit data models</st>
<p>

Converting application software written in a <link xlink:type="simple" xlink:href="../842/189842.xml">
high-level language</link> from a 32-bit architecture to a 64-bit architecture varies in difficulty.
One common recurring problem is that some programmers assume that <idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<category wordnetid="105838765" confidence="0.8">
<type wordnetid="105840188" confidence="0.8">
<kind wordnetid="105839024" confidence="0.8">
<link xlink:type="simple" xlink:href="../018/459018.xml">
pointers</link></kind>
</type>
</category>
</concept>
</idea>
 have the same length as some other data type. These programmers assume they can transfer quantities between these data types without losing information.
Those assumptions happen to be true on some 32-bit machines (and even some 16-bit machines), but they are no longer true on 64-bit machines.
The <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../021/6021.xml">
C programming language</link></programming_language>
 and its descendant <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../038/72038.xml">
C++</link></programming_language>
 make it particularly easy to make this sort of mistake.  Differences between the <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../021/6021.xml#xpointer(//*[./st=%22ANSI+C+and+ISO+C%22])">
C89</link></programming_language>
 and <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../021/6021.xml#xpointer(//*[./st=%22C99%22])">
C99</link></programming_language>
 language standards also exacerbate the problem <weblink xlink:type="simple" xlink:href="http://groups.google.com/group/comp.lang.c/msg/82fdb7c12af4e6ba">
http://groups.google.com/group/comp.lang.c/msg/82fdb7c12af4e6ba</weblink>.</p>
<p>

To avoid this mistake in C and C++, the sizeof operator can be used to determine the size of these primitive types if decisions based on their size need to be made, both at compile- and run-time. Also, the <link xlink:type="simple" xlink:href="../112/6913112.xml">
limits.h</link>&amp;gt; header in the <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../021/6021.xml#xpointer(//*[./st=%22C99%22])">
C99</link></programming_language>
 standard, and numeric_limits class in  header in the C++ standard, give more helpful info; sizeof only returns the size in <it><idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<category wordnetid="105838765" confidence="0.8">
<type wordnetid="105840188" confidence="0.8">
<kind wordnetid="105839024" confidence="0.8">
<link xlink:type="simple" xlink:href="../443/73443.xml">
chars</link></kind>
</type>
</category>
</concept>
</idea>
</it>. This used to be misleading, because the standards leave the definition of the CHAR_BIT macro, and therefore the number of bits in a <it>char</it>, to the implementations. However, except for those compilers targeting <link xlink:type="simple" xlink:href="../505/154505.xml">
DSP</link>s, "64 bits == 8 chars of 8 bits each" has become the norm.</p>
<p>

One needs to be careful to use the ptrdiff_t type (in the standard header ) for the result of subtracting two pointers; too much code incorrectly uses "int" or "long" instead. To represent a pointer (rather than a pointer difference) as an integer, use uintptr_t where available (it is only defined in C99, but some compilers otherwise conforming to an earlier version of the standard offer it as an extension).</p>
<p>

Neither C nor C++ define the length of a pointer, int, or long to be a specific number of bits. C99, however, <link xlink:type="simple" xlink:href="../497/7324497.xml">
defines several dedicated integer types</link> with an exact number of bits.</p>
<p>

In most programming environments on 32-bit machines, pointers, "int" types, and "long" types are all 32 bits wide.</p>
<p>

However, in many programming environments on 64-bit machines, "int" variables are still 32 bits wide, but "long"s and pointers are 64 bits wide. These are described as having an <b>LP64</b> <link xlink:type="simple" xlink:href="../871/82871.xml">
data model</link>. Another alternative is the <b>ILP64</b> data model in which all three data types are 64 bits wide, and even <b>SILP64</b> where "short" variables are also 64 bits wide. However, in most cases the modifications required are relatively minor and straightforward, and many well-written programs can simply be recompiled for the new environment without changes. Another alternative is the <b>LLP64</b> model, which maintains compatibility with 32-bit code by leaving both int and long as 32-bit. "LL" refers to the "long long" type, which is at least 64 bits on all platforms, including 32-bit environments.</p>
<p>

Many 64-bit compilers today use the <b>LP64</b> model (including Solaris, AIX, HP, Linux, Mac OS X, FreeBSD, and IBM z/OS native compilers). Microsoft's VC++ compiler uses the <b>LLP64</b> model. The disadvantage of the LP64 model is that storing a long into an int may overflow. On the other hand, casting a pointer to a long will work. In the LLP model, the reverse is true. These are not problems which affect fully standard-compliant code but code is often written with implicit assumptions about the widths of integer types.</p>
<p>

Note that a programming model is a choice made on a per-compiler basis, and several can coexist on the same OS. However typically the programming model chosen by the OS API as primary model dominates.</p>
<p>

Another consideration is the data model used for <link xlink:type="simple" xlink:href="../101/9101.xml">
driver</link>s. Drivers make up the majority of the operating system code in most modern operating systems (although many may not be loaded when the operating system is running). Many drivers use pointers heavily to manipulate data, and in some cases have to load pointers of a certain size into the hardware they support for <link xlink:type="simple" xlink:href="../717/57717.xml">
DMA</link>. As an example, a driver for a 32-bit PCI device asking the device to DMA data into upper areas of a 64-bit machine's memory could not satisfy requests from the operating system to load data from the device to memory above the 4 gigabyte barrier, because the pointers for those addresses would not fit into the DMA registers of the device. This problem is solved by having the OS take the memory restrictions of the device into account when generating requests to drivers for DMA, or by using an <link xlink:type="simple" xlink:href="../181/5313181.xml">
IOMMU</link>.</p>
<p>

<table class="wikitable">
<caption>
64-bit data models</caption>
<row>
<header>
Data model</header>
<header>
short</header>
<header>
int</header>
<header>
long</header>
<header>
long long</header>
<header>
pointers</header>
</row>
<row>
<header>
LP64</header>
<col>
16</col>
<col>
32</col>
<col>
64</col>
<col>
64</col>
<col>
64</col>
</row>
<row>
<header>
ILP64</header>
<col>
16</col>
<col>
64</col>
<col>
64</col>
<col>
64</col>
<col>
64</col>
</row>
<row>
<header>
SILP64</header>
<col>
64</col>
<col>
64</col>
<col>
64</col>
<col>
64</col>
<col>
64</col>
</row>
<row>
<header>
LLP64</header>
<col>
16</col>
<col>
32</col>
<col>
32</col>
<col>
64</col>
<col>
64</col>
</row>
</table>
</p>

</sec>
<sec>
<st>
Current 64-bit microprocessor architectures</st>

<p>

64-bit <link xlink:type="simple" xlink:href="../597/7597.xml">
microprocessor architectures</link> (<link xlink:type="simple" xlink:href="../458/1292458.xml">
as of 2006</link>) include:
<list>
<entry level="1" type="bullet">

 The <link xlink:type="simple" xlink:href="../971/8971.xml">
DEC Alpha</link> architecture (view <weblink xlink:type="simple" xlink:href="http://research.microsoft.com/~gbell/Digital/timeline/64-bit.htm">
Digital Alpha timeline</weblink>)</entry>
<entry level="1" type="bullet">

 Intel's <link xlink:type="simple" xlink:href="../454/15454.xml">
IA-64</link> architecture (used in Intel's <chip wordnetid="103020034" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<microprocessor wordnetid="103760310" confidence="0.8">
<conductor wordnetid="103088707" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<semiconductor_device wordnetid="104171831" confidence="0.8">
<link xlink:type="simple" xlink:href="../454/15454.xml">
Itanium</link></semiconductor_device>
</device>
</conductor>
</microprocessor>
</instrumentality>
</artifact>
</chip>
 <link xlink:type="simple" xlink:href="../218/5218.xml">
CPUs</link>)</entry>
<entry level="1" type="bullet">

 The <link xlink:type="simple" xlink:href="../374/244374.xml">
x86-64</link> architecture (referred to as "x64" by Microsoft and Sun), consisting of converging 64-bit extensions of the <link xlink:type="simple" xlink:href="../198/34198.xml">
x86</link> architecture</entry>
<entry level="2" type="bullet">

AMD's AMD64 extensions (used in AMD's <chip wordnetid="103020034" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<microprocessor wordnetid="103760310" confidence="0.8">
<conductor wordnetid="103088707" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<semiconductor_device wordnetid="104171831" confidence="0.8">
<link xlink:type="simple" xlink:href="../944/188944.xml">
Athlon 64</link></semiconductor_device>
</device>
</conductor>
</microprocessor>
</instrumentality>
</artifact>
</chip>
 , <chip wordnetid="103020034" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<microprocessor wordnetid="103760310" confidence="0.8">
<conductor wordnetid="103088707" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<semiconductor_device wordnetid="104171831" confidence="0.8">
<link xlink:type="simple" xlink:href="../237/165237.xml">
Opteron</link></semiconductor_device>
</device>
</conductor>
</microprocessor>
</instrumentality>
</artifact>
</chip>
, <chip wordnetid="103020034" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<microprocessor wordnetid="103760310" confidence="0.8">
<conductor wordnetid="103088707" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<semiconductor_device wordnetid="104171831" confidence="0.8">
<link xlink:type="simple" xlink:href="../929/846929.xml">
Sempron</link></semiconductor_device>
</device>
</conductor>
</microprocessor>
</instrumentality>
</artifact>
</chip>
, <chip wordnetid="103020034" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<microprocessor wordnetid="103760310" confidence="0.8">
<conductor wordnetid="103088707" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<semiconductor_device wordnetid="104171831" confidence="0.8">
<link xlink:type="simple" xlink:href="../264/1371264.xml">
Turion 64</link></semiconductor_device>
</device>
</conductor>
</microprocessor>
</instrumentality>
</artifact>
</chip>
 and <chip wordnetid="103020034" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<microprocessor wordnetid="103760310" confidence="0.8">
<conductor wordnetid="103088707" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<semiconductor_device wordnetid="104171831" confidence="0.8">
<link xlink:type="simple" xlink:href="../392/11025392.xml">
Phenom</link></semiconductor_device>
</device>
</conductor>
</microprocessor>
</instrumentality>
</artifact>
</chip>
 <link xlink:type="simple" xlink:href="../218/5218.xml">
CPUs</link>)</entry>
<entry level="2" type="bullet">

Intel's Intel 64 extensions (used in Intel's newer <chip wordnetid="103020034" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<microprocessor wordnetid="103760310" confidence="0.8">
<conductor wordnetid="103088707" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<semiconductor_device wordnetid="104171831" confidence="0.8">
<link xlink:type="simple" xlink:href="../254/77254.xml">
Celeron</link></semiconductor_device>
</device>
</conductor>
</microprocessor>
</instrumentality>
</artifact>
</chip>
, <chip wordnetid="103020034" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<microprocessor wordnetid="103760310" confidence="0.8">
<conductor wordnetid="103088707" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<semiconductor_device wordnetid="104171831" confidence="0.8">
<link xlink:type="simple" xlink:href="../228/165228.xml">
Pentium 4</link></semiconductor_device>
</device>
</conductor>
</microprocessor>
</instrumentality>
</artifact>
</chip>
, <chip wordnetid="103020034" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<microprocessor wordnetid="103760310" confidence="0.8">
<conductor wordnetid="103088707" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<semiconductor_device wordnetid="104171831" confidence="0.8">
<link xlink:type="simple" xlink:href="../876/1560876.xml">
Pentium D</link></semiconductor_device>
</device>
</conductor>
</microprocessor>
</instrumentality>
</artifact>
</chip>
, <chip wordnetid="103020034" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<microprocessor wordnetid="103760310" confidence="0.8">
<conductor wordnetid="103088707" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<semiconductor_device wordnetid="104171831" confidence="0.8">
<link xlink:type="simple" xlink:href="../920/269920.xml">
Xeon</link></semiconductor_device>
</device>
</conductor>
</microprocessor>
</instrumentality>
</artifact>
</chip>
, and <link xlink:type="simple" xlink:href="../988/5048988.xml">
Core 2</link> <link xlink:type="simple" xlink:href="../218/5218.xml">
CPUs</link>)</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../954/36954.xml">
SPARC</link> architecture (64-bit as of SPARC V9)</entry>
<entry level="2" type="bullet">

 Sun's UltraSPARC architecture</entry>
<entry level="2" type="bullet">

 Fujitsu's SPARC64 architecture</entry>
<entry level="1" type="bullet">

 IBM's <chip wordnetid="103020034" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<microprocessor wordnetid="103760310" confidence="0.8">
<conductor wordnetid="103088707" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<semiconductor_device wordnetid="104171831" confidence="0.8">
<link xlink:type="simple" xlink:href="../570/60570.xml">
POWER</link></semiconductor_device>
</device>
</conductor>
</microprocessor>
</instrumentality>
</artifact>
</chip>
 architecture (64-bit as of <chip wordnetid="103020034" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<microprocessor wordnetid="103760310" confidence="0.8">
<conductor wordnetid="103088707" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<semiconductor_device wordnetid="104171831" confidence="0.8">
<link xlink:type="simple" xlink:href="../642/3314642.xml">
POWER3</link></semiconductor_device>
</device>
</conductor>
</microprocessor>
</instrumentality>
</artifact>
</chip>
 and <link>
RS64</link> variants)</entry>
<entry level="1" type="bullet">

 IBM/<company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../319/20319.xml">
Motorola</link></company>
's PowerPC architecture (64-bit <chip wordnetid="103020034" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<microprocessor wordnetid="103760310" confidence="0.8">
<conductor wordnetid="103088707" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<semiconductor_device wordnetid="104171831" confidence="0.8">
<link xlink:type="simple" xlink:href="../684/8632684.xml#xpointer(//*[./st=%22PowerPC+620%22])">
PowerPC 620</link></semiconductor_device>
</device>
</conductor>
</microprocessor>
</instrumentality>
</artifact>
</chip>
 and PowerPC 970 variants)</entry>
<entry level="1" type="bullet">

 IBM's <link xlink:type="simple" xlink:href="../144/1856144.xml">
z/Architecture</link>, used by IBM zSeries and <link xlink:type="simple" xlink:href="../789/2458789.xml">
System z9</link> <link xlink:type="simple" xlink:href="../872/14872.xml">
mainframes</link>, a 64-bit version of the <link xlink:type="simple" xlink:href="../266/1856266.xml">
ESA/390</link> architecture</entry>
<entry level="1" type="bullet">

 MIPS Technologies' MIPS IV, MIPS V, and MIPS64 <link xlink:type="simple" xlink:href="../170/20170.xml">
architectures</link></entry>
<entry level="1" type="bullet">

 HP's <artifact wordnetid="100021939" confidence="0.8">
<merchandise wordnetid="103748886" confidence="0.8">
<commodity wordnetid="103076708" confidence="0.8">
<link xlink:type="simple" xlink:href="../970/24970.xml">
PA-RISC family</link></commodity>
</merchandise>
</artifact>
 (64-bit as of PA-RISC 2.0)</entry>
<entry level="1" type="bullet">

 <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../989/26989.xml">
Sony</link></company>
's <link xlink:type="simple" xlink:href="../958/15822958.xml">
Playstation 2</link> CPU <link xlink:type="simple" xlink:href="../182/1191182.xml">
Emotion Engine</link> is advertised as a 128 bit processor. It has 128-bit registers and busses, like <link xlink:type="simple" xlink:href="../988/5048988.xml">
Intel Core 2 Duo</link>, but is only a 64-bit processor in the traditional sense; it has 64-bit memory address. Most high-end CPUs today have 64-bit memory address, there are only very few true 128-bit supercomputer chips.</entry>
</list>
</p>
<p>

Most 64-bit processor architectures can execute code for the 32-bit version of the architecture natively without any performance penalty. This kind of support is commonly called <it>biarch support</it> or more generally <it>multi-arch support</it>.</p>

</sec>
<sec>
<st>
Images</st>
<p>

In digital imaging, 64-bit refers to <link xlink:type="simple" xlink:href="../877/2572877.xml#xpointer(//*[./st=%22Images%22])">
48-bit images</link> with a <link xlink:type="simple" xlink:href="../535/64535.xml">
16-bit</link> <link xlink:type="simple" xlink:href="../049/2049.xml">
alpha channel</link>.</p>

</sec>
<sec>
<st>
See also</st>
<p>

<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../847/25847.xml">
Computer memory</link></entry>
</list>
</p>

</sec>
<sec>
<st>
References</st>

<p>

<reflist>
<entry id="1">
AMD Athlon 64 X2 Dual-Core Processor Product Data Sheet, order number: 33425, revision 3.10, January 2007, Advanced Micro Devices, Inc.</entry>
<entry id="2">
Joe Heinrich: "MIPS R4000 Microprocessor User's Manual, Second Edition", 1994, MIPS Technologies, Inc.</entry>
<entry id="3">
Richard L. Sites: "Alpha AXP Architecture", Digital Technical Journal, Volume 4, Number 4, 1992, Digital Equipment Corporation.</entry>
<entry id="4">
Linley Gwennap: "UltraSparc Unleashes SPARC Performance", Microprocessor Report, Volume 8, Number 13, 3 October 1994, MicroDesign Resources.</entry>
<entry id="5">
J. W. Bishop, et al.: "PowerPC AS A10 64-bit RISC microprocessor", IBM Journal of Research and Development, Volume 40, Number 4, July 1996, IBM Corporation.</entry>
<entry id="6">
Linley Gwennap: "PA-8000 Combines Complexity and Speed", Microprocessor Report, Volume 8, Number 15, 14 November 1994, MicroDesign Resources.</entry>
<entry id="7">
F. P. O'Connell and S. W. White: "POWER3: The next generation of PowerPC processors", IBM Journal of Research and Development, Volume 44, Number 6, November 2000, IBM Corporation.</entry>
<entry id="8">
"<weblink xlink:type="simple" xlink:href="http://www.via.com.tw/en/resources/pressroom/2004_archive/pr041005_fpf-isaiah.jsp">
VIA Unveils Details of Next-Generation Isaiah Processor Core</weblink>".&#32;  VIA Technologies, Inc..&#32;Retrieved on <link>
2007-07-18</link>.</entry>
<entry id="9">
"<weblink xlink:type="simple" xlink:href="http://java.sun.com/docs/hotspot/HotSpotFAQ.html#64bit_compilers">
Frequently Asked Questions About the Java HotSpot VM</weblink>".&#32;  Sun Microsystems, Inc.&#32;Retrieved on <link>
2007-05-03</link>.</entry>
</reflist>
</p>

</sec>
<sec>
<st>
External links</st>
<p>

<list>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.unix.org/version2/whatsnew/lp64_wp.html">
64-Bit Programming Models: Why LP64?</weblink></entry>
</list>
</p>

<p>

<it>This article was originally based on material from the <work wordnetid="104599396" confidence="0.8">
<product wordnetid="104007894" confidence="0.8">
<creation wordnetid="103129123" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<wordbook wordnetid="106418693" confidence="0.8">
<book wordnetid="106410904" confidence="0.8">
<dictionary wordnetid="106418901" confidence="0.8">
<reference_book wordnetid="106417598" confidence="0.8">
<publication wordnetid="106589574" confidence="0.8">
<link xlink:type="simple" xlink:href="../324/11324.xml">
Free On-line Dictionary of Computing</link></publication>
</reference_book>
</dictionary>
</book>
</wordbook>
</artifact>
</creation>
</product>
</work>
, which is  under the <link xlink:type="simple" xlink:href="../782/18938782.xml">
GFDL</link>.</it></p>

<p>

<table style=";" class="navbox" cellspacing="0">
<row>
<col style="padding:2px;">
<table style="width:100%;background:transparent;color:inherit;;" class="nowraplinks collapsible autocollapse " cellspacing="0">
<row>
<header colspan="2" style=";" class="navbox-title">
<link xlink:type="simple" xlink:href="../218/5218.xml">
CPU technologies</link></header>
</row>
<row style="height:2px;">

</row>
<row>
<col style=";;" class="navbox-group">
<link xlink:type="simple" xlink:href="../772/47772.xml">
Architecture</link></col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<link xlink:type="simple" xlink:href="../772/47772.xml">
ISA</link> : <class wordnetid="107997703" confidence="0.8">
<collection wordnetid="107951464" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<link xlink:type="simple" xlink:href="../622/7622.xml">
CISC</link></group>
</collection>
</class>
 &nbsp;·  <class wordnetid="107997703" confidence="0.8">
<collection wordnetid="107951464" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<link xlink:type="simple" xlink:href="../622/7622.xml#xpointer(//*[./st=%22CISC_and_RISC_processors%22])">
CISC-RISC (x86)</link></group>
</collection>
</class>
&nbsp;·  <link xlink:type="simple" xlink:href="../151/685151.xml">
EPIC</link>&nbsp;·  <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<model wordnetid="110324560" confidence="0.8">
<assistant wordnetid="109815790" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../713/151713.xml">
OISC</link></causal_agent>
</worker>
</assistant>
</model>
</person>
</physical_entity>
&nbsp;· <class wordnetid="107997703" confidence="0.8">
<collection wordnetid="107951464" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<link xlink:type="simple" xlink:href="../201/26201.xml">
RISC</link></group>
</collection>
</class>
&nbsp;·  <link xlink:type="simple" xlink:href="../706/51706.xml">
VLIW</link>&nbsp;·  <link xlink:type="simple" xlink:href="../509/1940509.xml">
ZISC</link>&nbsp;·  <link xlink:type="simple" xlink:href="../019/58019.xml">
Harvard architecture</link>&nbsp;·  <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<model wordnetid="110324560" confidence="0.8">
<assistant wordnetid="109815790" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../091/478091.xml">
Von Neumann architecture</link></causal_agent>
</worker>
</assistant>
</model>
</person>
</physical_entity>
&nbsp;·  <link xlink:type="simple" xlink:href="../733/80733.xml">
32 bit</link>&nbsp;·  <link xlink:type="simple" xlink:href="../285/148285.xml">
64 bit</link>&nbsp;·  <link xlink:type="simple" xlink:href="../724/1800724.xml">
128 bit</link></col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
<link xlink:type="simple" xlink:href="../162/145162.xml">
Parallelism</link></col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-even">
<table style="width:100%;;;;" class="nowraplinks  navbox-subgroup" cellspacing="0">
<row>
<col style=";padding-left:0em;padding-right:0em;;" class="navbox-group">
Pipeline</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<link xlink:type="simple" xlink:href="../314/220314.xml">
Instruction pipelining</link>&nbsp;·  <link xlink:type="simple" xlink:href="../307/1002307.xml">
In-Order &amp; Out-of-Order execution</link>&nbsp;·  <register wordnetid="106507041" confidence="0.8">
<record wordnetid="106647206" confidence="0.8">
<indication wordnetid="106797169" confidence="0.8">
<evidence wordnetid="106643408" confidence="0.8">
<written_record wordnetid="106502378" confidence="0.8">
<link xlink:type="simple" xlink:href="../852/435852.xml">
Register renaming</link></written_record>
</evidence>
</indication>
</record>
</register>
&nbsp;·  <link xlink:type="simple" xlink:href="../504/319504.xml">
Speculative execution</link></col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";padding-left:0em;padding-right:0em;;" class="navbox-group">
Level</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-even">
<link xlink:type="simple" xlink:href="../148/14229148.xml">
Bit</link>&nbsp;·  <link xlink:type="simple" xlink:href="../960/245960.xml">
Instruction</link>&nbsp;·  <link xlink:type="simple" xlink:href="../702/51702.xml">
Superscalar</link>&nbsp;·  <link xlink:type="simple" xlink:href="../420/9467420.xml">
Data</link>&nbsp;·  <link xlink:type="simple" xlink:href="../070/9468070.xml">
Task</link></col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";padding-left:0em;padding-right:0em;;" class="navbox-group">
Threads</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<link xlink:type="simple" xlink:href="../679/10520679.xml">
Multithreading</link>&nbsp;·  <link xlink:type="simple" xlink:href="../021/315021.xml">
Simultaneous multithreading</link>&nbsp;·  <link xlink:type="simple" xlink:href="../443/151443.xml">
Hyperthreading</link>&nbsp;·  <link xlink:type="simple" xlink:href="../877/313877.xml">
Superthreading</link></col>
</row>
</table>
</col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
Types</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<link xlink:type="simple" xlink:href="../505/154505.xml">
Digital signal processor</link>&nbsp;·  <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../017/21017.xml">
Microcontroller</link></instrumentality>
</artifact>
</system>
&nbsp;·  <link xlink:type="simple" xlink:href="../205/58205.xml">
Vector processor</link>&nbsp;·  PLDs: (<arrangement wordnetid="107938773" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<array wordnetid="107939382" confidence="0.8">
<link xlink:type="simple" xlink:href="../969/10969.xml">
FPGA</link></array>
</group>
</arrangement>
&nbsp;·  <arrangement wordnetid="107938773" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<array wordnetid="107939382" confidence="0.8">
<link xlink:type="simple" xlink:href="../845/147845.xml">
ASIC</link></array>
</group>
</arrangement>
&nbsp;·  <arrangement wordnetid="107938773" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<array wordnetid="107939382" confidence="0.8">
<link xlink:type="simple" xlink:href="../209/12751209.xml">
ASIP</link></array>
</group>
</arrangement>
)</col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
Components</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-even">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<electrical_device wordnetid="103269401" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<circuit wordnetid="103033362" confidence="0.8">
<link xlink:type="simple" xlink:href="../504/199504.xml">
Arithmetic logic unit (ALU)</link></circuit>
</device>
</electrical_device>
</instrumentality>
</artifact>
&nbsp;·  <link xlink:type="simple" xlink:href="../see/Linden=2C_T$ennessee.xml">
Floating point unit (FPU)</link>&nbsp;·  <link xlink:type="simple" xlink:href="../045/339045.xml">
Backside Bus</link>&nbsp;·  <register wordnetid="106507041" confidence="0.8">
<record wordnetid="106647206" confidence="0.8">
<indication wordnetid="106797169" confidence="0.8">
<evidence wordnetid="106643408" confidence="0.8">
<written_record wordnetid="106502378" confidence="0.8">
<link xlink:type="simple" xlink:href="../432/486432.xml">
Registers</link></written_record>
</evidence>
</indication>
</record>
</register>
 &nbsp;·  <link xlink:type="simple" xlink:href="../112/177112.xml">
Memory management unit (MMU)</link> &nbsp;·  <link xlink:type="simple" xlink:href="../352/528352.xml">
Translation lookaside buffer (TLB)</link> &nbsp;·  <link xlink:type="simple" xlink:href="../181/849181.xml">
Cache</link></col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
Programming</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<class wordnetid="107997703" confidence="0.8">
<collection wordnetid="107951464" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<link xlink:type="simple" xlink:href="../349/222349.xml">
Flynn's taxonomy</link></group>
</collection>
</class>
 (<link xlink:type="simple" xlink:href="../630/1103630.xml">
SISD</link>&nbsp;&amp;bull;  <link xlink:type="simple" xlink:href="../359/55359.xml">
SIMD</link>&nbsp;&amp;bull;  <link xlink:type="simple" xlink:href="../666/991666.xml">
MISD</link>&nbsp;&amp;bull;  <link xlink:type="simple" xlink:href="../139/157139.xml">
MIMD</link>)</col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
<computer wordnetid="103082979" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<machine wordnetid="103699975" confidence="0.8">
<link xlink:type="simple" xlink:href="../703/273703.xml">
Power management</link></machine>
</device>
</instrumentality>
</artifact>
</computer>
</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-even">
<link xlink:type="simple" xlink:href="../130/3130.xml">
APM</link>&nbsp;·  <link xlink:type="simple" xlink:href="../697/2432697.xml">
ACPI</link> <link xlink:type="simple" xlink:href="../697/2432697.xml#xpointer(//*[./st=%22States%22])">
(states)</link>&nbsp;·  <link xlink:type="simple" xlink:href="../512/13891512.xml">
Dynamic frequency scaling</link>&nbsp;·  <link xlink:type="simple" xlink:href="../711/13933711.xml">
Dynamic voltage scaling</link>&nbsp;·  <link xlink:type="simple" xlink:href="../754/2817754.xml">
Clock gating</link></col>
</row>
</table>
</col>
</row>
</table>
</p>


</sec>
</bdy>
</article>
