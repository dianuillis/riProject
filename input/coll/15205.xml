<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 15:28:23[mciao0828] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<kind  confidence="0.9511911446218017" wordnetid="105839024">
<algorithm  confidence="0.9508927676800064" wordnetid="105847438">
<header>
<title>Insertion sort</title>
<id>15205</id>
<revision>
<id>239035573</id>
<timestamp>2008-09-17T14:55:36Z</timestamp>
<contributor>
<username>Minesweeper</username>
<id>7279</id>
</contributor>
</revision>
<categories>
<category>Articles with example pseudocode</category>
<category>Stable sorts</category>
<category>Comparison sorts</category>
<category>Sorting algorithms</category>
<category>Online sorts</category>
</categories>
</header>
<bdy>
<template>
<name>Infobox Algorithm</name>
<parameters>

<image location="none" width="150px" src="Insertion_sort_animation.gif">
<caption>

Example of insertion sort sorting a list of random numbers.
</caption>
</image>
<time>
<it>О(n²)''</it></time>
<data>
<link xlink:type="simple" xlink:href="../052/2052.xml">
Array</link></data>
<class>
<link xlink:type="simple" xlink:href="../442/28442.xml">
Sorting algorithm</link></class>
<optimal>
Not usually</optimal>
<space>
<it>О(n)</it> total, <it>O(1)</it> auxiliary</space>
</parameters>
</template>


<b>Insertion sort</b> is a simple <link xlink:type="simple" xlink:href="../442/28442.xml">
sorting algorithm</link>, a <link xlink:type="simple" xlink:href="../304/3189304.xml">
comparison sort</link> in which the sorted array (or list) is built one entry at a time.  It is much less efficient on large lists than more advanced algorithms such as <link xlink:type="simple" xlink:href="../249/3268249.xml">
quicksort</link>, <link xlink:type="simple" xlink:href="../995/13995.xml">
heapsort</link>, or <link xlink:type="simple" xlink:href="../039/20039.xml">
merge sort</link>, but it has various advantages:<p>

<list>
<entry level="1" type="bullet">

 Simple to implement</entry>
<entry level="1" type="bullet">

 Efficient on (quite) small data sets</entry>
<entry level="1" type="bullet">

 Efficient on data sets which are already substantially sorted: it runs in O(<it>n</it> + <it>d</it>) time, where d is the number of <link>
inversions</link></entry>
<entry level="1" type="bullet">

 More efficient in practice than most other simple <link xlink:type="simple" xlink:href="../578/44578.xml">
O</link>(<it>n</it>2) algorithms such as <link xlink:type="simple" xlink:href="../352/29352.xml">
selection sort</link> or <link xlink:type="simple" xlink:href="../255/4255.xml">
bubble sort</link>: the average time is <it>n</it>2/4 and it is linear in the best case</entry>
<entry level="1" type="bullet">

 <link>
Stable</link> (does not change the relative order of elements with equal keys)</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../861/219861.xml">
In-place</link> (only requires a constant amount O(1) of extra memory space)</entry>
<entry level="1" type="bullet">

 It is an <link xlink:type="simple" xlink:href="../716/22716.xml">
online algorithm</link>, in that it can sort a list as it receives it.</entry>
</list>
</p>

<sec>
<st>
 Algorithm </st>

<p>

In abstract terms, every iteration of an insertion sort removes an element from the input data, inserting it at the correct position in the already sorted list, until no elements are left in the input. The choice of which element to remove from the input is arbitrary and can be made using almost any choice algorithm.</p>
<p>

Sorting is typically done in-place. The resulting array after <it>k</it> iterations contains the  first <it>k</it> entries of the input array and is sorted.
In each step, the first remaining entry of the input is removed, inserted into the result at the right position, thus extending the result:</p>
<p>

<image width="150px" src="insertionsort-before.png">
<caption>

The array right before insertion of x
</caption>
</image>
</p>
<p>

becomes:</p>
<p>

<image width="150px" src="insertionsort-after.png">
<caption>

The array right after insertion of x
</caption>
</image>
</p>
<p>

with each element &amp;gt; <it>x</it> copied to the right as it is compared against <it>x</it>.</p>
<p>

The most common variant, which operates on arrays, can be described as:</p>
<p>

<list>
<entry level="1" type="number">

 Suppose we have a method called <it>insert</it> designed to insert a value into a sorted sequence at the beginning of an array. It operates by starting at the end of the sequence and shifting each element one place to the right until a suitable position is found for the new element. It has the side effect of overwriting the value stored immediately after the sorted sequence in the array.</entry>
<entry level="1" type="number">

 To perform insertion sort, start at the left end of the array and invoke <it>insert</it> to insert each element encountered into its correct position. The ordered sequence into which we insert it is stored at the beginning of the array in the set of indexes already examined. Each insertion overwrites a single value, but this is okay because it's the value we're inserting.</entry>
</list>
</p>
<p>

A simple <link xlink:type="simple" xlink:href="../185/24185.xml">
pseudocode</link> version of the complete algorithm follows, where the arrays are zero-based and the for loop includes both the top and bottom limits (like in <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../773/23773.xml">
Pascal</link></programming_language>
):</p>

<p>

insertionSort(array A)
for i = 1 to length[A]-1 do
begin
value = A[i]
j = i-1
while j ≥ 0 and A[j] &amp;gt; value do
begin
A[j + 1] = A[j]
j = j-1
end
A[j+1] = value
end</p>


</sec>
<sec>
<st>
 Good and bad input cases </st>

<p>

In the best case of an already sorted array, this implementation of insertion sort takes <link xlink:type="simple" xlink:href="../578/44578.xml">
O</link>(<it>n</it>) time: in each iteration, the first remaining element of the input is only compared with the last element of the sorted subsection of the array. This same case provides worst-case behavior for non-randomized and poorly implemented <link xlink:type="simple" xlink:href="../249/3268249.xml">
quicksort</link>, which will take <link xlink:type="simple" xlink:href="../578/44578.xml">
O</link>(<it>n</it>2) time to sort an already-sorted list.</p>
<p>

The worst case is an array sorted in reverse order, as every execution of the inner loop will have to scan and shift the entire sorted section of the array before inserting the next element. Insertion sort takes O(<it>n</it>2) time in this worst case as well as in the average case, which makes it impractical for sorting large numbers of elements. However, insertion sort's inner loop is very fast, which often makes it one of the fastest algorithms for sorting small numbers of elements, typically less than 10 or so.</p>

</sec>
<sec>
<st>
 Comparisons to other sorts </st>

<p>

Insertion sort is very similar to <link xlink:type="simple" xlink:href="../352/29352.xml">
selection sort</link>. Just like in selection sort, after <it>k</it> passes through the array, the first <it>k</it> elements are in sorted order. For selection sort, these are the <it>k</it> smallest elements, while in insertion sort they are whatever the first <it>k</it> elements were in the unsorted array. Insertion sort's advantage is that it only scans as many elements as it needs to in order to place the <it>k</it> + 1st element, while selection sort must scan all remaining elements to find the absolute smallest element.</p>
<p>

Simple calculation shows that insertion sort will therefore usually perform about half as many comparisons as selection sort. Assuming the <it>k</it> + 1st element's rank is random, it will on the average require shifting half of the previous <it>k</it> elements over, while selection sort always requires scanning all unplaced elements. If the array is not in a random order, however, insertion sort can perform just as many comparisons as selection sort (for a reverse-sorted list). It will also perform far fewer comparisons, as few as <it>n</it> - 1, if the data is pre-sorted, thus insertion sort is much more efficient if the array is already sorted or "close to sorted."</p>
<p>

While insertion sort typically makes fewer comparisons than <link xlink:type="simple" xlink:href="../352/29352.xml">
selection sort</link>, it requires more writes because the inner loop can require shifting large sections of the sorted portion of the array. In general, insertion sort will write to the array O(<it>n</it>2) times while selection sort will write only O(<it>n</it>) times. For this reason, selection sort may be better in cases where writes to memory are significantly more expensive than reads, such as <link xlink:type="simple" xlink:href="../597/50597.xml">
EEPROM</link> or <link xlink:type="simple" xlink:href="../595/50595.xml">
Flash memory</link>.</p>
<p>

Some <link xlink:type="simple" xlink:href="../154/201154.xml">
divide-and-conquer algorithm</link>s such as <link xlink:type="simple" xlink:href="../249/3268249.xml">
quicksort</link> and <link xlink:type="simple" xlink:href="../039/20039.xml">
mergesort</link> sort by recursively dividing the list into smaller sublists which are then sorted. A useful optimization in practice for these algorithms is to switch to insertion sort for small sublists on which insertion sort outperforms the more complex algorithms. The size of list for which insertion sort has the advantage varies by environment and implementation, but is typically around 8 to 20 elements.</p>

</sec>
<sec>
<st>
 Variants </st>

<p>

<physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<link xlink:type="simple" xlink:href="../054/6414054.xml">
D.L. Shell</link></scientist>
</causal_agent>
</person>
</physical_entity>
 made substantial improvements to the algorithm, and the modified version is called <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<idea wordnetid="105833840" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<category wordnetid="105838765" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<kind wordnetid="105839024" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../355/77355.xml">
Shell sort</link></database>
</kind>
</wordnet>
</lexical_database>
</category>
</concept>
</electronic_database>
</idea>
</information>
</message>
.
It compares elements separated by a distance that decreases on each pass. Shell sort has distinctly improved running times in practical work, with two simple variants requiring O(<it>n</it>3/2) and O(<it>n</it>4/3) time.</p>
<p>

If comparisons are very costly compared to swaps, as is the case for example with string keys stored by reference or with human interaction (such as choosing one of a pair displayed side-by-side), then using binary insertion sort can be a good strategy. Binary insertion sort employs <link xlink:type="simple" xlink:href="../266/4266.xml">
binary search</link> to find the right place to insert new elements, and therefore performs <math>\lceil log_2(n!) \rceil</math> comparisons in the worst case, which is Θ(<it>n</it> log <it>n</it>). The algorithm as a whole still takes Θ(<it>n</it>2) time on average due to the series of swaps required for each insertion, and since it always uses binary search, the best case is no longer Ω(<it>n</it>) but Ω(<it>n log n</it>).</p>
<p>

To avoid having to make a series of swaps for each insertion, we could instead store the input in a <link xlink:type="simple" xlink:href="../167/18167.xml">
linked list</link>, which allows us to insert and delete elements in constant time. Unfortunately, binary search on a linked list is impossible, so we still spend O(<it>n</it>2) time searching. If we instead replace it by a more sophisticated <link xlink:type="simple" xlink:href="../519/8519.xml">
data structure</link> such as a <link xlink:type="simple" xlink:href="../996/13996.xml">
heap</link> or <link xlink:type="simple" xlink:href="../321/4321.xml">
binary tree</link>, we can significantly decrease both search and insert time. This is the essence of <link xlink:type="simple" xlink:href="../995/13995.xml">
heap sort</link> and <link xlink:type="simple" xlink:href="../027/6508027.xml">
binary tree sort</link>.</p>
<p>

In 2004, Bender, Farach-Colton, and Mosteiro published a new variant of insertion sort called <it><link xlink:type="simple" xlink:href="../633/2448633.xml">
library sort</link></it> or <it>gapped insertion sort</it> that leaves a small number of unused spaces ("gaps") spread throughout the array. The benefit is that insertions need only shift elements over until a gap is reached. Surprising in its simplicity, they show that this sorting algorithm runs with high probability in O(<it>n</it> log <it>n</it>) time. <weblink xlink:type="simple" xlink:href="http://citeseer.ist.psu.edu/bender04insertion.html">
http://citeseer.ist.psu.edu/bender04insertion.html</weblink></p>



</sec>
<sec>
<st>
 External links </st>

<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://tide4javascript.com/?s=Insertion">
Analyze Insertion Sort in an online Javascript IDE</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://web.engr.oregonstate.edu/~minoura/cs162/javaProgs/sort/InsertSort.html">
An animated Java applet showing a step-by-step insertion sort.</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://literateprograms.org/Category:Insertion_sort">
Literate implementations of insertion sort in various languages</weblink> on LiteratePrograms</entry>
<entry level="1" type="bullet">

 Pointers to <weblink xlink:type="simple" xlink:href="http://web-cat.cs.vt.edu/AlgovizWiki/InsertionSort">
insertion sort visualizations</weblink></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.cs.ubc.ca/spider/harrison/Java/sorting-demo.html">
Page with visual demonstrations of sorting algorithms</weblink>, all the implementation in <message wordnetid="106598915" confidence="0.8">
<request wordnetid="106513366" confidence="0.8">
<link xlink:type="simple" xlink:href="../881/15881.xml">
Java</link></request>
</message>
.</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://vision.bc.edu/~dmartin/teaching/sorting/anim-html/insertion.html">
A graphical demonstration and discussion of insertion sort</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://coderaptors.com/?InsertionSort">
A colored graphical Java applet</weblink> which allows experimentation with initial state and shows statistics</entry>
</list>
</p>

</sec>
<sec>
<st>
 References </st>

<p>

<list>
<entry level="1" type="bullet">

 <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../095/8095.xml">
Donald Knuth</link></scientist>
</person>
. <it>The Art of Computer Programming</it>, Volume 3: <it>Sorting and Searching</it>, Second Edition. Addison-Wesley, 1998. ISBN 0-201-89685-0. Section 5.2.1: Sorting by Insertion, pp.80–105.</entry>
<entry level="1" type="bullet">

 <scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../475/4108475.xml">
Thomas H. Cormen</link></scientist>
, <scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../884/1400884.xml">
Charles E. Leiserson</link></scientist>
, <link xlink:type="simple" xlink:href="../057/68057.xml">
Ronald L. Rivest</link>, and <scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../993/3489993.xml">
Clifford Stein</link></scientist>
. <it><work wordnetid="104599396" confidence="0.8">
<product wordnetid="104007894" confidence="0.8">
<creation wordnetid="103129123" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<book wordnetid="106410904" confidence="0.8">
<publication wordnetid="106589574" confidence="0.8">
<link xlink:type="simple" xlink:href="../226/3499226.xml">
Introduction to Algorithms</link></publication>
</book>
</artifact>
</creation>
</product>
</work>
</it>, Second Edition. MIT Press and McGraw-Hill, 2001. ISBN 0-262-03293-7. Section 2.1: Insertion sort, pp.15–21.</entry>
</list>
</p>

<p>

<table style=";" class="navbox" cellspacing="0">
<row>
<col style="padding:2px;">
<table style="width:100%;background:transparent;color:inherit;;" class="nowraplinks collapsible autocollapse " cellspacing="0">
<row>
<header colspan="3" style=";" class="navbox-title">
<link xlink:type="simple" xlink:href="../442/28442.xml">
Sorting algorithm</link>s</header>
</row>
<row style="height:2px;">

</row>
<row>
<col style=";;" class="navbox-group">
Theory</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<link xlink:type="simple" xlink:href="../543/7543.xml">
Computational complexity theory</link> | <link xlink:type="simple" xlink:href="../578/44578.xml">
Big O notation</link> | <link xlink:type="simple" xlink:href="../330/30330.xml">
Total order</link> | <link xlink:type="simple" xlink:href="../382/208382.xml">
Lists</link> | <link xlink:type="simple" xlink:href="../442/28442.xml#xpointer(//*[./st=%22Stability%22])">
Stability</link> | <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../304/3189304.xml">
Comparison sort</link></database>
</wordnet>
</lexical_database>
</electronic_database>
</information>
</message>
</col>
<col style="width:0%;padding:0px 0px 0px 2px;" rowspan="15">
<image width="200px" src="SimpleSortingNetwork.svg">
</image>
</col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
Exchange sorts</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-even">
<algorithm wordnetid="105847438" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../255/4255.xml">
Bubble sort</link></algorithm>
 | <algorithm wordnetid="105847438" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../482/159482.xml">
Cocktail sort</link></algorithm>
 | <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<idea wordnetid="105833840" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<category wordnetid="105838765" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<kind wordnetid="105839024" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../945/10807945.xml">
Odd-even sort</link></database>
</kind>
</wordnet>
</lexical_database>
</category>
</concept>
</electronic_database>
</idea>
</information>
</message>
 | <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<idea wordnetid="105833840" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<category wordnetid="105838765" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<kind wordnetid="105839024" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../439/159439.xml">
Comb sort</link></database>
</kind>
</wordnet>
</lexical_database>
</category>
</concept>
</electronic_database>
</idea>
</information>
</message>
 | <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<idea wordnetid="105833840" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<category wordnetid="105838765" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<kind wordnetid="105839024" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../127/522127.xml">
Gnome sort</link></database>
</kind>
</wordnet>
</lexical_database>
</category>
</concept>
</electronic_database>
</idea>
</information>
</message>
 | <algorithm wordnetid="105847438" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../249/3268249.xml">
Quicksort</link></algorithm>
</col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
Selection sorts</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<algorithm wordnetid="105847438" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../352/29352.xml">
Selection sort</link></algorithm>
 | <algorithm wordnetid="105847438" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../995/13995.xml">
Heapsort</link></algorithm>
 | <link xlink:type="simple" xlink:href="../450/100450.xml">
Smoothsort</link></col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
Insertion sorts</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-even">
<algorithm wordnetid="105847438" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../205/15205.xml">
Insertion sort</link></algorithm>
 | <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<idea wordnetid="105833840" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<category wordnetid="105838765" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<kind wordnetid="105839024" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../355/77355.xml">
Shell sort</link></database>
</kind>
</wordnet>
</lexical_database>
</category>
</concept>
</electronic_database>
</idea>
</information>
</message>
 | <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../027/6508027.xml">
Tree sort</link></database>
</wordnet>
</lexical_database>
</electronic_database>
</information>
</message>
 | <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<idea wordnetid="105833840" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<category wordnetid="105838765" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<kind wordnetid="105839024" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../633/2448633.xml">
Library sort</link></database>
</kind>
</wordnet>
</lexical_database>
</category>
</concept>
</electronic_database>
</idea>
</information>
</message>
 | <idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<category wordnetid="105838765" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<social_event wordnetid="107288639" confidence="0.8">
<contest wordnetid="107456188" confidence="0.8">
<game wordnetid="100456199" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<kind wordnetid="105839024" confidence="0.8">
<link xlink:type="simple" xlink:href="../256/1184256.xml">
Patience sorting</link></kind>
</psychological_feature>
</game>
</contest>
</social_event>
</event>
</category>
</concept>
</idea>
</col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
Merge sorts</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<algorithm wordnetid="105847438" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../039/20039.xml">
Merge sort</link></algorithm>
 | <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<idea wordnetid="105833840" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<category wordnetid="105838765" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<kind wordnetid="105839024" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../351/14083351.xml">
Strand sort</link></database>
</kind>
</wordnet>
</lexical_database>
</category>
</concept>
</electronic_database>
</idea>
</information>
</message>
</col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
Non-comparison sorts</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-even">
<message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<idea wordnetid="105833840" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<category wordnetid="105838765" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<kind wordnetid="105839024" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../980/25980.xml">
Radix sort</link></database>
</kind>
</wordnet>
</lexical_database>
</category>
</concept>
</electronic_database>
</idea>
</information>
</message>
 | <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<idea wordnetid="105833840" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<category wordnetid="105838765" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<kind wordnetid="105839024" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../592/97592.xml">
Bucket sort</link></database>
</kind>
</wordnet>
</lexical_database>
</category>
</concept>
</electronic_database>
</idea>
</information>
</message>
 | <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<idea wordnetid="105833840" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<category wordnetid="105838765" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<kind wordnetid="105839024" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../864/99864.xml">
Counting sort</link></database>
</kind>
</wordnet>
</lexical_database>
</category>
</concept>
</electronic_database>
</idea>
</information>
</message>
 | <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<idea wordnetid="105833840" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<category wordnetid="105838765" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<kind wordnetid="105839024" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../681/24681.xml">
Pigeonhole sort</link></database>
</kind>
</wordnet>
</lexical_database>
</category>
</concept>
</electronic_database>
</idea>
</information>
</message>
 | <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../302/11517302.xml">
Burstsort</link></database>
</wordnet>
</lexical_database>
</electronic_database>
</information>
</message>
</col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
Others</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<information wordnetid="106634376" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<message wordnetid="106598915" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<link xlink:type="simple" xlink:href="../064/897064.xml">
Topological sorting</link></procedure>
</activity>
</psychological_feature>
</wordnet>
</act>
</rule>
</event>
</message>
</algorithm>
</database>
</lexical_database>
</electronic_database>
</information>
 | <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../061/562061.xml">
Sorting network</link></database>
</wordnet>
</lexical_database>
</electronic_database>
</information>
</message>
 | <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../090/2713090.xml">
Bitonic sorter</link></database>
</wordnet>
</lexical_database>
</electronic_database>
</information>
</message>
</col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
Ineffective/jokeful sorts</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-even">
<algorithm wordnetid="105847438" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../870/99870.xml">
Bogosort</link></algorithm>
 | <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<idea wordnetid="105833840" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<category wordnetid="105838765" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<kind wordnetid="105839024" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../662/563662.xml">
Stooge sort</link></database>
</kind>
</wordnet>
</lexical_database>
</category>
</concept>
</electronic_database>
</idea>
</information>
</message>
</col>
</row>
</table>
</col>
</row>
</table>
</p>



</sec>
</bdy>
</algorithm>
</kind>
</article>
