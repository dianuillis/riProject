<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 17.04.2009 02:59:03[mciao0828] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>Process management (computing)</title>
<id>15395806</id>
<revision>
<id>241544129</id>
<timestamp>2008-09-28T15:13:26Z</timestamp>
<contributor>
<username>Una Smith</username>
<id>3349439</id>
</contributor>
</revision>
<categories>
<category>Process (computing)</category>
<category>Operating system technology</category>
</categories>
</header>
<bdy>

<b>Process management</b> is an integral part of any modern day <link xlink:type="simple" xlink:href="../194/22194.xml">
operating system</link> (OS). The OS must allocate resources to <link xlink:type="simple" xlink:href="../178/45178.xml">
processes</link>, enable processes to share and exchange information, protect the resources of each process from other processes and enable synchronisation among processes. To meet these requirements, the OS  must maintain a <link xlink:type="simple" xlink:href="../519/8519.xml">
data structure</link> for each process, which describes the state and resource ownership of that process, and which enables the OS to exert control over each process.
<sec>
<st>
 Multiprogramming </st>
<p>

In many modern operating systems, there can be more than one instance of a <link xlink:type="simple" xlink:href="../783/5783.xml">
program</link> loaded in memory at the same time; for example, more than one user could be executing the same program, each user having separate copies of the program loaded into memory. With some programs, it is possible to have one copy loaded into memory, while several users have shared access to it so that they each can execute the same program-code. Such a program is said to be <link xlink:type="simple" xlink:href="../851/154851.xml">
re-entrant</link>. The <link xlink:type="simple" xlink:href="../218/5218.xml">
processor</link> at any instant can only be executing one instruction from one program but several processes can be sustained over a period of time by assigning each process to the processor at intervals while the remainder become temporarily inactive. A number of processes being executed over a period of time instead of at the same time is called <it>concurrent execution</it>.</p>
<p>

A <link xlink:type="simple" xlink:href="../857/6857.xml">
multiprogramming</link> or <link xlink:type="simple" xlink:href="../126/20126.xml">
multitasking</link> OS is a system executing many processes concurrently. Multiprogramming requires that the processor be allocated to each process for a period of time and de-allocated at an appropriate moment. If the processor is de-allocated during the execution of a process, it must be done in such a way that it can be restarted later as easily as possible.</p>
<p>

There are two possible ways for an OS to regain control of the processor during a program’s execution in order for the OS to perform de-allocation or allocation:</p>
<p>

<list>
<entry level="1" type="number">

 The process issues a <link xlink:type="simple" xlink:href="../908/102908.xml">
system call</link> (sometimes called a <it>software <link xlink:type="simple" xlink:href="../289/15289.xml">
interrupt</link></it>); for example, an I/O request occurs requesting to access a file on hard disk.</entry>
<entry level="1" type="number">

 A hardware <link xlink:type="simple" xlink:href="../289/15289.xml">
interrupt</link> occurs; for example, a key was pressed on the keyboard, or a timer runs out (used in <link xlink:type="simple" xlink:href="../566/2204566.xml">
pre-emptive multitasking</link>).</entry>
</list>
</p>
<p>

The stopping of one process and starting (or restarting) of another process is called a <link xlink:type="simple" xlink:href="../904/6904.xml">
context switch</link> or context change. In many modern operating systems, processes can consist of many sub-processes. This introduces the concept of a <it><link xlink:type="simple" xlink:href="../303/45303.xml">
thread</link></it>. A thread may be viewed as a <it>sub-process</it>; that is, a separate, independent sequence of execution within the code of one process. Threads are becoming increasingly important in the design of distributed and <link xlink:type="simple" xlink:href="../513/6513.xml">
client-server</link> systems and in software run on <link xlink:type="simple" xlink:href="../162/145162.xml">
multi-processor</link> systems.</p>

</sec>
<sec>
<st>
 How multiprogramming increases efficiency</st>
<p>

A common trait observed among processes associated with most computer programs, is that they alternate between <link xlink:type="simple" xlink:href="../218/5218.xml">
CPU</link> cycles and <link xlink:type="simple" xlink:href="../558/14558.xml">
I/O</link> cycles. For the portion of the time required for CPU cycles, the process is being executed; i.e. is occupying the CPU. During the time required for I/O cycles, the process is not using the processor. Instead, it is either waiting to perform Input/Output, or is actually performing Input/Output. An example of this is the reading from or writing to a file on disk. Prior to the advent of <link xlink:type="simple" xlink:href="../857/6857.xml">
multiprogramming</link>, <link xlink:type="simple" xlink:href="../457/7878457.xml">
computers</link> operated as single-user systems. Users of such systems quickly became aware that for much of the time that a computer was allocated to a single user, the processor was idle; when the user was entering information or debugging programs for example. <link xlink:type="simple" xlink:href="../323/5323.xml">
Computer scientists</link> observed that overall performance of the machine could be improved by letting a different process use the processor whenever one process was waiting for input/output. In a <it>uni-programming system</it>, if <it>N</it> users were to execute programs with individual execution times of <it>t</it>1, <it>t</it>2, ..., <it>tN</it>, then the total time, <it>t</it>uni, to service the <it>N</it> processes (consecutively) of all <it>N</it> users would be:</p>
<p>

<indent level="1">

 <it>t</it>uni = <it>t</it>1 + <it>t</it>2 + ... + <it>tN</it>.
</indent>

However, because each process consumes both CPU cycles and I/O cycles, the time which each process actually uses the CPU is a very small fraction of the total execution time for the process. So, for process <it>i</it>:</p>
<p>

<indent level="1">

<it>ti</it> (processor) ≪ <it>ti</it> (execution)
</indent>

where</p>
<p>

<it>ti</it> (processor) is the time process <it>i</it> spends using the CPU, and
<it>ti</it> (execution) is the total execution time for the process; i.e. the time for CPU cycles plus I/O cycles to be carried out (executed) until completion of the process.</p>
<p>

In fact, usually the sum of all the processor time, used by <it>N</it> processes, rarely exceeds a small fraction of the time to execute any one of the processes;</p>
<p>

<indent level="1">

 <math>\sum_{j=1}^{N} t_{j \, (\mathrm{processor})} &amp;lt; t_{i \, (\mathrm{execution}\!)}</math>
</indent>

Therefore, in uni-programming systems, the processor lay idle for a considerable proportion of the time. To overcome this inefficiency, multiprogramming is now implemented in modern operating systems such as <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../297/6097297.xml">
Linux</link></O>
, <link xlink:type="simple" xlink:href="../642/31642.xml">
UNIX</link> and <link xlink:type="simple" xlink:href="../890/18890.xml">
Microsoft Windows</link>. This enables the processor to switch from one process, X, to another, Y, whenever X is involved in the I/O phase of its execution. Since the processing time is much less than a single job's runtime, the total time to service all <it>N</it> users with a multiprogramming system can be reduced to approximately:</p>
<p>

<indent level="1">

 <it>t</it>multi = max(<it>t</it>1, <it>t</it>2, ..., <it>tN</it>)
</indent>

</p>
</sec>
<sec>
<st>
 Process creation </st>
<p>

When a new <link xlink:type="simple" xlink:href="../178/45178.xml">
process</link> is to be added to those currently being managed, the OS builds a data structure called a <link xlink:type="simple" xlink:href="../662/801662.xml">
process control block</link> (PCB) which is used to keep track of the process and the memory address space allocated to the process. These actions constitute the creation of a new process.
Four common events can lead to the creation of a process:
<list>
<entry level="1" type="bullet">

 New batch job.</entry>
<entry level="1" type="bullet">

 Interactive logon</entry>
<entry level="1" type="bullet">

 Created by OS.</entry>
<entry level="1" type="bullet">

 Spawned by existing processes, e.g. parent/child.</entry>
</list>
</p>

</sec>
<sec>
<st>
 Process termination </st>
<p>

There are many reasons for process termination:
<list>
<entry level="1" type="bullet">

 Batch job issues halt instruction</entry>
<entry level="1" type="bullet">

 User logs off</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../178/45178.xml">
Process</link> executes a service request to terminate</entry>
<entry level="1" type="bullet">

 Error and fault conditions</entry>
<entry level="1" type="bullet">

 Normal completion</entry>
<entry level="1" type="bullet">

 Time limit exceeded</entry>
<entry level="1" type="bullet">

 Memory unavailable</entry>
<entry level="1" type="bullet">

 Bounds violation; for example: attempted access of (non-existent) 11th element of a 10-element array</entry>
<entry level="1" type="bullet">

 Protection error; for example: attempted write to read-only file</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../118/3118.xml">
Arithmetic</link> error; for example: attempted division by zero</entry>
<entry level="1" type="bullet">

 Time overrun; for example: process waited longer than a specified maximum for an event</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../558/14558.xml">
I/O</link> failure</entry>
<entry level="1" type="bullet">

 Invalid instruction; for example: when a process tries to execute data (text)</entry>
<entry level="1" type="bullet">

 Privileged instruction</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../040/18985040.xml">
Data</link> misuse</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../194/22194.xml">
Operating system</link> intervention; for example: to resolve a deadlock</entry>
<entry level="1" type="bullet">

 Parent terminates so child processes terminate (cascading termination)</entry>
<entry level="1" type="bullet">

 Parent request</entry>
</list>
</p>

</sec>
<sec>
<st>
 Two-state process management model </st>
<p>

The <link xlink:type="simple" xlink:href="../194/22194.xml">
operating system</link>’s principal responsibility is in controlling the execution of <link xlink:type="simple" xlink:href="../178/45178.xml">
processes</link>. This includes determining the interleaving pattern for execution and allocation of resources to processes. One part of designing an <link xlink:type="simple" xlink:href="../194/22194.xml">
OS</link> is to describe the behaviour that we would like each process to exhibit. The simplest model is based on the fact that a process is either being executed by a processor or it is not. Thus, a process may be considered to be in one of two states, <it>RUNNING</it> or <it>NOT RUNNING</it>. When the operating system creates a new process, that process is initially labeled as <it>NOT RUNNING</it>, and is placed into a queue in the system in the <it>NOT RUNNING</it> state. The process (or some portion of it) then exists in <link>
main memory</link>, and it waits in the queue for an opportunity to be executed. After some period of time, the currently <it>RUNNING</it> process will be interrupted, and moved from the <it>RUNNING</it> state to the <it>NOT RUNNING</it> state, making the processor available for a different process. The dispatch portion of the OS will then select, from the queue of <it>NOT RUNNING</it> processes, one of the waiting processes to transfer to the processor. The chosen process is then relabeled from a <it>NOT RUNNING</it> state to a <it>RUNNING</it> state, and its execution is either begun if it is a new process, or is resumed if it is a process which was interrupted at an earlier time.</p>
<p>

From this model we can identify some design elements of the OS:
<list>
<entry level="1" type="bullet">

 The need to represent, and keep track of each process.</entry>
<entry level="1" type="bullet">

 The state of a process.</entry>
<entry level="1" type="bullet">

 The queuing of <it>NON RUNNING</it> processes</entry>
</list>
</p>

</sec>
<sec>
<st>
Three-state process management model</st>
<p>
 
Although the two-state process management model is a perfectly valid design for an operating system, the absence of a <it>BLOCKED</it> state means that the <link xlink:type="simple" xlink:href="../218/5218.xml">
processor</link> lies idle when the active process changes from CPU cycles to <link xlink:type="simple" xlink:href="../558/14558.xml">
I/O</link> cycles. This design does not make efficient use of the processor. The three-state process management model is designed to overcome this problem, by introducing a new state called the <it>BLOCKED</it> state. This state describes any process which is waiting for an I/O event to take place. In this case, an I/O event can mean the use of some device or a signal from another process. The three states in this model are:</p>
<p>

<list>
<entry level="1" type="bullet">

<it>RUNNING:</it> The process that is currently being executed.</entry>
<entry level="1" type="bullet">

<it>READY:</it> A process that is queuing and prepared to execute when given the opportunity.</entry>
<entry level="1" type="bullet">

<it>BLOCKED:</it> A process that cannot execute until some event occurs, such as the completion of an I/O operation. </entry>
</list>
</p>
<p>

At any instant, a process is in one and only one of the three states. For a single processor computer, only one process can be in the <it>RUNNING</it> state at any one instant. There can be many processes in the <it>READY</it> and <it>BLOCKED</it> states, and each of these states will have an associated queue for processes.</p>
<p>

Processes entering the system must go initially into the <it>READY</it> state, processes can only enter the <it>RUNNING</it> state via the <it>READY</it> state. Processes normally leave the system from the <it>RUNNING</it> state. For each of the three states, the process occupies space in main memory.  While the reason for most transitions from one state to another might be obvious, some may not be so clear.</p>
<p>

<list>
<entry level="1" type="bullet">

<b><it>RUNNING → READY</it></b> The most common reason for this transition is that the running process has reached the maximum allowable time for uninterrupted execution; i.e. time-out occurs. Other reasons can be the imposition of priority levels as determined by the <link xlink:type="simple" xlink:href="../920/231920.xml">
scheduling</link> policy used for the Low Level <link xlink:type="simple" xlink:href="../851/4941851.xml">
Scheduler</link>, and the arrival of a higher priority process into the READY state.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

<b><it>RUNNING → BLOCKED</it></b> A process is put into the <it>BLOCKED</it> state if it requests something for which it must wait. A request to the OS is usually in the form of a system call, (i.e. a call from the running process to a function that is part of the OS code). For example, requesting a file from disk or a saving a section of code or data from memory to a file on disk.</entry>
</list>
</p>

</sec>
<sec>
<st>
 Five-state process management model </st>
<p>

While the three state model is sufficient to describe the behavior of <link xlink:type="simple" xlink:href="../178/45178.xml">
processes</link> with the given events, we have to extend the model to allow for other possible events, and for more sophisticated design. In particular, the use of a portion of the hard disk to emulate main memory (so called <link xlink:type="simple" xlink:href="../354/32354.xml">
virtual memory</link>) requires additional states to describe the state of processes which are suspended from main memory, and placed in virtual memory (on disk). Of course, such processes can, at a future time, be resumed by being transferred back into main memory. The Medium Level <link xlink:type="simple" xlink:href="../851/4941851.xml">
Scheduler</link> controls these events. A process can be suspended from the <it>RUNNING</it>, <it>READY</it> or <it>BLOCKED</it> state, giving rise to two other states, namely, <it>READY SUSPEND</it> and <it>BLOCKED SUSPEND</it>. A <it>RUNNING</it> process that is suspended becomes <it>READY SUSPEND</it>, and a <it>BLOCKED</it> process that is suspended becomes <it>BLOCKED SUSPEND</it>. A process can be suspended for a number of reasons; the most significant of which arises from the process being swapped out of memory by the memory management system in order to free memory for other processes. Other common reasons for a process being suspended are when one suspends execution while debugging a program, or when the system is monitoring processes. For the five-state process management model, consider the following transitions described in the next sections.</p>
<p>

<list>
<entry level="1" type="bullet">

<b><it>BLOCKED → BLOCKED SUSPEND</it></b> If a process in the <it>RUNNING</it> state requires more memory, then at least one <it>BLOCKED</it> process can be swapped out of memory onto disk. The transition can also be made for the <it>BLOCKED</it> process if there are <it>READY</it> processes available, and the OS determines that the <it>READY</it> process that it would like to dispatch requires more main memory to maintain adequate performance.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

<b><it>BLOCKED SUSPEND → READY SUSPEND</it></b> A process in the <it>BLOCKED SUSPEND</it> state is moved to the <it>READY SUSPEND</it> state when the event for which it has been waiting occurs. Note that this requires that the state information concerning suspended processes be accessible to the OS.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

<b><it>READY SUSPEND → READY</it></b> When there are no <it>READY</it> processes in main memory, the OS will need to bring one in to continue execution. In addition, it might be the case that a process in the <it>READY SUSPEND</it> state has higher priority than any of the processes in the <it>READY</it> state. In that case, the OS designer may dictate that it is more important to get at the higher priority process than to minimise swapping.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

<b><it>READY → READY SUSPEND</it></b> Normally, the OS would be designed so that the preference would be to suspend a <it>BLOCKED</it> process rather than a <it>READY</it> one. This is because the <it>READY</it> process can be executed as soon as the <link xlink:type="simple" xlink:href="../218/5218.xml">
CPU</link> becomes available for it, whereas the <it>BLOCKED</it> process is taking up main memory space and cannot be executed since it is waiting on some other event to occur. However, it may be necessary to suspend a <it>READY</it> process if that is the only way to free a sufficiently large block of main memory. Finally, the OS may choose to suspend a lower-priority <it>READY</it> process rather than a higher-priority <it>BLOCKED</it> process if it believes that the <it>BLOCKED</it> process will be ready soon.</entry>
</list>
</p>

</sec>
<sec>
<st>
 Process description and control </st>
<p>

Each <link xlink:type="simple" xlink:href="../178/45178.xml">
process</link> in the system is represented by a data structure called a <link xlink:type="simple" xlink:href="../662/801662.xml">
Process Control Block</link> (PCB), or Process Descriptor in <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../297/6097297.xml">
Linux</link></O>
, which performs the same function as a traveller's passport. The PCB contains the basic information about the job including: 
<list>
<entry level="1" type="bullet">

What it is</entry>
<entry level="1" type="bullet">

Where it is going</entry>
<entry level="1" type="bullet">

How much of its processing has been completed</entry>
<entry level="1" type="bullet">

Where it is stored</entry>
<entry level="1" type="bullet">

How much it has “spent” in using resources</entry>
</list>
</p>
<p>

<b>Process Identification</b>: Each process is uniquely identified by the user’s identification and a pointer connecting it to its descriptor.</p>
<p>

<b>Process Status</b>: This indicates the current status of the process;
<it>READY</it>, <it>RUNNING</it>, <it>BLOCKED</it>, <it>READY SUSPEND</it>, <it>BLOCKED SUSPEND</it>.</p>
<p>

<b>Process State</b>: This contains all of the information needed to indicate the current state of the job.</p>
<p>

<b>Accounting</b>: This contains information used mainly for billing purposes and for performance measurement. It indicates what kind of resources the process has used and for how long.</p>

</sec>
<sec>
<st>
 Processor modes </st>
<p>

Contemporary <link xlink:type="simple" xlink:href="../218/5218.xml">
processors</link> incorporate a mode bit to define the execution capability of a program in the processor. This bit can be set to <it><link>
kernel mode</link></it> or <it><link xlink:type="simple" xlink:href="../467/93467.xml">
user mode</link></it>. Kernel mode is also commonly referred to as <it><link>
supervisor mode</link></it>, <it>monitor mode</it> or <it><link xlink:type="simple" xlink:href="../185/3446185.xml">
ring 0</link></it>. In kernel mode, the processor can execute every instruction in its hardware repertoire, whereas in user mode, it can only execute a subset of the instructions. Instructions that can be executed only in kernel mode are called kernel, privileged or protected instructions to distinguish them from the user mode instructions. For example, <link xlink:type="simple" xlink:href="../558/14558.xml">
I/O</link> instructions are privileged. So, if an <link xlink:type="simple" xlink:href="../746/454746.xml">
application</link> program executes in user mode, it cannot perform its own <link xlink:type="simple" xlink:href="../558/14558.xml">
I/O</link>. Instead, it must request the OS to perform <link xlink:type="simple" xlink:href="../558/14558.xml">
I/O</link> on its behalf. The system may logically extend the mode bit to define areas of memory to be used when the processor is in kernel mode versus user mode. If the mode bit is set to kernel mode, the process executing in the processor can access either the kernel or user partition of the memory. However, if user mode is set, the process can reference only the user memory space. We frequently refer to two classes of memory user space and system space (or kernel, supervisor or protected space). In general, the mode bit extends the operating system's protection rights. The mode bit is set by the user mode trap instruction, also called a supervisor call instruction. This instruction sets the mode bit, and branches to a fixed location in the system space. Since only system code is loaded in the system space, only system code can be invoked via a trap. When the OS has completed the supervisor call, it resets the mode bit to user mode prior to the return.</p>

</sec>
<sec>
<st>
 The kernel concept </st>
<p>

The parts of the <link xlink:type="simple" xlink:href="../194/22194.xml">
OS</link> critical to its correct operation execute in <link>
kernel mode</link>, while other <link xlink:type="simple" xlink:href="../309/5309.xml">
software</link> (such as generic system software) and all application programs execute in <link xlink:type="simple" xlink:href="../467/93467.xml">
user mode</link>. This fundamental distinction is usually the irrefutable distinction between the operating system and other <link xlink:type="simple" xlink:href="../021/189021.xml">
system software</link>. The part of the system executing in kernel supervisor state is called the <link xlink:type="simple" xlink:href="../394/50394.xml">
kernel</link>, or nucleus, of the <link xlink:type="simple" xlink:href="../194/22194.xml">
operating system</link>. The kernel operates as trusted software, meaning that when it was designed and implemented, it was intended to implement protection mechanisms that could not be covertly changed through the actions of untrusted software executing in user space. Extensions to the OS execute in <link xlink:type="simple" xlink:href="../467/93467.xml">
user mode</link>, so the OS does not rely on the correctness of those parts of the system software for correct operation of the OS. Hence, a fundamental design decision for any function to be incorporated into the OS is whether it needs to be implemented in the kernel. If it is implemented in the kernel, it will execute in kernel (supervisor) space, and have access to other parts of the kernel. It will also be trusted software by the other parts of the kernel. If the function is implemented to execute in <link xlink:type="simple" xlink:href="../467/93467.xml">
user mode</link>, it will have no access to kernel data structures. However, the advantage is that it will normally require very limited effort to invoke the function. While kernel-implemented functions may be easy to implemented, the trap mechanism and authentication at the time of the call are usually relatively expensive. The kernel code runs fast, but there is a large performance overhead in the actual call. This is a subtle, but important point.</p>

</sec>
<sec>
<st>
 Requesting system services </st>
<p>

There are two techniques by which a program executing in user mode can request the <link xlink:type="simple" xlink:href="../394/50394.xml">
kernel</link>'s services:</p>
<p>

<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../908/102908.xml">
System call</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../867/1324867.xml">
Message passing</link></entry>
</list>
</p>
<p>

<link xlink:type="simple" xlink:href="../194/22194.xml">
Operating systems</link> are designed with one or the other of these two facilities, but not both. First, assume that a <link xlink:type="simple" xlink:href="../467/93467.xml">
user process</link> wishes to invoke a particular target system function. For the <link xlink:type="simple" xlink:href="../908/102908.xml">
system call</link> approach, the user process uses the trap instruction. The idea is that the system call should appear to be an ordinary procedure call to the application program; the <link xlink:type="simple" xlink:href="../194/22194.xml">
OS</link> provides a library of user functions with names corresponding to each actual system call. Each of these stub functions contains a trap to the OS function. When the application program calls the stub, it executes the trap instruction, which switches the <link xlink:type="simple" xlink:href="../218/5218.xml">
CPU</link> to <link>
kernel mode</link>, and then branches (indirectly through an OS table), to the entry point of the function which is to be invoked. When the function completes, it switches the processor to <link xlink:type="simple" xlink:href="../467/93467.xml">
user mode</link> and then returns control to the user process; thus simulating a normal procedure return.</p>
<p>

In the <link xlink:type="simple" xlink:href="../867/1324867.xml">
message passing</link> approach, the user process constructs a message, that describes the desired service. Then it uses a trusted send function to pass the message to a trusted <link xlink:type="simple" xlink:href="../194/22194.xml">
OS</link> <link xlink:type="simple" xlink:href="../178/45178.xml">
process</link>. The send function serves the same purpose as the trap; that is, it carefully checks the message, switches the <link xlink:type="simple" xlink:href="../831/2172831.xml">
processor</link> to kernel mode, and then delivers the message to a process that implements the target functions. Meanwhile, the user process waits for the result of the service request with a message receive operation. When the OS process completes the operation, it sends a message back to the user process.</p>
<p>

The distinction between the two approaches has important consequences regarding the relative independence of the OS behavior, from the application process behavior, and the resulting performance. As a rule of thumb, <link xlink:type="simple" xlink:href="../194/22194.xml">
operating system</link> based on a <link xlink:type="simple" xlink:href="../908/102908.xml">
system call</link> interface can be made more efficient than those requiring messages to be exchanged between distinct processes. This is the case, even though the system call must be implemented with a trap instruction; that is, even though the trap is relatively expensive to perform, it is more efficient than the message passing approach, where there are generally higher costs associated with process <link xlink:type="simple" xlink:href="../389/41389.xml">
multiplexing</link>, message formation and message copying. The system call approach has the interesting property that there is not necessarily any OS process. Instead, a process executing in <link xlink:type="simple" xlink:href="../467/93467.xml">
user mode</link> changes to <link>
kernel mode</link> when it is executing kernel code, and switches back to user mode when it returns from the OS call. If, on the other hand, the OS is designed as a set of separate processes, it is usually easier to design it so that it gets control of the machine in special situations, than if the kernel is simply a collection of functions executed by users processes in kernel mode. Even procedure-based operating system usually find it necessary to include at least a few <link>
system process</link>es (called <link xlink:type="simple" xlink:href="../986/458986.xml">
daemons</link> in <link xlink:type="simple" xlink:href="../642/31642.xml">
UNIX</link>) to handle situation whereby the machine is otherwise idle such as <link xlink:type="simple" xlink:href="../920/231920.xml">
scheduling</link> and handling the network.</p>

</sec>
<sec>
<st>
Sources</st>

<p>

<list>
<entry level="1" type="bullet">

 Operating System incorporating Windows and UNIX, Colin Ritchie. ISBN: 0826464165</entry>
<entry level="1" type="bullet">

 Operating Systems, William Stallings, Prentice Hall, (4th Edition, 2000)</entry>
<entry level="1" type="bullet">

 Multiprogramming, Process Description and Control</entry>
<entry level="1" type="bullet">

 Operating Systems – A Modern Perspective, Gary Nutt, Addison Wesley, (2nd Edition, 2001).</entry>
<entry level="1" type="bullet">

 Process Management Models, Scheduling, UNIX System V Release 4:	</entry>
<entry level="1" type="bullet">

 Modern Operating Systems, Andrew Tannenbaum, Prentice Hall, (2nd Edition, 2001).</entry>
<entry level="1" type="bullet">

 Operating System Concepts, Silberschatz, Galvin &amp; Gagne, John Wiley &amp; Sons, (6th Edition, 2003).</entry>
</list>
</p>

</sec>
<sec>
<st>
External links</st>
<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://computer.howstuffworks.com/operating-system5.htm">
How Stuff Works</weblink></entry>
</list>
</p>

<p>

<table style=";" class="navbox" cellspacing="0">
<row>
<col style="padding:2px;">
<table style="width:100%;background:transparent;color:inherit;;" class="nowraplinks collapsible autocollapse " cellspacing="0">
<row>
<header colspan="2" style=";" class="navbox-title">
<link xlink:type="simple" xlink:href="../194/22194.xml">
Operating system</link></header>
</row>
<row style="height:2px;">

</row>
<row>
<col style=";;" class="navbox-group">
General</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<link xlink:type="simple" xlink:href="../395/55395.xml">
History</link>&nbsp;·  <record wordnetid="106647206" confidence="0.8">
<chronology wordnetid="106503224" confidence="0.8">
<indication wordnetid="106797169" confidence="0.8">
<evidence wordnetid="106643408" confidence="0.8">
<timeline wordnetid="106504965" confidence="0.8">
<written_record wordnetid="106502378" confidence="0.8">
<link xlink:type="simple" xlink:href="../968/247968.xml">
Timeline</link></written_record>
</timeline>
</evidence>
</indication>
</chronology>
</record>
&nbsp;·  <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../119/229119.xml">
Developement</link></database>
</wordnet>
</lexical_database>
</electronic_database>
</information>
</message>
&nbsp;·  <link xlink:type="simple" xlink:href="../531/981531.xml">
List</link></col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
<link xlink:type="simple" xlink:href="../394/50394.xml">
Kernel</link></col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-even">
<table style="width:100%;;;;" class="nowraplinks  navbox-subgroup" cellspacing="0">
<row>
<col style=";padding-left:0em;padding-right:0em;;" class="navbox-group">
General</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<link xlink:type="simple" xlink:href="../023/20023.xml">
Microkernel</link>&nbsp;·  <link xlink:type="simple" xlink:href="../023/20023.xml#xpointer(//*[./st=%22Nanokernel%22])">
Nanokernel</link></col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";padding-left:0em;padding-right:0em;;" class="navbox-group">
Types</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-even">
<link xlink:type="simple" xlink:href="../825/20825.xml">
monolithic</link>&nbsp;·  <plant_part wordnetid="113086908" confidence="0.8">
<natural_object wordnetid="100019128" confidence="0.8">
<kernel wordnetid="113137010" confidence="0.8">
<link xlink:type="simple" xlink:href="../041/4345041.xml">
hybrid</link></kernel>
</natural_object>
</plant_part>
&nbsp;·  <plant_part wordnetid="113086908" confidence="0.8">
<natural_object wordnetid="100019128" confidence="0.8">
<kernel wordnetid="113137010" confidence="0.8">
<link xlink:type="simple" xlink:href="../757/95757.xml">
exokernel</link></kernel>
</natural_object>
</plant_part>
</col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";padding-left:0em;padding-right:0em;;" class="navbox-group">
Components</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<link xlink:type="simple" xlink:href="../467/93467.xml">
Kernel space</link>&nbsp;·  <link xlink:type="simple" xlink:href="../658/371658.xml">
Loadable kernel module</link>&nbsp;·  <link xlink:type="simple" xlink:href="../101/9101.xml">
device driver</link>&nbsp;·  <link xlink:type="simple" xlink:href="../467/93467.xml">
User space</link>&nbsp;·  <link xlink:type="simple" xlink:href="../109/555109.xml">
Userland</link></col>
</row>
</table>
</col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
<link xlink:type="simple" xlink:href="../806/15395806.xml">
Process management</link></col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<link xlink:type="simple" xlink:href="../178/45178.xml">
Process</link>&nbsp;·  <link xlink:type="simple" xlink:href="../857/6857.xml">
Multiprogramming</link>&nbsp;·  <link xlink:type="simple" xlink:href="../289/15289.xml">
Interrupt</link>&nbsp;·  Modes: (<link xlink:type="simple" xlink:href="../596/167596.xml">
Protected mode</link>&nbsp;·  <link>
Supervisor mode</link>)&nbsp;·  <link xlink:type="simple" xlink:href="../857/6857.xml">
Computer multitasking</link>&nbsp;·  <link xlink:type="simple" xlink:href="../920/231920.xml">
Scheduling</link>&nbsp;·  <link xlink:type="simple" xlink:href="../904/6904.xml">
Context switch</link>&nbsp;·  <link xlink:type="simple" xlink:href="../857/6857.xml">
Cooperative multitasking</link>&nbsp;·  <link xlink:type="simple" xlink:href="../566/2204566.xml">
Preemptive multitasking</link>&nbsp;·  <link xlink:type="simple" xlink:href="../954/3991954.xml">
CPU modes</link>&nbsp;·  <link xlink:type="simple" xlink:href="../303/45303.xml">
Thread (computer science)</link></col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
Memory management</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-even">
<link xlink:type="simple" xlink:href="../373/515373.xml">
Memory protection</link>&nbsp;·  <link xlink:type="simple" xlink:href="../131/1323131.xml">
Segmentation</link>&nbsp;·  <link xlink:type="simple" xlink:href="../193/311193.xml">
Paging</link>&nbsp;·  <link xlink:type="simple" xlink:href="../112/177112.xml">
Memory management unit</link>&nbsp;·  <link xlink:type="simple" xlink:href="../803/28803.xml">
Segmentation fault</link>&nbsp;·  <link xlink:type="simple" xlink:href="../943/573943.xml">
General protection fault</link></col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
Examples</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../304/18933304.xml">
AmigaOS</link></O>
&nbsp;·  <link xlink:type="simple" xlink:href="../801/4801.xml">
BeOS</link>&nbsp;·  <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../409/22409.xml">
IBM OS/2</link></O>
&nbsp;·  <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../027/20027.xml">
MS-DOS</link></O>
&nbsp;·  <link xlink:type="simple" xlink:href="../890/18890.xml">
Windows</link>&nbsp;·  <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../297/6097297.xml">
Linux</link></O>
&nbsp;·  <link xlink:type="simple" xlink:href="../642/31642.xml">
UNIX</link>&nbsp;·  <link xlink:type="simple" xlink:href="../658/1178658.xml">
OpenSolaris</link>&nbsp;·  <link xlink:type="simple" xlink:href="../640/20640.xml">
Mac OS X</link>&nbsp;·   <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../889/360889.xml">
ReactOS</link></O>
&nbsp;·  <it><link xlink:type="simple" xlink:href="../916/71916.xml">
more…</link>''</it></col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
Miscellaneous concepts</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-even">
<link xlink:type="simple" xlink:href="../679/6885679.xml">
Boot loader</link>&nbsp;·  <standard wordnetid="107260623" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../253/432253.xml">
PXE</link></system_of_measurement>
</standard>
&nbsp;·  <link xlink:type="simple" xlink:href="../ury/24th_century.xml">
API</link>&nbsp;·  <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../131/351131.xml">
Virtual file system</link></instrumentality>
</artifact>
</system>
&nbsp;·  <link xlink:type="simple" xlink:href="../071/2550071.xml">
Virtual tape library</link>&nbsp;·  <link xlink:type="simple" xlink:href="../592/4122592.xml">
Computer network</link>&nbsp;·  <link xlink:type="simple" xlink:href="../293/12293.xml">
GUI</link>&nbsp;·  <link xlink:type="simple" xlink:href="../511/425511.xml">
HAL</link></col>
</row>
</table>
</col>
</row>
</table>
</p>


</sec>
</bdy>
</article>
