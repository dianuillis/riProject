<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 17.04.2009 03:29:15[mciao0825] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<event  confidence="0.8" wordnetid="100029378">
<rule  confidence="0.8" wordnetid="105846932">
<act  confidence="0.8" wordnetid="100030358">
<psychological_feature  confidence="0.8" wordnetid="100023100">
<procedure  confidence="0.8" wordnetid="101023820">
<activity  confidence="0.8" wordnetid="100407535">
<algorithm  confidence="0.8" wordnetid="105847438">
<header>
<title>Planarity testing</title>
<id>15972636</id>
<revision>
<id>242652627</id>
<timestamp>2008-10-03T02:26:57Z</timestamp>
<contributor>
<username>Kralizec!</username>
<id>182971</id>
</contributor>
</revision>
<categories>
<category>Topological graph theory</category>
<category>Graph algorithms</category>
</categories>
</header>
<bdy>

In <link xlink:type="simple" xlink:href="../401/12401.xml">
graph theory</link>, the <b>planarity testing</b> problem asks whether, given a graph, that graph is a <link xlink:type="simple" xlink:href="../314/24314.xml">
planar graph</link> (can be drawn in the plane without edge intersections). This is a well-studied problem in <link xlink:type="simple" xlink:href="../323/5323.xml">
computer science</link> for which many practical <link xlink:type="simple" xlink:href="../775/775.xml">
algorithm</link>s have emerged, many taking advantage of novel <link xlink:type="simple" xlink:href="../519/8519.xml">
data structure</link>s. Most of these methods operate in <link xlink:type="simple" xlink:href="../578/44578.xml">
O</link>(<it>n</it>) time (linear time), where <it>n</it> is the number of edges (or vertices) in the graph, which is <link xlink:type="simple" xlink:href="../619/3287619.xml">
asymptotically optimal</link>.
<sec>
<st>
 Simple algorithms and planarity characterizations </st>

<p>

By <link>
Fáry's theorem</link> we can assume the edges in the graph drawing, if any, are straight line segments. Given such a drawing for the graph, we can verify that there are no crossings using well-known <link xlink:type="simple" xlink:href="../098/3194098.xml">
line segment intersection</link> algorithms that operate in O(<it>n</it> log <it>n</it>) time. However, this is not a particularly good solution, for several reasons:</p>
<p>

<list>
<entry level="1" type="bullet">

 There's no obvious way to find a drawing, a problem which is considerably more difficult than planarity testing;</entry>
<entry level="1" type="bullet">

 Line segment intersection algorithms are more expensive than good planarity testing algorithms;</entry>
<entry level="1" type="bullet">

 It does not extend to verifying nonplanarity, since there is no obvious way of enumerating all possible drawings.</entry>
</list>
</p>
<p>

For these reasons, planarity testing algorithms take advantage of theorems in graph theory that characterize the set of planar graphs in terms that are independent of graph drawings. One of these is <link xlink:type="simple" xlink:href="../314/24314.xml">
Kuratowski's theorem</link>, which states that:</p>
<p>

<indent level="1">

A <link xlink:type="simple" xlink:href="../806/325806.xml#xpointer(//*[./st=%22Finite_Graph%22])">
finite graph</link> is planar <link xlink:type="simple" xlink:href="../922/14922.xml">
if and only if</link> it does not contain a <link>
subgraph</link> that is a <link>
subdivision</link> of <it>K</it>5 (the <link xlink:type="simple" xlink:href="../816/85816.xml">
complete graph</link> on five <link xlink:type="simple" xlink:href="../899/638899.xml">
vertices</link>) or <it>K</it>3,3 (<link xlink:type="simple" xlink:href="../320/525320.xml">
complete bipartite graph</link> on six vertices, three of which connect to each of the other three). 
</indent>

A graph can be demonstrated to be nonplanar by exhibiting a subgraph matching the above description, and this can be easily verified, which places the problem in <link xlink:type="simple" xlink:href="../184/6184.xml">
co-NP</link>. However, this also doesn't by itself produce a good algorithm, since there are a large number of subgraphs to consider (<it>K</it>5 and <it>K</it>3,3 are fixed in size, but a graph can contain 2Ω(m) subdivisions of them).</p>
<p>

A simple theorem allows graphs with too many edges to be quickly determined to be nonplanar, but cannot be used to establish planarity. If <it>v</it> is the number of vertices (at least 3) and <it>e</it> is the number of edges, then the following imply nonplanarity:</p>
<p>

<indent level="1">

 <it>e</it> &amp;gt; 3<it>v</it> &amp;minus; 6 <it>or</it>;
</indent>
: There are no cycles of length 3 and <it>e</it> &amp;gt; 2<it>v</it> &amp;minus; 4.</p>
<p>

For this reason <it>n</it> can be taken to be either the number of vertices or edges when using big O notation with planar graphs, since they differ by at most a constant multiple.</p>

</sec>
<sec>
<st>
 Path addition method </st>

<p>

The classic <it>path addition</it> method of <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../443/299443.xml">
Hopcroft</link></scientist>
</person>
 and <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../127/46127.xml">
Tarjan</link></scientist>
</person>
<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref> was the first published linear-time planarity testing algorithm in 1974.</p>

</sec>
<sec>
<st>
 PQ tree vertex addition method </st>

<p>

The <it>vertex addition</it> method began with an inefficient O(<it>n</it>2) method conceived by <scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../307/1924307.xml">
Lempel</link></scientist>
, <scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../632/632632.xml">
Even</link></scientist>
 and Cederbaum in 1967.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%222%22])">2</ref> It was improved by Even and Tarjan, who found a linear-time solution for the <it>s</it>,<it>t</it>-numbering step,<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%223%22])">3</ref> and by <link>
Booth</link> and <link>
Lueker</link>, who developed the <link xlink:type="simple" xlink:href="../568/597568.xml">
PQ tree</link> data structure. With these improvements it is linear-time and outcompetes the path addition method in practice.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%224%22])">4</ref> This method was also extended to allow a planar embedding (drawing) to be efficiently computed for a planar graph.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%225%22])">5</ref></p>

</sec>
<sec>
<st>
 PC tree vertex addition method </st>

<p>

In 1999, Shih and Hsu developed a planarity testing algorithm that was significantly simpler than classical methods based on a new type of data structure called the <link>
PC tree</link> and a <link xlink:type="simple" xlink:href="../584/597584.xml">
postorder traversal</link> of the <link xlink:type="simple" xlink:href="../034/97034.xml">
depth-first search</link> tree of the vertices.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%226%22])">6</ref></p>

</sec>
<sec>
<st>
 Edge addition method </st>

<p>

In 2004, Boyer and Myrvold <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%227%22])">7</ref> developed a simplified O(<it>n</it>) algorithm, originally inspired by the PQ tree method, which gets rid of the PQ tree and uses edge additions to compute a planar embedding, if possible. Otherwise, a Kuratowski subdivision (of either <it>K</it>5 or <it>K</it>3,3) is computed. This is one of the two current state-of-the-art algorithms today (the other one is the planarity testing algorithm of de Frayseeix, de Mendez and Rosenstiehl<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%228%22])">8</ref>). See <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%229%22])">9</ref> for an experimental comparison with a preliminary version of the Boyer and Myrvold planarity test. Furthermore, the Boyer-Myrvold test was extended to extract multiple Kuratowski subdivisions of a non-planar input graph in a running time linearly dependent on the output size<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2210%22])">10</ref>. The source code for the planarity test and the extraction of multiple Kuratowski subdivisions is publicly available<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2211%22])">11</ref>.</p>

</sec>
<sec>
<st>
 References </st>

<p>

<reflist>
<entry id="1">
J. Hopcroft and R. Tarjan. Efficient planarity testing. Journal of the Association for Computing Machinery, vol.21, no.4, pp.549&ndash;568. 1974.</entry>
<entry id="2">
A. Lempel, S. Even, and I. Cederbaum. An algorithm for planarity testing of graphs. In P. Rosenstiehl, editor, Theory of Graphs, pages 215–232, New York, 1967. Gordon and Breach.</entry>
<entry id="3">
S. Even and R. E. Tarjan. Computing an st-numbering. Theoretical Computer Science, 2: pp.339&ndash;344. 1976.</entry>
<entry id="4">
Boyer and Myrvold, pg.243, "Its implementation in LEDA is slower than LEDA implementations of many other O(<it>n</it>)-time planarity algorithms."</entry>
<entry id="5">
N. Chiba, T. Nishizeki, A. Abe, and T. Ozawa. A linear algorithm for embedding planar graphs using PQ–trees. Journal of Computer and Systems Sciences, 30:pp.54&ndash;76. 1985.</entry>
<entry id="6">
W. K. Shih and W. L. Hsu. A new planarity test. Theoretical Computer Science, 223:pp.179&ndash;191. 1999.</entry>
<entry id="7">
John M. Boyer and Wendy J. Myrvold. Simplified Planarity. Journal of Graph Algorithms and Applications, vol.8, no.3, pp.241&ndash;273. 2004.</entry>
<entry id="8">
H. de Fraysseix, P. O. de Mendez, P. Rosenstiehl. Trémaux Trees and Planarity. Int. J. Found. Comput. Sci., 2006, 17, 1017-1030</entry>
<entry id="9">
J. M. Boyer, P. F. Cortese, M. Patrignani, G. D. Battista. Stop Minding Your P's and Q's: Implementing a Fast and Simple DFS-Based Planarity Testing and Embedding Algorithm. Proc. GD '03, Springer-Verlag, 2003, 2912, 25-36</entry>
<entry id="10">
M. Chimani, P. Mutzel, J. M. Schmidt. Efficient Extraction of Multiple Kuratowski Subdivisions. 15th International Symposium on Graph Drawing (GD'07), Sydney, Australia, 2008, 159-170</entry>
<entry id="11">
http://www.ogdf.net</entry>
</reflist>
</p>

</sec>
</bdy>
</algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</article>
