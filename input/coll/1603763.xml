<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 18:44:55[mciao0826] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>Index (information technology)</title>
<id>1603763</id>
<revision>
<id>242361454</id>
<timestamp>2008-10-01T22:51:58Z</timestamp>
<contributor>
<username>StigBot</username>
<id>5316354</id>
</contributor>
</revision>
<categories>
<category>Arrays</category>
<category>Technical communication</category>
</categories>
</header>
<bdy>

<indent level="1">

<it>This is referring to Index in the context of Information Technology.  For other meanings, see <link xlink:type="simple" xlink:href="../270/15270.xml">
Index</link>.</it>
</indent>

In <link xlink:type="simple" xlink:href="../323/5323.xml">
computer science</link>, an <b>index</b> can be: 
<list>
<entry level="1" type="number">

 an integer which identifies an array element</entry>
<entry level="1" type="number">

 a <link xlink:type="simple" xlink:href="../018/459018.xml">
pointer</link> data element. </entry>
<entry level="1" type="number">

 a <link xlink:type="simple" xlink:href="../519/8519.xml">
data structure</link> that enables <link xlink:type="simple" xlink:href="../541/1750541.xml">
sublinear-time</link> lookup</entry>
</list>

<sec>
<st>
Array element identifier</st>
<p>

When data objects are stored in an <link xlink:type="simple" xlink:href="../052/2052.xml">
array</link>, individual objects are selected by an index which is usually a non-negative <link xlink:type="simple" xlink:href="../475/5565475.xml">
scalar</link> <link xlink:type="simple" xlink:href="../563/14563.xml">
integer</link>. Indices are also called subscripts.</p>
<p>

There are three ways in which the elements of an array can be indexed:</p>
<p>

<list>
<entry level="1" type="definition">

<b>0</b> (<it>zero-based indexing</it>): The first element of the array is indexed by subscript of 0</entry>
<entry level="1" type="definition">

<b>1</b> (<it>one-based indexing</it>): The first element of the array is indexed by subscript of 1.</entry>
<entry level="1" type="definition">

<b>n</b> (<it>n-based indexing</it>): The base index of an array can be freely chosen. Usually programming languages allowing <it>n-based indexing</it> also allow negative index values and other <link xlink:type="simple" xlink:href="../475/5565475.xml">
scalar</link> data types like <idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<category wordnetid="105838765" confidence="0.8">
<type wordnetid="105840188" confidence="0.8">
<kind wordnetid="105839024" confidence="0.8">
<link xlink:type="simple" xlink:href="../370/4723370.xml">
Enumerations</link></kind>
</type>
</category>
</concept>
</idea>
, or <idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<category wordnetid="105838765" confidence="0.8">
<type wordnetid="105840188" confidence="0.8">
<kind wordnetid="105839024" confidence="0.8">
<link xlink:type="simple" xlink:href="../443/73443.xml">
Characters</link></kind>
</type>
</category>
</concept>
</idea>
 may be used as an array index.</entry>
</list>
</p>
<p>

Arrays can have multiple dimensions, thus it is not uncommon to access an array using multiple indices.  For example a two dimensional array  A with three rows and four columns might provide access to the element at the 2nd row and 4th column by the expression: A[1,3] (in a <link xlink:type="simple" xlink:href="../786/1620786.xml">
row major</link> language) and A[3,1] (in a <link>
column major</link> language) in the case of a zero-based indexing system.  Thus two indices are used for a two dimensional array, three for a three dimensional array, and n for an n dimensional array.</p>
<p>

For details on programming language support of the various features see <link xlink:type="simple" xlink:href="../999/13941999.xml">
Comparison of programming languages (array)</link>.</p>

</sec>
<sec>
<st>
Support for fast lookup</st>

<p>

Suppose a data store contains <b>N</b> data objects.  A naive algorithm for looking up some particular object will consider each object and will thus, for a successful lookup, examine half on average and all in a worst-case; <link>
O</link>(N) or <link xlink:type="simple" xlink:href="../258/754258.xml">
linear time</link>.  Since data stores commonly contain large numbers of objects and since lookup is a common operation, it is often desirable to improve this performance.</p>
<p>

An index is any data structure which improves the performance of lookup.   There are many different 
Data_structures|data structures used for this purpose, and in fact a substantial proportion of Computer Science is devoted to the design and analysis of index data structures.  There are complex design trade-offs involving lookup performance, index size, and index update performance.  Many index designs exhibit logarithmic (<link>
O</link>(log(N)) lookup performance and in some applications it is possible to achieve flat (<link>
O</link>(1)) performance.</p>
<p>

All <link xlink:type="simple" xlink:href="../377/8377.xml">
database</link> software includes indexing technology in the interests of improving performance.  See <link xlink:type="simple" xlink:href="../076/1711076.xml">
Index (database)</link>.</p>
<p>

One specific and very common application is in the domain of <link xlink:type="simple" xlink:href="../271/15271.xml">
information retrieval</link>, where the application of a <b><event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../386/7602386.xml">
full-text index</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</b> enables rapid identification of documents based on their textual content.</p>

</sec>
<sec>
<st>
See also</st>
<p>

<list>
<entry level="1" type="bullet">

 <algorithm wordnetid="105847438" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../266/4266.xml">
Binary search algorithm</link></algorithm>
 Fast lookup for sorted lists sometimes known as the "binary chop" method</entry>
<entry level="1" type="bullet">

 <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../833/13833.xml">
Hash table</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
 Creating an index for using indexed 'lookup' where keys are not sequential</entry>
</list>


</p>

</sec>
</bdy>
</article>
