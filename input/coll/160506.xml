<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 16:23:03[mciao0827] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<primitive  confidence="0.9511911446218017" wordnetid="109627462">
<header>
<title>Hardware random number generator</title>
<id>160506</id>
<revision>
<id>242924960</id>
<timestamp>2008-10-04T08:40:57Z</timestamp>
<contributor>
<username>Draco flavus</username>
<id>398389</id>
</contributor>
</revision>
<categories>
<category>All pages needing cleanup</category>
<category>Cleanup from April 2008</category>
<category>Cryptographic primitives</category>
<category>Articles to be merged since April 2008</category>
<category>Randomness</category>
<category>All articles to be merged</category>
</categories>
</header>
<bdy>

In <link xlink:type="simple" xlink:href="../213/5213.xml">
computing</link>, a <b>hardware random number generator</b> is an apparatus that generates <link xlink:type="simple" xlink:href="../627/41627.xml">
random number</link>s from a physical process. Such devices are often based on microscopic phenomena such as <link xlink:type="simple" xlink:href="../745/182745.xml">
thermal noise</link> or the <link xlink:type="simple" xlink:href="../579/23579.xml">
photoelectric effect</link> or other <link xlink:type="simple" xlink:href="../649/19595649.xml">
quantum</link> phenomena. These processes are, in theory, completely unpredictable, and the theory's assertions of unpredictability are subject to experimental test. A quantum-based hardware random number generator typically contains an <link xlink:type="simple" xlink:href="../214/3214.xml">
amplifier</link> to bring the output of the physical process into the <link xlink:type="simple" xlink:href="../187/382187.xml">
macroscopic</link> realm, and a <link xlink:type="simple" xlink:href="../666/242666.xml">
transducer</link> to convert the output into a digital signal.<p>

Random number generators can also be built from macroscopic phenomena, such as <link xlink:type="simple" xlink:href="../083/23083.xml">
playing cards</link>, <link xlink:type="simple" xlink:href="../244/8244.xml">
dice</link>, <link xlink:type="simple" xlink:href="../487/26487.xml">
roulette</link> wheels and <link xlink:type="simple" xlink:href="../930/379930.xml">
lottery machine</link>s. The presence of unpredictability in these phenomena can be justified by the theory of unstable <link xlink:type="simple" xlink:href="../087/9087.xml">
dynamical system</link>s and <link xlink:type="simple" xlink:href="../295/6295.xml">
chaos theory</link>. These theories suggest that even though macroscopic phenomena are deterministic in theory under <link xlink:type="simple" xlink:href="../586/19555586.xml">
Newtonian mechanics</link>, real-world systems evolve in ways that cannot be predicted in practice because one would need to know the micro-details of initial conditions and subsequent manipulation or change.</p>
<p>

Although dice have been mostly used in <link xlink:type="simple" xlink:href="../921/11921.xml">
gambling</link>, and in recent times as 'randomizing' elements in games (e.g. <link xlink:type="simple" xlink:href="../475/25475.xml">
role playing game</link>s), the <link xlink:type="simple" xlink:href="../798/32798.xml">
Victorian</link> scientist <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../072/49072.xml">
Francis Galton</link></scientist>
</person>
 described a way to use dice to explicitly generate random numbers for scientific purposes, in 1890. Though some gamblers believe they can control their throws of dice enough to win at <link xlink:type="simple" xlink:href="../133/525133.xml">
dice games</link> (a claim which has been long debated), no one has produced a way to exploit the claimed effect in either generating or attacking physical randomness sources.</p>
<p>

Hardware random number generators are often relatively slow, and they may produce a biased sequence (i.e., some values are more common than others). Whether a hardware random number generator is suitable for a particular application depends on the details of both the application and the generator.</p>

<sec>
<st>
 Pseudo-random generators </st>

<p>

<indent level="1">

<it>Main article: <link xlink:type="simple" xlink:href="../524/45524.xml">
Pseudorandom number generator</link></it>
</indent>

Most computer "random number generators" are not hardware devices, but are software routines implementing generator <link xlink:type="simple" xlink:href="../775/775.xml">
algorithm</link>s. They are often supplied as <link xlink:type="simple" xlink:href="../421/106421.xml">
library routine</link>s in <link xlink:type="simple" xlink:href="../015/23015.xml">
programming language</link> implementations, or as part of the <link xlink:type="simple" xlink:href="../194/22194.xml">
operating system</link>. These are more properly called <link xlink:type="simple" xlink:href="../524/45524.xml">
pseudo-random number generator</link>s, since, being <link xlink:type="simple" xlink:href="../931/10931.xml">
finite state machine</link>s, they cannot produce truly random outputs. Within that limitation, most produce sequences which pass one or more statistical pattern tests for randomness. Although the primary reason for using such pseudo-random number generators is typically cost and convenience, avoiding the need for specialized -- often expensive -- supporting hardware, pseudo-random number generators also have the property that random number series can be "replayed" which may be useful when testing applications or as a means of standardizing random number generators, for example in a networked game which relies upon random numbers which must be generated on both machines during the application.</p>
<p>

<link xlink:type="simple" xlink:href="../647/2829647.xml">
Algorithmic information theory</link> defines a sequence of <link xlink:type="simple" xlink:href="../364/3364.xml">
bit</link>s as non-random if it can be produced by some computer program that is shorter than that sequence (<link xlink:type="simple" xlink:href="../635/1635.xml">
Chaitin-Kolmogorov randomness</link>). Pseudo-random number generators' outputs are decidedly non-random by that test: they can usually be programmed in a few thousand bits, but can produce far larger sequences, with periods so long no currently plausible computer or combination of them could exhaust a single period before the <link>
heat death</link> of the Universe.</p>
<p>

There are several informal definitions of <link xlink:type="simple" xlink:href="../523/19196523.xml">
randomness</link>, usually based on either a lack of discernible <link xlink:type="simple" xlink:href="../351/68351.xml">
pattern</link>s in a sequence, or the unpredictability of the sequence or various aspects of it by, generally, the most puissant possible adversary. Output from well-designed pseudo-random number generators should pass assorted statistical tests probing for non-randomness (see <link xlink:type="simple" xlink:href="../888/21888.xml">
NIST</link> Special Publication 800-22, <link xlink:type="simple" xlink:href="../211/17211.xml">
Knuth</link>, <it><work wordnetid="104599396" confidence="0.8">
<product wordnetid="104007894" confidence="0.8">
<creation wordnetid="103129123" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<book wordnetid="106410904" confidence="0.8">
<publication wordnetid="106589574" confidence="0.8">
<link xlink:type="simple" xlink:href="../358/31358.xml">
The Art of Computer Programming</link></publication>
</book>
</artifact>
</creation>
</product>
</work>
,</it> vol. 2, and RFC 4086 for details of many such tests). </p>
<p>

The sequences generated by pseudo-random number generators always have some fixed period, since any pseudo-random number generator implemented in software forms a finite state machine generating an infinite series. Consequently the period of any pseudo-random number generator is the smallest cycle in the state diagram. Given an original state of the generator and the implementation of the algorithm, a pseudo-random number generator of this sort is totally predictable. Often even partial knowledge of the initial state of the generator can be sufficient to determine the random number sequence. On the other hand, it has become relatively easy to produce pseudo-random number generators that are guaranteed not to repeat on any currently plausible computer within a time-frame that is millions of times longer than the <link xlink:type="simple" xlink:href="../879/847879.xml">
age of the universe</link>. It is an open question whether it is always possible in practice to distinguish the output of such a pseudo-random number generator from that of a perfectly random source without knowledge of the generator's internal state. </p>
<p>

A central analytic approach in modern cryptography rests on the assumption that testing <link xlink:type="simple" xlink:href="../244/5244.xml">
cipher</link> output can be distinguished from random noise without knowledge of the <link xlink:type="simple" xlink:href="../039/53039.xml">
key</link> used by the algorithm to generate the <link xlink:type="simple" xlink:href="../294/10294.xml">
ciphertext</link> output. In addition, there are several contingent proofs of security for some cryptographic schemes which depend on the randomness of an input value or constants used within an algorithm.</p>

</sec>
<sec>
<st>
 Uses </st>

<p>

<indent level="1">

<it>Main article: <link xlink:type="simple" xlink:href="../990/2714990.xml">
Applications of randomness</link></it>
</indent>

Unpredictable random numbers were first investigated in the context of <link xlink:type="simple" xlink:href="../921/11921.xml">
gambling</link>, and many randomizing devices such as <link xlink:type="simple" xlink:href="../244/8244.xml">
dice</link>, <link xlink:type="simple" xlink:href="../189/23189.xml">
shuffling playing cards</link>, and <link xlink:type="simple" xlink:href="../487/26487.xml">
roulette</link> wheels, were first developed for use in gambling. Fairly produced random numbers are vital to electronic gambling and ways of creating them are sometimes regulated by governmental gaming commissions.</p>
<p>

Random numbers are also used for non-gambling purposes, both where their use is mathematically important, such as sampling for <link xlink:type="simple" xlink:href="../315/277315.xml">
opinion poll</link>s, and in situations where fairness is approximated by <link xlink:type="simple" xlink:href="../462/65462.xml">
randomization</link>, such as selecting <link xlink:type="simple" xlink:href="../720/44720.xml">
juror</link>s and <link xlink:type="simple" xlink:href="../826/55826.xml">
military draft lotteries</link>. Their use is also evident in ancient writings, for example in the <work wordnetid="104599396" confidence="0.8">
<product wordnetid="104007894" confidence="0.8">
<creation wordnetid="103129123" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<book wordnetid="106410904" confidence="0.8">
<publication wordnetid="106589574" confidence="0.8">
<link xlink:type="simple" xlink:href="../376/4376.xml">
Book of Numbers</link></publication>
</book>
</artifact>
</creation>
</product>
</work>
 (33:54), <link xlink:type="simple" xlink:href="../577/19577.xml">
Moses</link> commands the Israelites to apportion the land by lot (<it><language wordnetid="106282651" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../450/13450.xml">
Hebrew</link></language>
: גורל‎</it>). And the drawing of lots, often pottery shards, are well attested in the Classical world of Greece and Rome. Some of these very shards have been archeologically recovered.</p>
<p>

Random numbers are used in both symmetric and asymmetric <link xlink:type="simple" xlink:href="../432/18934432.xml">
cryptography</link> as a way of generating keys and for the random values used in the operation of some algorithms. Since integrity of the communication between the two parties is conditional on the continued secrecy of these keys, using a random number generator which does not have adequate randomness may be expected to compromise the security of messages.</p>

</sec>
<sec>
<st>
 Early attempts </st>

<p>

One early way of producing random numbers was by a variation of the same machines used to play <link xlink:type="simple" xlink:href="../744/16744.xml">
keno</link> or select <link xlink:type="simple" xlink:href="../592/228592.xml">
lottery</link> numbers.  Basically, these mixed numbered ping-pong balls with blown air, perhaps combined with mechanical agitation, and use some method to withdraw balls from the mixing chamber. This method gives reasonable results in some senses, but the random numbers generated by this means are expensive. The method is inherently slow, and is unusable in most automated situations, (i.e., with computers).</p>
<p>

In 1927, <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../199/73199.xml">
Cambridge University Press</link></company>
 published a book of <it>Random sampling numbers,</it> arranged by a statistician, Leonard Henry Caleb Tippett, which contained 41,600 digits taken from English parishes listed in census records. Other random number tables were published in that era, including one by <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../824/140824.xml">
R. A. Fischer</link></scientist>
</person>
 and another by the U.S. <link xlink:type="simple" xlink:href="../678/55678.xml">
Interstate Commerce Commission</link> in 1949 with over 100,000 random digits. </p>

<p>

<table class="metadata plainlinks ambox ">
<row>
<col>

ambox-style" style=""</col>
</row>
<row>
<col class="mbox-image"><p>

<image width="40x40px" src="Ambox_style.png">
</image>
</p>
</col>
<col style="" class="mbox-text">
 <b>This section may require  to meet Wikipedia's .</b>
Please <weblink xlink:type="simple" xlink:href="http://localhost:18088/wiki/index.php?title=Hardware_random_number_generator&amp;action=edit">
improve this article</weblink>if you can. <it>(April 2008)''</it></col>
</row>
</table>

</p>
<p>

What is likely to be the last of these projects is <work wordnetid="104599396" confidence="0.8">
<product wordnetid="104007894" confidence="0.8">
<creation wordnetid="103129123" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<book wordnetid="106410904" confidence="0.8">
<publication wordnetid="106589574" confidence="0.8">
<link xlink:type="simple" xlink:href="../812/1354812.xml">
A Million Random Digits with 100,000 Normal Deviates</link></publication>
</book>
</artifact>
</creation>
</product>
</work>
, published by the <link xlink:type="simple" xlink:href="../944/214944.xml">
RAND Corporation</link> in 1955. They created an electronic simulation of a roulette wheel attached to a <link xlink:type="simple" xlink:href="../718/856718.xml">
key punch</link>, the results of which were then carefully filtered and tested before being used to generate the table. The RAND table was a significant breakthrough in delivering random numbers because such a large and carefully prepared table had never before been available. It was useful for simulations and modeling. But, having been published, it is not usable as cryptographic keys, or for preparing them, or as a seed in some cryptographic pseudo-random number generator. However, since it was published long before modern cryptography, using values from it for the random (if not unknown) constants for initializing algorithms would demonstrate that the constants had not been selected for (in <person wordnetid="100007846" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../732/36732.xml">
B. Schneier</link></person>
's words) "nefarious purpose(es)." <link xlink:type="simple" xlink:href="../695/634695.xml">
Khufu and Khafre</link> do this, for example (ref Applied Cryptography - B. Schneier). <it>See:</it> <link xlink:type="simple" xlink:href="../296/1249296.xml">
Nothing up my sleeve number</link>s.</p>

</sec>
<sec>
<st>
 Physical phenomena with quantum-random properties </st>

<p>

There are two fundamental sources of practical quantum mechanical physical randomness: quantum mechanics at the atomic or sub-atomic level and <link xlink:type="simple" xlink:href="../745/182745.xml">
thermal noise</link> (some of which is quantum mechanical in origin). Quantum mechanics predicts that certain physical phenomena, such as the <link xlink:type="simple" xlink:href="../767/197767.xml">
nuclear decay</link> of atoms, are fundamentally random and cannot, in principle, be predicted. (For a discussion of empirical verification of quantum unpredictability, see <link xlink:type="simple" xlink:href="../766/886766.xml">
Bell test experiments</link>.)  And, because we live at a finite, non-zero temperature, every system has some random variation in its state; for instance, molecules of air are constantly bouncing off each other in a random way.  (<it>See</it> <link xlink:type="simple" xlink:href="../481/28481.xml">
statistical mechanics</link>.)  This randomness is a quantum phenomenon as well. (<it>See</it> <link xlink:type="simple" xlink:href="../754/85754.xml">
phonon</link>.)</p>
<p>

Because the outcome of quantum-mechanical events cannot in principle be predicted, they are the 'gold standard' for random number generation. Some quantum phenomena used for random number generation include:</p>
<p>

<list>
<entry level="1" type="bullet">

 <idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<parameter wordnetid="105859071" confidence="0.8">
<constant wordnetid="105858936" confidence="0.8">
<organ wordnetid="105297523" confidence="0.8">
<sense_organ wordnetid="105299178" confidence="0.8">
<quantity wordnetid="105855125" confidence="0.8">
<part wordnetid="109385911" confidence="0.8">
<eye wordnetid="105311054" confidence="0.8">
<body_part wordnetid="105220461" confidence="0.8">
<link xlink:type="simple" xlink:href="../700/41700.xml">
Shot noise</link></body_part>
</eye>
</part>
</quantity>
</sense_organ>
</organ>
</constant>
</parameter>
</concept>
</idea>
, a quantum mechanical noise source in electronic circuits. A simple example is a lamp shining on a photodiode. Due to the <link xlink:type="simple" xlink:href="../883/31883.xml">
uncertainty principle</link>, arriving photons create noise in the circuit. Collecting the noise for use poses some problems, but this is an especially simple random noise source.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 A <link xlink:type="simple" xlink:href="../767/197767.xml">
nuclear decay</link> radiation source (as, for instance, from some kinds of commercial <link xlink:type="simple" xlink:href="../287/341287.xml">
smoke detector</link>s), detected by a <equipment wordnetid="103294048" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../984/12984.xml">
Geiger counter</link></equipment>
 attached to a PC. </entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../535/23535.xml">
Photon</link>s travelling through a <link xlink:type="simple" xlink:href="../410/582410.xml">
semi-transparent mirror</link>, as in the commercial product, Quantis from <link xlink:type="simple" xlink:href="../718/12827718.xml">
id Quantique</link>.  The <link xlink:type="simple" xlink:href="../648/312648.xml">
mutually exclusive events</link> (reflection — transmission) are detected and associated to "0" or "1" bit values respectively.</entry>
</list>
</p>
<p>

Thermal phenomena are easier to detect. They are (somewhat) vulnerable to attack by lowering the temperature of the system, though most systems will stop operating at temperatures (e.g., ~150 K) low enough to reduce noise by a factor of two. Some of the thermal phenomena used include:</p>
<p>

<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../745/182745.xml">
Thermal noise</link> from a <link xlink:type="simple" xlink:href="../754/25754.xml">
resistor</link>, amplified to provide a random voltage source.  </entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../232/3134232.xml">
Avalanche noise</link> generated from an <link xlink:type="simple" xlink:href="../420/243420.xml">
avalanche diode</link>, or Zener breakdown noise from a reverse-biased <link xlink:type="simple" xlink:href="../835/97835.xml">
zener diode</link>. </entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../042/3339042.xml">
Atmospheric noise</link>, detected by a radio receiver attached to a PC (though much of it, such as lightning noise, is not properly thermal noise, but most likely a <link xlink:type="simple" xlink:href="../615/7615.xml">
chaotic</link> phenomenon).</entry>
</list>
</p>
<p>

Another variable physical phenomenon that is easy to measure is <link xlink:type="simple" xlink:href="../924/6083924.xml">
clock drift</link>. </p>
<p>

In the absence of quantum effects or thermal noise, other phenomena that tend to be random, although in ways not easily characterized by laws of physics, can be used. When several such sources are combined carefully (as in, for example, the <artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<apparatus wordnetid="102727825" confidence="0.8">
<generator wordnetid="103434188" confidence="0.8">
<equipment wordnetid="103294048" confidence="0.8">
<link xlink:type="simple" xlink:href="../416/74416.xml">
Yarrow algorithm</link></equipment>
</generator>
</apparatus>
</instrumentality>
</artifact>
 or <artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<apparatus wordnetid="102727825" confidence="0.8">
<generator wordnetid="103434188" confidence="0.8">
<equipment wordnetid="103294048" confidence="0.8">
<link xlink:type="simple" xlink:href="../154/1627154.xml">
Fortuna</link></equipment>
</generator>
</apparatus>
</instrumentality>
</artifact>
 <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../249/182249.xml">
CSPRNG</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
s), enough entropy can be collected for the  creation of cryptographic keys and <link xlink:type="simple" xlink:href="../390/6988390.xml">
nonces</link>, though generally at restricted rates. The advantage is that this approach needs, in principle, no special hardware. The disadvantage is that a sufficiently knowledgable attacker can surreptitiously modify the software or its inputs, thus reducing the randomness of the output, perhaps substantially. The primary source of randomness typically used in such approaches is the precise timing of the <link xlink:type="simple" xlink:href="../289/15289.xml">
interrupt</link>s caused by mechanical input/output devices, such as keyboards and <link xlink:type="simple" xlink:href="../472/Species_8472.xml">
disk drive</link>s, various system information counters, etc.</p>
<p>

This last approach must be implemented carefully and may be subject to attack if it is not. For instance, the generator built into the Linux kernel, which combines several such sources, may be vulnerable to an attack <weblink xlink:type="simple" xlink:href="http://eprint.iacr.org/2006/086.pdf">
http://eprint.iacr.org/2006/086.pdf</weblink>. The random number generator used for cryptographic purposes in an early version of the <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../979/21979.xml">
Netscape</link></company>
 browser was certainly vulnerable (and was promptly changed). </p>
<p>

One approach in using physical randomness is to convert a noise source into a random bit sequence in a separate device that is then connected to the computer through an I/O port. The acquired noise signal is amplified, filtered, and then run through a high-speed voltage comparator to produce a logic signal that alternates states at random intervals. At least in part, the randomness produced depends on the specific details of the 'separate device'. Care must also always be taken when amplifying low-level noise to keep out spurious signals, such as power line hum and unwanted broadcast transmissions, and to avoid adding bias during acquisition and amplification. In some simple designs, the fluctuating logic value is converted to an <link xlink:type="simple" xlink:href="../023/26023.xml">
RS-232</link> type signal and presented to a computer's serial port. Software then sees this series of logic values as bursts of "<link xlink:type="simple" xlink:href="../932/236932.xml">
line noise</link>" characters on an I/O port. More sophisticated systems may format the bit values before passing them into a computer. </p>
<p>

Another approach is to feed an analog noise signal to an <link xlink:type="simple" xlink:href="../367/40367.xml">
analog to digital converter</link>, such as the audio input port built into most personal computers. The digitized signal may then be processed further in software to remove bias. However, digitization is itself often a source of bias, sometimes subtle, so this approach requires considerable caution and care.  </p>
<p>

Some have suggested using digital cameras, such as <link xlink:type="simple" xlink:href="../171/92171.xml">
webcam</link>s, to photograph chaotic macroscopic phenomena. A group at <link xlink:type="simple" xlink:href="../013/28013.xml">
Silicon Graphics</link>  imaged <vogue wordnetid="105750163" confidence="0.8">
<process wordnetid="105701363" confidence="0.8">
<plant_part wordnetid="113086908" confidence="0.8">
<fashion wordnetid="105750657" confidence="0.8">
<discrimination wordnetid="105748054" confidence="0.8">
<natural_object wordnetid="100019128" confidence="0.8">
<fad wordnetid="105751173" confidence="0.8">
<bulb wordnetid="113134059" confidence="0.8">
<basic_cognitive_process wordnetid="105701944" confidence="0.8">
<stalk wordnetid="113129165" confidence="0.8">
<plant_organ wordnetid="113087625" confidence="0.8">
<taste wordnetid="105749619" confidence="0.8">
<link xlink:type="simple" xlink:href="../996/19593996.xml">
Lava lamp</link></taste>
</plant_organ>
</stalk>
</basic_cognitive_process>
</bulb>
</fad>
</natural_object>
</discrimination>
</fashion>
</plant_part>
</process>
</vogue>
s to generate random numbers. <weblink xlink:type="simple" xlink:href="http://patft.uspto.gov/netacgi/nph-Parser?patentnumber=5732138">
U.S. Patent 5,732,138</weblink><weblink xlink:type="simple" xlink:href="http://www.pat2pdf.org/pat2pdf/foo.pl?number=5732138">
&nbsp;</weblink> One problem was determining whether the chaotic shapes generated were actually random -- the team decided that they are in properly operating Lava lamps.  Other chaotic scenes could be employed, such as the motion of streamers in a fan air stream or, probably, bubbles in a <link xlink:type="simple" xlink:href="../351/19230351.xml">
fish tank</link> (fish optional). The digitized image will generally contain additional noise, perhaps not very random, resulting from the video to digital conversion process.
A higher quality device might use two sources and eliminate signals that are common to both&mdash; depending on the sources and their physical locations, this reduces or eliminates interference from outside electric and magnetic fields.  This is often recommended for gambling devices, to reduce cheating by requiring attackers to exploit bias in several "random bit" streams.</p>
<p>

The <link xlink:type="simple" xlink:href="../293/7293.xml">
Commodore 64</link> provided a hardware random number generator, included in its soundchip, the <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<bit wordnetid="109222051" confidence="0.8">
<format wordnetid="106636806" confidence="0.8">
<part wordnetid="109385911" confidence="0.8">
<fragment wordnetid="109285254" confidence="0.8">
<link xlink:type="simple" xlink:href="../115/202115.xml">
MOS Technology SID</link></fragment>
</part>
</format>
</bit>
</information>
</message>
 6581. Random bytes are fetchable by a read on the correct memory address on the 6581.</p>

<ss1>
<st>
 Clock drift </st>

<p>

<table class="metadata plainlinks ambox ">
<row>
<col>

ambox-move" style=""</col>
</row>
<row>
<col class="mbox-image"><p>

<image width="50px" src="Merge-arrow.svg">
<caption>

Merge arrow
</caption>
</image>
</p>
</col>
<col style="" class="mbox-text">
 It has been suggested that this article or section be  into . ()</col>
</row>
</table>

</p>
<p>

There are several ways to measure and use <link xlink:type="simple" xlink:href="../924/6083924.xml">
clock drift</link> as a source of randomness.</p>
<p>

The <link xlink:type="simple" xlink:href="../617/14617.xml">
Intel</link> 80802 Firmware Hub chip included a hardware RNG using two free running oscillators, one fast and one slow. A thermal noise source (non-commonmode noise from two diodes) is used to modulate the frequency of the slow oscillator, which then triggers a measurement of the fast oscillator. That output is then debiased using a <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../942/15942.xml">
von Neumann</link></scientist>
</person>
 type decorrelation step (see below). The output rate of this device is somewhat less than 100,000 bit/s. This chip was an optional component of the 840 chipset family that supported an earlier Intel bus. It is not included in modern PCs.</p>
<p>

All <chip wordnetid="103020034" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<microprocessor wordnetid="103760310" confidence="0.8">
<conductor wordnetid="103088707" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<semiconductor_device wordnetid="104171831" confidence="0.8">
<link xlink:type="simple" xlink:href="../729/246729.xml">
VIA C3</link></semiconductor_device>
</device>
</conductor>
</microprocessor>
</instrumentality>
</artifact>
</chip>
 microprocessors have included a hardware RNG on the processor chip since 2003. Instead of using thermal noise, raw bits are generated by using four freerunning oscillators which are designed to run at different rates. The output of two are XORed to control the bias on a third oscillator, whose output clocks the output of the fourth oscillator to produce the raw bit. Minor variations in temperature, silicon characteristics, and local electrical conditions cause continuing oscillator speed variations and thus produce the entropy of the raw bits. To further ensure randomness, there are actually two such RNGs on each chip, each positioned in different environments and rotated on the silicon. The final output is a mix of these two generators. The raw output rate is tens to hundreds of megabits per second, and the whitened rate is a few megabits per second. User software can access the generated random bit stream using new non-privileged machine language instructions.</p>
<p>

A software implementation of a related idea on ordinary hardware is included in <it>CryptoLib</it>, a cryptographic routine library (JB Lacy, DP Mitchell, WM Schell, CryptoLib: Cryptography in software, Proc 4th USENIX Security Symp, pg 1-17, 1993). The algorithm is called <it><link>
truerand</link></it>. Most modern computers have two crystal oscillators, one for the real-time clock and one for the primary CPU clock; truerand exploits this fact. It uses an operating system service that sets an alarm, running off the real-time clock. One subroutine sets that alarm to go off in one clock tick (usually 1/60th of a second). Another then enters a while loop waiting for the alarm to trigger. Since the alarm will not always trigger in exactly one tick, the least significant bits of a count of loop iterations, between setting the alarm and its trigger, will vary randomly, possibly enough for some uses. Truerand doesn't require additional hardware, but in a multi-tasking system great care must be taken to avoid non-randomizing interference from other processes (e.g., in the suspension of the counting loop process as the operating system scheduler starts and stops assorted processes).</p>

</ss1>
</sec>
<sec>
<st>
 Dealing with bias </st>
<p>

The bit-stream from such systems is prone to be biased, with either 1s or 0s predominating.  There are two approaches to dealing with bias and other artifacts. The first is to design the RNG to minimize bias inherent in the operation of the generator. One method to correct this feeds back the generated bit stream, filtered by a low-pass filter, to adjust the bias of the generator.  By the <link xlink:type="simple" xlink:href="../406/39406.xml">
central limit theorem</link>, the feedback loop will tend to be well-adjusted 'almost all the time'. Ultra-high speed random number generators often use this method. Even then, the numbers generated are usually somewhat biased.</p>

<ss1>
<st>
 Software whitening  </st>
<p>

A second approach to coping with bias is to reduce it after generation  (in software or hardware). Even if the above hardware bias reduction steps have been taken, the bit-stream should still be assumed to contain bias and correlation. There are several techniques for reducing bias and correlation, often known by the name "<link xlink:type="simple" xlink:href="../494/5839494.xml">
whitening</link>" algorithms, by analogy with the related problem of producing white noise from a correlated signal.</p>
<p>

<person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../942/15942.xml">
John von Neumann</link></scientist>
</person>
 invented a simple algorithm to fix simple bias, and reduce correlation. It considers bits two at a time, taking one of three actions: when two successive bits are equal, they are not used as a random bit; a sequence of 1,0 becomes a 1; and a sequence of 0,1 becomes a zero.  This eliminates simple bias, and is easy to implement as a computer program or in digital logic. This technique works no matter how the bits have been generated. It cannot assure randomness in its output, however.  What it can do (with significant numbers of discarded bits) is transform a random bit stream with a frequency of 1's different from 50% into a stream closer to that frequency.</p>
<p>

Another technique for improving a near random bit stream is to <link xlink:type="simple" xlink:href="../979/105979.xml">
exclusive-or</link> the bit stream with the output of a high-quality <link xlink:type="simple" xlink:href="../249/182249.xml">
cryptographically secure pseudorandom number generator</link> such as  <artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<apparatus wordnetid="102727825" confidence="0.8">
<generator wordnetid="103434188" confidence="0.8">
<equipment wordnetid="103294048" confidence="0.8">
<link xlink:type="simple" xlink:href="../599/39599.xml">
Blum Blum Shub</link></equipment>
</generator>
</apparatus>
</instrumentality>
</artifact>
 or a good <link xlink:type="simple" xlink:href="../007/49007.xml">
stream cipher</link>.  This can cheaply improve decorrelation and digit bias.</p>
<p>

A related method which reduces bias in a near random bit stream is to take two or more uncorrelated near random bit streams, and <link xlink:type="simple" xlink:href="../979/105979.xml">
exclusive or</link> them together.  Let the probability of a bit stream producing a 0 be 1/2 + <it>e</it>, where -1/2 ≤ <it>e</it> ≤ 1/2. Then <it>e</it> is the bias of the bitstream.  If two uncorrelated bit streams with bias <it>e</it> are exclusive-or-ed together, then the bias of the result will be 2<it>e</it>².  This may be repeated with more bit streams. (See also <operation wordnetid="100955060" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<attack wordnetid="100972621" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<link xlink:type="simple" xlink:href="../186/715186.xml">
Piling-up lemma</link></activity>
</psychological_feature>
</act>
</attack>
</event>
</operation>
).</p>
<p>

Some designs apply cryptographic <link xlink:type="simple" xlink:href="../790/13790.xml">
hash function</link>s such as <function wordnetid="113783816" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../826/18826.xml">
MD5</link></function>
, <link xlink:type="simple" xlink:href="../672/26672.xml">
SHA-1</link>, or <link xlink:type="simple" xlink:href="../363/26363.xml">
RIPEMD-160</link> or even a <link xlink:type="simple" xlink:href="../838/38838.xml">
CRC</link> function to all or part of the bit stream, and then use the output as the random bit stream. This is attractive, partly because it is relatively fast compared to some other methods, but depends entirely on qualities in the hash output for which there may be little theoretical basis.</p>

</ss1>
<ss1>
<st>
PRNG with periodically refreshed random key</st>

<p>

Other designs use what are believed to be true random bits as the <link xlink:type="simple" xlink:href="../039/53039.xml">
key</link> for a high quality <link xlink:type="simple" xlink:href="../594/4594.xml">
block cipher</link> algorithm, taking the encrypted output as the random bit stream. Care must be taken in these cases to select an appropriate <message wordnetid="106253690" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<cipher wordnetid="106254239" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../202/160202.xml">
block mode</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</cipher>
</rule>
</event>
</message>
, however. In some implementations, the PRNG is run for a limited number of digits, while the hardware generating device produces a new seed.</p>

</ss1>
</sec>
<sec>
<st>
 Using observed events </st>

<p>

Software engineers without true random number generators often try to develop them by measuring physical events available to the software. An example is measuring the time between user keystrokes, and then taking the least significant bit (or two or three) of the count as a random digit. A similar approach measures task-scheduling, network hits, disk-head seek times and other internal events. One Microsoft design includes a very long list of such internal values (see the <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../249/182249.xml">
CSPRNG</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
 article).</p>
<p>

The method is risky when it uses computer-controlled events because a clever, malicious attacker might be able to predict a cryptographic key by controlling the external events. Several gambling frauds have been uncovered which rely on manipulating normally hidden events internal to the operation of computers or networks. It is also risky because the supposed user-generated event (e.g., keystrokes) can be <accomplishment wordnetid="100035189" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<action wordnetid="100037396" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<feat wordnetid="100036762" confidence="0.8">
<link xlink:type="simple" xlink:href="../209/503209.xml">
spoofed</link></feat>
</psychological_feature>
</act>
</action>
</event>
</accomplishment>
 by a sufficiently ingenious attacker, allowing control of the "random values" used by the cryptography.  </p>
<p>

However, with sufficient care, a system can be designed that produces cryptographically secure random numbers from the sources of randomness available in a modern computer. The basic design is to maintain an "entropy pool" of random bits that are assumed to be unknown to an attacker.  New randomness is added whenever available (for example, when the user hits a key) and an estimate of the number of bits in the pool that cannot be known to an attacker is kept. Some of the strategies in use include:</p>
<p>

<list>
<entry level="1" type="bullet">

 When random bits are requested, return that many bits derived from the entropy pool (by a cryptographic hash function, say) and decrement the estimate of the number of random bits remaining in the pool.  If not enough unknown bits are available, wait until enough are available.  This is the top-level design of the "<link xlink:type="simple" xlink:href="../128/776128.xml">
/dev/random</link>" device in Linux, written by <person wordnetid="100007846" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../724/1034724.xml">
Theodore Ts'o</link></person>
 and used in many other Unix-like operating systems. It provides  high-quality random numbers so long as the estimates of the input randomness are sufficiently cautious.  The Linux "/dev/urandom" device is a simple modification which disregards estimates of input randomness, and is therefore rather less likely to have high entropy as a result.</entry>
<entry level="1" type="bullet">

 Maintain a <link xlink:type="simple" xlink:href="../007/49007.xml">
stream cipher</link> with a key and <link xlink:type="simple" xlink:href="../971/105971.xml">
IV</link> obtained from an entropy pool.  When enough bits of entropy have been collected, replace both key and IV with new random values and decrease the estimated entropy remaining in the pool.  This is the approach taken by the <artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<apparatus wordnetid="102727825" confidence="0.8">
<generator wordnetid="103434188" confidence="0.8">
<equipment wordnetid="103294048" confidence="0.8">
<link xlink:type="simple" xlink:href="../416/74416.xml">
yarrow</link></equipment>
</generator>
</apparatus>
</instrumentality>
</artifact>
 library. It provides resistance against some attacks and conserves hard-to-obtain entropy.</entry>
</list>
</p>

</sec>
<sec>
<st>
 Problems </st>
<p>

It is very easy to misconstruct hardware or software devices which attempt to generate random numbers.  Also, most 'break' silently, often producing decreasingly random numbers as they degrade. A physical example might be the rapidly decreasing radioactivity of the smoke detectors mentioned earlier. Failure modes in such devices are plentiful and are complicated, slow, and hard to detect.</p>
<p>

Because many entropy sources are often quite fragile, and fail silently, statistical tests on their output should be performed continuously. Many, but not all, such devices include some such tests into the software that reads the device.</p>
<p>

Just as with other components of a cryptosystem, a software random number generator should be designed to resist certain attacks. Defending against these attacks is difficult. <it>See:</it> <link xlink:type="simple" xlink:href="../124/1250124.xml">
random number generator attack</link>. </p>

<ss1>
<st>
 Estimating entropy </st>

<p>

There are mathematical techniques for estimating the <link xlink:type="simple" xlink:href="../445/15445.xml">
entropy</link> of a sequence of symbols. None are so reliable that their estimates can be fully relied upon; there are always assumptions which may be very difficult to confirm. These are useful for determining if there is enough entropy in a seed pool, for example, but they cannot, in general, distinguish between a true random source and a pseudo-random generator.</p>

</ss1>
<ss1>
<st>
 Performance checks </st>

<p>

Hardware random number generators should be constantly monitored for proper operation. RFC 4086 and <link xlink:type="simple" xlink:href="../113/11113.xml">
FIPS</link> <standard wordnetid="107260623" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<link xlink:type="simple" xlink:href="../324/1539324.xml">
Pub 140-2</link></activity>
</procedure>
</system_of_measurement>
</psychological_feature>
</act>
</event>
</standard>
 include tests which can be used for this. Also see the documentation for the New Zealand cryptographic software library <link xlink:type="simple" xlink:href="../323/8028323.xml">
cryptlib</link>. </p>
<p>

Since many practical designs rely on a hardware source as an input, it will be useful to at least check that the source is still operating. Statistical tests can often detect failure of a noise source, such as a radio station transmitting on a channel thought to be empty, for example. Noise generator output should be sampled for testing before being passed through a "whitener." Some whitener designs can pass statistical tests with no random input. While detecting a large deviation from perfection would be a sign that a true random noise source has become degraded, small deviations are normal and can be an indication of proper operation. Correlation of bias in the inputs to a generator design with other parameters (e.g., internal temperature, bus voltage) might be additionally useful as a further check. Unfortunately, with currently available (and foreseen) tests, passing such tests is not enough to be sure the output sequences are random. A carefully chosen design, verification that the manufactured device implements that design and continuous physical security to insure against tampering may all be needed in addition to testing for high value uses.</p>

</ss1>
</sec>
<sec>
<st>
 See also </st>
<p>

<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../524/45524.xml">
Pseudorandom number generator</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../939/2736939.xml">
Random number generator</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../939/2736939.xml">
Random number generation</link></entry>
<entry level="1" type="bullet">

 <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../292/18362292.xml">
Randomness extractor</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../523/19196523.xml">
Randomness</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../766/886766.xml">
Bell test experiments</link></entry>
<entry level="1" type="bullet">

 <link>
ERNIE</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../930/379930.xml">
Lottery machine</link></entry>
<entry level="1" type="bullet">

 <physical_entity wordnetid="100001930" confidence="0.8">
<expert wordnetid="109617867" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<cryptanalyst wordnetid="109981540" confidence="0.8">
<specialist wordnetid="110631941" confidence="0.8">
<intellectual wordnetid="109621545" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<decoder wordnetid="109995398" confidence="0.8">
<link xlink:type="simple" xlink:href="../988/12579988.xml">
Peter Gutmann</link></decoder>
</scientist>
</causal_agent>
</intellectual>
</specialist>
</cryptanalyst>
</person>
</expert>
</physical_entity>
 of the <university wordnetid="108286163" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../456/277456.xml">
University of Auckland</link></university>
 has produced an extensive analysis of "random number" generation with computers (and of several actual designs) in the documentation for the <it>cryptlib</it> cryptographic tool kit.</entry>
</list>
</p>

</sec>
<sec>
<st>
 External links </st>
<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.ietf.org/rfc/rfc4086.txt">
RFC 4086 on Randomness Recommendations for Security</weblink> (Replaces earlier RFC 1750.)</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://csrc.nist.gov/rng/rng2.html">
 <it>A Statistical Test Suite for the Validation of Random Number Generators and Pseudo Random Number Generators for Cryptographic Applications''</it></weblink> <link xlink:type="simple" xlink:href="../888/21888.xml">
NIST</link> Special Publication 800-22</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.americanscientist.org/template/AssetDetail/assetid/20829/page/3">
An article on the history of generating random numbers</weblink> at the American Scientist Online.</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://download.intel.com/design/chipsets/rng/CRIwp.pdf">
White paper</weblink> from <link xlink:type="simple" xlink:href="../617/14617.xml">
Intel</link>  on the Intel hardware Random Number Generator built into Pentium family CPUs (after the PIII)</entry>
</list>
</p>

<ss1>
<st>
 Code </st>

<p>

<list>
<entry level="1" type="bullet">

 Theodore Ts'o&#32;(November 1995).&#32;"<it><weblink xlink:type="simple" xlink:href="http://www.cs.berkeley.edu/~daw/rnd/linux-rand">
random.c -- A strong random number generator</weblink></it>".</entry>
<entry level="1" type="bullet">

 Pars Mutaf&#32;(February 2006).&#32;"<it><weblink xlink:type="simple" xlink:href="http://www.freewebs.com/pmutaf/iwrandom.html">
True random numbers from Wi-Fi background noise</weblink></it>". &#32;Retrieved on <link>
2007-04-16</link>.</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.vanheusden.com/ved">
video_entropyd</weblink> (Randomness from video)</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.vanheusden.com/aed">
audio_entropyd</weblink> (Randomness from audio)</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://search.cpan.org/~gary/Math-TrulyRandom-1.0/TrulyRandom.pod">
Math::TrulyRandom</weblink>  (<link xlink:type="simple" xlink:href="../136/528136.xml">
Perl module</link> that claims to generate actual random numbers from interrupt timing discrepancies)</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.av8n.com/turbid/paper/turbid.htm">
Turbid - High-Entropy Randomness Generator</weblink> John S. Denker</entry>
</list>
</p>

</ss1>
</sec>
<sec>
<st>
 References </st>

<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.rand.org/publications/classics/randomdigits/">
A Million Random Digits with 100,000 Normal Deviates</weblink> by the <link xlink:type="simple" xlink:href="../944/214944.xml">
RAND Corporation</link></entry>
<entry level="1" type="bullet">

 <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../072/49072.xml">
Francis Galton</link></scientist>
</person>
. "Dice for statistical experiments", <it>Nature</it> 42:13-14, 1890. <it>(Facsimile at: <weblink xlink:type="simple" xlink:href="http://www.mugu.com/galton/statistician.html">
http://www.mugu.com/galton/statistician.html</weblink>)''</it></entry>
</list>
</p>



</sec>
</bdy>
</primitive>
</article>
