<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 17.04.2009 03:43:43[mciao0825] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>MUSE QoS solution</title>
<id>16636820</id>
<revision>
<id>244196697</id>
<timestamp>2008-10-09T19:10:48Z</timestamp>
<contributor>
<username>Gtstricky</username>
<id>5617557</id>
</contributor>
</revision>
<categories>
<category>Streaming</category>
<category>Proposed deletion as of 9 October 2008</category>
<category>Network performance</category>
<category>Internet architecture</category>
<category>All articles proposed for deletion</category>
<category>Teletraffic</category>
<category>Communication engineering</category>
</categories>
</header>
<bdy>
<p>

<table class="metadata plainlinks ambox ">
<row>
<col>

ambox-delete" style=""</col>
</row>
<row>
<col style="border: none; padding: 0px; width: 1px;"></col>
<col style="" class="mbox-text">
 It is proposed that this article be &#32;because of the following concern:
<indent level="1">

</indent>
Fails  guidelines.<p>

If you can address this concern by , , ,  or  the page, <b>please <weblink xlink:type="simple" xlink:href="http://localhost:18088/wiki/index.php?title=MUSE_QoS_solution&amp;action=edit">
edit this page</weblink></b> and do so. You may remove this message if you improve the article or otherwise object to its deletion for any reason. To avoid confusion, it helps to explain why you object to the deletion, either in the  or on the . If this template is removed, it should not be replaced.</p>
<p>

<b>The article may be deleted without further notice since this message has remained in place for five days.</b>Expired prod, concern: Fails  guidelines.
This template was added <b>2008-10-09 17:10</b>; five days from then is <b>2008-10-14 17:10</b>.
<indent level="1">

Expired [[WP:PROD|prod]], concern was: Fails &#91;&#91;WP:N&#124;notability&#93;&#93; guidelines. (<weblink xlink:type="simple" xlink:href="http://localhost:18088/wiki/index.php?title=MUSE_QoS_solution&amp;wpReason=Expired+%5B%5BWP%3APROD%7CPROD%5D%5D%2C+concern+was%3A+Fails+%5B%5BWP%3AN%7Cnotability%5D%5D+guidelines.&amp;action=delete">
delete</weblink>)
</indent>

If you created the article, please don't take offense. Instead, consider improving the article so that it is acceptable according to the .</p>
<p>

<weblink xlink:type="simple" xlink:href="http://localhost:18088/wiki/index.php?title=MUSE_QoS_solution&amp;action=history">
Author(s)</weblink> notification template:  ~~~~</p>

</col>
</row>
</table>
</p>

<p>

MUSE advocates the introduction of <link xlink:type="simple" xlink:href="../315/25315.xml">
QoS</link> into <message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<link xlink:type="simple" xlink:href="../323/15323.xml">
IP</link></rule>
</direction>
</protocol>
</message>
 networks as this allows better resource utilization while at the same time it allows to serve multiple and different applications with the transport quality they actually need.</p>
<p>

The solution needs to be able to offer quantitative QoS support for some services and qualitative for others, to support a retail/wholesale split in the QoS business model, to provide <link xlink:type="simple" xlink:href="../558/298558.xml">
upstream</link> QoS, especially across the access link, and to support multiple service edges.</p>
<p>

The usage of at least four traffic classes (<link xlink:type="simple" xlink:href="../767/25767.xml">
real-time</link>, <information wordnetid="105816287" confidence="0.8">
<datum wordnetid="105816622" confidence="0.8">
<link xlink:type="simple" xlink:href="../533/2761533.xml">
streaming</link></datum>
</information>
, <link xlink:type="simple" xlink:href="../409/212409.xml">
transactional</link> and <link xlink:type="simple" xlink:href="../141/2311141.xml">
best-effort</link>) is recommended by MUSE as the way for differentiating traffic whereas keeping the <link xlink:type="simple" xlink:href="../529/185529.xml">
scalability</link> of the network.</p>
<p>

MUSE recommends a user-centric approach where classification of traffic into traffic classes is a responsibility of the user, although it is still expected to be often delegated to the providers. Traffic policing is recommended to be used for ensuring that the usage of each traffic class does not exceed what has been planned, agreed or contracted.</p>

<sec>
<st>
 Architectural Options </st>

<p>

There are some basic questions that need answering before defining the MUSE QoS solution:</p>
<p>

<list>
<entry level="1" type="bullet">

 <b>How to differentiate traffic?</b></entry>
</list>

MUSE recommends simple traffic differentiation (i.e. <link>
DiffServ</link>) as one of the basic <link xlink:type="simple" xlink:href="../315/25315.xml">
QoS</link> techniques. However the differentiation should be done in such a way that it does not impose a heavy burden in terms of complexity and performance. Therefore, MUSE advocates using a limited set of traffic classes (e.g. four classes) inside the <link xlink:type="simple" xlink:href="../183/810183.xml">
access</link> and <message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<link xlink:type="simple" xlink:href="../952/1952952.xml">
aggregation</link></rule>
</direction>
</protocol>
</message>
 networks.</p>
<p>

<list>
<entry level="1" type="bullet">

 <b>Who is responsible for the classification of the traffic?</b></entry>
</list>

The nature and importance of the traffic should be taken into consideration in assigning the responsibility to classify traffic, and these aspects are better known to the users of the network (<link xlink:type="simple" xlink:href="../770/543770.xml">
Residential</link>, <link xlink:type="simple" xlink:href="../485/7485.xml">
Corporate</link>, <link xlink:type="simple" xlink:href="../245/100245.xml">
Service Providers</link>, Packagers, etc). Indeed, classification of traffic into traffic classes should be done before the ingress point of the network acknowledging the right of the users to decide this and this is the only way to guarantee QoS on all the network segments.</p>
<p>

However, as most users are laymen and do not know how or not want to make this kind of decisions, it is expected that most of them would delegate these decisions to the network as part of the function of users’ preferences. Note also that, whereas it is legitimate to try to offer this capability as an added value so that network users can be liberated from taking decisions, it is also true that some users could prefer to keep the control, and hence this model should not be imposed but offered as a possibility.</p>
<p>

<list>
<entry level="1" type="bullet">

 <b>How is QoS requested?</b></entry>
</list>

Requesting QoS, once a <link>
DiffServ</link> approach has been selected, is implicit to the fact of belonging to a given traffic class, as the network will normally define a set of constraints (e.g.  a given maximum mean <link xlink:type="simple" xlink:href="../290/272290.xml">
bitrate</link> per traffic class) for using the different available traffic classes on a per user basis. This will basically depend on the physical constraints of the access technology and on the contract negotiated with the user. Verifying that the constraints for using the traffic classes are being fulfilled by the users is part of the policy enforcement, and this should ideally be done at the ingress points of the network. Note that these constraints are expected to be rather static in time, although they may be altered upon previous negotiation between the user and the network.
Additionally, explicit guarantees per session can be provided to some services by means of a <link xlink:type="simple" xlink:href="../209/221209.xml">
CAC</link> (Call/Connection Admission Control) system so that service session requests are accepted or rejected <b>based on the availability of requested network resources for the traffic class applicable to the session</b>. Such a CAC system will receive explicit requests through application’s own <signal wordnetid="106791372" confidence="0.8">
<link xlink:type="simple" xlink:href="../703/41703.xml">
signalling</link></signal>
 (e.g. in the <message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<standard wordnetid="107260623" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<request wordnetid="106513366" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../702/28702.xml">
Session Description Protocol</link></system_of_measurement>
</request>
</rule>
</direction>
</standard>
</protocol>
</message>
) or from <link xlink:type="simple" xlink:href="../154/165154.xml">
application servers</link>.</p>
<p>

<list>
<entry level="1" type="bullet">

 <b>How are the resources provided?</b></entry>
</list>

The goal of CAC is to verify in real time that there are available resources enough for satisfying the QoS guarantees. In this sense, admission control has a complementary role to network <link xlink:type="simple" xlink:href="../061/1577061.xml">
dimensioning</link>, which should have provided the necessary resources in advance. Note that QoS should be largely achieved by the correct network dimensioning. Even with CAC, if the network is largely underprovisioned, a significant number of session requests will be denied, thereby leading to a poor customer experience. CAC is therefore not a substitute for good network dimensioning, which is the basic means of providing the necessary resources for QoS support.</p>

<ss1>
<st>
 CAC Options </st>

<p>

<list>
<entry level="1" type="bullet">

 <b>Central CAC:</b></entry>
</list>

A central CAC system is where all <link xlink:type="simple" xlink:href="../209/221209.xml">
CAC</link> decisions are made at the same place. The central CAC system has a complete view of the resources of the appropriate parts of the network. All call admission requests have to be signalled to this central system. For each and every call (signalled) request or (non-signalled) detection, the central CAC system is consulted, which, on the basis of resource <link xlink:type="simple" xlink:href="../760/40760.xml">
availability</link>, decides whether to allow or block the requested call. This decision is sent to the boundary node where enforcement may be done.
The main advantage of a central CAC system is that it is simple to manage. However, it requires the exchange of <signal wordnetid="106791372" confidence="0.8">
<link xlink:type="simple" xlink:href="../703/41703.xml">
signalling</link></signal>
 messages, which may compromise the <link xlink:type="simple" xlink:href="../529/185529.xml">
scalability</link> and adds <link xlink:type="simple" xlink:href="../012/41012.xml">
delay</link> in the decision process.</p>
<p>

<list>
<entry level="1" type="bullet">

 <b>Local CAC:</b></entry>
</list>

A local CAC system is where uncoordinated CAC decisions are made at the appropriate nodes on the basis of the state of a local link. For a CAC decision to be made locally and independently of other nodes, it is necessary that there be a local view of the availability of network resources that can be used by that node. To do that, it is necessary to partition network resources for each traffic class and to <link xlink:type="simple" xlink:href="../428/267428.xml">
allocate</link> them to the different nodes.
Resource partitioning naturally leads to a reduction in the potential <link xlink:type="simple" xlink:href="../389/41389.xml">
multiplexing</link> gains as unused resources allocated to a given node can not be used by another node or by another traffic class at the same node. In order to avoid this, partitions should be updated on a regular basis by a central authority that has a historic and global view of network resource usage or when a threshold associated to a given allocation is exceeded. Any re-allocation of resources should take into account the commercial agreements (<link xlink:type="simple" xlink:href="../021/775021.xml">
SLA</link>s) between network operators and service providers, which might specify bandwidth on a link-by-link basis.</p>
<p>

A local CAC system reduces both the time to make decisions and the exchange of signalling messages. It can take advantage of direct interaction with <link xlink:type="simple" xlink:href="../654/236654.xml">
IGMP</link> messages, hence offering a way of implementing <link xlink:type="simple" xlink:href="../209/221209.xml">
CAC</link> for <link xlink:type="simple" xlink:href="../407/20407.xml">
multicast</link> traffic. However, its implementation is complex and must be carefully done in order to avoid problems such as the lack of information <link xlink:type="simple" xlink:href="../522/274522.xml">
consistency</link>.</p>

</ss1>
</sec>
<sec>
<st>
 MUSE QoS Architecture </st>

<p>

A diagram of the MUSE <link xlink:type="simple" xlink:href="../315/25315.xml">
QoS</link> architecture is described in Figure 1.</p>
<p>

<image location="center" width="600px" src="MUSE_QoS_architecture.GIF" type="thumb">
<caption>

 Figure 1: MUSE QoS architecture
</caption>
</image>
</p>
<p>

Traffic classes, selective <link xlink:type="simple" xlink:href="../209/221209.xml">
CAC</link> and appropriate network <link xlink:type="simple" xlink:href="../061/1577061.xml">
dimensioning</link> are the keystones of the solution.</p>
<p>

While <b>traffic class differentiation</b> will be used for most of the traffic keeping the solution simple and scalable, per flow differentiation can also be supported for certain types of traffic in the appropriate parts of the network. A small set of traffic classes will be used to deal with most of the traffic, establishing simple <link xlink:type="simple" xlink:href="../851/4941851.xml">
scheduling</link> algorithms in the network elements to differentiate them.</p>
<p>

Traffic classification will normally be performed by the traffic originator, unless delegated to the network operator. However, the network will ensure that the load of each traffic class is below the level that has been used for dimensioning by means of <b>policing the different traffic classes on a per subscriber basis</b>. This traffic policing should be done as close to the user as possible in order to react faster, to guarantee enough network resources, to protect sensitive traffic, etc; that is, at the access nodes (<system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../948/2166948.xml">
AN</link></instrumentality>
</artifact>
</system>
). The policies could be statically provisioned for common <link xlink:type="simple" xlink:href="../770/543770.xml">
residential</link> services. However, personalised policies could be applied in association with the <link xlink:type="simple" xlink:href="../967/47967.xml">
authentication</link> process, so that richer and more dynamic services could be supported. Inside the network, <b>nodes must have dedicated <link xlink:type="simple" xlink:href="../265/25265.xml">
queues</link> per traffic class at the output ports</b>, which will be attended by a scheduling mechanism with <link xlink:type="simple" xlink:href="../485/24485.xml">
strict priority</link> or <link xlink:type="simple" xlink:href="../579/7460579.xml">
weighted</link> mechanisms.</p>
<p>

CAC is not necessary for all services, but only for those featuring difficulty in demand prediction and require a large amount of resource. This is likely to happen on the access links, because of their relatively high associated cost, and especially for the <link xlink:type="simple" xlink:href="../558/298558.xml">
upstream</link> traffic when using asymmetric access technologies. It may also happen on <message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<link xlink:type="simple" xlink:href="../952/1952952.xml">
aggregate</link></rule>
</direction>
</protocol>
</message>
 links which carry a mix of basic <link xlink:type="simple" xlink:href="../539/14539.xml">
Internet</link> traffic and <link xlink:type="simple" xlink:href="../441/32441.xml">
video</link>. Hence, <b>CAC is recommended to be applied at least</b> for protecting the traffic of the most sensitive services; that is, <link xlink:type="simple" xlink:href="../767/25767.xml">
real-time</link> or loss-sensitive ones, and especially those that require a relatively big amount of bandwidth (e.g. <message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<link xlink:type="simple" xlink:href="../225/1077225.xml">
IPTV</link></rule>
</direction>
</protocol>
</message>
 and <link xlink:type="simple" xlink:href="../143/147143.xml">
VoD</link>).</p>
<p>

<b>Appropriate network dimensioning</b> will reduce the chances of having <link xlink:type="simple" xlink:href="../949/40949.xml">
congestion</link> problems and hence will diminish the need for widespread deployment and usage of resource reservation and admission control mechanisms; these can be difficult to deploy as they add the need for <signal wordnetid="106791372" confidence="0.8">
<link xlink:type="simple" xlink:href="../703/41703.xml">
signalling</link></signal>
 and stateful management at network elements. Of course, an appropriate network dimensioning requires an awareness of possible traffic evolution patterns in the network. Hence, traffic <link xlink:type="simple" xlink:href="../751/1663751.xml">
monitoring</link> and reporting per node are required.</p>

<ss1>
<st>
 Traffic classes </st>

<p>

A natural way to group <link xlink:type="simple" xlink:href="../322/30322.xml">
telecommunication</link> services is as a function of the type of traffic they generate. The main differentiators identified in MUSE are:</p>
<p>

<list>
<entry level="1" type="bullet">

 <b>Elasticity level (elastic/inelastic):</b> Elasticity level refers to the level up to which the traffic’s original shape can be modified. Not all applications have the same elasticity level. Normally, communication services aspire to keep both data and temporal integrity. In order to establish the elasticity level of a given service/application, it is useful to assess which of both integrities is more important. So, elastic and inelastic applications (or traffic generated by those applications) can be distinguished as a function of which of these is more relevant. If <link xlink:type="simple" xlink:href="../995/40995.xml">
data integrity</link> is more relevant (e.g. a file transfer), lost or corrupted data have to be retransmitted, the traffic is considered elastic. If temporal integrity is the main concern (e.g. a voice call), there is normally no chance of retransmitting lost or corrupted data, so this type of service is characterised as having inelastic traffic. For some services both data and temporal integrity are important (e.g. certain interactive games).</entry>
<entry level="1" type="bullet">

 <b>Interactivity level (interactive/non-interactive):</b> The interactivity level describes the time integrity in both directions of communication. For instance, elastic traffic with a high interactivity level is generated by an application where both data integrity and temporal integrity are very relevant (for instance, <link xlink:type="simple" xlink:href="../611/9611.xml">
e-commerce</link>, etc).</entry>
<entry level="1" type="bullet">

 <b>Service availability (standard/high):</b> <link xlink:type="simple" xlink:href="../760/40760.xml">
Availability</link> is a very important consideration, and of course must be used as an attribute to identify the different traffic classes. Indeed, it is one of the most important considerations to take into account in <link xlink:type="simple" xlink:href="../967/40967.xml">
core</link> networks (which are not in the scope of MUSE).</entry>
</list>
</p>
<p>

The following table provides a mapping between these concepts and the <link xlink:type="simple" xlink:href="../836/14836.xml">
ITU</link> and <standard wordnetid="107260623" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../301/397301.xml">
3GPP</link></system_of_measurement>
</standard>
 terminology.</p>
<p>

<table style="margin: 0 auto; text-align: center;" class="wikitable">
<row align="center">
<header>
Traffic class</header>
<header>
Terminology proposed in MUSE</header>
<header>
3GPP</header>
<header>
ITU</header>
</row>
<row>
<col>
Elastic non-interactive</col>
<col>
Best-effort</col>
<col>
Background</col>
<col>
Non-critical</col>
</row>
<row>
<col>
Elastic interactive</col>
<col>
Transactional</col>
<col>
Interactive</col>
<col>
Responsive</col>
</row>
<row>
<col>
Inelastic non-interactive</col>
<col>
Streaming</col>
<col>
Streaming</col>
<col>
Timely</col>
</row>
<row>
<col>
Inelastic interactive</col>
<col>
Real Time</col>
<col>
Conversational</col>
<col>
Interactive</col>
</row>
</table>
</p>
<p>

It is recommended that all network nodes support at least the 4 classes of services defined in the previous table. Every operator can obviously provide additional classes of services.</p>
<p>

Inside the network, nodes will have dedicated <link xlink:type="simple" xlink:href="../265/25265.xml">
queues</link> per traffic class at the output ports, which will be served by Strict Priority (<link xlink:type="simple" xlink:href="../485/24485.xml">
SP</link>) and/or <link xlink:type="simple" xlink:href="../579/7460579.xml">
Weighted Fair Queuing</link> (WFQ) scheduling mechanisms.</p>

</ss1>
<ss1>
<st>
 Selective CAC </st>

<p>

In large <link xlink:type="simple" xlink:href="../183/810183.xml">
access</link> network domains, there could be a <link xlink:type="simple" xlink:href="../529/185529.xml">
scalability</link> problem when implementing signalled and central <link xlink:type="simple" xlink:href="../209/221209.xml">
CAC</link> for each and every flow. Hence, MUSE recommends the use of central CAC for the (small) subset of services that actually need it, and only in those parts of the network where the network operator has identified a potential <link xlink:type="simple" xlink:href="../061/1577061.xml">
dimensioning</link> problem, whereas local CAC or no CAC can be used for the rest of the traffic.</p>
<p>

A mechanism is needed to segregate the network resources into:</p>
<p>

<list>
<entry level="1" type="bullet">

 A set of resources that can be used by services that need no CAC, and are policed only on a traffic class basis so that a maximum class <link xlink:type="simple" xlink:href="../827/15612827.xml">
bandwidth</link> cannot be exceeded.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 A set of resources for services that are controlled by a central system on a per <link xlink:type="simple" xlink:href="../531/3366531.xml">
call</link>/<message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<link xlink:type="simple" xlink:href="../452/865452.xml">
session</link></rule>
</direction>
</protocol>
</message>
 basis with explicit <signal wordnetid="106791372" confidence="0.8">
<link xlink:type="simple" xlink:href="../703/41703.xml">
signalling</link></signal>
.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 A set of resources for services that are controlled by a local CAC system on a per call/session basis with or without explicit signalling.</entry>
</list>
</p>
<p>

The next section describes the mechanism selected by MUSE to segregate the network resources.</p>
<p>

Note that a given set of resources can either be completely dedicated to traffic subject to CAC or, to improve network utilisation, may also be shared by traffic not subject to CAC. In the case of sharing, prioritisation mechanisms will be required in addition to CAC. Depending on the network architecture and dimensioning, CAC may only be needed for certain links within an <link xlink:type="simple" xlink:href="../652/5652.xml">
end-to-end</link> path.</p>
<p>

In addition to any admission control performed by the network operator, it is the responsibility of the service provider, through a separate service admission control, to check whether necessary resources are still available on the services platform and at the traffic classes contracted to the network operator (in a <link xlink:type="simple" xlink:href="../103/63103.xml">
wholesale</link> scenario).</p>

</ss1>
<ss1>
<st>
 Provisioning scenario for co-ordinating central and local CAC </st>

<p>

MUSE recommends a “provisioning” scenario where the central <link xlink:type="simple" xlink:href="../209/221209.xml">
CAC</link>, which has a view of all network resource usage, is able to allocate to a local CAC a certain amount of resources that will then be managed locally. A scheme of this provisioning scenario can be seen in Figure 2.</p>
<p>

<image location="center" width="400px" src="MUSE_Provisioning_scenario.GIF" type="thumb">
<caption>

 Figure 2: MUSE provisioning scenario
</caption>
</image>
</p>
<p>

Simpler scenarios could be designed where each CAC system just controls a <artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<electrical_device wordnetid="103269401" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<circuit wordnetid="103033362" confidence="0.8">
<link xlink:type="simple" xlink:href="../860/293860.xml">
dedicated</link></circuit>
</device>
</electrical_device>
</instrumentality>
</artifact>
 set of resources and no interrelation is needed between them. However, the main drawback of such an approach is that optimization of resource usage is difficult to achieve.</p>
<p>

Within this approach, the central CAC regularly monitors the usage of local resources at the Access Nodes (<system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../948/2166948.xml">
AN</link></instrumentality>
</artifact>
</system>
) and adjusts the resources allocated to the local CAC entities if needed.</p>
<p>

The usage of <link xlink:type="simple" xlink:href="../579/7460579.xml">
WFQ</link> is recommended as <link xlink:type="simple" xlink:href="../851/4941851.xml">
scheduling</link> algorithm in those links where capacity is high enough, as it helps to provision the required bandwidth for each traffic class by appropriately setting the different weights. However, use of <link xlink:type="simple" xlink:href="../485/24485.xml">
SP</link> is recommended for guaranteeing a low queuing <link xlink:type="simple" xlink:href="../012/41012.xml">
delay</link> for <link xlink:type="simple" xlink:href="../130/2728130.xml">
real time</link> traffic in those links where capacity is relatively low, whereas WFQ can be used for sharing the remaining bandwidth among the rest of classes.</p>
<p>

This approach is recommended as it gives more flexibility to share resources between central and local CAC, and allows more reactivity if a significant evolution occurs between central and local traffic proportions. This mechanism could be used to adjust the threshold for local resources over a day, allowing, for instance, attractive prices on <link xlink:type="simple" xlink:href="../143/147143.xml">
VoD</link> when <link xlink:type="simple" xlink:href="../831/29831.xml">
TV</link> bandwidth is not heavily used, or even close to real-time when local allocated resources are exhausted while there are still global available resources, so that resource allocation is kept to an optimum.</p>
<p>

More complex and dynamic scenarios can be envisioned where local CAC entities are able to request additional resources to the central CAC system in a <link xlink:type="simple" xlink:href="../550/14346550.xml">
proactive</link> way. However, the added complexity does not justify going for such approaches in the medium term.</p>

<ss2>
<st>
 Central CAC implementation </st>

<p>

Central <link xlink:type="simple" xlink:href="../209/221209.xml">
CAC</link> is usually considered as the simplest approach, and hence is in principle recommended to be used for applications requiring explicit CAC (e.g. <link xlink:type="simple" xlink:href="../143/147143.xml">
VoD</link>) where neither <link xlink:type="simple" xlink:href="../529/185529.xml">
scalability</link> nor setup <link xlink:type="simple" xlink:href="../012/41012.xml">
delay</link>s are special concerns.</p>
<p>

A central CAC entity has a single but complete view of the <link xlink:type="simple" xlink:href="../760/40760.xml">
availability</link> of all network resources in a network area. This is usually done by listening to <link xlink:type="simple" xlink:href="../632/159632.xml">
link-state</link> routing protocols running on the network, in conjunction with a <link xlink:type="simple" xlink:href="../377/8377.xml">
database</link> containing the installed network elements and the installed bandwidth per interface. The admission control entity receives all the requests for starting a service and, since it has a current view of the status of the network, it decides whether it is possible or not to accept the request. Once this decision has been made, resource reservation can be done.</p>
<p>

However, for the admission control of <link xlink:type="simple" xlink:href="../407/20407.xml">
multicast</link> flows, a <link xlink:type="simple" xlink:href="../488/402488.xml">
centralized</link> implementation of the CAC function is not appropriate. A centralized admission control would have to decide if a new requested channel could be delivered or not each time it receives a request to join a multicast channel. There are three problems with this:</p>
<p>

<list>
<entry level="1" type="bullet">

 The first is the sheer volume of requests which arise when people are channel zapping.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 The second problem is that the multicast protocol (i.e. <link xlink:type="simple" xlink:href="../654/236654.xml">
IGMP</link>) has no mechanism (i.e. no parameter in the message) to convey the required bandwidth, which means that there has to be a local association between bandwidth and channel.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 Finally in most cases the stream join will occur (automatically) closer to the end-user than the location of the admission control system, so there is no mechanism for the CAC system to actually prevent the join.</entry>
</list>
</p>
<p>

Two of these problems can be solved by a <link xlink:type="simple" xlink:href="../501/8501.xml">
distributed</link> CAC system, but there will still be a need to maintain a mapping of multicast group addresses to channel bandwidth.</p>

<ss3>
<st>
 Central CAC based on Impact Matrixes </st>

<p>

Within MUSE project, it has been proposed the analysis of a centralized <link xlink:type="simple" xlink:href="../209/221209.xml">
CAC</link> mechanism using Impact Matrixes.</p>
<p>

An <b>impact matrix</b> shows the different types of interference (or impact) that a concrete network traffic (pre-computed <link xlink:type="simple" xlink:href="../652/5652.xml">
end-to-end</link> path) causes in the rest, in terms of available bandwidth. We consider three types of impact:
<list>
<entry level="1" type="bullet">

 <b>Impact itself</b>: it is the own interference over the considered traffic. </entry>
<entry level="1" type="bullet">

 <b>Direct impact</b>: represents the impact over the traffics whose links are totally included in the path of the considered traffic.</entry>
<entry level="1" type="bullet">

 <b>Indirect impact</b>: it is the impact over the traffics that include some links (not all) in the path of the considered traffic. </entry>
</list>
</p>
<p>

The size of an impact matrix is (number of network nodes)x(number of network nodes). Each matrix position represents a network traffic identifier.</p>
<p>

There are several steps for computing the impact matrixes:</p>
<p>

<list>
<entry level="1" type="bullet">

 We list all the link identifiers that every one of the traffics needs to pass through to reach the destination.</entry>
<entry level="1" type="bullet">

 We list the traffic identifiers that traverse every link in the network.</entry>
<entry level="1" type="bullet">

 We fill in the impact matrix for each traffic in the following way:</entry>
<entry level="3" type="bullet">

 For interference itself, we introduce a ‘P’ in the corresponding matrix position, that is, the position representing the considered traffic.</entry>
<entry level="3" type="bullet">

 We write a ‘D’ in the matrix positions representing the traffics suffering a direct impact (if exist) by the considered traffic.</entry>
<entry level="3" type="bullet">

 We must put an ‘I’ for the traffic identifiers that are indirectly impacted (if exist) by the considered traffic.</entry>
<entry level="3" type="bullet">

 Finally, the rest of matrix positions are filled in by zeros, for example, representing that there is not any type of interference over these traffics.</entry>
</list>
</p>
<p>

<b>How to use these impact matrixes for the admission control?</b></p>
<p>

Firstly, it is necessary to introduce the concept of <b>Acceptance Matrix</b>:
<list>
<entry level="3" type="bullet">

 It contains the minimum available bandwidth along the links that compound the path between every pair of network nodes, that is, the <link xlink:type="simple" xlink:href="../435/2207435.xml">
bottleneck</link> of each path.</entry>
</list>
</p>
<p>

Once this term has been defined, we must mention that the proposed admission control is carried out according the available bandwidth that the acceptance matrix indicates for each one of the traffics.</p>
<p>

The impact matrixes, once they have been built in the initialization phase, tell us how to modify/update each one of the acceptance matrix positions, that is, the available bandwidth for supporting future traffic requests.</p>
<p>

So, when the central CAC entity receives a traffic request from a network node, it has to carry out several steps:</p>
<p>

<list>
<entry level="1" type="bullet">

 First of all, it must check if the available capacity indicated in the acceptance matrix for the required traffic is enough for serving it. If not, the request is rejected. In affirmative case, the acceptance matrix must be updated in the appropriate form.</entry>
<entry level="1" type="bullet">

 The suitable way to modify the acceptance matrix is looking at the corresponding impact matrix for the required traffic:</entry>
<entry level="3" type="bullet">

 For the matrix positions containing a ‘P’, that is, the required traffic, the corresponding position in the acceptance matrix must be updated subtracting the demanded bandwidth.</entry>
<entry level="3" type="bullet">

 The same occurs for the matrix positions with a ‘D’. We must subtract the demanded capacity in the corresponding positions of the acceptance matrix.</entry>
<entry level="3" type="bullet">

 For each matrix position containing an ‘I’, we have to do the following:</entry>
<entry level="4" type="bullet">

 We must access to the impact matrix of the corresponding traffic identifier.</entry>
<entry level="4" type="bullet">

 Inside this matrix, we must pay attention in the matrix positions containing a ‘D’ and select the <b>minimum value</b> of capacity among them.</entry>
<entry level="4" type="bullet">

 The available bandwidth that we must assign in the acceptance matrix position corresponding to the traffic marked as an ‘I’ in the impact matrix of the required traffic is the <b>minimum value</b> obtained in the previous step.</entry>
</list>
</p>
<p>

Before it has been described the acceptance procedure of an incoming traffic request. Now, we present the release process of an established connection that is equivalent to the explained previously:</p>
<p>

<list>
<entry level="1" type="bullet">

 We must update the acceptance matrix according to the impact matrix of the released traffic:</entry>
<entry level="3" type="bullet">

 For the matrix positions containing a ‘P’, that is, the released traffic, the corresponding position in the acceptance matrix must be updated adding the released bandwidth.</entry>
<entry level="3" type="bullet">

 The same occurs for the matrix positions with a ‘D’. We must add the released capacity in the corresponding positions of the acceptance matrix.</entry>
<entry level="3" type="bullet">

 For each matrix position containing an ‘I’, we have to follow the similar steps described for the case of accepting a traffic request:</entry>
<entry level="4" type="bullet">

 We must access to the impact matrix of the corresponding traffic identifier.</entry>
<entry level="4" type="bullet">

 Inside this matrix, we must pay attention in the matrix positions containing a ‘D’ and select the <b>minimum value</b> of capacity among them.</entry>
<entry level="4" type="bullet">

 The available bandwidth that we must assign in the acceptance matrix position corresponding to the traffic marked as an ‘I’ in the impact matrix of the released traffic is the <b>minimum value</b> obtained in the previous step.</entry>
</list>
</p>
<p>

In further analysis, the four traffic classes proposed by MUSE will be considered.</p>

</ss3>
</ss2>
<ss2>
<st>
 Local CAC implementation </st>

<p>

Local <link xlink:type="simple" xlink:href="../209/221209.xml">
CAC</link> allows to significantly reduce complexity, <signal wordnetid="106791372" confidence="0.8">
<link xlink:type="simple" xlink:href="../703/41703.xml">
signalling</link></signal>
 exchanges and time required to provide a CAC answer.</p>
<p>

By using traffic classes, it is possible to decouple the checking of available resources into two parts: a CAC per traffic class, which consists of verifying that the traffic class involved in the session request has available resources, and a <link xlink:type="simple" xlink:href="../444/1585444.xml">
policing</link> of traffic classes.</p>
<p>

Note that local CAC can be performed independently in different nodes (i.e. RGW, <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../948/2166948.xml">
AN</link></instrumentality>
</artifact>
</system>
, <link xlink:type="simple" xlink:href="../866/3670866.xml">
EN</link>), so that a single reject decision is enough for denying the service request. In this way, local CAC can be deployed at those parts of the network where <link xlink:type="simple" xlink:href="../949/40949.xml">
congestion</link> is more likely to appear.</p>
<p>

Local CAC can easily handle <link xlink:type="simple" xlink:href="../407/20407.xml">
multicast</link> traffic (e.g. <message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<link xlink:type="simple" xlink:href="../225/1077225.xml">
IPTV</link></rule>
</direction>
</protocol>
</message>
), as it is possible to be locally aware of <link xlink:type="simple" xlink:href="../654/236654.xml">
IGMP</link> messages.</p>
<p>

This decoupling approach allows a positive local CAC decision made by a single node to be enough for guaranteeing that there will be available resources in the corresponding traffic class, provided that such a traffic class is dimensioned to be used at the maximum rate by every user. This is not a special concern for multicast traffic, as this does not depend on the number of users but on the number of channels that are being simultaneously watched. But this approach could also be followed for <link xlink:type="simple" xlink:href="../077/738077.xml">
unicast</link> traffic. By taking into account the statistical nature of the traffic generated by the services of a given traffic class, the amount of resources needed is reduced and <link xlink:type="simple" xlink:href="../529/185529.xml">
scalability</link> is improved.</p>
<p>

In addition, under congestion conditions, the network operator may decide to unilaterally vary the policing of the traffic classes, communicating to the local CAC entities the new limits for each traffic class so that the new conditions for using the traffic classes can be taken into account. Besides, traffic policing could be dynamically varied upon request from the network users provided that there are enough available resources in the network.</p>
<p>

Note that local CAC can be applied at the Residential <link xlink:type="simple" xlink:href="../556/1338556.xml">
Gateways</link>, independently of other CAC systems running in the network. This way, services that are not subject to CAC in the network could be delivered with <link xlink:type="simple" xlink:href="../315/25315.xml">
QoS</link> guarantees without the network being aware of such service sessions. However, the Residential Gateway should have awareness of those service sessions, by snooping the application signalling or by using service signatures provided by the service providers. This last approach is better, as it requires the cooperation of the service provider, which can provide also the parameters needed for evaluating the CAC, i.e. the effective bandwidth. It can also provide the necessary signalling messages for informing the service provider about the denial of service and/or the user when the Residential Gateway CAC decides to block the session.</p>

<ss3>
<st>
 CAC using Local Quotas </st>

<p>

In this case, within MUSE project it has been proposed an admission control (<link xlink:type="simple" xlink:href="../209/221209.xml">
CAC</link>) technique based on local quotas for accepting the incoming traffic requests. Although it considers a central system that computes these local quotas, we must mention that the operation of the proposed admission control technique is based on a local scheme, since each node in the network with admission control functions manage their assigned quotas locally, without intervention of the central system.</p>
<p>

We must start by defining what a <b>local quota</b> is:
<list>
<entry level="3" type="bullet">

 It is the assigned percentage of the total available <link xlink:type="simple" xlink:href="../827/15612827.xml">
bandwidth</link> in a node for a determined traffic in the network. This assigned amount of capacity can be managed locally by the node in order to accept or reject an incoming traffic request, without asking for permission for establishing it to the central system. This is possible because the assigned quotas for each one of the traffics take into account the minimum available bandwidth for the rest of traffics. So, if a node has enough capacity for serving a traffic request, this node can accept it guaranteeing that it is going to be established by all the pre-determined links successfully, that is, there is going to be available capacity enough along the pre-computed path for this traffic.</entry>
</list>
</p>
<p>

<b>Local quotas computation</b></p>
<p>

The local quotas computation process that is carried out by the central system is explained following:</p>
<p>

<list>
<entry level="1" type="bullet">

 Pre-compute the path or the route for each one of the possible traffics in the network.</entry>
<entry level="1" type="bullet">

 We list all the link identifiers that every one of the traffics needs to pass through to reach the destination.</entry>
<entry level="1" type="bullet">

 We list the traffic identifiers that traverse every link in the network.</entry>
<entry level="1" type="bullet">

 For each link in the network, we divide its total capacity among the traffics that traverse the link, in a uniform way.</entry>
<entry level="1" type="bullet">

 As a result of the previous step, we have assigned a certain bandwidth by link to every one of the traffics. So, we must establish as the <it>local quota</it> for a determined traffic the <it>minimum assigned one</it>.</entry>
</list>
</p>
<p>

Again, in further analysis, the four traffic classes proposed by MUSE will be taking into account.</p>

</ss3>
</ss2>
</ss1>
<ss1>
<st>
 Policy enforcement </st>

<p>

A policy is the combination of rules and services where rules define the criteria for resource access and usage.</p>
<p>

According to the Common Open Policy Service (<message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<link xlink:type="simple" xlink:href="../371/275371.xml">
COPS</link></rule>
</direction>
</protocol>
</message>
) terminology, three functional elements are defined for using policies in a network:</p>
<p>

<list>
<entry level="1" type="bullet">

 ‘<b>Policy Repository</b>’, which contains the policies that have to be applied in the network.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 ‘<b>Policy Decision Point</b>’ (PDP), which evaluate the policies upon a given request and notifies the decision to the corresponding Policy Enforcement Points. A <link xlink:type="simple" xlink:href="../209/221209.xml">
CAC</link> decision is an example of policy decision.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 ‘<b>Policy Enforcement Point</b>’ (PEP). The PEP is the place in the network where the policy decisions are actually enforced (e.g. <link xlink:type="simple" xlink:href="../684/40684.xml">
access control</link> and <link xlink:type="simple" xlink:href="../444/1585444.xml">
traffic policing</link>).</entry>
</list>
</p>
<p>

Traffic policing consists of verifying that a given traffic class does not exceed a certain profile. Enforcement of the allowed <link xlink:type="simple" xlink:href="../315/25315.xml">
QoS</link> policy (bandwidth, maximum size of packet, etc.) maybe required so that misbehaving traffic does not impact the QoS of the other users/classes. Protection can only be provided if such enforcement is done on a per user and per traffic class basis. Note that as a result of the policy enforcement, out of profile traffic could be dropped, remarked or delayed until it complies to the profile (i.e. <link xlink:type="simple" xlink:href="../669/242669.xml">
traffic shaping</link>).</p>
<p>

For the <link xlink:type="simple" xlink:href="../558/298558.xml">
upstream</link> traffic, it is recommended that the policy enforcement be done at the Access Nodes (<system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../948/2166948.xml">
AN</link></instrumentality>
</artifact>
</system>
). This will minimise the chances of misbehaving users altering the QoS of other users in the <message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<link xlink:type="simple" xlink:href="../952/1952952.xml">
aggregation</link></rule>
</direction>
</protocol>
</message>
 network. Otherwise, excessive traffic marked as high priority by some users may cause starvation of lower priority traffic of other users.</p>
<p>

However, for the <link xlink:type="simple" xlink:href="../551/298551.xml">
downstream</link> traffic, it is recommended that policy enforcement be done at the Edge Nodes (<link xlink:type="simple" xlink:href="../866/3670866.xml">
EN</link>) on aggregate of <link xlink:type="simple" xlink:href="../323/15323.xml">
IP</link> flows (i.e. traffic classes) in order to lower the processing power required at these nodes. This will not prevent a single misbehaving user from impacting the aggregate, but will limit any damage to that aggregate.</p>
<p>

In addition to the aggregate enforcement at the Edge Nodes for downstream traffic, it is recommended to have per user shaping of downstream traffic at the Access Node to prevent congestion in the <link xlink:type="simple" xlink:href="../718/285718.xml">
first mile</link>. Shaping is commonly done at the <link xlink:type="simple" xlink:href="../921/1770921.xml">
BRAS</link> in current architectures. However this is no longer viable in a <link xlink:type="simple" xlink:href="../783/5719783.xml">
multi-edge</link> architecture. The only point at which all the traffic for a given line comes together may be the Access node itself.</p>

</ss1>
<ss1>
<st>
 Coordination between Home Network – Access Network for QoS </st>

<p>

The link between the Residential <link xlink:type="simple" xlink:href="../556/1338556.xml">
Gateway</link> and the Access Node (<system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../948/2166948.xml">
AN</link></instrumentality>
</artifact>
</system>
) is usually the main <link xlink:type="simple" xlink:href="../435/2207435.xml">
bottleneck</link>, especially since its capacity cannot easily be increased. To solve the contest for bandwidth on this link, the usage of prioritization mechanisms for handling traffic classes is recommended. Additionally, <link xlink:type="simple" xlink:href="../444/1585444.xml">
traffic policing</link> can be used for avoiding starvation of lower priority traffic and fulfilling the usage limitations per traffic class.</p>
<p>

Classification of <link xlink:type="simple" xlink:href="../558/298558.xml">
upstream</link> traffic into the traffic classes, and its prioritization onto the access link will be realized by the RGW according to user preferences (note that these preferences can be delegated to the network operator or to any service provider, and that traffic could have been previously marked by a terminal). This classification can be done by identifying application signatures, by using predefined ports at the RGW, by evaluating the <link xlink:type="simple" xlink:href="../483/145483.xml">
Ethertype</link>, etc. The policing of upstream traffic will be done by the Access Node according to the rules defined above.</p>
<p>

Prioritization of <link xlink:type="simple" xlink:href="../551/298551.xml">
downstream</link> traffic per traffic class is made by the network according to the rules described in the user contracts (i.e. <link xlink:type="simple" xlink:href="../770/543770.xml">
residential</link> and <link xlink:type="simple" xlink:href="../485/7485.xml">
corporate</link> users, <link xlink:type="simple" xlink:href="../245/100245.xml">
service provider</link>s, etc). This is currently done at Edge Nodes (<link xlink:type="simple" xlink:href="../866/3670866.xml">
EN</link>). However, when having multiple Edge Nodes in the network, there is not a single point of control of downstream traffic except for the Access Node.</p>

</ss1>
</sec>
<sec>
<st>
 Conclusions </st>

<p>

MUSE advocates a pragmatic and simple way to provide services with <link xlink:type="simple" xlink:href="../315/25315.xml">
QoS</link> which is based mainly on traffic class <standard wordnetid="107260623" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../512/173512.xml">
differentiation</link></system_of_measurement>
</standard>
, selective <link xlink:type="simple" xlink:href="../209/221209.xml">
CAC</link> and appropriate network <link xlink:type="simple" xlink:href="../061/1577061.xml">
dimensioning</link>.</p>
<p>

MUSE recommends a user-centric approach where classification of traffic into traffic classes is a responsibility of the user even if it is expected to be normally delegated to the <link xlink:type="simple" xlink:href="../245/100245.xml">
provider</link>s. However, the network will ascertain that the usage of each traffic class does not exceed what has been planned, agreed or contracted by means of <link xlink:type="simple" xlink:href="../444/1585444.xml">
traffic policing</link>. For the <link xlink:type="simple" xlink:href="../558/298558.xml">
upstream</link> traffic, it is recommended that the policy enforcement be done at the <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../948/2166948.xml">
Access Nodes</link></instrumentality>
</artifact>
</system>
 per Traffic Class and per Access Line. However, for the <link xlink:type="simple" xlink:href="../551/298551.xml">
downstream</link> traffic, it is recommended that the policy enforcement be done at the <link xlink:type="simple" xlink:href="../866/3670866.xml">
Edge Nodes</link> per Traffic Class. It is also recommended to have per user <link xlink:type="simple" xlink:href="../669/242669.xml">
shaping</link> at the Access Node of downstream traffic to prevent <link xlink:type="simple" xlink:href="../949/40949.xml">
congestion</link> in the <link xlink:type="simple" xlink:href="../718/285718.xml">
first mile</link>.</p>
<p>

MUSE recommends the use of central CAC for the small subset of services that actually need it and only in those parts of the network where the network operator has identified a potential dimensioning problem. Local CAC at the Access Nodes or no CAC can be used for the rest of the traffic. Appropriate network dimensioning will help to minimize the risk of congestion or blocking problems.</p>
<p>

Central CAC is recommended for applications requiring explicit CAC where neither <link xlink:type="simple" xlink:href="../529/185529.xml">
scalability</link> nor setup <link xlink:type="simple" xlink:href="../012/41012.xml">
delay</link>s are special concerns (e.g. <link xlink:type="simple" xlink:href="../143/147143.xml">
VoD</link>). Local CAC is recommended to handle <link xlink:type="simple" xlink:href="../407/20407.xml">
multicast</link> traffic (e.g. <message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<link xlink:type="simple" xlink:href="../225/1077225.xml">
IPTV</link></rule>
</direction>
</protocol>
</message>
) because of its better scalability and lower reaction time.</p>
<p>

MUSE recommends a “provisioning” scenario where the central CAC, which has a view of all network resource usage, is able to allocate to a local CAC a certain amount of resources that will then be managed locally. Within this approach, the central CAC regularly monitors the usage of local resources at the Access Nodes and readjusts the resources allocated to the local CAC entities if necessary.</p>
<p>

It is recommended that all network nodes support at least the four traffic classes proposed by MUSE (<link xlink:type="simple" xlink:href="../767/25767.xml">
real-time</link>, <information wordnetid="105816287" confidence="0.8">
<datum wordnetid="105816622" confidence="0.8">
<link xlink:type="simple" xlink:href="../533/2761533.xml">
streaming</link></datum>
</information>
, <link xlink:type="simple" xlink:href="../409/212409.xml">
transactional</link> and <link xlink:type="simple" xlink:href="../141/2311141.xml">
best-effort</link>). At every link, outgoing traffic will be placed into a different <link xlink:type="simple" xlink:href="../265/25265.xml">
queue</link> according to what traffic class it belongs. These queues will be served by Strict Priority (<link xlink:type="simple" xlink:href="../485/24485.xml">
SP</link>) and/or <link xlink:type="simple" xlink:href="../579/7460579.xml">
WFQ</link> scheduling mechanisms. SP is recommended to be used for guaranteeing a low delay for real time traffic in those links where capacity is relatively low, whereas WFQ can be used for the rest of classes. When capacity is high enough, WFQ can help to provision the required bandwidth to each traffic class.</p>

</sec>
<sec>
<st>
 See also </st>
<p>

<list>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../315/25315.xml">
Quality of Service</link></entry>
<entry level="1" type="bullet">

<link>
Differentiated Services</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../140/1984140.xml">
Call Admission Control</link></entry>
<entry level="1" type="bullet">

<message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<link xlink:type="simple" xlink:href="../627/1616627.xml">
Connection Admission Control</link></rule>
</direction>
</protocol>
</message>
</entry>
<entry level="1" type="bullet">

<link>
Traffic Shaping</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../444/1585444.xml">
Traffic policing</link></entry>
</list>
</p>

</sec>
<sec>
<st>
References</st>
<p>

<list>
<entry level="1" type="bullet">

 MUSE QoS Architecture White Paper [https://www.ist-muse.org/Abstracts/abstract_whitepaper_QoS.htm]</entry>
<entry level="1" type="bullet">

 MUSE deliverable DTF1.9 GSB Access Network Architecture [https://www.ist-muse.org/Abstracts/abstract_DTF1.9.htm]</entry>
<entry level="1" type="bullet">

 MUSE deliverable DTF1.6 Access Network Architecture III [https://www.ist-muse.org/Abstracts/abstract_DTF1.6.htm]</entry>
<entry level="1" type="bullet">

 MUSE deliverable DA2.4 Network Architecture and Functional Specifications for the Multi-Service Access and Edge (Network Architecture and Functional Specifications for the Multi-Service Access and Edge) [https://www.ist-muse.org/Abstracts/abstract_DA2.4.htm]</entry>
</list>
</p>

</sec>
<sec>
<st>
 External links </st>
<p>

<list>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.ist-muse.org/">
Multi Service Access Everywhere - MUSE project</weblink></entry>
</list>
</p>

</sec>
</bdy>
</article>
