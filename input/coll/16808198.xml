<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 17.04.2009 03:48:19[mciao0825] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<software  confidence="0.9508927676800064" wordnetid="106566077">
<header>
<title>IST-Plastic</title>
<id>16808198</id>
<revision>
<id>228597746</id>
<timestamp>2008-07-29T13:21:32Z</timestamp>
<contributor>
<username>Thumperward</username>
<id>545027</id>
</contributor>
</revision>
<categories>
<category>Mobile technology</category>
</categories>
</header>
<bdy>
<template>
<name>Infobox Software</name>
<parameters>
<genre>
?</genre>
<logo>
<image width="150px" src="IST-Plastic.png">
<caption>

IST-Plastic.png
</caption>
</image>
</logo>
<website>
<weblink xlink:type="simple" xlink:href="http://www-c.inria.fr/plastic">
http://www-c.inria.fr/plastic</weblink></website>
<operating_system>
<platform wordnetid="103961939" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<surface wordnetid="104362025" confidence="0.8">
<horizontal_surface wordnetid="103536348" confidence="0.8">
<link xlink:type="simple" xlink:href="../193/81193.xml">
Cross-platform</link></horizontal_surface>
</surface>
</artifact>
</platform>
</operating_system>
<latest_release_version>
0.0.1</latest_release_version>
<released>
<link xlink:type="simple" xlink:href="../735/2735.xml">
April 7th</link>, <link xlink:type="simple" xlink:href="../825/35825.xml">
2008</link></released>
<author>
Plastic consortium</author>
<name>
PLASTIC</name>
<latest_release_date>
<link xlink:type="simple" xlink:href="../735/2735.xml">
April 7th</link>, <link xlink:type="simple" xlink:href="../825/35825.xml">
2008</link></latest_release_date>
<license>
?</license>
</parameters>
</template>

<p>

<b>Plastic</b>, acronym of <b>P</b>roviding <b>L</b>ightweith &amp; <b>A</b>dapatable <b>S</b>ervice <b>T</b>echnology for <b>I</b>nformation and <b>C</b>ommunication, is a project that develops a design framework for mobile <link xlink:type="simple" xlink:href="../547/486547.xml">
B3G</link> services. The  PLASTIC project adopts and revisits service-oriented computing for the B3G network, in particular assisting the development of services targeted at mobile devices.</p>
<p>

The <b>Plastic</b> project belongs to the EU's <work wordnetid="100575741" confidence="0.8">
<body wordnetid="105216365" confidence="0.8">
<natural_object wordnetid="100019128" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<undertaking wordnetid="100795720" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<link xlink:type="simple" xlink:href="../079/1342079.xml">
Sixth Framework Programme</link></activity>
</psychological_feature>
</act>
</undertaking>
</event>
</natural_object>
</body>
</work>
 for Research and Technology Development (RTD), inscribed into <link xlink:type="simple" xlink:href="../251/7409251.xml">
STREP</link> <link xlink:type="simple" xlink:href="../177/1340177.xml">
Information Society Technologies</link> (IST). The project started in January 2006 and will end in September 2008.</p>

<sec>
<st>
 Introduction to <b>Plastic</b> </st>
<p>

The PLASTIC platform enables robust distributed lightweight services in the B3G networking environment through three different tools</p>
<p>

<list>
<entry level="1" type="bullet">

A development environment leveraging model-driven engineering  for the thorough development of SLA- and resource-aware services, which may be deployed on the various networked nodes, including handheld devices;</entry>
<entry level="1" type="bullet">

A service-oriented middleware leveraging multi-radio devices and multi-network environments for applications and services run on mobile devices,  further enabling context-aware and secure discovery and access to such services;</entry>
<entry level="1" type="bullet">

A validation framework enabling off-line and on-line validation of networked services regarding functional and extra-functional properties.</entry>
</list>
</p>

<ss1>
<st>
Development environment</st>
<p>

The PLASTIC development environment enables the rigorous development of SLA and resource-aware services, which may be deployed on the various networked nodes, including handheld devices (that can exploit different network interfaces, e.g., WiFi, Bluetooth, 3G).</p>
<p>

The PLASTIC development environment can be organized into the following five main blocks.</p>
<p>

<list>
<entry level="1" type="bullet">

Modeling tools: they are the PLASTIC service model editor and the PLASTIC SLA editor. The former allows the developer to model the functional and non-functional behavior of the service. The latter is for defining the service level specification by taking into account the feedbacks from the non-functional analysis tools.</entry>
<entry level="1" type="bullet">

Non-functional analysis tools: they are L-to-QN and QN-Solver. The former derives, from the service model, a performance model based on Queueing Networks (QN). The latter is a QN solver for performing performance analysis. </entry>
<entry level="1" type="bullet">

Code generation tools: UML to <link>
HUTN</link> and UML to WSDL are used to derive, from the service model, information needed for Service Level Agreement (SLA) management and the service WSDL specification. SLA monitor generator and WS-Agreement generator generate monitors in order to check SLA at run-time. PLASTIC model to Adaptable Java Java skeleton of the service's code. This code is resource-aware in the sense that it adapts to possible different hosting devices.</entry>
<entry level="1" type="bullet">

Resource-aware programming model: it is a resource-aware extension of Java used to write the resource-aware code of the service.</entry>
<entry level="1" type="bullet">

Resource-aware adaptation tools: they are an Abstract Resource Analyzer and a Customizer and are used at deployment-time in order to "extract", from the resource-aware implementation of the service, the alternative that better fits the resource constraints of the device over which the service will run.</entry>
</list>
</p>
<p>

The PLASTIC development environment relies on the Eclipse framework, i.e., all the tools of the PLASTIC development environment are implemented as Eclipse plug-ins. However, each tool has been developed in a modular way hence providing also an API that would allow a developer to use the tool also outside Eclipse.</p>

</ss1>
<ss1>
<st>
Service-oriented middleware</st>
<p>

The PLASTIC middleware empowers the service-oriented architecture with B3G networking capabilities, in particular enabling adaptive lightweight services to be run on mobile nodes and access to services over multi-radio, multi-network links.</p>
<p>

The PLASTIC middleware specifically enriches the Web service architecture with key features for services to become truly pervasive by taking full benefit of the rich capacities, including multi-radio interfaces, now embedded in wireless devices.</p>
<p>

The PLASTIC middleware brings multi-radio, multi-network connectivity to services through a comprehensive layered architecture:</p>
<p>

<list>
<entry level="1" type="bullet">

The multi-radio device management and networking layers together abstract multi-radio connectivity, selecting the optimal communication link to/from nodes, according to quality parameters.</entry>
<entry level="1" type="bullet">

The communication layer allows for communication in the B3G networking environment according to the SOAP or CBR (content-based routing) protocols. B3G SOAP in particular allows for multi-network routing of SOAP messages over the multi-radio links. B3G CBR provides content-based networking, complementing traditional unicast and multicast addressed-based networks, to support the communication modes underlying large-scale, loosely coupled, multi-party, distributed applications.</entry>
<entry level="1" type="bullet">

The middleware services layer brings advanced distributed resource management functionalities customized for the B3G networking environment. The Discovery Service enables the advertising and location of networked services, in particular accounting for extra-functional properties. The Context awareness Services feature concepts for managing contextual information and further easing the adaptation of services to best match user situations. The lightweight WS-Security Services allow for adapting the security provision to the capacity of mobile device resources. The Publish-Subscribe Service enables effective event-based communication in the B3G network through CBR.</entry>
</list>
</p>
<p>

Last but not least, the PLASTIC middleware is mobility-aware so that its functionalities adapt to the physical mobility of both clients and services, in particular exploiting the rich multi-radio, multi-network connectivity.</p>
<p>

Functionalities provided by the PLASTIC middleware may be used in conjunction but also in isolation according to the resource capacities of the host and the applications' requirements.</p>
<p>

Implementation of the PLASTIC middleware prototype is being finalized and will soon be available for download under open source licenses.</p>

</ss1>
<ss1>
<st>
Validation framework</st>
<p>

The PLASTIC validation framework supports the validation of networked services with regard to both functional and extra-functional properties. The validation framework is not conceived as a fixed methodology, but rather as a set of techniques/tools that can be used alternatively, or in combination, depending on the constraints and requirements of a considered application/scenario.</p>
<p>

PLASTIC services validation is structured around two main stages: off-line validation, carried on at development time, and on-line validation, performed during live usage.</p>
<p>

During the off-line stage, services are tested in a simulated environment that reproduces functional and/or extra-functional run-time conditions. The tools made available for this purpose within the PLASTIC validation framework are:</p>
<p>

<list>
<entry level="1" type="bullet">

Jambition: a model-based testing tool that automatically derives and executes invocation sequences on a service, checking whether the responses conform to a given specification, expressed as a Service State Machine. Jambition is equipped with a visual interface (Minerva library) based on the common formalism of UML 2.0 state machines.</entry>
<entry level="1" type="bullet">

PUPPET: a tool to generate stubs implementing external services invoked by the service under development. The mock services automatically generated by Puppet exhibit a correct behaviour with respect to given extra-functional properties.</entry>
<entry level="1" type="bullet">

WEEVIL: a synthetic-workload generator coupled with an environment for managing the deployment and execution of experiments. Weevil is intended to facilitate experimentation activities for distributed systems by providing engineers with a flexible, configurable, automated and, thus, repeatable process for evaluating their software on a networked testbed.</entry>
</list>
</p>
<p>

On-line validation foresees testing of a service after deployment and during live usage. PLASTIC provides tools developed to support this phase in verifying both functional and extra-functional properties:</p>
<p>

<list>
<entry level="1" type="bullet">

Dynamo-AOP: a framework for monitoring functional properties of the external services with which a BPEL process interacts to realize a composite service.</entry>
<entry level="1" type="bullet">

SLAngMon: a light-weight technology that can dynamically detect violations of extra-functional properties specified in SLAng, by means of automatically generated on-line monitors. Events related to the extra-functional characteristics are logged and can be used to resolve controversies concerning SLA violations.</entry>
</list>
</p>
<p>

The tools of the PLASTIC Validation Framework can be downloaded from the Tool Repository of the Plastic Validation Framework.</p>

</ss1>
</sec>
</bdy>
</software>
</article>
