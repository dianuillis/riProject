<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 18:48:56[mciao0828] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>Principle of least privilege</title>
<id>1695226</id>
<revision>
<id>240209630</id>
<timestamp>2008-09-22T12:00:27Z</timestamp>
<contributor>
<username>Mathiasl26</username>
<id>83113</id>
</contributor>
</revision>
<categories>
<category>Computer security</category>
<category>Articles lacking in-text citations</category>
<category>Information theory</category>
</categories>
</header>
<bdy>

In <link xlink:type="simple" xlink:href="../036/15036.xml">
information security</link>, <link xlink:type="simple" xlink:href="../323/5323.xml">
computer science</link>, and other fields, the <b>principle of least privilege</b>, also known as the <b>principle of minimal privilege</b> or just <b>least privilege</b>, requires that in a particular <link xlink:type="simple" xlink:href="../775/574775.xml">
abstraction layer</link> of a computing environment every <link xlink:type="simple" xlink:href="../133/939133.xml">
module</link> (such as a <link xlink:type="simple" xlink:href="../178/45178.xml">
process</link>, a <link xlink:type="simple" xlink:href="../990/16301990.xml">
user</link> or a <link xlink:type="simple" xlink:href="../783/5783.xml">
program</link> on the basis of the layer we are considering) must be able to access only such <link xlink:type="simple" xlink:href="../062/18985062.xml">
information</link> and <link xlink:type="simple" xlink:href="../365/1728365.xml">
resources</link> that are  necessary to its legitimate purpose.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref><ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%222%22])">2</ref><p>

When applied to <link xlink:type="simple" xlink:href="../990/16301990.xml">
users</link>, the terms <b>least user access</b> or <b>least-privileged <link xlink:type="simple" xlink:href="../990/16301990.xml">
user account</link></b> (<b>LUA</b>) are also used, referring to the concept that all users at all times should run with as few <link xlink:type="simple" xlink:href="../860/1692860.xml">
privileges</link> as possible, and also launch <link xlink:type="simple" xlink:href="../746/454746.xml">
applications</link> with as few privileges as possible.</p>

<sec>
<st>
 Usage </st>

<p>

<table class="metadata plainlinks ambox ">
<row>
<col>

ambox-style" style=""</col>
</row>
<row>
<col class="mbox-image"><p>

<image width="50px" src="Text_document_with_red_question_mark.svg">
</image>
</p>
</col>
<col style="" class="mbox-text">
 This article or section includes a  or , but its sources remain unclear because it lacks <b>.</b>
You can  this article by introducing more precise citations .</col>
</row>
</table>


The principle of least privilege is widely recognized as an important design consideration in enhancing the protection of data and functionality from faults (<link xlink:type="simple" xlink:href="../720/2573720.xml">
fault tolerance</link>) and malicious behavior (<link xlink:type="simple" xlink:href="../398/7398.xml">
computer security</link>). </p>
<p>

The principle of least privilege is also known as the <b>principle of least authority</b> (POLA),
an alternative term coined by those who consider <it>authority</it> be a more precise term than <it>privilege</it>
to represent "ability to access" in the true spirit of this concept. Specifically, <it>authority</it> represents all effects that a subject can directly or indirectly cause in a system, as opposed to <it>permission</it> which represents the effects that can be directly caused in a single operation.</p>
<p>

In most operating systems, like Windows and Linux, code running in "<link>
kernel mode</link>" always runs with maximum privileges; therefore there is no security enforcement.  The principle of least privilege therefore demands the use of a user mode solutions when given the choice between a kernel mode and user mode solution if the two solutions provide the same results.</p>
<p>

Least privilege is widely misunderstood and, in particular, is almost always confused with the <event wordnetid="100029378" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<link xlink:type="simple" xlink:href="../300/6687300.xml">
Trusted Computer System Evaluation Criteria</link></activity>
</procedure>
</psychological_feature>
</act>
</event>
 concept of <link xlink:type="simple" xlink:href="../826/41826.xml">
Trusted Computing Base</link> minimization. Minimization is a far more stringent requirement that is only applicable to the functionally strongest assurance classes, <it>viz.</it>, B3 and A1 (which are <b>evidentiarily</b> different but <b>functionally</b> identical). Least privilege is often associated with <link xlink:type="simple" xlink:href="../022/1039022.xml">
privilege bracketing</link>, that is, assuming necessary privileges at the last possible moment and dismissing them as soon as no longer strictly necessary, therefore ostensibly avoiding fallout from erroneous code that unintentionally exploits more privilege than is merited. Least privilege has also&mdash;and arguably incorrectly&mdash;been interpreted in the context of distribution of <link xlink:type="simple" xlink:href="../518/881518.xml">
discretionary access control</link> permissions, even to the point of asserting that, <it>e.g.</it>, giving user U read/write access to file F violates least privilege if U can complete his authorized tasks with only read permission.</p>
<p>

In an archetypal UNIX implementation, processes execute with a potential privilege set and an active privilege set. Such privilege sets are inherited from the parent as determined by the semantics of <it>fork()</it>. An executable file that performs a privileged function&mdash;thereby technically constituting a component of the <event wordnetid="100029378" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<link xlink:type="simple" xlink:href="../826/41826.xml">
TCB</link></activity>
</procedure>
</psychological_feature>
</act>
</event>
, and concomitantly termed a trusted program or trusted process may also be marked with a set of privileges, a logical extension of the notions of <link xlink:type="simple" xlink:href="../629/1054629.xml">
set user ID</link> and <link xlink:type="simple" xlink:href="../629/1054629.xml">
set group ID</link>. The inheritance of file privileges by a process are determined by the semantics of the <it>exec()</it> family of system calls. The precise manner in which potential process privileges, actual process privileges, and file privileges interact may be quite involved. In practice, least privilege is practiced by maintaining in the active privilege set only those privileges that are strictly necessary at the time, claiming and dismissing them from the potential privilege set as appropriate. Strict adherence to this model is quite complex as well as error-prone.</p>
<p>

Historically, the oldest instance of least privilege is probably the source code of <it>login.c</it>, which begins execution with <link xlink:type="simple" xlink:href="../209/264209.xml">
super-user</link> permissions and&mdash;the instant they are no longer necessary&mdash;dismisses them via <it>setuid()</it> with a non-zero argument.</p>
<p>

<link xlink:type="simple" xlink:href="../671/4359671.xml">
User Account Control</link> is an implementation of least user access in <version wordnetid="107173585" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../648/2289648.xml">
Windows Vista</link></version>
 and <version wordnetid="107173585" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../042/2361042.xml">
Windows Server 2008</link></version>
.</p>

</sec>
<sec>
<st>
 Benefits </st>

<p>

<list>
<entry level="1" type="bullet">

 Better system stability.  When code is limited in the scope of changes it can make to a system, it is easier to test its possible actions and interactions with other applications.  In practice for example, applications running with restricted rights will not have access to perform operations that could crash a machine, or adversely affect other applications running on the same system.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 Better system security.  When code is limited in the system-wide actions it may perform, vulnerabilities in one application cannot be used to exploit the rest of the machine.   For example, Microsoft states “Running in standard user mode gives customers increased protection against inadvertent system-level damage caused by "shatter attacks" and malware, such as root kits, spyware, and undetectable viruses.” <weblink xlink:type="simple" xlink:href="http://technet.microsoft.com/en-us/windowsvista/aa906021.aspx">
http://technet.microsoft.com/en-us/windowsvista/aa906021.aspx</weblink></entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 Ease of deployment.  In general, the fewer privileges an application requires the easier it is to deploy within a larger environment.   This usually results from the first two benefits, applications that install device drivers or require elevated security privileges typically have additional steps involved in their deployment, for example on Windows a solution with no device drivers can be run directly with no installation, while device drivers must be installed separately using the Windows installer service in order to grant the driver elevated privileges.</entry>
</list>
</p>

</sec>
<sec>
<st>
 Limitations </st>
<p>

According to <link xlink:type="simple" xlink:href="../145/205145.xml">
James Whittaker</link>, in real practice, true least privilege is neither definable nor possible to enforce.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%223%22])">3</ref> We have no method to evaluate a process to define the least amount of privileges it will ever need to perform its functions.  That is because it is not possible to know all the values of variables it may process, all the addresses it will need, the precise time it needs etc.  The best we can do in practice is restrict its privileges to eliminate some we casually predict that it will never need.  This turns out to be far from the minimal set of privileges.  This limitation substantially reduces the effectiveness of least privilege enforcement.  </p>
<p>

According to Barnum and Gegick, another limitation is the granularity of control that the operating environment (secure operating system) over privileges for an individual processes.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%224%22])">4</ref> In real practice, it is almost never possible to control a process's access to memory, or processing time, or I/O device addresses or modes with the precision needed to eliminate the precise set privileges we can be sure a process will not need. This reduces its usefulness of this principle even more.</p>

</sec>
<sec>
<st>
 History </st>
<p>

The <b>original formulation</b> is from Saltzer and Schroeder:
<indent level="1">

<it>Every program and every user of the system should operate using the least set of privileges necessary to complete the job.</it> (<it>The protection of information in computer systems</it>, 1974)
</indent>

<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../772/974772.xml">
Peter J. Denning</link></scientist>
, in his paper "Fault Tolerant Operating Systems" set it in a broader perspective among four fundamental principles of fault tolerance.</p>
<p>

Dynamic assignments of privileges was earlier discussed by <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../631/17249631.xml">
Roger Needham</link></scientist>
</person>
 in 1972.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%225%22])">5</ref><ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%226%22])">6</ref></p>

</sec>
<sec>
<st>
See also</st>
<p>

<list>
<entry level="1" type="bullet">

 <accomplishment wordnetid="100035189" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<action wordnetid="100037396" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<feat wordnetid="100036762" confidence="0.8">
<link xlink:type="simple" xlink:href="../621/744621.xml">
Privilege escalation</link></feat>
</psychological_feature>
</act>
</action>
</event>
</accomplishment>
</entry>
<entry level="1" type="bullet">

 <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<model wordnetid="110324560" confidence="0.8">
<assistant wordnetid="109815790" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../717/539717.xml">
Capability</link></causal_agent>
</worker>
</assistant>
</model>
</person>
</physical_entity>
 and <link xlink:type="simple" xlink:href="../398/7398.xml#xpointer(//*[./st=%22Capabilities+vs.+ACLs%22])">
Capabilities vs. ACLs</link> </entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../076/207076.xml">
Confused deputy problem</link></entry>
<entry level="1" type="bullet">

 <event wordnetid="100029378" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<link xlink:type="simple" xlink:href="../022/1039022.xml">
Privilege separation</link></activity>
</procedure>
</psychological_feature>
</act>
</event>
 (or bracketing)</entry>
<entry level="1" type="bullet">

 <event wordnetid="100029378" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<link xlink:type="simple" xlink:href="../008/5866008.xml">
Privilege revocation</link></activity>
</procedure>
</psychological_feature>
</act>
</event>
</entry>
<entry level="1" type="bullet">

 <event wordnetid="100029378" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<link xlink:type="simple" xlink:href="../258/4672258.xml">
Need to know</link></activity>
</procedure>
</psychological_feature>
</act>
</event>
</entry>
</list>
</p>

</sec>
<sec>
<st>
References</st>

<p>

<reflist>
<entry id="1">
Saltzer 75</entry>
<entry id="2">
Denning 76</entry>
<entry id="3">
<weblink xlink:type="simple" xlink:href="http://ieeexplore.ieee.org/xpl/freeabs_all.jsp?tp=&amp;arnumber=1193218&amp;isnumber=26759">
<link xlink:type="simple" xlink:href="../145/205145.xml">
James Whittaker</link>, <it>Why secure applications are difficult to write''</it></weblink>, IEEE Security &amp; Privacy, vol. 1, issue 2, pp. 81-83</entry>
<entry id="4">
[https://buildsecurityin.us-cert.gov/daisy/bsi/articles/knowledge/principles/351.html Least Privilege]</entry>
<entry id="5">
<person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../631/17249631.xml">
Roger Needham</link></scientist>
</person>
, <it>[Protection systems and protection implementations]</it>, Proc. 1972 Fall Joint Computer Conference, AFIPS Conf. Proc., vol. 41, pt. 1, pp. 571-578</entry>
<entry id="6">
Schroeder <weblink xlink:type="simple" xlink:href="http://www.cs.cornell.edu/fbs/publications/leastPrivNeedham.pdf">
Least Privilege and More</weblink></entry>
</reflist>

<list>
<entry level="1" type="bullet">

 Ben Mankin, <it>The Formalisation of Protection Systems</it>, Ph. D thesis, University of Bath, 2004</entry>
<entry level="1" type="bullet">

 <cite style="font-style:normal"><link xlink:type="simple" xlink:href="../772/974772.xml">
P. J. Denning</link>&#32;(December 1976).&#32;"<weblink xlink:type="simple" xlink:href="http://portal.acm.org/citation.cfm?id=356680&amp;dl=ACM&amp;coll=&amp;CFID=15151515&amp;CFTOKEN=6184618">
Fault tolerant operating systems</weblink>". <it>ACM Computing Surveys (CSUR)</it>&#32;<b>8</b>&#32;(4): 359–389. <document wordnetid="106470073" confidence="0.8">
<written_communication wordnetid="106349220" confidence="0.8">
<writing wordnetid="106362953" confidence="0.8">
<link xlink:type="simple" xlink:href="../994/422994.xml">
doi</link></writing>
</written_communication>
</document>
:<weblink xlink:type="simple" xlink:href="http://dx.doi.org/10.1145%2F356678.356680">
10.1145/356678.356680</weblink>. ISSN 0360-0300.</cite>&nbsp;</entry>
<entry level="1" type="bullet">

  <cite style="font-style:normal">Jerry H. Saltzer, Mike D. Schroeder&#32;(September 1975).&#32;"<weblink xlink:type="simple" xlink:href="http://web.mit.edu/Saltzer/www/publications/protection/">
The protection of information in computer systems</weblink>". <it>Proceedings of the IEEE</it>&#32;<b>63</b>&#32;(9): 1278–1308. <document wordnetid="106470073" confidence="0.8">
<written_communication wordnetid="106349220" confidence="0.8">
<writing wordnetid="106362953" confidence="0.8">
<link xlink:type="simple" xlink:href="../994/422994.xml">
doi</link></writing>
</written_communication>
</document>
:<weblink xlink:type="simple" xlink:href="http://dx.doi.org/10.1109%2FPROC.1975.9939">
10.1109/PROC.1975.9939</weblink>.</cite>&nbsp;</entry>
<entry level="1" type="bullet">

  <cite id="Reference-Deitel-1984" style="font-style:normal" class="book">Deitel, Harvey M.&#32;[1982]&#32;(1984). <weblink xlink:type="simple" xlink:href="http://portal.acm.org/citation.cfm?id=79046&amp;dl=GUIDE&amp;coll=GUIDE">
An introduction to operating systems</weblink>, revisited first edition,&#32;Addison-Wesley,&#32;673. ISBN 0-201-14502-2.</cite>&nbsp; page 31.</entry>
</list>
</p>

</sec>
<sec>
<st>
 External links </st>
<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://web.mit.edu/Saltzer/www/publications/protection/">
The Saltzer and Schroeder paper cited in the references.</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://cyberforge.com/weblog/aniltj/archive/2004/05/26/544.aspx">
NSA (the one that implemented SELinux) talks about the principle of least privilege</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.sun.com/bigadmin/features/articles/least_privilege.html">
A discussion of the implementation of the principle of least privilege in Solaris</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://silverstr.ufies.org/blog/archives/000913.html">
"Proof that LUA makes you safer" by Dana Epp</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://technet.microsoft.com/en-us/library/bb456992.aspx">
Applying the Principle of Least Privilege to User Accounts on Windows XP, by Microsoft</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://wikis.sun.com/display/BluePrints/Privilege+Bracketing+in+the+Solaris+10+Operating+System">
Privilege Bracketing in the Solaris 10 Operating System, Sun Microsystems</weblink></entry>
</list>
</p>


</sec>
</bdy>
</article>
