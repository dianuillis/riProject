<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 18:50:21[mciao0825] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<event  confidence="0.8" wordnetid="100029378">
<rule  confidence="0.8" wordnetid="105846932">
<act  confidence="0.8" wordnetid="100030358">
<psychological_feature  confidence="0.8" wordnetid="100023100">
<procedure  confidence="0.8" wordnetid="101023820">
<activity  confidence="0.8" wordnetid="100407535">
<algorithm  confidence="0.8" wordnetid="105847438">
<header>
<title>DSW algorithm</title>
<id>1699060</id>
<revision>
<id>222531765</id>
<timestamp>2008-06-29T21:09:55Z</timestamp>
<contributor>
<username>Alaibot</username>
<id>1324179</id>
</contributor>
</revision>
<categories>
<category>Search algorithms</category>
<category>Trees (structure)</category>
</categories>
</header>
<bdy>

The <b>DSW algorithm</b>, or in full <b>Day/Stout/Warren algorithm</b>, is a method for efficiently balancing <link xlink:type="simple" xlink:href="../320/4320.xml">
binary search tree</link>s &mdash; that is, decreasing their height to <link xlink:type="simple" xlink:href="../578/44578.xml">
O</link>(log <it>n</it>) nodes, where <it>n</it> is the total number of nodes. Unlike a <link xlink:type="simple" xlink:href="../310/378310.xml">
self-balancing binary search tree</link>, it does not do this incrementally during each operation, but periodically, so that its cost can be <link xlink:type="simple" xlink:href="../683/236683.xml">
amortized</link> over many operations. The algorithm was designed by Quentin Stout and Bette Warren in their <link xlink:type="simple" xlink:href="../761/34761.xml">
1986</link> paper <it>Tree Rebalancing in Optimal Time and Space</it>, based on work done by Colin Day in <link xlink:type="simple" xlink:href="../661/34661.xml">
1976</link>.<p>

The algorithm requires linear (O(<it>n</it>)) time and is <link xlink:type="simple" xlink:href="../861/219861.xml">
in-place</link>. Besides being simpler than many earlier tree-balancing algorithms, simple enough to teach in elementary data structure classes, it can also be easily modified to balance trees <it>perfectly</it>; that is, such that no two leaves differ in depth by more than one. This is a useful transformation to perform if it is known that no more inserts will be done.</p>
<p>

A 2002 article by Timothy J. Rolfe has recently brought attention back to the DSW algorithm after a long hiatus; there is evidence that it is he who first named it the DSW algorithm. He cites two main advantages: "in circumstances in which one generates an entire binary search tree at the beginning of processing, followed by item look-up access for the rest of processing" and "pedagogically within a course on data structures where one progresses from the binary search tree into self-adjusting trees, since it gives a first exposure to doing rotations within a binary search tree."</p>

<sec>
<st>
 External links </st>
<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://penguin.ewu.edu/~trolfe/DSWpaper/">
An explanation and some experiments</weblink> by Timothy J. Rolfe</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.eecs.umich.edu/~qstout/pap/CACM86.pdf">
The original paper</weblink> by Stout and Warren</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.eecs.umich.edu/~qstout/">
Prof. Quentin Stout's homepage</weblink> at University of Michigan</entry>
</list>
</p>



</sec>
</bdy>
</algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</article>
