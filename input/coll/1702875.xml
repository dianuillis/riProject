<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 18:50:08[mciao0827] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<idea  confidence="0.8" wordnetid="105833840">
<concept  confidence="0.8" wordnetid="105835747">
<header>
<title>MapReduce</title>
<id>1702875</id>
<revision>
<id>244013854</id>
<timestamp>2008-10-08T23:04:16Z</timestamp>
<contributor>
<username>Thingg</username>
<id>5924818</id>
</contributor>
</revision>
<categories>
<category>Parallel computing</category>
<category>Programming constructs</category>
<category>Google</category>
</categories>
</header>
<bdy>

<table style="clear: right; margin-bottom: .5em; float: right; padding: .5em 0 .8em 1.4em; background: none; width: auto;" cellpadding="0" cellspacing="0">
<row>
<col>
__TOC__</col>
</row>
</table>

<b>MapReduce</b> is a <link xlink:type="simple" xlink:href="../211/768211.xml">
software framework</link> introduced by <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../923/1092923.xml">
Google</link></company>
 to support parallel computations over large (multiple <link xlink:type="simple" xlink:href="../980/23980.xml">
petabyte</link><ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref>) data sets on clusters of computers. This framework is largely taken from <link xlink:type="simple" xlink:href="../801/6045801.xml">
map</link> and <link xlink:type="simple" xlink:href="../389/6364389.xml">
reduce</link> functions commonly used in <link xlink:type="simple" xlink:href="../933/10933.xml">
functional programming</link>,<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%222%22])">2</ref> although the actual semantics of the framework are not the same.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%223%22])">3</ref><p>

MapReduce implementations have been written in <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../038/72038.xml">
C++</link></programming_language>
, <message wordnetid="106598915" confidence="0.8">
<request wordnetid="106513366" confidence="0.8">
<link xlink:type="simple" xlink:href="../881/15881.xml">
Java</link></request>
</message>
, <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../862/23862.xml">
Python</link></programming_language>
 and other languages.</p>

<sec>
<st>
Logical view</st>
<p>

The  <it>Map</it> and <it>Reduce</it> functions of <it>MapReduce</it> are both defined with respect to data structured in (key, value) pairs. <it>Map</it> takes one pair of data with a type on a data domain, and returns a list of pairs in a different domain:</p>
<p>

Map(k1,v1) -&amp;gt; list(k2,v2)</p>
<p>

The map function is applied in parallel to every item in the input dataset. This produces a list of (k2,v2) pairs for each call. 
After that, the MapReduce framework collects all pairs with the same key from all lists and groups them together, thus creating one group for each one of the different generated keys. </p>
<p>

The <it>Reduce</it> function is then applied in parallel to each group, which in turn produces a collection of values in the same domain:</p>
<p>

Reduce(k2, list (v2)) -&amp;gt; list(v2)</p>
<p>

Each <it>Reduce</it> call typically produces either one value v2 or an empty return, though one call is allowed to return more than one value. The returns of all calls are collected as the desired result list.</p>
<p>

Thus the MapReduce framework transforms a list of (key, value) pairs into a list of values. This behavior is different from the functional programming map and reduce combination, which accepts a list of arbitrary values and returns one single value that combines <it>all</it> the values returned by map.</p>

<ss1>
<st>
Example</st>
<p>

The canonical example application of MapReduce is a process to count the appearances of each different word in a set of documents:</p>

<p>

map(String name, String document):
// key: document name
// value: document contents
for each word w in document:
EmitIntermediate(w, 1);</p>
<p>

reduce(String word, Iterator partialCounts):
// key: a word
// values: a list of aggregated partial counts
int result = 0;
for each v in partialCounts:
result += ParseInt(v);
Emit(result);</p>

<p>

Here, each document is split in words, and each word is counted initially with a "1" value by the <it>Map</it> function, using the word as the result key. The framework puts together all the pairs with the same key and feeds them to the same call to <it>Reduce</it>, thus this function just needs to sum all of its input values to find the total appearances of that word.</p>

</ss1>
</sec>
<sec>
<st>
Dataflow</st>
<p>

The frozen part of the MapReduce framework is a large distributed sort. The hot spots, which the application defines, are:
<list>
<entry level="1" type="bullet">

 an <it>input reader''</it></entry>
<entry level="1" type="bullet">

 a <it>Map</it> function</entry>
<entry level="1" type="bullet">

 a <it>partition</it> function</entry>
<entry level="1" type="bullet">

 a <it>compare</it> function</entry>
<entry level="1" type="bullet">

 a <it>Reduce</it> function</entry>
<entry level="1" type="bullet">

 an <it>output writer''</it></entry>
</list>
</p>

<ss1>
<st>
Input reader</st>
<p>

The <it>input reader</it> divides the input into 16MB to 128MB splits and the framework assigns one split to each <it>Map</it> function. The <it>input reader</it> reads data from stable storage (typically a distributed file system like <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../735/1419735.xml">
Google File System</link></instrumentality>
</artifact>
</system>
) and generates key/value pairs.</p>
<p>

A common example will read a directory full of text files and return each line as a record.</p>

</ss1>
<ss1>
<st>
Map function</st>
<p>

Each <it>Map</it> function takes a series of key/value pairs, processes each, and generates zero or more output key/value pairs. The input and output types of the map can be (and often are) different from each other.</p>
<p>

If the application is doing a word count, the map function would break the line into words and output the word as the key and "1" as the value.</p>

</ss1>
<ss1>
<st>
Partition function</st>
<p>

The output of all of the maps is allocated to particular <it>reduces</it> by the applications's <it>partition</it> function. The <it>partition</it> function is given the key and the number of reduces and returns the index of the desired <it>reduce</it>.</p>
<p>

A typical default is to <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../790/13790.xml">
hash</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
 the key and <link xlink:type="simple" xlink:href="../428/1352428.xml">
modulo</link> the number of <it>reduces</it>.</p>

</ss1>
<ss1>
<st>
Comparison function</st>
<p>

The input for each <it>reduce</it> is pulled from the machine where the <it>map</it> ran and sorted using the application's <it>comparison</it> function.
</p>
</ss1>
<ss1>
<st>
Reduce function</st>
<p>

The framework calls the application's <it>reduce</it> function once for each unique key in the sorted order. The <it>reduce</it> can iterate through the values that are associated with that key and output 0 or more key/value pairs.</p>
<p>

In the word count example, the <it>reduce</it> function takes the input values, sums them and generates a single output of the word and the final sum.
</p>
</ss1>
<ss1>
<st>
Output writer</st>
<p>

The <it>Output Writer</it> writes the output of the reduce to stable storage, usually a distributed file system, such as <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../735/1419735.xml">
Google File System</link></instrumentality>
</artifact>
</system>
.</p>

</ss1>
</sec>
<sec>
<st>
Distribution and reliability</st>
<p>

MapReduce achieves reliability by parceling out a number of operations on the set of data to each node in the network; each node is expected to report back periodically with completed work and status updates. If a node falls silent for longer than that interval, the master node (similar to the master server in the <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../735/1419735.xml">
Google File System</link></instrumentality>
</artifact>
</system>
) records the node as dead, and sends out the node's assigned work to other nodes. Individual operations use <link xlink:type="simple" xlink:href="../074/4695074.xml">
atomic</link> operations for naming file outputs as a double check to ensure that there are not parallel conflicting threads running; when files are renamed, it is possible to also copy them to another name in addition to the name of the task (allowing for <link xlink:type="simple" xlink:href="../519/29519.xml">
side-effects</link>).</p>
<p>

The reduce operations operate much the same way, but because of their inferior properties with regard to parallel operations, the master node attempts to schedule reduce operations on the same node, or in the same rack as the node holding the data being operated on; this property is desirable as it conserves bandwidth across the backbone network of the datacenter. </p>
<p>

Implementations may not be highly-available; in <link xlink:type="simple" xlink:href="../308/5919308.xml">
Hadoop</link>, for example, the <it>NameNode</it> is a <link xlink:type="simple" xlink:href="../618/15572618.xml">
Single Point of Failure</link> for the distributed filesystem; if the<it>JobTracker</it> fails, all outstanding work is lost.</p>

</sec>
<sec>
<st>
Uses</st>
<p>

MapReduce is useful in a wide range of applications, including: "distributed <link xlink:type="simple" xlink:href="../642/46642.xml">
grep</link>, distributed sort, web link-graph reversal, term-vector per host, web access log stats, <link xlink:type="simple" xlink:href="../116/3125116.xml">
inverted index</link> construction, document clustering, <link xlink:type="simple" xlink:href="../488/233488.xml">
machine learning</link>, statistical <link xlink:type="simple" xlink:href="../980/19980.xml">
machine translation</link>..." Most significantly, when MapReduce was finished, it was used to completely regenerate Google's index of the <invention wordnetid="105633385" confidence="0.8">
<link xlink:type="simple" xlink:href="../139/33139.xml">
World Wide Web</link></invention>
, and replaced the old <it>ad hoc</it> programs that updated the index and ran the various analyses. <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%224%22])">4</ref></p>
<p>

MapReduce's stable inputs and outputs are usually stored in a <link xlink:type="simple" xlink:href="../343/8787343.xml">
distributed file system</link>. The transient data is usually stored on local disk and fetched remotely by the reduces.</p>
<p>

<physical_entity wordnetid="100001930" confidence="0.8">
<peer wordnetid="109626238" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<colleague wordnetid="109935990" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<associate wordnetid="109816771" confidence="0.8">
<link xlink:type="simple" xlink:href="../837/9249837.xml">
David DeWitt</link></associate>
</causal_agent>
</colleague>
</person>
</peer>
</physical_entity>
 and <physical_entity wordnetid="100001930" confidence="0.8">
<peer wordnetid="109626238" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<intellectual wordnetid="109621545" confidence="0.8">
<colleague wordnetid="109935990" confidence="0.8">
<alumnus wordnetid="109786338" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<scholar wordnetid="110557854" confidence="0.8">
<associate wordnetid="109816771" confidence="0.8">
<link xlink:type="simple" xlink:href="../057/21057.xml">
Michael Stonebraker</link></associate>
</scholar>
</scientist>
</causal_agent>
</alumnus>
</colleague>
</intellectual>
</person>
</peer>
</physical_entity>
, pioneering experts in <link xlink:type="simple" xlink:href="../610/7801610.xml">
parallel database</link>s and <link xlink:type="simple" xlink:href="../651/275651.xml">
shared nothing architecture</link>s, have made some controversial assertions about the breadth of problems that MapReduce can be used for.  They called its interface too low-level, and questioned whether it really represents the <link xlink:type="simple" xlink:href="../081/25081.xml">
paradigm shift</link> its proponents have claimed it is.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%225%22])">5</ref>  They challenge the MapReduce proponents claims of novelty, citing <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../680/168680.xml">
Teradata</link></company>
 as an example of <link xlink:type="simple" xlink:href="../906/572906.xml">
prior art</link> that has existed for over two decades; they compared MapReduce programmers to <information wordnetid="105816287" confidence="0.8">
<datum wordnetid="105816622" confidence="0.8">
<link xlink:type="simple" xlink:href="../351/309351.xml">
Codasyl</link></datum>
</information>
 programmers, noting both are "writing in a <link xlink:type="simple" xlink:href="../845/189845.xml">
low-level language</link> performing low-level record manipulation".<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%225%22])">5</ref> MapReduce advocates promote the tool without seemingly paying attention to years of academic and commercial database research and real world use.  MapReduce's use of input files and lack of <link xlink:type="simple" xlink:href="../380/1040380.xml">
schema</link> support prevents the performance improvements enabled by common database system features such as <link xlink:type="simple" xlink:href="../674/4674.xml">
B-tree</link>s and <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../101/1983101.xml">
hash partitioning</link></instrumentality>
</artifact>
</system>
, though projects such as <link>
PigLatin</link> and <link xlink:type="simple" xlink:href="../293/12640293.xml">
Sawzall</link> are starting to address these problems.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%226%22])">6</ref></p>

</sec>
<sec>
<st>
Implementations</st>
<p>

<list>
<entry level="1" type="bullet">

 The <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../923/1092923.xml">
Google</link></company>
 MapReduce framework is implemented in <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../038/72038.xml">
C++</link></programming_language>
 with interfaces in <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../862/23862.xml">
Python</link></programming_language>
 and <message wordnetid="106598915" confidence="0.8">
<request wordnetid="106513366" confidence="0.8">
<link xlink:type="simple" xlink:href="../881/15881.xml">
Java</link></request>
</message>
.</entry>
<entry level="1" type="bullet">

 The <link xlink:type="simple" xlink:href="../308/5919308.xml">
Hadoop</link> project is a free open source <message wordnetid="106598915" confidence="0.8">
<request wordnetid="106513366" confidence="0.8">
<link xlink:type="simple" xlink:href="../881/15881.xml">
Java</link></request>
</message>
 MapReduce implementation.</entry>
<entry level="1" type="bullet">

 <company wordnetid="108058098" confidence="0.9508927676800064">
<link>
Greenplum</link></company>
 is a commercial MapReduce implementation, with support for Python, Perl, SQL and other languages.</entry>
<entry level="1" type="bullet">

 Phoenix <weblink xlink:type="simple" xlink:href="http://csl.stanford.edu/~christos/sw/phoenix/">
http://csl.stanford.edu/~christos/sw/phoenix/</weblink> is a shared-memory implementation of MapReduce implemented in <link xlink:type="simple" xlink:href="../021/6021.xml">
C</link>.  </entry>
<entry level="1" type="bullet">

 MapReduce has also been implemented for the <link xlink:type="simple" xlink:href="../950/803950.xml">
Cell Broadband Engine</link>, also in <link xlink:type="simple" xlink:href="../021/6021.xml">
C</link>. <weblink xlink:type="simple" xlink:href="http://sourceforge.net/projects/mapreduce-cell">
http://sourceforge.net/projects/mapreduce-cell</weblink></entry>
<entry level="1" type="bullet">

 MapReduce has been implemented on <link xlink:type="simple" xlink:href="../120/39120.xml">
NVIDIA</link> GPUs (Graphics Processors) using <substance wordnetid="100019613" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<engine wordnetid="103287733" confidence="0.8">
<paper wordnetid="114974264" confidence="0.8">
<motor wordnetid="103789946" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<card wordnetid="102962545" confidence="0.8">
<part wordnetid="113809207" confidence="0.8">
<machine wordnetid="103699975" confidence="0.8">
<material wordnetid="114580897" confidence="0.8">
<link xlink:type="simple" xlink:href="../386/7933386.xml">
CUDA</link></material>
</machine>
</part>
</card>
</device>
</motor>
</paper>
</engine>
</instrumentality>
</artifact>
</substance>
 <weblink xlink:type="simple" xlink:href="http://www.cse.ust.hk/gpuqp/Mars.html">
http://www.cse.ust.hk/gpuqp/Mars.html</weblink>.</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://labs.trolltech.com/page/Projects/Threads/QtConcurrent">
Qt Concurrent</weblink> is a simplified version of the framework, implemented in <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../038/72038.xml">
C++</link></programming_language>
, used for distributing a task between multiple processor cores.</entry>
<entry level="1" type="bullet">

 <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../539/13427539.xml">
CouchDB</link></instrumentality>
</artifact>
</system>
 uses a MapReduce framework for defining views over distributed documents</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://skynet.rubyforge.org">
Skynet</weblink> is an open source <physical_entity wordnetid="100001930" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../768/25768.xml">
Ruby</link></causal_agent>
</physical_entity>
 implementation of Google’s MapReduce framework</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://discoproject.org/">
Disco</weblink> is an open source MapReduce implementation by <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../242/21242.xml">
Nokia</link></company>
. Its core is written in <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../646/9646.xml">
Erlang</link></programming_language>
 and jobs are normally written in <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../862/23862.xml">
Python</link></programming_language>
.</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../894/18829894.xml">
Aster Data Systems</link> <it>n</it>Cluster In-Database MapReduce implements MapReduce inside the database.</entry>
</list>
</p>

</sec>
<sec>
<st>
References</st>
<p>

Specific references:</p>
<p>

<reflist>
<entry id="1">
<weblink xlink:type="simple" xlink:href="http://news.cnet.com/8301-10784_3-9955184-7.html">
Google spotlights data center inner workings | Tech news blog - CNET News.com</weblink></entry>
<entry id="2">
"Our abstraction is inspired by the map and reduce primitives present in Lisp and many other functional languages." -<weblink xlink:type="simple" xlink:href="http://labs.google.com/papers/mapreduce.html">
"MapReduce: Simplified Data Processing on Large Clusters"</weblink>, by Jeffrey Dean and Sanjay Ghemawat; from <work wordnetid="100575741" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<service wordnetid="100577525" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<link xlink:type="simple" xlink:href="../040/1340040.xml">
Google Labs</link></activity>
</psychological_feature>
</act>
</service>
</event>
</work>
</entry>
<entry id="3">
<weblink xlink:type="simple" xlink:href="http://www.cs.vu.nl/~ralf/MapReduce/paper.pdf">
"Google's MapReduce Programming Model -- Revisited"</weblink> — paper by Ralf Lammel; from <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../001/19001.xml">
Microsoft</link></company>
</entry>
<entry id="4">
"<weblink xlink:type="simple" xlink:href="http://www.baselinemag.com/article2/0,1540,1985048,00.asp">
How Google Works</weblink>".&#32;  baselinemag.com.&nbsp;"As of October, Google was running about 3,000 computing jobs per day through MapReduce, representing thousands of machine-days, according to a presentation by Dean. Among other things, these batch routines analyze the latest Web pages and update Google's indexes."</entry>
<entry id="5">
<physical_entity wordnetid="100001930" confidence="0.8">
<peer wordnetid="109626238" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<colleague wordnetid="109935990" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<associate wordnetid="109816771" confidence="0.8">
<link xlink:type="simple" xlink:href="../837/9249837.xml">
David DeWitt</link></associate>
</causal_agent>
</colleague>
</person>
</peer>
</physical_entity>
;&#32;<physical_entity wordnetid="100001930" confidence="0.8">
<peer wordnetid="109626238" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<intellectual wordnetid="109621545" confidence="0.8">
<colleague wordnetid="109935990" confidence="0.8">
<alumnus wordnetid="109786338" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<scholar wordnetid="110557854" confidence="0.8">
<associate wordnetid="109816771" confidence="0.8">
<link xlink:type="simple" xlink:href="../057/21057.xml">
Michael Stonebraker</link></associate>
</scholar>
</scientist>
</causal_agent>
</alumnus>
</colleague>
</intellectual>
</person>
</peer>
</physical_entity>
.&#32;"<weblink xlink:type="simple" xlink:href="http://www.databasecolumn.com/2008/01/mapreduce-a-major-step-back.html">
MapReduce: A major step backwards</weblink>".&#32;  databasecolumn.com.&#32;Retrieved on <link>
2008-08-27</link>.</entry>
<entry id="6">
<physical_entity wordnetid="100001930" confidence="0.8">
<peer wordnetid="109626238" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<colleague wordnetid="109935990" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<associate wordnetid="109816771" confidence="0.8">
<link xlink:type="simple" xlink:href="../837/9249837.xml">
David DeWitt</link></associate>
</causal_agent>
</colleague>
</person>
</peer>
</physical_entity>
;&#32;<physical_entity wordnetid="100001930" confidence="0.8">
<peer wordnetid="109626238" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<intellectual wordnetid="109621545" confidence="0.8">
<colleague wordnetid="109935990" confidence="0.8">
<alumnus wordnetid="109786338" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<scholar wordnetid="110557854" confidence="0.8">
<associate wordnetid="109816771" confidence="0.8">
<link xlink:type="simple" xlink:href="../057/21057.xml">
Michael Stonebraker</link></associate>
</scholar>
</scientist>
</causal_agent>
</alumnus>
</colleague>
</intellectual>
</person>
</peer>
</physical_entity>
.&#32;"<weblink xlink:type="simple" xlink:href="http://www.databasecolumn.com/2008/01/mapreduce-continued.html">
MapReduce II</weblink>".&#32;  databasecolumn.com.&#32;Retrieved on <link>
2008-08-27</link>.</entry>
</reflist>

General references:</p>
<p>

<list>
<entry level="1" type="bullet">

 Dean, Jeffrey &amp; Ghemawat, Sanjay (2004). <weblink xlink:type="simple" xlink:href="http://labs.google.com/papers/mapreduce.html">
"MapReduce: Simplified Data Processing on Large Clusters"</weblink>. Retrieved Apr. 6, 2005.</entry>
</list>
</p>


</sec>
<sec>
<st>
External links</st>


<ss1>
<st>
Papers</st>

<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://labs.google.com/papers/mapreduce.html">
"MapReduce: Simplified Data Processing on Large Clusters"</weblink> — paper by Jeffrey Dean and Sanjay Ghemawat; from <work wordnetid="100575741" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<service wordnetid="100577525" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<link xlink:type="simple" xlink:href="../040/1340040.xml">
Google Labs</link></activity>
</psychological_feature>
</act>
</service>
</event>
</work>
</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://labs.google.com/papers/sawzall.html">
"Interpreting the Data: Parallel Analysis with Sawzall"</weblink> — paper by Rob Pike, Sean Dorward, Robert Griesemer, Sean Quinlan; from <work wordnetid="100575741" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<service wordnetid="100577525" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<link xlink:type="simple" xlink:href="../040/1340040.xml">
Google Labs</link></activity>
</psychological_feature>
</act>
</service>
</event>
</work>
</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://csl.stanford.edu/%7Echristos/publications/2007.cmp_mapreduce.hpca.pdf">
"Evaluating MapReduce for Multi-core and Multiprocessor Systems"</weblink> — paper by Colby Ranger, Ramanan Raghuraman, Arun Penmetsa, Gary Bradski, and Christos Kozyrakis; from <university wordnetid="108286163" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../977/26977.xml">
Stanford University</link></university>
</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.dbms2.com/2008/08/26/why-mapreduce-matters-to-sql-data-warehousing/">
"Why MapReduce Matters to SQL Data Warehousing"</weblink> — analysis related to the August, 2008 introduction of MapReduce/SQL integration by <link xlink:type="simple" xlink:href="../894/18829894.xml">
Aster Data Systems</link> and <company wordnetid="108058098" confidence="0.9508927676800064">
<link>
Greenplum</link></company>
</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://pages.cs.wisc.edu/~dekruijf/docs/mapreduce-cell.pdf">
"MapReduce for the Cell B.E. Architecture"</weblink> — paper by Marc de Kruijf and Karthikeyan Sankaralingam; from <university wordnetid="108286163" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../711/347711.xml">
University of Wisconsin-Madison</link></university>
</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.cse.ust.hk/catalac/users/saven/GPGPU/MapReduce/PACT08/171.pdf">
"Mars: A MapReduce Framework on Graphics Processors"</weblink> — paper by Bingsheng He, Wenbin Fang, Qiong Luo, Naga K. Govindaraju, Tuyong Wang; from <link xlink:type="simple" xlink:href="../987/268987.xml">
Hong Kong University of Science and Technology</link>; published in Proc. PACT 2008. It presents the design and implementation of MapReduce on graphics processors.</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://portal.acm.org/citation.cfm?doid=1247480.1247602">
"Map-Reduce-Merge: Simplified Relational Data Processing on Large Clusters"</weblink> — paper by Hung-Chih Yang, Ali Dasdan, Ruey-Lung Hsiao, and D. Stott Parker; from <link xlink:type="simple" xlink:href="../213/188213.xml">
Yahoo</link> and <link xlink:type="simple" xlink:href="../765/37765.xml">
UCLA</link>; published in Proc. of ACM SIGMOD, pp. 1029--1040, 2007. (This paper shows how to extend MapReduce for relational data processing.)</entry>
<entry level="1" type="bullet">

 FLuX: the <weblink xlink:type="simple" xlink:href="http://citeseer.ist.psu.edu/647742.html">
Fault-tolerant</weblink>, <weblink xlink:type="simple" xlink:href="http://citeseer.ist.psu.edu/546646.html">
Load Balancing</weblink> eXchange operator  from <link xlink:type="simple" xlink:href="../922/31922.xml">
UC Berkeley</link>  provides an integration of partitioned parallelism with process pairs.  This results in a more pipelined approach than Google's MapReduce with instantaneous failover, but with additional implementation cost.</entry>
</list>
</p>




</ss1>
</sec>
</bdy>
</concept>
</idea>
</article>
