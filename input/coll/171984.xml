<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 16:25:38[mciao0827] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<artifact  confidence="0.8" wordnetid="100021939">
<instrumentality  confidence="0.8" wordnetid="103575240">
<tool  confidence="0.8" wordnetid="104451818">
<implement  confidence="0.8" wordnetid="103563967">
<header>
<title>GNU build system</title>
<id>171984</id>
<revision>
<id>240860458</id>
<timestamp>2008-09-25T09:23:16Z</timestamp>
<contributor>
<username>Pmsyyz</username>
<id>83813</id>
</contributor>
</revision>
<categories>
<category>Compiling tools</category>
<category>Unix</category>
<category>GNU project</category>
<category>Build automation</category>
<category>GNU project software</category>
</categories>
</header>
<bdy>

<image width="150px" src="Heckert_GNU_white.svg" type="thumb">
<caption>

GNU logo
</caption>
</image>
<p>

The <b>GNU build system</b>, also known as the <b>Autotools</b>, is a suite of <link xlink:type="simple" xlink:href="../882/370882.xml">
programming tool</link>s produced by the <link xlink:type="simple" xlink:href="../549/275549.xml">
GNU project</link>.  These tools are designed to assist in making various <link xlink:type="simple" xlink:href="../661/27661.xml">
source code</link> <link xlink:type="simple" xlink:href="../130/16656130.xml">
packages</link> <link xlink:type="simple" xlink:href="../804/214804.xml">
portable</link> to many <family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../815/31815.xml">
Unix-like</link></family>
 systems.  The GNU build system is part of the <link xlink:type="simple" xlink:href="../980/617980.xml">
GNU toolchain</link> and is widely used in many <link xlink:type="simple" xlink:href="../635/10635.xml">
free software</link> and <link xlink:type="simple" xlink:href="../758/18938758.xml">
open source</link> packages.  While the tools comprising the GNU build system themselves are <link xlink:type="simple" xlink:href="../635/10635.xml">
free software</link> licensed under the <link xlink:type="simple" xlink:href="../683/18938683.xml">
GPL</link>, there are no restrictions in using them in making <link xlink:type="simple" xlink:href="../886/18934886.xml">
non-free</link> software portable.</p>

<sec>
<st>
 Tools included in the GNU build system </st>

<p>

The GNU build system comprises the <link xlink:type="simple" xlink:href="../875/11875.xml">
GNU</link> utility programs <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../527/171527.xml">
Autoconf</link></software>
, <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../811/214811.xml">
Automake</link></software>
, and <link xlink:type="simple" xlink:href="../800/172800.xml">
Libtool</link> <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref>.  Other related tools frequently used with the GNU build system are GNU’s <link xlink:type="simple" xlink:href="../194/176194.xml">
make</link> program, GNU <link xlink:type="simple" xlink:href="../489/646489.xml">
gettext</link>, <link xlink:type="simple" xlink:href="../313/2044313.xml">
pkg-config</link>, and the <physical_entity wordnetid="100001930" confidence="0.8">
<communicator wordnetid="109610660" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<compiler wordnetid="109946957" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<writer wordnetid="110794014" confidence="0.8">
<link xlink:type="simple" xlink:href="../323/12323.xml">
GNU Compiler Collection</link></writer>
</causal_agent>
</compiler>
</person>
</communicator>
</physical_entity>
, also called GCC.</p>

<ss1>
<st>
 GNU Autoconf </st>

<p>

<software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../527/171527.xml">
Autoconf</link></software>
 processes files (configure.in or configure.ac, though configure.ac is the newer name and is now recommended<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%222%22])">2</ref>) to generate a <link xlink:type="simple" xlink:href="../193/10051193.xml">
configure</link> script.</p>
<p>

When running the generated configure script, other template files, customarily ending in ".in", such as Makefile.in, are processed to create their final output, in this case a Makefile.</p>
<p>

Autoconf is used to attempt to work around the quirks found in various <family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../815/31815.xml">
Unix-like</link></family>
 operating systems.  For example, some Unix-like systems may have certain facilities that are known to be broken or missing entirely.  Autoconf creates a shell script which can detect these, and the program can work around them.  The final output of the Autoconf utility is the <link xlink:type="simple" xlink:href="../193/10051193.xml">
configure</link> script.</p>
<p>

Autoconf comes with several auxiliary programs designed to ease the creation of configure.ac, such as the Autoheader tool, which is used to help manage <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../021/6021.xml">
C</link></programming_language>
 <link xlink:type="simple" xlink:href="../847/77847.xml">
header file</link>s, <link>
autoscan</link>,  which can create an initial input file for Autoconf and ifnames, which can list C pre-processor identifiers used in the program.</p>

</ss1>
<ss1>
<st>
 GNU Automake </st>

<p>

<software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../811/214811.xml">
Automake</link></software>
 helps to create portable Makefiles, which are in turn processed with the <link xlink:type="simple" xlink:href="../194/176194.xml">
make</link> utility.  It takes its input as Makefile.am, and turns it into Makefile.in, which is used by the configure script to generate the file Makefile output.</p>

</ss1>
<ss1>
<st>
 GNU Libtool </st>

<p>

<link xlink:type="simple" xlink:href="../800/172800.xml">
Libtool</link> helps manage the creation of <link xlink:type="simple" xlink:href="../227/2692227.xml">
static</link> and <link>
dynamic</link> <link xlink:type="simple" xlink:href="../421/106421.xml">
libraries</link> on various <family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../815/31815.xml">
Unix-like</link></family>
 operating systems.  Libtool accomplishes this by abstracting the library creation process, hiding differences between various systems (e.g., <link xlink:type="simple" xlink:href="../875/11875.xml">
GNU</link>/<O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../297/6097297.xml">
Linux</link></O>
 systems vs. <link xlink:type="simple" xlink:href="../145/46145.xml">
Solaris</link>).</p>

</ss1>
<ss1>
<st>
 Gnulib </st>

<p>

<software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../261/7210261.xml">
Gnulib</link></software>
 simplifies the process of making software that uses Autoconf and Automake portable to a wide range of systems.</p>

</ss1>
</sec>
<sec>
<st>
 Advantages of the GNU build system </st>

<p>

The GNU build system provides an environment to a <link xlink:type="simple" xlink:href="../716/23716.xml">
computer programmer</link> which allows them to write <link xlink:type="simple" xlink:href="../193/81193.xml">
cross-platform</link> software (at least running on multiple <family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../815/31815.xml">
Unix-like</link></family>
 <link xlink:type="simple" xlink:href="../194/22194.xml">
operating system</link>s).  It also makes the <link xlink:type="simple" xlink:href="../153/2788153.xml">
build</link> process easier on the user, allowing the user to usually just run a small set of commands to build the program from its <link xlink:type="simple" xlink:href="../661/27661.xml">
source code</link> and install it.</p>
<p>

The utilities used by the GNU build system are only required to be on the developer’s workstation, as well.  Users do not need to have <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../527/171527.xml">
Autoconf</link></software>
, <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../811/214811.xml">
Automake</link></software>
, or <link xlink:type="simple" xlink:href="../800/172800.xml">
Libtool</link> in order to build or install software which was developed using them.  This makes the GNU build system <it>self-contained</it>, requiring only standard <family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../815/31815.xml">
Unix-like</link></family>
 tools to build.  This is accomplished by using <link xlink:type="simple" xlink:href="../938/28938.xml">
shell script</link>s which help to configure the software for a given person’s operating system.</p>
<p>

The utilities used in the GNU build system can also be used alone or together—a software project can use <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../527/171527.xml">
Autoconf</link></software>
, for example, without using <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../811/214811.xml">
Automake</link></software>
 as well.  However, the GNU build system’s components can interact with each other.</p>

</sec>
<sec>
<st>
 Limitations of the GNU build system </st>

<p>

The GNU build system uses <standard wordnetid="107260623" confidence="0.8">
<language wordnetid="106282651" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../839/92839.xml">
Bourne-compatible shell</link></system_of_measurement>
</language>
</standard>
 scripts to assist the user in the configuration and build process.  However, some operating systems (such as the <link xlink:type="simple" xlink:href="../890/18890.xml">
Microsoft Windows</link> family of systems) cannot run Bourne shell scripts on their own.  This makes building such software on the Windows operating system a bit harder than on a <family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../815/31815.xml">
Unix-like</link></family>
 system which provides the Bourne shell as a standard component.  One can install the <physical_entity wordnetid="100001930" confidence="0.8">
<communicator wordnetid="109610660" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<copycat wordnetid="109964411" confidence="0.8">
<compiler wordnetid="109946957" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<writer wordnetid="110794014" confidence="0.8">
<link xlink:type="simple" xlink:href="../840/6840.xml">
Cygwin</link></writer>
</causal_agent>
</compiler>
</copycat>
</person>
</communicator>
</physical_entity>
 or <link xlink:type="simple" xlink:href="../110/362110.xml">
MSYS</link> system on top of Windows to provide a <family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../815/31815.xml">
Unix-like</link></family>
 <link xlink:type="simple" xlink:href="../289/540289.xml">
compatibility layer</link>, though, allowing <link xlink:type="simple" xlink:href="../193/10051193.xml">
configure</link> scripts to run.  <physical_entity wordnetid="100001930" confidence="0.8">
<communicator wordnetid="109610660" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<copycat wordnetid="109964411" confidence="0.8">
<compiler wordnetid="109946957" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<writer wordnetid="110794014" confidence="0.8">
<link xlink:type="simple" xlink:href="../840/6840.xml">
Cygwin</link></writer>
</causal_agent>
</compiler>
</copycat>
</person>
</communicator>
</physical_entity>
 also provides the <physical_entity wordnetid="100001930" confidence="0.8">
<communicator wordnetid="109610660" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<compiler wordnetid="109946957" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<writer wordnetid="110794014" confidence="0.8">
<link xlink:type="simple" xlink:href="../323/12323.xml">
GNU Compiler Collection</link></writer>
</causal_agent>
</compiler>
</person>
</communicator>
</physical_entity>
, <link>
GNU make</link>, and other software that provides a nearly complete Unix-like system within Windows; MSYS also provides GNU make and other tools designed to work with the <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../110/362110.xml">
MinGW</link></software>
 version of GCC.  Increasingly, cross-compiling software to run on a Windows host from a GNU/Linux or other Unix-like build system is also possible, using MinGW.</p>
<p>

Projects which use the GNU build system may or may not provide a <link xlink:type="simple" xlink:href="../193/10051193.xml">
configure</link> script within their <link xlink:type="simple" xlink:href="../180/165180.xml">
Software Configuration Management</link> systems (such as <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../656/37656.xml">
CVS</link></software>
 or <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../868/144868.xml">
Subversion</link></software>
).  If a project that uses the GNU build system does not have a generated ./configure file available for the user, the user must generate it.  One possible way this can be done is to execute a series of commands at a shell prompt:</p>
<p>

$ aclocal
$ autoconf
$ autoheader
$ automake</p>
<p>

Not all of the commands may be necessary depending on how a given project uses the GNU build system, or more commands may be necessary.  Another common convention is to provide a script, often named autogen.sh, that runs all the needed pre-build tools.  In some cases, one can also use:</p>
<p>

$ autoreconf</p>
<p>

which automatically invokes the above commands as needed.</p>
<p>

The GNU build system can be used both for building native programs on the build machine and also for <link xlink:type="simple" xlink:href="../615/291615.xml">
cross-compiling</link> to other architectures <weblink xlink:type="simple" xlink:href="http://sources.redhat.com/autobook/autobook/autobook_258.html">
http://sources.redhat.com/autobook/autobook/autobook_258.html</weblink>.</p>
<p>

One limitation has been that the autoconf-generated configure is not parallel, and is fairly slow because it executes programs like the C compiler many times in order to test whether various libraries, header files, and language features are present.  This means that running the configure script is often slower than the rest of the build process combined (since everything else can be parallelized).</p>

</sec>
<sec>
<st>
 See also </st>

<p>

<table style="background:#f9f9f9; font-size:85%; line-height:110%; ">
<row>
<col>
 <image width="32x28px" src="Free_Software_Portal_Logo.svg">
</image>
</col>
<col style="padding:0 0.2em;">
 <b><it>
Free software&#32;portal</it></b></col>
</row>
</table>
</p>

<p>

<list>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../833/4870833.xml">
Gnits Standards</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../152/7072152.xml">
Build automation</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../203/1462203.xml">
GNU Coding Standards</link></entry>
</list>
</p>

</sec>
<sec>
<st>
 References </st>

<p>

<reflist>
<entry id="1">
 http://autotoolset.sourceforge.net/tutorial.html#SEC40 </entry>
<entry id="2">
<weblink xlink:type="simple" xlink:href="http://www.gnu.org/software/autoconf/manual/html_node/Writing-Autoconf-Input.html''Autoconf'',">
“Writing configure.ac”</weblink></entry>
</reflist>
</p>

</sec>
<sec>
<st>
Further reading</st>
<p>

<list>
<entry level="1" type="bullet">

 <cite style="font-style:normal" class="book">Gary V. Vaughan, Ben Elliston, Tom Tromey, and Ian Lance Taylor&#32;(October 2000). <weblink xlink:type="simple" xlink:href="http://www.sourceware.org/autobook">
GNU Autoconf, Automake, and Libtool</weblink>, 1st edition,&#32;New Riders. ISBN 1-57870-190-2.</cite>&nbsp;</entry>
</list>
</p>

</sec>
<sec>
<st>
External links</st>
<p>

<list>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://airs.com/ian/configure/">
The GNU configure and build system</weblink></entry>
<entry level="1" type="bullet">

The <weblink xlink:type="simple" xlink:href="http://www.freedesktop.org/software/pkgconfig/">
pkg-config</weblink> package</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://sources.redhat.com/automake/automake.html">
automake manual</weblink></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.gnu.org/software/automake/">
GNU automake documentation</weblink></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.gnu.org/software/autoconf/">
GNU autoconf documentation</weblink></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.lrde.epita.fr/~adl/autotools.html">
Autotools Tutorial</weblink></entry>
</list>
</p>
<p>

<table style=";" class="navbox" cellspacing="0">
<row>
<col style="padding:2px;">
<table style="width:100%;background:transparent;color:inherit;;" class="nowraplinks collapsible autocollapse " cellspacing="0">
<row>
<header colspan="3" style=";" class="navbox-title">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<medium wordnetid="106254669" confidence="0.8">
<link xlink:type="simple" xlink:href="../549/275549.xml">
GNU Project</link></medium>
</instrumentality>
</artifact>
</header>
</row>
<row style="height:2px;">

</row>
<row>
<col style=";;" class="navbox-group">
History</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;padding:0.25em 0; line-height:1.4em;;;" class="navbox-list navbox-odd">
<product wordnetid="104007894" confidence="0.8">
<creation wordnetid="103129123" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<oeuvre wordnetid="103841417" confidence="0.8">
<end_product wordnetid="103287178" confidence="0.8">
<medium wordnetid="106254669" confidence="0.8">
<link xlink:type="simple" xlink:href="../592/12592.xml">
GNU Manifesto</link></medium>
</end_product>
</oeuvre>
</instrumentality>
</artifact>
</creation>
</product>
&nbsp;·  <group wordnetid="100031264" confidence="0.8">
<link xlink:type="simple" xlink:href="../437/18949437.xml">
Free Software Foundation</link></group>
&nbsp;·  <link xlink:type="simple" xlink:href="../064/9374064.xml">
History of free software</link></col>
<col style="width:0%;padding:0px 0px 0px 2px;" rowspan="9">
<image width="64px" src="Heckert_GNU_white.svg">
<caption>

GNU is not a gnu
</caption>
</image>
</col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
Licences</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;padding:0.25em 0; line-height:1.4em;;;" class="navbox-list navbox-even">
<link xlink:type="simple" xlink:href="../683/18938683.xml">
GNU General Public License</link>&nbsp;·  <link xlink:type="simple" xlink:href="../073/13073.xml">
GNU Lesser General Public License</link>&nbsp;·  <link xlink:type="simple" xlink:href="../801/6842801.xml">
Affero General Public License</link>&nbsp;·  <link xlink:type="simple" xlink:href="../782/18938782.xml">
GNU Free Documentation License</link>&nbsp;·  <link xlink:type="simple" xlink:href="../406/390406.xml">
GPL linking exception</link></col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
Software</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;padding:0.25em 0; line-height:1.4em;;;" class="navbox-list navbox-odd">
<link xlink:type="simple" xlink:href="../875/11875.xml">
GNU</link> (<link xlink:type="simple" xlink:href="../973/8820973.xml">
variants</link>)&nbsp;·  <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../236/13236.xml">
Hurd</link></software>
&nbsp;·  <link xlink:type="simple" xlink:href="../362/12362.xml">
GNOME</link>&nbsp;·  <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../018/7404018.xml">
Gnuzilla</link></software>
&nbsp;·  <software wordnetid="106566077" confidence="0.8">
<application wordnetid="106570110" confidence="0.8">
<program wordnetid="106568978" confidence="0.8">
<browser wordnetid="106571301" confidence="0.8">
<written_communication wordnetid="106349220" confidence="0.8">
<writing wordnetid="106359877" confidence="0.8">
<code wordnetid="106355894" confidence="0.8">
<coding_system wordnetid="106353757" confidence="0.8">
<link xlink:type="simple" xlink:href="../024/9937024.xml">
IceCat</link></coding_system>
</code>
</writing>
</written_communication>
</browser>
</program>
</application>
</software>
&nbsp;·  <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<player wordnetid="110439851" confidence="0.8">
<contestant wordnetid="109613191" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../806/2844806.xml">
Gnash</link></causal_agent>
</contestant>
</player>
</person>
</physical_entity>
&nbsp;·  <link xlink:type="simple" xlink:href="../547/4547.xml">
Bash</link>&nbsp;·  <physical_entity wordnetid="100001930" confidence="0.8">
<communicator wordnetid="109610660" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<compiler wordnetid="109946957" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<writer wordnetid="110794014" confidence="0.8">
<link xlink:type="simple" xlink:href="../323/12323.xml">
GCC</link></writer>
</causal_agent>
</compiler>
</person>
</communicator>
</physical_entity>
&nbsp;·  <link xlink:type="simple" xlink:href="../234/18933234.xml">
GNU Emacs</link>&nbsp;·  <structure wordnetid="104341686" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<area wordnetid="102735688" confidence="0.8">
<library wordnetid="103660909" confidence="0.8">
<room wordnetid="104105893" confidence="0.8">
<link xlink:type="simple" xlink:href="../364/324364.xml">
glibc</link></room>
</library>
</area>
</artifact>
</structure>
&nbsp;·  <link xlink:type="simple" xlink:href="../194/940194.xml">
Coreutils</link>&nbsp;·  <artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<tool wordnetid="104451818" confidence="0.8">
<implement wordnetid="103563967" confidence="0.8">
<link xlink:type="simple" xlink:href="../984/171984.xml">
Build system</link></implement>
</tool>
</instrumentality>
</artifact>
&nbsp;·  <link xlink:type="simple" xlink:href="../936/774936.xml">
Other GNU packages and programs</link></col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
Public speakers</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;padding:0.25em 0; line-height:1.4em;;;" class="navbox-list navbox-even">
<link xlink:type="simple" xlink:href="../966/801966.xml">
Robert J. Chassell</link>&nbsp;·  <link>
Loïc Dachary</link>&nbsp;·  <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<computer_user wordnetid="109951274" confidence="0.8">
<programmer wordnetid="110481268" confidence="0.8">
<engineer wordnetid="109615807" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<research_worker wordnetid="110523076" confidence="0.8">
<link xlink:type="simple" xlink:href="../686/10561686.xml">
Ricardo Galli</link></research_worker>
</scientist>
</causal_agent>
</engineer>
</programmer>
</computer_user>
</person>
</physical_entity>
&nbsp;·  <physical_entity wordnetid="100001930" confidence="0.8">
<disputant wordnetid="109615465" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<reformer wordnetid="110515194" confidence="0.8">
<computer_user wordnetid="109951274" confidence="0.8">
<militant wordnetid="110315837" confidence="0.8">
<programmer wordnetid="110481268" confidence="0.8">
<engineer wordnetid="109615807" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../429/1303429.xml">
Georg C. F. Greve</link></causal_agent>
</engineer>
</programmer>
</militant>
</computer_user>
</reformer>
</person>
</disputant>
</physical_entity>
&nbsp;·  <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<computer_user wordnetid="109951274" confidence="0.8">
<programmer wordnetid="110481268" confidence="0.8">
<engineer wordnetid="109615807" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../098/3864098.xml">
Federico Heinz</link></causal_agent>
</engineer>
</programmer>
</computer_user>
</person>
</physical_entity>
&nbsp;·  <person wordnetid="100007846" confidence="0.9508927676800064">
<research_worker wordnetid="110523076" confidence="0.9173553029164789">
<link xlink:type="simple" xlink:href="../645/3306645.xml">
Benjamin Mako Hill</link></research_worker>
</person>
&nbsp;·  <person wordnetid="100007846" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../799/1609799.xml">
Bradley M. Kuhn</link></person>
&nbsp;·  <celebrity wordnetid="109903153" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../972/383972.xml">
Eben Moglen</link></celebrity>
&nbsp;·  <president wordnetid="110468559" confidence="0.9173553029164789">
<person wordnetid="100007846" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../143/3434143.xml">
Richard Stallman</link></person>
</president>
&nbsp;·  <person wordnetid="100007846" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../380/12284380.xml">
John Sullivan</link></person>
&nbsp;·  <scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../587/7122587.xml">
Leonard H. Tower Jr.</link></scientist>
</col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
Other topics</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;padding:0.25em 0; line-height:1.4em;;;" class="navbox-list navbox-odd">
<controversy wordnetid="107183151" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<dispute wordnetid="107181935" confidence="0.8">
<disagreement wordnetid="107180787" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<speech_act wordnetid="107160883" confidence="0.8">
<link xlink:type="simple" xlink:href="../787/501787.xml">
GNU/Linux naming controversy</link></speech_act>
</psychological_feature>
</act>
</disagreement>
</dispute>
</event>
</controversy>
&nbsp;·  <product wordnetid="104007894" confidence="0.8">
<creation wordnetid="103129123" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<social_event wordnetid="107288639" confidence="0.8">
<movie wordnetid="106613686" confidence="0.8">
<show wordnetid="106619065" confidence="0.8">
<documentary wordnetid="106616806" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<link xlink:type="simple" xlink:href="../501/186501.xml">
Revolution OS</link></psychological_feature>
</documentary>
</show>
</movie>
</social_event>
</event>
</artifact>
</creation>
</product>
</col>
</row>
</table>
</col>
</row>
</table>

</p>


</sec>
</bdy>
</implement>
</tool>
</instrumentality>
</artifact>
</article>
