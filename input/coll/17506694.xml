<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 17.04.2009 04:16:12[mciao0826] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<method  confidence="0.9511911446218017" wordnetid="105660268">
<header>
<title>Wang and Landau algorithm</title>
<id>17506694</id>
<revision>
<id>220357993</id>
<timestamp>2008-06-19T13:45:09Z</timestamp>
<contributor>
<username>Padraic</username>
<id>199378</id>
</contributor>
</revision>
<categories>
<category>Monte_Carlo_methods</category>
</categories>
</header>
<bdy>

The <b>Wang and Landau algorithm</b> is an extension of <link xlink:type="simple" xlink:href="../107/56107.xml">
Metropolis Monte Carlo</link> sampling.<p>

Initially designed for physical systems, the Metropolis Monte Carlo method was based on <link xlink:type="simple" xlink:href="../255/544255.xml">
Boltzmann</link>'s insight that at a given temperature molecules are distributed between high energy, or unfavorable states, and low energy, or favorable states, with a probability given by both the energy difference and the density of states. Thus if there is an extremely large number of less-favored states, the less-favored states will dominate, if the temperature is sufficiently high to overcome the energy difference. This is seen, for instance, when wax melts. At a low temperature only the favorable, solid states are reachable. As temperature rises, a huge number of less favored states becomes possible, and the solid turns into a liquid.</p>
<p>

The Wang and Landau algorithm is designed to calculate the <link xlink:type="simple" xlink:href="../887/525887.xml">
density of states</link> of a computer-simulated system, such as an <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<model wordnetid="110324560" confidence="0.8">
<assistant wordnetid="109815790" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../744/292744.xml">
Ising model</link></causal_agent>
</worker>
</assistant>
</model>
</person>
</physical_entity>
 of spin glasses, or model atoms in a molecular force field.</p>

<sec>
<st>
Algorithm</st>

<p>

Firstly the minimum and maximum possible states of the system are calculated. For instance for an Ising model the most favorable state is when all cells are spinning in the same direction, and the least favorable state is a checkerboard pattern. The range is then divided into a given number of discrete histogram entries.</p>
<p>

Initially the density of states <it>g</it>(<it>E</it>) is unknown so all densities are set to unity. In fact densities typically range over such a huge interval that we use log space. A visits histogram <it>H</it>(<it>E</it>) is also maintained. Initially all bins have zero visits. The algorithm then runs a Monte Carlo-like simulation, filling the visits histogram. However instead of using the Metropolis criterion for acceptance, the probability of acceptance is given by the density of states. Call the density of states histogram <it>g</it>. Moves are accepted if</p>
<p>

<indent level="1">

<math>p &amp;lt; \min\left\{ 1, \frac{g(E)}{g(E')} \right\},</math>
</indent>

where <it>p</it> is a uniform random number on [0, 1), ''E'' is the energy of the current state, ''E''&amp;prime; the energy of the proposed move.

If the move is rejected the current histogram bin is incremented. The visits histogram is incremented by 1 on each move, the density of states histogram ''g''(''E'') is multiplied by a constant factor, initially usually ''e'' = 2.72 ([[Euler's number]]). When the visits histogram, call it ''H'', is flat ''g''(''E'') contains an accurate estimate of the density of states, within the limits of the modification factor.

The visits histogram ''H''(''E'') is then reset to zero, and the modification factor reduced, typically to the square root of the previous factor, to produce a finer estimate of ''g''(''E''). 

The algorithm works because the move function is, by definition, sampling from the true density of states. So if acceptance by the reciprocal of the density of states produces and even histogram, the estimate must be accurate. In fact ''H''(''E'') can never reach perfect flatness, so some criterion must be used &mdash; typically 10% difference or less between the highest and lowest entry. 

The density of states is temperature independent. However, it can be used to determine what the state of the system will be in for any given temperature. 

===Sample code===

The following is an (unoptimized) sample code of the Wang-Landau algorithm in [[D programming language]]:

real[real] log_g;     // this associative array stores the log of the density of states
uint[real] H;         // this stores the histogram</p>
<p>

real E_old = the_system.energy();    // this stores the old energy.
real F = 1;                          // the modification factor.</p>

<p>

while(F &amp;gt; epsilon) {
the_system.evolve();               // propose a new configuration of the system.
real E_new = the_system.energy();  // compute the current system energy.</p>
<p>

if (log_g[E_new]  log_g[E_old])   // check if the proposal is accepted.
E_old = E_new;
else if (random()  exp(log_g[E_old] - log_g[E_new]))
E_old = E_new;
else
the_system.reject_and_undo();</p>
<p>

H[E_old]++;                 // update the histogram and density of states.
log_g[E_old] += F;</p>
<p>

if (is_flat(H)) {           // when the histogram is flat,
H = 0;                  //   reset it and reduce the modification factor.
F *= 0.5;
}
}</p>

<p>

return log_g;</p>


</sec>
<sec>
<st>
References</st>
<p>



<list>
<entry level="1" type="bullet">

 F. Wang and D.P. Landau. Efficient Multiple Range Random Walk Algorithm to Calculate Density of States. <it>Phys Rev Lett</it> <b>86</b>, 2050 (2001)</entry>
</list>
</p>

</sec>
</bdy>
</method>
</article>
