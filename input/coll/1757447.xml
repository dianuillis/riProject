<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 18:53:11[mciao0827] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<pause  confidence="0.8" wordnetid="115271008">
<extension  confidence="0.8" wordnetid="115272382">
<time_interval  confidence="0.8" wordnetid="115269513">
<delay  confidence="0.8" wordnetid="115272029">
<header>
<title>Extension (Mac OS)</title>
<id>1757447</id>
<revision>
<id>239191505</id>
<timestamp>2008-09-18T04:31:40Z</timestamp>
<contributor>
<username>FairuseBot</username>
<id>1022055</id>
</contributor>
</revision>
<categories>
<category>Mac OS</category>
<category>Software extensions</category>
</categories>
</header>
<bdy>

On the <link xlink:type="simple" xlink:href="../979/19006979.xml">
Apple Macintosh</link> operating system prior to <link xlink:type="simple" xlink:href="../640/20640.xml">
Mac OS X</link>, <b>extensions</b> were small pieces of code that extended the system's functionality. They were run initially at start-up time, and operated by a variety of mechanisms, including trap patching and other code modifying techniques. Initially an Apple developer hack, extensions became the standard way to provide a modular operating system. Large amounts of important system services such as the TCP/IP network stacks (MacTCP and Open Transport) and USB and Firewire support were optional components implemented as extensions. The term "system extension" later came to encompass <link xlink:type="simple" xlink:href="#xpointer(//*[./st=%22Faceless+background+applications%22])">
faceless background applications</link> as well.<p>

Extensions generally filled the same role as <link xlink:type="simple" xlink:href="../146/8146.xml">
DOS</link>'s <link xlink:type="simple" xlink:href="../741/69741.xml">
terminate and stay resident</link> programs, or <family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../642/31642.xml">
Unix</link></family>
's <link xlink:type="simple" xlink:href="../986/458986.xml">
daemons</link>, although they did have additional functionality to modify existing OS behaviour the other two did not.</p>

<sec>
<st>
The INIT mechanism</st>

<p>

The concept of extensions was not present in the original Macintosh system software, but the system nevertheless had a private patching mechanism that developers soon learned to take advantage of - the INIT loader. This code would search for system resources of type 'INIT', and load and run them at boot time. The code resources had to be stored directly in the Mac System file's <link xlink:type="simple" xlink:href="../655/146655.xml">
resource fork</link>, meaning it was only really available to "power users" who would be comfortable using <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../021/745021.xml">
ResEdit</link></software>
 or other resource editor.</p>
<p>

Since taking advantage of this mechanism was an unsupported hack, Apple responded by providing a more managed solution. Initially this itself was in the form of an 'INIT' resource placed in the System file, 'INIT 31' that would search for further <it>files</it> of type 'INIT' in the System Folder, and load and run INIT resources inside them. (This is why some veteran Mac programmers still refer to the extensions loading mechanism as the "INIT 31 trick" <weblink xlink:type="simple" xlink:href="http://www.mactech.com/articles/mactech/Vol.07/07.06/AShareUserName/">
http://www.mactech.com/articles/mactech/Vol.07/07.06/AShareUserName/</weblink>). INITs could now be installed simply by placing a file in the System Folder, well within the abilities of the average Mac user. Starting with System 7, extensions were relocated to the Extensions folder within the System Folder for convenience.</p>
<p>

Extensions retained the resource type of 'INIT' throughout their lifetime, and the loader was gradually enhanced to search for these resources in numerous places, including in the resource forks of control panels in a variety of formats and the <link xlink:type="simple" xlink:href="../710/842710.xml">
Chooser</link>.</p>

</sec>
<sec>
<st>
Extensions</st>

<p>

INITs evolved into system extensions, gaining additional <link xlink:type="simple" xlink:href="../704/168704.xml">
ad hoc</link> protocols along the way, such as supplying an icon to be displayed at boot time (origin of this was <link>
ShowINIT</link>). The 'parade of icons' across the screen as each extension loaded became familiar to all Mac users. Apple themselves eventually released major (but optional) pieces of the operating system as extensions, such as <software wordnetid="106566077" confidence="0.9508927676800064">
<format wordnetid="106636806" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../231/25231.xml">
QuickTime</link></format>
</software>
, <link xlink:type="simple" xlink:href="../264/590264.xml">
QuickDraw 3D</link> and many others. A substantial amount of services and drivers in Mac OS—both official and third party—were provided as extensions, allowing for the OS to be trimmed down by disabling them.</p>


<p>

System extensions were a common source of instability on the Macintosh, as third-party code was of variable quality and would often patch the system in ways that did not always work correctly. In addition different extensions might try to patch the same part of the system, which could lead to <link xlink:type="simple" xlink:href="../220/1938220.xml">
extension conflict</link>s and other instability. Tracking down these sources of trouble was another task most Mac users encountered at some point.</p>
<p>

The simplest way to clean-boot the operating system was to hold the shift key: loading of extensions would be bypassed. System 7.5 added the <b>Extensions Manager</b>, which allowed the user to quickly enable or disable particular extensions, and also to define sets of them that would work correctly together. Extensions Manager came with two read-only base sets provided: one that contained the subset of extensions needed for basic OS operation, and one that enabled all the official extensions that shipped with the OS but disabled all third-party extensions.</p>
<p>

The loading order of extensions was always based on the alphabetical sorting of their filenames, which was an amusing quirk. Thus the simple expedient of renaming an extension was one method by which conflicts that depended on loading order could be resolved.</p>

<ss1>
<st>
Configuration, and control panels</st>

<p>

System extensions had no user interface: there was no standard mechanism by which the user could configure the services provided by an extension. Extensions were able to alter the graphical interface (such as adding new menus to the menu bar) and thus accept user configuration, or they could be accompanied by an application to provide the configuration interface.</p>
<p>

With <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../354/345354.xml">
System 7</link></O>
, <link xlink:type="simple" xlink:href="../077/2187077.xml">
control panels</link> become separate Finder plugins on disc that could be launched by the user. By inserting INIT code into a control panel, it became possible to build extension/control panel hybrids that modified the operating system at boot time and contained their own in-built configuration interface in the same form as any other operating system control panel.</p>

</ss1>
</sec>
<sec>
<st>
Faceless background applications</st>

<p>

MultiFinder and System 7 and later supported fully-fledged <b>faceless background applications</b> similar to <link xlink:type="simple" xlink:href="../986/458986.xml">
UNIX daemons</link>. Examples included Time Synchronizer (<link xlink:type="simple" xlink:href="../548/47548.xml">
daylight saving time</link> adjustment and remote time synchronisation), Software Update Scheduler, and Folder Actions (folder event handling). Faceless background applications were regular applications with the simple restriction that they did not show up on the application menu. As such, they were prohibited from opening a window: if they did so, the system would freeze.
They were free to open global floating windows, however, since these could neither gain nor lose focus.</p>
<p>

The only technical differences between a faceless background application and a regular application were that the "Only background" flag was set in the 'SIZE' resource.</p>
<p>

The Control Strip in Mac OS 8 and 9 was an example of a faceless background application that displayed—in defiance of the term "faceless"—a global floating window to provide user interaction. The Application Switcher was another. However, the user was not aware at any time that the Control Strip was a running process; it was simply presented as an extra interface feature. The system simply described faceless background applications as system applications.</p>
<p>

Language features in the Open Scripting Architecture (and thus <language wordnetid="106282651" confidence="0.8">
<link xlink:type="simple" xlink:href="../392/88392.xml">
AppleScript</link></language>
) were initially implemented as dynamically-loadable plugins known as "scripting additions" or OSAXes. In Mac OS 8 and 9, these were augmented by faceless background applications that were loaded in the background on demand. Just as with regular applications, these applications were accessed using tell clauses: the global namespace was not updated as was the case with OSAXes. The operating system did not indicate the launch of such processes nor indicate whether or not they were running.</p>

</sec>
<sec>
<st>
Viral vectors</st>

<p>

INITs and System extensions were the way by which some of the earliest known <link xlink:type="simple" xlink:href="../196/18994196.xml">
computer virus</link>es were transmitted - the fact that the system blindly loaded and executed an INIT's code was an obvious security risk, but in the days of limited networking and no Internet connectivity, the globally widespread viruses of today were unknown.</p>

</sec>
<sec>
<st>
Other non-INIT extensions</st>

<p>

INIT-type extensions were loaded at boot time to update the operating system. Confusingly, various other files were placed into the Extensions folder, many of which were not loaded at boot time. The most notable of these were <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<structure wordnetid="104341686" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<area wordnetid="102735688" confidence="0.8">
<library wordnetid="103660909" confidence="0.8">
<format wordnetid="106636806" confidence="0.8">
<room wordnetid="104105893" confidence="0.8">
<link xlink:type="simple" xlink:href="../421/106421.xml#xpointer(//*[./st=%22Shared+library%22])">
shared libraries</link></room>
</format>
</library>
</area>
</artifact>
</structure>
</information>
</message>
 which were commonly put into the Extensions folder for ease of location. Shared libraries are not loaded at boot time.</p>
<p>

INIT was not the only type of system extension. Another type is the <b>scri</b>, or WorldScript extension. The <link xlink:type="simple" xlink:href="../011/17240011.xml">
BootX</link> Linux bootloader was implemented as a <b>scri</b> simply because they are loaded very early on in the boot process before all other extensions. BootX could then display a dialog offering to let the user finish booting Mac OS or load Linux instead.</p>

</sec>
</bdy>
</delay>
</time_interval>
</extension>
</pause>
</article>
