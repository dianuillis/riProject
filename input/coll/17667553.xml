<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 17.04.2009 04:19:08[mciao0827] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>Hyper-heuristic</title>
<id>17667553</id>
<revision>
<id>233230243</id>
<timestamp>2008-08-21T01:27:07Z</timestamp>
<contributor>
<username>Cydebot</username>
<id>1215485</id>
</contributor>
</revision>
<categories>
<category>Heuristics</category>
<category>Operations research</category>
<category>Mathematical optimization</category>
</categories>
</header>
<bdy>

A <b>hyper-heuristic</b> is a <link xlink:type="simple" xlink:href="../452/63452.xml">
heuristic</link> search method that seeks to automate, often by the incorporation of <link xlink:type="simple" xlink:href="../488/233488.xml">
machine learning</link> techniques, the process of selecting, combining, generating or adapting several simpler heuristics (or components of such heuristics) to efficiently solve computational search problems. Hyper-heuristics can be thought of as "heuristics to choose heuristics".  One of the motivations for studying hyper-heuristics is to build systems which can handle classes of problems rather than solving just one problem.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref><ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%222%22])">2</ref>
<p>

There might be multiple heuristics from which one can choose for solving a problem, and each heuristic has its own strength and weakness. The idea is to automatically devise algorithms by combining the strength and compensating for the weakness of known heuristics. In a typical hyper-heuristic framework there is a high-level methodology and a set of low-level heuristics (either constructive or perturbative heuristics). Given a problem instance, the high-level method selects which low-level heuristic should be applied at any given time, depending upon the current problem state, or search stage.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%222%22])">2</ref></p>

<sec>
<st>
 Hyper-heuristics versus meta-heuristics </st>
<p>

The fundamental difference between <link xlink:type="simple" xlink:href="../458/774458.xml">
metaheuristics</link> and hyper-heuristics is that most implementations of metaheuristics search within a <link xlink:type="simple" xlink:href="../707/389707.xml">
search space</link> of problem solutions, whereas hyper-heuristics always search within a <link xlink:type="simple" xlink:href="../707/389707.xml">
search space</link> of heuristics. Thus, when using hyper-heuristics, we are attempting to find the right method or sequence of heuristics in a given situation rather than trying to solve a problem directly. Moreover, we are searching for a generally applicable methodology rather than solving a single problem instance.</p>
<p>

Hyper-heuristics could be regarded as "off-the-peg" methods as opposed to "made-to-measure" metaheuristics. They aim to be generic methods, which should produce solutions of acceptable quality, based on a set of easy-to-implement low-level heuristics.</p>

</sec>
<sec>
<st>
 Motivation </st>
<p>

Despite the significant progress in building search methodologies for a wide variety of application areas so far, such approaches still require specialists to integrate their expertise in a given problem domain. Many researchers from <link xlink:type="simple" xlink:href="../323/5323.xml">
computer science</link>, <link xlink:type="simple" xlink:href="../164/1164.xml">
artificial intelligence</link> and <link xlink:type="simple" xlink:href="../476/43476.xml">
operational research</link> have already acknowledged the need for developing automated systems to replace the role of a human expert in such situations. One of the main ideas for automating the design of heuristics requires the incorporation of <link xlink:type="simple" xlink:href="../488/233488.xml">
machine learning</link> mechanisms into algorithms to adaptively guide the search. Both learning and adaptation processes can be realised on-line or off-line, and be based on constructive or perturbative heuristics.</p>
<p>

A hyper-heuristic usually aims at reducing the amount of domain knowledge in the search methodology. The resulting approach should be cheap and fast to implement, requiring less expertise in either the problem domain or heuristic methods, and (ideally) it would be robust enough to effectively handle a range of problem instances from a variety of domains.</p>

</sec>
<sec>
<st>
 Origins </st>
<p>
 
The term hyper-heuristics was introduced in 2000 to describe the idea of "heuristics to choose heuristics".<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%223%22])">3</ref> The first easily accessible paper to use the term appeared in 2001.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%224%22])">4</ref> The first journal article to use the term appeared in 2003.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%225%22])">5</ref> The origin of the idea (although not the term) can be traced back to the early 1960s<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%226%22])">6</ref><ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%227%22])">7</ref> and was independently re-discovered and extended several times during the 1990s<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%228%22])">8</ref><ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%229%22])">9</ref><ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2210%22])">10</ref>. In the domain of Job Shop Scheduling, the pioneering work by Fisher and Thompson,<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%226%22])">6</ref><ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%227%22])">7</ref> hypothesized  and experimentally proved, using probabilistic learning, that combining scheduling rules (also known as priority or dispatching rules) was superior than any of the rules taken separately.  Although the term was not then in use, this was the first "hyper-heuristic" paper. Another root inspiring the concept of hyper-heuristics comes from the field of <link xlink:type="simple" xlink:href="../164/1164.xml">
artificial intelligence</link>. More specifically, it comes from work on <link xlink:type="simple" xlink:href="../641/1505641.xml">
automated planning</link> systems, and its eventual focus towards the problem of learning control knowledge. The so-called COMPOSER system, developed by Gratch et al.,<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2211%22])">11</ref><ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2212%22])">12</ref> was used for controlling satellite communication schedules involving a number of earth-orbiting satellites and three ground stations. The system can be characterized as a <link xlink:type="simple" xlink:href="../002/364002.xml">
hill-climbing</link> search in the space of possible control strategies.</p>

</sec>
<sec>
<st>
 Classification of approaches </st>
<p>

Hyper-heuristic approaches so far can be classified into two main categories. In the first class, captured by the phrase <it>heuristics to choose heuristics</it>, the hyper-heuristic framework is provided with a set of pre-existing, generally widely known heuristics for solving the target problem. The task is to discover a good sequence of applications of these heuristics for efficiently solving the problem.  In the second class, <it>heuristics to generate heuristics</it>, the key idea is to "evolve new heuristics by making use of the components of known heuristics."<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2213%22])">13</ref>  The process requires, as in the first class of hyper-heuristics, the selection of a suitable set of heuristics known to be useful in solving the target problem. However, instead of supplying these directly to the framework, the heuristics are first decomposed into their basic components.</p>
<p>

These two main broad types can be further categorised according to whether they are based on constructive or perturbative search. An
additional orthogonal classification of hyper-heuristics considers the source providing feedback during the learning process, which can be either one instance (<it>on-line learning</it>) or many instances of the underlying problem studied (<it>off-line learning</it>).</p>

<ss1>
<st>
 Heuristic to choose heuristics </st>

<p>

Discover good combinations of fixed, human-designed, well-known low-level heuristics.
<list>
<entry level="1" type="bullet">

 Based on constructive heuristics</entry>
<entry level="1" type="bullet">

 Based on perturbative heuristics</entry>
</list>
</p>

</ss1>
<ss1>
<st>
 Heuristics to generate heuristics </st>

<p>

Generate new heuristic methods using basic components of previously existing heuristic methods.
<list>
<entry level="1" type="bullet">

 Based on basic components of constructive heuristics</entry>
<entry level="1" type="bullet">

 Based on basic components of perturbative heuristics</entry>
</list>
</p>

</ss1>
<ss1>
<st>
 On-line learning hyper-heuristics </st>

<p>

The learning takes place while the algorithm is solving an instance of a problem, therefore, task-dependent local properties can be used by the high-level strategy to determine the appropriate low-level heuristic to apply. Examples of on-line learning approaches within hyper-heuristics are: the use of <link xlink:type="simple" xlink:href="../294/66294.xml">
reinforcement learning</link> for heuristic selection, and generally the use of <link xlink:type="simple" xlink:href="../458/774458.xml">
metaheuristics</link> as high-level search strategies over a search space of heuristics.</p>

</ss1>
<ss1>
<st>
 Off-line learning hyper-heuristics </st>

<p>

The idea is to gather knowledge in form of rules or programs, from a set of training instances, which would hopefully generalise to the process of solving unseen instances. Examples of off-line learning approaches
within hyper-heuristics are: learning classifier systems, case-base reasoning and <link xlink:type="simple" xlink:href="../424/12424.xml">
genetic programming</link>.</p>

</ss1>
</sec>
<sec>
<st>
 Applications </st>

<p>

Hyper-heuristics have been applied across many different problems. Indeed, one of the motivations of hyper-heuristics is to be able to operate across different problem types. The following list is a non-exhaustive selection of some of the problems and fields in which hyper-heuristics have been explored:</p>
<p>

<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../015/287015.xml">
bin packing problem</link> </entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../715/4715.xml">
boolean satisfiability problem</link> </entry>
<entry level="1" type="bullet">

 educational timetabling </entry>
<entry level="1" type="bullet">

 job shop scheduling </entry>
<entry level="1" type="bullet">

 multi-objective problem solving and space allocation </entry>
<entry level="1" type="bullet">

 nurse rostering </entry>
<entry level="1" type="bullet">

 personnel scheduling</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../248/31248.xml">
traveling salesman problem</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../668/7799668.xml">
vehicle routing problem</link></entry>
</list>
</p>

</sec>
<sec>
<st>
 Related areas </st>

<p>

Hyper-heuristics are not the only approach being investigated in the quest for more general and applicable search methodologies. Many researchers from computer science, <link xlink:type="simple" xlink:href="../164/1164.xml">
artificial intelligence</link> and <link xlink:type="simple" xlink:href="../476/43476.xml">
operational research</link> have already acknowledged the need for developing automated systems to replace the role of a human expert in the process of tuning and adapting search methodologies. The following list outlines some related areas of research: </p>
<p>

<list>
<entry level="1" type="bullet">

 adaptation and self-adaptation of algorithm parameters</entry>
<entry level="1" type="bullet">

 adaptive <link xlink:type="simple" xlink:href="../208/3989208.xml">
memetic algorithm</link> </entry>
<entry level="1" type="bullet">

 adaptive large neighborhood search</entry>
<entry level="1" type="bullet">

 algorithm configuration </entry>
<entry level="1" type="bullet">

 algorithm control </entry>
<entry level="1" type="bullet">

 algorithm portfolios </entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../424/12424.xml">
genetic programming</link></entry>
<entry level="1" type="bullet">

 indirect encodings in <link xlink:type="simple" xlink:href="../837/190837.xml">
evolutionary algorithms</link></entry>
<entry level="1" type="bullet">

 variable neighborhood search</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../290/3607290.xml">
reactive search</link></entry>
</list>
</p>

<ss1>
<st>
 See also </st>
<p>

<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../254/40254.xml">
genetic algorithms</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../424/12424.xml">
genetic programming</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../837/190837.xml">
evolutionary algorithms</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../942/313942.xml">
local search (optimization)</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../488/233488.xml">
machine learning</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../208/3989208.xml">
memetic algorithms</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../458/774458.xml">
metaheuristics</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../402/1297402.xml">
no free lunch in search and optimization</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../083/337083.xml">
particle swarm optimization</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../290/3607290.xml">
reactive search</link></entry>
</list>
</p>

</ss1>
</sec>
<sec>
<st>
 References and notes </st>

<p>

<reflist>
<entry id="1">
E. K. Burke, E. Hart, <scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../544/18063544.xml">
G. Kendall</link></scientist>
, J. Newall, P. Ross, and S. Schulenburg, Hyper-heuristics: An emerging direction in modern search technology, Handbook of Metaheuristics (F. Glover and G. Kochenberger, eds.), Kluwer, 2003, pp. 457–474.</entry>
<entry id="2">
P. Ross, Hyper-heuristics, Search Methodologies: Introductory Tutorials in Optimization and Decision Support Techniques (E. K. Burke and <scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../544/18063544.xml">
G. Kendall</link></scientist>
, eds.), Springer, 2005, pp. 529-556.</entry>
<entry id="3">
Cowling P. and Soubeiga E. Neighborhood Structures for Personnel Scheduling: A Summit Meeting Scheduling Problem (abstract), in proceedings of the 3rd International Conference on the Practice and Theory of Automated Timetabling, Burke E.K. and Erben W. (eds), 16-18 Aug 2000, Constance, Germany</entry>
<entry id="4">
 This was an extended version of the 2000 conference abstract: Cowling P., <scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../544/18063544.xml">
Kendall G.</link></scientist>
 and Soubeiga E., A Hyperheuristic Approach to Scheduling a Sales Summit, 2001, Lecture Notes in Computer Science 2079, Springer-Verlag, pp 176-190, 2001, ISBN : 3-540-42421-0, (doi: 10.1007/3-540-44629-X <weblink xlink:type="simple" xlink:href="http://dx.doi.org/10.1007/3-540-44629-X">
http://dx.doi.org/10.1007/3-540-44629-X</weblink>)</entry>
<entry id="5">
Burke E. K., <scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../544/18063544.xml">
Kendall G.</link></scientist>
, and Soubeiga E. (2003) A Tabu-Search Hyper-Heuristic for Timetabling and Rostering. Journal of Heuristics, 9(6):451-470. (doi: 10.1023/B:HEUR.0000012446.94732.b6 <weblink xlink:type="simple" xlink:href="http://dx.doi.org/10.1023/B:HEUR.0000012446.94732.b6">
http://dx.doi.org/10.1023/B:HEUR.0000012446.94732.b6</weblink>)</entry>
<entry id="6">
H. Fisher and G. L. Thompson, Probabilistic learning combinations of local job-shop scheduling rules, Factory Scheduling Conference (Carnegie Institute of Technology), 1961.</entry>
<entry id="7">
<list>
<entry level="1" type="bullet">

 H. Fisher and G. L. Thompson, Probabilistic learning combinations of local job-shop scheduling rules,Industrial Scheduling (New Jersey) (J. F. Muth and G. L. Thompson, eds.), Prentice-Hall, Inc, 1963, pp. 225–251.</entry>
</list>
</entry>
<entry id="8">
R. H. Storer, S. D. Wu, and R. Vaccari, New search spaces for sequencing problems with application to job shop scheduling, Management Science, 38 (10), 1992, 1495–1509.</entry>
<entry id="9">
H. L. Fang, P. Ross, and D. Corne, A promising genetic algorithm approach to job shop scheduling, rescheduling, and open-shop scheduling problems, Fifth International Conference on Genetic Algorithms (San Mateo) (S. Forrest, ed.), Morgan Kaufmann, 1993, pp. 375–382.</entry>
<entry id="10">
U. Dorndorf and E. Pesch, Evolution based learning in a job shop scheduling environment, Computers and Operations Research, 22(1), 1995, 25–40.</entry>
<entry id="11">
 J. Gratch, S. Chien, and G. DeJong, Learning search control knowledge for deep space network scheduling, Proceedings of the Tenth International Conference on Machine Learning (Amherst, MA), 1993, pp. 135–142.</entry>
<entry id="12">
J. Gratch and S. Chien, Adaptive problem-solving for large-scale scheduling problems: a case study, Journal of Artificial Intelligence Research, 4, 1996, 365–396.</entry>
<entry id="13">
M. Bader-El-Den and R. Poli, Generating sat local-search heuristics using a GP hyper-heuristic framework, Artificial Evolution, 8th International Conference, Evolution Artificielle, EA 2007, Tours, France, October 29-31, 2007, Revised Selected Papers. Lecture Notes in Computer Science 4926 Springer, 2008, pp. 37-49.</entry>
</reflist>
</p>

</sec>
<sec>
<st>
 External links </st>

<ss1>
<st>
 Research groups </st>
<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://cse.yeditepe.edu.tr/ARTI/">
Artificial Intelligence (ART+I) Laboratory</weblink>, <weblink xlink:type="simple" xlink:href="http://www.yeditepe.edu.tr/">
Yeditepe University</weblink>, <link xlink:type="simple" xlink:href="../639/11125639.xml">
Turkey</link></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.asap.cs.nott.ac.uk/">
Automated Scheduling, Optimisation and Planning (ASAP) Research Group</weblink>, <weblink xlink:type="simple" xlink:href="http://www.nottingham.ac.uk/">
University of Nottingham</weblink>, <link xlink:type="simple" xlink:href="../927/1048927.xml">
UK</link></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.macs.hw.ac.uk/isl/">
Intelligent Systems Lab</weblink>, <weblink xlink:type="simple" xlink:href="http://www.hw.ac.uk/home/">
Heriot-Watt University</weblink>, <link xlink:type="simple" xlink:href="../927/1048927.xml">
UK</link></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.mosaic.brad.ac.uk/home.php">
Modelling Optimisation Scheduling and Intelligent Control (MOSAIC) Research Group</weblink>, <weblink xlink:type="simple" xlink:href="http://www.bradford.ac.uk/">
University of Bradford</weblink>, <link xlink:type="simple" xlink:href="../927/1048927.xml">
UK</link></entry>
</list>
</p>

</ss1>
<ss1>
<st>
 Recent activities </st>
<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.cs.nott.ac.uk/~gxo/hhworkshop.html">
Workshop on Hyper-heuristics</weblink>, to be held in conjunction with <weblink xlink:type="simple" xlink:href="http://www.ppsn2008.org/">
PPSN X</weblink>, 10th International Conference on Parallel Problem Solving From Nature, Dortmund, Germany</entry>
</list>
</p>


</ss1>
</sec>
</bdy>
</article>
