<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 17.04.2009 04:29:09[mciao0827] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<system  confidence="0.8" wordnetid="104377057">
<artifact  confidence="0.8" wordnetid="100021939">
<instrumentality  confidence="0.8" wordnetid="103575240">
<header>
<title>Device file system</title>
<id>18016986</id>
<revision>
<id>244482077</id>
<timestamp>2008-10-11T00:44:37Z</timestamp>
<contributor>
<username>Prince Kassad</username>
<id>2763745</id>
</contributor>
</revision>
<categories>
<category>Device file</category>
<category>special purpose file systems</category>
</categories>
</header>
<bdy>

In <family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../815/31815.xml">
Unix-like</link></family>
 <link xlink:type="simple" xlink:href="../194/22194.xml">
operating systems</link>, a <b>device file system</b> or <b>special file system</b> allows software to interact with a device driver using standard <link xlink:type="simple" xlink:href="../558/14558.xml">
input/output</link> <link xlink:type="simple" xlink:href="../908/102908.xml">
system call</link>s, which simplifies many tasks.<p>

It includes <it>device files</it>, <it>device nodes</it>, or <it>device special files</it> which are <link xlink:type="simple" xlink:href="../746/620746.xml">
interfaces</link> for a <link xlink:type="simple" xlink:href="../101/9101.xml">
device driver</link> that appears in a <link xlink:type="simple" xlink:href="../280/1010280.xml">
file system</link> as if it were an ordinary <link xlink:type="simple" xlink:href="../077/7077.xml">
file</link>. There are also special device files on <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../001/19001.xml">
Microsoft</link></company>
 operating systems, such as <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../027/20027.xml">
MS-DOS</link></O>
 and <link xlink:type="simple" xlink:href="../890/18890.xml">
Windows</link>.</p>
<p>

Device files often provide simple interfaces to peripheral devices, such as printers. But they can also be used to access specific resources on those devices, such as <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../380/55380.xml">
disk partitions</link></instrumentality>
</artifact>
</system>
. Finally, device files are useful for accessing <link xlink:type="simple" xlink:href="../365/1728365.xml">
system resources</link> that have no connection with any actual device such as <link xlink:type="simple" xlink:href="../184/305184.xml">
data sink</link>s and <link xlink:type="simple" xlink:href="../939/2736939.xml">
random number generator</link>s.</p>
<p>

<O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../027/20027.xml">
MS-DOS</link></O>
 borrowed the concept of special files from Unix, but renamed them <it>device files</it>. Because early versions of MS-DOS did not support a <link xlink:type="simple" xlink:href="../027/5515027.xml">
directory</link> hierarchy, device files were distinguished from regular files by making their names <link xlink:type="simple" xlink:href="../723/49723.xml">
reserved word</link>s. This means that certain file names are reserved for device files, and cannot be used to name new files or directories.
The reserved names themselves are chosen to be compatible with "special files" handling of <link xlink:type="simple" xlink:href="../659/303659.xml#xpointer(//*[./st=%22PIP+in+CP/M%22])">
PIP</link> <link xlink:type="simple" xlink:href="../461/215461.xml">
command</link> in <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../146/45146.xml">
CP/M</link></O>
.</p>
<p>

There are two general kinds of device nodes in <family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../815/31815.xml">
Unix-like</link></family>
 operating systems, known as <it><link xlink:type="simple" xlink:href="../986/18016986.xml#xpointer(//*[./st=%22Character+devices%22])">
character special files</link></it> and <it><link xlink:type="simple" xlink:href="../986/18016986.xml#xpointer(//*[./st=%22Block+devices%22])">
block special files</link></it>.  The difference between them lies in how data written to them and read from them is processed by the operating system and hardware. These together can be called <b>device special files</b> in contrast to <link xlink:type="simple" xlink:href="../167/714167.xml">
named pipe</link>s, which are not connected to a device but are not ordinary files either.</p>

<sec>
<st>
Implementation</st>
<p>

By definition, device nodes correspond to resources that an operating-system <link xlink:type="simple" xlink:href="../394/50394.xml">
kernel</link> has already  allocated. Unix identified those resources by a <it>major number</it> and a <it>minor number</it>, both stored as part of the structure of a <link xlink:type="simple" xlink:href="../074/998074.xml">
 node</link>.  The assignment of these numbers occurs uniquely in different <link xlink:type="simple" xlink:href="../194/22194.xml">
operating system</link>s and on different <link xlink:type="simple" xlink:href="../196/81196.xml">
computer platform</link>s. Generally, the major number identifies the <link xlink:type="simple" xlink:href="../101/9101.xml">
device driver</link> and the minor number identifies a particular device (possibly out of many) that the driver controls: in this case the system may pass the minor number to a driver as an argument.</p>
<p>

As with other special file types, the computer system accesses device nodes using standard <link xlink:type="simple" xlink:href="../908/102908.xml">
system call</link>s and treats them like regular <link xlink:type="simple" xlink:href="../077/7077.xml">
computer file</link>s.  Two standard types of device files exist, differentiated by the type of hardware with which they interface and the way the operating system processes <link xlink:type="simple" xlink:href="../558/14558.xml">
 input and output</link> operations.</p>

</sec>
<sec>
<st>
Devices</st>

<ss1>
<st>
Character devices</st>
<p>

<image location="right" width="64px" src="Nuvola-fs-chardev.svg">
</image>

<it>Character special files</it> or <it>character devices</it> relate to devices through which the system transmits data one character at a time.  These device nodes often serve for <link xlink:type="simple" xlink:href="../054/1168054.xml">
stream communication</link> with devices such as <link xlink:type="simple" xlink:href="../247/31247.xml">
teletype machine</link>s, <link xlink:type="simple" xlink:href="../854/41854.xml">
virtual terminal</link>s, and <link xlink:type="simple" xlink:href="../900/19443900.xml">
serial modems</link>, and usually do not support <link xlink:type="simple" xlink:href="../612/25612.xml">
random access</link> to data.</p>
<p>

In most implementations, character devices use <link xlink:type="simple" xlink:href="../183/2406183.xml">
 unbuffered</link> input and output routines.  The system reads each character from the device immediately or writes each character to the device immediately.</p>

</ss1>
<ss1>
<st>
Block devices</st>
<p>

<image location="right" width="64px" src="Nuvola-fs-blockdev.svg">
</image>

<it>Block special files</it> or <it>block devices</it> correspond to devices through which the system moves data in the form of <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../667/313667.xml">
blocks</link></instrumentality>
</artifact>
</system>
.  These device nodes often represent addressable devices such as <link xlink:type="simple" xlink:href="../777/13777.xml">
hard disk</link>s, <recording wordnetid="104063868" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<sound_recording wordnetid="104262678" confidence="0.8">
<memory_device wordnetid="103744840" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<phonograph_record wordnetid="103924069" confidence="0.8">
<medium wordnetid="106254669" confidence="0.8">
<link xlink:type="simple" xlink:href="../902/18959902.xml">
CD-ROM</link></medium>
</phonograph_record>
</device>
</memory_device>
</sound_recording>
</instrumentality>
</artifact>
</recording>
 drives, or <link xlink:type="simple" xlink:href="../300/5300.xml">
memory-regions</link>.</p>
<p>

Block devices often support <link xlink:type="simple" xlink:href="../612/25612.xml">
random access</link> and <link xlink:type="simple" xlink:href="../554/5349554.xml">
seeking</link>, and generally use <link xlink:type="simple" xlink:href="../183/2406183.xml">
buffered</link> input and output routines.  The operating system allocates a <link xlink:type="simple" xlink:href="../183/2406183.xml">
data buffer</link> to hold a single block each for input and output.  When a program sends a request to read data from or to write data to the device, the system stores each character of that data in the appropriate buffer.  When the buffer fills up, the appropriate operation takes place (data transfer) and the system clears the buffer.</p>

</ss1>
<ss1>
<st>
Pseudo-devices</st>
<p>

Device nodes on Unix-like systems do not necessarily have to correspond to <link xlink:type="simple" xlink:href="../929/327929.xml">
physical device</link>s. Nodes that lack this correspondence form the group of <it>pseudo-devices</it>.  They provide various functions handled by the operating system.  Some of the most commonly-used (character-based) pseudo-devices include:</p>
<p>

<list>
<entry level="1" type="definition">

<link xlink:type="simple" xlink:href="../184/305184.xml">
/dev/null</link>:Accepts and discards all input; produces no output.</entry>
<entry level="1" type="definition">

<link xlink:type="simple" xlink:href="../450/18429450.xml">
/dev/full</link>:Always full device.</entry>
<entry level="1" type="definition">

<link xlink:type="simple" xlink:href="../138/3864138.xml">
/dev/loop</link>: <link xlink:type="simple" xlink:href="../138/3864138.xml">
loopback disk device</link></entry>
<entry level="1" type="definition">

<link xlink:type="simple" xlink:href="../892/591892.xml">
/dev/zero</link>:Produces a continuous stream of <accomplishment wordnetid="100035189" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<action wordnetid="100037396" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<feat wordnetid="100036762" confidence="0.8">
<link xlink:type="simple" xlink:href="../161/338161.xml">
NUL</link></feat>
</psychological_feature>
</act>
</action>
</event>
</accomplishment>
 (zero value) characters.</entry>
<entry level="1" type="definition">

<link xlink:type="simple" xlink:href="../128/776128.xml">
/dev/random</link>:Produces a variable-length stream of pseudo-random characters. (Blocking)</entry>
<entry level="1" type="definition">

<link xlink:type="simple" xlink:href="../128/776128.xml">
/dev/urandom</link>:Produces a variable-length stream of pseudo-random characters. (Non-Blocking)</entry>
</list>
</p>

</ss1>
</sec>
<sec>
<st>
Node creation</st>
<p>

Nodes are created by the <b>mknod</b> system call. The command-line program for creating nodes has the same name. Nodes can be moved or deleted by the usual filesystem system calls (<link xlink:type="simple" xlink:href="../489/2703489.xml">
rename</link>, <link xlink:type="simple" xlink:href="../130/10869130.xml">
unlink</link>) and commands (<link xlink:type="simple" xlink:href="../613/1202613.xml">
mv</link>, <link xlink:type="simple" xlink:href="../567/1491567.xml">
rm</link>). When passed the option -R or -a while copying a device node, the <link xlink:type="simple" xlink:href="../859/792859.xml">
cp</link> command creates a new device node with the same attributes of the original.</p>
<p>

Some Unix versions include a script named <b>makedev</b> to create all necessary devices in the directory /dev.</p>

</sec>
<sec>
<st>
Naming conventions</st>
<p>

The following prefixes have come into common use in Linux-based systems, to identify device nodes generically in the /dev hierarchy:<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref>
<list>
<entry level="1" type="bullet">

 fd: <link xlink:type="simple" xlink:href="../891/10891.xml">
floppy disk</link>s</entry>
<entry level="1" type="bullet">

 hd: <link xlink:type="simple" xlink:href="../778/2778.xml">
 IDE</link> <link xlink:type="simple" xlink:href="../777/13777.xml">
hard disk</link>s</entry>
<entry level="1" type="bullet">

 lp: <link xlink:type="simple" xlink:href="../272/5272.xml">
 printer</link>s (compare <link xlink:type="simple" xlink:href="../076/469076.xml">
lp</link>)</entry>
<entry level="1" type="bullet">

 par: <link xlink:type="simple" xlink:href="../616/100616.xml">
parallel port</link>s</entry>
<entry level="1" type="bullet">

 pt: <artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<tool wordnetid="104451818" confidence="0.8">
<implement wordnetid="103563967" confidence="0.8">
<link xlink:type="simple" xlink:href="../580/719580.xml">
 pseudo-terminal</link></implement>
</tool>
</instrumentality>
</artifact>
s (virtual terminals)</entry>
<entry level="1" type="bullet">

 s: <link xlink:type="simple" xlink:href="../313/28313.xml">
SCSI</link> devices in general, notably hard disks (but also SATA and USB disks)</entry>
<entry level="2" type="bullet">

 scd: SCSI audio-oriented <link xlink:type="simple" xlink:href="../592/299592.xml">
optical disc drive</link>s</entry>
<entry level="2" type="bullet">

 sd: SCSI hard disks (also SATA or USB disks)</entry>
<entry level="2" type="bullet">

 sg: SCSI generic devices</entry>
<entry level="2" type="bullet">

 sr: SCSI data-oriented optical disc drives</entry>
<entry level="2" type="bullet">

 st: SCSI <link xlink:type="simple" xlink:href="../505/20505.xml">
magnetic tape</link>s</entry>
<entry level="1" type="bullet">

 tty: (physical) <link xlink:type="simple" xlink:href="../402/249402.xml">
 terminal</link>s</entry>
<entry level="2" type="bullet">

 ttyS: <link xlink:type="simple" xlink:href="../359/77359.xml">
serial port</link>s</entry>
</list>
</p>
<p>

For most devices, this prefix is followed by a number uniquely identifying the particular device. For hard drives, a letter is used to identify devices and is followed by a number to identify partitions. Thus a file system may "know" an area on a disk as /dev/sda3, for example, or "see" a networked terminal session as associated with /dev/pts/14.</p>
<p>

Some Linux distributions use the SCSI layer to access all fixed disks, so that they are made accessible via sd devices even if technically they are not SCSI.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%222%22])">2</ref></p>

</sec>
<sec>
<st>
devfs</st>
<p>

<it>devfs</it> is a specific implementation of a device file system on <family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../815/31815.xml">
Unix-like</link></family>
 operating systems, used for presenting <link xlink:type="simple" xlink:href="../986/18016986.xml">
device file</link>s, an abstraction for accessing <link xlink:type="simple" xlink:href="../558/14558.xml">
I/O</link> and other <link xlink:type="simple" xlink:href="../ago/Austin=2C_C$hicago.xml">
peripherals</link>.  The underlying mechanism of implementation may vary, depending on the <link xlink:type="simple" xlink:href="../194/22194.xml">
OS</link>.</p>
<p>

Maintaining these special files on a general-purpose file system is inconvenient, and as it needs kernel assistance anyway, the idea of a special-purpose file system that is not stored on disk arose.</p>
<p>

Also defining when devices are ready to appear is not entirely trivial. The 'devfs' approach is for the device driver to request synchronously creation and deletion of 'devfs' entries related to the devices it enables and disables, and this makes it much simpler and with easier to understand semantics than systems like <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../907/1233907.xml">
udev</link></software>
 that have complicated asynchronous notifications.</p>
<p>

Another advantage is that unlike <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../907/1233907.xml">
udev</link></software>
 it does not require any user-space daemon, thus making for a simpler and quicker boot, it does support one to allow user-space actions on device file creation and deletion.</p>

<ss1>
<st>
Implementations</st>


<p>

<table style="width: 100%; text-align: center; font-size: smaller; table-layout: fixed;" class="wikitable">
<row>
<header>
Operating System</header>
<header>
Device file system</header>
<header>
 Standard <link>
mount-point</link></header>
<header>
Author</header>
<header>
Notes</header>
</row>
<row>
<header>
 2.4 = <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../297/6097297.xml">
Linux</link></O>
2.6.18</header>
<col>
devfs</col>
<col>
/dev</col>
<col>
 <link>
Richard Gooch</link></col>
<col>
 Implemented fully in the kernel. DEPRECATED: Users are encouraged to migrate to <link xlink:type="simple" xlink:href="../907/1233907.xml">
udev</link>.</col>
</row>
<row>
<header>
 2.6.15 = <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../297/6097297.xml">
Linux</link></O>
</header>
<col>
 <link xlink:type="simple" xlink:href="../907/1233907.xml">
udev</link></col>
<col>
/dev</col>
<col>
 <person wordnetid="100007846" confidence="0.9508927676800064">
<programmer wordnetid="110481268" confidence="0.9173553029164789">
<link xlink:type="simple" xlink:href="../241/5788241.xml">
Greg Kroah-Hartman</link></programmer>
</person>
, <link>
Kay Sievers</link> and <link>
Dan Stekloff</link></col>
<col>
 Implemented largely in user space, device information is gathered from <link xlink:type="simple" xlink:href="../775/2127775.xml">
sysfs</link>. Device files can be stored on a conventional general-purpose file system, or in a memory file system (<link xlink:type="simple" xlink:href="../206/415206.xml">
tmpfs</link>).</col>
</row>
<row>
<header>
 <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../145/46145.xml">
Solaris</link></database>
</wordnet>
</lexical_database>
</electronic_database>
</information>
</message>
</header>
<col>
devfs</col>
<col>
/devices</col>
<col>
 <company wordnetid="108058098" confidence="0.8">
<institution wordnetid="108053576" confidence="0.8">
<link xlink:type="simple" xlink:href="../980/26980.xml">
Sun Microsystems</link></institution>
</company>
</col>

</row>
<row>
<header>
 2.0 = <platform wordnetid="103961939" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<surface wordnetid="104362025" confidence="0.8">
<horizontal_surface wordnetid="103536348" confidence="0.8">
<link xlink:type="simple" xlink:href="../554/7580554.xml">
FreeBSD</link></horizontal_surface>
</surface>
</artifact>
</platform>
</header>
<col>
devfs</col>
<col>
/dev</col>
<col style="background: white; color: black;" class="table-unknown">
?</col>
<col>
Implemented fully in the kernel.</col>
</row>
<row>
<header>
 <link xlink:type="simple" xlink:href="../640/20640.xml">
Mac OS X</link></header>
<col>
devfs</col>
<col>
/dev</col>
<col style="background: white; color: black;" class="table-unknown">
?</col>
<col>
Implemented fully in the kernel.</col>
</row>
<row>
<header>
 <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../226/24226.xml">
Plan 9</link></O>
</header>

<col>
#</col>
<col style="background: white; color: black;" class="table-unknown">
?</col>
<col>
Implemented in kernel. Can not be mounted elsewhere or unmounted.</col>
</row>
</table>
</p>

</ss1>
</sec>
<sec>
<st>
Device files</st>
<p>

Some device files for DOS- and Windows-based operating systems are listed below:
<table cellpadding="4" class="wikitable">
<header>
File name</header>
<header>
Purpose</header>
<row>
<col>
CON</col>
<col>
 <link xlink:type="simple" xlink:href="../571/361571.xml">
Console</link>device</col>
</row>
<row>
<col>
PRN</col>
<col>
 <link xlink:type="simple" xlink:href="../272/5272.xml">
Printer</link></col>
</row>
<row>
<col>
AUX</col>
<col>
Auxiliary device</col>
</row>
<row>
<col>
COM0 COM1 COM2 COM3 COM4 COM5 COM6 COM7 COM8 COM9</col>
<col>
 <link xlink:type="simple" xlink:href="../359/77359.xml">
Serial port</link>s</col>
</row>
<row>
<col>
LPT0 LPT1 LPT2 LPT3 LPT4 LPT5 LPT6 LPT7 LPT8 LPT9</col>
<col>
 <link xlink:type="simple" xlink:href="../616/100616.xml">
Parallel port</link>s</col>
</row>
<row>
<col>
NUL</col>
<col>
 <link xlink:type="simple" xlink:href="../563/606563.xml">
Bit bucket</link></col>
</row>
</table>
</p>

</sec>
<sec>
<st>
Further reading</st>
<p>

<list>
<entry level="1" type="bullet">

 Philip Streck&#32;(<link>
2002-09-24</link>).&#32;"<weblink xlink:type="simple" xlink:href="http://www.linuxjournal.com/article/6035">
devfs for Management and Administration</weblink>", <it><work wordnetid="104599396" confidence="0.8">
<computer wordnetid="103082979" confidence="0.8">
<creation wordnetid="103129123" confidence="0.8">
<print_media wordnetid="106263609" confidence="0.8">
<press wordnetid="106263369" confidence="0.8">
<machine wordnetid="103699975" confidence="0.8">
<medium wordnetid="106254669" confidence="0.8">
<publication wordnetid="106589574" confidence="0.8">
<magazine wordnetid="106595351" confidence="0.8">
<product wordnetid="104007894" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<web_site wordnetid="106359193" confidence="0.8">
<link xlink:type="simple" xlink:href="../831/233831.xml">
Linux Journal</link></web_site>
</device>
</instrumentality>
</artifact>
</product>
</magazine>
</publication>
</medium>
</machine>
</press>
</print_media>
</creation>
</computer>
</work>
</it>.&nbsp;</entry>
<entry level="1" type="bullet">

 Daniel Robbins&#32;(<link>
2001-10-01</link>).&#32;"<weblink xlink:type="simple" xlink:href="http://www-128.ibm.com/developerworks/library/l-fs4.html">
Part 4: Introduction to devfs</weblink>".&#32;<it>Common threads: Advanced filesystem implementor's guide</it>.&#32;  IBM.</entry>
<entry level="1" type="bullet">

 Daniel Robbins&#32;(<link>
2001-10-01</link>).&#32;"<weblink xlink:type="simple" xlink:href="http://www-128.ibm.com/developerworks/library/l-fs5.html">
Part 5: Setting up devfs</weblink>".&#32;<it>Common threads: Advanced filesystem implementor's guide</it>.&#32;  IBM.</entry>
<entry level="1" type="bullet">

 Daniel Robbins&#32;(<link>
2001-10-01</link>).&#32;"<weblink xlink:type="simple" xlink:href="http://www-128.ibm.com/developerworks/linux/library/l-fs6/">
Part 6: Implementing devfs (using the init wrapper)</weblink>".&#32;<it>Common threads: Advanced filesystem implementor's guide</it>.&#32;  IBM.</entry>
<entry level="1" type="bullet">

 Doug Gilbert&#32;(<link>
2001-01-22</link>).&#32;"<weblink xlink:type="simple" xlink:href="http://sg.torque.net/sg/devfs_scsi.html">
DEVFS and SCSI</weblink>".</entry>
<entry level="1" type="bullet">

 "<weblink xlink:type="simple" xlink:href="http://tldp.org/HOWTO/SCSI-2.4-HOWTO/dnamesdevfs.html">
3.3. Device Names in devfs</weblink>".&#32;<it>The Linux 2.4 SCSI subsystem HOWTO: Chapter 3. Names and Addresses</it>.&#32;  <work wordnetid="100575741" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<undertaking wordnetid="100795720" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<link xlink:type="simple" xlink:href="../334/19263334.xml">
Linux Documentation Project</link></activity>
</psychological_feature>
</act>
</undertaking>
</event>
</work>
.</entry>
<entry level="1" type="bullet">

 "<weblink xlink:type="simple" xlink:href="http://www.gentoo.org/doc/en/devfs-guide.xml">
Device File System Guide</weblink>".&#32;<it>Gentoo Linux Documentation</it>.&#32;  Gentoo Foundation, Inc..</entry>
<entry level="1" type="bullet">

 Mark Ellis&#32;(<link>
2003-09-23</link>).&#32;"<weblink xlink:type="simple" xlink:href="http://www.linuxfromscratch.org/hints/downloads/files/devfs+kernel_modules.txt">
How to use kernel module autoloading with devfs and devfsd</weblink>".&#32;<it><work wordnetid="104599396" confidence="0.8">
<product wordnetid="104007894" confidence="0.8">
<creation wordnetid="103129123" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<book wordnetid="106410904" confidence="0.8">
<publication wordnetid="106589574" confidence="0.8">
<link xlink:type="simple" xlink:href="../813/193813.xml">
Linux From Scratch</link></publication>
</book>
</artifact>
</creation>
</product>
</work>
 Hints</it>.</entry>
<entry level="1" type="bullet">

 Martial Daumas&#32;(<link>
2003-09-18</link>).&#32;"<weblink xlink:type="simple" xlink:href="http://www.linuxfromscratch.org/hints/downloads/files/mk_initrd+devfs.txt">
How to create a basic mk_initrd command that works nice with LFS and devfs</weblink>".&#32;<it><work wordnetid="104599396" confidence="0.8">
<product wordnetid="104007894" confidence="0.8">
<creation wordnetid="103129123" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<book wordnetid="106410904" confidence="0.8">
<publication wordnetid="106589574" confidence="0.8">
<link xlink:type="simple" xlink:href="../813/193813.xml">
Linux From Scratch</link></publication>
</book>
</artifact>
</creation>
</product>
</work>
 Hints</it>.</entry>
<entry level="1" type="bullet">

 Jeroen Coumans&#32;(<link>
2003-04-19</link>).&#32;"<weblink xlink:type="simple" xlink:href="http://www.linuxfromscratch.org/hints/downloads/files/devfs.txt">
How to setup devfs with your current LFS-configuration using devfsd. How you can use devfs from  scratch.</weblink>".&#32;<it><work wordnetid="104599396" confidence="0.8">
<product wordnetid="104007894" confidence="0.8">
<creation wordnetid="103129123" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<book wordnetid="106410904" confidence="0.8">
<publication wordnetid="106589574" confidence="0.8">
<link xlink:type="simple" xlink:href="../813/193813.xml">
Linux From Scratch</link></publication>
</book>
</artifact>
</creation>
</product>
</work>
 Hints</it>.</entry>
<entry level="1" type="bullet">

 Tushar Teredesai&#32;(<link>
2003-03-05</link>).&#32;"<weblink xlink:type="simple" xlink:href="http://www.linuxfromscratch.org/hints/downloads/files/devfsd.txt">
Using devfs and devfsd</weblink>".&#32;<it><work wordnetid="104599396" confidence="0.8">
<product wordnetid="104007894" confidence="0.8">
<creation wordnetid="103129123" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<book wordnetid="106410904" confidence="0.8">
<publication wordnetid="106589574" confidence="0.8">
<link xlink:type="simple" xlink:href="../813/193813.xml">
Linux From Scratch</link></publication>
</book>
</artifact>
</creation>
</product>
</work>
 Hints</it>.</entry>
</list>
</p>

</sec>
<sec>
<st>
See also</st>
<p>

<list>
<entry level="1" type="bullet">

 <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../775/2127775.xml">
Sysfs</link></instrumentality>
</artifact>
</system>
</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../667/313667.xml">
Block size</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../953/1880953.xml">
Blocking</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../183/2406183.xml">
Buffer</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../280/1010280.xml">
File system</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../015/443015.xml">
Hardware abstraction</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../467/93467.xml">
User space</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../680/1350680.xml">
Unix file types</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../907/1233907.xml">
udev</link></entry>
</list>
</p>

</sec>
<sec>
<st>
References</st>

<p>

<reflist>
<entry id="1">
Compare for example http://www.yiluda.net/manual/linux/rute/node21.html, retrieved <link>
2007-09-04</link>
</entry>
<entry id="2">
<weblink xlink:type="simple" xlink:href="http://ubuntuforums.org/archive/index.php/t-518221.html">
IDE hard disk seen as SCSI [Archive&#93; - Ubuntu Forums</weblink></entry>
</reflist>
</p>

</sec>
<sec>
<st>
External links</st>
<p>

<list>
<entry level="1" type="bullet">

 http://www.atnf.csiro.au/people/rgooch/linux/docs/devfs.html - FAQ about Linux devfs</entry>
</list>
</p>


</sec>
</bdy>
</instrumentality>
</artifact>
</system>
</article>
