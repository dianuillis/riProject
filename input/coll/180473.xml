<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 16:25:28[mciao0825] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<system  confidence="0.8" wordnetid="104377057">
<artifact  confidence="0.8" wordnetid="100021939">
<instrumentality  confidence="0.8" wordnetid="103575240">
<header>
<title>Symbolic link</title>
<id>180473</id>
<revision>
<id>244254697</id>
<timestamp>2008-10-09T23:50:11Z</timestamp>
<contributor>
<username>Jeff G.</username>
<id>3080493</id>
</contributor>
</revision>
<categories>
<category>Computer file systems</category>
</categories>
</header>
<bdy>

Not to be confused with <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<format wordnetid="106636806" confidence="0.8">
<link xlink:type="simple" xlink:href="../486/2970486.xml">
SYmbolic LinK (SYLK)</link></format>
</information>
</message>
, a Microsoft Office file format.
In <link xlink:type="simple" xlink:href="../213/5213.xml">
computing</link>, a <b>symbolic link</b> (also <b><it>symlink</it></b> or <b><it>soft link</it></b>) is a special type of <link xlink:type="simple" xlink:href="../077/7077.xml">
file</link> that contains a reference to another file or directory in the form of an absolute or relative <link xlink:type="simple" xlink:href="../357/403357.xml">
path</link> and that affects pathname resolution.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref> Symbolic links first appeared in the 4.2BSD release of <link xlink:type="simple" xlink:href="../622/18932622.xml">
Berkeley Unix</link> (1983). Today they are supported by the <standard wordnetid="107260623" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../305/23305.xml">
POSIX</link></system_of_measurement>
</standard>
 operating-system standard, most <family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../815/31815.xml">
Unix-like</link></family>
 <link xlink:type="simple" xlink:href="../194/22194.xml">
operating system</link>s, <version wordnetid="107173585" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../648/2289648.xml">
Windows Vista</link></version>
, and to some degree in <version wordnetid="107173585" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../941/33941.xml">
Windows 2000</link></version>
 and <version wordnetid="107173585" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../879/33879.xml">
Windows XP</link></version>
.<p>

Symbolic links operate transparently for most operations: programs which read or write to files named by a symbolic link will behave as if operating directly on the target file. However, programs that need to handle symbolic links specially (e.g., backup utilities) may identify and manipulate them directly.</p>
<p>

A symbolic link merely contains a text string that is interpreted and followed by the operating system as a path to another file or directory. It is a file on its own and can exist independently of its target. If a symbolic link is deleted, its target remains unaffected. If the target is moved, renamed or deleted, any symbolic link that used to point to it continues to exist but now points to a non-existing file. Symbolic links pointing to non-existing files are sometimes called <it>orphaned</it> or <it>dangling</it>.</p>
<p>

Unlike <link xlink:type="simple" xlink:href="../957/496957.xml">
hard link</link>s, symbolic links can also point to directories and cross <link xlink:type="simple" xlink:href="../717/2346717.xml">
volumes</link>.</p>

<sec>
<st>
Unix and Linux</st>
<p>

In <standard wordnetid="107260623" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../305/23305.xml">
POSIX</link></system_of_measurement>
</standard>
-compliant operating systems, symbolic links are created with the symlink() system call. When using the <it><link xlink:type="simple" xlink:href="../650/305650.xml">
ln</link></it> shell command, this system call is used, instead of link(), when the -s command flag is specified.</p>
<p>

To create a symbolic link in Unix-like systems using the command-line interface (shell), enter the following command:
ln -s target link_name</p>
<p>

<it>target</it> is the relative or absolute path which the symlink will point to.  Usually the target will exist, although one can create a symlink to a target which does not exist. <it>link_name</it> is the desired name of the symbolic link. After creating the symbolic link, it can be treated as an alias for the target. Any file system management commands (e.g., cp, rm) may be used on the symbolic link.  Commands which read or write file contents will access the contents of the target file.</p>
<p>

$ mkdir -p /tmp/one/two
$ echo "test_a" &amp;gt;/tmp/one/two/a
$ echo "test_b" &amp;gt;/tmp/one/two/b
$ cd /tmp/one/two
$ ls
a  b
$ cd /tmp
$ ln -s /tmp/one/two three
$ cd three
$ ls
a  b
$ cat a
test_a
$ cat /tmp/one/two/a
test_a
$ echo "test_c" &amp;gt;/tmp/one/two/a
$ cat /tmp/one/two/a
test_c
$ cat /tmp/three/a
test_c</p>
<p>

Some Unix, as well as Linux (notably <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../563/225563.xml">
GoboLinux</link></O>
), distributions use symlinks extensively in an effort to reorder the <link xlink:type="simple" xlink:href="../280/1010280.xml">
file system</link> hierarchy. This offers the opportunity to create a more intuitive <link xlink:type="simple" xlink:href="../027/5515027.xml">
directory tree</link> and to reorganize without having to redesign the core set of system functions and utilities themselves.</p>

<ss1>
<st>
Storage of symbolic links </st>
<p>

Early implementations of symbolic links stored the symbolic link information much like data in regular files. The file contained the textual reference to the link’s target, and an indicator denoting it as a symbolic link.</p>
<p>

This arrangement proved somewhat slow, and could waste <link xlink:type="simple" xlink:href="../472/Species_8472.xml">
 disk-space</link> on small systems.  An innovation called <b>fast symlinks</b> allowed storage of the link-text within the standard <link xlink:type="simple" xlink:href="../519/8519.xml">
data structure</link>s used for storing file information on disk (<link xlink:type="simple" xlink:href="../170/580170.xml">
inode</link>s).  This space  generally serves to store the chain of disk <link xlink:type="simple" xlink:href="../808/40808.xml">
block</link>s composing a file (60 bytes on the <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../992/250992.xml">
Unix File System</link></instrumentality>
</artifact>
</system>
). This simply means that users can reference shorter symbolic links quickly. Systems with fast symlinks often fall back to using the older method if the path and filename stored in symlink exceeds the available space in the inode, or for disk compatibility with other or older versions of the operating system. The original style has become <link xlink:type="simple" xlink:href="../424/25424.xml">
retroactively termed</link> <b>slow symlinks</b>.</p>
<p>

Although storing the link value inside the inode saves a disk block and a disk read, the operating system still needs to parse the pathname information in the link, which always requires reading an additional inode and generally requires reading other — potentially many — directories, processing both the list of files and the inodes of each of them until it finds a match with the link pathname components. Only when a link points to a file inside the same directory do fast symlinks provide significant gains in performance.</p>
<p>

The <standard wordnetid="107260623" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../305/23305.xml">
POSIX</link></system_of_measurement>
</standard>
 standard does not require all struct stat values common to regular files to have meaning for symlinks. This allows implementations to avoid symlink inodes entirely by storing the symlink data in directories. However, the vast majority of POSIX implementations (including all implementations <link xlink:type="simple" xlink:href="../458/1292458.xml">
 currently</link> in widespread use) do use symlink inodes.</p>
<p>

The <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<link xlink:type="simple" xlink:href="../955/1347955.xml">
file system permission</link></activity>
</procedure>
</psychological_feature>
</act>
</event>
</instrumentality>
</artifact>
</system>
s of symbolic links usually have no relevance: the permissions set on the file to which the symlink points control the access rights to the file data.</p>
<p>

The size of a slow symlink exactly equals the number of characters in the path it points to. The size of a fast symlink is 0.</p>

</ss1>
</sec>
<sec>
<st>
Mac OS</st>

<ss1>
<st>
Aliases</st>

<p>

<indent level="1">

<it>Main article: <link xlink:type="simple" xlink:href="../672/720672.xml">
Alias (Mac OS)</link></it>
</indent>
In addition to the usual Unix symbolic links, <link xlink:type="simple" xlink:href="../043/20043.xml">
Mac OS</link> can employ aliases, which have the added feature of working even if the target file moves to another location on the same volume.  A similar functionality also exists in some <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../297/6097297.xml">
Linux</link></O>
 distributions.</p>

</ss1>
</sec>
<sec>
<st>
Windows</st>

<ss1>
<st>
NTFS Junction points</st>

<p>

<indent level="1">

<it>Main article: <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../838/483838.xml">
NTFS junction point</link></instrumentality>
</artifact>
</system>
</it>
</indent>
The <version wordnetid="107173585" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../941/33941.xml">
Windows 2000</link></version>
 version of <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../184/39184.xml">
NTFS</link></instrumentality>
</artifact>
</system>
 introduced <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../598/7414598.xml">
reparse points</link></instrumentality>
</artifact>
</system>
, which enabled, among other things, the use of <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../509/13289509.xml">
Volume Mount Point</link></instrumentality>
</artifact>
</system>
s and <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../838/483838.xml">
junction points</link></instrumentality>
</artifact>
</system>
.  Junction points are for directories only, and moreover, local directories only; junction points to remote shares are unsupported.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%222%22])">2</ref>  The Windows 2000 and XP Resource Kits include a program called linkd to create junction points; a more powerful one named Junction was distributed by <link xlink:type="simple" xlink:href="../147/3370147.xml">
Sysinternals</link>' <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<intellectual wordnetid="109621545" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<alumnus wordnetid="109786338" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<employee wordnetid="110053808" confidence="0.8">
<scholar wordnetid="110557854" confidence="0.8">
<link xlink:type="simple" xlink:href="../201/3127201.xml">
Mark Russinovich</link></scholar>
</employee>
</causal_agent>
</alumnus>
</worker>
</intellectual>
</person>
</physical_entity>
.</p>

</ss1>
<ss1>
<st>
Windows Vista symbolic link</st>

<p>

<indent level="1">

<it>Main article: <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../268/7441268.xml">
NTFS symbolic link</link></instrumentality>
</artifact>
</system>
</it>
</indent>
<version wordnetid="107173585" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../648/2289648.xml">
Windows Vista</link></version>
 supports symbolic links for both files and directories with the command line utility mklink.  Unlike junction points, a symbolic link can also point to a file or remote <message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<link xlink:type="simple" xlink:href="../873/349873.xml">
SMB</link></rule>
</direction>
</protocol>
</message>
 network path. Additionally, the NTFS symbolic link implementation provides full support for cross-filesystem links. However, the functionality enabling cross-host symbolic links requires that the remote system also support them, which effectively limits their support to Windows Vista and later Windows operating systems.</p>
<p>

Symbolic links are designed to aid in migration and application compatibility with <standard wordnetid="107260623" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../305/23305.xml">
POSIX</link></system_of_measurement>
</standard>
 operating systems -- Microsoft aimed for Vista's symbolic links to "function just like UNIX links"<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%223%22])">3</ref>. However, the implementation varies from Unix symlinks in several ways; for example, Vista users must manually indicate when creating a symbolic link whether it is a file or directory,<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%224%22])">4</ref> and there is a limit of 31 symlinks in a given path.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%225%22])">5</ref>.  Additionally, only users with the new Create Symbolic Link privilege, which only administrators have by default, can create symbolic links;<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%226%22])">6</ref> if this is not the desired behavior, it must be changed in the Local Security Policy management console.</p>

</ss1>
<ss1>
<st>
Shortcuts</st>

<p>

<indent level="1">

<it>Main article: <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<structure wordnetid="104341686" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<window wordnetid="104587648" confidence="0.8">
<supporting_structure wordnetid="104361095" confidence="0.8">
<format wordnetid="106636806" confidence="0.8">
<framework wordnetid="103391770" confidence="0.8">
<link xlink:type="simple" xlink:href="../875/2020875.xml">
Computer shortcut</link></framework>
</format>
</supporting_structure>
</window>
</artifact>
</structure>
</information>
</message>
</it>
</indent>
Symbolic links resemble <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<structure wordnetid="104341686" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<window wordnetid="104587648" confidence="0.8">
<supporting_structure wordnetid="104361095" confidence="0.8">
<format wordnetid="106636806" confidence="0.8">
<framework wordnetid="103391770" confidence="0.8">
<link xlink:type="simple" xlink:href="../875/2020875.xml">
shortcuts</link></framework>
</format>
</supporting_structure>
</window>
</artifact>
</structure>
</information>
</message>
, which are supported by the graphical file browsers of some operating systems, but differ in a number of important ways. One difference is what type of software is able to follow them:
<list>
<entry level="1" type="bullet">

 Symbolic links are automatically resolved by the file system. Any software programs, upon accessing a symbolic link, will see the target instead, whether the program is aware of symbolic links or not.</entry>
<entry level="1" type="bullet">

 Shortcuts are treated like ordinary files by the files system and by software programs that are not aware of them. Only software programs that understand shortcuts (such as the Windows shell and file browsers) treat them as references to other files.</entry>
</list>
</p>
<p>

Another difference are the capabilities of the mechanism:
<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../890/18890.xml">
Microsoft Windows</link>  shortcuts can only refer to a destination by an <link xlink:type="simple" xlink:href="../357/403357.xml">
absolute path</link> (starting from the <link xlink:type="simple" xlink:href="../871/158871.xml">
root directory</link>), whereas POSIX symbolic links can refer to destinations via either an absolute or a <link xlink:type="simple" xlink:href="../357/403357.xml">
relative path</link>. The latter is useful if both the location and destination of the symbolic link share a common path <link xlink:type="simple" xlink:href="../564/24564.xml">
prefix</link>, but that prefix is not yet known when the symbolic link is created (e.g., in an <link xlink:type="simple" xlink:href="../677/2332677.xml">
archive file</link> that can be unpacked anywhere).</entry>
<entry level="1" type="bullet">

 Microsoft Windows application shortcuts contain additional metadata that can be associated with the destination, whereas POSIX symbolic links are just strings that will be interpreted as absolute or relative pathnames.</entry>
</list>
</p>

</ss1>
<ss1>
<st>
Cygwin symlinks</st>
<p>

<physical_entity wordnetid="100001930" confidence="0.8">
<communicator wordnetid="109610660" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<copycat wordnetid="109964411" confidence="0.8">
<compiler wordnetid="109946957" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<writer wordnetid="110794014" confidence="0.8">
<link xlink:type="simple" xlink:href="../840/6840.xml">
Cygwin</link></writer>
</causal_agent>
</compiler>
</copycat>
</person>
</communicator>
</physical_entity>
 simulates POSIX-compliant symbolic links in the Microsoft Windows file system. It uses identical programming and user utility interfaces as Unix (see above), but creates Windows shortcuts (.lnk files) with additional information used by Cygwin at the time of symlink resolution. Cygwin symlinks are compliant with both Windows and POSIX standards.</p>


<p>

Some differences exist, however. Cygwin has no way to specify shortcut-related information - such as working directory or icon - as there is no place for such parameters in ln -s command. To create standard Microsoft .lnk files Cygwin provides the <b>mkshortcut</b> utility<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%227%22])">7</ref></p>
<p>

The Cygwin User's Guide<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%228%22])">8</ref> has more information on this topic.</p>

</ss1>
</sec>
<sec>
<st>
Others</st>
<p>

Symbolic links also resemble <link xlink:type="simple" xlink:href="../517/5463517.xml">
shadows</link> in the graphical <link xlink:type="simple" xlink:href="../630/679630.xml">
Workplace Shell</link> of the <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../409/22409.xml">
OS/2</link></O>
 operating system.</p>

<ss1>
<st>
 Variant symlinks </st>
<p>

A <b>variant symlink</b> is a symbolic link that has a variable name embedded in it. This can allow some clever tricks to be performed that are not possible with a standard symlink. Variables embedded in the symlinks can include user and or environment specific information among other things. </p>
<p>

<link xlink:type="simple" xlink:href="../194/22194.xml">
Operating systems</link> that make use of variant symlinks include <link xlink:type="simple" xlink:href="../495/21495.xml">
NetBSD</link>, <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../229/294229.xml">
DragonFly BSD</link></O>
 and <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../792/1480792.xml">
Domain/OS</link></O>
.</p>

</ss1>
</sec>
<sec>
<st>
 See also</st>

<p>

<list>
<entry level="1" type="bullet">

 <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../957/496957.xml">
Hard link</link></instrumentality>
</artifact>
</system>
</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../650/305650.xml">
ln (Unix)</link>, the ln command, used with the -s option to create new symbolic links on Unix-like systems</entry>
<entry level="1" type="bullet">

 <accomplishment wordnetid="100035189" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<action wordnetid="100037396" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<feat wordnetid="100036762" confidence="0.8">
<link xlink:type="simple" xlink:href="../208/1857208.xml">
Symlink race</link></feat>
</psychological_feature>
</act>
</action>
</event>
</accomplishment>
, a security-vulnerability caused by symbolic links</entry>
</list>
</p>

</sec>
<sec>
<st>
References</st>


<p>

<reflist>
<entry id="1">
<weblink xlink:type="simple" xlink:href="http://www.opengroup.org/onlinepubs/009695399/basedefs/xbd_chap04.html#tag_04_11">
Pathname resolution</weblink>, <standard wordnetid="107260623" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../305/23305.xml">
POSIX</link></system_of_measurement>
</standard>
.</entry>
<entry id="2">
<weblink xlink:type="simple" xlink:href="http://www.microsoft.com/technet/sysinternals/FileAndDisk/Junction.mspx">
Sysinternals Junction documentation</weblink></entry>
<entry id="3">
<weblink xlink:type="simple" xlink:href="http://msdn2.microsoft.com/en-us/library/aa365680.aspx">
Symbolic Links</weblink>, MSDN Library, Win32 and COM Development, 2008-01-18</entry>
<entry id="4">
<weblink xlink:type="simple" xlink:href="http://msdn2.microsoft.com/en-us/library/aa363866.aspx">
CreateSymbolicLink Function</weblink>, MSDN Library, Win32 and COM Development</entry>
<entry id="5">
<weblink xlink:type="simple" xlink:href="http://msdn.microsoft.com/en-us/library/aa365460(VS.85).aspx">
Symbolic Link Programming Considerations</weblink>, MSDN</entry>
<entry id="6">
Mark Russinovich: <weblink xlink:type="simple" xlink:href="http://www.microsoft.com/technet/technetmag/issues/2007/02/VistaKernel/default.aspx">
Inside the Windows Vista Kernel: Part 1</weblink> – File-based symbolic links, Microsoft Technet, February 2007.</entry>
<entry id="7">
<weblink xlink:type="simple" xlink:href="http://www.cygwin.com/cygwin-ug-net/using-effectively.html#id325160">
http://www.cygwin.com/cygwin-ug-net/using-effectively.html#id325160</weblink> Microsoft .lnk files in Cygwin</entry>
<entry id="8">
<weblink xlink:type="simple" xlink:href="http://www.cygwin.com/cygwin-ug-net/using.html">
http://www.cygwin.com/cygwin-ug-net/using.html</weblink> Cygwin User's Guide, <physical_entity wordnetid="100001930" confidence="0.8">
<communicator wordnetid="109610660" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<copycat wordnetid="109964411" confidence="0.8">
<compiler wordnetid="109946957" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<writer wordnetid="110794014" confidence="0.8">
<link xlink:type="simple" xlink:href="../840/6840.xml">
Cygwin</link></writer>
</causal_agent>
</compiler>
</copycat>
</person>
</communicator>
</physical_entity>
.</entry>
</reflist>
</p>


</sec>
<sec>
<st>
External links</st>
<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://linuxgazette.net/105/pitcher.html">
Q &amp; A: The difference between hard and soft links</weblink> Detailed and easy to understand</entry>
</list>
</p>


<p>

<it>This article was originally based on material from the <work wordnetid="104599396" confidence="0.8">
<product wordnetid="104007894" confidence="0.8">
<creation wordnetid="103129123" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<wordbook wordnetid="106418693" confidence="0.8">
<book wordnetid="106410904" confidence="0.8">
<dictionary wordnetid="106418901" confidence="0.8">
<reference_book wordnetid="106417598" confidence="0.8">
<publication wordnetid="106589574" confidence="0.8">
<link xlink:type="simple" xlink:href="../324/11324.xml">
Free On-line Dictionary of Computing</link></publication>
</reference_book>
</dictionary>
</book>
</wordbook>
</artifact>
</creation>
</product>
</work>
, which is  under the <link xlink:type="simple" xlink:href="../782/18938782.xml">
GFDL</link>.</it></p>


</sec>
</bdy>
</instrumentality>
</artifact>
</system>
</article>
