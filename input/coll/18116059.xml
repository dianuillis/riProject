<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 17.04.2009 04:21:24[mciao0828] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<event  confidence="0.8" wordnetid="100029378">
<rule  confidence="0.8" wordnetid="105846932">
<act  confidence="0.8" wordnetid="100030358">
<psychological_feature  confidence="0.8" wordnetid="100023100">
<procedure  confidence="0.8" wordnetid="101023820">
<activity  confidence="0.8" wordnetid="100407535">
<algorithm  confidence="0.8" wordnetid="105847438">
<header>
<title>Ramer-Douglas-Peucker algorithm</title>
<id>18116059</id>
<revision>
<id>241767029</id>
<timestamp>2008-09-29T13:40:14Z</timestamp>
<contributor>
<username>RJFJR</username>
<id>141808</id>
</contributor>
</revision>
<categories>
<category>Computer graphics algorithms</category>
</categories>
</header>
<bdy>

The <b>Douglas-Peucker algorithm</b> is an <link xlink:type="simple" xlink:href="../775/775.xml">
algorithm</link> for smoothing curves. The initial form of the algorithm was established in 1973 by David Douglas and Thomas Peucker.
<sec>
<st>
 Idea </st>
<p>

The purpose of the algorithm is that given a 'curve' cmposed of line segments to find a curve not too dissimilar but that has fewer points.  The algorithm defines 'too dissimilar' based on the maximum distance between the original curve and the smoothed curve.  The smoothed curve consists of a subset of the points that defined the original curve.</p>

</sec>
<sec>
<st>
 Algorithm </st>
<p>

<image location="right" width="150px" src="Douglas_Peucker.png" type="thumb">
<caption>

Smoothing a piecewise linear curve with the Douglas-Peucker algorithm
</caption>
</image>

The starting curve is an ordered set of points or lines and the distance dimension <it>&amp;epsilon;</it>&nbsp;&amp;gt;&nbsp;0. The original (unsmoothed) curve is shown in 0 and the final output curve is shown in blue on row 4.</p>


<p>

The algorithm <link xlink:type="simple" xlink:href="../407/25407.xml">
recursively</link> divides the line.  Initially it is given all the points between the first and last point.  It automatically marks the first and last point to be kept.  It then finds the point that is furthest from the line segment with the first and last points as end points (this point is obviously furthest on the curve from the approximating line segment between the end points).  If the point is closer than <it>&amp;epsilon;</it> to the line segment then any points not currently marked to keep can be discarded without the smoothed curve being worse than <it>&amp;epsilon;</it>.</p>
<p>

If the point furthest from the line segment is greater than <it>&amp;epsilon;</it> from the approximation then that point must be kept.  The algorithm recursively calls itself with the first point and the worst point and then with the worst point and the last point (which includes marking the worst point being marked as kept).</p>
<p>

When the recursion is completed a new output curve can be generated consisting of all (and only) those points that have been marked as kept.</p>

<ss1>
<st>
 Pseudocode </st>
<p>

function DouglasPeucker(PointList, epsilon)
//Find the point with the maximum distance
dmax = 0
index = 0
for i = 2 to (length(PointList) - 1)
d = OrthogonalDistance(PointList[i], Distance(PointList[1], PointList[end])) 
if d &amp;gt; dmax
index = i
dmax = d
end
end</p>
<p>

//If max distance is greater than epsilon, recursively simplify
if dmax &amp;gt;= epsilon
//Recursive call
recResults1 = DouglasPeucker(PointList[1...index], epsilon)
recResults2 = DouglasPeucker(PointList[index...end], epsilon)</p>
<p>

// Build the result list
ResultList = {recResults1[1...end-1] recResults2[1...end]}
else
ResultList = {PointList[1], PointList[end]}
end</p>
<p>

//Return the result
return ResultList
end</p>

</ss1>
</sec>
<sec>
<st>
 Application </st>
<p>

The algorithm is used for the processing of <link xlink:type="simple" xlink:href="../499/32499.xml">
vector graphics</link> and <link xlink:type="simple" xlink:href="../746/12746.xml">
generalization</link>. </p>

</sec>
<sec>
<st>
References</st>
<p>

<list>
<entry level="1" type="bullet">

David Douglas &amp; Thomas Peucker, "Algorithms for the reduction of the number of points required to represent a digitized line or its caricature", The Canadian Cartographer 10(2), 112-122 (1973)</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

John Hershberger &amp; Jack Snoeyink, "Speeding Up the Douglas-Peucker Line-Simplification Algorithm", Proc 5th Symp on Data Handling, 134-143 (1992). UBC Tech Report available online from NEC ResearchIndex. </entry>
</list>
</p>



</sec>
</bdy>
</algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</article>
