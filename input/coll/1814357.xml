<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 18:59:50[mciao0825] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>Pixel art scaling algorithms</title>
<id>1814357</id>
<revision>
<id>238257915</id>
<timestamp>2008-09-14T00:40:17Z</timestamp>
<contributor>
<username>Nbarth</username>
<id>570614</id>
</contributor>
</revision>
<categories>
<category>Articles to be merged since August 2008</category>
<category>Image processing</category>
<category>All articles to be merged</category>
</categories>
</header>
<bdy>

<table class="metadata plainlinks ambox ">
<row>
<col>

ambox-move" style=""</col>
</row>
<row>
<col class="mbox-image"><p>

<image width="50px" src="Merge-arrow.svg">
<caption>

Merge arrow
</caption>
</image>
</p>
</col>
<col style="" class="mbox-text">
 It has been suggested that this article or section be  into . ()</col>
</row>
</table>


<image width="150px" src="2xsai_example.png" type="frame">
<caption>

An image scaled with nearest-neighbor scaling (left) and 2xSaI scaling (right).
</caption>
</image>
<p>

<b>Pixel art scaling algorithms</b> are <link xlink:type="simple" xlink:href="../077/2937077.xml">
image scaling</link> algorithms specifically designed to <link xlink:type="simple" xlink:href="../510/1315510.xml">
upsample</link> (enlarge) low-resolution <link xlink:type="simple" xlink:href="../215/501215.xml">
pixel</link> and <link xlink:type="simple" xlink:href="../497/3251497.xml">
line art</link> that contains thin lines, solid areas of colour rather than gradient fills or shading, and has not been <link xlink:type="simple" xlink:href="../507/113507.xml">
anti-aliased</link>.</p>

<sec>
<st>
Motivation</st>
<p>

Two standard scaling algorithms are <link xlink:type="simple" xlink:href="../336/847336.xml">
bilinear</link> and <link xlink:type="simple" xlink:href="../397/1396397.xml">
bicubic interpolation</link>. Since they work by interpolating pixel colour values, and usually set each pixel to a value interpolated between four input pixel values, they introduce some blur into the output (a form of <link xlink:type="simple" xlink:href="../205/4982205.xml">
box blur</link>). Although this is acceptable for continuous-tone images, it destroys <link xlink:type="simple" xlink:href="../466/15542466.xml">
contrast</link> (sharp edges) and is often seen as ruining the appearance of line art.</p>
<p>

<link xlink:type="simple" xlink:href="../498/2905498.xml">
Nearest neighbour interpolation</link> preserves these sharp edges, but it introduces <link xlink:type="simple" xlink:href="../362/16362.xml">
jaggies</link> (<link xlink:type="simple" xlink:href="../474/151474.xml">
aliasing</link> that makes diagonal lines and curves look blocky). Thus, the ideal algorithm for enlarging line art would be one that would interpolate areas of continuous tone, preserve the sharpness of orthogonal lines and smooth (ideally with anti-aliasing) diagonal lines and curves. Several attempts have been made to accomplish this.</p>

<ss1>
<st>
Efficiency</st>
<p>

Since a typical application of this technology is improving the appearance of <link xlink:type="simple" xlink:href="../385/437385.xml">
fourth-generation</link> and earlier <link xlink:type="simple" xlink:href="../363/5363.xml">
video game</link>s on <link xlink:type="simple" xlink:href="../962/723962.xml">
arcade</link> and <link xlink:type="simple" xlink:href="../755/18934755.xml">
console emulator</link>s, many are designed to run in real time for sufficiently small input images.</p>
<p>

Many work only on specific scale factors: 2x is the most common, with 3x and 4x also present.</p>

</ss1>
</sec>
<sec>
<st>
Algorithms</st>

<ss1>
<st>
Eagle</st>

<p>

Eagle is a library that generically enhances (scales) images, primarily pixel art from old games; the desired result being to make scaled pixel art less "jagged" and "blocky". </p>
<p>

Eagle accomplished this as follows: for every in pixel we will generate 4 out pixels, first, set all 4 to the colour of the in pixel we are currently scaling (like nearest neighbor), next lets look at the pixels up and to the left, if they are the same colour as each other set the top right most pixel to that colour, continue doing the same for all four pixels, and then move to the next one<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref>.</p>
<p>

Assume an in-matrix of 3x3 pixels where the center most pixel is the "current" pixel to be scaled, and an out matrix of 2x2 pixels (that is "this pixel after scaling")</p>
<p>


first:        |Then 
. . . --\ CC  |S T U  --\ 1 2
. C . --/ CC  |V C W  --/ 3 4
. . .         |X Y Z
              | IF V==S==T =&amp;gt; 1=S
              | IF T==U==W =&amp;gt; 2=U
              | IF V==X==Y =&amp;gt; 3=X
              | IF W==Z==Y =&amp;gt; 4=Z

Thus if we have a black pixel on a white background it will vanish. This is a bug in the Eagle algorithm, but is solved by its successors such as 2xSaI and HQ3x.</p>

</ss1>
<ss1>
<st>
2xSaI</st>

<p>

2xSaI, short for 2x Scale and Interpolation engine, is a <link xlink:type="simple" xlink:href="../922/97922.xml">
digital image processing</link> algorithm for <link xlink:type="simple" xlink:href="../210/18567210.xml">
computer graphics</link>. It doubles the images both horizontally and vertically, resulting in a new image with four times as many pixels as the original one. The additional pixels are generated by detecting patterns such as lines and edges and <link xlink:type="simple" xlink:href="../569/14569.xml">
interpolating</link> additional pixels on that basis using techniques such as <link xlink:type="simple" xlink:href="../507/113507.xml">
anti-aliasing</link> and <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../689/222689.xml">
Wu lines</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
.</p>
<p>

The 2xSaI algorithm was inspired by Eagle. It was designed by Derek Liauw Kie Fa, also known as Kreed, primarily for use in console and computer <link xlink:type="simple" xlink:href="../937/18943937.xml">
emulator</link>s, and it has remained fairly popular in this niche. Many of the most popular emulators, including <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../811/260811.xml">
ZSNES</link></software>
 and <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<copycat wordnetid="109964411" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../701/938701.xml">
VisualBoyAdvance</link></causal_agent>
</copycat>
</person>
</physical_entity>
, offer this scaling algorithm as a feature.</p>
<p>

Since Kreed released the source code under the <link xlink:type="simple" xlink:href="../683/18938683.xml">
GNU General Public License</link>, it is freely available to anyone wishing to utilize it in a project released under that license. Developers wishing to use it in a non-GPL project would be required to rewrite the algorithm without using any of Kreed's existing code.</p>

</ss1>
<ss1>
<st>
Super 2xSaI and Super Eagle</st>

<p>

Several slightly different versions of the scaling algorithm are available, and these are often referred to as "Super 2xSaI", "2xSaI", and "Super Eagle".</p>
<p>

Super Eagle which is also written by Kreed, is similar to the 2XSaI engine, but does more blending.</p>
<p>

Super 2xSaI which is also written by Kreed is a filter which smoothes the graphics, but it blends more than the Super Eagle engine.</p>

</ss1>
<ss1>
<st>
hq<it>n</it>x family</st>

<p>

Maxim Stepin's hq2x, hq3x and hq4x are for scale factors of 2:1, 3:1 and 4:1 respectively. Each works by comparing the colour value of each pixel to those of its eight immediate neighbours, marking the neighbours as close or distant, and using a pregenerated lookup table to find the proper proportion of input pixels' values for each of the 4, 9 or 16 corresponding output pixels. The hq3x family will perfectly smooth any diagonal line whose slope is ±1:2, ±1:1 or ±2:1 and which is not anti-aliased in the input; one with any other slope will alternate between two slopes in the output. It will also smooth very tight curves. Unlike 2xSaI, it anti-aliases the output.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%222%22])">2</ref></p>
<p>

<image location="left" width="384px" src="Test_nn.gif" type="thumb">
<caption>

Image enlarged 3&amp;times; with the <link xlink:type="simple" xlink:href="../498/2905498.xml">
nearest neighbor interpolation</link>
</caption>
</image>

<image location="none" width="384px" src="Test_hq3x.gif" type="thumb">
<caption>

Image enlarged in size by 3&amp;times; with hq3x algorithm
</caption>
</image>
</p>

<p>

hq<it>n</it>x was initially created for the Super Nintendo emulator <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../811/260811.xml">
ZSNES</link></software>
.</p>

</ss1>
<ss1>
<st>
 Others </st>

<p>

Several similar interpolating graphics engines exist today. These include the open source family of Scale2x, Scale3x and Scale4x technologies (also referred to as AdvMame2x, AdvMame3x or AdvMame4x) developed in 2001 for use in the <link xlink:type="simple" xlink:href="../786/102786.xml">
AdvanceMAME</link> emulator. </p>

</ss1>
</sec>
<sec>
<st>
 Applications to arcade and console emulators </st>

<p>

On sufficiently fast hardware, these algorithms allow resizing suitable for real-time applications such as games. These highly optimized algorithms provide sharp, crisp graphics while minimizing blur. Scaling art algorithms have been implemented in a wide range of emulators, 2D <link xlink:type="simple" xlink:href="../581/170581.xml">
game engine</link>s and <link xlink:type="simple" xlink:href="../012/3766012.xml">
game engine recreation</link>s, for example in <link xlink:type="simple" xlink:href="../786/102786.xml">
AdvanceMAME</link>, <work wordnetid="100575741" confidence="0.8">
<idea wordnetid="105833840" confidence="0.8">
<plan wordnetid="105898568" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<undertaking wordnetid="100795720" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<link xlink:type="simple" xlink:href="../149/946149.xml">
DOSBox</link></activity>
</psychological_feature>
</act>
</undertaking>
</event>
</plan>
</idea>
</work>
 and <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../074/208074.xml">
ScummVM</link></software>
. They have gained wide recognition with gamers, with whom these technologies have encouraged a revival of the gaming experiences of the '80s and '90s.</p>

</sec>
<sec>
<st>
References</st>


<p>

<reflist>
<entry id="1">
<weblink xlink:type="simple" xlink:href="http://everything2.com/index.pl?node_id=1859453">
Eagle (idea)@Everything2.com</weblink></entry>
<entry id="2">
Stepin, Maxim.&#32;"<weblink xlink:type="simple" xlink:href="http://www.hiend3d.com/hq3x.html">
hq3x Magnification Filter</weblink>".&#32;Retrieved on <link>
2007-07-03</link>.</entry>
</reflist>
</p>

</sec>
<sec>
<st>
 External links </st>
<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://bob.allegronetwork.com/projects.html">
Updated version of 2xSaI algorithm with 32bpp support</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://scale2x.sourceforge.net/index.html">
Scale2x homepage</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.hiend3d.com/hq3x.html">
hq3x project</weblink> (Windows utilities available)</entry>
</list>
</p>

</sec>
</bdy>
</article>
