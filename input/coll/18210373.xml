<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 17.04.2009 04:36:50[mciao0826] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<problem  confidence="0.9511911446218017" wordnetid="114410605">
<algorithm  confidence="0.9511911446218017" wordnetid="105847438">
<header>
<title>Canadian traveller problem</title>
<id>18210373</id>
<revision>
<id>244674654</id>
<timestamp>2008-10-12T00:06:52Z</timestamp>
<contributor>
<username>C. lorenz</username>
<id>6290146</id>
</contributor>
</revision>
<categories>
<category>PSPACE-complete_problems</category>
<category>Graph theory</category>
<category>Operations research</category>
<category>Graph algorithms</category>
</categories>
</header>
<bdy>

In <link xlink:type="simple" xlink:href="../323/5323.xml">
computer science</link> and <link xlink:type="simple" xlink:href="../401/12401.xml">
graph theory</link>, the <b>Canadian traveller problem</b> is a generalization of the <link xlink:type="simple" xlink:href="../985/41985.xml">
shortest path problem</link> to graphs where the cost of traversing an edge isn't completely known until reaching it. The problem was introduced by Papadimitriou and Yannakakis in 1989 and many variants of the problem has been studied since. The name supposedly originates from conversations of the authors who learned of the difficulty Canadian drivers had with certain roads randomly being closed due snowfall. Variants of the problem is studied in various fields but the original problem hasn't been the topic of many papers since its publication.
<sec>
<st>
 Definition </st>
<p>

As mentioned above, many variants have been considered. We here define the original problem, as was studied in the paper from 1989. It is necessary that we begin by introducing certain terms.</p>
<p>

Consider a family of undirected graphs that can construct by adding a set of given edges to a given graph. Formally, let <math>\mathcal{G}(V,E,F) = \{(V,E+F') | F' \subseteq F\}, E \cap F = \emptyset</math>. We say that <math>G \in \mathcal{G}(V,E,F)</math> is a <it>realization</it> of the graph family. Furthermore, let W be an associated cost matrix where <math>w_{ij}</math> is the cost of going from vertex <it>i</it> to vertex <it>j</it>, assuming that this edge is in the realization.</p>
<p>

For any vertex <it>v</it> in <it>V</it>, we call <math>E_B(v,V)</math> its adjacent edges with respect to the edge set <it>B</it> on <it>V</it>. Let furthermore, for a realization <it>G</it>, <math>d_B(s,t)</math> be the cost of the shortest path in the graph from <it>s</it> to <it>t</it>. This is called the off-line problem because an algorithm for such a problem would have complete information of the graph.</p>
<p>

We say that a strategy <math>\pi</math> to navigate such a graph is a mapping from <math>(\mathcal{P}(E),\mathcal{P}(F),V)</math> to <it>E</it>, where <math>\mathcal{P}(X)</math> denotes the <link xlink:type="simple" xlink:href="../799/23799.xml">
powerset</link> of <it>X</it>. We define the cost <math>c(\pi, B)</math> of a strategy <math>\pi</math> with respect to a particular realization <math>G = (V,B)</math> as follows.
<list>
<entry level="1" type="bullet">

 Let <math>v_0 = s, E_0 = E</math> and <math>F_0 = F</math>.</entry>
<entry level="1" type="bullet">

 For <math>i = 0, 1, 2, ...</math>, define</entry>
<entry level="2" type="bullet">

 <math>E_{i+1} = E_i \cup E_B(v_i,V)</math>,</entry>
<entry level="2" type="bullet">

 <math>F_{i+1} = F_i - E_F(v_i,V)</math>, and</entry>
<entry level="2" type="bullet">

 <math>v_{i+1} = \pi(E_{i+1}, F_{i+1}, v_i)</math>.</entry>
<entry level="1" type="bullet">

 If there exists a <it>T</it> such that <math>v_T = t</math>, then <math>c(\pi, B) = \sum_{i=0}^{T-1} w_{v_i,v_{i+1}}</math>, otherwise let <math>c(\pi, B) = \infty</math>.</entry>
</list>
</p>
<p>

In other words, we evaluate the policy based on the edges we currently know are in the graph (<math>E_i</math>) and the edges we known might be in the graph (<math>F_i</math>). When we take a step in the graph, the edges adjacent to our new location become known to us. Those edges that are in the graph are added to <math>E_i</math>, and regardless of whether the edges are in or not, they are removed from the set of unknown edges <math>F_i</math>. If the goal is never reached, we say that we have an infinite cost. If the goal is reached, we define the cost of the walk as the sum of the costs of all of the edges traversed, some possibly more than once.</p>
<p>

Finally, we define the problem as
<indent level="1">

 Given an instance <math>(V,E,F,s,t,r)</math>, decide whether there exists a policy <math>\pi</math> such that for every realization <math>(V,B) \in \mathcal{G}(V,E,F)</math>, the cost <math>c(\pi, B)</math> of the policy is no more than <it>r</it> times the off-line optimal, <math>d_B(s, t)</math>. In the case <math>c(\pi, B) = d_b(s,t) = \infty</math>, we let the answer be "yes" iff <math>r \geq 1</math>.
</indent>

Papadimitriou and Yannakakis noted that this defines a <link>
 two-player game</link>, where the players compete over the cost of their respective paths and the edge set is chosen by the second player (nature).</p>

</sec>
<sec>
<st>
Complexity</st>
<p>

The original paper analysed the complexity of the problem and reported it to be <class wordnetid="107997703" confidence="0.8">
<collection wordnetid="107951464" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<link xlink:type="simple" xlink:href="../685/54685.xml">
PSPACE-complete</link></group>
</collection>
</class>
. It was also shown that computing the minimum ratio is <link>
 #P</link>-hard. <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref></p>

</sec>
<sec>
<st>
Applications</st>
<p>

The problem is said to have applications in <link xlink:type="simple" xlink:href="../476/43476.xml">
operations research</link>, transportation planning, <link xlink:type="simple" xlink:href="../164/1164.xml">
artificial intelligence</link>, and <link xlink:type="simple" xlink:href="../488/233488.xml">
machine learning</link>. A variant of the problem has been studied for robot navigation with probabilistic landmark recognition.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%222%22])">2</ref></p>

</sec>
<sec>
<st>
Open Problems</st>
<p>

Despite the age of the problem and its many potential applications, many natural questions still remain open. Is there a constant-factor approximation or is the problem <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<class wordnetid="107997703" confidence="0.8">
<collection wordnetid="107951464" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../925/2018925.xml">
APX</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</group>
</collection>
</class>
</rule>
</event>
-hard? An even more fundamental question has been left unanswered - is there a polynomial-size <it>description</it> of an optimal policy, setting aside for a moment the time to compute? <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%223%22])">3</ref></p>

</sec>
<sec>
<st>
See Also</st>
<p>

<list>
<entry level="1" type="bullet">

<condition wordnetid="113920835" confidence="0.8">
<state wordnetid="100024720" confidence="0.8">
<problem wordnetid="114410605" confidence="0.8">
<difficulty wordnetid="114408086" confidence="0.8">
<link xlink:type="simple" xlink:href="../985/41985.xml">
Shortest path problem</link></difficulty>
</problem>
</state>
</condition>
</entry>
</list>
</p>

</sec>
<sec>
<st>
Notes</st>

<p>

<reflist>
<entry id="1">
Papadimitriou and Yannakakis, 1982, p. 148</entry>
<entry id="2">
 <cite style="font-style:normal">Amy J. Briggs; "Carrick Detweiler, Daniel Scharstein&#32;(2004).&#32;""Expected shortest paths for landmark-based robot navigation"". <it>"International Journal of Robotics Research"</it>&#32;<b>23</b>: 717-718.</cite>&nbsp;</entry>
<entry id="3">
Karger and Nikolova, 2008, p. 1</entry>
</reflist>
</p>

</sec>
<sec>
<st>
References</st>
<p>

<list>
<entry level="1" type="bullet">

  <cite style="font-style:normal">C.H. Papadimitriou;&#32;M. Yannakakis&#32;(1989). "Shortest paths without a map"&#32;in <it>Proc. 16th ICALP</it>.&#32;<it>Lecture notes in computer science</it>&#32;<b>372</b>: 610-620, <link xlink:type="simple" xlink:href="../949/1418949.xml">
Springer-Verlag</link>.</cite>&nbsp;</entry>
<entry level="1" type="bullet">

 David Karger;&#32;Evdokia Nikolova&#32;(2008).&#32;"<it>Exact Algorithms for the Canadian Traveller Problem on Paths and Trees</it>".</entry>
</list>
</p>

</sec>
</bdy>
</algorithm>
</problem>
</article>
