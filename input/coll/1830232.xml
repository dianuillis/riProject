<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 19:01:20[mciao0826] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>Iterative Closest Point</title>
<id>1830232</id>
<revision>
<id>240404660</id>
<timestamp>2008-09-23T09:52:21Z</timestamp>
<contributor>
<username>RussBot</username>
<id>279219</id>
</contributor>
</revision>
<categories>
<category>Geometry in computer vision</category>
</categories>
</header>
<bdy>

<b>Iterative Closest Point</b> (<b>ICP</b>) is an <link xlink:type="simple" xlink:href="../775/775.xml">
algorithm</link> employed to match two clouds of points. This matching is used to reconstruct 3D surfaces from different scans, to localize robots and achieve optimal path planning (especially when wheel odometry is unreliable due to slippery terrain), to match <link xlink:type="simple" xlink:href="../099/4099.xml">
bone</link> models with measures in real-time, etc.<p>

The algorithm is very simple and is commonly used in real-time. It iteratively estimates the transformation (translation, rotation) between two raw scans. </p>
<p>

Inputs: two raw scans, initial estimation of the transformation, criteria for stopping the iteration. </p>
<p>

Output: refined transformation.</p>
<p>

Essentially the algorithm steps are :</p>
<p>

<list>
<entry level="1" type="number">

 Associate points by the nearest neighbor criteria.</entry>
<entry level="1" type="number">

 Estimate the parameters using a mean square cost function.</entry>
<entry level="1" type="number">

 Transform the points using the estimated parameters.</entry>
<entry level="1" type="number">

 <link xlink:type="simple" xlink:href="../237/15237.xml">
Iterate</link> (re-associate the points and so on).</entry>
</list>

</p>
<sec>
<st>
See also</st>
<p>
 
<software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../613/6194613.xml">
MeshLab</link></software>
 an open source mesh processing tool that includes a GPL implementation of the ICP algorithm.
</p>
</sec>
<sec>
<st>
External links</st>
<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://citeseer.ist.psu.edu/zhang92iterative.html">
Iterative Point Matching for Registration of Free-Form Curves and Surfaces (1992) (Zhengyou Zhang)</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.cs.princeton.edu/~smr/papers/icpstability.pdf">
Derivation of ICP Equations</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://graphics.stanford.edu/papers/fasticp/">
Efficient Variants of the ICP Algorithm</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.mathworks.com/matlabcentral/fileexchange/loadFile.do?objectId=12627&amp;objectType=file">
Iterative Closest Point Method in Matlab</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.mathworks.com/matlabcentral/fileexchange/loadFile.do?objectId=16766&amp;objectType=file">
Iterative Closest Point Method in C++</weblink></entry>
</list>
</p>



</sec>
</bdy>
</article>
