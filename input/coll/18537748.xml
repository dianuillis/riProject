<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 17.04.2009 04:46:41[mciao0825] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<application  confidence="0.9511911446218017" wordnetid="106570110">
<model  confidence="0.9511911446218017" wordnetid="105890249">
<software  confidence="0.9508927676800064" wordnetid="106566077">
<header>
<title>Visual WebGui</title>
<id>18537748</id>
<revision>
<id>243098218</id>
<timestamp>2008-10-05T03:55:36Z</timestamp>
<contributor>
<username>MBisanz</username>
<id>92123</id>
</contributor>
</revision>
<categories>
<category>Web application frameworks</category>
<category>Web applications</category>
<category>Web development</category>
</categories>
</header>
<bdy>
<template>
<name>Infobox_Software</name>
<parameters>
<genre>
<link>
Web RAD framework</link></genre>
<website>
<weblink xlink:type="simple" xlink:href="http://www.visualwebgui.com">
http://www.visualwebgui.com</weblink></website>
<latest_release_version>
6.1.1b</latest_release_version>
<name>
Visual WebGui</name>
<latest_release_date>
<time_off wordnetid="115118453" confidence="0.8">
<fundamental_quantity wordnetid="113575869" confidence="0.8">
<time_period wordnetid="115113229" confidence="0.8">
<vacation wordnetid="115137890" confidence="0.8">
<leisure wordnetid="115137676" confidence="0.8">
<link xlink:type="simple" xlink:href="../088/16088.xml">
July 15</link></leisure>
</vacation>
</time_period>
</fundamental_quantity>
</time_off>
, <link xlink:type="simple" xlink:href="../825/35825.xml">
2008</link></latest_release_date>
<license>
<link>
GPL / LGPL</link></license>
</parameters>
</template>

<p>

Visual WebGui (VWG) is an <link xlink:type="simple" xlink:href="../663/277663.xml">
open-source</link> rapid application development (RAD) framework for AJAX &amp; <link xlink:type="simple" xlink:href="../719/9731719.xml">
Silverlight</link> GUIs. The platform presents a new approach to applying desktop usability to the web by viewing it as an extension to a desktop rather than web. Nevertheless, VWG provides seamless integration to Visual Studio and the <link xlink:type="simple" xlink:href="../402/60402.xml">
.NET Framework</link> and extends <model wordnetid="105890249" confidence="0.8">
<idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<engine wordnetid="103287733" confidence="0.8">
<motor wordnetid="103789946" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<machine wordnetid="103699975" confidence="0.8">
<hypothesis wordnetid="105888929" confidence="0.8">
<link xlink:type="simple" xlink:href="../996/651996.xml">
ASP.NET</link></hypothesis>
</machine>
</device>
</motor>
</engine>
</instrumentality>
</artifact>
</concept>
</idea>
</model>
.</p>

<sec>
<st>
 Overview </st>
<p>

The <invention wordnetid="105633385" confidence="0.8">
<link xlink:type="simple" xlink:href="../139/33139.xml">
web</link></invention>
 was originally designed to present static content to users. With time and widening usages of the web in all aspects of life, and business in particular demand for a more dynamic and interactive behavior, raised and became essential. This led to the development of new environments and techniques to create and show content on the web.</p>
<p>

As a result, Microsoft developed <link xlink:type="simple" xlink:href="../891/427891.xml">
ASP</link> which was their first <link xlink:type="simple" xlink:href="../288/29288.xml">
server-side script</link> engine for dynamically-generated web pages. <link xlink:type="simple" xlink:href="../996/651996.xml">
ASP.NET</link> was later introduced in attempts to simplify developers' transition from Windows application development to web development by offering the ability to build pages composed of controls similar to a Windows user interface.</p>
<p>

On the client side, there is a constant effort to keep improving the capabilities of websites and web applications by extending traditional web technologies to support and cater for the rising needs. <link xlink:type="simple" xlink:href="../996/8996.xml">
DHTML</link> was introduced to provide users with a more interactive and animated web sites by combining together HTTP, <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../845/9845.xml">
JavaScript</link></programming_language>
, <link xlink:type="simple" xlink:href="../013/164013.xml">
CSS</link>, and the <standard wordnetid="107260623" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../743/8743.xml">
Document Object Model</link></system_of_measurement>
</standard>
.</p>
<p>

<word wordnetid="106286395" confidence="0.8">
<part wordnetid="113809207" confidence="0.8">
<neologism wordnetid="106294441" confidence="0.8">
<language_unit wordnetid="106284225" confidence="0.8">
<link xlink:type="simple" xlink:href="../950/1610950.xml">
AJAX</link></language_unit>
</neologism>
</part>
</word>
 is a further step to bring web interactivity closer to that of desktop applications and to cater for the ever rising demand for applications on web. AJAX grouped together interrelated web development techniques for creating interactive web applications or rich Internet applications by retrieving data from the server asynchronously in the background without interfering with the display and behavior of the existing page.</p>
<p>

Another approach trying to bring the desktop to web, is <link xlink:type="simple" xlink:href="../303/7308303.xml">
desktop virtualization</link>. This approach enables 'picturing' of the desktop on the web. Its limitations are that this approach requires specific plug-in installation, limited to the desktop application, not being able to interact with local client resources and produces  security concerns.</p>
<p>

However, extending web technologies has its limitations, originating from their traditional purpose of content presenting. Those limitations fail  to offer real desktop development productivity, usability, interactivity and security. </p>

</sec>
<sec>
<st>
 On-Server Web Paradigm </st>
<p>

On-server web, represents yet another approach trying to solve the inherent inferiority of traditional web technologies, for applications. The On-Server Web paradigm shift<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref>, means the entire application flow, UI logic and validations are developed and processed on the server while the browser serves as a “display” for the output and a “receptor” for user input.  </p>
<p>

As with Server based computing, On-Server <link xlink:type="simple" xlink:href="../950/1610950.xml">
AJAX</link> simply reflects the “screens” to the client, captures user input from the client and reflects the incremental changes back to the client all over a highly optimized communications channel. In the case of On-Server Web there is no need to consider the “screen” as a purely graphical representation of the application – a bitmap, but rather it can be considered as a series of related components which change according to the application logic. In effect this is similar to how X Window communicates changes to X Terminals by transferring component changes between the client “host” and the server’s state.</p>
<p>

Deploying complex line of business applications on the web has traditionally required either rewriting the application using web oriented technologies and development patterns or employing server based computing platforms such as <link xlink:type="simple" xlink:href="../948/309948.xml">
Citrix</link> and Windows Terminal Services<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%222%22])">2</ref>. These platforms have grown in popularity as a solution for supporting heavy deployments of existing client-server line of business applications.</p>
<p>

The On-Server AJAX paradigm shift allows to support deployments of complex line of business applications with unprecedented simplicity, security and unlimited complexities. With On-Server AJAX, applications can run in desktop or web mode using the same source code, and can be migrated from legacy code without requiring rewriting the application.</p>

</sec>
<sec>
<st>
 Architecture </st>
<p>

A standard browser running on standard HTML or Silverlight on the client side. On the server side there are the VWG router which handles the mapping between the appplication URLs and the actural code, the VWG configuration which adds relevant application level properties, and the application code. </p>
<p>

When a VWG URL is called, the request hit the Visual webGui router and mapped to the application. The application then is initialized with relevant configuration properties. The initial Metadata state is sent back to the browser along with the 200k <link xlink:type="simple" xlink:href="../394/50394.xml">
Kernel</link> (non exe) which is responsible for all the rendering and communication tasks on the client. </p>
<p>

From there on, any user interface triggers and event that is processed by the application, generating differential UI Metadata and changes the state. This changes average 1k using a VWG pipeline, optimized for standard <link xlink:type="simple" xlink:href="../443/13443.xml">
HTTP</link> and update the view on the client side when sent back.</p>
<p>

Moreover, not every user interaction causes a round trip - there is an algorithm that handles user interaction requesting server updates only on critical user interaction. This protocol and the fact that the client remains thin with no data or logic are the reasons that the user experience resembles that of a desktop.</p>

</sec>
<sec>
<st>
 Key Features </st>
<p>

Visual WebGui (VWG)<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%223%22])">3</ref> provides infrastructure for programming &amp; deploying RIA web applications or rapidly porting desktop application (VB6, <link xlink:type="simple" xlink:href="../727/826727.xml">
WinForms</link>, MVC)<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%224%22])">4</ref>. to web without reengineering or rewrite. VWG infrastructure allows integration and mash up, and supports complex, IT grade application deployment on web with the server doing the heavy lifting. VWG is one of the leading implementation of On-Server web paradigm<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%225%22])">5</ref>.</p>
<p>

VWG decupled GUI structure allows multiple presentation layers. Any presentation layer that sends and receives XML could serve as VWG's presentation layer. Current implementation supports <link xlink:type="simple" xlink:href="../996/8996.xml">
DHTML</link> or Microsoft Silverlight as VWG's presentation layers. They maintain their original capabilities in terms of styling, cross browser, mobile suitability, customization and extension capabilities over VWG infrastructure.</p>
<p>

On-Server AJAX utilizes a client side “rendering” engine which communicates with the server over XML/HTTP. The rendering engine uses a proprietary protocol to incrementally update the view. The client never consumes data or services directly since all of the application logic, UI logic and data access is handled on the server. The client simply connects to the “view” on the server and therefore never compromises security. Furthermore, since a proprietary protocol is used to correlate view state between the server and the client, it’s a greater challenge to override, eavesdrop or hack.</p>
<p>

In addition in On-Server AJAX, the only data that is delivered to the client is data that can be viewed on the client meaning there is never any sensitive data that may be required for logic or validation beyond what is rendered and seen by the user on the screen.</p>
<p>

VWG enables the developer to use a single language and programming model in order to design the application UI and the underlying logic. In addition it alleviates the need to understand and deal with the web’s innate statelessness by offering the use of well known design patterns and tools such as WinForms to design and develop highly interactive, data rich applications with the same productivity of desktop applications<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%226%22])">6</ref>. </p>
<p>

Client side AJAX/Silverlight is meant to improve the responsiveness of the client. In most cases the user experience is improved, however it can have a dramatic effect on server load. Frameworks send across hundreds of lines of Javascript code over and over between requests, necessitating heavy I/O on the host web server generating a “large” bandwidth profile. Client side AJAX frameworks rely on the processing power of the client to handle caching, serialization, validation and paging. Performance varies according to the available resources on the client. Lower memory and slower CPUs could have an adverse effect on the user experience<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%227%22])">7</ref>.</p>
<p>

On-Server AJAX only needs to transfer the rendering engine code once after which only state and data changes are transferred as required. Ultimately this requires more client/server round trips; however the bandwidth profile is kept at a minimum. This results in a highly responsive application which utilizes fewer resources enabling servers to handle more concurrent users. In On-Server AJAX the client only handles rendering of the current view state. This means that less client side objects and data need to be processed on the client (for rendering purposes) resulting in less client side resources being required. Ultimately this ensures all users receive uniform performance regardless of their memory and CPU limitations.</p>

</sec>
<sec>
<st>
 References </st>

<p>

<reflist>
<entry id="1">
"<weblink xlink:type="simple" xlink:href="http://www.visualwebgui.com/Community/Resources/News/tabid/328/articleType/ArticleView/articleId/246/Default.aspx">
On-Server Web</weblink>".&#32;  Navot Peled.&#32;Retrieved on <link>
2008-07-08</link>.</entry>
<entry id="2">
"<weblink xlink:type="simple" xlink:href="http://www.visualwebgui.com/Community/Resources/News/tabid/328/articleType/ArticleView/articleId/239/Default.aspx">
The ROI of Citrix but without the Limitations</weblink>".&#32;  Navot Peled.&#32;Retrieved on <link>
2008-05-28</link>.</entry>
<entry id="3">
"<weblink xlink:type="simple" xlink:href="http://blogs.msdn.com/joestagner/archive/2007/11/08/visual-webgui-windows-forms-for-web-applications.aspx">
Visual WebGui</weblink>".&#32;Retrieved on <link>
2008-07-22</link>.</entry>
<entry id="4">
"<weblink xlink:type="simple" xlink:href="http://weblogs.asp.net/rosherove/archive/2007/07/28/visual-web-gui-helps-me-write-in-winform-and-run-as-asp-net.aspx">
Write in Winform and run as ASP.NET</weblink>".&#32;  Roy Osherov.&#32;Retrieved on <link>
2007-07-28</link>.</entry>
<entry id="5">
"<weblink xlink:type="simple" xlink:href="http://west-wind.com/weblog/posts/180727.aspx">
Visual WebGui and a LINQ to SQL quirk</weblink>".&#32;  Rick Strahl.&#32;Retrieved on <link>
2008-07-22</link>.</entry>
<entry id="6">
"<weblink xlink:type="simple" xlink:href="http://www.aspnetpro.com/opinion/2007/09/asp200709jg_o/asp200709jg_o.asp">
Simplicity at Last</weblink>".&#32;  Jonathan Goodyear.&#32;Retrieved on <link>
2008-07-22</link>.</entry>
<entry id="7">
"<weblink xlink:type="simple" xlink:href="http://netpl.blogspot.com/2007/06/aspnet-ajax-framework-contest.html">
ASP.NET Ajax Framework Contest</weblink>".&#32;  Wiktor Zychla.&#32;Retrieved on <link>
2007-06-28</link>.</entry>
</reflist>
</p>

</sec>
<sec>
<st>
 External links </st>
<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.visualwebgui.com">
Visual WebGui</weblink> homepage</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.visualstudiogallery.com/ExtensionDetails.aspx?ExtensionID=047cffc1-986b-486e-b3e4-47a24db65e9f">
Visual Studio Gallery</weblink> VWG Silverlight page.</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://msdnmag.firstlightera.com/EN/Microsites/1/Gizmox/Home">
MSDN Related Partners</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.codeplex.com/VWGSilverlight">
Codeplex</weblink> VWG over Silverlight project</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://sourceforge.net/projects/vwgsilverlight/">
SourceForge</weblink> VWG Silverlight framework</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://weblogs.asp.net/visualwebgui/default.aspx">
ASP.NET Weblogs</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.microsoft.com/events/EventDetails.aspx?CMTYSvcSource=MSCOMMedia&amp;Params=~CMTYDataSvcParams%5E~arg+Name%3D%22ID%22+Value%3D%221032374251%22%2F%5E~arg+Name%3D%22ProviderID%22+Value%3D%22A6B43178-497C-4225-BA42-DF595171F04C%22%2F%5E~arg+Name%3D%22lang%22+Value%3D%22en%22%2F%5E~arg+Name%3D%22cr%22+Value%3D%22US%22%2F%5E~sParams%5E~%2FsParams%5E~%2FCMTYDataSvcParams%5E">
Microsoft Webcasts</weblink> Live from Redmond</entry>
</list>
</p>

</sec>
</bdy>
</software>
</model>
</application>
</article>
