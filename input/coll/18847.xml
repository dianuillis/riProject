<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 15:29:41[mciao0826] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<O  confidence="0.9508927676800064" wordnetid="106832680">
<header>
<title>Multics</title>
<id>18847</id>
<revision>
<id>242160555</id>
<timestamp>2008-10-01T03:54:44Z</timestamp>
<contributor>
<username>SmackBot</username>
<id>433328</id>
</contributor>
</revision>
<categories>
<category>Free software operating systems</category>
<category>1960s software</category>
</categories>
</header>
<bdy>
<template>
<name>Infobox OS</name>
<parameters>
<ui>
<link xlink:type="simple" xlink:href="../707/6707.xml">
Command line interface</link></ui>
<supported_platforms>
<link xlink:type="simple" xlink:href="../659/58659.xml">
GE-645</link> mainframes, <link xlink:type="simple" xlink:href="../658/58658.xml">
Honeywell 6180</link> series machines</supported_platforms>
<website>
Multicians<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%225%22])">5</ref>, Sources<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%226%22])">6</ref></website>
<programmed_in>
<programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../708/23708.xml">
PL/I</link></programming_language>
, <link xlink:type="simple" xlink:href="../368/1368.xml">
Assembly language</link></programmed_in>
<kernel_type>
<link xlink:type="simple" xlink:href="../825/20825.xml">
Monolithic kernel</link></kernel_type>
<working_state>
Mature, Historic</working_state>
<released>
1969</released>
<developer>
<university wordnetid="108286163" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../879/18879.xml">
MIT</link></university>
, <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../730/12730.xml">
GE</link></company>
, <link xlink:type="simple" xlink:href="../712/3712.xml">
Bell Labs</link></developer>
<name>
Multics</name>
<source_model>
Semi-free<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%224%22])">4</ref>; <link xlink:type="simple" xlink:href="../635/10635.xml">
Free</link> and <link xlink:type="simple" xlink:href="../663/277663.xml">
open source</link> software as of 2007</source_model>
<language>
<language wordnetid="106282651" confidence="0.8">
<link xlink:type="simple" xlink:href="../916/8569916.xml">
English</link></language>
</language>
<license>
<link xlink:type="simple" xlink:href="../193/19193.xml">
MIT License</link></license>
</parameters>
</template>


<b>Multics</b> (<b>Mult</b>iplexed <b>I</b>nformation and <b>C</b>omputing <b>S</b>ervice) was an extremely influential early <link xlink:type="simple" xlink:href="../958/30958.xml">
time-sharing</link> <link xlink:type="simple" xlink:href="../194/22194.xml">
operating system</link>. The project was started in 1964. The last known running Multics installation was shut down on <link xlink:type="simple" xlink:href="../437/22437.xml">
October 31</link>, <link xlink:type="simple" xlink:href="../548/34548.xml">
2000</link>.
<sec>
<st>
Overview</st>
<p>

Initial planning and development for Multics started in 1964. Originally it was a cooperative project led by <university wordnetid="108286163" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../879/18879.xml">
MIT</link></university>
 (with <link>
Fernando Corbat√≥</link>) along with <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../730/12730.xml">
General Electric</link></company>
 and <link xlink:type="simple" xlink:href="../712/3712.xml">
Bell Labs</link>. Bell Labs dropped out in 1969 and in 1970 GE's computer business including Multics was taken over by <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../721/225721.xml">
Honeywell</link></company>
.</p>
<p>

Multics was conceived as a commercial product for GE and became one for Honeywell but not a very successful one. Due to its many novel and valuable ideas Multics had a great impact in the computer field even though it was then much derided by its critics.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref></p>
<p>

It had numerous features intended to result in high availability so that it would produce a <link xlink:type="simple" xlink:href="../147/1985147.xml">
computing utility</link> similar to the <link xlink:type="simple" xlink:href="../003/30003.xml">
telephone</link> and <link xlink:type="simple" xlink:href="../3$00/Radeon_R$300.xml">
electricity</link> services. Modular hardware structure and software architecture were used to achieve this. The system could grow in size by simply adding more of the appropriate resource - computing power, main memory, disk storage, etc. Separate <link xlink:type="simple" xlink:href="../589/61589.xml">
Access Control List</link>s on every file provided flexible information sharing and complete privacy when needed. It had a number of standard mechanisms to allow engineers to analyse the performance of the system as well as a number of adaptive performance optimisation mechanisms.</p>

</sec>
<sec>
<st>
Novel ideas</st>


<p>

Multics implemented a <link xlink:type="simple" xlink:href="../170/8131170.xml">
single level store</link> for data access, discarding the clear distinction between <link xlink:type="simple" xlink:href="../077/7077.xml">
file</link>s (called <it>segments</it> in Multics) and <it><link>
process</link> <link xlink:type="simple" xlink:href="../847/25847.xml">
memory</link></it>.  The memory of a process consisted solely of segments which were mapped into its <link xlink:type="simple" xlink:href="../144/507144.xml">
address space</link>. To read or write to them, the process simply used normal <link xlink:type="simple" xlink:href="../218/5218.xml">
CPU</link> instructions, and the operating system took care of making sure that all the modifications were saved to <artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<medium wordnetid="106254669" confidence="0.8">
<link xlink:type="simple" xlink:href="../472/Species_8472.xml">
disk</link></medium>
</instrumentality>
</artifact>
.  In <standard wordnetid="107260623" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../305/23305.xml">
POSIX</link></system_of_measurement>
</standard>
 terminology, it was as if every file was <link xlink:type="simple" xlink:href="../709/608709.xml">
mmap</link>()ed; however, in Multics there was no concept of <it>process memory</it>, separate from the memory used to hold mapped-in files, as <family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../642/31642.xml">
Unix</link></family>
 has.  <it>All</it> memory in the system was part of <it>some</it> segment, which appeared in the <link xlink:type="simple" xlink:href="../280/1010280.xml">
file system</link>; this included the temporary scratch memory of the process, its kernel stack, etc.</p>
<p>

One disadvantage of this was that the size of segments was limited to 256K 36-bit words (slightly more than 1 <link xlink:type="simple" xlink:href="../918/19918.xml">
megabyte</link>). This was due to the particular hardware architecture of the machines Multics ran on.  Extra code had to be used to work on files larger than this, called multisegment files. But in the days when one megabyte of memory was prohibitively expensive, and before large databases and later huge <link xlink:type="simple" xlink:href="../326/13390326.xml">
bitmap</link> graphics, this limit was rarely encountered.</p>
<p>

Another major new idea of Multics was <link>
dynamic linking</link>, in which a running process could request that other segments be added to its address space, segments which could contain code that it could then execute.  This allowed applications to automatically use the latest version of any external routine they called, since those routines were kept in other segments, which were dynamically linked in only when a process first tried to begin execution in them.  Since different processes could use different <link>
search rules</link>, different users could end up using different versions of external routines automatically.  Equally importantly, with the appropriate settings on the Multics security facilities, the code in the other segment could then gain access to data structures maintained in a different process.</p>
<p>

Thus, to interact with an application running in part as a <link xlink:type="simple" xlink:href="../986/458986.xml">
daemon</link> (in another process), a user's process simply performed a normal procedure call instruction, to a code segment which it had dynamically linked to (a code segment which implemented some operation associated with the daemon). The code in that segment could then modify data maintained and used in the daemon.  When the action necessary to commence the request was completed, a simple procedure return instruction returned control of the user's process to the user's code.</p>
<p>

The single-level store and dynamic linking are still not available to their full power in other widely used operating systems, despite the rapid and enormous advance in the computer field since the 1960s. They are becoming more widely accepted and available in more limited forms, e.g. dynamic linking.</p>
<p>

Multics also supported extremely aggressive on-line reconfiguration; <link xlink:type="simple" xlink:href="../218/5218.xml">
central processing unit</link>s, memory banks, disk drives, etc. could be added and removed while the system continued operating.  At the MIT system, where most early software development was done, it was common practice to split the <link xlink:type="simple" xlink:href="../020/64020.xml">
multiprocessor</link> system into two separate systems during off-hours by incrementally removing enough components to form a second working system, leaving the rest still running the original logged-in users.  System software development testing could be done on the second machine, then the components of the second system were added back onto the main user system, without ever having shut it down.  Multics supported multiple CPUs: it was one of the earliest multiprocessor systems.</p>
<p>

Multics was the first major operating system to be designed as a <link xlink:type="simple" xlink:href="../398/7398.xml">
secure system</link> from the ground up. Despite this, early versions of Multics were broken into repeatedly.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%222%22])">2</ref>  This led to further work that made the system much more secure and prefigured modern <link xlink:type="simple" xlink:href="../730/28730.xml">
security engineering</link> techniques.  Break-ins became very rare once the second-generation hardware base was adopted; it had hardware support for <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<model wordnetid="110324560" confidence="0.8">
<assistant wordnetid="109815790" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../185/3446185.xml">
ring-oriented security</link></causal_agent>
</worker>
</assistant>
</model>
</person>
</physical_entity>
, a multilevel refinement of the concept of <link>
master mode</link>.</p>
<p>

Multics was the first operating system to provide a hierarchical file system, and filenames could be of almost arbitrary length and syntax; a given file or directory could have multiple names (typically a long and short form); and symbolic links between directories were also supported.  It was the first to use the now-standard concept of per-<link xlink:type="simple" xlink:href="../178/45178.xml">
process</link> <link xlink:type="simple" xlink:href="../993/273993.xml">
stack</link>s in the <link xlink:type="simple" xlink:href="../394/50394.xml">
kernel</link>, with a separate stack for each security ring. It was also one of the first written in a high level language (<programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../708/23708.xml">
PL/I</link></programming_language>
), just after the <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../244/966244.xml">
Burroughs MCP</link></O>
 system written in <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../453/1453.xml">
ALGOL</link></programming_language>
.</p>

</sec>
<sec>
<st>
Project history</st>
<p>

Multics was developed initially for the <link xlink:type="simple" xlink:href="../659/58659.xml">
GE-645</link> mainframe, a <link xlink:type="simple" xlink:href="../064/920064.xml">
36-bit</link> system; later, it was supported on the <link xlink:type="simple" xlink:href="../658/58658.xml">
Honeywell 6180</link> series machines.</p>
<p>

Bell Labs pulled out of the project in 1969; some of the people who had worked on it there went on to create the <family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../642/31642.xml">
Unix</link></family>
 system. Superficial influence of Multics on Unix is evident in many areas, including the naming of commands. But the design philosophy was quite different, focusing on keeping the system small and simple, and so correcting the perceived deficiencies of Multics. The name "Unix" (originally "Unics") is itself a <link xlink:type="simple" xlink:href="../857/1158857.xml">
hack</link> on "Multics".  The U in UNIX is rumored to stand for "Uniplexed" as opposed to the "Multiplexed" of Multics, further underscoring the designers' rejections of Multics' complexity in favor of a more straightforward and workable approach.</p>
<p>

<company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../721/225721.xml">
Honeywell</link></company>
 bought GE's computer division, released a better hardware base, and continued system development until 1985. About 80 multimillion dollar sites were installed, at universities, industry, and government sites. The <country wordnetid="108544813" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../419/5843419.xml">
French</link></country>
 university system had quite a few in the early 1980s. After Honeywell stopped supporting Multics, users migrated to other systems, including Unix.  The last Multics machine was shut down on <link xlink:type="simple" xlink:href="../437/22437.xml">
October 31</link>, <link xlink:type="simple" xlink:href="../548/34548.xml">
2000</link> at the Canadian Department of National Defence.</p>
<p>

Multics was distributed in 1975 to 2000 by <company wordnetid="108058098" confidence="0.8">
<institution wordnetid="108053576" confidence="0.8">
<link xlink:type="simple" xlink:href="../024/945024.xml">
Groupe Bull</link></institution>
</company>
 in <link xlink:type="simple" xlink:href="../239/9239.xml">
Europe</link>, and by Bull HN Information Systems Inc in the US.  In 2006 <link>
Bull SAS</link> <link xlink:type="simple" xlink:href="../758/18938758.xml">
open source</link>d Multics versions MR10.2, MR11.0, MR12.0, MR12.1, MR12.2, MR12.3, MR12.4 &amp; MR12.5.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%223%22])">3</ref></p>

</sec>
<sec>
<st>
Retrospective observations</st>
<p>

It is startling that the permanently resident kernel of this powerful multiprocessor mainframe <it>computing utility</it>, much derided in its day as being too large and complex, was only 135 <link xlink:type="simple" xlink:href="../794/16794.xml">
kB</link> of code. The first <link xlink:type="simple" xlink:href="../061/19061.xml">
MIT</link> GE-645 had 512K words of memory (2 <link xlink:type="simple" xlink:href="../918/19918.xml">
MB</link>), a truly enormous amount at the time, and the kernel only used a moderate portion of Multics main memory.</p>
<p>

The entire system, including the operating system and the complex PL/I <link xlink:type="simple" xlink:href="../739/5739.xml">
compiler</link>, user commands, and subroutine libraries, consisted of about 1500 source modules. These averaged roughly 200 lines of source code each, and compiled to produce a total of roughly 4.5 MB of procedure code, which though small today was fairly large by the standards of the day.</p>
<p>

Multics compilers generally optimised more for <link>
code density</link> than CPU performance, for example using small sub-routines called <it>operators</it> for short standard code-sequences, making direct comparison of object code size with more modern systems less useful. High code density was a good optimisation choice for a <link xlink:type="simple" xlink:href="../751/39751.xml">
multi-user</link> system with expensive main memory, such as Multics.</p>

</sec>
<sec>
<st>
See also</st>

<p>

<table style="background:#f9f9f9; font-size:85%; line-height:110%; ">
<row>
<col>
 <image width="32x28px" src="Free_Software_Portal_Logo.svg">
</image>
</col>
<col style="padding:0 0.2em;">
 <b><it>
Free software&#32;portal</it></b></col>
</row>
</table>
</p>
<p>

<list>
<entry level="1" type="bullet">

 <link>
Fernando J. Corbat√≥</link>, leader of the Multics project while MIT was involved</entry>
<entry level="1" type="bullet">

 <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<engineer wordnetid="109615807" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<link xlink:type="simple" xlink:href="../760/974760.xml">
Jerome H. Saltzer</link></scientist>
</causal_agent>
</engineer>
</person>
</physical_entity>
</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../765/974765.xml">
Jack B. Dennis</link></entry>
<entry level="1" type="bullet">

 <scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../772/974772.xml">
Peter J. Denning</link></scientist>
</entry>
<entry level="1" type="bullet">

 <physical_entity wordnetid="100001930" confidence="0.8">
<peer wordnetid="109626238" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<colleague wordnetid="109935990" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<associate wordnetid="109816771" confidence="0.8">
<link xlink:type="simple" xlink:href="../777/974777.xml">
Robert M. Graham</link></associate>
</scientist>
</causal_agent>
</colleague>
</person>
</peer>
</physical_entity>
</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../955/974955.xml">
Victor A. Vyssotsky</link></entry>
<entry level="1" type="bullet">

 <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<pioneer wordnetid="110434725" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<originator wordnetid="110383816" confidence="0.8">
<creator wordnetid="109614315" confidence="0.8">
<link xlink:type="simple" xlink:href="../294/2417294.xml">
Louis Pouzin</link></creator>
</originator>
</scientist>
</causal_agent>
</pioneer>
</person>
</physical_entity>
, introduced the term <it>shell</it> for the command language used in <it>Multics''</it></entry>
<entry level="1" type="bullet">

 <physical_entity wordnetid="100001930" confidence="0.8">
<peer wordnetid="109626238" confidence="0.8">
<expert wordnetid="109617867" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<specialist wordnetid="110631941" confidence="0.8">
<colleague wordnetid="109935990" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<associate wordnetid="109816771" confidence="0.8">
<link xlink:type="simple" xlink:href="../127/383127.xml">
Peter G. Neumann</link></associate>
</scientist>
</causal_agent>
</colleague>
</specialist>
</person>
</expert>
</peer>
</physical_entity>
</entry>
<entry level="1" type="bullet">

 <physical_entity wordnetid="100001930" confidence="0.8">
<expert wordnetid="109617867" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<specialist wordnetid="110631941" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../758/7339758.xml">
Roger R. Schell</link></causal_agent>
</specialist>
</person>
</expert>
</physical_entity>
</entry>
<entry level="1" type="bullet">

 <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<theorist wordnetid="110706812" confidence="0.8">
<intellectual wordnetid="109621545" confidence="0.8">
<traveler wordnetid="109629752" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<refugee wordnetid="110516016" confidence="0.8">
<exile wordnetid="110071332" confidence="0.8">
<absentee wordnetid="109757653" confidence="0.8">
<link xlink:type="simple" xlink:href="../212/434212.xml">
Robert Fano</link></absentee>
</exile>
</refugee>
</scientist>
</causal_agent>
</traveler>
</intellectual>
</theorist>
</person>
</physical_entity>
, director of <link xlink:type="simple" xlink:href="../147/254147.xml">
Project MAC</link> at MIT 1963-1968</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../150/254150.xml">
Joseph Licklider</link>, director of Project MAC at MIT 1968-1971</entry>
</list>
</p>

</sec>
<sec>
<st>
References</st>
<p>

<reflist>
<entry id="1">
<weblink xlink:type="simple" xlink:href="http://www.multicians.org/myths.html">
Myths about Multics</weblink></entry>
<entry id="2">
Tom Van Vleck&#32;(2002).&#32;"<weblink xlink:type="simple" xlink:href="http://www.multicians.org/security.html">
How the Air Force cracked Multics Security</weblink>".</entry>
<entry id="3">
<weblink xlink:type="simple" xlink:href="http://stuff.mit.edu/afs/athena/reference/multics-history/">
Multics</weblink></entry>
<entry id="4">
<weblink xlink:type="simple" xlink:href="http://www.multicians.org/myths.html#source">
Myths about Multics</weblink></entry>
<entry id="5">
<weblink xlink:type="simple" xlink:href="http://www.multicians.org">
Multics</weblink></entry>
<entry id="6">
<weblink xlink:type="simple" xlink:href="http://web.mit.edu/multics-history/source/Multics_Internet_Server/Multics_sources.html">
Multics Internet Server</weblink></entry>
</reflist>
</p>

</sec>
<sec>
<st>
Further reading</st>
<p>

The literature contains a large number of papers about Multics, and various components of it; a fairly complete list is available <weblink xlink:type="simple" xlink:href="http://www.multicians.org/biblio.html">
here</weblink>. The most important and/or informative ones are listed below.
<list>
<entry level="1" type="bullet">

 F. J. Corbat√≥, V. A. Vyssotsky, <weblink xlink:type="simple" xlink:href="http://www.multicians.org/fjcc1.html">
<it>Introduction and Overview of the Multics System''</it></weblink>  (<link>
AFIPS</link> 1965) is a good introduction to the system..</entry>
<entry level="1" type="bullet">

 F. J. Corbat√≥, C. T. Clingen, J. H. Saltzer, <weblink xlink:type="simple" xlink:href="http://www.multicians.org/f7y.html">
<it>Multics -- The First Seven Years''</it></weblink> (AFIPS, 1972) is an excellent review, after a considerable period of use and improvement.</entry>
</list>
</p>

<ss1>
<st>
Technical details</st>
<p>

<list>
<entry level="1" type="bullet">

 Jerome H. Saltzer, <it><weblink xlink:type="simple" xlink:href="http://www.lcs.mit.edu/publications/specpub.php?id=691">
Introduction to Multics</weblink></it> (MIT Project MAC, 1974) is a considerably longer introduction to the system, geared towards actual users.</entry>
<entry level="1" type="bullet">

 Elliott I. Organick, <it>The Multics System: An Examination of Its Structure</it> (MIT Press, 1972) is the standard work on the system, although it documents an early version, and some features described therein never appeared in the actual system.</entry>
<entry level="1" type="bullet">

 V. A. Vyssotsky, F. J. Corbat√≥, R. M. Graham, <it><weblink xlink:type="simple" xlink:href="http://www.multicians.org/fjcc3.html">
Structure of the Multics Supervisor</weblink></it> (AFIPS 1965) describes the basic internal structure of the Multics kernel.</entry>
<entry level="1" type="bullet">

 Jerome H. Saltzer, <it><weblink xlink:type="simple" xlink:href="http://ncstrl.mit.edu/Dienst/UI/2.0/Describe/ncstrl.mit_lcs/LCS-TR-30?abstract=saltzer">
Traffic Control in a Multiplexed Computer System</weblink></it> (MIT Project MAC, June 1966) is the original description of the idea of switching kernel stacks; one of the classic papers of computer science.</entry>
<entry level="1" type="bullet">

 R. C. Daley, P. G. Neumann, <it><weblink xlink:type="simple" xlink:href="http://www.multicians.org/fjcc4.html">
A General Purpose File System for Secondary Storage</weblink></it> (AFIPS, 1965) describes the file system, including the access control and backup mechanisms.</entry>
<entry level="1" type="bullet">

 R. J. Feiertag, E. I. Organick, <it><weblink xlink:type="simple" xlink:href="http://www.multicians.org/rjf.html">
The Multics Input/Output System</weblink></it>.   Describes the lower levels of the I/O implementation.</entry>
<entry level="1" type="bullet">

 A. Bensoussan, C. T. Clingen, R. C. Daley, <it><weblink xlink:type="simple" xlink:href="http://www.multicians.org/multics-vm.html">
The Multics Virtual Memory: Concepts and Design</weblink></it>, (<organization wordnetid="108008335" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../ury/30th_century.xml">
ACM</link></organization>
 <link>
SOSP</link>, 1969) describes the Multics memory system in some detail.</entry>
<entry level="1" type="bullet">

 Paul Green, <it><weblink xlink:type="simple" xlink:href="ftp://ftp.stratus.com/pub/vos/multics/pg/mvm.html">
Multics Virtual Memory - Tutorial and Reflections</weblink></it> is a good in-depth look at the Multics storage system.</entry>
<entry level="1" type="bullet">

 Roger R. Schell, <it>Dynamic Reconfiguration in a Modular Computer System</it>  (MIT Project MAC, 1971) describes the reconfiguration mechanisms.</entry>
</list>
</p>

</ss1>
<ss1>
<st>
Security</st>
<p>

<list>
<entry level="1" type="bullet">

 Paul A. Karger, Roger R. Schell, <it><weblink xlink:type="simple" xlink:href="http://csrc.nist.gov/publications/history/karg74.pdf">
Multics Security Evaluation: Vulnerability Analysis</weblink></it> (Air Force Electronic Systems Division, 1974) describes the classic attacks on Multics security by a "<link xlink:type="simple" xlink:href="../113/347113.xml">
tiger team</link>".</entry>
<entry level="1" type="bullet">

 Jerome H. Saltzer, Michael D. Schroeder, <it><weblink xlink:type="simple" xlink:href="http://cap-lore.com/CapTheory/ProtInf/">
The Protection of Information in Computer Systems</weblink></it> (Proceedings of the <link xlink:type="simple" xlink:href="../938/56938.xml">
IEEE</link>, September 1975) describes the fundamentals behind the first round of security upgrades; another classic paper.</entry>
<entry level="1" type="bullet">

 M. D. Schroeder, D. D. Clark, J. H. Saltzer, D. H. Wells. <it><weblink xlink:type="simple" xlink:href="http://ncstrl.mit.edu/Dienst/UI/2.0/Describe/ncstrl.mit_lcs%2fLCS-TR-196?abstract=saltzer">
Final Report of the Multics Kernel Design Project</weblink></it> (MIT LCS, 1978) describes the security upgrades added to produce an even more improved version.</entry>
<entry level="1" type="bullet">

 Paul A. Karger, Roger R. Schell, <it><weblink xlink:type="simple" xlink:href="http://www.acsac.org/2002/papers/classic-multics.pdf">
Thirty Years Later: Lessons from the Multics Security Evaluation</weblink></it> (IBM, 2002) is an interesting retrospective which compares actual deployed security in today's hostile environment with what was demonstrated to be possible decades ago. It concludes that Multics offered considerably stronger security than most systems commercially available in 2002.</entry>
</list>
</p>

</ss1>
</sec>
<sec>
<st>
External links</st>
<p>

<list>
<entry level="1" type="bullet">

 http://www.multicians.org/ is a great site with a lot of material</entry>
<entry level="2" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.multicians.org/papers.html">
Multics papers online</weblink></entry>
<entry level="2" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.multicians.org/mga.html">
Multics glossary</weblink></entry>
<entry level="2" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.multicians.org/myths.html">
Myths</weblink> discusses numerous myths about Multics in some detail, including the myths that it failed, that it was big and slow, as well as a few understandable misapprehensions</entry>
<entry level="2" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.multicians.org/security.html">
Multics security</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.mit.edu:8001/afs/net/user/srz/www/multics.html">
Multics repository</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="ftp://ftp.stratus.com/pub/vos/multics/multics.html">
Multics repository at Stratus Computer</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.vaxman.de/historic_computers/multics/multics.html">
Multics at Universitaet Mainz</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://web.mit.edu/multics-history/">
Source code archive at MIT</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://sourceforge.net/projects/h6180/">
Active project to emulate the Honeywell 6180 Multics CPU</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://bitsavers.org/pdf/honeywell/multics/">
Various scanned Multics manuals</weblink></entry>
</list>
</p>


</sec>
</bdy>
</O>
</article>
