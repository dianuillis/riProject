<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 17.04.2009 05:08:00[mciao0825] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<feat  confidence="0.9511911446218017" wordnetid="100036762">
<header>
<title>Computer virus</title>
<id>18994196</id>
<revision>
<id>244176386</id>
<timestamp>2008-10-09T17:37:43Z</timestamp>
<contributor>
<username>Mrbell</username>
<id>2452643</id>
</contributor>
</revision>
<categories>
<category>All pages needing cleanup</category>
<category>Security exploits</category>
<category>All articles that may contain original research</category>
<category>Articles with invalid date parameter in template</category>
<category>Digital Revolution</category>
<category>Computer viruses</category>
<category>Articles that may contain original research since January 2008</category>
</categories>
</header>
<bdy>
<p>

A <b>computer virus</b> is a <link xlink:type="simple" xlink:href="../783/5783.xml">
computer program</link> that can copy itself and infect a computer without permission or knowledge of the user. The term "virus" is also commonly used, albeit erroneously, to refer to many different types of  <link xlink:type="simple" xlink:href="../901/20901.xml">
malware</link> and <link xlink:type="simple" xlink:href="../616/2616.xml">
adware</link> programs. The original virus may modify the copies, or the copies may modify themselves, as occurs in a <link xlink:type="simple" xlink:href="../400/861400.xml">
metamorphic virus</link>. A virus can only spread from one computer to another when its host is taken to the uninfected computer, for instance by a user sending it over a network or the Internet, or by carrying it on a removable medium such as a <link xlink:type="simple" xlink:href="../891/10891.xml">
floppy disk</link>, <link xlink:type="simple" xlink:href="../429/6429.xml">
CD</link>, or <artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<medium wordnetid="106254669" confidence="0.8">
<link xlink:type="simple" xlink:href="../414/400414.xml">
USB drive</link></medium>
</device>
</instrumentality>
</artifact>
. Meanwhile viruses can spread to other computers by infecting files on a <link xlink:type="simple" xlink:href="../477/598477.xml">
network file system</link> or a file system that is accessed by another computer. Viruses are sometimes confused with <link xlink:type="simple" xlink:href="../010/6010.xml">
computer worm</link>s and <link xlink:type="simple" xlink:href="../056/30056.xml">
Trojan horses</link>. A worm can spread itself to other computers without needing to be transferred as part of a host, and a Trojan horse is a file that appears harmless. Worms and Trojans may cause harm to either a computer system's hosted data, functional performance, or networking throughput, when executed. In general, a worm does not actually harm either the system's hardware or software, while at least in theory, a Trojan's payload may be capable of almost any type of harm if executed. Some can't be seen when the program is not running, but as soon as the infected code is run, the Trojan horse kicks in. That is why it is so hard for people to find viruses and other malware themselves and why they have to use spyware programs and registry processors.</p>
<p>

Most personal computers are now connected to the Internet and to <link xlink:type="simple" xlink:href="../739/17739.xml">
local area network</link>s, facilitating the spread of malicious code. Today's viruses may also take advantage of network services such as the <invention wordnetid="105633385" confidence="0.8">
<link xlink:type="simple" xlink:href="../139/33139.xml">
World Wide Web</link></invention>
, <link xlink:type="simple" xlink:href="../738/9738.xml">
e-mail</link>, <link xlink:type="simple" xlink:href="../951/55951.xml">
Instant Messaging</link> and <link xlink:type="simple" xlink:href="../797/18949797.xml">
file sharing</link> systems to spread, blurring the line between viruses and worms. Furthermore, some sources use an alternative terminology in which a virus is any form of self-replicating <link xlink:type="simple" xlink:href="../901/20901.xml">
malware</link>.</p>
<p>

Some malware is programmed to damage the computer by damaging programs, deleting files, or reformatting the hard disk. Other malware programs are not designed to do any damage, but simply replicate themselves and perhaps make their presence known by presenting text, video, or audio messages. Even these less sinister malware programs can create problems for the <link xlink:type="simple" xlink:href="../990/16301990.xml">
computer user</link>. They typically take up <link xlink:type="simple" xlink:href="../300/5300.xml">
computer memory</link> used by legitimate programs. As a result, they often cause erratic behavior and can result in system crashes. In addition, much malware is <invertebrate wordnetid="101905661" confidence="0.8">
<arthropod wordnetid="101767661" confidence="0.8">
<bug wordnetid="102236355" confidence="0.8">
<insect wordnetid="102159955" confidence="0.8">
<animal wordnetid="100015388" confidence="0.8">
<link xlink:type="simple" xlink:href="../085/37085.xml">
bug</link></animal>
</insect>
</bug>
</arthropod>
</invertebrate>
-ridden, and these bugs may lead to system crashes and <link xlink:type="simple" xlink:href="../282/1381282.xml">
data loss</link>. Many CiD programs are programs that have been downloaded by the user and pop up every so often. This results in slowing down of the computer, but it is also very difficult to find and stop the problem.</p>

<sec>
<st>
History</st>
<p>

The Creeper virus was first detected on <link xlink:type="simple" xlink:href="../111/253111.xml">
ARPANET</link>, the forerunner of the Internet in the early 1970s.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref> It propagated via the <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../380/66380.xml#xpointer(//*[./st=%22TENEX%22])">
TENEX</link></O>
 operating system and could make use of any connected modem to dial out to remote computers and infect them. It would display the message "I'M THE CREEPER : CATCH ME IF YOU CAN.". It is possible that the Reaper program, which appeared shortly after and sought out copies of the Creeper and deleted them, may have been written by the creator of the Creeper in a fit of regret.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref></p>
<p>

A common misconception is that a program called "<link>
Rother J</link>" was the first computer virus to appear "in the wild" â€” that is, outside the single computer or lab where it was created, but that claim is false. See the <link xlink:type="simple" xlink:href="../761/174761.xml">
Timeline of notable computer viruses and worms</link> for other earlier viruses. It was however the first virus to infect computers "in the home". Written in 1982 by <link xlink:type="simple" xlink:href="../151/271151.xml">
Richard Skrenta</link>, it attached itself to the <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../848/253848.xml">
Apple DOS</link></O>
 3.3 operating system and spread by <link xlink:type="simple" xlink:href="../891/10891.xml">
floppy disk</link>.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%222%22])">2</ref> This virus was originally a joke, created by a high school student and put onto a game on floppy disk. On its 50th use the <link xlink:type="simple" xlink:href="../934/464934.xml">
Elk Cloner</link> virus would be activated, infecting the computer and displaying a short poem beginning "Elk Cloner: The program with a personality".</p>
<p>

The first PC virus in the wild was a boot sector virus called <generic wordnetid="107899976" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../852/175852.xml">
(c)Brain</link></generic>
<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%223%22])">3</ref>, created in 1986 by the <link xlink:type="simple" xlink:href="../042/14043042.xml">
Farooq Alvi Brothers</link>, operating out of <link xlink:type="simple" xlink:href="../315/125315.xml">
Lahore, Pakistan</link>. The brothers reportedly created the virus to deter pirated copies of software they had written. However, analysts have claimed that the Ashar virus, a variant of Brain, possibly predated it based on code within the virus.&#91;&#93;</p>
<p>

Before computer networks became widespread, most viruses spread on <link xlink:type="simple" xlink:href="../100/347100.xml">
removable media</link>, particularly <link xlink:type="simple" xlink:href="../891/10891.xml">
floppy disk</link>s. In the early days of the <link xlink:type="simple" xlink:href="../137/18457137.xml">
personal computer</link>, many users regularly exchanged information and programs on floppies. Some viruses spread by infecting programs stored on these disks, while others installed themselves into the disk <link xlink:type="simple" xlink:href="../381/216381.xml">
boot sector</link>, ensuring that they would be run when the user booted the computer from the disk, usually inadvertently. PCs of the era would attempt to boot first from a floppy if one had been left in the drive. This was the most successful infection strategy until floppy disks fell from favour, making boot sector viruses the most common in the wild<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%224%22])">4</ref>. </p>
<p>

Traditional computer viruses emerged in the 1980s, driven by the spread of personal computers and the resultant increase in <link xlink:type="simple" xlink:href="../430/3430.xml">
BBS</link> and <link xlink:type="simple" xlink:href="../900/19443900.xml">
modem</link> use, and software sharing. <link xlink:type="simple" xlink:href="../925/270925.xml">
Bulletin board</link> driven software sharing contributed directly to the spread of Trojan horse programs, and viruses were written to infect popularly traded software. <link xlink:type="simple" xlink:href="../567/27567.xml">
Shareware</link> and <link xlink:type="simple" xlink:href="../365/18948365.xml">
bootleg</link> software were equally common <link xlink:type="simple" xlink:href="../019/297019.xml">
vectors</link> for viruses on BBS's. Within the "pirate scene" of hobbyists trading illicit copies of <link xlink:type="simple" xlink:href="../270/1192270.xml">
retail software</link>, traders in a hurry to obtain the latest applications and games were easy targets for viruses.&#91;&#93;</p>
<p>

Since the mid-1990s, <link xlink:type="simple" xlink:href="../934/20934.xml">
macro virus</link>es have become common. Most of these viruses are written in the scripting languages for Microsoft programs such as <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../287/20287.xml">
Word</link></software>
 and <software wordnetid="106566077" confidence="0.9508927676800064">
<format wordnetid="106636806" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../268/20268.xml">
Excel</link></format>
</software>
. These viruses spread in <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../288/20288.xml">
Microsoft Office</link></software>
 by infecting documents and spreadsheets. Since Word and Excel were also available for <link xlink:type="simple" xlink:href="../043/20043.xml">
Mac OS</link>, most of these viruses were able to spread on <link xlink:type="simple" xlink:href="../979/19006979.xml">
Macintosh computers</link> as well. Most of these viruses did not have the ability to send infected <link xlink:type="simple" xlink:href="../738/9738.xml">
e-mail</link>. Those viruses which did spread through e-mail took advantage of the <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<client wordnetid="109985075" confidence="0.8">
<leader wordnetid="109623038" confidence="0.8">
<administrator wordnetid="109770949" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<case wordnetid="109898892" confidence="0.8">
<head wordnetid="110162991" confidence="0.8">
<director wordnetid="110014939" confidence="0.8">
<link xlink:type="simple" xlink:href="../271/176271.xml">
Microsoft Outlook</link></director>
</head>
</case>
</causal_agent>
</administrator>
</leader>
</client>
</person>
</physical_entity>
 <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<model wordnetid="110324560" confidence="0.8">
<idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<assistant wordnetid="109815790" confidence="0.8">
<component wordnetid="105868954" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<part wordnetid="105867413" confidence="0.8">
<link xlink:type="simple" xlink:href="../007/17058007.xml">
COM</link></part>
</causal_agent>
</worker>
</component>
</assistant>
</concept>
</idea>
</model>
</person>
</physical_entity>
 interface.</p>
<p>

Macro viruses pose unique problems for detection software. For example, some versions of Microsoft Word allowed macros to replicate themselves with additional blank lines. The virus behaved identically but would be misidentified as a new virus. In another example, if two macro viruses simultaneously infect a document, the combination of the two, if also self-replicating, can appear as a "mating" of the two and would likely be detected as a virus unique from the "parents".<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%225%22])">5</ref></p>
<p>

A virus may also send a <link xlink:type="simple" xlink:href="../277/32277.xml">
web address</link> link as an <link xlink:type="simple" xlink:href="../951/55951.xml">
instant message</link> to all the contacts on an infected machine. If the recipient, thinking the link is from a friend (a trusted source) follows the link to the website, the virus hosted at the site may be able to infect this new computer and continue propagating.</p>
<p>

The newest species of the virus family is the cross-site scripting virus. The virus emerged from research and was academically demonstrated in 2005.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%226%22])">6</ref> This virus utilizes <link xlink:type="simple" xlink:href="../154/241154.xml">
cross-site scripting</link> vulnerabilities to propagate. Since 2005 there have been multiple instances of the cross-site scripting viruses in the wild, most notable sites affected have been <link xlink:type="simple" xlink:href="../791/5756791.xml">
MySpace</link> and <link xlink:type="simple" xlink:href="../213/188213.xml">
Yahoo</link>.</p>

</sec>
<sec>
<st>
Infection strategies</st>

<p>

In order to replicate itself, a virus must be permitted to execute code and write to memory. For this reason, many viruses attach themselves to executable files that may be part of legitimate programs. If a user tries to start an infected program, the virus' code may be executed first. Viruses can be divided into two types, on the basis of their behavior when they are executed. Nonresident viruses immediately search for other hosts that can be infected, infect these targets, and finally transfer control to the <artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<furnishing wordnetid="103405265" confidence="0.8">
<table wordnetid="104379243" confidence="0.8">
<furniture wordnetid="103405725" confidence="0.8">
<console_table wordnetid="103092883" confidence="0.8">
<link xlink:type="simple" xlink:href="../746/454746.xml">
application program</link></console_table>
</furniture>
</table>
</furnishing>
</instrumentality>
</artifact>
 they infected. Resident viruses do not search for hosts when they are started. Instead, a resident virus loads itself into memory on execution and transfers control to the host program. The virus stays active in the background and infects new hosts when those files are accessed by other programs or the operating system itself.</p>

<ss1>
<st>
Nonresident viruses</st>
<p>

Nonresident viruses can be thought of as consisting of a <it>finder module</it> and a <it>replication module</it>. The finder module is responsible for finding new files to infect. For each new executable file the finder module encounters, it calls the replication module to infect that file.</p>

</ss1>
<ss1>
<st>
Resident viruses</st>
<p>

Resident viruses contain a replication module that is similar to the one that is employed by nonresident viruses. However, this module is not called by a finder module. Instead, the virus loads the replication module into memory when it is executed and ensures that this module is executed each time the operating system is called to perform a certain operation. For example, the replication module can be called each time the operating system executes a file. In this case, the virus infects every suitable program that is executed on the computer.</p>
<p>

Resident viruses are sometimes subdivided into a category of <it>fast infectors</it> and a category of <it>slow infectors</it>. Fast infectors are designed to infect as many files as possible. For instance, a fast infector can infect every potential host file that is accessed. This poses a special problem to anti-virus software, since a virus scanner will access every potential host file on a computer when it performs a system-wide scan. If the virus scanner fails to notice that such a virus is present in memory, the virus can "piggy-back" on the virus scanner and in this way infect all files that are scanned. Fast infectors rely on their fast infection rate to spread. The disadvantage of this method is that infecting many files may make detection more likely, because the virus may slow down a computer or perform many suspicious actions that can be noticed by anti-virus software. Slow infectors, on the other hand, are designed to infect hosts infrequently. For instance, some slow infectors only infect files when they are copied. Slow infectors are designed to avoid detection by limiting their actions: they are less likely to slow down a computer noticeably, and will at most infrequently trigger anti-virus software that detects suspicious behavior by programs. The slow infector approach does not seem very successful, however.</p>

</ss1>
</sec>
<sec>
<st>
Vectors and hosts</st>
<p>

Viruses have targeted various types of transmission media or hosts. This list is not exhaustive:
<list>
<entry level="1" type="bullet">

 Binary <link xlink:type="simple" xlink:href="../392/217392.xml">
executable file</link>s (such as <format wordnetid="106636806" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../065/609065.xml">
COM file</link></format>
s and <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<format wordnetid="106636806" confidence="0.8">
<link xlink:type="simple" xlink:href="../055/582055.xml">
EXE</link></format>
</information>
</message>
 files in <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../027/20027.xml">
MS-DOS</link></O>
, <format wordnetid="106636806" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../063/65063.xml">
Portable Executable</link></format>
 files in <link xlink:type="simple" xlink:href="../890/18890.xml">
Microsoft Windows</link>, and <link xlink:type="simple" xlink:href="../914/9914.xml">
ELF</link> files in <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../297/6097297.xml">
Linux</link></O>
)</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../422/5364422.xml">
Volume Boot Record</link>s of <link xlink:type="simple" xlink:href="../891/10891.xml">
floppy disk</link>s and hard disk partitions</entry>
<entry level="1" type="bullet">

 The <link xlink:type="simple" xlink:href="../389/55389.xml">
master boot record</link> (MBR) of a hard disk</entry>
<entry level="1" type="bullet">

 General-purpose <link xlink:type="simple" xlink:href="../524/29524.xml">
script</link> files (such as <link xlink:type="simple" xlink:href="../030/15264030.xml">
batch file</link>s in <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../027/20027.xml">
MS-DOS</link></O>
 and <link xlink:type="simple" xlink:href="../890/18890.xml">
Microsoft Windows</link>, <structure wordnetid="104341686" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<window wordnetid="104587648" confidence="0.8">
<supporting_structure wordnetid="104361095" confidence="0.8">
<language wordnetid="106282651" confidence="0.8">
<framework wordnetid="103391770" confidence="0.8">
<link xlink:type="simple" xlink:href="../716/32716.xml">
VBScript</link></framework>
</language>
</supporting_structure>
</window>
</artifact>
</structure>
 files, and <link xlink:type="simple" xlink:href="../938/28938.xml">
shell script</link> files on <family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../815/31815.xml">
Unix-like</link></family>
 platforms).</entry>
<entry level="1" type="bullet">

 Application-specific script files (such as <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<copycat wordnetid="109964411" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../999/4069999.xml">
Telix</link></causal_agent>
</copycat>
</person>
</physical_entity>
-scripts)</entry>
<entry level="1" type="bullet">

 Documents that can contain <idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<link xlink:type="simple" xlink:href="../560/20560.xml">
macro</link></concept>
</idea>
s (such as <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../287/20287.xml">
Microsoft Word</link></software>
 documents, <software wordnetid="106566077" confidence="0.9508927676800064">
<format wordnetid="106636806" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../268/20268.xml">
Microsoft Excel</link></format>
</software>
 spreadsheets, <link xlink:type="simple" xlink:href="../272/906272.xml">
AmiPro</link> documents, and <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../935/20935.xml">
Microsoft Access</link></software>
 database files)</entry>
<entry level="1" type="bullet">

 <accomplishment wordnetid="100035189" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<action wordnetid="100037396" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<feat wordnetid="100036762" confidence="0.8">
<link xlink:type="simple" xlink:href="../154/241154.xml">
Cross-site scripting</link></feat>
</psychological_feature>
</act>
</action>
</event>
</accomplishment>
 vulnerabilities in web applications</entry>
<entry level="1" type="bullet">

 Arbitrary computer files. An exploitable <link xlink:type="simple" xlink:href="../373/4373.xml">
buffer overflow</link>, <link xlink:type="simple" xlink:href="../394/473394.xml">
format string</link>, <link xlink:type="simple" xlink:href="../661/98661.xml">
race condition</link> or other exploitable bug in a program which reads the file could be used to trigger the execution of code hidden within it. Most bugs of this type can be made more difficult to exploit in <link xlink:type="simple" xlink:href="../509/6509.xml">
computer architecture</link>s with protection features such as an <link xlink:type="simple" xlink:href="../694/655694.xml">
execute disable bit</link> and/or address space layout randomization.</entry>
</list>
</p>
<p>

<link xlink:type="simple" xlink:href="../077/24077.xml">
PDF</link>s, like <format wordnetid="106636806" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../191/13191.xml">
HTML</link></format>
, may <it>link</it> to malicious code.</p>
<p>

It is worth noting that some virus authors have written an .EXE extension on the end of .PNG (for example), hoping that users would stop at the trusted file type without noticing that the computer would <it>start</it> with the final type of file. (Many operating systems hide the extensions of known file types by default, so for example a filename ending in ".png.exe" would be shown ending in ".png".) See <link xlink:type="simple" xlink:href="../056/30056.xml">
Trojan horse (computing)</link>.</p>

</sec>
<sec>
<st>
Methods to avoid detection</st>
<p>

In order to avoid detection by users, some viruses employ different kinds of deception. Some old viruses, especially on the MS-DOS platform, make sure that the "last modified" date of a host file stays the same when the file is infected by the virus. This approach does not fool anti-virus software, however, especially those which maintain and date <link xlink:type="simple" xlink:href="../838/38838.xml">
Cyclic redundancy check</link>s on file changes. </p>
<p>

Some viruses can infect files without increasing their sizes or damaging the files. They accomplish this by overwriting unused areas of executable files. These are called <it>cavity viruses</it>. For example the <link xlink:type="simple" xlink:href="../669/312669.xml">
CIH virus</link>, or <link xlink:type="simple" xlink:href="../669/312669.xml">
Chernobyl Virus</link>, infects <format wordnetid="106636806" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../063/65063.xml">
Portable Executable</link></format>
 files. Because those files had many empty gaps, the virus, which was 1 <link xlink:type="simple" xlink:href="../794/16794.xml">
KB</link> in length, did not add to the size of the file.</p>
<p>

Some viruses try to avoid detection by killing the tasks associated with antivirus software before it can detect them.</p>
<p>

As computers and operating systems grow larger and more complex, old hiding techniques need to be updated or replaced. Defending a computer against viruses may demand that a file system migrate towards detailed and explicit permission for every kind of file access.</p>

<ss1>
<st>
Avoiding bait files and other undesirable hosts</st>
<p>

A virus needs to infect hosts in order to spread further. In some cases, it might be a bad idea to infect a host program. For example, many anti-virus programs perform an integrity check of their own code. Infecting such programs will therefore increase the likelihood that the virus is detected. For this reason, some viruses are programmed not to infect programs that are known to be part of anti-virus software. Another type of host that viruses sometimes avoid is <it>bait files</it>. Bait files (or <it>goat files</it>) are files that are specially created by anti-virus software, or by anti-virus professionals themselves, to be infected by a virus. These files can be created for various reasons, all of which are related to the detection of the virus:
<list>
<entry level="1" type="bullet">

 Anti-virus professionals can use bait files to take a sample of a virus (i.e. a copy of a program file that is infected by the virus). It is more practical to store and exchange a small, infected bait file, than to exchange a large application program that has been infected by the virus.</entry>
<entry level="1" type="bullet">

 Anti-virus professionals can use bait files to study the behavior of a virus and evaluate detection methods. This is especially useful when the virus is <link xlink:type="simple" xlink:href="../447/218447.xml">
polymorphic</link>. In this case, the virus can be made to infect a large number of bait files. The infected files can be used to test whether a virus scanner detects all versions of the virus.</entry>
<entry level="1" type="bullet">

 Some anti-virus software employs bait files that are accessed regularly. When these files are modified, the anti-virus software warns the user that a virus is probably active on the system.</entry>
</list>
</p>
<p>

Since bait files are used to detect the virus, or to make detection possible, a virus can benefit from not infecting them. Viruses typically do this by avoiding suspicious programs, such as small program files or programs that contain certain patterns of 'garbage instructions'.</p>
<p>

A related strategy to make baiting difficult is <it>sparse infection</it>. Sometimes, sparse infectors do not infect a host file that would be a suitable candidate for infection in other circumstances. For example, a virus can decide on a random basis whether to infect a file or not, or a virus can only infect host files on particular days of the week.</p>

</ss1>
<ss1>
<st>
Stealth</st>
<p>

Some viruses try to trick anti-virus software by intercepting its requests to the operating system. A virus can hide itself by intercepting the anti-virus softwareâ€™s request to read the file and passing the request to the virus, instead of the <link xlink:type="simple" xlink:href="../194/22194.xml">
OS</link>. The virus can then return an uninfected version of the file to the anti-virus software, so that it seems that the file is "clean". Modern anti-virus software employs various techniques to counter stealth mechanisms of viruses. The only completely reliable method to avoid stealth is to boot from a medium that is known to be clean.</p>

<ss2>
<st>
Self-modification</st>
<p>

Most modern antivirus programs try to find virus-patterns inside ordinary programs by scanning them for so-called <it>virus signatures</it>. A signature is a characteristic byte-pattern that is part of a certain virus or family of viruses. If a virus scanner finds such a pattern in a file, it notifies the user that the file is infected. The user can then delete, or (in some cases) "clean" or "heal" the infected file. Some viruses employ techniques that make detection by means of signatures difficult but probably not impossible. These viruses modify their code on each infection. That is, each infected file contains a different variant of the virus.</p>

</ss2>
<ss2>
<st>
Encryption with a variable key</st>
<p>

A more advanced method is the use of simple <link xlink:type="simple" xlink:href="../294/10294.xml">
encryption</link> to encipher the virus. In this case, the virus consists of a small decrypting module and an encrypted copy of the virus code. If the virus is encrypted with a different key for each infected file, the only part of the virus that remains constant is the decrypting module, which would (for example) be appended to the end. In this case, a virus scanner cannot directly detect the virus using signatures, but it can still detect the decrypting module, which still makes indirect detection of the virus possible. Since these would be symmetric keys, stored on the infected host, it is in fact entirely possible to decrypt the final virus, but that probably isn't required, since self-modifying code is such a rarity that it may be reason for virus scanners to at least flag the file as suspicious.</p>
<p>

An old, but compact, encryption involves <link xlink:type="simple" xlink:href="../979/105979.xml">
XORing</link> each byte in a virus with a constant, so that the exclusive-or operation had only to be repeated for decryption. It is suspicious code that modifies itself, so the code to do the encryption/decryption may be part of the signature in many virus definitions.</p>

</ss2>
<ss2>
<st>
Polymorphic code</st>
<p>

<link xlink:type="simple" xlink:href="../447/218447.xml">
Polymorphic code</link> was the first technique that posed a serious threat to virus scanners. Just like regular encrypted viruses, a polymorphic virus infects files with an encrypted copy of itself, which is decoded by a decryption module. In the case of polymorphic viruses however, this decryption module is also modified on each infection. A well-written polymorphic virus therefore has no parts which remain identical between infections, making it very difficult to detect directly using signatures. Anti-virus software can detect it by decrypting the viruses using an emulator, or by statistical pattern analysis of the encrypted virus body. To enable polymorphic code, the virus has to have a polymorphic engine (also called mutating engine or mutation engine) somewhere in its encrypted body. See <link xlink:type="simple" xlink:href="../447/218447.xml">
Polymorphic code</link> for technical detail on how such engines operate.</p>
<p>

Some viruses employ polymorphic code in a way that constrains the mutation rate of the virus significantly. For example, a virus can be programmed to mutate only slightly over time, or it can be programmed to refrain from mutating when it infects a file on a computer that already contains copies of the virus. The advantage of using such slow polymorphic code is that it makes it more difficult for anti-virus professionals to obtain representative samples of the virus, because bait files that are infected in one run will typically contain identical or similar samples of the virus. This will make it more likely that the detection by the virus scanner will be unreliable, and that some instances of the virus may be able to avoid detection.</p>

</ss2>
<ss2>
<st>
Metamorphic code</st>
<p>

To avoid being detected by emulation, some viruses rewrite themselves completely each time they are to infect new executables. Viruses that use this technique are said to be <link xlink:type="simple" xlink:href="../400/861400.xml">
metamorphic</link>. To enable <link xlink:type="simple" xlink:href="../400/861400.xml">
metamorphism</link>, a <b>metamorphic engine</b> is needed. A metamorphic virus is usually very large and complex. For example, <link xlink:type="simple" xlink:href="../574/1517574.xml">
W32/Simile</link> consisted of over 14000 lines of <link xlink:type="simple" xlink:href="../368/1368.xml">
Assembly language</link> code, 90% of which is part of the metamorphic engine.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%227%22])">7</ref></p>

</ss2>
</ss1>
</sec>
<sec>
<st>
Vulnerability and countermeasures</st>

<ss1>
<st>
The vulnerability of operating systems to viruses</st>
<p>

Just as <link xlink:type="simple" xlink:href="../627/403627.xml">
genetic diversity</link> in a population decreases the chance of a single disease wiping out a population, the diversity of software systems on a network similarly limits the destructive potential of viruses.</p>
<p>

This became a particular concern in the 1990s, when <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../001/19001.xml">
Microsoft</link></company>
 gained market dominance in desktop operating systems and <link xlink:type="simple" xlink:href="../070/291070.xml">
office suite</link>s. The users of Microsoft software (especially networking software such as <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<client wordnetid="109985075" confidence="0.8">
<leader wordnetid="109623038" confidence="0.8">
<administrator wordnetid="109770949" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<case wordnetid="109898892" confidence="0.8">
<head wordnetid="110162991" confidence="0.8">
<director wordnetid="110014939" confidence="0.8">
<link xlink:type="simple" xlink:href="../271/176271.xml">
Microsoft Outlook</link></director>
</head>
</case>
</causal_agent>
</administrator>
</leader>
</client>
</person>
</physical_entity>
 and <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../215/15215.xml">
Internet Explorer</link></software>
) are especially vulnerable to the spread of viruses. Microsoft software is targeted by virus writers due to their desktop dominance, and is often criticized for including many errors and holes for virus writers to exploit. Integrated and non-integrated Microsoft applications (such as <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../288/20288.xml">
Microsoft Office</link></software>
) and applications with scripting languages with access to the file system (for example <link xlink:type="simple" xlink:href="../099/1892099.xml">
Visual Basic Script</link> (VBS), and applications with networking features) are also particularly vulnerable.</p>
<p>

Although Windows is by far the most popular operating system for virus writers, some viruses also exist on other platforms. Any operating system that allows third-party programs to run can theoretically run viruses. Some operating systems are less secure than others. Unix-based OS's (and NTFS-aware applications on Windows NT based platforms) only allow their users to run executables within their protected space in their own directories.</p>
<p>

An Internet based research revealed that there were cases when people willingly pressed a particular button to download a virus. A security firm <it>F-Secure</it> ran a half year advertising campaign on <link xlink:type="simple" xlink:href="../962/879962.xml">
Google AdWords</link> which said "Is your PC virus-free? Get it infected here!". The result was 409 clicks.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%228%22])">8</ref> </p>
<p>

<link xlink:type="simple" xlink:href="../458/1292458.xml">
As of 2006</link>, there are relatively few security exploits<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%229%22])">9</ref> targeting <link xlink:type="simple" xlink:href="../640/20640.xml">
Mac OS X</link> (with a Unix-based file system and <link xlink:type="simple" xlink:href="../394/50394.xml">
kernel</link>). The number of viruses for the older Apple operating systems, known as Mac OS Classic, varies greatly from source to source, with Apple stating that there are only four known viruses, and <link xlink:type="simple" xlink:href="../859/3414859.xml">
independent sources</link> stating there are as many as 63 viruses. It is safe to say that Macs are less likely to be targeted because of low market share and thus a Mac-specific virus could only infect a small proportion of computers (making the effort less desirable). Virus vulnerability between Macs and Windows is a chief selling point, one that <link xlink:type="simple" xlink:href="../856/856.xml">
Apple</link> uses in their <link xlink:type="simple" xlink:href="../675/4982675.xml">
Get a Mac</link> advertising.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2210%22])">10</ref> That said, Macs have also had security issues just as Microsoft Windows has, though none have ever been fully taken advantage of successfully in the wild.</p>
<p>

Windows and Unix have similar scripting abilities, but while Unix natively blocks normal users from having access to make changes to the operating system environment, older copies of Windows such as Windows 95 and 98 do not. In 1997, when a virus for Linux was released â€“ known as "<physical_entity wordnetid="100001930" confidence="0.8">
<microorganism wordnetid="101326291" confidence="0.8">
<virus wordnetid="101328702" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<agent wordnetid="109190918" confidence="0.8">
<infectious_agent wordnetid="109312843" confidence="0.8">
<link xlink:type="simple" xlink:href="../675/1925675.xml">
Bliss</link></infectious_agent>
</agent>
</causal_agent>
</virus>
</microorganism>
</physical_entity>
" â€“ leading antivirus vendors issued warnings that <family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../815/31815.xml">
Unix-like</link></family>
 systems could fall prey to viruses just like Windows.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2211%22])">11</ref> The Bliss virus may be considered characteristic of viruses â€“ as opposed to worms â€“ on Unix systems. Bliss requires that the user run it explicitly (so it is a trojan), and it can only infect programs that the user has the access to modify. Unlike Windows users, most Unix users do not <link xlink:type="simple" xlink:href="../372/9878372.xml">
log in</link> as an administrator user except to install or configure software; as a result, even if a user ran the virus, it could not harm their operating system. The Bliss virus never became widespread, and remains chiefly a research curiosity. Its creator later posted the source code to Usenet, allowing researchers to see how it worked.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2212%22])">12</ref></p>

</ss1>
<ss1>
<st>
The role of software development</st>
<p>

Because software is often designed with security features to prevent unauthorized use of system resources, many viruses must exploit <link xlink:type="simple" xlink:href="../085/37085.xml">
software bug</link>s in a system or application to spread. <link xlink:type="simple" xlink:href="../010/27010.xml">
Software development</link> strategies that produce large numbers of bugs will generally also produce potential exploits.</p>

</ss1>
<ss1>
<st>
Anti-virus software and other preventive measures</st>
<p>

Many users install <link xlink:type="simple" xlink:href="../622/268622.xml">
anti-virus software</link> that can detect and eliminate known viruses after the computer <link xlink:type="simple" xlink:href="../295/42295.xml">
download</link>s or runs the executable. There are two common methods that an <link xlink:type="simple" xlink:href="../622/268622.xml">
anti-virus software</link> application uses to detect viruses. The first, and by far the most common method of virus detection is using a list of <link>
virus signature</link> definitions. This works by examining the content of the computer's memory (its <link xlink:type="simple" xlink:href="../847/25847.xml">
RAM</link>, and <link xlink:type="simple" xlink:href="../381/216381.xml">
boot sector</link>s) and the files stored on fixed or removable drives (hard drives, floppy drives), and comparing those files against a <link xlink:type="simple" xlink:href="../377/8377.xml">
database</link> of known virus "signatures". The disadvantage of this detection method is that users are only protected from viruses that pre-date their last virus definition update. The second method is to use a <link xlink:type="simple" xlink:href="../509/846509.xml">
heuristic</link> algorithm to find viruses based on common behaviors. This method has the ability to detect viruses that anti-virus security firms have yet to create a signature for.</p>
<p>

Some anti-virus programs are able to scan opened files in addition to sent and received e-mails 'on the fly' in a similar manner. This practice is known as "on-access scanning." Anti-virus software does not change the underlying capability of host software to transmit viruses. Users must update their software regularly to <link xlink:type="simple" xlink:href="../153/475153.xml">
patch</link> security holes. Anti-virus software also needs to be regularly updated in order to prevent the latest threats.</p>
<p>

One may also minimise the damage done by viruses by making regular <link xlink:type="simple" xlink:href="../867/533867.xml">
backup</link>s of data (and the Operating Systems) on different media, that are either kept unconnected to the system (most of the time), read-only or not accessible for other reasons, such as using different <link xlink:type="simple" xlink:href="../280/1010280.xml">
file system</link>s. This way, if data is lost through a virus, one can start again using the backup (which should preferably be recent). A notable exception to this rule is the Gammima virus, which propagates via infected removable media (specifically flash drives) <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2213%22])">13</ref> <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2214%22])">14</ref>. If a backup session on <link xlink:type="simple" xlink:href="../458/41458.xml">
optical media</link> like <link xlink:type="simple" xlink:href="../429/6429.xml">
CD</link> and <medium wordnetid="106254669" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../498/11014498.xml">
DVD</link></medium>
 is closed, it becomes read-only and can no longer be affected by a virus (so long as a virus or infected file was not copied onto the CD/DVD). Likewise, an Operating System on a <link xlink:type="simple" xlink:href="../909/40909.xml">
bootable</link> can be used to start the computer if the installed Operating Systems become unusable. Another method is to use different Operating Systems on different file systems. A virus is not likely to affect both. Data backups can also be put on different file systems. For example, Linux requires specific software to write to <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../184/39184.xml">
NTFS</link></instrumentality>
</artifact>
</system>
 partitions, so if one does not install such software and uses a separate installation of MS Windows to make the backups on an NTFS partition, the backup should remain safe from any Linux viruses. Likewise, MS Windows can not read file systems like <link xlink:type="simple" xlink:href="../195/39195.xml">
ext3</link>, so if one normally uses MS Windows, the backups can be made on an ext3 partition using a Linux installation.</p>

</ss1>
<ss1>
<st>
Recovery methods</st>
<p>

Once a computer has been compromised by a virus, it is usually unsafe to continue using the same computer without completely reinstalling the operating system. However, there are a number of recovery options that exist after a computer has a virus. These actions depend on severity of the type of virus.</p>

<ss2>
<st>
Virus removal</st>
<p>

One possibility on <version wordnetid="107173585" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../458/75458.xml">
Windows Me</link></version>
, <version wordnetid="107173585" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../879/33879.xml">
Windows XP</link></version>
 and <version wordnetid="107173585" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../648/2289648.xml">
Windows Vista</link></version>
 is a tool known as <structure wordnetid="104341686" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<window wordnetid="104587648" confidence="0.8">
<supporting_structure wordnetid="104361095" confidence="0.8">
<framework wordnetid="103391770" confidence="0.8">
<link xlink:type="simple" xlink:href="../255/2029255.xml">
System Restore</link></framework>
</supporting_structure>
</window>
</artifact>
</structure>
, which restores the registry and critical system files to a previous checkpoint. Often a virus will cause a system to hang, and a subsequent hard reboot will render a system restore point from the same day corrupt. Restore points from previous days should work provided the virus is not designed to corrupt the restore files or also exists in previous restore points <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2215%22])">15</ref>. Some viruses, however, disable system restore and other important tools such as Task Manager and Command Prompt. An example of a virus that does this is CiaDoor.</p>
<p>

Administrators have the option to disable such tools from limited users for various reasons. The virus modifies the registry to do the same, except, when the Administrator is controlling the computer, it blocks <it>all</it> users from accessing the tools. When an infected tool activates it gives the message "Task Manager has been disabled by your administrator.", even if the user trying to open the program is the administrator.</p>
<p>

Users running a Microsoft operating system can go to Microsoft's website to run a free scan, if they have their 20-digit registration number.</p>

</ss2>
<ss2>
<st>
Operating system reinstallation</st>
<p>

Reinstalling the operating system is another approach to virus removal. It involves simply reformatting the OS partition and installing the OS from its original media, or <link xlink:type="simple" xlink:href="../143/634143.xml">
imaging</link> the partition with a clean backup image (taken with <link xlink:type="simple" xlink:href="../080/640080.xml">
Ghost</link> or <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../761/1277761.xml">
Acronis</link></company>
 for example). </p>
<p>

This method has the benefits of being simple to do, can be faster than running multiple anti-virus scans, and is guaranteed to remove any malware. Downsides include having to reinstall all other software as well as the operating system. User data can be backed up by booting off of a <structure wordnetid="105726345" confidence="0.8">
<arrangement wordnetid="105726596" confidence="0.8">
<distribution wordnetid="105729036" confidence="0.8">
<link xlink:type="simple" xlink:href="../137/331137.xml">
Live CD</link></distribution>
</arrangement>
</structure>
 or putting the hard drive into another computer and booting from the other computer's operating system.</p>

</ss2>
</ss1>
</sec>
<sec>
<st>
See also</st>
<p>

<list>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../616/2616.xml">
Adware</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../622/268622.xml">
Antivirus software</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../301/4339301.xml">
Attack tree</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../497/997497.xml">
Black hat</link></entry>
<entry level="1" type="bullet">

<accomplishment wordnetid="100035189" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<action wordnetid="100037396" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<feat wordnetid="100036762" confidence="0.8">
<link xlink:type="simple" xlink:href="../885/55885.xml">
Computer insecurity</link></feat>
</psychological_feature>
</act>
</action>
</event>
</accomplishment>
</entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../010/6010.xml">
Computer worm</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../229/2148229.xml">
Crimeware</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../459/3852459.xml">
Cryptovirology</link></entry>
<entry level="1" type="bullet">

<operation wordnetid="100955060" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<attack wordnetid="100972621" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<link xlink:type="simple" xlink:href="../829/57829.xml">
Keystroke logging</link></activity>
</psychological_feature>
</act>
</attack>
</event>
</operation>
</entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../762/445762.xml">
List of computer viruses</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../760/5934760.xml">
List of computer virus hoaxes</link></entry>
<entry level="1" type="bullet">

<physical_entity wordnetid="100001930" confidence="0.8">
<microorganism wordnetid="101326291" confidence="0.8">
<virus wordnetid="101328702" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<agent wordnetid="109190918" confidence="0.8">
<infectious_agent wordnetid="109312843" confidence="0.8">
<link xlink:type="simple" xlink:href="../083/370083.xml">
Linux malware</link></infectious_agent>
</agent>
</causal_agent>
</virus>
</microorganism>
</physical_entity>
</entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../901/20901.xml">
Malware</link></entry>
<entry level="1" type="bullet">

<physical_entity wordnetid="100001930" confidence="0.8">
<microorganism wordnetid="101326291" confidence="0.8">
<virus wordnetid="101328702" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<agent wordnetid="109190918" confidence="0.8">
<infectious_agent wordnetid="109312843" confidence="0.8">
<link xlink:type="simple" xlink:href="../342/2420342.xml">
Mobile virus</link></infectious_agent>
</agent>
</causal_agent>
</virus>
</microorganism>
</physical_entity>
es</entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../591/3458591.xml">
Multipartite virus</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../595/3445595.xml">
Palm OS Viruses</link></entry>
<entry level="1" type="bullet">

<event wordnetid="100029378" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<link xlink:type="simple" xlink:href="../087/29087.xml">
Security through obscurity</link></activity>
</procedure>
</psychological_feature>
</act>
</event>
</entry>
<entry level="1" type="bullet">

<practice wordnetid="100410247" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<link xlink:type="simple" xlink:href="../368/28368.xml">
Spam</link></activity>
</psychological_feature>
</act>
</event>
</practice>
</entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../951/28951.xml">
Spyware</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../761/174761.xml">
Timeline of notable computer viruses and worms</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../056/30056.xml">
Trojan horse (computing)</link></entry>
<entry level="1" type="bullet">

<accomplishment wordnetid="100035189" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<action wordnetid="100037396" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<feat wordnetid="100036762" confidence="0.8">
<link xlink:type="simple" xlink:href="../760/5934760.xml">
Virus hoax</link></feat>
</psychological_feature>
</act>
</action>
</event>
</accomplishment>
</entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../457/655457.xml">
Eicar test file</link></entry>
</list>
</p>

</sec>
<sec>
<st>
Notes</st>

<p>

<reflist>
<entry id="1">
"<weblink xlink:type="simple" xlink:href="http://www.viruslist.com/en/viruses/encyclopedia?chapter=153310937">
Virus list</weblink>".&#32;Retrieved on <link>
2008-02-07</link>.</entry>
<entry id="2">
Anick Jesdanun.&#32;"<weblink xlink:type="simple" xlink:href="http://news.yahoo.com/s/ap/20070831/ap_on_hi_te/computer_virus_anniversary;_ylt=A9G_R3Ga1NhGH0QBIwZk24cA">
Prank starts 25 years of security woes</weblink>"."<weblink xlink:type="simple" xlink:href="http://www.cnn.com/2007/TECH/09/03/computer.virus.ap/">
The anniversary of a nuisance</weblink>".</entry>
<entry id="3">
<weblink xlink:type="simple" xlink:href="http://antivirus.about.com/od/securitytips/a/bootsectorvirus.htm">
Boot sector virus repair</weblink></entry>
<entry id="4">
Dr. Solomon's Virus Encyclopedia, 1995, ISBN 1 897661 00 2, Abstract at http://vx.netlux.org/lib/aas10.html</entry>
<entry id="5">
Vesselin Bontchev.&#32;"<weblink xlink:type="simple" xlink:href="http://www.people.frisk-software.com/~bontchev/papers/macidpro.html">
Macro Virus Identification Problems</weblink>".&#32;<it>FRISK Software International</it>.</entry>
<entry id="6">
Wade Alcorn.&#32;"<weblink xlink:type="simple" xlink:href="http://www.bindshell.net/papers/xssv/">
The Cross-site Scripting Virus</weblink>".</entry>
<entry id="7">
Perriot, Fredrick;&#32;Peter Ferrie and Peter Szor&#32;(May 2002).&#32;"<weblink xlink:type="simple" xlink:href="http://securityresponse.symantec.com/avcenter/reference/simile.pdf">
Striking Similarities</weblink>"&#32;(<message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<language wordnetid="106282651" confidence="0.8">
<format wordnetid="106636806" confidence="0.8">
<link xlink:type="simple" xlink:href="../077/24077.xml">
PDF</link></format>
</language>
</information>
</message>
).&#32;Retrieved on September 9, 2007.</entry>
<entry id="8">
<weblink xlink:type="simple" xlink:href="http://www.infoniac.com/offbeat-news/computervirus.html">
Need a computer virus?- download now</weblink></entry>
<entry id="9">
"<weblink xlink:type="simple" xlink:href="http://www.viruslist.com/en/analysis?pubid=191968025">
Malware Evolution: Mac OS X Vulnerabilities 2005-2006</weblink>".&#32;  <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../619/584619.xml">
Kaspersky Lab</link></company>
&#32;(2006-07-24).&#32;Retrieved on August 19, 2006.</entry>
<entry id="10">
<weblink xlink:type="simple" xlink:href="http://www.apple.com/getamac">
Apple - Get a Mac</weblink></entry>
<entry id="11">
McAfee.&#32;"<weblink xlink:type="simple" xlink:href="http://math-www.uni-paderborn.de/~axel/bliss/mcafee_press.html">
McAfee discovers first Linux virus</weblink>".&#32;<it>news article</it>.</entry>
<entry id="12">
Axel Boldt.&#32;"<weblink xlink:type="simple" xlink:href="http://math-www.uni-paderborn.de/~axel/bliss/">
Bliss, a Linux "virus"</weblink>".&#32;<it>news article</it>.</entry>
<entry id="13">
"Symantec Security Summary - W32.Gammima.AG." http://www.symantec.com/security_response/writeup.jsp?docid=2007-082706-1742-99</entry>
<entry id="14">
"Yahoo Tech: Viruses! In! Space!" http://tech.yahoo.com/blogs/null/103826</entry>
<entry id="15">
"Symantec Security Summary - W32.Gammima.AG and removal details." http://www.symantec.com/security_response/writeup.jsp?docid=2007-082706-1742-99&amp;tabid=3</entry>
</reflist>
</p>

</sec>
<sec>
<st>
References</st>
<p>

<list>
<entry level="1" type="bullet">

 Mark Russinovich, <weblink xlink:type="simple" xlink:href="http://www.microsoft.com/emea/itsshowtime/sessionh.aspx?videoid=359">
Advanced Malware Cleaning <b>video</b></weblink>, Microsoft TechEd: IT Forum, November 2006</entry>
<entry level="1" type="bullet">

  <cite id="Reference-Szor-2005" style="font-style:normal" class="book">Szor, Peter&#32;(2005). The Art of Computer Virus Research and Defense.&#32;Boston:&#32;Addison-Wesley. ISBN 0321304543.</cite>&nbsp;</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../249/18630249.xml">
Jussi Parikka</link> ( 2007) Digital Contagions. A Media Archaeology of Computer Viruses, Peter Lang: New York. Digital Formations-series</entry>
</list>
</p>

</sec>
<sec>
<st>
External links</st>
<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.dmoz.org/Computers/Security/Malicious_Software/Viruses//">
Viruses</weblink> at the <work wordnetid="100575741" confidence="0.8">
<possession wordnetid="100032613" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<company wordnetid="108058098" confidence="0.8">
<undertaking wordnetid="100795720" confidence="0.8">
<property wordnetid="113244109" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<subsidiary_company wordnetid="108003935" confidence="0.8">
<institution wordnetid="108053576" confidence="0.8">
<link xlink:type="simple" xlink:href="../501/18949501.xml">
Open Directory Project</link></institution>
</subsidiary_company>
</activity>
</psychological_feature>
</act>
</property>
</undertaking>
</company>
</event>
</possession>
</work>
</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.us-cert.gov/">
US Govt CERT (Computer Emergency Readiness Team) site</weblink></entry>
</list>
</p>

<ss1>
<st>
Other texts</st>

<p>

<list>
<entry level="1" type="bullet">

Video: "<weblink xlink:type="simple" xlink:href="http://www.microsoft.com/emea/itsshowtime/result_search.aspx?track=1&amp;x=37&amp;y=7">
Microsoft conferences about IT Security - videos on demand</weblink>"</entry>
<entry level="1" type="bullet">

Article: "<weblink xlink:type="simple" xlink:href="http://all.net/books/virus/index.html">
'Computer Viruses - Theory and Experiments' - The original paper published on the topic</weblink>"</entry>
<entry level="1" type="bullet">

Article: "<weblink xlink:type="simple" xlink:href="http://www.howstuffworks.com/virus.htm">
How Computer Viruses Work</weblink>"</entry>
<entry level="1" type="bullet">

Article: "<weblink xlink:type="simple" xlink:href="http://vx.netlux.org/lib/aas14.html">
A Brief History of PC Viruses</weblink>" (early) by Dr. Alan Solomon</entry>
<entry level="1" type="bullet">

Article: "<weblink xlink:type="simple" xlink:href="http://vx.netlux.org/lib/avb02.html">
Are 'Good' Computer Viruses Still a Bad Idea?</weblink>"</entry>
<entry level="1" type="bullet">

Article: "<weblink xlink:type="simple" xlink:href="http://www.windowsecurity.com/articles/Protecting_Email_Viruses_Malware.html">
Protecting your Email from Viruses and Other MalWare</weblink>"</entry>
<entry level="1" type="bullet">

Article: "<weblink xlink:type="simple" xlink:href="http://www3.iath.virginia.edu/pmc/text-only/issue.990/ross-1.990">
Hacking Away at the Counterculture</weblink>" by <physical_entity wordnetid="100001930" confidence="0.8">
<philosopher wordnetid="110423589" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<intellectual wordnetid="109621545" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<academician wordnetid="109759069" confidence="0.8">
<adult wordnetid="109605289" confidence="0.8">
<professional wordnetid="110480253" confidence="0.8">
<scholar wordnetid="110557854" confidence="0.8">
<educator wordnetid="110045713" confidence="0.8">
<link xlink:type="simple" xlink:href="../070/2528070.xml">
Andrew Ross</link></educator>
</scholar>
</professional>
</adult>
</academician>
</causal_agent>
</intellectual>
</person>
</philosopher>
</physical_entity>
</entry>
<entry level="1" type="bullet">

Article: "<weblink xlink:type="simple" xlink:href="http://journal.media-culture.org.au/0406/07_Sampson.php">
A Virus in Info-Space</weblink>" by Tony Sampson</entry>
<entry level="1" type="bullet">

Article: "<weblink xlink:type="simple" xlink:href="http://journal.media-culture.org.au/0502/02-sampson.php">
Dr Aycock's Bad Idea</weblink>" by Tony Sampson</entry>
<entry level="1" type="bullet">

Article: "<weblink xlink:type="simple" xlink:href="http://journal.fibreculture.org/issue4/issue4_parikka.html">
Digital Monsters, Binary Aliens</weblink>" by <link xlink:type="simple" xlink:href="../249/18630249.xml">
Jussi Parikka</link></entry>
<entry level="1" type="bullet">

Article: "<weblink xlink:type="simple" xlink:href="http://www.ctheory.net/articles.aspx?id=500">
The Universal Viral Machine</weblink>" by <link xlink:type="simple" xlink:href="../249/18630249.xml">
Jussi Parikka</link></entry>
<entry level="1" type="bullet">

Article: "<weblink xlink:type="simple" xlink:href="http://www.ctheory.net/articles.aspx?id=504">
Hypervirus: A Clinical Report</weblink>" by <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<sociologist wordnetid="110620758" confidence="0.8">
<social_scientist wordnetid="110619642" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<link xlink:type="simple" xlink:href="../242/1174242.xml">
Thierry Bardini</link></scientist>
</causal_agent>
</social_scientist>
</sociologist>
</person>
</physical_entity>
</entry>
<entry level="1" type="bullet">

Article: "<weblink xlink:type="simple" xlink:href="http://www.bindshell.net/papers/xssv/">
The Cross-site Scripting Virus</weblink>"</entry>
<entry level="1" type="bullet">

Article: "<weblink xlink:type="simple" xlink:href="http://www.agusblog.com/wordpress/?p=3">
What is a virus signature? Are they still used ?</weblink>"</entry>
<entry level="1" type="bullet">

 RFC 1135 The Helminthiasis of the Internet</entry>
<entry level="1" type="bullet">

 Article: "<weblink xlink:type="simple" xlink:href="http://www.cse.msu.edu/~cse825/virusWriter.htm">
The Virus Underground</weblink>"</entry>
</list>
</p>




</ss1>
</sec>
</bdy>
</feat>
</article>
