<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 17.04.2009 05:14:14[mciao0827] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>Forking lemma</title>
<id>19075862</id>
<revision>
<id>235881038</id>
<timestamp>2008-09-02T20:02:10Z</timestamp>
<contributor>
<username>Michael Hardy</username>
<id>4626</id>
</contributor>
</revision>
<categories>
<category>Cryptography</category>
</categories>
</header>
<bdy>

The <b>forking lemma</b> is any of a number of related <link xlink:type="simple" xlink:href="../634/18634.xml">
lemmas</link> in <link xlink:type="simple" xlink:href="../432/18934432.xml">
cryptography</link> research.  The lemma states that if an adversary (typically a <link xlink:type="simple" xlink:href="../812/197812.xml">
probabilistic Turing machine</link>), on inputs drawn from some <link xlink:type="simple" xlink:href="../543/23543.xml">
distribution</link>, produces an output that has some property with <link xlink:type="simple" xlink:href="../019/8426019.xml">
non-negligible</link> <link xlink:type="simple" xlink:href="../934/22934.xml">
probability</link>, then with non-negligible probability, if the adversary is re-run on new inputs but with the same <link>
random tape</link>, its second output will also have the property.  <p>

This concept was first used by <link>
David Pointcheval</link> and <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<cryptanalyst wordnetid="109981540" confidence="0.8">
<intellectual wordnetid="109621545" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<decoder wordnetid="109995398" confidence="0.8">
<link xlink:type="simple" xlink:href="../633/8299633.xml">
Jacques Stern</link></decoder>
</causal_agent>
</intellectual>
</cryptanalyst>
</person>
</physical_entity>
 in "Security proofs for signature schemes," published in the proceedings of <social_group wordnetid="107950920" confidence="0.8">
<meeting wordnetid="108307589" confidence="0.8">
<gathering wordnetid="107975026" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<conference wordnetid="108308497" confidence="0.8">
<link xlink:type="simple" xlink:href="../207/4229207.xml">
Eurocrypt</link></conference>
</group>
</gathering>
</meeting>
</social_group>
 1996.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref><ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%222%22])">2</ref>  In their paper, the forking lemma is specified in terms of an adversary that attacks a <link xlink:type="simple" xlink:href="../644/59644.xml">
digital signature</link> scheme instantiated in the <link xlink:type="simple" xlink:href="../286/451286.xml">
random oracle</link> model.  They show that if an adversary can forge a signature with non-negligible probability, then there is a non-negligible probability that the same adversary with the same random tape can create a second forgery in an attack with a different random oracle.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%223%22])">3</ref>  The forking lemma was later generalized by <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<cryptanalyst wordnetid="109981540" confidence="0.8">
<intellectual wordnetid="109621545" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<decoder wordnetid="109995398" confidence="0.8">
<link xlink:type="simple" xlink:href="../100/7658100.xml">
Mihir Bellare</link></decoder>
</causal_agent>
</intellectual>
</cryptanalyst>
</person>
</physical_entity>
 and Gregory Neven.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%224%22])">4</ref>   The forking lemma has been used to prove the security of a variety of digital signature schemes and other random-oracle based cryptographic constructions.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%222%22])">2</ref> </p>

<sec>
<st>
Statement of the lemma</st>

<p>

The generalized version of the lemma is stated as follows.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%224%22])">4</ref>  Let <it>A</it> be a probabilistic algorithm, with inputs (<it>x</it>, <it>h</it>1, ..., <it>hq</it>; <it>r</it>) that outputs a pair (<it>J</it>, <it>y</it>), where <it>r</it> refers to the random tape of <it>A</it> (that is, the random choices A will make).  Suppose further that <it>IG</it> is a probability distribution from which <it>x</it> is drawn, and that <it>H</it> is a set of size <it>h</it> from which each of the <it>hi</it> values are drawn according to the <structure wordnetid="105726345" confidence="0.8">
<arrangement wordnetid="105726596" confidence="0.8">
<distribution wordnetid="105729036" confidence="0.8">
<link xlink:type="simple" xlink:href="../214/1699214.xml">
uniform distribution</link></distribution>
</arrangement>
</structure>
.  Let acc be the probability that on inputs distributed as described, the <it>J</it> output by <it>A</it> is greater than or equal to 1.</p>
<p>

We can then define a "forking algorithm" <it>FA</it> that proceeds as follows, on input <it>x</it>:
<list>
<entry level="1" type="number">

 Pick a random tape <it>r</it> for <it>A</it>.</entry>
<entry level="1" type="number">

 Pick <it>h</it>1, ..., <it>hq</it> uniformly from <it>H</it>.</entry>
<entry level="1" type="number">

 Run <it>A</it> on input (<it>x</it>, <it>h</it>1, ..., <it>hq</it>; <it>r</it>) to produce (<it>J</it>, <it>y</it>).</entry>
<entry level="1" type="number">

 If <it>J</it> = 0, then return (0, 0, 0).</entry>
<entry level="1" type="number">

 Pick <it>h'J, ..., h'q</it> uniformly from <it>H</it>.</entry>
<entry level="1" type="number">

 Run <it>A</it> on input (<it>x</it>, <it>h</it>1, ..., <it>hJ</it>&amp;minus;1, <it>h</it>'<it>J</it>, ..., <it>h</it>'<it>q</it>; <it>r</it>) to produce (<it>J</it>', <it>y</it>').</entry>
<entry level="1" type="number">

 If <it>J' </it> = <it>J</it> and <it>hJ</it> ≠ <it>h'J</it> then return (1, <it>y</it>, <it>y</it>'), otherwise, return (0, 0, 0).</entry>
</list>
</p>
<p>

Let frk be the probability that <it>FA</it> outputs a triple starting with 1, given an input <it>x</it> chosen randomly from <it>IG</it>.  Then</p>
<p>

<indent level="1">

 <math>\text{frk} \geq \text{acc} \cdot \left ( \frac\text{acc}{q} - \frac{1}{h} \right).</math>
</indent>

</p>
<ss1>
<st>
Intuition</st>

<p>

The idea here is to think of <it>A</it> as running two times in related executions, where the process "<fork wordnetid="103383948" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<article wordnetid="100022903" confidence="0.8">
<ware wordnetid="104550840" confidence="0.8">
<tableware wordnetid="104381994" confidence="0.8">
<cutlery wordnetid="103153375" confidence="0.8">
<link xlink:type="simple" xlink:href="../506/301506.xml">
forks</link></cutlery>
</tableware>
</ware>
</article>
</artifact>
</fork>
" at a certain point, when some but not all of the input has been examined.  In the alternate version, the remaining inputs are re-generated but are generated in the normal way.  The point at which the process forks may be something we only want to decide later, possibly based on the behavior of <it>A</it> the first time around: this is why the lemma statement chooses the branching point (<it>J</it>) based on the output of <it>A</it>.   The requirement that <it>hJ</it> ≠ <it>h'J</it> is a technical one required by many uses of the lemma.  (Note that since both <it>hJ</it> and <it>h'J</it> are chosen randomly from <it>H</it>, then if <it>h</it> is large, which would be normal, the probability of the two values not being distinct is extremely small.)  </p>

</ss1>
<ss1>
<st>
Example</st>

<p>

For example, let <it>A</it> be an algorithm for breaking a <link xlink:type="simple" xlink:href="../644/59644.xml">
digital signature</link> scheme in the <link xlink:type="simple" xlink:href="../286/451286.xml">
random oracle</link> model.  Then <it>x</it> would be the public parameters (including the public key) <it>A</it> is attacking, and <it>hi</it> would be the output of the random oracle on its <it>i</it>th distinct input.  The forking lemma is of use when it would be possible, given two different random signatures of the same message, to solve some underlying hard problem.  An adversary that forges once, however, gives rise to one that forges twice on the same message with non-negligible probability through the forking lemma.  When <it>A</it> attempts to forge on a message <it>m</it>, we consider the output of <it>A</it> to be (<it>J</it>, <it>y</it>) where <it>y</it> is the forgery, and <it>J</it> is such that <it>m</it> was the <it>J</it>th unique query to the random oracle (it may be assumed that <it>A</it> will query <it>m</it> at some point, if <it>A</it> is to be successful with non-negligible probability).  (If <it>A</it> outputs an incorrect forgery, we consider the output to be (0, <it>y</it>).)</p>
<p>

By the forking lemma, the probability (<it>frk</it>) of obtaining two good forgeries <it>y</it> and <it>y' </it> on  the same message but with different random oracle outputs (that is, with <it>hJ ≠ h'J</it>) is non-negligible when <it>acc</it> is also non-negligible.  This allows us to prove that if the underlying hard problem is indeed hard, then no adversary can forge signatures.</p>
<p>

This is the essence of the proof given by Pointcheval and Stern for a modified <link xlink:type="simple" xlink:href="../473/2033473.xml">
ElGamal signature scheme</link> against an adaptive adversary.</p>

</ss1>
</sec>
<sec>
<st>
References</st>

<p>

<reflist>
<entry id="1">
<link>
Ernest Brickell</link>, <link>
David Pointcheval</link>, <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<cryptanalyst wordnetid="109981540" confidence="0.8">
<intellectual wordnetid="109621545" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<decoder wordnetid="109995398" confidence="0.8">
<link xlink:type="simple" xlink:href="../519/2143519.xml">
Serge Vaudenay</link></decoder>
</causal_agent>
</intellectual>
</cryptanalyst>
</person>
</physical_entity>
, and <link>
Moti Yung</link>, "<weblink xlink:type="simple" xlink:href="http://www.springerlink.com/content/8v8btpfkat5qp3da/?p=2ad4ec3d6e8447a28d44bd3922e75ef8&amp;pi=18">
Design Validations for Discrete Logarithm Based Signature Schemes</weblink>", Third International Workshop on Practice and Theory in Public Key Cryptosystems, PKC 2000, <site wordnetid="108651247" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../237/17306237.xml">
Melbourne</link></site>
, <country wordnetid="108544813" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../264/4689264.xml">
Australia</link></country>
, January 18&ndash;20, 2000, pp. 276&ndash;292.</entry>
<entry id="2">
Adam Young and Moti Yung, "Malicious Cryptography: Exposing Cryptovirology", Wiley press, 2004, pp. 344.</entry>
<entry id="3">
David Pointcheval and <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<cryptanalyst wordnetid="109981540" confidence="0.8">
<intellectual wordnetid="109621545" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<decoder wordnetid="109995398" confidence="0.8">
<link xlink:type="simple" xlink:href="../633/8299633.xml">
Jacques Stern</link></decoder>
</causal_agent>
</intellectual>
</cryptanalyst>
</person>
</physical_entity>
, "<weblink xlink:type="simple" xlink:href="http://www.springerlink.com/content/k0xj74fcvnaj202t/?p=f5b8f4cb35e149ceb402fb89549556f1&amp;pi=32">
Security Proofs for Signature Schemes</weblink>", Advances in Cryptology &mdash; EUROCRYPT '96, <link xlink:type="simple" xlink:href="../203/64203.xml">
Saragossa</link>, <system wordnetid="108435388" confidence="0.8">
<economy wordnetid="108366753" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<link xlink:type="simple" xlink:href="../667/26667.xml">
Spain</link></group>
</economy>
</system>
, May 12&ndash;16, 1996, pp. 387&ndash;398.</entry>
<entry id="4">
<physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<cryptanalyst wordnetid="109981540" confidence="0.8">
<intellectual wordnetid="109621545" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<decoder wordnetid="109995398" confidence="0.8">
<link xlink:type="simple" xlink:href="../100/7658100.xml">
Mihir Bellare</link></decoder>
</causal_agent>
</intellectual>
</cryptanalyst>
</person>
</physical_entity>
 and Gregory Neven, "<weblink xlink:type="simple" xlink:href="http://portal.acm.org/citation.cfm?id=1180453">
Multi-Signatures in the Plain Public-Key Model and a General Forking Lemma</weblink>", Proceedings of the 13th <link xlink:type="simple" xlink:href="../414/12087414.xml">
ACM</link> Conference on Computer and 
Communications Security (CCS), <village wordnetid="108672738" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../583/18940583.xml">
Alexandria, Virginia</link></village>
, 2006, pp. 390&ndash;399.</entry>
</reflist>
</p>

</sec>
</bdy>
</article>
