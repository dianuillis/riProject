<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 16:29:20[mciao0827] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>Distributed hash table</title>
<id>192141</id>
<revision>
<id>244167604</id>
<timestamp>2008-10-09T16:55:59Z</timestamp>
<contributor>
<username>Xiong Chiamiov</username>
<id>185253</id>
</contributor>
</revision>
<categories>
<category>File sharing</category>
<category>Distributed data sharing</category>
<category>Distributed computing</category>
</categories>
</header>
<bdy>

<b>Distributed hash tables</b> (<b>DHTs</b>) are a class of decentralized <link xlink:type="simple" xlink:href="../501/8501.xml">
distributed systems</link> that provide a lookup service similar to a <link xlink:type="simple" xlink:href="../833/13833.xml">
hash table</link>: (<it>name</it>, <it>value</it>) pairs are stored in the DHT, and any participating <link xlink:type="simple" xlink:href="../116/998116.xml">
node</link> can efficiently retrieve the value associated with a given name.  Responsibility for maintaining the mapping from names to values is distributed among the nodes, in such a way that a change in the set of participants causes a minimal amount of disruption. This allows DHTs to <link xlink:type="simple" xlink:href="../529/185529.xml">
scale</link> to extremely large numbers of nodes and to handle continual node arrivals, departures, and failures.<p>

DHTs form an infrastructure that can be used to build more complex services, such as <link xlink:type="simple" xlink:href="../343/8787343.xml">
distributed file system</link>s, <link xlink:type="simple" xlink:href="../107/24107.xml">
peer-to-peer</link> <link xlink:type="simple" xlink:href="../797/18949797.xml">
file sharing</link> and <link xlink:type="simple" xlink:href="../710/53710.xml">
content distribution</link> systems, cooperative <link xlink:type="simple" xlink:href="../719/437719.xml">
web caching</link>, <link xlink:type="simple" xlink:href="../407/20407.xml">
multicast</link>, <link xlink:type="simple" xlink:href="../545/387545.xml">
anycast</link>, <link xlink:type="simple" xlink:href="../339/8339.xml">
domain name services</link>, and <link xlink:type="simple" xlink:href="../951/55951.xml">
instant messaging</link>. Notable distributed networks that use DHTs include <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<format wordnetid="106636806" confidence="0.8">
<link xlink:type="simple" xlink:href="../098/239098.xml">
BitTorrent</link></format>
</rule>
</direction>
</protocol>
</information>
</message>
 (with extensions), <link xlink:type="simple" xlink:href="../283/1755283.xml">
eDonkey network</link>, <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../033/2315033.xml">
YaCy</link></software>
, and the <link xlink:type="simple" xlink:href="../145/989145.xml">
Coral Content Distribution Network</link>.</p>

<sec>
<st>
 History </st>
<p>

DHT research was originally motivated, in part, by <link xlink:type="simple" xlink:href="../107/24107.xml">
peer-to-peer</link> systems such as <link xlink:type="simple" xlink:href="../113/21113.xml">
Napster</link>, <message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<link xlink:type="simple" xlink:href="../856/11856.xml">
Gnutella</link></rule>
</direction>
</protocol>
</message>
, and <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../997/10997.xml">
Freenet</link></software>
, which took advantage of resources distributed across the Internet to provide a single useful application. In particular, they took advantage of increased <link xlink:type="simple" xlink:href="../827/15612827.xml">
bandwidth</link> and <link xlink:type="simple" xlink:href="../777/13777.xml">
hard disk</link> capacity to provide a file sharing service.</p>
<p>

These systems differed in how they <it>found</it> the data their peers contained though:
<list>
<entry level="1" type="bullet">

 Napster had a central index server: each node, upon joining, would send a list of locally held files to the server, which would perform searches and refer the querier to the nodes that held the results. This central component left the system vulnerable to attacks and lawsuits.</entry>
<entry level="1" type="bullet">

 Gnutella and similar networks moved to a flooding query model—in essence, each search would result in a message being broadcast to every other machine in the network. While avoiding a <link xlink:type="simple" xlink:href="../836/1724836.xml">
single point of failure</link>, this method was significantly less efficient than Napster.</entry>
<entry level="1" type="bullet">

 Finally, Freenet was also fully distributed, but employed a heuristic <link xlink:type="simple" xlink:href="../792/1014792.xml">
key based routing</link> in which each file was associated with a key, and files with similar keys tended to cluster on a similar set of nodes. Queries were likely to be routed through the network to such a cluster without needing to visit many peers. However, Freenet did not guarantee that data would be found.</entry>
</list>
</p>
<p>

Distributed hash tables use a more structured key based routing in order to attain both the decentralization of Gnutella and Freenet, and the efficiency and guaranteed results of Napster. One drawback is that, like Freenet, DHTs only directly support exact-match search, rather than keyword search, although that functionality can be layered on top of a DHT.</p>
<p>

The first four DHTs—<link xlink:type="simple" xlink:href="../471/1963471.xml">
CAN</link>, <link xlink:type="simple" xlink:href="../132/322132.xml">
Chord</link>,<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref> <link xlink:type="simple" xlink:href="../273/5200273.xml">
Pastry</link>, and <link xlink:type="simple" xlink:href="../684/5440684.xml">
Tapestry</link>—were introduced about the same time in 2001.  Since then this area of research has been quite active. Outside academia, DHT technology has been adopted as a component of <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<format wordnetid="106636806" confidence="0.8">
<link xlink:type="simple" xlink:href="../098/239098.xml">
BitTorrent</link></format>
</rule>
</direction>
</protocol>
</information>
</message>
 and in the <link xlink:type="simple" xlink:href="../145/989145.xml">
Coral Content Distribution Network</link>.</p>

</sec>
<sec>
<st>
 Properties </st>
<p>

DHTs characteristically emphasize the following properties:</p>
<p>

<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../139/49139.xml">
Decentralization</link>: the nodes collectively form the system without any central coordination.</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../529/185529.xml">
Scalability</link>: the system should function efficiently even with thousands or millions of nodes.</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../720/2573720.xml">
Fault tolerance</link>: the system should be reliable (in some sense) even with nodes continuously joining, leaving, and failing.</entry>
</list>
</p>
<p>

A key technique used to achieve these goals is that any one node needs to coordinate with only a few other nodes in the system – most commonly, <link xlink:type="simple" xlink:href="../578/44578.xml">
<math>\Theta(\log n)</math></link> of the <math>n</math> participants (see below) – so that only a limited amount of work needs to be done for each change in membership.</p>
<p>

Some DHT designs seek to be <link xlink:type="simple" xlink:href="../568/562568.xml">
secure</link> against malicious participants and to allow participants to remain <link xlink:type="simple" xlink:href="../382/181382.xml">
anonymous</link>, though this is less common than in many other <link xlink:type="simple" xlink:href="../107/24107.xml">
peer-to-peer</link> (especially <link xlink:type="simple" xlink:href="../797/18949797.xml">
file sharing</link>) systems; see <link xlink:type="simple" xlink:href="../322/454322.xml">
anonymous P2P</link>.</p>
<p>

Finally, DHTs must deal with more traditional distributed systems issues such as <link xlink:type="simple" xlink:href="../118/61118.xml">
load balancing</link>, <link xlink:type="simple" xlink:href="../995/40995.xml">
data integrity</link>, and performance (in particular, ensuring that operations such as routing and data storage or retrieval complete quickly).</p>

</sec>
<sec>
<st>
 Structure </st>
<p>

The structure of a DHT can be decomposed into several main components.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%222%22])">2</ref><ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%223%22])">3</ref>  The foundation is an abstract <b>keyspace</b>, such as the set of 160-bit <link xlink:type="simple" xlink:href="../701/27701.xml">
string</link>s (actually, number of bits is a parameter of DHT and could vary).  A <b>keyspace partitioning</b> scheme splits ownership of this keyspace among the participating nodes.  An <b>overlay network</b> then connects the nodes, allowing them to find the owner of any given key in the keyspace.</p>
<p>

Once these components are in place, a typical use of the DHT for storage and retrieval might proceed as follows.  Suppose the keyspace is the set of 160-bit strings. To store a file with given <math>filename</math> and <math>data</math> in the DHT, the <mathematical_relation wordnetid="113783581" confidence="0.8">
<function wordnetid="113783816" confidence="0.8">
<link xlink:type="simple" xlink:href="../672/26672.xml">
SHA1 hash</link></function>
</mathematical_relation>
 of <math>filename</math> is found, producing a 160-bit key <math>k</math>, and a message <math>put(k, data)</math> is sent to any node participating in the DHT.  The message is forwarded from node to node through the overlay network until it reaches the single node responsible for key <math>k</math> as specified by the keyspace partitioning, where the pair <math>(k, data)</math> is stored.  Any other client can then retrieve the contents of the file by again hashing <math>filename</math> to produce <math>k</math> and asking any DHT node to find the data associated with <math>k</math> with a message <math>get(k)</math>.  The message will again be routed through the overlay to the node responsible for <math>k</math>, which will reply with the stored <math>data</math>.</p>
<p>

The keyspace partitioning and overlay network components are described below with the goal of capturing the principal ideas common to most DHTs; many designs differ in the details. </p>

<ss1>
<st>
 Keyspace partitioning </st>
<p>

Most DHTs use some variant of <link xlink:type="simple" xlink:href="../041/2434041.xml">
consistent hashing</link> to map keys to nodes.  This technique employs a function <math>\delta(k_1, k_2)</math> which defines an abstract notion of the <it>distance</it> from key <math>k_1</math> to key <math>k_2</math>, which is unrelated to geographical <link xlink:type="simple" xlink:href="../378/39378.xml">
distance</link> or network <idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<link xlink:type="simple" xlink:href="../933/17933.xml">
latency</link></concept>
</idea>
.  Each node is assigned a single key called its <it>identifier</it> (ID). A node with ID <math>i</math> owns all the keys for which <math>i</math> is the closest ID, measured according to <math>\delta</math>.</p>

<p>

<b>Example.</b> The <link xlink:type="simple" xlink:href="../132/322132.xml">
Chord</link> DHT treats keys as points on a circle, and <math>\delta(k_1, k_2)</math> is the distance traveling clockwise around the circle from <math>k_1</math> to <math>k_2</math>.  Thus, the circular keyspace is split into contiguous segments whose endpoints are the node identifiers.  If <math>i_1</math> and <math>i_2</math> are two adjacent IDs, then the node with ID <math>i_2</math> owns all the keys that fall between <math>i_1</math> and <math>i_2</math>.</p>

<p>

Consistent hashing has the essential property that removal or addition of one node changes only the set of keys owned by the nodes with adjacent IDs, and leaves all other nodes unaffected.  Contrast this with a traditional <link xlink:type="simple" xlink:href="../833/13833.xml">
hash table</link> in which addition or removal of one bucket causes nearly the entire keyspace to be remapped. Since any change in ownership typically corresponds to <link xlink:type="simple" xlink:href="../827/15612827.xml">
bandwidth</link>-intensive movement of objects stored in the DHT from one node to another, minimizing such reorganization is required to efficiently support high rates of churn (node arrival and failure).</p>

</ss1>
<ss1>
<st>
 Overlay network </st>
<p>

Each node maintains a set of <link xlink:type="simple" xlink:href="../996/40996.xml">
link</link>s to other nodes (its <it>neighbors</it> or <link xlink:type="simple" xlink:href="../043/48043.xml">
routing table</link>).  Together these links form the <link xlink:type="simple" xlink:href="../669/1014669.xml">
overlay network</link>. A node picks its neighbors according to a certain structure, called the <link xlink:type="simple" xlink:href="../413/41413.xml">
network's topology</link>.</p>
<p>

All DHT topologies share some variant of the most essential property: for any key <math>k</math>, the node either owns <math>k</math> or has a link to a node that is <it>closer</it> to <math>k</math> in terms of the keyspace distance defined above.  It is then easy to route a message to the owner of any key <math>k</math> using the following <link xlink:type="simple" xlink:href="../247/89247.xml">
greedy algorithm</link>: at each step, forward the message to the neighbor whose ID is closest to <math>k</math>.  When there is no such neighbor, then we must have arrived at the closest node, which is the owner of <math>k</math> as defined above. This style of routing is sometimes called <link xlink:type="simple" xlink:href="../792/1014792.xml">
key based routing</link>.</p>
<p>

Beyond basic routing correctness, two important constraints on the topology are to guarantee that the maximum number of hops in any route (route length) is low, so that requests complete quickly; and that the maximum number of neighbors of any node (maximum node <link xlink:type="simple" xlink:href="../448/1374448.xml">
degree</link>) is low, so that maintenance overhead is not excessive. Of course, having shorter routes requires higher maximum degree.  Some common choices for maximum degree and route length are as follows, where <math>n</math> is the number of nodes in the DHT, using <link xlink:type="simple" xlink:href="../578/44578.xml">
Big O notation</link>:</p>
<p>

<list>
<entry level="1" type="bullet">

 Degree <math>O(1)</math>, route length <math>O(\log n)</math></entry>
<entry level="1" type="bullet">

 Degree <math>O(\log n)</math>, route length <math>O(\log n / \log \log n)</math></entry>
<entry level="1" type="bullet">

 Degree <math>O(\log n)</math>, route length <math>O(\log n)</math></entry>
<entry level="1" type="bullet">

 Degree <math>O(n^{1/2})</math>, route length <math>O(1)</math></entry>
</list>
</p>
<p>

The third choice is the most common, even though it is not quite optimal
in terms of degree/route length tradeoff, because such topologies typically
allow more flexibility in choice of neighbors.  Many DHTs use that flexibility to pick neighbors which are
close in terms of latency in the physical underlying network.</p>
<p>

Maximum route length is closely related to <link xlink:type="simple" xlink:href="../021/1020021.xml">
diameter</link>: the maximum number of hops in any shortest path between nodes.  Clearly the network's route length is at least as large as its diameter, so DHTs are limited by the degree/diameter tradeoff<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%224%22])">4</ref> which is fundamental in <link xlink:type="simple" xlink:href="../401/12401.xml">
graph theory</link>. Route length can be greater than diameter since the greedy routing algorithm may not find shortest paths.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%225%22])">5</ref></p>

</ss1>
<ss1>
<st>
 Algorithms for overlay networks </st>

<p>

Aside from routing, there exist many algorithms which exploit the structure of the overlay network for sending a message to all nodes, or a subset of nodes, in a DHT.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%226%22])">6</ref> These algorithms are used by applications to do overlay multicast, range queries, or to collect statistics.</p>

</ss1>
</sec>
<sec>
<st>
 Real world DHTs and their differences and improvements over basic schemes </st>
<p>

Most notable differences encountered in "real world" DHT implementations include at least the following:
<list>
<entry level="1" type="bullet">

 Number of bits in address space could be other than 160. Actually, width of address space is a parameter of DHT. At least several real world DHTs are running with 128 bit keys space.</entry>
<entry level="1" type="bullet">

 Some real-world DHTs are using hash functions other than SHA1.</entry>
<entry level="1" type="bullet">

 In real world key <math>k</math> could be hash of file <math>content</math> rather than hash of <math>filename</math>.This allows to find file by content rather than by name so renaming of file does not affects ability to find this file in DHT.</entry>
<entry level="1" type="bullet">

 Some DHTs may also publish objects of different types. For example, key <math>k</math> could be node <math>ID</math> and associated data could describe how to contact this node. This allows publication of presence information and often used in IM applications, etc. In simplest case <math>ID</math> is just a random number which is directly used as key <math>k</math> (so in 160-bits DHT <math>ID</math> will be a 160 bits number, usually randomly chosen). In some DHTs publishing of nodes IDs also used to optimize DHT operations.</entry>
<entry level="1" type="bullet">

 Key <math>k</math> could be stored to more than exactly one node corresponding to such key to cause redundancy and improve DHT reliability. Usually rather than selecting one node, real world DHT algorithm selects <math>i</math> suitable nodes and it is an implementation specific parameter of DHT reflecting DHT's redundancy. In such DHT designs nodes agree to handle certain keyspace range which is even sometimes not a hardcoded value but dynamically chosen  </entry>
<entry level="1" type="bullet">

 Some advanced DHTs like <link xlink:type="simple" xlink:href="../895/532895.xml">
Kademlia</link> are rather doing iterative lookups through DHT first to select set of suitable nodes and only sending <math>put(k, data)</math> message to such nodes therefore drastically reducing useless traffic since publish messages are only sent to nodes which are apparently suitable for storing such key <math>k</math> and iterative lookups are only touching few nodes rather than whole DHT while useless forwarding is eliminated. In such DHTs forwarding of <math>put(k, data)</math> message may only occur as part of self-healing algorithm: if target node receives <math>put(k, data)</math> message but believes that key <math>k</math> is out of handled range and closer (in terms of DHT keyspace) node is known, message is forwarded to such node. Otherwise data are indexed locally. This leads to somewhat self-balancing DHT behavior. Of course such algorithm requires nodes to publish their presence data in DHT to allow mentioned iterative lookups of nodes itself via DHT before sending <math>put(k, data)</math> messages.</entry>
</list>
</p>

</sec>
<sec>
<st>
 Examples </st>

<ss1>
<st>
 DHT protocols and implementations </st>
<p>

<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../471/1963471.xml">
CAN</link> (Content Addressable Network)</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../132/322132.xml">
Chord</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../895/532895.xml">
Kademlia</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../273/5200273.xml">
Pastry</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../180/944180.xml">
P-Grid</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../684/5440684.xml">
Tapestry</link></entry>
</list>
</p>

</ss1>
<ss1>
<st>
 Applications employing DHTs </st>

<p>

<list>
<entry level="1" type="bullet">

 Adeona <weblink xlink:type="simple" xlink:href="http://adeona.cs.washington.edu">
http://adeona.cs.washington.edu</weblink>: A Free, Open Source System for Helping Track and Recover Lost and Stolen Laptops</entry>
<entry level="1" type="bullet">

 <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<format wordnetid="106636806" confidence="0.8">
<link xlink:type="simple" xlink:href="../098/239098.xml">
BitTorrent</link></format>
</rule>
</direction>
</protocol>
</information>
</message>
: File distribution.  BitTorrent optionally uses a DHT as a distributed tracker to provide rendezvous between clients downloading a particular file (see <work wordnetid="100575741" confidence="0.8">
<examination wordnetid="100635850" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<investigation wordnetid="100633864" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<comparison wordnetid="100142665" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<link xlink:type="simple" xlink:href="../497/9160497.xml">
BitTorrent client</link></activity>
</comparison>
</psychological_feature>
</act>
</investigation>
</event>
</examination>
</work>
)</entry>
<entry level="1" type="bullet">

 <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../867/17712867.xml">
The Circle</link></instrumentality>
</artifact>
</system>
: File sharing and chat</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../091/3725091.xml">
Codeen</link>: Web caching</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../145/989145.xml">
Coral Content Distribution Network</link></entry>
<entry level="1" type="bullet">

 <link>
CSpace</link>: Secure communications platform</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../513/1230513.xml">
Dijjer</link>: Freenet-like distribution network</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../202/5464202.xml">
eMule</link>: File sharing</entry>
<entry level="1" type="bullet">

 <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../936/11570936.xml">
FAROO</link></software>
: Peer-to-peer web search engine</entry>
<entry level="1" type="bullet">

 <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../685/293685.xml">
GNUnet</link></software>
 <weblink xlink:type="simple" xlink:href="http://gnunet.org/protocol_p2p_dht.php3?xlang=English">
http://gnunet.org/protocol_p2p_dht.php3?xlang=English</weblink>: Freenet-like distribution network</entry>
<entry level="1" type="bullet">

 <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../434/538434.xml">
I2P</link></software>
: Anonymous network</entry>
<entry level="1" type="bullet">

 <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../828/217828.xml">
JXTA</link></software>
: Opensource P2P platform</entry>
<entry level="1" type="bullet">

 <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../956/17956.xml">
LimeWire</link></software>
:P2P File sharing network <weblink xlink:type="simple" xlink:href="http://limewire.com">
http://limewire.com</weblink>has a built-in java applet called mojito DHT</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../112/1044112.xml">
NEOnet</link>: File sharing</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../135/336135.xml">
Overnet</link>: File sharing</entry>
<entry level="1" type="bullet">

 <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../217/2724217.xml">
Warez P2P</link></software>
: File sharing</entry>
<entry level="1" type="bullet">

 <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../033/2315033.xml">
YaCy</link></software>
: distributed <artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<engine wordnetid="103287733" confidence="0.8">
<motor wordnetid="103789946" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<machine wordnetid="103699975" confidence="0.8">
<link xlink:type="simple" xlink:href="../023/4059023.xml">
search engine</link></machine>
</device>
</motor>
</engine>
</instrumentality>
</artifact>
</entry>
</list>
</p>

</ss1>
</sec>
<sec>
<st>
 See also </st>
<p>

<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../720/437720.xml">
memcached</link>: a high-performance, distributed memory object caching system</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../493/11576493.xml">
Prefix Hash Tree</link>: Sophisticated querying over DHTs</entry>
</list>
</p>

</sec>
<sec>
<st>
References</st>
<p>

<reflist>
<entry id="1">
Hari Balakrishnan, M. Frans Kaashoek, David Karger, <physical_entity wordnetid="100001930" confidence="0.8">
<expert wordnetid="109617867" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<specialist wordnetid="110631941" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<research_worker wordnetid="110523076" confidence="0.8">
<link xlink:type="simple" xlink:href="../339/230339.xml">
Robert Morris</link></research_worker>
</scientist>
</causal_agent>
</specialist>
</person>
</expert>
</physical_entity>
, and Ion Stoica. <weblink xlink:type="simple" xlink:href="http://www.project-iris.net/irisbib/papers/dht:cacm03/paper.pdf">
Looking up data in P2P systems</weblink>.  In <work wordnetid="104599396" confidence="0.8">
<product wordnetid="104007894" confidence="0.8">
<creation wordnetid="103129123" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<periodical wordnetid="106593296" confidence="0.8">
<publication wordnetid="106589574" confidence="0.8">
<link xlink:type="simple" xlink:href="../161/291161.xml">
Communications of the ACM</link></publication>
</periodical>
</artifact>
</creation>
</product>
</work>
, February 2003.</entry>
<entry id="2">
Moni Naor and Udi Wieder. <weblink xlink:type="simple" xlink:href="http://www.wisdom.weizmann.ac.il/~naor/PAPERS/dh.pdf">
Novel Architectures for P2P Applications: the Continuous-Discrete Approach</weblink>. Proc. SPAA, 2003.</entry>
<entry id="3">
Gurmeet Singh Manku. <weblink xlink:type="simple" xlink:href="http://www-db.stanford.edu/~manku/phd/index.html">
Dipsea: A Modular Distributed Hash Table</weblink>. Ph. D. Thesis (Stanford University), August 2004.</entry>
<entry id="4">
<weblink xlink:type="simple" xlink:href="http://maite71.upc.es/grup_de_grafs/table_g.html">
The (Degree,Diameter) Problem for Graphs</weblink></entry>
<entry id="5">
Gurmeet Singh Manku, Moni Naor, and Udi Wieder. <weblink xlink:type="simple" xlink:href="http://citeseer.ist.psu.edu/naor04know.html">
Know thy Neighbor's Neighbor: the Power of Lookahead in Randomized P2P Networks</weblink>. Proc. STOC, 2004.</entry>
<entry id="6">
Ali Ghodsi. <weblink xlink:type="simple" xlink:href="http://www.sics.se/~ali/thesis/">
Distributed k-ary System: Algorithms for Distributed Hash Tables</weblink>. KTH-Royal Institute of Technology, 2006.</entry>
</reflist>
</p>

</sec>
<sec>
<st>
External links</st>
<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://linuxjournal.com/article/6797">
Distributed Hash Tables, Part 1</weblink> by Brandon Wiley.</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://deim.urv.cat/~cpairot/dhts.html">
Distributed Hash Tables links</weblink> Carles Pairot's Page on DHT and P2P research</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://developer.gemstone.com/display/gfedev/Topologies+and+Caching+Architectures">
GemStone's GemFire</weblink> supports a DHT with optional redundancy for high availability</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://wiki.tangosol.com/display/COH32UG/Partitioned+Cache+Service">
Tangosol Coherence</weblink> includes a structure similar to a DHT, though all nodes have knowledge of the other participants</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://web.archive.org/web/*/http://kademlia.scs.cs.nyu.edu/">
kademlia.scs.cs.nyu.edu</weblink> Archive.org snapshots of kademlia.scs.cs.nyu.edu </entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.opendht.org">
Open DHT</weblink>: A publicly accessible distributed hash table (DHT) service.</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.cacheonix.com">
Cacheonix</weblink> uses an approach similar to DHT with added replication for better failure-tolerance</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.hazelcast.com">
Hazelcast</weblink>: P2P and partitioned DHT implementation.</entry>
</list>
</p>


</sec>
</bdy>
</article>
