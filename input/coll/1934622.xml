<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 19:05:40[mciao0828] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<event  confidence="0.8" wordnetid="100029378">
<rule  confidence="0.8" wordnetid="105846932">
<act  confidence="0.8" wordnetid="100030358">
<psychological_feature  confidence="0.8" wordnetid="100023100">
<procedure  confidence="0.8" wordnetid="101023820">
<activity  confidence="0.8" wordnetid="100407535">
<algorithm  confidence="0.8" wordnetid="105847438">
<header>
<title>Proximity search (text)</title>
<id>1934622</id>
<revision>
<id>238864660</id>
<timestamp>2008-09-16T19:19:23Z</timestamp>
<contributor>
<username>Regenlied</username>
<id>4658143</id>
</contributor>
</revision>
<categories>
<category>Internet search algorithms</category>
<category>Information retrieval</category>
</categories>
</header>
<bdy>

In <link xlink:type="simple" xlink:href="../652/21652.xml">
text processing</link>, a <b>proximity search</b> looks for documents where two or more separately matching term occurrences are within a specified distance, where distance is the number of intermediate words or characters. In addition to proximity, some implementations may also impose a constraint on the word order, in that the order in the searched text must be identical to the order of the search query. Proximity searching goes beyond the simple matching of words by adding the constraint of proximity and is generally regarded as a form of advanced search.<p>

For example, a search could be used to find "red brick house", and match phrases such as "red house of brick" or "house made of red brick". By limiting the proximity, these phrases can be matched while avoiding documents where the words are scattered or spread across a page or in unrelated articles in an anthology. </p>

<sec>
<st>
Rationale</st>
<p>

The basic, linguistic, assumption is that the proximity of the words in a document implies a relationship between the words. Given that authors of documents try to formulate sentences which contain a single idea, or cluster related ideas within neighboring sentences or organized into paragraphs, there is an inherent, relatively high, probability within the document structure that words used together are related. On the other hand, when two words are on the opposite ends of a book, the probability of a relationship between the words is relatively weak. By limiting search results to only include matches where the words are within the specified maximum proximity, or distance, the search results are assumed to be of higher relevance than the matches where the words are scattered.</p>
<p>

Commercial, Internet search engines tend to produce too many matches (known as recall) for the average search query. Proximity searching is one method to reduce the number of pages matches, and to improve the relevance of the matched pages by using word proximity to assist in ranking. As an added benefit, proximity searching helps combat <link xlink:type="simple" xlink:href="../651/43651.xml">
spamdexing</link> by avoiding webpages which contain dictionary lists or shotgun lists of thousands of words, which rank higher in search engines that are heavily biased by word frequency to help in ranking results.</p>

</sec>
<sec>
<st>
Boolean Syntax and Operators</st>
<p>

Note that a proximity search can designate that only some keywords must be within a specified distance. Proximity searching can be used with other search syntax and/or controls to allow more articulate search queries. Sometimes query operators like NEAR, NOT NEAR, FOLLOWED BY, NOT FOLLOWED BY, SENTENCE or FAR are used to indicate a proximity-search limit between specified keywords: "brick NEAR house" and such.</p>

</sec>
<sec>
<st>
 Usage in Commercial Search Engines </st>
<p>

Google allows ordered-proximity searching using one asterisk (*) to span each 2 intervening words, but with order specified: "brick *** house" OR "house *** brick" matches up to 7 intervening words (October 2006).</p>
<p>

Implicit/automatic versus explicit proximity search: As of November 2006, most Internet <link xlink:type="simple" xlink:href="../023/4059023.xml">
search engine</link>s except <artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<engine wordnetid="103287733" confidence="0.8">
<motor wordnetid="103789946" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<machine wordnetid="103699975" confidence="0.8">
<link xlink:type="simple" xlink:href="../130/4241130.xml">
Exalead</link></machine>
</device>
</motor>
</engine>
</instrumentality>
</artifact>
 and <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../213/188213.xml">
Yahoo!</link></company>
 only implement an implicit proximity search functionality. That is, they automatically rank those search results higher where the user keywords have a good "overall proximity score" in such results. If only two keywords are in the search query, this has no difference from an explicit proximity search which puts a NEAR operator between the two keywords. However, if three or more than three keywords are present, it is often important for the user to specify which subsets of these keywords expect a proximity in search results. This is useful if the user wants to do a <link xlink:type="simple" xlink:href="../906/572906.xml">
prior art</link> search (e.g. finding an existing approach to complete a specific task, finding a document that discloses a system that exhibits a procedural behavior collaboratively conducted by several components and links between these components). </p>
<p>

For example, in a search query in the form of: (keyword1 NEAR keyword2) (keyword1 NEAR keyword3), the query specifies that keyword1 and keyword2 must <link xlink:type="simple" xlink:href="../802/4869802.xml">
co-occur</link> closely somewhere in a document, and so must keyword1 and keyword3. However, keyword2 and keyword3 need not occur closely anywhere in the document.</p>
<p>

<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<engine wordnetid="103287733" confidence="0.8">
<motor wordnetid="103789946" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<machine wordnetid="103699975" confidence="0.8">
<link xlink:type="simple" xlink:href="../130/4241130.xml">
Exalead</link></machine>
</device>
</motor>
</engine>
</instrumentality>
</artifact>
 allows the user to specify the required proximity, as the maximum number of words between keywords. The syntax is (keyword1 NEAR/n keyword2) where n is the number of words. When using the <artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<engine wordnetid="103287733" confidence="0.8">
<motor wordnetid="103789946" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<machine wordnetid="103699975" confidence="0.8">
<link xlink:type="simple" xlink:href="../835/1395835.xml">
Walhello</link></machine>
</device>
</motor>
</engine>
</instrumentality>
</artifact>
 search-engine, the proximity can be defined by the number of characters between the keywords.</p>
<p>

Proximity search within the <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../923/1092923.xml">
Google</link></company>
 and <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../213/188213.xml">
Yahoo!</link></company>
 search engines is possible using full-word <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<format wordnetid="106636806" confidence="0.8">
<link xlink:type="simple" xlink:href="../869/41869.xml">
wildcard</link></format>
</information>
</message>
s: the wildcard is an asterisk "*" in Google, and an "a" in <it>Yahoo! Search</it>.</p>
<p>

<it>Google Asterisk:</it>  Using Google's asterisk-in-quotations approach to emulate a NEAR operator is a little cumbersome but does work (as of October 2006). For example, to specify a close (at most 2 words' distance) co-occurrence of "house" and "dog", the following search-expression could be specified:</p>
<p>

<indent level="3">

 "house * dog" OR "dog * house"   --Search for house/dog up to 2 words apart.
</indent>

Note the operator "OR" must be in capital letters. One asterisk allows a proximity of at most two words' distance between two search-words. To span 6 intervening words, use 3 asterisks:</p>
<p>

<indent level="3">

 "house *** dog" OR "dog *** house"   --Search for house/dog up to 6 words apart.
</indent>

To span up to 8 intervening words in a Google search, use 4 asterisks, etc.</p>

</sec>
<sec>
<st>
See also</st>
<p>

<list>
<entry level="1" type="bullet">

 <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../427/406427.xml">
Edit distance</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../135/1473135.xml">
Semantic proximity</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../271/15271.xml">
Information retrieval</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../023/4059023.xml">
Search engine</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../386/7602386.xml">
Indexing</link> - how texts are indexed to support proximity search</entry>
</list>
</p>

</sec>
</bdy>
</algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</article>
