<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 17.04.2009 05:27:13[mciao0827] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>LOCUS (operating system)</title>
<id>19468225</id>
<revision>
<id>242462997</id>
<timestamp>2008-10-02T10:03:18Z</timestamp>
<contributor>
<username>HughesJohn</username>
<id>7886242</id>
</contributor>
</revision>
<categories>
<category>Operating systems</category>
<category>Distributed computing</category>
</categories>
</header>
<bdy>
<template>
<name>Infobox_OS</name>
<parameters>
<family>
<family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../642/31642.xml">
Unix</link></family>
</family>
<developer>
<link xlink:type="simple" xlink:href="../765/37765.xml">
UCLA</link></developer>
<name>
LOCUS</name>
<source_model>
<link xlink:type="simple" xlink:href="../886/18934886.xml">
Closed source</link></source_model>
<license>
<link xlink:type="simple" xlink:href="../886/18934886.xml">
Proprietary</link></license>
<kernel_type>
<link xlink:type="simple" xlink:href="../825/20825.xml">
Monolithic kernel</link></kernel_type>
<working_state>
Historic</working_state>
</parameters>
</template>

<p>

LOCUS was a <link xlink:type="simple" xlink:href="../162/145162.xml">
distributed operating system</link> developed at <link xlink:type="simple" xlink:href="../765/37765.xml">
UCLA</link> during the 1980s.  It was notable for providing an early implementation of the <link xlink:type="simple" xlink:href="../962/622962.xml">
single-system image</link> idea, where a <link xlink:type="simple" xlink:href="../896/18949896.xml">
cluster</link> of machines appeared to be one larger machine.
<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref></p>
<p>

A desire to commercialize the technologies developed for LOCUS inspired the creation of the <link xlink:type="simple" xlink:href="../250/19572250.xml">
Locus Computing Corporation</link> which went on to include ideas from LOCUS in various products, including <link>
OSF/1 AD</link> and, finaly, the <company wordnetid="108058098" confidence="0.8">
<institution wordnetid="108053576" confidence="0.8">
<link xlink:type="simple" xlink:href="../730/484730.xml">
SCO</link></institution>
</company>
/<link xlink:type="simple" xlink:href="../931/677931.xml">
Tandem</link> <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../953/566953.xml">
UnixWare</link></O>
 Non Stop Clusters product.</p>

<sec>
<st>
Description</st>
<p>

The LOCUS system was created at <link xlink:type="simple" xlink:href="../765/37765.xml">
UCLA</link> between 1980 and 1983, initial implementation was on a cluster of <link xlink:type="simple" xlink:href="../399/24399.xml">
PDP-11</link>/45s using 1 and 10 megabit <link xlink:type="simple" xlink:href="../168/7016168.xml">
ring network</link>s, by 1983 the system was running on 17 <link xlink:type="simple" xlink:href="../517/32517.xml">
VAX</link> 750s using a 10 megabit <link xlink:type="simple" xlink:href="../499/9499.xml">
ethernet</link>.  The system was <family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../642/31642.xml">
Unix</link></family>
 compatible and provided both a <link xlink:type="simple" xlink:href="../962/622962.xml#xpointer(//*[./st=%22single+root%22])">
single root</link> view of the file system and a <link xlink:type="simple" xlink:href="../962/622962.xml#xpointer(//*[./st=%22single+process+space%22])">
unified process space</link> across all nodes.</p>
<p>

The development of LOCUS was supported by a <agency wordnetid="108337324" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../957/8957.xml">
ARPA</link></agency>
 research contract, DSS-MDA-903-82-C-0189.</p>

<ss1>
<st>
File system</st>
<p>

In order to allow reliable and rapid access to the cluster wide filesystem LOCUS used <link xlink:type="simple" xlink:href="../905/2722905.xml">
replication</link>, the data of files could be stored on more than one node and LOCUS would keep the various copies up to date.  This provided particularly good access times for files that were read more often than they were written, the normal case for directories for example.</p>
<p>

In order to ensure that all access was made to the most recent version of any file LOCUS would nominate one node as the "current synchronization site" (CSS) for a particular file system.  All accesses to files a file system would need to be coordinated with the appropriate CSS.</p>

<ss3>
<st>
Node dependent files</st>
<p>

As with other <link xlink:type="simple" xlink:href="../962/622962.xml">
SSI</link> systems LOCUS sometimes found it necessary to <it>break the illusion</it> of a single system, notably to allow some files to be different on a per-node basis.  For example it was possible to build a LOCUS cluster containing both PDP-11/45 and VAX 750 machines, but instruction sets used were not identical, so two versions of each object program would be needed<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%222%22])">2</ref></p>
<p>

The solution was to replace the files that needed to be different on a per node basis by special hidden directories.  These directories would then contain the different versions of the file.  When a user accessed one of these hidden directories the system would check the users <it>context</it> and open the appropriate file.</p>
<p>

For example, if the user was running on one of the PDP-11/45's and typed the command /bin/who then the system would find that /bin/who was actually a hidden directory and run the command /bin/who/45.  Another user on a VAX node who typed /bin/who would run the command /bin/who/vax.</p>

</ss3>
</ss1>
<ss1>
<st>
Devices</st>
<p>

LOCUS provided remote access to I/O devices.</p>


</ss1>
<ss1>
<st>
Processes</st>
<p>

LOCUS provided a single process space.  Processes could be created on any node on the system.  Both the Unix <standard wordnetid="107260623" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../507/301507.xml">
fork</link></system_of_measurement>
</standard>
 and <link xlink:type="simple" xlink:href="../262/4634262.xml">
exec</link> calls would examine an <it>advice list</it> which determined on which node the process would be run.  LOCUS was designed to work with heterogeneous nodes, (e.g. a mix of VAX 750s and PDP 11/45s) and could decide to execute a process on a different node if it needed a particular instruction set.  As an optimization a a <it>run</it> call was added which was equivalent to a combined fork and exec, thus avoiding the overhead of copying the process memory image to another node before overwriting it by the new image.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%223%22])">3</ref></p>

</ss1>
<ss1>
<st>
Pipes</st>
<p>

Processes could use <link xlink:type="simple" xlink:href="../117/1236117.xml">
pipes</link> for inter node communication, including <link xlink:type="simple" xlink:href="../167/714167.xml">
named pipe</link>s,</p>

</ss1>
<ss1>
<st>
Partitioning</st>
<p>

The LOCUS system was designed to be able to cope with <link>
network partitioning</link> - one or more nodes becoming disconnected from the rest of the system.  As the file system was <link xlink:type="simple" xlink:href="../905/2722905.xml">
replicated</link> the disconnected nodes could continue to access files.  When the nodes were reconnected any files modified by the disconnected nodes would be merged back into the system.  For some file types (for example mailboxes) the system would perform the merge automatically, for others the user would be informed (by mail) and tools were provided to allow access to the different versions of the file.</p>

</ss1>
</sec>
<sec>
<st>
Notes</st>
<p>

<reflist group="note">
<entry id="2">
Rather like Apple <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<format wordnetid="106636806" confidence="0.8">
<link xlink:type="simple" xlink:href="../695/595695.xml">
Fat binary</link></format>
</information>
</message>
 files</entry>
<entry id="3">
<it>run</it> is the same operation as <standard wordnetid="107260623" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../352/8941352.xml">
spawn</link></system_of_measurement>
</standard>
 on <link xlink:type="simple" xlink:href="../982/33982.xml">
Windows</link> systems.</entry>
</reflist>
</p>

</sec>
<sec>
<st>
References</st>
<p>

<reflist>
<entry id="1">
<link>
Walker, Bruce</link>&#32;(1983).&#32;"<weblink xlink:type="simple" xlink:href="http://www.cs.princeton.edu/courses/archive/fall03/cs518/papers/locus.pdf">
The LOCUS Distributed Operating System</weblink>".&#32;<document wordnetid="106470073" confidence="0.8">
<written_communication wordnetid="106349220" confidence="0.8">
<writing wordnetid="106362953" confidence="0.8">
<link xlink:type="simple" xlink:href="../994/422994.xml">
doi</link></writing>
</written_communication>
</document>
:<weblink xlink:type="simple" xlink:href="http://dx.doi.org/10.1145/800217.806615">
10.1145/800217.806615</weblink>.
</entry>
<entry id="2">
Rather like Apple <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<format wordnetid="106636806" confidence="0.8">
<link xlink:type="simple" xlink:href="../695/595695.xml">
Fat binary</link></format>
</information>
</message>
 files</entry>
<entry id="3">
<it>run</it> is the same operation as <standard wordnetid="107260623" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../352/8941352.xml">
spawn</link></system_of_measurement>
</standard>
 on <link xlink:type="simple" xlink:href="../982/33982.xml">
Windows</link> systems.</entry>
</reflist>
</p>

</sec>
</bdy>
</article>
