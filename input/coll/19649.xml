<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 15:30:42[mciao0828] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>MVS</title>
<id>19649</id>
<revision>
<id>240320430</id>
<timestamp>2008-09-22T23:35:12Z</timestamp>
<contributor>
<username>Rjwilmsi</username>
<id>203434</id>
</contributor>
</revision>
<categories>
<category>Articles to be merged since November 2007</category>
<category>All articles to be merged</category>
<category>IBM Mainframe computer operating systems</category>
<category>Articles with links needing disambiguation</category>
</categories>
</header>
<bdy>

<table class="metadata plainlinks ambox ">
<row>
<col>

ambox-move" style=""</col>
</row>
<row>
<col class="mbox-image"><p>

<image width="50px" src="Merge-arrow.svg">
<caption>

Merge arrow
</caption>
</image>
</p>
</col>
<col style="" class="mbox-text">
 It has been suggested that this article or section be  into . ()</col>
</row>
</table>


For other uses, see <link xlink:type="simple" xlink:href="../529/4150529.xml">
MVS (disambiguation)</link>.<p>

<table style="float: right; clear: right; border: 1px solid #8888aa; background: #f7f8ff; padding: 5px; margin: 0 0 15px 15px; text-align: left;" cellpadding="1">
<row>
<col style="background: #ccf; text-align: center;">
 <b><link xlink:type="simple" xlink:href="../089/13856089.xml">
History of IBM mainframeoperating systems</link></b></col>
</row>
<row>
<col style="background: #fff;">
<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../891/1680891.xml">
IBSYS</link> 1950s</entry>
<entry level="1" type="bullet">

 <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../141/254141.xml">
CTSS</link></O>
 1961</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../635/140635.xml">
BOS/360</link> 1965</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../634/140634.xml">
TOS/360</link> 1965</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../358/6253358.xml">
TSS/360</link> 1967</entry>
<entry level="1" type="bullet">

 <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../821/197821.xml">
MUSIC/SP</link></O>
 1960s</entry>
<entry level="1" type="bullet">

 <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../432/148432.xml">
MTS</link></O>
1970s</entry>
</list>
</col>
</row>
<row>
<col style="background: #eee;">
<list>
<entry level="1" type="bullet">

 <b><link xlink:type="simple" xlink:href="../229/626229.xml">
DOS/360 and successors</link></b> 1966</entry>
<entry level="2" type="bullet">

 DOS/VS 1972</entry>
<entry level="2" type="bullet">

 DOS/VSE 1980s </entry>
<entry level="2" type="bullet">

 VSE/ESA 1991</entry>
<entry level="2" type="bullet">

 <link xlink:type="simple" xlink:href="../682/32682.xml">
z/VSE</link>2005</entry>
</list>
</col>
</row>
<row>
<col style="background: #fff;">
<list>
<entry level="1" type="bullet">

 <b><link xlink:type="simple" xlink:href="../737/14387737.xml">
OS/360 and successors</link></b> 1966</entry>
<entry level="2" type="bullet">

 <link xlink:type="simple" xlink:href="../651/2660651.xml">
MFT</link> 1966</entry>
<entry level="3" type="bullet">

 <link xlink:type="simple" xlink:href="../217/9815217.xml">
OS/VS1</link> 1972</entry>
<entry level="2" type="bullet">

 <link xlink:type="simple" xlink:href="../423/19161423.xml">
MVT</link> 1967</entry>
<entry level="3" type="bullet">

 <link>
OS/VS2R1</link> (SVS) 1972</entry>
<entry level="2" type="bullet">

 <link xlink:type="simple" xlink:href="../649/19649.xml">
MVS</link> (<link>
OS/VS2R2</link>) 1974</entry>
<entry level="3" type="bullet">

 <link xlink:type="simple" xlink:href="../812/13302812.xml">
MVS/370</link> 1970s</entry>
<entry level="3" type="bullet">

 <link xlink:type="simple" xlink:href="../254/39254.xml">
MVS/XA</link> 1980s</entry>
<entry level="3" type="bullet">

 <link xlink:type="simple" xlink:href="../340/39340.xml">
MVS/ESA</link> 1988</entry>
<entry level="3" type="bullet">

 <link xlink:type="simple" xlink:href="../129/39129.xml">
OS/390</link> 1995</entry>
<entry level="3" type="bullet">

 <link xlink:type="simple" xlink:href="../122/39122.xml">
z/OS</link>2000</entry>
</list>
</col>
</row>
<row>
<col style="background: #eee;">
<list>
<entry level="1" type="bullet">

 <b><link xlink:type="simple" xlink:href="../460/8177460.xml">
VM line</link></b></entry>
<entry level="2" type="bullet">

 <link>
CP-40</link><O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../784/315784.xml">
/CMS</link></O>
 1967</entry>
<entry level="2" type="bullet">

 <link xlink:type="simple" xlink:href="../718/315718.xml">
CP-67</link><O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../784/315784.xml">
/CMS</link></O>
 1967</entry>
<entry level="2" type="bullet">

 <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../581/6190581.xml">
VP/CSS</link></O>
 1968</entry>
<entry level="2" type="bullet">

 <link xlink:type="simple" xlink:href="../018/315018.xml">
VM/370</link> 1972</entry>
<entry level="2" type="bullet">

 <link xlink:type="simple" xlink:href="../018/315018.xml">
VM/SP</link> 1980</entry>
<entry level="2" type="bullet">

 <link>
VM/XA</link> 1988</entry>
<entry level="2" type="bullet">

 <link xlink:type="simple" xlink:href="../018/315018.xml">
VM/ESA</link> 1990</entry>
<entry level="2" type="bullet">

 <link xlink:type="simple" xlink:href="../680/1266680.xml">
z/VM</link>2000</entry>
</list>
</col>
</row>
<row>
<col style="background: #fff;">
<list>
<entry level="1" type="bullet">

<b>TPF line</b></entry>
<entry level="2" type="bullet">

<link>
 ACP</link> 1967</entry>
<entry level="2" type="bullet">

<link>
 TPF</link> 1979</entry>
<entry level="2" type="bullet">

<link xlink:type="simple" xlink:href="../433/30433.xml">
z/TPF</link>2000s</entry>
</list>
</col>
</row>
<row>
<col style="background: #eee;">
<list>
<entry level="1" type="bullet">

 <b><family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../815/31815.xml">
Unix-like</link></family>
 on IBM mainframes</b></entry>
<entry level="2" type="bullet">

 <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../332/13227332.xml">
UTS</link></O>
 1981</entry>
<entry level="2" type="bullet">

 <O wordnetid="106832680" confidence="0.9508927676800064">
<link>
AIX/370</link></O>
 1990</entry>
<entry level="2" type="bullet">

 <O wordnetid="106832680" confidence="0.9508927676800064">
<link>
AIX/ESA</link></O>
 1991</entry>
<entry level="2" type="bullet">

 <structure wordnetid="105726345" confidence="0.8">
<arrangement wordnetid="105726596" confidence="0.8">
<distribution wordnetid="105729036" confidence="0.8">
<link xlink:type="simple" xlink:href="../604/1266604.xml">
Linux</link></distribution>
</arrangement>
</structure>
1999</entry>
</list>
</col>
</row>
<row>
<col style="background: #ccf; text-align:right;"></col>
</row>
</table>
</p>
<p>

<b>Multiple Virtual Storage</b>, more commonly called <b>MVS</b>, was the most commonly used <link xlink:type="simple" xlink:href="../194/22194.xml">
operating system</link> on the <link xlink:type="simple" xlink:href="../785/59785.xml">
System/370</link> and <link xlink:type="simple" xlink:href="../266/1856266.xml">
System/390</link> <link xlink:type="simple" xlink:href="../872/14872.xml">
IBM mainframe computers</link>. It was developed by <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../259/18622259.xml">
IBM</link></company>
, but is unrelated to IBM's other mainframe operating system, <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../018/315018.xml">
VM</link></O>
.</p>
<p>

First released in 1974, MVS had been renamed multiple times, first to <link xlink:type="simple" xlink:href="../254/39254.xml">
MVS/XA</link> (eXtended Architecture), next to <link xlink:type="simple" xlink:href="../340/39340.xml">
MVS/ESA</link> (Enterprise Systems Architecture), then to <link xlink:type="simple" xlink:href="../129/39129.xml">
OS/390</link> (when <link xlink:type="simple" xlink:href="../535/593535.xml">
UNIX System Services</link> (USS) were added), and finally to <link xlink:type="simple" xlink:href="../122/39122.xml">
z/OS</link> (when <link xlink:type="simple" xlink:href="../285/148285.xml">
64-bit</link> support was added with the <link xlink:type="simple" xlink:href="../088/3968088.xml">
zSeries</link> models). Its core remains fundamentally the same operating system. By design, programs written for MVS can still run on z/OS without modification.</p>
<p>

At first IBM described MVS as simply a new release of <link>
OS/VS2</link>. But it was in fact a complete re-write - previous OS/VS2 releases were upgrades of <link xlink:type="simple" xlink:href="../423/19161423.xml">
OS/MVT</link> and, like MVT, were mainly written in <link xlink:type="simple" xlink:href="../368/1368.xml">
 Assembler</link>; the core of MVS was almost entirely written in <link xlink:type="simple" xlink:href="../828/1033828.xml">
PL/S</link>. IBM's use of "OS/VS2" emphasized upwards compatibility: application programs which ran under MVT did not even need to be re-compiled in order to run under MVS; the same <link xlink:type="simple" xlink:href="../487/391487.xml">
Job Control Language</link> files could be used unchanged; the utilities and other non-core facilities like <link xlink:type="simple" xlink:href="../150/212150.xml">
TSO</link> ran unchanged. But users almost unanimously called the new system MVS from the start, and IBM followed their lead in the naming of later <it>major</it> versions such as MVS/XA. After the release of MVS, users described earlier OS/VS2 releases as SVS (Single Virtual Storage).</p>

<sec>
<st>
Evolution of MVS</st>
<p>

<link xlink:type="simple" xlink:href="../651/2660651.xml">
OS/MFT</link> (Multitasking with a Fixed number of Tasks) provided multitasking: several memory partitions, each of a fixed size, were set up when the operating system was installed.  For example, there might be a small partition, two medium partitions, and a large partition. If there were two large programs ready to run, one would have to wait on the other until it finished and vacated the large partition. </p>
<p>

<link xlink:type="simple" xlink:href="../423/19161423.xml">
OS/MVT</link> (Multitasking with a Variable number of Tasks) was an enhancement which further refined memory usage. Instead of using fixed-size memory partitions, MVT allocated memory to programs as needed <it>provided</it> there was enough <it>contiguous</it> physical memory available. This was a significant advance over MFT's memory management: there was no predefined limit on the number of jobs that could run at the same time; and two or more large jobs could run at the same time if enough memory was available. But it had some weaknesses: if a job allocated memory <link xlink:type="simple" xlink:href="../117/547117.xml">
 dynamically</link> (as most <link xlink:type="simple" xlink:href="../442/28442.xml">
 sort</link> programs and <link xlink:type="simple" xlink:href="../513/8513.xml">
database management system</link>s do), the programmers had to estimate the job's maximum memory requirement and pre-define it for MVT; a job which contained a mixture of small and large programs would waste memory while the small programs were running; most seriously, memory could become <link xlink:type="simple" xlink:href="../369/3909369.xml">
 fragmented</link>, i.e. the memory not used by current jobs could be divided into uselessly small chunks between the areas used by current jobs, and the only remedy was to wait until all current jobs finished before starting any new ones.</p>
<p>

In the early 1970s IBM sought to mitigate these difficulties by introducing <link xlink:type="simple" xlink:href="../354/32354.xml">
virtual memory</link> (referred to by IBM as "virtual storage"), which allowed programs to request <link xlink:type="simple" xlink:href="../144/507144.xml">
address space</link>s larger than physical memory. The original implementations had a single virtual address space, shared by all jobs. OS/VS1 was OS/MFT within a single virtual address space; OS/VS2 SVS was OS/MVT within a single virtual address space. So OS/VS1 and SVS in principle had the same disadvantages as MFT and MVT but the impacts were less severe because jobs could request much larger address spaces.</p>
<p>

<table align="right" cellpadding="5" cellspacing="0">
<row>
<col align="center">
<table cellpadding="5" border="1" cellspacing="0">
<row>
<col colspan="3" align="center">
MVS (shared part of all address spaces)</col>
</row>
<row>
<col align="center">
App 1</col>
<col align="center">
App 2</col>
<col align="center">
App 3</col>
</row>
<row>
<col colspan="3" align="center">
Shared virtual area (controlled by MVS)</col>
</row>
</table>
</col>
</row>
<row>
<col align="center">
<table cellpadding="5" border="1" cellspacing="0">
<row>
<col align="center">
MVS</col>
</row>
<row>
<col align="center">
App 1</col>
</row>
<row>
<col align="center">
Shared virtual area</col>
</row>
</table>
</col>
</row>
</table>

In the mid-1970s IBM introduced MVS, which allowed an indefinite number of applications to run in different address spaces - two concurrent programs might try to access the same virtual memory address, but the virtual memory system redirected these requests to different areas of physical memory. Each of these address spaces consisted of 3 areas: operating system (one instance shared by all jobs); application area which was unique for each application; shared virtual area which was used for various purposes including inter-job communication. IBM promised that the application areas would always be at least 8MB.</p>
<p>

MVS originally supported 24-bit addressing (i.e. up to 16MB). As the underlying hardware progressed it supported 31-bit (XA and ESA; up to 2048MB) and now (as z/OS) 64-bit addressing. Two of the most significant reasons for the rapid upgrade to 31-bit addressing were: the growth of large transaction-processing networks, mostly controlled by <link xlink:type="simple" xlink:href="../505/391505.xml">
CICS</link>, which ran in a single address space; the <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../983/142983.xml">
 DB2</link></instrumentality>
</artifact>
</system>
 <link xlink:type="simple" xlink:href="../743/98743.xml">
relational database management system</link> needed more than 8MB of application address space in order to run efficiently (early versions were configured into two address spaces which communicated via the shared virtual area, but this imposed a significant overhead since all such communications had to be transmitted via the operating system).</p>
<p>

The main user interfaces to MVS are: <link xlink:type="simple" xlink:href="../487/391487.xml">
Job Control Language</link> (JCL), which was originally designed for <link xlink:type="simple" xlink:href="../285/37285.xml">
batch processing</link> but from the 1970s onwards was also used to start and allocate resources to long-running <link xlink:type="simple" xlink:href="../528/644528.xml">
interactive</link> jobs such <link xlink:type="simple" xlink:href="../505/391505.xml">
CICS</link>; and <link xlink:type="simple" xlink:href="../150/212150.xml">
TSO</link> (Time Sharing Option), the <link xlink:type="simple" xlink:href="../528/644528.xml">
interactive</link> <link xlink:type="simple" xlink:href="../958/30958.xml">
time-sharing</link> interface, which was mainly used to run development tools and a few end-user information systems. <shell wordnetid="104190464" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<ammunition wordnetid="102703275" confidence="0.8">
<weaponry wordnetid="104566257" confidence="0.8">
<link xlink:type="simple" xlink:href="../337/199337.xml">
ISPF</link></weaponry>
</ammunition>
</instrumentality>
</artifact>
</shell>
 is a TSO application for users on 3270-family terminals (and later, on VM as well) which allows the user to accomplish the same tasks as TSO's <link xlink:type="simple" xlink:href="../707/6707.xml">
command line</link> but in a menu and form oriented manner, and with a full screen editor and file browser. TSO's basic interface is <link xlink:type="simple" xlink:href="../707/6707.xml">
command line</link>, although facilities were added later for creating form-driven interfaces).</p>
<p>

Early editions of MVS (mid-1970s) were among the first of the IBM OS series to support <link xlink:type="simple" xlink:href="../020/64020.xml">
multiprocessor</link> configurations, though it had previously been supported in the 1960s on a limited basis by the M65MP variant of OS/360 running on 360/65 and <link xlink:type="simple" xlink:href="../024/7522024.xml">
360-67</link>. The 360-67 had also hosted the multiprocessor capable <link xlink:type="simple" xlink:href="../358/6253358.xml">
TSS/360</link> and <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../432/148432.xml">
MTS</link></O>
 operating systems. In tightly-coupled systems 2 (later up to 8) CPUs shared concurrent access to the same memory (and copy of the operating system) and peripherals, providing greater processing power and a degree of <link xlink:type="simple" xlink:href="../729/2573729.xml">
graceful degradation</link> if one CPU failed. In loosely-coupled configurations each of a group of processors (single and / or tightly-coupled) had its own memory and operating system but shared peripherals and the operating system component <link xlink:type="simple" xlink:href="../191/1356191.xml">
JES3</link> allowed the whole group to be managed from one console - this provided greater resilience and enabled operators to decide which processor should run which jobs from a central job queue.</p>
<p>

Multiple copies of MVS (or other IBM operating systems) could share the 
same machine if that machine was controlled by <link xlink:type="simple" xlink:href="../018/315018.xml">
VM/370</link> - in this case VM/370 was the real operating system and regarded the "guest" operating systems as applications with unusually high privileges. As a result of later hardware enhancements one instance of an operating system (either MVS, or VM with guests, or other) could also occupy a <artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<link xlink:type="simple" xlink:href="../383/2301383.xml">
 Logical Partition</link></device>
</instrumentality>
</artifact>
 (LPAR) instead of an entire physical system. </p>
<p>

Multiple MVS instances can be organized and collectively administered in a structure called a <it>systems complex</it> or <it><link xlink:type="simple" xlink:href="../420/2301420.xml">
sysplex</link></it>, introduced in September, <link xlink:type="simple" xlink:href="../635/34635.xml">
1990</link>. Instances interoperate through a software component called a <link xlink:type="simple" xlink:href="../440/12219440.xml">
Cross-system Coupling Facility</link> (XCF) and a hardware component called a <it>Hardware Coupling Facility</it> (CF or Integrated Coupling Facility, ICF, if co-located on the same mainframe hardware).  Multiple sysplexes can be joined via standard network protocols such as IBM's proprietary <link xlink:type="simple" xlink:href="../267/78267.xml">
Systems Network Architecture</link> (SNA) or, more recently, via <link xlink:type="simple" xlink:href="../476/15476.xml">
TCP/IP</link>.</p>
<p>

The z/OS operating system (MVS' most recent descendant) also has native support to execute <standard wordnetid="107260623" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../305/23305.xml">
POSIX</link></system_of_measurement>
</standard>
 applications.</p>


<p>

Files are properly called <link xlink:type="simple" xlink:href="../727/1042727.xml">
data set</link>s in MVS. Names of those files are organized in <it>catalogs</it> which are <link xlink:type="simple" xlink:href="../497/316497.xml">
VSAM</link> files themselves.</p>
<p>

The native encoding scheme of IBM mainframes and their <link xlink:type="simple" xlink:href="../ago/Austin=2C_C$hicago.xml">
peripherals</link> is Big <link xlink:type="simple" xlink:href="../026/43026.xml">
Endian</link> <link xlink:type="simple" xlink:href="../170/12442170.xml">
EBCDIC</link>, but MVS provides hardware-accelerated services to perform translation and support of <message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<representation wordnetid="105926676" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<link xlink:type="simple" xlink:href="../586/586.xml">
ASCII</link></rule>
</direction>
</representation>
</protocol>
</message>
, Little <link xlink:type="simple" xlink:href="../026/43026.xml">
Endian</link>, and <link xlink:type="simple" xlink:href="../742/31742.xml">
Unicode</link>.</p>

</sec>
<sec>
<st>
MVS filesystem</st>
<p>

Data set names (DSNs, mainframe term for filenames) are organized in a hierarchy whose levels are separated with dots, e.g. "DEPT01.SYSTEM01.FILE01".  Each level in the hierarchy can be up to eight characters long. The total filename length is a maximum of 44 characters including dots. By convention, the components separated by the dots are used to organize files similarly to directories in other operating systems. For example there were utility programs which performed similar functions to those of <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../959/445959.xml">
Windows Explorer</link></software>
 (but without the <link xlink:type="simple" xlink:href="../293/12293.xml">
GUI</link> and usually in <link xlink:type="simple" xlink:href="../285/37285.xml">
batch processing</link> mode) - adding, renaming or deleting new elements and reporting all the contents of a specified element. However, unlike in many other systems, these levels are not actual directories but just a naming convention (like the original <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../727/927727.xml">
Macintosh File System</link></instrumentality>
</artifact>
</system>
, where folder hierarchy was an illusion maintained by the Finder). <link xlink:type="simple" xlink:href="../150/212150.xml">
TSO</link> supports a default prefix for files (similar to a "current directory" concept), and <link xlink:type="simple" xlink:href="../722/1042722.xml">
RACF</link> supports setting up access controls based on filename patterns, analogous to access controls on directories on other platforms.</p>
<p>

As with other members of the OS family, MVS' data sets were <link xlink:type="simple" xlink:href="../350/1839350.xml">
 record-oriented</link>. MVS inherited three main types from its predecessors:
<list>
<entry level="1" type="bullet">

 Sequential data sets were normally read one record at a time from beginning to end.</entry>
<entry level="1" type="bullet">

 In <link xlink:type="simple" xlink:href="../030/16245030.xml">
 BDAM</link> (direct access) data sets, the application program had to specify the physical location of the data it wanted to access (usually by specifying the offset from the start of the data set).</entry>
<entry level="1" type="bullet">

 In <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../763/252763.xml">
ISAM</link></instrumentality>
</artifact>
</system>
 data sets a specified section of each record was defined as a key which could be used as a key to look up specific records. The key quite often consisted of multiple <link xlink:type="simple" xlink:href="../062/296062.xml">
fields</link> but these had to be contiguous and in the right order; and key values had to be unique. Hence an IBM ISAM file could have only one key, equivalent to the <link xlink:type="simple" xlink:href="../099/6850099.xml">
primary key</link> of a <link xlink:type="simple" xlink:href="../873/25873.xml">
relational database</link> table; ISAM could not support <link xlink:type="simple" xlink:href="../065/259065.xml">
foreign key</link>s.</entry>
</list>

Sequential and ISAM datasets could store either fixed-length or variable length records, and all types could occupy more than one disk volume.</p>
<p>

All of these are based on the <link xlink:type="simple" xlink:href="../605/2899605.xml">
VTOC</link> disk structure.</p>
<p>

Early IBM <link xlink:type="simple" xlink:href="../513/8513.xml">
database management system</link>s used various combinations of ISAM and BDAM datasets - usually BDAM for the actual data storage and ISAM for indexes.</p>
<p>

In the early 1970s IBM's <link xlink:type="simple" xlink:href="../354/32354.xml">
virtual memory</link> operating systems introduced a new file management component, <link xlink:type="simple" xlink:href="../497/316497.xml">
VSAM</link>, which provided similar facilities:
<list>
<entry level="1" type="bullet">

 Entry-Sequenced Datasets (ESDS) provided facilities similar to those of both sequential and BDAM datasets, since they could be read either from start to finish or directly by specifying an offset from the start.</entry>
<entry level="1" type="bullet">

 Key-Sequenced Datasets (KSDS) were a major upgrade from ISAM: they allowed secondary keys with non-unique values and keys formed by concatenating non-contiguous fields in any order; they greatly reduced the performance problems caused by <link xlink:type="simple" xlink:href="../475/41475.xml">
overflow</link>&#91;&#93; records in ISAM; and they greatly reduced the risk that a software or hardware failure in the middle of an index update might corrupt the index.</entry>
</list>
</p>
<p>

These VSAM formats became the basis of IBM's <link xlink:type="simple" xlink:href="../513/8513.xml">
database management systems</link>, <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<engine wordnetid="103287733" confidence="0.8">
<motor wordnetid="103789946" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<machine wordnetid="103699975" confidence="0.8">
<link xlink:type="simple" xlink:href="../260/391260.xml">
IMS/VS</link></machine>
</device>
</motor>
</engine>
</instrumentality>
</artifact>
</system>
 and <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../983/142983.xml">
DB2</link></instrumentality>
</artifact>
</system>
 - usually ESDS for the actual data storage and KSDS for indexes.</p>
<p>

VSAM also included a catalog component which was used for MVS' master catalog.</p>
<p>

Partitioned datasets (PDS) were sequential datasets which were subdivided into "members" which could be processed as sequential files in their own right. The most important use of PDS was for program libraries - system administrators used the main PDS as a way to allocate disk space to a project and the project team then created and edited the members.</p>
<p>

Generation Data Groups (GDGs) were originally designed to support <link xlink:type="simple" xlink:href="../031/1107031.xml">
 grandfather-father-son backup procedures</link> - if a file was modified, the changed version became the new "son", the previous "son" became the "father", the previous "father" became the "grandfather" and the previous "grandfather" was deleted. But one could set up GDGs with a lot more than 3 generations and some applications used GDGs to collect data from several sources and feed the information to one program - each collecting program created a new generation of the file and the final program read the whole group as a single sequential file (by not specifying a generation in the <link xlink:type="simple" xlink:href="../011/2835011.xml">
JCL</link>).</p>
<p>

Modern versions of MVS (i.e. z/OS) also support POSIX-compatible "slash" filesystems along with facilities for integrating the two filesystems. That is, the OS can make an MVS dataset appear as a file to a POSIX program or subsystem.  These newer filesystems include Hierarchical File System (HFS) (not to be confused with Apple's <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../347/55347.xml">
Hierarchical File System</link></instrumentality>
</artifact>
</system>
) and <link xlink:type="simple" xlink:href="../456/1199456.xml">
zFS</link> (not to be confused with Sun's ZFS).</p>

</sec>
<sec>
<st>
History and modernity</st>
<p>

MVS is no longer supported by IBM. In fact, IBM phased out support for the 31-bit compatible versions of z/OS in 2007, so only the 64-bit z/OS versions still are supported.  z/OS continues to be developed to extend its capabilities.  In addition to those enhancements mentioned above, others include:</p>
<p>

<list>
<entry level="1" type="bullet">

 XML (<structure wordnetid="104341686" confidence="0.8">
<software wordnetid="106566077" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<area wordnetid="102735688" confidence="0.8">
<program wordnetid="106568978" confidence="0.8">
<library wordnetid="103660909" confidence="0.8">
<written_communication wordnetid="106349220" confidence="0.8">
<writing wordnetid="106359877" confidence="0.8">
<code wordnetid="106355894" confidence="0.8">
<coding_system wordnetid="106353757" confidence="0.8">
<parser wordnetid="106577369" confidence="0.8">
<room wordnetid="104105893" confidence="0.8">
<link xlink:type="simple" xlink:href="../465/93465.xml">
Xerces</link></room>
</parser>
</coding_system>
</code>
</writing>
</written_communication>
</library>
</program>
</area>
</artifact>
</software>
</structure>
-based toolkits for C/C++ and Java)</entry>
<entry level="1" type="bullet">

 network file systems</entry>
<entry level="2" type="bullet">

 <message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<link xlink:type="simple" xlink:href="../252/51252.xml">
NFS</link></rule>
</direction>
</protocol>
</message>
 Version 4</entry>
<entry level="2" type="bullet">

 CIFS/<message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<link xlink:type="simple" xlink:href="../873/349873.xml">
SMB</link></rule>
</direction>
</protocol>
</message>
</entry>
<entry level="1" type="bullet">

 <message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<standard wordnetid="107260623" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../813/187813.xml">
TLS/SSL</link></system_of_measurement>
</rule>
</direction>
</standard>
</protocol>
</message>
 support throughout (including the TCP/IP stack level)</entry>
<entry level="1" type="bullet">

 removal of previous architectural limits (such as the number of I/O channels)</entry>
<entry level="1" type="bullet">

 encrypting file systems</entry>
<entry level="1" type="bullet">

 Workload Manager (WLM)</entry>
<entry level="1" type="bullet">

 special Java acceleration (<link xlink:type="simple" xlink:href="../754/1205754.xml">
zAAP</link> support)</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../313/5782313.xml">
HiperSocket</link></entry>
</list>
</p>
<p>

While z/OS continues to run older 24-bit MVS applications, it does so alongside just written 64-bit hardware-accelerated Java running with state-of-the-art security and Unicode XML data formats on protected filesystems with flexible mounting and long filenames, communicating across <message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<link xlink:type="simple" xlink:href="../318/15318.xml">
IPv6</link></rule>
</direction>
</protocol>
</message>
 Hipersocket virtual networks and/or high speed CFs to 64-bit geographically clustered relational databases that use the latest performance-enhancing SQL features including materialized query tables and cube views&nbsp;&mdash; for example.</p>

</sec>
<sec>
<st>
See also</st>
<p>

<list>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../374/55374.xml">
Hercules</link> a S/370, S/390, and zSeries emulator capable of running MVS</entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../999/1272999.xml">
Utility programs</link> supplied with MVS (and successor) operating systems</entry>
</list>
</p>

</sec>
<sec>
<st>
References</st>
<p>

<list>
<entry level="1" type="bullet">

 Bob DuCharme: "The Operating Systems Handbook, Part 06: MVS" (available online <weblink xlink:type="simple" xlink:href="http://www.snee.com/bob/opsys.html">
here</weblink>)</entry>
</list>
</p>

</sec>
<sec>
<st>
 External links </st>
<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www-03.ibm.com/servers/eserver/zseries/zos/bkserv/r8pdf/mvs.html">
IBM: z/OS V1R8.0 MVS manuals</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.os390-mvs.freesurf.fr/mvs.htm">
MVS: the operating system that keeps the world going</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.os390-mvs.freesurf.fr/mvshist.htm">
MVS... a long history</weblink></entry>
</list>
</p>


</sec>
</bdy>
</article>
