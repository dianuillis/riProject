<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 16:30:20[mciao0826] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>Markov algorithm</title>
<id>198156</id>
<revision>
<id>236161653</id>
<timestamp>2008-09-04T03:02:30Z</timestamp>
<contributor>
<username>Dysmorodrepanis</username>
<id>303688</id>
</contributor>
</revision>
<categories>
<category>Theory of computation</category>
</categories>
</header>
<bdy>

A <b><person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../915/915.xml">
Markov</link></scientist>
</person>
 algorithm</b> is a <link xlink:type="simple" xlink:href="../154/2452154.xml">
string rewriting system</link> that uses <link xlink:type="simple" xlink:href="../569/12569.xml">
grammar</link>-like rules to operate on <link xlink:type="simple" xlink:href="../701/27701.xml">
strings</link> of symbols. Markov algorithms have been shown to be <link xlink:type="simple" xlink:href="../621/30621.xml">
Turing-complete</link>, which means that they are suitable as a general model of <link xlink:type="simple" xlink:href="../926/5926.xml">
computation</link> and can represent any <link xlink:type="simple" xlink:href="../125/609125.xml">
mathematical expression</link> from its simple notation.<p>

<programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../151/14926151.xml">
Refal</link></programming_language>
 is a <link xlink:type="simple" xlink:href="../015/23015.xml">
programming language</link> based on <b>Markov algorithm</b>.</p>

<sec>
<st>
Algorithm</st>
<p>

<list>
<entry level="1" type="number">

Check the Rules in order from top to bottom to see whether any of the strings to the left of the arrow can be found in the Symbol string.</entry>
<entry level="1" type="number">

If none is found, stop executing the Algorithm.</entry>
<entry level="1" type="number">

If one or more is found, replace the leftmost matching text in the Symbol string with the text to the right of the arrow in the first corresponding Rule.</entry>
<entry level="1" type="number">

If the applied rule was a terminating one, stop executing the Algorithm.</entry>
<entry level="1" type="number">

Return to step 1 and carry on.</entry>
</list>
</p>

</sec>
<sec>
<st>
Example</st>
<p>

The following example shows the basic operation of a Markov algorithm.</p>

<ss1>
<st>
Rules</st>
<p>

<list>
<entry level="1" type="number">

"A" -&amp;gt; "apple"</entry>
<entry level="1" type="number">

"B" -&amp;gt; "bag"</entry>
<entry level="1" type="number">

"S" -&amp;gt; "shop"</entry>
<entry level="1" type="number">

"T" -&amp;gt; "the"</entry>
<entry level="1" type="number">

"the shop" -&amp;gt; "my brother"</entry>
<entry level="1" type="number">

"a never used" -&amp;gt; <b>.</b>"terminating rule"</entry>
</list>
</p>

</ss1>
<ss1>
<st>
Symbol string</st>
<p>

"I bought a B of As from T S."</p>

</ss1>
<ss1>
<st>
Execution</st>
<p>

If the algorithm is applied to the above example, the Symbol string will change in the following manner.</p>
<p>

<list>
<entry level="1" type="number">

"I bought a B of apples from T S."</entry>
<entry level="1" type="number">

"I bought a bag of apples from T S."</entry>
<entry level="1" type="number">

"I bought a bag of apples from T shop."</entry>
<entry level="1" type="number">

"I bought a bag of apples from the shop."</entry>
<entry level="1" type="number">

"I bought a bag of apples from my brother."</entry>
</list>
</p>
<p>

The algorithm will then terminate.</p>

</ss1>
</sec>
<sec>
<st>
Another Example</st>

<p>

These rules give a more interesting example. They rewrite binary numbers to their unary counterparts. For example: 101 will be rewritten to a string of 5 consecutive bars.</p>

<ss1>
<st>
Rules</st>
<p>

<list>
<entry level="1" type="number">

"|0" -&amp;gt; "0||"</entry>
<entry level="1" type="number">

"1" -&amp;gt; "0|"</entry>
<entry level="1" type="number">

"0" -&amp;gt; ""</entry>
</list>
</p>

</ss1>
<ss1>
<st>
Symbol string</st>
<p>

"101"</p>

</ss1>
<ss1>
<st>
Execution</st>
<p>

If the algorithm is applied to the above example, it will terminate after the following steps.</p>
<p>

<list>
<entry level="1" type="number">

"0|01"</entry>
<entry level="1" type="number">

"00||1"</entry>
<entry level="1" type="number">

"00||0|"</entry>
<entry level="1" type="number">

"00|0|||"</entry>
<entry level="1" type="number">

"000|||||"</entry>
<entry level="1" type="number">

"00|||||"</entry>
<entry level="1" type="number">

"0|||||"</entry>
<entry level="1" type="number">

"|||||"</entry>
</list>
</p>

</ss1>
</sec>
<sec>
<st>
References</st>
<p>

<list>
<entry level="1" type="bullet">

 Caracciolo di Forino, A. <it>String processing languages and generalized Markov algorithms.</it> In Symbol manipulation languages and techniques, D. G. Bobrow (Ed.), North-Holland Publ. Co., Amsterdam, The Netherlands, 1968, pp. 191-206.</entry>
<entry level="1" type="bullet">

 <link>
Andrey Andreevich Markov (1903-1979)</link> 1960. <it>The Theory of Algorithms.</it> American Mathematical Society Translations, series 2, 15, 1-14.</entry>
</list>
</p>

</sec>
<sec>
<st>
External links</st>
<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.utilitymill.com/utility/markov_rewriter">
Online Markov algorithm interpreter</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://sourceforge.net/projects/markov">
 Markov algorithm interpreter</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://nic-nac-project.de/~jcm/index.php?nav=projects">
Markov algorithm interpreter</weblink></entry>
</list>

</p>

</sec>
</bdy>
</article>
