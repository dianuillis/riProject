<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 19:11:09[mciao0825] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<event  confidence="0.8" wordnetid="100029378">
<rule  confidence="0.8" wordnetid="105846932">
<act  confidence="0.8" wordnetid="100030358">
<psychological_feature  confidence="0.8" wordnetid="100023100">
<procedure  confidence="0.8" wordnetid="101023820">
<activity  confidence="0.8" wordnetid="100407535">
<algorithm  confidence="0.8" wordnetid="105847438">
<header>
<title>Hash join</title>
<id>1983584</id>
<revision>
<id>242562727</id>
<timestamp>2008-10-02T19:20:11Z</timestamp>
<contributor>
<username>Darth Panda</username>
<id>580942</id>
</contributor>
</revision>
<categories>
<category>Database algorithms</category>
<category>Hashing</category>
</categories>
</header>
<bdy>

The <b>Hash join</b> is an example of a <link xlink:type="simple" xlink:href="../204/665204.xml">
join algorithm</link> and is used in the implementation of a <link xlink:type="simple" xlink:href="../873/25873.xml">
relational</link> <link xlink:type="simple" xlink:href="../513/8513.xml">
database management system</link>.<p>

The task of a join algorithm is to find, for each distinct value of the join attribute, the set of <link xlink:type="simple" xlink:href="../729/132729.xml">
tuple</link>s in each relation which have that value.</p>
<p>

The classic hash join algorithm for an <link>
inner join</link> of two relations proceeds as follows: first prepare a <link xlink:type="simple" xlink:href="../833/13833.xml">
hash table</link> for the smaller relation, by applying a <link xlink:type="simple" xlink:href="../790/13790.xml">
hash function</link> to the join attribute of each row. Then scan the larger relation and find the relevant rows by looking in the <link xlink:type="simple" xlink:href="../833/13833.xml">
hash table</link>. The first phase is usually called the "build" phase, while the second is called the "probe" phase. Similarly, the join relation on which the hash table is built is called the "build" input, whereas the other input is called the "probe" input.</p>
<p>

This algorithm is simple, but it requires that the smaller join relation fits into memory, which is typically not the case. A simple approach to handling this situation proceeds as follows:</p>
<p>

<list>
<entry level="1" type="number">

 For each tuple <math>r</math> in the build input <math>R</math></entry>
<entry level="2" type="number">

 Add <math>r</math> to the in-memory hash table</entry>
<entry level="2" type="number">

 If the size of the hash table equals the maximum in-memory size:</entry>
<entry level="3" type="number">

 Scan the probe input <math>S</math>, and add matching join tuples to the output relation</entry>
<entry level="3" type="number">

 Reset the hash table</entry>
<entry level="1" type="number">

 Do a final scan of the probe input <math>S</math> and add the resulting join tuples to the output relation</entry>
</list>
</p>
<p>

(This is essentially the same as the <link xlink:type="simple" xlink:href="../581/7806581.xml">
block nested loop</link> join algorithm.) This algorithm scans <math>S</math> more times than necessary. A better approach is known as the "grace hash join", after the GRACE database machine for which it was first implemented.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref> This algorithm avoids rescanning the entire <math>S</math> relation by first partitioning both <math>R</math> and <math>S</math> via a hash function, and writing these partitions out to disk. The algorithm then loads pairs of partitions into memory, builds a hash table for the smaller partitioned relation, and probes the other relation for matches with the current hash table. Because the partitions were formed by hashing on the join key, it must be the case that any join output tuples must belong to the same partition. It is possible that one or more of the partitions still does not fit into the available memory, in which case the algorithm is recursively applied: an additional orthogonal hash function is chosen to hash the large partition into sub-partitions, which are then processed as before. Since this is expensive, the algorithm tries to reduce the chance that it will occur by forming as many partitions as possible during the initial partitioning phase.</p>
<p>

The hybrid hash join algorithm<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%222%22])">2</ref> is a refinement of the grace hash join which takes advantage of more available memory. During the partitioning phase, the hybrid hash join uses the available memory for two purposes:
<list>
<entry level="1" type="number">

 To hold the current output buffer page for each of the <math>k</math> partitions</entry>
<entry level="1" type="number">

 To hold an entire partition in-memory, known as "partition 0"</entry>
</list>

Because partition 0 is never written to or read from disk, the hybrid hash join typically performs fewer I/O operations than the grace hash join. Note that this algorithm is memory-sensitive, because there are two competing demands for memory (the hash table for partition 0, and the output buffers for the remaining partitions). Choosing too large a hash table might cause the algorithm to recurse because one of the non-zero partitions is too large to fit into memory.</p>
<p>

Hash joins require an equi-join predicate (a predicate comparing values from one table with values from the other table using the equals operator '='). Hash joins can also be evaluated for an anti-join predicate (a predicate selecting values from one table when no related values are found in the other). Applying this algorithm proceeds as follows: first prepare a <link xlink:type="simple" xlink:href="../833/13833.xml">
hash table</link> for the 'not in' side of the join. Then scan the other table, selecting any rows where the join attribute hashes to an empty entry in the <link xlink:type="simple" xlink:href="../833/13833.xml">
hash table</link>.</p>

<sec>
<st>
References</st>
<p>

<reflist>
<entry id="1">
 <cite style="font-style:normal">Kitsuregawa, M.; Tanaka, H.; Moto-Oka, T.&#32;(1983).&#32;"Application of Hash to Data Base Machine and Its Architecture". <it>New Generation Computing</it>&#32;<b>1</b>&#32;(1): 63–74.</cite>&nbsp;</entry>
<entry id="2">
 <cite style="font-style:normal">DeWitt, D.J.; Katz, R.; Olken, F.; Shapiro, L.; Stonebraker, M.; Wood, D.&#32;(June 1984).&#32;"Implementation techniques for main memory database systems". <it>Proc. ACM SIGMOD Conf</it>&#32;<b>14</b>&#32;(4): 1–8. <document wordnetid="106470073" confidence="0.8">
<written_communication wordnetid="106349220" confidence="0.8">
<writing wordnetid="106362953" confidence="0.8">
<link xlink:type="simple" xlink:href="../994/422994.xml">
doi</link></writing>
</written_communication>
</document>
:<weblink xlink:type="simple" xlink:href="http://dx.doi.org/10.1145%2F971697.602261">
10.1145/971697.602261</weblink>.</cite>&nbsp;</entry>
</reflist>
</p>

</sec>
<sec>
<st>
External links</st>
<p>

<list>
<entry level="1" type="bullet">

  <cite id="CITEREFHansj.C3.B6rg_ZellerJim_Gray1990" style="font-style:normal">Hansjörg Zeller&#32;&amp;&#32;<link>
Jim Gray</link>&#32;(1990),&#32;"<weblink xlink:type="simple" xlink:href="http://www.sigmod.org/vldb/conf/1990/P186.PDF">
An Adaptive Hash Join Algorithm for Multiuser Environments</weblink>",&#32;<it>Proceedings of the 16th VLDB conference</it>&#32;(Brisbane):  186–197, .&#32;Retrieved on 20 September 2008</cite>&nbsp; </entry>
</list>


</p>

</sec>
</bdy>
</algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</article>
