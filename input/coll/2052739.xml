<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 19:14:35[mciao0825] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<system  confidence="0.8" wordnetid="104377057">
<artifact  confidence="0.8" wordnetid="100021939">
<instrumentality  confidence="0.8" wordnetid="103575240">
<header>
<title>Filesystem API</title>
<id>2052739</id>
<revision>
<id>223050487</id>
<timestamp>2008-07-02T10:23:43Z</timestamp>
<contributor>
<username>MER-C</username>
<id>1749459</id>
</contributor>
</revision>
<categories>
<category>Articles with invalid date parameter in template</category>
<category>Computer file systems</category>
<category>Application programming interfaces</category>
<category>Accuracy disputes from March 2008</category>
<category>Wikipedia articles needing rewrite</category>
</categories>
</header>
<bdy>

<table class="metadata plainlinks ambox ">
<row>
<col>

ambox-content" style=""</col>
</row>
<row>
<col class="mbox-image"><p>

<image width="40px" src="Crystal_Clear_app_kedit.svg">
<caption>

Notepad
</caption>
</image>
</p>
</col>
<col style="" class="mbox-text">
 <b>To comply with Wikipedia's , this article may need to be rewritten.</b>
Please help <weblink xlink:type="simple" xlink:href="http://localhost:18088/wiki/index.php?title=Filesystem_API&amp;action=edit">
improve this article</weblink>. The may contain suggestions.</col>
</row>
</table>

<p>

<table class="metadata plainlinks ambox ">
<row>
<col>

ambox-content" style=""</col>
</row>
<row>
<col class="mbox-image"><p>

<image width="40x40px" src="Ambox_content.png">
</image>
</p>
</col>
<col style="" class="mbox-text">
 <b>The factual accuracy of this article is .</b></col>
</row>
</table>


A <b><link xlink:type="simple" xlink:href="../280/1010280.xml">
file system</link> API</b> is an <link xlink:type="simple" xlink:href="../ury/24th_century.xml">
application programming interface</link> through which an <link xlink:type="simple" xlink:href="../194/22194.xml">
operating system</link> interfaces with file system code. The operating system usually provides abstractions for accessing different file systems transparently to <link xlink:type="simple" xlink:href="../647/10549647.xml">
userland</link> programs, and in this sense it is analogous to <link xlink:type="simple" xlink:href="../101/9101.xml">
device driver</link> APIs that provide abstracted access to hardware.</p>
<p>

Some file system APIs may also include interfaces for maintenance operations, such as creating or initializing a file system, verifying the file system for integrity, and <link xlink:type="simple" xlink:href="../339/360339.xml">
defragmentation</link> &ndash; although these are more often implemented independently from the file system code.</p>
<p>

<link xlink:type="simple" xlink:href="../890/18890.xml">
Microsoft Windows</link> <family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../438/33438.xml">
NT</link></family>
, <version wordnetid="107173585" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../941/33941.xml">
2000</link></version>
, and <version wordnetid="107173585" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../879/33879.xml">
XP</link></version>
 have a <information wordnetid="105816287" confidence="0.8">
<datum wordnetid="105816622" confidence="0.8">
<link xlink:type="simple" xlink:href="../316/957316.xml">
default</link></datum>
</information>
 file system API known as a file system driver for the <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../184/39184.xml">
NTFS</link></instrumentality>
</artifact>
</system>
, <link xlink:type="simple" xlink:href="../045/53045.xml">
FAT</link> and FAT32 file systems.</p>

<sec>
<st>
History</st>


<p>

Originally, operating systems were capable of handling only a disk filesystem, but as systems expanded two problems arose:
<list>
<entry level="1" type="bullet">

 Network shares were required to appear to the user as local disks.</entry>
<entry level="1" type="bullet">

 Users wanted to exchange files with other users that might be running another operating system.</entry>
</list>
</p>

<p>

In the old scheme, all filesystems and network protocols are specific to the operating system's kernel and when the user tried to access a file, it was the kernel that knew how the filesystem or network protocol worked.</p>

<p>

This scheme means that adding support for a filesystem requires a major kernel rewrite. This isn't very efficient, so operating systems designers thought about separating the specific filesystem code from the file and network handling code of the kernel, and filesystem APIs resulted.</p>

</sec>
<sec>
<st>
Kernel-level API</st>

<p>

The API is "kernel-level" when the kernel not only provides the interfaces for the filesystems developers but is also the space in which the filesystem code reside.</p>
<p>

It differs with the old schema in that the kernel itself uses its own facilities to talk with the filesystem driver and vice-versa, as contrary to the kernel being the one that handles the filesystem layout and the filesystem the one that directly access the hardware.</p>
<p>

It isn't the cleanest scheme but resolves the difficulties of major rewrite that has the old scheme.</p>
<p>

With modular kernels it allows adding filesystems as any kernel module, even third party ones. With non-modular kernels however it requires the kernel to be recompiled with the new filesystem code (and in closed-source kernels, this makes third party filesystem impossible).</p>
<p>

<family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../642/31642.xml">
Unix</link></family>
es and <family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../815/31815.xml">
Unix-like</link></family>
 systems such as <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../297/6097297.xml">
Linux</link></O>
 have used this scheme.</p>
<p>

There is a variation of this scheme used in <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../027/20027.xml">
MS-DOS</link></O>
 (DOS 4.0 onward) and compatibles to support CD-ROM and network filesystems. Instead of adding code to the kernel, as in the old scheme, or using kernel facilities as in the kernel-based scheme, it traps all calls to a file and identifies if it should be redirected to the kernel's equivalent function or if it has to be handled by the specific filesystem driver, and the filesystem driver "directly" access the disk contents using low-level <generic wordnetid="107899976" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../473/Form_4473.xml">
BIOS</link></generic>
 functions.</p>

</sec>
<sec>
<st>
Driver-based API</st>

<p>

The API is "driver-based" when the kernel provides facilities but the filesystem code resides totally external to the kernel (not even as a module of a modular kernel).</p>
<p>

It is a cleaner scheme as the filesystem code is totally independent, it allows filesystems to be created for closed-source kernels and online filesystem additions or removals from the system.</p>
<p>

Examples of this scheme are the <family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../438/33438.xml">
Windows NT</link></family>
 and <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../409/22409.xml">
OS/2</link></O>
 respective <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../509/654509.xml">
IFSs</link></instrumentality>
</artifact>
</system>
.</p>

</sec>
<sec>
<st>
Mixed kernel-driver-based API</st>

<p>

In this API all filesystems are in the kernel, like in kernel-based APIs, but they are automatically trapped by another API, that is driver-based, by the OS.</p>
<p>

This scheme was used in <structure wordnetid="104341686" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<window wordnetid="104587648" confidence="0.8">
<supporting_structure wordnetid="104361095" confidence="0.8">
<framework wordnetid="103391770" confidence="0.8">
<link xlink:type="simple" xlink:href="../311/168311.xml">
Windows 3.1</link></framework>
</supporting_structure>
</window>
</artifact>
</structure>
 for providing a FAT filesystem driver in 32-bit protected mode, and cached, (VFAT) that bypassed the DOS FAT driver in the kernel (MSDOS.SYS) completely, and later in the Windows 9x series (<version wordnetid="107173585" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../064/34064.xml">
95</link></version>
, <version wordnetid="107173585" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../433/75433.xml">
98</link></version>
 and <version wordnetid="107173585" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../458/75458.xml">
Me</link></version>
) for VFAT, the ISO9660 filesystem driver (along with Joliet), network shares, and third party filesystem drivers, as well as adding to the original DOS APIs the LFN API (that IFS drivers can not only intercept the already existent DOS file APIs but also add new ones from within the 32-bit protected mode executable).</p>
<p>

However that API was not completely documented, and third parties found themselves in a "make-it-by-yourself" scenario even worse than with kernel-based APIs.</p>

</sec>
<sec>
<st>
User space API</st>

<p>

The API is in the <link xlink:type="simple" xlink:href="../467/93467.xml">
user space</link> when the filesystem doesn't directly use kernel facilities but accesses disks using high-level operating system functions and provides functions in a <link xlink:type="simple" xlink:href="../421/106421.xml">
library</link> that a series of utilities use to access the filesystem.</p>
<p>

This is useful for handling disk images.</p>
<p>

The advantage is that a filesystem can be made portable between operating systems as the high-level operating system functions it uses can be as common as ANSI C, but the disadvantage is that the API is unique to each application that implements one.</p>
<p>

Examples of this scheme are the <weblink xlink:type="simple" xlink:href="http://www.mars.org/home/rob/proj/hfs/">
hfsutils</weblink> and the <weblink xlink:type="simple" xlink:href="http://lclevy.club.fr/adflib/adflib">
adflib</weblink>.</p>

</sec>
<sec>
<st>
Interoperatibility between filesystem APIs</st>

<p>

As all filesystems (at least the disk ones) need equivalent functions provided by the kernel, it is possible to easily port a filesystem code from one API to another, even if they are of different types.</p>
<p>

For example, the ext2 driver for OS/2 is simply a wrapper from the Linux's VFS to the OS/2's IFS and the Linux's ext2 kernel-based, and the HFS driver for OS/2 is a port of the hfsutils to the OS/2's IFS. There also exists a project that uses a Windows NT IFS driver for making NTFS work under Linux.</p>

</sec>
<sec>
<st>
Bibliography</st>
<p>

<list>
<entry level="1" type="bullet">

 O'Reilly - Windows NT File System Internals, A Developer's Guide - By Rajeev Nagar - ISBN 1-56592-249-2</entry>
<entry level="1" type="bullet">

 Microsoft Press - Inside Windows NT File System - By Helen Custer - ISBN 1-55615-660-X</entry>
<entry level="1" type="bullet">

 Wiley - UNIX Filesystems: Evolution, Design, and Implementation - By Steve D. Pate - ISBN 0-471-16483-6</entry>
<entry level="1" type="bullet">

 Microsoft Press - Inside Windows NT - By Helen Custer - ISBN 1-55615-481-X</entry>
</list>
</p>

</sec>
<sec>
<st>
See also</st>
<p>

<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../280/1010280.xml">
File system</link></entry>
<entry level="1" type="bullet">

 <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../509/654509.xml">
Installable File System</link></instrumentality>
</artifact>
</system>
</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../342/3460342.xml">
Filing OSID</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../639/760639.xml">
List of file systems</link> </entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../051/5356051.xml">
Comparison of file systems</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../957/147957.xml">
Filename extension</link></entry>
<entry level="1" type="bullet">

 <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../131/351131.xml">
Virtual file system</link></instrumentality>
</artifact>
</system>
</entry>
</list>
</p>

</sec>
<sec>
<st>
External links</st>
<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.forensics.nl/filesystems">
Filesystem Specifications and Technical Whitepapers</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.tldp.org/LDP/khg/HyperNews/get/fs/vfstour.html">
A Tour of the Linux VFS</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.microsoft.com/whdc/devtools/ifskit/default.mspx">
Microsoft's IFSKit</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.developer.ibm.com/isv/tech/faq/individual?oid=2:17718">
IBM's information about IFS</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.mars.org/home/rob/proj/hfs/">
hfsutils</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://lclevy.club.fr/adflib/">
adflib</weblink></entry>
</list>
</p>


</sec>
</bdy>
</instrumentality>
</artifact>
</system>
</article>
