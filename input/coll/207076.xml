<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 16:30:05[mciao0825] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>Confused deputy problem</title>
<id>207076</id>
<revision>
<id>242414939</id>
<timestamp>2008-10-02T03:44:52Z</timestamp>
<contributor>
<username>Ultimus</username>
<id>1419150</id>
</contributor>
</revision>
<categories>
<category>Computer security</category>
</categories>
</header>
<bdy>

A <b>confused deputy</b> is a <link xlink:type="simple" xlink:href="../783/5783.xml">
computer program</link> that is innocently fooled by some other party into misusing its authority.  It is a specific type of <link xlink:type="simple" xlink:href="../621/744621.xml">
privilege escalation</link>. In <link xlink:type="simple" xlink:href="../036/15036.xml">
information security</link>, the <b>confused deputy problem</b> is often cited as an example of why <link xlink:type="simple" xlink:href="../717/539717.xml">
capability-based security</link> is important.
<sec>
<st>
Example</st>
<p>

In the original example of a confused deputy, there is a program that provides <link xlink:type="simple" xlink:href="../739/5739.xml">
compilation</link> services to other programs. The client program specifies the name of the input and output files, and the server is given the same access to those files that the client has. </p>
<p>

The compiler service is pay-per-use, and the compiler program has access to a file where it stores billing information. Let's say the name of this file is "BILL". Clients obviously cannot write into the billing file. </p>
<p>

Now suppose a client calls the service and specifies “BILL” as the name of the output file. The service opens the output file. Even though the client did not have access to that file, the server does, so the open succeeds, and the server writes the compilation output to the file, overwriting it, and thus destroying the billing information.</p>

</sec>
<sec>
<st>
The confused deputy</st>
<p>

In this example, the compilation service is the deputy because it is acting at the request of the client. It is confused because it was tricked into overwriting its billing file. </p>
<p>

Whenever a program tries to access a file, the operating system needs to know two things: which file the program is asking for, and whether the program has permission to access the file. In the example, the file is designated by its name, “BILL”. The server receives the file name from the client, but does not know whether the client had permission to write the file. When the server opens the file, the system uses the server’s permission, not the client’s. When the file name was passed from the client to the server, the permission did not go along with it; the permission was increased by the system silently and automatically. </p>

</sec>
<sec>
<st>
Other examples</st>
<p>

A <link xlink:type="simple" xlink:href="../682/1201682.xml">
cross-site request forgery</link> (CSRF) is an example of a confused deputy attack against a <link xlink:type="simple" xlink:href="../173/33173.xml">
Web browser</link>.  In this case a client's <link xlink:type="simple" xlink:href="../173/33173.xml">
Web browser</link> has no means to distinguish the authority of the client from any authority of a "cross" site that the client is accessing.</p>
<p>

An <accomplishment wordnetid="100035189" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<action wordnetid="100037396" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<feat wordnetid="100036762" confidence="0.8">
<link xlink:type="simple" xlink:href="../416/997416.xml">
FTP bounce attack</link></feat>
</psychological_feature>
</act>
</action>
</event>
</accomplishment>
 can allow an attacker to indirectly connect to TCP ports that the attacker's machine has no access to, using a remote <link xlink:type="simple" xlink:href="../289/53289.xml">
FTP</link> server as the confused deputy.</p>
<p>

Another example relates to personal firewall software. It can restrict internet access for specific applications. Some applications circumvent this by starting a browser with a specific URL. The browser has authority to open a network connection, even though the application does not. Firewall software can attempt to address this by prompting the user in cases where one program starts another which then accesses the network. However, the user frequently does not have sufficient information to determine whether such an access is legitimate -- false positives are common, and there is a substantial risk that even sophisticated users will become habituated to clicking 'ok' to these prompts.</p>
<p>

Not every program that misuses authority is a confused deputy. Sometimes misuse of authority is simply a result of a program error. The confused deputy problem occurs when the designation of an object is passed from one program to another, and the associated permission changes unintentionally, without any explicit action by either party. It is insidious because neither party did anything explicit to change the authority.</p>

</sec>
<sec>
<st>
Solutions</st>
<p>

In some systems, it is possible to ask the operating system to open a file using the permissions of another client. This solution has some drawbacks:
<list>
<entry level="1" type="bullet">

 It requires explicit attention to security by the server. A naive or careless server might not take this extra step. </entry>
<entry level="1" type="bullet">

 It becomes more difficult to identify the correct permission if the server is in turn the client of another service and wants to pass along access to the file. </entry>
<entry level="1" type="bullet">

 It requires the server to be trusted with the permissions of the client. Note that intersecting the server and client's permissions does not solve the problem either, because the server may then have to be given very wide permissions (all of the time, rather than those needed for a given request) in order to act for arbitrary clients.</entry>
</list>
</p>
<p>

The simplest way to solve the confused deputy problem is to bundle together the designation of an object and the permission to access that object. This is exactly what a <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<model wordnetid="110324560" confidence="0.8">
<assistant wordnetid="109815790" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link>
capability</link></causal_agent>
</worker>
</assistant>
</model>
</person>
</physical_entity>
 is. </p>
<p>

Using capability security in the compiler example, the client would pass to the server a capability to the output file, not the name of the file. Since it lacks a capability to the billing file, it cannot designate that file for output.  In the <link xlink:type="simple" xlink:href="../682/1201682.xml">
cross-site request forgery</link> example, a URL supplied "cross"-site would include its own authority independent of that of the client of the <link xlink:type="simple" xlink:href="../173/33173.xml">
Web browser</link> (for example, by using a <weblink xlink:type="simple" xlink:href="http://www.waterken.com/dev/YURL/">
YURL</weblink>).</p>

</sec>
<sec>
<st>
External links</st>

<p>

<list>
<entry level="1" type="bullet">

 Norman Hardy, <it>The Confused Deputy: (or why capabilities might have been invented)</it>, ACM SIGOPS Operating Systems Review, Volume 22, Issue 4 (October 1988).</entry>
<entry level="2" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://portal.acm.org/citation.cfm?id=871709">
http://portal.acm.org/citation.cfm?id=871709</weblink> official link to ACM published document.</entry>
<entry level="2" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://cap-lore.com/CapTheory/ConfusedDeputy.html">
http://cap-lore.com/CapTheory/ConfusedDeputy.html</weblink> link to document text on Norm Hardy's website.</entry>
<entry level="2" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.cis.upenn.edu/~KeyKOS/ConfusedDeputy.html">
http://www.cis.upenn.edu/~KeyKOS/ConfusedDeputy.html</weblink> link to document text on University of Pennsylvania's website.</entry>
<entry level="2" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://citeseer.ifi.unizh.ch/hardy94confused.html">
http://citeseer.ifi.unizh.ch/hardy94confused.html</weblink> citeseer cross reference.</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://cap-lore.com/CapTheory/">
Capability Theory</weblink> notes from several sources (collated by Norm Hardy).</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.everything2.com/index.pl?node=confused%20deputy">
Everything2: Confused Deputy</weblink> (some introductory level text).</entry>
</list>
</p>

</sec>
<sec>
<st>
See also</st>

<p>

<list>
<entry level="1" type="bullet">

 <event wordnetid="100029378" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<link xlink:type="simple" xlink:href="../629/1054629.xml">
Setuid</link></activity>
</procedure>
</psychological_feature>
</act>
</event>
 executables in Unix</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../539/9022539.xml">
Ambient authority</link></entry>
</list>
</p>


</sec>
</bdy>
</article>
