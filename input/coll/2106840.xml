<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 19:18:22[mciao0826] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<platform  confidence="0.8" wordnetid="103961939">
<artifact  confidence="0.8" wordnetid="100021939">
<surface  confidence="0.8" wordnetid="104362025">
<horizontal_surface  confidence="0.8" wordnetid="103536348">
<header>
<title>Run-time system</title>
<id>2106840</id>
<revision>
<id>228090211</id>
<timestamp>2008-07-26T23:28:14Z</timestamp>
<contributor>
<username>UnitedStatesian</username>
<id>3461395</id>
</contributor>
</revision>
<categories>
<category>Computing platforms</category>
<category>Computing terminology</category>
<category>Wikipedia articles needing context</category>
<category>Wikipedia introduction cleanup</category>
</categories>
</header>
<bdy>
<p>

<table class="metadata plainlinks ambox ">
<row>
<col>

ambox-style" style=""</col>
</row>
<row>
<col class="mbox-image"><p>

<image width="40x40px" src="Ambox_style.png">
</image>
</p>
</col>
<col style="" class="mbox-text">
 The introduction to this article provides <b>insufficient context</b> for those unfamiliar with the subject.
Please help <weblink xlink:type="simple" xlink:href="http://localhost:18088/wiki/index.php?title=Run-time_system&amp;action=edit">
improve the article</weblink> with a . <it>(April 2008)''</it></col>
</row>
</table>


In <link xlink:type="simple" xlink:href="../323/5323.xml">
computer science</link>, the <b>runtime system</b> is software that provides services for a running program but is itself not considered to be part of the operating system.</p>
<p>

Examples include:</p>
<p>

<list>
<entry level="1" type="bullet">

 the code that is generated by the compiler to manage the runtime stack.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 library code for handling memory management (for example, malloc).</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 code that handles dynamic loading and linking.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 debugger code that is generated at compile time or run time.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 application-level thread management code.</entry>
</list>
</p>
<p>

Byte-code interpreters and virtual machines can also be considered runtime systems.  Services that run in concurrent processes are more likely to be considered <link xlink:type="simple" xlink:href="../183/57183.xml">
middleware</link>.</p>

<sec>
<st>
 <platform wordnetid="103961939" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<surface wordnetid="104362025" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<tool wordnetid="104451818" confidence="0.8">
<horizontal_surface wordnetid="103536348" confidence="0.8">
<implement wordnetid="103563967" confidence="0.8">
<link xlink:type="simple" xlink:href="../402/60402.xml">
.NET Framework</link></implement>
</horizontal_surface>
</tool>
</instrumentality>
</surface>
</artifact>
</platform>
 </st>

<p>

The .NET Framework provides a run-time that is used to interpret intermediate code, code that is compiled from a development environment such as Microsoft’s Visual Studio when the language is C# or Visual Basic.NET.  The code requires the run-time in order to execute.  The code is referred to as “intermediate” because the result of the compilation is not a result that could be run at the machine level, or in other words to run without the aid of the run-time.  The run-time is a service process that provides the framework for the execution of the intermediate code.  The run-time acts as an interpreter of the intermediate code and then provides the structure for it to run on the operating system.  Lower level capabilities it provides includes memory management, process management, and I/O management.  In many cases the run-time is simply providing an abstraction level to the Windows API opening up nearly all of its capabilities to the programmer</p>
<p>

The purpose of a run-time is to support the use rapid application development languages, such as C# and Visual Basic.NET.  Highly capable run-times, such as the .NET Framework offer significant capabilities and access to the operating system and I/O.  This allows a developer to create a powerful application very quickly.</p>
<p>

Run-times are not necessarily striving for cross platform compatibility, while run-times such as Sun’s Java might.</p>
<p>

Scripting (meta) language interpreters act similar to a run-time, although the code for many scripting languages is not pre-compiled as they are in .NET languages.  Pre-compiling speeds up the act of loading the application into memory and also ensures a more compact executable file.</p>

</sec>
<sec>
<st>
 RSTS/E </st>

<p>

In the specific context of the <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../899/313899.xml">
RSTS</link></O>
 operating system, the <b>run-time system</b> (RTS) was a piece of resident code which was mapped into the high end of the address space of a process, which could be called on to provide services to a running program, or used as the command line interpreter (<shell wordnetid="104190464" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<ammunition wordnetid="102703275" confidence="0.8">
<weaponry wordnetid="104566257" confidence="0.8">
<link xlink:type="simple" xlink:href="../915/71915.xml">
CLI</link></weaponry>
</ammunition>
</instrumentality>
</artifact>
</shell>
) user interface.  The term in RSTS for a command line interpreter was <b>keyboard-monitor</b> (<shell wordnetid="104190464" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<ammunition wordnetid="102703275" confidence="0.8">
<weaponry wordnetid="104566257" confidence="0.8">
<link xlink:type="simple" xlink:href="../915/71915.xml">
KBM</link></weaponry>
</ammunition>
</instrumentality>
</artifact>
</shell>
).  This term should not be confused with the similar term <link xlink:type="simple" xlink:href="../829/57829.xml">
keystroke logging</link>.</p>
<p>

RSTS did not itself define any standard <link xlink:type="simple" xlink:href="../957/147957.xml">
filename extension</link> for an executable program file; instead, each installed RTS defined its own extension, and the appropriate RTS was loaded depending on the actual name of the program file. If the user issued a command to run a program without specifying the extension, then the system went through all installed RTSs, trying each corresponding extension in turn until it found the name of an existing program file.</p>
<p>

The actual responsibility for loading and executing the program was left to the run-time system; thus, users could run <link xlink:type="simple" xlink:href="../868/59868.xml">
interpreted</link> programs just as easily as ones that were <link xlink:type="simple" xlink:href="../739/5739.xml">
compiled</link> into actual <link xlink:type="simple" xlink:href="../683/20683.xml">
machine code</link>, provided that the interpreter was appropriately implemented as a run-time system. The standard <shell wordnetid="104190464" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<ammunition wordnetid="102703275" confidence="0.8">
<weaponry wordnetid="104566257" confidence="0.8">
<link xlink:type="simple" xlink:href="../705/617705.xml">
BASIC-PLUS</link></weaponry>
</ammunition>
</instrumentality>
</artifact>
</shell>
 RTS provided a compiler, interpreter and KBM all packed into just 32kiB of code. And indeed many of the standard system utility programs (including privileged ones like LOGIN and LOGOUT!) were written in BASIC-PLUS.</p>
<p>

Other RTSs provided partial <link xlink:type="simple" xlink:href="../558/1042558.xml">
emulation</link> facilities, allowing some simple programs written for the <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../309/69309.xml">
RT-11</link></O>
 and <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../342/62342.xml">
RSX-11</link></O>
 operating systems to run under RSTS.  An intereting note is that not all RTS's were designed as KBM's, however most all KBM's were implemented as RTS's.</p>
<p>

Under RSTS, the <link xlink:type="simple" xlink:href="../449/30449.xml">
TECO</link> editor was implemented as an RTS, though its KBM function was a stub which loaded a program with a predefined name which had to be provided by the user. This allowed the user to implement their own KBM.</p>
<p>

Even a version of the <event wordnetid="100029378" confidence="0.8">
<social_event wordnetid="107288639" confidence="0.8">
<contest wordnetid="107456188" confidence="0.8">
<game wordnetid="100456199" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<link xlink:type="simple" xlink:href="../337/74337.xml">
Space Invaders</link></psychological_feature>
</game>
</contest>
</social_event>
</event>
 video arcade game was eventually implemented as a multi-user RTS (driving <artifact wordnetid="100021939" confidence="0.8">
<terminal wordnetid="104412901" confidence="0.8">
<facility wordnetid="103315023" confidence="0.8">
<station wordnetid="104306080" confidence="0.8">
<link xlink:type="simple" xlink:href="../619/1220619.xml">
VT52</link></station>
</facility>
</terminal>
</artifact>
 video terminals).</p>

</sec>
<sec>
<st>
 See also </st>

<p>

<list>
<entry level="1" type="bullet">

 <platform wordnetid="103961939" confidence="0.8">
<structure wordnetid="104341686" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<surface wordnetid="104362025" confidence="0.8">
<area wordnetid="102735688" confidence="0.8">
<horizontal_surface wordnetid="103536348" confidence="0.8">
<library wordnetid="103660909" confidence="0.8">
<room wordnetid="104105893" confidence="0.8">
<link xlink:type="simple" xlink:href="../263/192263.xml">
Runtime</link></room>
</library>
</horizontal_surface>
</area>
</surface>
</artifact>
</structure>
</platform>
</entry>
</list>
</p>



</sec>
</bdy>
</horizontal_surface>
</surface>
</artifact>
</platform>
</article>
