<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 16:32:52[mciao0827] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>Stateful firewall</title>
<id>214257</id>
<revision>
<id>234853043</id>
<timestamp>2008-08-28T20:36:36Z</timestamp>
<contributor>
<username>Clintheacock66</username>
<id>1598932</id>
</contributor>
</revision>
<categories>
<category>Computer network security</category>
<category>Wikipedia articles needing clarification</category>
</categories>
</header>
<bdy>

In <link xlink:type="simple" xlink:href="../213/5213.xml">
computing</link>, a <b>stateful firewall</b> (any firewall that performs <b>stateful packet inspection</b> (<b>SPI</b>) or <b>stateful inspection</b>) is a <link xlink:type="simple" xlink:href="../296/1362296.xml">
firewall</link> that keeps track of the state of network connections (such as <link xlink:type="simple" xlink:href="../538/30538.xml">
TCP</link> streams, <message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<standard wordnetid="107260623" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../929/31929.xml">
UDP</link></system_of_measurement>
</rule>
</direction>
</standard>
</protocol>
</message>
 communication) traveling across it.  The firewall is programmed to distinguish legitimate packets for different types of connections.  Only packets matching a known connection state will be allowed by the firewall; others will be rejected.<p>

Early attempts at producing firewalls operated at the <link xlink:type="simple" xlink:href="../179/172179.xml">
application level</link> of the <link xlink:type="simple" xlink:href="../747/22747.xml">
seven-layer OSI model</link> but this required too much CPU speed. <link xlink:type="simple" xlink:href="../296/1362296.xml">
Packet filter</link>s operate at the network layer (layer-3) and function more efficiently because they only look at the <link xlink:type="simple" xlink:href="../401/472401.xml">
header</link> part of a <unit_of_measurement wordnetid="113583724" confidence="0.8">
<definite_quantity wordnetid="113576101" confidence="0.8">
<link xlink:type="simple" xlink:href="../734/43734.xml">
packet</link></definite_quantity>
</unit_of_measurement>
. However, pure packet filters have no concept of state as defined by <link xlink:type="simple" xlink:href="../323/5323.xml">
computer science</link> using the term <link xlink:type="simple" xlink:href="../931/10931.xml">
finite state machine</link> and are subject to <link xlink:type="simple" xlink:href="../209/503209.xml">
spoofing attack</link>s and other <link xlink:type="simple" xlink:href="../875/9875.xml">
exploits</link>. </p>

<sec>
<st>
History</st>
<p>

Before the advent of stateful firewalls, a <it>stateless firewall</it>, a <link xlink:type="simple" xlink:href="../296/1362296.xml">
firewall</link> that treats each <link xlink:type="simple" xlink:href="../172/41172.xml">
network frame</link> (or <unit_of_measurement wordnetid="113583724" confidence="0.8">
<definite_quantity wordnetid="113576101" confidence="0.8">
<link xlink:type="simple" xlink:href="../734/43734.xml">
packet</link></definite_quantity>
</unit_of_measurement>
) in isolation, was normal. Such a firewall has no way of knowing if any given packet is part of an existing connection, is trying to establish a new connection, or is just a rogue packet. Modern firewalls are connection-aware (or state-aware), affording network administrators finer-grained control of network traffic.</p>
<p>

The classic example is the <link xlink:type="simple" xlink:href="../289/53289.xml">
File Transfer Protocol</link>, because by design it opens new connections to arbitrary ports. FTP, among other protocols, needs to be able to open connections to arbitrary high ports to function properly. Since a firewall has no way of knowing that the packet destined to the protected network, to some host's port 4970, is part of a legitimate FTP session, it will drop the packet. <link xlink:type="simple" xlink:href="../257/214257.xml">
Stateful firewall</link>s solve this problem by maintaining a table of open connections and intelligently associating new connection requests with existing legitimate connections.</p>

</sec>
<sec>
<st>
 Description </st>
<p>

A stateful firewall is able to hold in memory significant attributes of each connection, from start to finish.
These attributes, which are collectively known as the state of the connection, may include such details as the IP addresses and ports involved in the connection and the sequence numbers of the packets traversing the connection. 
The most CPU intensive checking is performed at the time of setup of the connection. 
All packets after that (for that session) are processed rapidly because it is simple and fast to determine whether it belongs to an existing, pre-screened session. Once the session has ended, its entry in the state-table is discarded. </p>
<p>

The stateful firewall depends on the famous three-way handshake of the TCP protocol.  
When a client initiates a new connection, it sends a packet with the SYN bit set in the <unit_of_measurement wordnetid="113583724" confidence="0.8">
<definite_quantity wordnetid="113576101" confidence="0.8">
<link xlink:type="simple" xlink:href="../734/43734.xml">
packet</link></definite_quantity>
</unit_of_measurement>
 <link xlink:type="simple" xlink:href="../401/472401.xml">
header</link>.  
All packets with the SYN bit set are considered by the firewall as NEW connections.  
If the service which the client has requested is available on the server, the service will reply to the SYN packet with a packet in which both the SYN and the ACK bit are set.  
The client will then respond with a packet in which only the ACK bit is set, and the connection will enter the ESTABLISHED state.  
Such a firewall will pass all outgoing packets through but will only allow incoming packets if they are part of an ESTABLISHED connection, ensuring that <link xlink:type="simple" xlink:href="../497/997497.xml">
hacker</link>s cannot start unsolicited connections with the protected machine.</p>
<p>

In order to prevent the state table from filling up, sessions will time out if no traffic has passed for a certain period. 
These stale connections are removed from the state table. Many applications therefore send <link xlink:type="simple" xlink:href="../350/1356350.xml">
keepalive</link> messages periodically in order to stop a firewall from dropping the connection during periods of no user-activity, though some firewalls can be instructed to send these messages for applications. 
It is worth noting that the most common <link xlink:type="simple" xlink:href="../776/39776.xml">
Denial of Service</link> attack on the internet these days is the <operation wordnetid="100955060" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<attack wordnetid="100972621" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<link xlink:type="simple" xlink:href="../095/236095.xml">
SYN flood</link></activity>
</psychological_feature>
</act>
</attack>
</event>
</operation>
, where a malicious user intentionally sends large amounts of SYN packets to the server in order to overflow its state table, thus blocking the server from accepting other connections.</p>
<p>

Many stateful firewalls are able to track the state of flows in connectionless protocols, like UDP. 
Such sessions usually get the ESTABLISHED state immediately after the first packet is seen by the firewall. 
Sessions in connectionless protocols can only end by time-out.</p>
<p>

By keeping track of the connection state, stateful firewalls provide added efficiency in terms of packet inspection.  
This is because for existing connections the firewall need only check the state table, instead of checking the packet against the firewall's rule set, which can be extensive.  
There is also an additional cost when the firewall's rule set is updated, which should cause the state table to be flushed.  
Also, the concept of <link xlink:type="simple" xlink:href="../995/454995.xml">
deep packet inspection</link> is unrelated to stateful firewalls&#91;&#93; / here the user data in the packet are inspected and as such it is application layer firewall /</p>

</sec>
<sec>
<st>
 Application-level filters </st>
<p>

However, packet filtering alone is not regarded as providing enough protection. In order to effectively block <link xlink:type="simple" xlink:href="../107/24107.xml">
peer-to-peer</link>-related network traffic, what is needed is a firewall that does <it>application filtering</it>, which can be regarded as an extension to stateful packet inspection. Stateful packet inspection can determine what type of protocol is being sent over each port, but application-level filters look at what a protocol is being used for. For example, an application-level filter might be able to tell the difference between HTTP traffic used to access a Web page and HTTP traffic used for file sharing, whereas a firewall that is only performing packet filtering would treat all HTTP traffic equally.</p>
<p>

Application-layer firewalls differ from stateful packet-filtering and circuit-level gateways in several ways. Application-layer firewalls support multiple application <link xlink:type="simple" xlink:href="../049/84049.xml">
proxies</link> on a single firewall. The proxies sit between the client and server, passing data between the two endpoints. Suspicious data is dropped and the client and server never communicate directly with each other. Because application-level proxies are application-aware, the proxies can more easily handle complex protocols like <message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<proposal wordnetid="107162194" confidence="0.8">
<recommendation wordnetid="106671637" confidence="0.8">
<advice wordnetid="106671484" confidence="0.8">
<link xlink:type="simple" xlink:href="../116/6312116.xml">
H.323</link></advice>
</recommendation>
</proposal>
</rule>
</direction>
</protocol>
</message>
, which is used for videoconferencing and <link xlink:type="simple" xlink:href="../028/75028.xml">
VoIP</link> (voice over IP). Application proxies can be transparent to the client and server, as no configuration is required on the client or the server; or can be nontransparent, letting the client and server address the proxy server directly. Transparency versus non transparency is a matter of implementation and address hiding, rather than about security.</p>

</sec>
<sec>
<st>
Pitfalls</st>
<p>

Microsoft's latest operating system, <version wordnetid="107173585" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../648/2289648.xml">
Windows Vista</link></version>
, uses <message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<link xlink:type="simple" xlink:href="../525/5747525.xml">
TCP window scaling</link></rule>
</direction>
</protocol>
</message>
 for non-<link xlink:type="simple" xlink:href="../443/13443.xml">
http</link> (web) connections. So do Linux kernels from versions 2.6.8 on. This behavior is incompatible with some <link xlink:type="simple" xlink:href="../296/1362296.xml">
firewalls</link> that use SPI (Stateful Packet Inspection) as found in routers like the Checkpoint NG R55, <link xlink:type="simple" xlink:href="../746/51746.xml">
Cisco</link> PIX IOS earlier than v6.3.1, <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../623/855623.xml">
NetApp</link></company>
 Cache Appliances, <link xlink:type="simple" xlink:href="../909/644909.xml">
SonicWall</link>, <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../742/1024742.xml">
D-Link</link></company>
 DI-724U, <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../294/1197294.xml">
Netgear</link></company>
 WGR614, and <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../166/508166.xml">
Linksys</link></company>
 WRT54GS. <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref> This may be related to <message wordnetid="106598915" confidence="0.8">
<disapproval wordnetid="106709533" confidence="0.8">
<criticism wordnetid="106710546" confidence="0.8">
<link xlink:type="simple" xlink:href="../683/709683.xml#xpointer(//*[./st=%22Security%22])">
previous failures</link></criticism>
</disapproval>
</message>
 to work properly. Pre-released (<link xlink:type="simple" xlink:href="../569/3066569.xml">
beta</link>) versions of <version wordnetid="107173585" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../648/2289648.xml">
Vista</link></version>
 allegedly had more problems, including failed <link xlink:type="simple" xlink:href="../443/13443.xml">
http</link> (web) connections through SPI <link xlink:type="simple" xlink:href="../296/1362296.xml">
firewalls</link>.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%222%22])">2</ref></p>

</sec>
<sec>
<st>
See also</st>
<p>

<list>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../296/1362296.xml">
Network layer firewall</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../768/78768.xml">
Proxy server</link></entry>
<entry level="1" type="bullet">

<artifact wordnetid="100021939" confidence="0.8">
<merchandise wordnetid="103748886" confidence="0.8">
<commodity wordnetid="103076708" confidence="0.8">
<link xlink:type="simple" xlink:href="../421/992421.xml">
Cisco PIX</link></commodity>
</merchandise>
</artifact>
</entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../961/3598961.xml">
FireWall-1</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../802/1003802.xml">
Netfilter</link></entry>
<entry level="1" type="bullet">

<software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../682/971682.xml">
Iptables</link></software>
</entry>
<entry level="1" type="bullet">

<structure wordnetid="105726345" confidence="0.8">
<arrangement wordnetid="105726596" confidence="0.8">
<distribution wordnetid="105729036" confidence="0.8">
<link xlink:type="simple" xlink:href="../792/13425792.xml">
Endian Firewall</link></distribution>
</arrangement>
</structure>
</entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../516/6006516.xml">
Kerio WinRoute Firewall</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../508/19436508.xml">
CHX-I</link></entry>
</list>
</p>

</sec>
<sec>
<st>
References</st>

<p>

<reflist>
<entry id="1">
"<weblink xlink:type="simple" xlink:href="http://support.microsoft.com/kb/934430/en-us">
Network connectivity may fail when you try to use Windows Vista behind a firewall device</weblink>".</entry>
<entry id="2">
"<weblink xlink:type="simple" xlink:href="http://blogs.zdnet.com/Bott/?p=10">
A painful Vista networking bug</weblink>".</entry>
</reflist>
</p>


</sec>
</bdy>
</article>
