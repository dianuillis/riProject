<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 15:30:51[mciao0825] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<event  confidence="0.8" wordnetid="100029378">
<rule  confidence="0.8" wordnetid="105846932">
<act  confidence="0.8" wordnetid="100030358">
<psychological_feature  confidence="0.8" wordnetid="100023100">
<procedure  confidence="0.8" wordnetid="101023820">
<activity  confidence="0.8" wordnetid="100407535">
<algorithm  confidence="0.8" wordnetid="105847438">
<header>
<title>Artificial neural network</title>
<id>21523</id>
<revision>
<id>244336616</id>
<timestamp>2008-10-10T09:13:37Z</timestamp>
<contributor>
<username>Jeff3000</username>
<id>170884</id>
</contributor>
</revision>
<categories>
<category>Miscellaneous articles needing expert attention</category>
<category>Optimization algorithms</category>
<category>Neural networks</category>
<category>Technology articles needing expert attention</category>
<category>Computational statistics</category>
<category>Machine learning</category>
<category>Articles needing expert attention</category>
<category>Pages needing expert attention</category>
<category>Classification algorithms</category>
</categories>
</header>
<bdy>

An <b>artificial neural network (ANN)</b>, often just called a "neural network" (NN), is a <link xlink:type="simple" xlink:href="../590/20590.xml">
mathematical model</link> or <link xlink:type="simple" xlink:href="../048/2815048.xml">
computational model</link> based on <link xlink:type="simple" xlink:href="../672/1726672.xml">
biological neural networks</link>. It consists of an interconnected group of <link xlink:type="simple" xlink:href="../771/349771.xml">
artificial neuron</link>s and processes information using a <link xlink:type="simple" xlink:href="../636/263636.xml">
connectionist</link> approach to <link xlink:type="simple" xlink:href="../926/5926.xml">
computation</link>. In most cases an ANN is an <link xlink:type="simple" xlink:href="../588/739588.xml">
adaptive system</link> that changes its structure based on external or internal information that flows through the network during the learning phase.<p>

In more practical terms neural networks are <link xlink:type="simple" xlink:href="../103/146103.xml">
non-linear</link> <link xlink:type="simple" xlink:href="../685/26685.xml">
statistical</link> <link xlink:type="simple" xlink:href="../422/759422.xml">
data modeling</link> tools. They can be used to model complex relationships between inputs and outputs or to <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../706/126706.xml">
find patterns</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
 in data. </p>
<p>

<image width="350px" src="Artificial_neural_network.svg" type="thumb">
<caption>

A neural network is an interconnected group of nodes, akin to the vast network of <link xlink:type="simple" xlink:href="../120/21120.xml">
neuron</link>s in the <link xlink:type="simple" xlink:href="../620/490620.xml">
human brain</link>.
</caption>
</image>
</p>

<sec>
<st>
Background</st>
<p>

<image width="350px" src="Annexample2.png" type="thumb">
<caption>

Component based representation of a neural network. This kind of more general representation is used by some <link xlink:type="simple" xlink:href="../924/3712924.xml">
neural network software</link>.
</caption>
</image>

There is no precise agreed-upon definition among researchers as to what a <link xlink:type="simple" xlink:href="../542/1729542.xml">
neural network</link> is, but most would agree that it involves a network of simple processing elements (<link xlink:type="simple" xlink:href="../771/349771.xml">
neurons</link>), which can exhibit complex global behavior, determined by the connections between the processing elements and element parameters. The original inspiration for the technique was from examination of the <link xlink:type="simple" xlink:href="../251/7251.xml">
central nervous system</link> and the neurons (and their <link xlink:type="simple" xlink:href="../958/958.xml">
axons</link>, <link xlink:type="simple" xlink:href="../131/8131.xml">
dendrites</link> and <link xlink:type="simple" xlink:href="../809/27809.xml">
synapses</link>) which constitute one of its most significant information processing elements (see <link xlink:type="simple" xlink:href="../245/21245.xml">
Neuroscience</link>). In a neural network model, simple <link xlink:type="simple" xlink:href="../771/349771.xml">
nodes</link> (called variously "neurons", "neurodes", "PEs" ("processing elements") or "units") are connected together to form a network of nodes &mdash; hence the term "neural network." While a neural network does not have to be adaptive per se, its practical use comes with algorithms designed to alter the strength (weights) of the connections in the network to produce a desired signal flow.</p>
<p>

These networks are also similar to the <link xlink:type="simple" xlink:href="../672/1726672.xml">
biological neural networks</link> in the sense that functions are performed collectively and in parallel by the units, rather than there being a clear delineation of subtasks to which various units are assigned (see also <link xlink:type="simple" xlink:href="../636/263636.xml">
connectionism</link>). Currently, the term Artificial Neural Network (ANN) tends to refer mostly to neural network models employed in <link xlink:type="simple" xlink:href="../685/26685.xml">
statistics</link>, <link xlink:type="simple" xlink:href="../961/5961.xml">
cognitive psychology</link> and  <link xlink:type="simple" xlink:href="../164/1164.xml">
artificial intelligence</link>. <link xlink:type="simple" xlink:href="../542/1729542.xml">
Neural network</link> models designed with emulation of the <link xlink:type="simple" xlink:href="../251/7251.xml">
central nervous system</link> (CNS) in mind are a subject of <link xlink:type="simple" xlink:href="../430/271430.xml">
theoretical neuroscience</link> (<link xlink:type="simple" xlink:href="../430/271430.xml">
computational neuroscience</link>).</p>
<p>

In modern <link xlink:type="simple" xlink:href="../924/3712924.xml">
software implementations</link> of artificial neural networks the approach inspired by biology has more or less been abandoned for a more practical approach based on statistics and signal processing. In some of these systems neural networks, or parts of neural networks (such as <link xlink:type="simple" xlink:href="../771/349771.xml">
artificial neuron</link>s) are used as components in larger systems that combine both adaptive and non-adaptive elements. While the more general approach of such <link xlink:type="simple" xlink:href="../588/739588.xml">
adaptive systems</link> is more suitable for real-world problem solving, it has far less to do with the traditional artificial intelligence connectionist models. What they do, however, have in common is the principle of non-linear, distributed, parallel and local processing and adaptation. </p>

<ss1>
<st>
Models</st>
<p>

Neural network models in artificial intelligence are usually referred to as artificial neural networks (ANNs); these are essentially simple mathematical models defining a function <math> f : X \rightarrow Y </math>. Each type of ANN model corresponds to a <it>class</it> of such functions.</p>

<ss2>
<st>
The <it>network</it> in <it>artificial neural network''</it></st>
<p>

The word <it>network</it> in the term 'artificial neural network' arises because the function <math>f(x)</math> is defined as a composition of other functions <math>g_i(x)</math>, which can further be defined as a composition of other functions. This can be conveniently represented as a network structure, with arrows depicting the dependencies between variables. A widely used type of composition is the <it>nonlinear weighted sum</it>, where <math>f (x) = K \left(\sum_i w_i g_i(x)\right) </math>, where <math>K</math> is some predefined function, such as the <link xlink:type="simple" xlink:href="../567/56567.xml">
hyperbolic tangent</link>. It will be convenient for the following to refer to a collection of functions <math>g_i</math> as simply a vector <math>g = (g_1, g_2, \ldots, g_n)</math>.</p>
<p>

<image location="left" width="150px" src="ann_dependency_graph.png" type="thumb">
<caption>

ANN dependency graph
</caption>
</image>
</p>
<p>

This figure depicts such a decomposition of <math>f</math>, with dependencies between variables indicated by arrows. These can be interpreted in two ways.</p>
<p>

The first view is the functional view: the input <math>x</math> is transformed into a 3-dimensional vector <math>h</math>, which is then transformed into a 2-dimensional vector <math>g</math>, which is finally transformed into <math>f</math>. This view is most commonly encountered in the context of <link xlink:type="simple" xlink:href="../033/52033.xml">
optimization</link>.</p>
<p>

The second view is the probabilistic view: the <link xlink:type="simple" xlink:href="../685/25685.xml">
random variable</link> <math>F = f(G) </math> depends upon the random variable <math>G = g(H)</math>, which depends upon <math>H=h(X)</math>, which depends upon the random variable <math>X</math>. This view is most commonly encountered in the context of <link xlink:type="simple" xlink:href="../298/447298.xml">
graphical models</link>.</p>
<p>

The two views are largely equivalent. In either case, for this particular network architecture, the components of individual layers are independent of each other (e.g., the components of <math>g</math> are independent of each other given their input <math>h</math>). This naturally enables a degree of parallelism in the implementation.</p>
<p>

<image location="left" width="120px" src="Recurrent_ann_dependency_graph.png" type="thumb">
<caption>

Recurrent ANN dependency graph
</caption>
</image>
</p>
<p>

Networks such as the previous one are commonly called <link xlink:type="simple" xlink:href="../759/574759.xml">
feedforward</link>, because their graph is a <link xlink:type="simple" xlink:href="../002/204002.xml">
directed acyclic graph</link>. Networks with <link xlink:type="simple" xlink:href="../889/638889.xml">
cycles</link> are commonly called <link>
recurrent</link>. Such networks are commonly depicted in the manner shown at the top of the figure, where <math>f</math> is shown as being dependent upon itself. However, there is an implied temporal dependence which is not shown. What this actually means in practice is that the value of <math>f</math> at some point in time <math>t</math> depends upon the values of <math>f</math> at zero or at one or more other points in time. The graphical model at the bottom of the figure illustrates the case: the value of <math>f</math> at time <math>t</math> only depends upon its last value.</p>
<p>

<indent level="1">

<it>See also: <link xlink:type="simple" xlink:href="../298/447298.xml">
graphical models</link></it>
</indent>

</p>
</ss2>
</ss1>
<ss1>
<st>
Learning</st>
<p>

However interesting such functions may be in themselves, what has attracted the most interest in neural networks is the possibility of <it>learning</it>, which in practice means the following:</p>
<p>

Given a specific <it>task</it> to solve, and a <it>class</it> of functions <math>F</math>, learning means using a set of <it>observations</it>, in order to find <math>f^* \in F</math> which solves the task in an <it>optimal sense</it>.</p>
<p>

This entails defining a <link xlink:type="simple" xlink:href="../033/52033.xml">
cost function</link> <math>C : F \rightarrow \mathbb{R}</math> such that, for the optimal solution <math>f^*</math>, <math>C(f^*) \leq C(f)</math> <math>\forall f \in F</math> (no solution has a cost less than the cost of the optimal solution).</p>
<p>

The <link xlink:type="simple" xlink:href="../033/52033.xml">
cost function</link> <math>C</math> is an important concept in learning, as it is a measure of how far away we are from an optimal solution to the problem that we want to solve. Learning algorithms search through the solution space in order to find a function that has the smallest possible cost.</p>
<p>

For applications where the solution is dependent on some data, the cost must necessarily be a <it>function of the observations</it>, otherwise we would not be modelling anything related to the data. It is frequently defined as a <link xlink:type="simple" xlink:href="../703/26703.xml">
statistic</link> to which only approximations can be made. As a simple example consider the problem of finding the model <math>f</math> which minimizes <math>C=E\left[(f(x) - y)^2\right]</math>, for data pairs <math>(x,y)</math> drawn from some distribution <math>\mathcal{D}</math>. In practical situations we would only have <math>N</math> samples from <math>\mathcal{D}</math> and thus, for the above example, we would only minimize <math>\hat{C}=\frac{1}{N}\sum_{i=1}^N (f(x_i)-y_i)^2</math>. Thus, the cost is minimized over a sample of the data rather than the true data distribution.</p>
<p>

When <math>N \rightarrow \infty</math> some form of online learning must be used, where the cost is partially minimized as each new example is seen. While online learning is often used when <math>\mathcal{D}</math> is fixed, it is most useful in the case where the distribution changes slowly over time. In neural network methods, some form of online learning is frequently also used for finite datasets.</p>

<p>

<indent level="1">

<it>See also: <link xlink:type="simple" xlink:href="../033/52033.xml">
Optimization (mathematics)</link>, <link xlink:type="simple" xlink:href="../926/1565926.xml">
Estimation theory</link>,&nbsp;and <link xlink:type="simple" xlink:href="../488/233488.xml">
Machine learning</link></it>
</indent>

</p>
<ss2>
<st>
Choosing a cost function</st>
<p>

While it is possible to arbitrarily define some <link xlink:type="simple" xlink:href="../704/168704.xml">
ad hoc</link> cost function, frequently a particular cost will be used either because it has desirable properties (such as convexity) or because it arises naturally from a particular formulation of the problem (i.e., In a probabilistic formulation the posterior probability of the model can be used as an inverse cost). <b>Ultimately, the cost function will depend on the task we wish to perform</b>. The three main categories of learning tasks are overviewed below.</p>

</ss2>
</ss1>
<ss1>
<st>
Learning paradigms</st>
<p>

There are three major learning paradigms, each corresponding to a particular abstract learning task. These are <link xlink:type="simple" xlink:href="../926/20926.xml">
supervised learning</link>, <link xlink:type="simple" xlink:href="../497/233497.xml">
unsupervised learning</link> and <link xlink:type="simple" xlink:href="../294/66294.xml">
reinforcement learning</link>. Usually any given type of network architecture can be employed in any of those tasks.</p>

<ss2>
<st>
Supervised learning</st>
<p>

In <link xlink:type="simple" xlink:href="../926/20926.xml">
supervised learning</link>, we are given a set of example pairs <math> (x, y), x \in X, y \in Y</math> and the aim is to find a function <math> f : X \rightarrow Y </math> in the allowed class of functions that matches the examples. In other words, we wish to <it>infer</it> the mapping implied by the data; the cost function is related to the mismatch between our mapping and the data and it implicitly contains prior knowledge about the problem domain.</p>
<p>

A commonly used cost is the <link xlink:type="simple" xlink:href="../816/201816.xml">
mean-squared error</link> which tries to minimize the average error between the network's output, f(x), and the target value y over all the example pairs. When one tries to minimise this cost using <link xlink:type="simple" xlink:href="../489/201489.xml">
gradient descent</link> for the class of neural networks called <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../644/2266644.xml">
Multi-Layer Perceptrons</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
, one obtains the common and well-known <link xlink:type="simple" xlink:href="../091/1360091.xml">
backpropagation algorithm</link> for training neural networks.</p>
<p>

Tasks that fall within the paradigm of supervised learning are <link xlink:type="simple" xlink:href="../706/126706.xml">
pattern recognition</link> (also known as classification) and <link xlink:type="simple" xlink:href="../997/826997.xml">
regression</link> (also known as function approximation). The supervised learning paradigm is also applicable to sequential data (e.g., for speech and gesture recognition). This can be thought of as learning with a "teacher," in the form of a function that provides continuous feedback on the quality of solutions obtained thus far.</p>

</ss2>
<ss2>
<st>
Unsupervised learning</st>
<p>

In <link xlink:type="simple" xlink:href="../497/233497.xml">
unsupervised learning</link> we are given some data <math>x</math>, and the cost function to be minimized can be any function of the data <math>x</math> and the network's output, <math>f</math>.</p>
<p>

The cost function is dependent on the task (what we are trying to model) and our <it>a priori</it> assumptions (the implicit properties of our model, its parameters and the observed variables).</p>
<p>

As a trivial example, consider the model <math>f(x) = a</math>, where <math>a</math> is a constant and the cost <math>C=E[(x - f(x))^2]</math>. Minimizing this cost will give us a value of <math>a</math> that is equal to the mean of the data. The cost function can be much more complicated. Its form depends on the application: For example in compression it could be related to the <link xlink:type="simple" xlink:href="../282/427282.xml">
mutual information</link> between x and y. In statistical modelling, it could be related to the <link xlink:type="simple" xlink:href="../672/357672.xml">
posterior probability</link> of the model given the data. (Note that in both of those examples those quantities would be maximized rather than minimised).</p>
<p>

Tasks that fall within the paradigm of unsupervised learning are in general <link xlink:type="simple" xlink:href="../504/172504.xml">
estimation</link> problems; the applications include <link xlink:type="simple" xlink:href="../675/669675.xml">
clustering</link>, the estimation of <link xlink:type="simple" xlink:href="../543/23543.xml">
statistical distributions</link>, <link xlink:type="simple" xlink:href="../013/8013.xml">
compression</link> and <link xlink:type="simple" xlink:href="../929/515929.xml">
filtering</link>.</p>

</ss2>
<ss2>
<st>
Reinforcement learning</st>
<p>

In <link xlink:type="simple" xlink:href="../294/66294.xml">
reinforcement learning</link>, data <math>x</math> is usually not given, but generated by an agent's interactions with the environment. At each point in time <math>t</math>, the agent performs an action <math>y_t</math> and the environment generates an observation <math>x_t</math> and an instantaneous cost <math>c_t</math>, according to some (usually unknown) dynamics. The aim is to discover a <it>policy</it> for selecting actions that minimizes some measure of a long-term cost, i.e. the expected cumulative cost. The environment's dynamics and the long-term cost for each policy are usually unknown, but can be estimated.</p>
<p>

More formally, the environment is modeled as a <link xlink:type="simple" xlink:href="../883/1125883.xml">
Markov decision process</link> (MDP) with states <math>{s_1,...,s_n}\in </math>S and actions <math>{a_1,...,a_m} \in A</math> with the following probability distributions: the instantaneous cost distribution <math>P(c_t|s_t)</math>, the observation distribution <math>P(x_t|s_t)</math> and the transition <math>P(s_{t+1}|s_t, a_t)</math>, while a policy is defined as conditional distribution over actions given the observations. Taken together, the two define a <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<model wordnetid="110324560" confidence="0.8">
<assistant wordnetid="109815790" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../876/60876.xml">
Markov chain</link></causal_agent>
</worker>
</assistant>
</model>
</person>
</physical_entity>
 (MC). The aim is to discover the policy that minimizes the cost, i.e. the MC for which the cost is minimal.</p>
<p>

ANNs are frequently used in reinforcement learning as part of the overall algorithm.</p>
<p>

Tasks that fall within the paradigm of reinforcement learning are control problems, <link xlink:type="simple" xlink:href="../138/18723138.xml">
games</link> and other <link>
sequential decision making</link> tasks.</p>
<p>

See also: <link xlink:type="simple" xlink:href="../297/125297.xml">
dynamic programming</link>, <link xlink:type="simple" xlink:href="../216/17058216.xml">
stochastic control</link></p>

</ss2>
</ss1>
<ss1>
<st>
Learning algorithms</st>
<p>

Training a neural network model essentially means selecting one model from the set of allowed models (or, in a <link xlink:type="simple" xlink:href="../526/38526.xml">
Bayesian</link> framework, determining a distribution over the set of allowed models) that minimises the cost criterion.  There are numerous algorithms available for training neural network models; most of them can be viewed as a straightforward application of <link xlink:type="simple" xlink:href="../033/52033.xml">
optimization</link> theory and <link xlink:type="simple" xlink:href="../926/1565926.xml">
statistical estimation</link>.</p>
<p>

Most of the algorithms used in training artificial neural networks are employing some form of <link xlink:type="simple" xlink:href="../489/201489.xml">
gradient descent</link>. This is done by simply taking the derivative of the cost function with respect to the network parameters and then changing those parameters in a <link xlink:type="simple" xlink:href="../143/3442143.xml">
gradient-related</link> direction.</p>
<p>

<link xlink:type="simple" xlink:href="../837/190837.xml">
Evolutionary methods</link>, <link xlink:type="simple" xlink:href="../244/172244.xml">
simulated annealing</link>, and <link xlink:type="simple" xlink:href="../752/470752.xml">
expectation-maximization</link> and <link xlink:type="simple" xlink:href="../369/223369.xml">
non-parametric methods</link> are among other commonly used methods for training neural networks. See also <link xlink:type="simple" xlink:href="../488/233488.xml">
machine learning</link>.</p>
<p>

Temporal perceptual learning relies on finding temporal relationships in sensory signal streams. In an environment, statistically salient temporal correlations can be found by monitoring the arrival times of sensory signals. This is done by the <link>
perceptual network</link>.</p>

</ss1>
</sec>
<sec>
<st>
Employing artificial neural networks</st>
<p>

Perhaps the greatest advantage of ANNs is their ability to be used as an arbitrary function approximation mechanism which 'learns' from observed data. However, using them is not so straightforward and a relatively good understanding of the underlying theory is essential.</p>
<p>

<list>
<entry level="1" type="bullet">

Choice of model: This will depend on the data representation and the application. Overly complex models tend to lead to problems with learning.</entry>
<entry level="1" type="bullet">

Learning algorithm: There are numerous tradeoffs between learning algorithms. Almost any algorithm will work well with the <it>correct <link xlink:type="simple" xlink:href="../585/11641585.xml">
hyperparameter</link>s</it> for training on a particular fixed dataset. However selecting and tuning an algorithm for training on unseen data requires a significant amount of experimentation.</entry>
<entry level="1" type="bullet">

Robustness: If the model, cost function and learning algorithm are selected appropriately the resulting ANN can be extremely robust.</entry>
</list>
</p>
<p>

With the correct implementation ANNs can be used naturally in <link xlink:type="simple" xlink:href="../716/22716.xml">
online learning</link> and large dataset applications. Their simple implementation and the existence of mostly local dependencies exhibited in the structure allows for fast, parallel implementations in hardware.</p>

</sec>
<sec>
<st>
Applications</st>
<p>

The utility of artificial neural network models lies in the fact that they can be used to infer a function from observations. This is particularly useful in applications where the complexity of the data or task makes the design of such a function by hand impractical.</p>

<ss1>
<st>
Real life applications</st>
<p>

The tasks to which artificial neural networks are applied tend to fall within the following broad categories:</p>
<p>

<list>
<entry level="1" type="bullet">

<physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<model wordnetid="110324560" confidence="0.8">
<assistant wordnetid="109815790" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../897/336897.xml">
Function approximation</link></causal_agent>
</worker>
</assistant>
</model>
</person>
</physical_entity>
, or <link xlink:type="simple" xlink:href="../997/826997.xml">
regression analysis</link>, including <link xlink:type="simple" xlink:href="../624/406624.xml">
time series prediction</link> and modeling.</entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../244/1579244.xml">
Classification</link>, including <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../706/126706.xml">
pattern</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
 and sequence recognition, <link xlink:type="simple" xlink:href="../117/12656117.xml">
novelty detection</link> and sequential decision making.</entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../961/41961.xml">
Data processing</link>, including filtering, clustering, blind source separation and compression.</entry>
</list>
</p>
<p>

Application areas include system identification and control (vehicle control, process control), game-playing and decision making (backgammon, chess, racing), pattern recognition (radar systems, face identification, object recognition and more), sequence recognition (gesture, speech, handwritten text recognition), medical diagnosis, financial applications (automated trading systems), <link xlink:type="simple" xlink:href="../253/42253.xml">
data mining</link> (or knowledge discovery in databases, "KDD"), visualization  and <link xlink:type="simple" xlink:href="../847/459847.xml">
e-mail spam</link> filtering.</p>

</ss1>
</sec>
<sec>
<st>
Neural network software</st>

<p>

<indent level="1">

<it>Main article: <link xlink:type="simple" xlink:href="../924/3712924.xml">
Neural network software</link></it>
</indent>

<b>Neural network software</b> is used to <link xlink:type="simple" xlink:href="../444/43444.xml">
simulate</link>, <link xlink:type="simple" xlink:href="../524/25524.xml">
research</link>, <link xlink:type="simple" xlink:href="../979/763979.xml">
develop</link> and apply artificial neural networks, <link xlink:type="simple" xlink:href="../672/1726672.xml">
biological neural network</link>s and in some cases a wider array of <link xlink:type="simple" xlink:href="../588/739588.xml">
adaptive system</link>s. See also <link xlink:type="simple" xlink:href="../631/226631.xml">
logistic regression</link>.</p>

</sec>
<sec>
<st>
Types of neural networks</st>

<ss1>
<st>
Feedforward neural network</st>


<p>

<indent level="1">

<it>Main article: <link xlink:type="simple" xlink:href="../332/1706332.xml">
Feedforward neural network</link></it>
</indent>

The feedforward neural network was the first and arguably simplest type of artificial neural network devised. In this network, the information moves in only one direction, forward, from the input nodes, through the hidden nodes (if any) and to the output nodes. There are no cycles or loops in the network.</p>

</ss1>
<ss1>
<st>
Radial basis function (RBF) network</st>

<p>

<indent level="1">

<it>Main article: <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../443/9651443.xml">
Radial basis function network</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</it>
</indent>
Radial Basis Functions are powerful techniques for interpolation in multidimensional space.  A RBF is a function which has built into a distance criterion with respect to a centre.  Radial basis functions have been applied in the area of neural networks where they may be used as a replacement for the sigmoidal hidden layer transfer characteristic in Multi-Layer Perceptrons.  RBF networks have two layers of processing:  In the first, input is mapped onto each RBF in the 'hidden' layer.  The RBF chosen is usually a Gaussian.  In regression problems the output layer is then a linear combination of hidden layer values representing mean predicted output.  The interpretation of this output layer value is the same as a regression model in statistics.  In classification problems the output layer is typically a <link xlink:type="simple" xlink:href="../210/87210.xml">
sigmoid function</link> of a linear combination of hidden layer values, representing a posterior probability.  Performance in both cases is often improved by shrinkage techniques, known as <link xlink:type="simple" xlink:href="../328/954328.xml">
ridge regression</link> in classical statistics and known to correspond to a prior belief in small parameter values (and therefore smooth output functions) in a Bayesian framework.</p>
<p>

RBF networks have the advantage of not suffering from local minima in the same way as Multi-Layer Perceptrons.  This is because the only parameters that are adjusted in the learning process are the linear mapping from hidden layer to output layer.  Linearity ensures that the error surface is quadratic and therefore has a single easily found minimum.  In regression problems this can be found in one matrix operation.  In classification problems the fixed non-linearity introduced by the sigmoid output function is most efficiently dealt with using <link xlink:type="simple" xlink:href="../665/11463665.xml">
iteratively re-weighted least squares</link>.</p>
<p>

RBF networks have the disadvantage of requiring good coverage of the input space by radial basis functions.  RBF centres are determined with reference to the distribution of the input data, but without reference to the prediction task.  As a result, representational resources may be wasted on areas of the input space that are irrelevant to the learning task.  A common solution is to associate each data point with its own centre, although this can make the linear system to be solved in the final layer rather large, and requires shrinkage techniques to avoid overfitting.</p>
<p>

Associating each input datum with an RBF leads naturally to kernel methods such as <link xlink:type="simple" xlink:href="../309/65309.xml">
Support Vector Machine</link>s and Gaussian Processes (the RBF is the kernel function).  All three approaches use a non-linear kernel function to project the input data into a space where the learning problem can be solved using a linear model.  Like Gaussian Processes, and unlike SVMs, RBF networks are typically trained in a Maximum Likelihood framework by maximizing the probability (minimizing the error) of the data under the model.  SVMs take a different approach to avoiding overfitting by maximizing instead a margin.  RBF networks are outperformed in most classification applications by SVMs.  In regression applications they can be competitive when the dimensionality of the input space is relatively small.</p>

</ss1>
<ss1>
<st>
Kohonen self-organizing network</st>


<p>

<indent level="1">

<it>Main article: <link xlink:type="simple" xlink:href="../996/76996.xml">
Self-organizing map</link></it>
</indent>

The self-organizing map (SOM) invented by <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<link xlink:type="simple" xlink:href="../591/1685591.xml">
Teuvo Kohonen</link></scientist>
</causal_agent>
</person>
</physical_entity>
 performs a form of <link xlink:type="simple" xlink:href="../497/233497.xml">
unsupervised learning</link>. A set of artificial neurons learn to map points in an input space to coordinates in an output space. The input space can have different dimensions and topology from the output space, and the SOM will attempt to preserve these.</p>

</ss1>
<ss1>
<st>
Recurrent network</st>

<p>

<indent level="1">

<it>Main article: <link xlink:type="simple" xlink:href="../303/1706303.xml">
Recurrent neural network</link></it>
</indent>
Contrary to feedforward networks, <link xlink:type="simple" xlink:href="../303/1706303.xml">
recurrent neural network</link>s (RNs) are models with bi-directional data flow. While a feedforward network propagates data linearly from input to output, RNs also propagate data from later processing stages to earlier stages.</p>

<ss2>
<st>
Simple recurrent network</st>
<p>

A <it>simple recurrent network</it> (SRN) is a variation on the Multi-Layer Perceptron, sometimes called an "Elman network" due to its invention by <link xlink:type="simple" xlink:href="../690/6223690.xml">
Jeff Elman</link>. A three-layer network is used, with the addition of a set of "context units" in the input layer.  There are connections from the middle (hidden) layer to these context units fixed with a weight of one. At each time step, the input is propagated in a standard feed-forward fashion, and then a learning rule (usually back-propagation) is applied. The fixed back connections result in the context units always maintaining a copy of the previous values of the hidden units (since they propagate over the connections before the learning rule is applied).  Thus the network can maintain a sort of state, allowing it to perform such tasks as sequence-prediction that are beyond the power of a standard Multi-Layer Perceptron.</p>
<p>

In a <it>fully recurrent network</it>, every neuron receives inputs from every other neuron in the network. These networks are not arranged in layers. Usually only a subset of the neurons receive external inputs in addition to the inputs from all the other neurons, and another disjunct subset of neurons report their output externally as well as sending it to all the neurons. These distinctive inputs and outputs perform the function of the input and output layers of a feed-forward or simple recurrent network, and also join all the other neurons in the recurrent processing.</p>

</ss2>
<ss2>
<st>
Hopfield network</st>
<p>

The <link xlink:type="simple" xlink:href="../097/1170097.xml">
Hopfield network</link> is a recurrent neural network in which all connections are symmetric. Invented by <link xlink:type="simple" xlink:href="../572/649572.xml">
John Hopfield</link> in 1982, this network guarantees that its dynamics will converge. If the connections are trained using <link xlink:type="simple" xlink:href="../084/404084.xml">
Hebbian learning</link> then the Hopfield network can perform as robust content-addressable (or <link xlink:type="simple" xlink:href="../011/433011.xml">
associative</link>) memory, resistant to connection alteration.</p>

</ss2>
<ss2>
<st>
Echo state network</st>
<p>

The <link xlink:type="simple" xlink:href="../731/8887731.xml">
echo state network</link> (ESN) is a <link xlink:type="simple" xlink:href="../303/1706303.xml">
recurrent neural network</link> with a sparsely connected random hidden layer. The weights of output neurons are the only part of the network that can change and be learned. ESN are good to (re)produce temporal patterns.</p>

</ss2>
<ss2>
<st>
Long short term memory network</st>
<p>

The <link xlink:type="simple" xlink:href="../453/10711453.xml">
Long short term memory</link> is an artificial neural net structure that unlike traditional RNNs doesn't have the problem of vanishing gradients. It can therefore use long delays and can handle signals that have a mix of low and high frequency components.</p>

</ss2>
</ss1>
<ss1>
<st>
Stochastic neural networks</st>
<p>

A <link xlink:type="simple" xlink:href="../605/2070605.xml">
stochastic neural network</link> differs from a typical neural network because it introduces random variations into the network. In a probabilistic view of neural networks, such random variations can be viewed as a form of <link xlink:type="simple" xlink:href="../361/160361.xml">
statistical sampling</link>, such as <link xlink:type="simple" xlink:href="../098/56098.xml">
Monte Carlo sampling</link>.</p>

<ss2>
<st>
Boltzmann machine</st>
<p>

The <link xlink:type="simple" xlink:href="../059/1166059.xml">
Boltzmann machine</link> can be thought of as a noisy Hopfield network. Invented by <link xlink:type="simple" xlink:href="../174/507174.xml">
Geoff Hinton</link> and <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<research_worker wordnetid="110523076" confidence="0.8">
<link xlink:type="simple" xlink:href="../552/1171552.xml">
Terry Sejnowski</link></research_worker>
</scientist>
</causal_agent>
</person>
</physical_entity>
 in 1985, the Boltzmann machine is important because it is one of the first neural networks to demonstrate learning of latent variables (hidden units). Boltzmann machine learning was at first slow to simulate, but the <link>
contrastive divergence algorithm</link> of Geoff Hinton (circa 2000) allows models such as Boltzmann machines and <it>products of experts</it> to be trained much faster.</p>

</ss2>
</ss1>
<ss1>
<st>
Modular neural networks</st>
<p>

Biological studies have shown that the human brain functions not as a single massive network, but as a collection of small networks. This realization gave birth to the concept of <link xlink:type="simple" xlink:href="../790/17319790.xml">
modular neural networks</link>, in which several small networks cooperate or compete to solve problems.</p>

<ss2>
<st>
Committee of machines</st>
<p>

A <link xlink:type="simple" xlink:href="../985/9583985.xml">
committee of machines</link> (CoM) is a collection of different neural networks that together "vote" on a given example. This generally gives a much better result compared to other neural network models. In fact in many cases, starting with the same architecture and training but using different initial random weights gives vastly different networks. A CoM tends to stabilize the result.</p>
<p>

The CoM is similar to the general <link xlink:type="simple" xlink:href="../488/233488.xml">
machine learning</link> <it><link xlink:type="simple" xlink:href="../911/1307911.xml">
bagging</link></it> method, except that the necessary variety of machines in the committee is obtained by training from different random starting weights rather than training on different randomly selected subsets of the training data.</p>

</ss2>
<ss2>
<st>
Associative neural network (ASNN)</st>
<p>

The ASNN is an extension of the <it>committee of machines</it> that goes beyond a simple/weighted average of different models. <weblink xlink:type="simple" xlink:href="http://cogprints.soton.ac.uk/documents/disk0/00/00/14/41/index.html">
ASNN</weblink> represents a combination of an ensemble of feed-forward neural networks and the k-nearest neighbor technique (<link>
kNN</link>). It uses the correlation between ensemble responses as a measure of <b>distance</b> amid the analyzed cases for the kNN. This corrects the bias of the neural network ensemble. An associative neural network has a memory that can coincide with the training set. If new data becomes available, the network instantly improves its predictive ability and provides data approximation (self-learn the data) without a need to retrain the ensemble.  Another important feature of ASNN is the possibility to interpret neural network results by analysis of correlations between data cases in the space of models. The method is demonstrated at <weblink xlink:type="simple" xlink:href="http://www.vcclab.org/lab/asnn">
www.vcclab.org</weblink>, where you can either use it online or download it.</p>

</ss2>
</ss1>
<ss1>
<st>
Other types of networks</st>

<p>

These special networks do not fit in any of the previous categories.</p>

<ss2>
<st>
Holographic associative memory</st>

<p>

<link xlink:type="simple" xlink:href="../484/5176484.xml">
<it>Holographic associative memory''</it></link> represents a family of analog, correlation-based, associative, stimulus-response memories, where information is mapped onto the phase orientation of complex numbers operating.</p>

</ss2>
<ss2>
<st>
Instantaneously trained networks</st>

<p>

<it><link xlink:type="simple" xlink:href="../314/470314.xml">
Instantaneously trained neural networks</link></it> (ITNNs)  were inspired by the phenomenon of short-term learning that seems to occur instantaneously. In these networks the weights of the hidden and the output layers are mapped directly from the training vector data. Ordinarily, they work on binary data, but versions for continuous data that require small additional processing are also available.</p>

</ss2>
<ss2>
<st>
Spiking neural networks</st>

<p>

<link xlink:type="simple" xlink:href="../567/10159567.xml">
Spiking neural network</link>s (SNNs) are models which explicitly take into account the timing of inputs. The network input and output are usually represented as series of spikes (delta function or more complex shapes). SNNs have an advantage of being able to process information in the <link xlink:type="simple" xlink:href="../419/173419.xml">
time domain</link> (signals that vary over time). They are often implemented as recurrent networks. SNNs are also a form of <link xlink:type="simple" xlink:href="../106/319106.xml">
pulse computer</link>.</p>
<p>

Networks of spiking neurons — and the temporal correlations of neural assemblies in such networks — have been used to model figure/ground separation and region linking in the visual system (see e.g. Reitboeck et.al.in Haken and Stadler: Synergetics of the Brain. Berlin, 1989).</p>
<p>

Gerstner and Kistler have a freely available online textbook on <weblink xlink:type="simple" xlink:href="http://diwww.epfl.ch/~gerstner/BUCH.html">
Spiking Neuron Models</weblink>.</p>
<p>

Spiking neural networks with axonal conduction delays exhibit polychronization, and hence could have a potentially unlimited memory capacity.</p>
<p>

In June 2005 <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../259/18622259.xml">
IBM</link></company>
 announced construction of a <computer wordnetid="103082979" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<mainframe wordnetid="103711711" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<machine wordnetid="103699975" confidence="0.8">
<digital_computer wordnetid="103196324" confidence="0.8">
<supercomputer wordnetid="104358117" confidence="0.8">
<link xlink:type="simple" xlink:href="../764/136764.xml">
Blue Gene</link></supercomputer>
</digital_computer>
</machine>
</device>
</mainframe>
</instrumentality>
</artifact>
</computer>
 <link xlink:type="simple" xlink:href="../153/37153.xml">
supercomputer</link> dedicated to the simulation of a large recurrent spiking neural network <weblink xlink:type="simple" xlink:href="http://domino.research.ibm.com/comm/pr.nsf/pages/news.20050606_CognitiveIntelligence.html">
http://domino.research.ibm.com/comm/pr.nsf/pages/news.20050606_CognitiveIntelligence.html</weblink>.</p>

</ss2>
<ss2>
<st>
Dynamic neural networks</st>

<p>

<link>
Dynamic neural network</link>s not only deal with nonlinear multivariate behaviour, but also include (learning of) time-dependent behaviour such as various transient phenomena and delay effects.</p>

</ss2>
<ss2>
<st>
Cascading neural networks</st>

<p>

<it>Cascade-Correlation</it> is an architecture and <link xlink:type="simple" xlink:href="../926/20926.xml">
supervised learning</link> <link xlink:type="simple" xlink:href="../775/775.xml">
algorithm</link> developed by <physical_entity wordnetid="100001930" confidence="0.8">
<peer wordnetid="109626238" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<colleague wordnetid="109935990" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<research_worker wordnetid="110523076" confidence="0.8">
<associate wordnetid="109816771" confidence="0.8">
<link xlink:type="simple" xlink:href="../172/507172.xml">
Scott Fahlman</link></associate>
</research_worker>
</scientist>
</causal_agent>
</colleague>
</person>
</peer>
</physical_entity>
 and <link>
Christian Lebiere</link>.
Instead of just adjusting the weights in a network of fixed topology, Cascade-Correlation begins with a
minimal network, then automatically trains and adds new hidden units one by one, creating a multi-layer
structure. Once a new hidden unit has been added to the network, its input-side weights are frozen. This unit
then becomes a permanent feature-detector in the network, available for producing outputs or for creating
other, more complex feature detectors. The Cascade-Correlation architecture has several advantages over
existing algorithms: it learns very quickly, the network determines its own size and topology, it retains the
structures it has built even if the training set changes, and it requires no <link xlink:type="simple" xlink:href="../091/1360091.xml">
back-propagation</link> of error signals
through the connections of the network.  See: <link xlink:type="simple" xlink:href="../385/2384385.xml">
Cascade correlation algorithm</link>.</p>

</ss2>
<ss2>
<st>
Neuro-fuzzy networks</st>

<p>

A neuro-fuzzy network is a <link>
fuzzy inference system</link> in the body of an artificial neural network. Depending on the <it>FIS</it> type, there are several layers that simulate the processes involved in a <it>fuzzy inference</it> like fuzzification, inference, aggregation and defuzzification. Embedding an <it>FIS</it> in a general structure of an <it>ANN</it> has the benefit of using available <it>ANN</it> training methods to find the parameters of a fuzzy system.</p>

</ss2>
<ss2>
<st>
Compositional pattern-producing networks</st>

<p>

<event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../929/13526929.xml">
Compositional pattern-producing network</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
s (CPPNs) are a variation of ANNs which differ in their set of activation functions and how they are applied. While typical ANNs often contain only <link xlink:type="simple" xlink:href="../210/87210.xml">
sigmoid function</link>s (and sometimes <link xlink:type="simple" xlink:href="../552/245552.xml">
Gaussian function</link>s), CPPNs can include both types of functions and many others. Furthermore, unlike typical ANNs, CPPNs are applied across the entire space of possible inputs so that they can represent a complete image. Since they are compositions of functions, CPPNs in effect encode images at infinite resolution and can be sampled for a particular display at whatever resolution is optimal.</p>

</ss2>
</ss1>
</sec>
<sec>
<st>
Theoretical properties</st>

<ss1>
<st>
Computational power</st>
<p>

The multi-layer perceptron (MLP) is a universal function approximator, as proven by the <link xlink:type="simple" xlink:href="../967/7805967.xml">
Cybenko theorem</link>. However, the proof is not constructive regarding the number of neurons required or the settings of the weights.</p>
<p>

Work by <link xlink:type="simple" xlink:href="../116/17472116.xml">
Hava Siegelmann</link> and <scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../520/5612520.xml">
Eduardo D. Sontag</link></scientist>
 has provided a proof that a specific recurrent architecture with rational valued weights (as opposed to the commonly used floating point approximations) has the full power of a <link>
Universal Turing Machine</link>. They have further shown that the use of irrational values for weights results in a machine with trans-Turing power.</p>

</ss1>
<ss1>
<st>
Capacity</st>
<p>

Artificial neural network models have a property called 'capacity', which roughly corresponds to their ability to model any given function. It is related to the amount of information that can be stored in the network and to the notion of complexity.</p>

</ss1>
<ss1>
<st>
Convergence</st>
<p>

Nothing can be said in general about convergence since it depends on a number of factors. Firstly, there may exist many local minima. This depends on the cost function and the model. Secondly, the optimization method used might not be guaranteed to converge when far away from a local minimum. Thirdly, for a very large amount of data or parameters, some methods become impractical. In general, it has been found that theoretical guarantees regarding convergence are an unreliable guide to practical application.</p>

</ss1>
<ss1>
<st>
Generalisation and statistics</st>
<p>

In applications where the goal is to create a system that generalises well in unseen examples, the problem of overtraining has emerged. This arises in overcomplex or overspecified systems when the capacity of the network significantly exceeds the needed free parameters. There are two schools of thought for avoiding this problem: The first is to use cross-validation and similar techniques to check for the presence of overtraining and optimally select hyperparameters such as to minimise the generalisation error. The second is to use some form of <it>regularisation</it>. This is a concept that emerges naturally in a probabilistic (Bayesian) framework, where the regularisation can be performed by selecting a larger prior probability over simpler models; but also in statistical learning theory, where the goal is to minimise over two quantities: the 'empirical risk' and the 'structural risk', which roughly correspond to the error over the training set and the predicted error in unseen data due to overfitting.
<image location="right" width="200px" src="Synapse_deployment.jpg" type="thumb">
<caption>

Confidence analysis of a neural network
</caption>
</image>

Supervised neural networks that use an <link xlink:type="simple" xlink:href="../816/201816.xml">
MSE</link> cost function can use formal statistical methods to determine the confidence of the trained model. The MSE on a validation set can be used as an estimate for variance. This value can then be used to calculate the <link xlink:type="simple" xlink:href="../911/280911.xml">
confidence interval</link> of the output of the network, assuming a <link xlink:type="simple" xlink:href="../462/21462.xml">
normal distribution</link>. A confidence analysis made this way is statistically valid as long as the output <link xlink:type="simple" xlink:href="../543/23543.xml">
probability distribution</link> stays the same and the network is not modified. </p>
<p>

By assigning a softmax activation function on the output layer of the neural network (or a softmax component in a component-based neural network) for categorical target variables, the outputs can be interpreted as posterior probabilities. This is very useful in classification as it gives a certainty measure on classifications. </p>
<p>

The softmax activation function:
<math>y_i=\frac{e^{x_i}}{\sum_{j=1}^c e^{x_j}}</math></p>

</ss1>
<ss1>
<st>
Dynamic properties</st>

<p>

<table class="metadata plainlinks ambox ">
<row>
<col>

ambox-content" style=""</col>
</row>
<row>
<col class="mbox-image"><p>

<image width="40x40px" src="Ambox_content.png">
</image>
</p>
</col>
<col style="" class="mbox-text">
 <b>This article or section is in need of attention from an expert on the subject.</b><p>

  may be able to help recruit one.
If a more appropriate  or 
portalexists, please adjust this template accordingly.</p>
</col>
</row>
</table>


Various techniques originally developed for studying disordered magnetic systems (i.e. the <link xlink:type="simple" xlink:href="../555/148555.xml">
spin glass</link>) have been successfully applied to simple neural network architectures, such as the Hopfield network. Influential work by E. Gardner and B. Derrida has revealed many interesting properties about perceptrons with real-valued synaptic weights, while later work by W. Krauth and M. Mezard has extended these principles to binary-valued synapses.</p>

</ss1>
</sec>
<sec>
<st>
See also</st>


<p>

<list>
<entry level="1" type="bullet">

 <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../772/1548772.xml">
20Q</link></database>
</wordnet>
</lexical_database>
</electronic_database>
</information>
</message>
</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../879/3056879.xml">
Adaptive resonance theory</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../656/58656.xml">
Artificial life</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../011/433011.xml">
Associative memory</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../612/6836612.xml">
Autoencoder</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../672/1726672.xml">
Biological neural network</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../157/361157.xml">
Biologically-inspired computing</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../262/3634262.xml">
Blue brain</link></entry>
<entry level="1" type="bullet">

 <software wordnetid="106566077" confidence="0.8">
<application wordnetid="106570110" confidence="0.8">
<program wordnetid="106568978" confidence="0.8">
<written_communication wordnetid="106349220" confidence="0.8">
<writing wordnetid="106359877" confidence="0.8">
<code wordnetid="106355894" confidence="0.8">
<coding_system wordnetid="106353757" confidence="0.8">
<link xlink:type="simple" xlink:href="../154/2368154.xml">
Clinical decision support system</link></coding_system>
</code>
</writing>
</written_communication>
</program>
</application>
</software>
</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../264/2368264.xml">
Connectionist expert system</link></entry>
<entry level="1" type="bullet">

 <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../602/232602.xml">
Decision tree</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../136/10136.xml">
Expert system</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../180/49180.xml">
Fuzzy logic</link></entry>
<entry level="1" type="bullet">

 <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../254/40254.xml">
Genetic algorithm</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</entry>
<entry level="1" type="bullet">

 <link>
Gnod</link>, a Kohonen network application</entry>
<entry level="1" type="bullet">

 <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../657/1470657.xml">
Linear discriminant analysis</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</entry>
<entry level="1" type="bullet">

 <information wordnetid="105816287" confidence="0.8">
<datum wordnetid="105816622" confidence="0.8">
<link xlink:type="simple" xlink:href="../631/226631.xml">
Logistic regression</link></datum>
</information>
</entry>
<entry level="1" type="bullet">

 <idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<component wordnetid="105868954" confidence="0.8">
<part wordnetid="105867413" confidence="0.8">
<link xlink:type="simple" xlink:href="../162/14246162.xml">
Memristor</link></part>
</component>
</concept>
</idea>
</entry>
<entry level="1" type="bullet">

 <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../644/2266644.xml">
Multilayer perceptron</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../388/1775388.xml">
Nearest neighbor (pattern recognition)</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../542/1729542.xml">
Neural network</link></entry>
<entry level="1" type="bullet">

 <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../706/440706.xml">
Neuroevolution</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
, <link xlink:type="simple" xlink:href="../922/344922.xml">
NeuroEvolution of Augmented Topologies</link> (NEAT)</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../924/3712924.xml">
Neural network software</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../368/8892368.xml">
Ni1000</link> chip</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../395/1635395.xml">
Optical neural network</link></entry>
<entry level="1" type="bullet">

 <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../083/337083.xml">
Particle swarm optimization</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</entry>
<entry level="1" type="bullet">

 <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../777/172777.xml">
Perceptron</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</entry>
<entry level="1" type="bullet">

 <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<model wordnetid="110324560" confidence="0.8">
<assistant wordnetid="109815790" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../563/4141563.xml">
Predictive analytics</link></causal_agent>
</worker>
</assistant>
</model>
</person>
</physical_entity>
</entry>
<entry level="1" type="bullet">

 <idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<component wordnetid="105868954" confidence="0.8">
<part wordnetid="105867413" confidence="0.8">
<link xlink:type="simple" xlink:href="../340/76340.xml">
Principal components analysis</link></part>
</component>
</concept>
</idea>
</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../997/826997.xml">
Regression analysis</link></entry>
<entry level="1" type="bullet">

 <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../244/172244.xml">
Simulated annealing</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../517/351517.xml">
Systolic array</link></entry>
<entry level="1" type="bullet">

 <link>
Systolic automaton</link></entry>
<entry level="1" type="bullet">

 <link>
Time delay neural network</link> (TDNN)</entry>
<entry level="1" type="bullet">

 <link>
Time delay dynamic neural units</link> (TmD-DNU)</entry>
</list>
</p>


</sec>
<sec>
<st>
Patents</st>
<p>

<list>
<entry level="1" type="bullet">

 Arima, et al., <weblink xlink:type="simple" xlink:href="http://patft.uspto.gov/netacgi/nph-Parser?patentnumber=5293457">
U.S. Patent 5,293,457</weblink><weblink xlink:type="simple" xlink:href="http://www.pat2pdf.org/pat2pdf/foo.pl?number=5293457">
&nbsp;</weblink>,"<it>Neural network integrated circuit device having self-organizing function</it>".  March 8, 1994.</entry>
</list>
</p>

</sec>
<sec>
<st>
Bibliography</st>

<p>

<list>
<entry level="1" type="bullet">

 <cite style="font-style:normal" class="book"><physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<academician wordnetid="109759069" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<adult wordnetid="109605289" confidence="0.8">
<professional wordnetid="110480253" confidence="0.8">
<educator wordnetid="110045713" confidence="0.8">
<link xlink:type="simple" xlink:href="../395/9251395.xml">
Bar-Yam, Yaneer</link></educator>
</professional>
</adult>
</scientist>
</academician>
</causal_agent>
</person>
</physical_entity>
&#32;(2003). <weblink xlink:type="simple" xlink:href="http://necsi.org/publications/dcs/Bar-YamChap2.pdf">
Dynamics of Complex Systems, Chapter 2</weblink>.</cite>&nbsp;</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 <cite style="font-style:normal" class="book"><physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<academician wordnetid="109759069" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<adult wordnetid="109605289" confidence="0.8">
<professional wordnetid="110480253" confidence="0.8">
<educator wordnetid="110045713" confidence="0.8">
<link xlink:type="simple" xlink:href="../395/9251395.xml">
Bar-Yam, Yaneer</link></educator>
</professional>
</adult>
</scientist>
</academician>
</causal_agent>
</person>
</physical_entity>
&#32;(2003). <weblink xlink:type="simple" xlink:href="http://necsi.org/publications/dcs/Bar-YamChap3.pdf">
Dynamics of Complex Systems, Chapter 3</weblink>.</cite>&nbsp;</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 <cite style="font-style:normal" class="book"><physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<academician wordnetid="109759069" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<adult wordnetid="109605289" confidence="0.8">
<professional wordnetid="110480253" confidence="0.8">
<educator wordnetid="110045713" confidence="0.8">
<link xlink:type="simple" xlink:href="../395/9251395.xml">
Bar-Yam, Yaneer</link></educator>
</professional>
</adult>
</scientist>
</academician>
</causal_agent>
</person>
</physical_entity>
&#32;(2005). <weblink xlink:type="simple" xlink:href="http://necsi.org/publications/mtw/">
Making Things Work</weblink>.</cite>&nbsp; Please see Chapter 3</entry>
<entry level="1" type="bullet">

 <cite style="font-style:normal">Bhadeshia H. K. D. H.&#32;(1992).&#32;"<weblink xlink:type="simple" xlink:href="http://www.msm.cam.ac.uk/phase-trans/abstracts/neural.review.pdf">
Neural Networks in Materials Science</weblink>". <it>ISIJ International</it>&#32;<b>39</b>: 966&ndash;979.</cite>&nbsp;</entry>
<entry level="1" type="bullet">

 Bhagat, P.M. (2005) <it>Pattern Recognition in Industry</it>, Elsevier. ISBN 0-08-044538-1</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 Bishop, C.M. (1995) <it>Neural Networks for Pattern Recognition</it>, Oxford: Oxford University Press. ISBN 0-19-853849-9 (hardback) or ISBN 0-19-853864-2 (paperback)</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 Cybenko, G.V. (1989). Approximation by Superpositions of a Sigmoidal function, <it>Mathematics of Control, Signals and Systems</it>, Vol. 2 pp. 303-314. <weblink xlink:type="simple" xlink:href="http://actcomm.dartmouth.edu/gvc/papers/approx_by_superposition.pdf">
electronic version</weblink></entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 Duda, R.O., Hart, P.E., Stork, D.G. (2001) <it>Pattern classification (2nd edition)</it>, Wiley, ISBN 0-471-05669-3</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

  <cite style="font-style:normal">Egmont-Petersen, M., de Ridder, D., Handels, H.&#32;(2002).&#32;"Image processing with neural networks - a review". <it>Pattern Recognition</it>&#32;<b>35</b>: 2279&ndash;2301. <document wordnetid="106470073" confidence="0.8">
<written_communication wordnetid="106349220" confidence="0.8">
<writing wordnetid="106362953" confidence="0.8">
<link xlink:type="simple" xlink:href="../994/422994.xml">
doi</link></writing>
</written_communication>
</document>
:<weblink xlink:type="simple" xlink:href="http://dx.doi.org/10.1016%2FS0031-3203%2801%2900178-9">
10.1016/S0031-3203(01)00178-9</weblink>.</cite>&nbsp;</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 Gurney, K. (1997) <it>An Introduction to Neural Networks</it> London: Routledge. ISBN 1-85728-673-1 (hardback) or ISBN 1-85728-503-4 (paperback)</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 Haykin, S. (1999) <it> Neural Networks: A Comprehensive Foundation</it>, Prentice Hall, ISBN 0-13-273350-1</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 Fahlman, S, Lebiere, C (1991).  <it>The Cascade-Correlation Learning Architecture</it>, created for <agency wordnetid="108337324" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../427/157427.xml">
National Science Foundation</link></agency>
, Contract Number EET-8716324,  and <link xlink:type="simple" xlink:href="../957/8957.xml">
Defense Advanced Research Projects Agency</link> (DOD), ARPA Order No. 4976 under Contract F33615-87-C-1499. <weblink xlink:type="simple" xlink:href="http://www.cs.iastate.edu/~honavar/fahlman.pdf">
electronic version</weblink> </entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 Hertz, J., Palmer, R.G., Krogh. A.S. (1990) <it>Introduction to the theory of neural computation</it>, Perseus Books. ISBN 0-201-51560-1</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 Lawrence, Jeanette (1994) <it>Introduction to Neural Networks</it>, California Scientific Software Press. ISBN 1-883157-00-5</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 Masters, Timothy (1994) <it>Signal and Image Processing with Neural Networks</it>, John Wiley &amp; Sons, Inc. ISBN 0-471-04963-8</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 Ness, Erik. 2005. <weblink xlink:type="simple" xlink:href="http://www.conbio.org/cip/article61WEB.cfm">
SPIDA-Web</weblink>.  <it>Conservation in Practice</it> 6(1):35-36.  On the use of artificial neural networks in species taxonomy.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 <physical_entity wordnetid="100001930" confidence="0.8">
<peer wordnetid="109626238" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<statistician wordnetid="110653238" confidence="0.8">
<colleague wordnetid="109935990" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<mathematician wordnetid="110301261" confidence="0.8">
<research_worker wordnetid="110523076" confidence="0.8">
<associate wordnetid="109816771" confidence="0.8">
<link xlink:type="simple" xlink:href="../281/6608281.xml">
Ripley, Brian D</link></associate>
</research_worker>
</mathematician>
</scientist>
</causal_agent>
</colleague>
</statistician>
</person>
</peer>
</physical_entity>
. (1996) <it>Pattern Recognition and Neural Networks</it>, Cambridge</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 Siegelmann, H.T. and <scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../520/5612520.xml">
Sontag, E.D.</link></scientist>
 (1994). Analog computation via neural networks, <it>Theoretical Computer Science</it>, v. 131, no. 2, pp. 331-360. <weblink xlink:type="simple" xlink:href="http://www.math.rutgers.edu/~sontag/FTP_DIR/nets-real.pdf">
electronic version</weblink></entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 Smith, Murray (1993) <it>Neural Networks for Statistical Modeling</it>, Van Nostrand Reinhold, ISBN 0-442-01310-8</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 Wasserman, Philip (1993) <it>Advanced Methods in Neural Computing</it>, Van Nostrand Reinhold, ISBN 0-442-00461-3</entry>
</list>
</p>


</sec>
<sec>
<st>
External links</st>

<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.learnartificialneuralnetworks.com">
A close view to Artificial Neural Networks Algorithms</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://dmoz.org/Computers/Artificial_Intelligence/Neural_Networks/">
Open Directory link</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.neurosecurity.com/articles.php">
Articles on Artificial Neural Networks</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.msm.cam.ac.uk/phase-trans/abstracts/neural.review.html">
Neural Networks in Materials Science</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.ai-junkie.com/ann/evolved/nnt1.html">
A great practical tutorial on Neural Networks</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.peltarion.com/doc/index.php?title=Applications_of_adaptive_systems">
Applications of neural networks</weblink></entry>
</list>
</p>

</sec>
<sec>
<st>
Further reading</st>
<p>

<list>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://publishing.royalsociety.org/neural-networks">
Dedicated issue of <it>Philosophical Transactions B</it> on Neural Networks and Perception.  Some articles are freely available.</weblink></entry>
</list>
</p>


</sec>
</bdy>
</algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</article>
