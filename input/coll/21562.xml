<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 15:31:30[mciao0826] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<class  confidence="0.8" wordnetid="107997703">
<collection  confidence="0.8" wordnetid="107951464">
<group  confidence="0.8" wordnetid="100031264">
<header>
<title>NP (complexity)</title>
<id>21562</id>
<revision>
<id>244633073</id>
<timestamp>2008-10-11T20:11:10Z</timestamp>
<contributor>
<username>Catslash</username>
<id>1883085</id>
</contributor>
</revision>
<categories>
<category>Complexity classes</category>
</categories>
</header>
<bdy>

<image width="250px" src="Complexity_classes.svg" type="thumb">
<caption>

Diagram of complexity classes provided that <b>P</b> ≠ <b>NP</b>. The existence of problems outside both <b>P</b> and <b>NP</b>-complete in this case was established by Ladner.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref>
</caption>
</image>
<p>

In <link xlink:type="simple" xlink:href="../543/7543.xml">
computational complexity theory</link>, <b>NP</b> is one of the most fundamental <link xlink:type="simple" xlink:href="../426/502426.xml">
complexity class</link>es.
The abbreviation <b>NP</b> refers to "<b>N</b>on-deterministic <b>P</b>olynomial time".</p>
<p>

Intuitively, <b>NP</b> is the set of all <link xlink:type="simple" xlink:href="../336/8336.xml">
decision problem</link>s for which the 'yes'-answers have simple proofs of the fact that the answer is indeed 'yes'. More precisely, these proofs have to be verifiable in <link xlink:type="simple" xlink:href="../576/44576.xml">
polynomial time</link> by a <link xlink:type="simple" xlink:href="../403/30403.xml">
deterministic Turing machine</link>.
In an equivalent formal definition, <b>NP</b> is the set of <link xlink:type="simple" xlink:href="../336/8336.xml">
decision problem</link>s solvable in <link xlink:type="simple" xlink:href="../576/44576.xml">
polynomial time</link> by a <link xlink:type="simple" xlink:href="../935/21935.xml">
non-deterministic Turing machine</link>.</p>
<p>

The complexity class <class wordnetid="107997703" confidence="0.8">
<collection wordnetid="107951464" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<link xlink:type="simple" xlink:href="../550/658550.xml">
<b>P</b></link></group>
</collection>
</class>
 is contained in <b>NP</b>, but <b>NP</b> contains many important problems, called <class wordnetid="107997703" confidence="0.8">
<collection wordnetid="107951464" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<link xlink:type="simple" xlink:href="../466/39466.xml">
<b>NP</b>-complete</link></group>
</collection>
</class>
 problems, for which no polynomial-time <link xlink:type="simple" xlink:href="../775/775.xml">
algorithms</link> are known. The most important open question in complexity theory, the <condition wordnetid="113920835" confidence="0.8">
<state wordnetid="100024720" confidence="0.8">
<class wordnetid="107997703" confidence="0.8">
<problem wordnetid="114410605" confidence="0.8">
<difficulty wordnetid="114408086" confidence="0.8">
<collection wordnetid="107951464" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<link xlink:type="simple" xlink:href="../115/6115.xml">
<b>P</b> = <b>NP</b> problem</link></group>
</collection>
</difficulty>
</problem>
</class>
</state>
</condition>
, asks whether such algorithms actually exist for <b>NP</b>-complete problems. It is widely believed that this is not the case.</p>


<sec>
<st>
 Formal definition </st>

<p>

The complexity class <b>NP</b> can be defined in terms of <assets wordnetid="113329641" confidence="0.8">
<possession wordnetid="100032613" confidence="0.8">
<resource wordnetid="113331778" confidence="0.8">
<link xlink:type="simple" xlink:href="../539/658539.xml">
NTIME</link></resource>
</possession>
</assets>
 as follows:</p>
<p>

<math>\mbox{NP} = \bigcup_{k\in\mathbb{N}} \mbox{NTIME}(n^k).</math></p>

</sec>
<sec>
<st>
 Introduction </st>

<p>

Many natural <link xlink:type="simple" xlink:href="../323/5323.xml">
computer science</link> problems are covered by the class <b>NP</b>.
In particular, the decision versions of many interesting search problems and optimization problems are contained in <b>NP</b>.</p>

<ss2>
<st>
 Verifier-based definition </st>
<p>

In order to explain the verifier-based definition of <b>NP</b>, let us consider the <link xlink:type="simple" xlink:href="../811/36811.xml">
subset sum problem</link>:
Assume that we are given some <link xlink:type="simple" xlink:href="../563/14563.xml">
integer</link>s, such as {−7, −3, −2, 5, 8}, and we wish to know whether some of these integers sum up to zero. In this example, the answer is 'yes', since the subset of integers {-3, -2, 5} corresponds to the sum (-3) + (-2) + 5 = 0. The task of deciding whether such a subset with sum zero exists is called the <it>subset sum problem</it>.</p>
<p>

As the number of integers that we feed into the algorithm becomes larger, the number of subsets grows exponentially, and in fact the subset sum problem is <b>NP</b>-complete.
However, notice that, if we are given a particular subset (often called a <it>certificate</it>), we can easily check or <it>verify</it> whether the subset sum is zero, by just summing up the integers of the subset. So if the sum is indeed zero, that particular subset is the <it>proof</it> or <it>witness</it> for the fact that the answer is 'yes'. An algorithm that verifies whether a given subset has sum zero is called <it>verifier</it>. A problem is said to be in <b>NP</b> <link xlink:type="simple" xlink:href="../922/14922.xml">
iff</link> there exists a verifier for the problem that executes in polynomial time. In case of the subset sum problem, the verifier needs only polynomial time, for which reason the subset sum problem is in <b>NP</b>.</p>
<p>

Note that the verifier-based definition of <b>NP</b> does <it>not</it> require an easy-to-verify certificate for the 'no'-answers. The class of problems with such certificates for the 'no'-answers is called <link xlink:type="simple" xlink:href="../184/6184.xml">
<b>co-NP</b></link>. In fact, it is an open question whether all problems in <b>NP</b> also have certificates for the 'no'-answers and thus are in <b>co-NP</b>.</p>

</ss2>
<ss2>
<st>
 Machine-definition </st>
<p>

Equivalent to the verifier-based definition is the following characterization: <b>NP</b> is the set of <link xlink:type="simple" xlink:href="../336/8336.xml">
decision problem</link>s solvable in <link xlink:type="simple" xlink:href="../576/44576.xml">
polynomial time</link> by a <link xlink:type="simple" xlink:href="../935/21935.xml">
non-deterministic Turing machine</link>.</p>

</ss2>
<ss2>
<st>
 Examples </st>
<p>

This is an incomplete list of further problems that are in <b>NP</b>.</p>
<p>

<list>
<entry level="1" type="bullet">

 All problems in <class wordnetid="107997703" confidence="0.8">
<collection wordnetid="107951464" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<link xlink:type="simple" xlink:href="../550/658550.xml">
<b>P</b></link></group>
</collection>
</class>
</entry>
<entry level="1" type="bullet">

 The decision problem version of the <link xlink:type="simple" xlink:href="../491/15491.xml">
integer factorization problem</link>: given integer <it>n</it> and <it>k</it>, is there a factor <it>f</it> with 1  <it>f</it>  <it>k</it> and <it>f</it> dividing <it>n</it>?</entry>
<entry level="1" type="bullet">

 The <link>
graph isomorphism problem</link> of determining whether two graphs can be drawn identically</entry>
<entry level="1" type="bullet">

 All <class wordnetid="107997703" confidence="0.8">
<collection wordnetid="107951464" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<link xlink:type="simple" xlink:href="../466/39466.xml">
NP-complete</link></group>
</collection>
</class>
 problems, e.g.:</entry>
<entry level="2" type="bullet">

A variant of the <link xlink:type="simple" xlink:href="../248/31248.xml">
traveling salesman problem</link>, where we want to know if there is a  route of some length that goes through all the nodes in a certain network</entry>
<entry level="2" type="bullet">

The <link xlink:type="simple" xlink:href="../715/4715.xml">
boolean satisfiability problem</link>, where we want to know if a certain formula in <link xlink:type="simple" xlink:href="../335/5597335.xml">
propositional logic</link> with boolean variables can be true for some value of the variables or not</entry>
</list>
</p>

</ss2>
</sec>
<sec>
<st>
 Why some NP problems are hard to solve </st>

<p>

Because of the many important problems in this class, there have been extensive efforts to find polynomial-time algorithms for problems in <b>NP</b>.  However, there remain a large number of problems in <b>NP</b> that defy such attempts, seeming to require superpolynomial time. Whether these problems really aren't decidable in polynomial time is one of the greatest open questions in <link xlink:type="simple" xlink:href="../323/5323.xml">
computer science</link>  (see <b><condition wordnetid="113920835" confidence="0.8">
<state wordnetid="100024720" confidence="0.8">
<class wordnetid="107997703" confidence="0.8">
<problem wordnetid="114410605" confidence="0.8">
<difficulty wordnetid="114408086" confidence="0.8">
<collection wordnetid="107951464" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<link xlink:type="simple" xlink:href="../115/6115.xml">
P=NP problem</link></group>
</collection>
</difficulty>
</problem>
</class>
</state>
</condition>
</b> for an in-depth discussion).</p>
<p>

An important notion in this context is the set of <class wordnetid="107997703" confidence="0.8">
<collection wordnetid="107951464" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<link xlink:type="simple" xlink:href="../466/39466.xml">
NP-complete</link></group>
</collection>
</class>
 decision problems, which is a subset of <b>NP</b> and might be informally described as the "hardest" problems in <b>NP</b>. If there is a polynomial-time algorithm for even <it>one</it> of them, then there is a polynomial-time algorithm for <it>all</it> the problems in <b>NP</b>. Because of this, and because dedicated research has failed to find a polynomial algorithm for any <b>NP-complete</b> problem, once a problem has been proven to be <b>NP-complete</b> this is widely regarded as a sign that a polynomial algorithm for this problem is unlikely to exist.</p>

</sec>
<sec>
<st>
 Equivalency of definitions </st>

<p>

The two definitions of <b>NP</b> as the class of problems solvable by a nondeterministic <invention wordnetid="105633385" confidence="0.8">
<know-how wordnetid="105616786" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<link xlink:type="simple" xlink:href="../403/30403.xml">
Turing machine</link></method>
</know-how>
</invention>
 (TM) in polynomial time and the class of problems verifiable by a deterministic Turing machine in polynomial time are equivalent. The proof is described by many textbooks, for example Sipser's <it>Introduction to the Theory of Computation</it>, section 7.3.</p>
<p>

To show this, first suppose we have a deterministic verifier. A nondeterministic machine can simply nondeterministically run the verifier on all possible proof strings (this requires only polynomially-many steps because it can nondeterministically choose the next character in the proof string in each step, and the length of the proof string must be polynomially bounded). If any proof is valid, some path will accept; if no proof is valid, the string is not in the language and it will reject.</p>
<p>

Conversely, suppose we have a nondeterministic TM called A accepting a given language L. At each of its polynomially-many steps, the machine's <link xlink:type="simple" xlink:href="../796/3365796.xml">
computation tree</link> branches in at most a constant number of directions. There must be at least one accepting path, and the string describing this path is the proof supplied to the verifier. The verifier can then deterministically simulate A, following only the accepting path, and verifying that its accepts at the end. If A rejects the input, there is no accepting path, and the verifier will never accept.</p>

</sec>
<sec>
<st>
 Relationship to other classes </st>

<p>

<b>NP</b> contains all problems in <b><class wordnetid="107997703" confidence="0.8">
<collection wordnetid="107951464" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<link xlink:type="simple" xlink:href="../550/658550.xml">
P</link></group>
</collection>
</class>
</b>, since one can verify any instance of the problem by simply ignoring the proof and solving it. <b>NP</b> is contained in <b><mathematical_relation wordnetid="113783581" confidence="0.8">
<class wordnetid="107997703" confidence="0.8">
<collection wordnetid="107951464" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<operator wordnetid="113786413" confidence="0.8">
<function wordnetid="113783816" confidence="0.8">
<link xlink:type="simple" xlink:href="../351/39351.xml">
PSPACE</link></function>
</operator>
</group>
</collection>
</class>
</mathematical_relation>
</b> - to show this, it suffices to construct a <b>PSPACE</b> machine that loops over all proof strings and feeds each one to a polynomial-time verifier. Since a polynomial-time machine can only read polynomially-many bits, it cannot use more than polynomial space, nor can it read a proof string occupying more than polynomial space (so we don't have to consider proofs longer than this). <b>NP</b> is also contained in <class wordnetid="107997703" confidence="0.8">
<collection wordnetid="107951464" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<link xlink:type="simple" xlink:href="../694/54694.xml">
EXPTIME</link></group>
</collection>
</class>
, since the same algorithm operates in exponential time.</p>
<p>

The <link xlink:type="simple" xlink:href="../955/1929955.xml">
complement</link> of <b>NP</b>, <link xlink:type="simple" xlink:href="../184/6184.xml">
co-NP</link>, contains those problems which have a simple proof for <it>no</it> instances, sometimes called counterexamples. For example, <link xlink:type="simple" xlink:href="../751/183751.xml">
primality test</link>ing trivially lies in co-NP, since one can refute the primality of an integer by merely supplying a nontrivial factor. <b>NP</b> and co-NP together form the first level in the <link xlink:type="simple" xlink:href="../651/658651.xml">
polynomial hierarchy</link>, higher only than <b>P</b>.</p>
<p>

<b>NP</b> is defined using only deterministic machines. If we permit the verifier to be probabilistic (specifically, a <class wordnetid="107997703" confidence="0.8">
<collection wordnetid="107951464" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<link xlink:type="simple" xlink:href="../079/4079.xml">
BPP</link></group>
</collection>
</class>
 machine), we get the class <b>MA</b> solvable using a <link xlink:type="simple" xlink:href="../203/663203.xml">
Arthur-Merlin protocol</link> with no communication from Merlin to Arthur.</p>
<p>

<b>NP</b> is a class of <link xlink:type="simple" xlink:href="../336/8336.xml">
decision problem</link>s; the analogous class of function problems is <class wordnetid="107997703" confidence="0.8">
<collection wordnetid="107951464" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<link xlink:type="simple" xlink:href="../351/663351.xml">
FNP</link></group>
</collection>
</class>
.</p>

</sec>
<sec>
<st>
 Other characterizations </st>

<p>

There is also a simple <link xlink:type="simple" xlink:href="../050/3122050.xml">
logical characterization of <b>NP</b></link>: it contains precisely those languages expressible in <link xlink:type="simple" xlink:href="../428/341428.xml">
second-order logic</link> restricted to exclude <link xlink:type="simple" xlink:href="../174/76174.xml">
universal quantification</link> over relations, functions, and subsets.</p>
<p>

<b>NP</b> can be seen as a very simple type of <link xlink:type="simple" xlink:href="../255/160255.xml">
interactive proof system</link>, where the prover comes up with the proof certificate and the verifier is a deterministic polynomial-time machine that checks it. It is complete because the right proof string will make it accept if there is one, and it is sound because the verifier cannot accept if there is no acceptable proof string.</p>
<p>

A major result of complexity theory is that <b>NP</b> can be characterized as the problems solvable by <link xlink:type="simple" xlink:href="../509/504509.xml">
probabilistically checkable proof</link>s where the verifier uses O(log <it>n</it>) random bits and examines only a constant number of bits of the proof string (the class <b>PCP</b>(log <it>n</it>, 1)). More informally, this means that the <b>NP</b> verifier described above can be replaced with one that just "spot-checks" a few places in the proof string, and using a limited number of coin flips can determine the correct answer with high probability. This allows several results about the hardness of <link xlink:type="simple" xlink:href="../105/563105.xml">
approximation algorithm</link>s to be proven.</p>

</sec>
<sec>
<st>
Example</st>

<p>

The decision version of the <link xlink:type="simple" xlink:href="../248/31248.xml">
traveling salesman problem</link> is in <b>NP</b>. Given an input matrix of distances between N cities, the problem is to determine if there is a route visiting all cities with total distance less than <it>k</it>.  A nondeterministic Turing machine can find such a route as follows:</p>
<p>

<list>
<entry level="1" type="bullet">

 At each city it visits it "guesses" the next city to visit, until it has visited every vertex. If it gets stuck, it stops immediately.</entry>
<entry level="1" type="bullet">

 At the end it verifies that the route it has taken has cost less than <it>k</it> in <link xlink:type="simple" xlink:href="../578/44578.xml">
O</link>(<it>n</it>) time. </entry>
</list>
</p>
<p>

One can think of each guess as "forking" a new copy of the Turing machine to follow each of the possible paths forward, and if at least one machine finds a route of distance less than <it>k</it>, that machine accepts the input. (Equivalently, this can be thought of as a single Turing machine that always guesses correctly)</p>
<p>

<link xlink:type="simple" xlink:href="../266/4266.xml">
Binary search</link> on the range of possible distances can convert the decision version of Traveling Salesman to the optimization version, by calling the decision version repeatedly (a polynomial number of times).</p>

</sec>
<sec>
<st>
 References </st>

<p>

<reflist>
<entry id="1">
R. E. Ladner "On the structure of polynomial time reducibility," J.ACM, 22, pp. 151&ndash;171, 1975. Corollary 1.1. <weblink xlink:type="simple" xlink:href="http://portal.acm.org/citation.cfm?id=321877&amp;dl=ACM&amp;coll=&amp;CFID=15151515&amp;CFTOKEN=6184618">
ACM site</weblink>. </entry>
</reflist>
</p>
<p>

<list>
<entry level="1" type="bullet">

 Complexity Zoo: <weblink xlink:type="simple" xlink:href="http://qwiki.caltech.edu/wiki/Complexity_Zoo#np">
NP</weblink></entry>
<entry level="1" type="bullet">

 <scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../475/4108475.xml">
Thomas H. Cormen</link></scientist>
, <scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../884/1400884.xml">
Charles E. Leiserson</link></scientist>
, <link xlink:type="simple" xlink:href="../057/68057.xml">
Ronald L. Rivest</link>, and <scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../993/3489993.xml">
Clifford Stein</link></scientist>
. <it><work wordnetid="104599396" confidence="0.8">
<product wordnetid="104007894" confidence="0.8">
<creation wordnetid="103129123" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<book wordnetid="106410904" confidence="0.8">
<publication wordnetid="106589574" confidence="0.8">
<link xlink:type="simple" xlink:href="../226/3499226.xml">
Introduction to Algorithms</link></publication>
</book>
</artifact>
</creation>
</product>
</work>
</it>, Second Edition. MIT Press and McGraw-Hill, 2001. ISBN 0-262-03293-7. Section 34.2: Polynomial-time verification, pp.979&ndash;983.</entry>
<entry level="1" type="bullet">

  <cite style="font-style:normal" class="book"><physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<mathematician wordnetid="110301261" confidence="0.8">
<link xlink:type="simple" xlink:href="../015/3644015.xml">
Michael Sipser</link></mathematician>
</scientist>
</causal_agent>
</person>
</physical_entity>
&#32;(1997). Introduction to the Theory of Computation.&#32;PWS Publishing. ISBN 0-534-94728-X.</cite>&nbsp; Sections 7.3&ndash;7.5 (The Class NP, NP-completeness, Additional NP-complete Problems), pp.241&ndash;271.</entry>
<entry level="1" type="bullet">

 <peer wordnetid="109626238" confidence="0.8">
<physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<colleague wordnetid="109935990" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<adult wordnetid="109605289" confidence="0.8">
<inventor wordnetid="110214637" confidence="0.8">
<professional wordnetid="110480253" confidence="0.8">
<educator wordnetid="110045713" confidence="0.8">
<associate wordnetid="109816771" confidence="0.8">
<creator wordnetid="109614315" confidence="0.8">
<biologist wordnetid="109855630" confidence="0.8">
<academician wordnetid="109759069" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../829/4321829.xml">
David Harel</link></causal_agent>
</academician>
</biologist>
</creator>
</associate>
</educator>
</professional>
</inventor>
</adult>
</scientist>
</colleague>
</person>
</physical_entity>
</peer>
, <link>
Yishai Feldman</link>. Algorithmics: The Spirit of Computing,  Addison-Wesley, Reading, MA, 3rd edition, 2004.</entry>
</list>
</p>


<p>

<table style=";" class="navbox" cellspacing="0">
<row>
<col style="padding:2px;">
<table style="width:100%;background:transparent;color:inherit;;" class="nowraplinks collapsible autocollapse " cellspacing="0">
<row>
<header colspan="2" style=";" class="navbox-title">
Important <link xlink:type="simple" xlink:href="../426/502426.xml">
complexity class</link>es (<link xlink:type="simple" xlink:href="../359/663359.xml">
more</link>)</header>
</row>
<row style="height:2px;">

</row>
<row>
<col colspan="2" style="width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<class wordnetid="107997703" confidence="0.8">
<collection wordnetid="107951464" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<link xlink:type="simple" xlink:href="../550/658550.xml">
P</link></group>
</collection>
</class>
&nbsp;• <class wordnetid="107997703" confidence="0.8">
<collection wordnetid="107951464" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<link xlink:type="simple" xlink:href="../562/21562.xml">
NP</link></group>
</collection>
</class>
&nbsp;• <link xlink:type="simple" xlink:href="../184/6184.xml">
co-NP</link>&nbsp;• <class wordnetid="107997703" confidence="0.8">
<collection wordnetid="107951464" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<link xlink:type="simple" xlink:href="../466/39466.xml">
NP-C</link></group>
</collection>
</class>
&nbsp;• <class wordnetid="107997703" confidence="0.8">
<collection wordnetid="107951464" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<link xlink:type="simple" xlink:href="../680/54680.xml">
co-NP-C</link></group>
</collection>
</class>
&nbsp;• <class wordnetid="107997703" confidence="0.8">
<collection wordnetid="107951464" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<link xlink:type="simple" xlink:href="../681/54681.xml">
NP-hard</link></group>
</collection>
</class>
&nbsp;• <class wordnetid="107997703" confidence="0.8">
<collection wordnetid="107951464" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<link xlink:type="simple" xlink:href="../240/312240.xml">
UP</link></group>
</collection>
</class>
&nbsp;• <class wordnetid="107997703" confidence="0.8">
<collection wordnetid="107951464" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<link xlink:type="simple" xlink:href="../924/27924.xml">
<list>
<entry level="1" type="number">

P</entry>
</list>
</link></group>
</collection>
</class>
&nbsp;• <class wordnetid="107997703" confidence="0.8">
<collection wordnetid="107951464" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<link xlink:type="simple" xlink:href="../925/27925.xml">
<list>
<entry level="1" type="number">

P-C</entry>
</list>
</link></group>
</collection>
</class>
&nbsp;• <mathematical_relation wordnetid="113783581" confidence="0.8">
<class wordnetid="107997703" confidence="0.8">
<collection wordnetid="107951464" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<operator wordnetid="113786413" confidence="0.8">
<function wordnetid="113783816" confidence="0.8">
<link xlink:type="simple" xlink:href="../999/1149999.xml">
L</link></function>
</operator>
</group>
</collection>
</class>
</mathematical_relation>
&nbsp;• <mathematical_relation wordnetid="113783581" confidence="0.8">
<class wordnetid="107997703" confidence="0.8">
<collection wordnetid="107951464" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<operator wordnetid="113786413" confidence="0.8">
<function wordnetid="113783816" confidence="0.8">
<link xlink:type="simple" xlink:href="../955/1145955.xml">
NL</link></function>
</operator>
</group>
</collection>
</class>
</mathematical_relation>
&nbsp;• <class wordnetid="107997703" confidence="0.8">
<collection wordnetid="107951464" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<link xlink:type="simple" xlink:href="../073/22073.xml">
NC</link></group>
</collection>
</class>
&nbsp;• <class wordnetid="107997703" confidence="0.8">
<collection wordnetid="107951464" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<link xlink:type="simple" xlink:href="../683/54683.xml">
P-C</link></group>
</collection>
</class>
&nbsp;• <mathematical_relation wordnetid="113783581" confidence="0.8">
<class wordnetid="107997703" confidence="0.8">
<collection wordnetid="107951464" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<operator wordnetid="113786413" confidence="0.8">
<function wordnetid="113783816" confidence="0.8">
<link xlink:type="simple" xlink:href="../351/39351.xml">
PSPACE</link></function>
</operator>
</group>
</collection>
</class>
</mathematical_relation>
&nbsp;• <class wordnetid="107997703" confidence="0.8">
<collection wordnetid="107951464" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<link xlink:type="simple" xlink:href="../685/54685.xml">
PSPACE-C</link></group>
</collection>
</class>
&nbsp;• <class wordnetid="107997703" confidence="0.8">
<collection wordnetid="107951464" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<link xlink:type="simple" xlink:href="../694/54694.xml">
EXPTIME</link></group>
</collection>
</class>
&nbsp;• <class wordnetid="107997703" confidence="0.8">
<collection wordnetid="107951464" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<link xlink:type="simple" xlink:href="../657/663657.xml">
NEXPTIME</link></group>
</collection>
</class>
&nbsp;• <class wordnetid="107997703" confidence="0.8">
<collection wordnetid="107951464" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<link xlink:type="simple" xlink:href="../703/54703.xml">
EXPSPACE</link></group>
</collection>
</class>
&nbsp;• <class wordnetid="107997703" confidence="0.8">
<collection wordnetid="107951464" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<link xlink:type="simple" xlink:href="../202/11387202.xml">
2-EXPTIME</link></group>
</collection>
</class>
&nbsp;• <class wordnetid="107997703" confidence="0.8">
<collection wordnetid="107951464" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<link xlink:type="simple" xlink:href="../897/3106897.xml">
PR</link></group>
</collection>
</class>
&nbsp;• <class wordnetid="107997703" confidence="0.8">
<collection wordnetid="107951464" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<link xlink:type="simple" xlink:href="../703/3106703.xml">
RE</link></group>
</collection>
</class>
&nbsp;• <class wordnetid="107997703" confidence="0.8">
<collection wordnetid="107951464" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<link xlink:type="simple" xlink:href="../741/3106741.xml">
Co-RE</link></group>
</collection>
</class>
&nbsp;• <class wordnetid="107997703" confidence="0.8">
<collection wordnetid="107951464" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<link xlink:type="simple" xlink:href="../251/3123251.xml">
RE-C</link></group>
</collection>
</class>
&nbsp;• <link xlink:type="simple" xlink:href="../283/3123283.xml">
Co-RE-C</link>&nbsp;• <class wordnetid="107997703" confidence="0.8">
<collection wordnetid="107951464" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<link xlink:type="simple" xlink:href="../763/3106763.xml">
R</link></group>
</collection>
</class>
&nbsp;• <class wordnetid="107997703" confidence="0.8">
<collection wordnetid="107951464" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<link xlink:type="simple" xlink:href="../080/4080.xml">
BQP</link></group>
</collection>
</class>
&nbsp;• <class wordnetid="107997703" confidence="0.8">
<collection wordnetid="107951464" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<link xlink:type="simple" xlink:href="../079/4079.xml">
BPP</link></group>
</collection>
</class>
&nbsp;• <class wordnetid="107997703" confidence="0.8">
<collection wordnetid="107951464" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<link xlink:type="simple" xlink:href="../771/54771.xml">
RP</link></group>
</collection>
</class>
&nbsp;• <class wordnetid="107997703" confidence="0.8">
<collection wordnetid="107951464" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<link xlink:type="simple" xlink:href="../772/54772.xml">
ZPP</link></group>
</collection>
</class>
&nbsp;• <class wordnetid="107997703" confidence="0.8">
<collection wordnetid="107951464" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<link xlink:type="simple" xlink:href="../509/504509.xml">
PCP</link></group>
</collection>
</class>
&nbsp;• <class wordnetid="107997703" confidence="0.8">
<collection wordnetid="107951464" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<link xlink:type="simple" xlink:href="../070/2197070.xml">
IP</link></group>
</collection>
</class>
&nbsp;• <class wordnetid="107997703" confidence="0.8">
<collection wordnetid="107951464" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<link xlink:type="simple" xlink:href="../608/658608.xml">
PH</link></group>
</collection>
</class>
</col>
</row>
</table>
</col>
</row>
</table>
</p>



</sec>
</bdy>
</group>
</collection>
</class>
</article>
