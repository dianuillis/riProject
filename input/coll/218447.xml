<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 16:31:51[mciao0825] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>Polymorphic code</title>
<id>218447</id>
<revision>
<id>235153494</id>
<timestamp>2008-08-30T09:28:28Z</timestamp>
<contributor>
<username>Facius</username>
<id>464509</id>
</contributor>
</revision>
<categories>
<category>Malware</category>
</categories>
</header>
<bdy>

In computer terminology, <b>polymorphic code</b> is code that mutates while keeping the original <link xlink:type="simple" xlink:href="../775/775.xml">
algorithm</link> intact. This technique is sometimes used by <link xlink:type="simple" xlink:href="../196/18994196.xml">
computer virus</link>es, <link xlink:type="simple" xlink:href="../067/218067.xml">
shellcode</link>s and <link xlink:type="simple" xlink:href="../010/6010.xml">
computer worm</link>s to hide their presence. <p>

Most <link xlink:type="simple" xlink:href="../622/268622.xml">
anti-virus software</link> and <link xlink:type="simple" xlink:href="../021/113021.xml">
intrusion detection system</link>s attempt to locate malicious code by searching through computer files and data packets sent over a <link xlink:type="simple" xlink:href="../592/4122592.xml">
computer network</link>. If the security software finds patterns that correspond to known computer viruses or worms, it takes appropriate steps to neutralize the threat. Polymorphic algorithms make it difficult for such software to locate the offending code as it constantly mutates.</p>
<p>

<link xlink:type="simple" xlink:href="../294/10294.xml">
Encryption</link> is the most commonly used method of achieving polymorphism in code.</p>
<p>

Malicious <link xlink:type="simple" xlink:href="../716/23716.xml">
programmer</link>s have sought to protect their polymorphic code from this virus-scanning strategy by rewriting the unencrypted decryption engine each time the virus or worm is propagated. Anti-virus software uses sophisticated pattern analysis to find underlying patterns within the different mutations of the decryption engine, in hopes of reliably detecting such <link xlink:type="simple" xlink:href="../901/20901.xml">
malware</link>.</p>
<p>

The first known polymorphic virus was written by Mark Washburn. The virus, called <link xlink:type="simple" xlink:href="../610/8463610.xml">
1260</link>, was written in 1990. A more well-known polymorphic virus was invented in 1992 by the <ethnic_group wordnetid="107967382" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../876/151876.xml">
Bulgarian</link></ethnic_group>
 <link xlink:type="simple" xlink:href="../540/2471540.xml">
cracker</link> <link xlink:type="simple" xlink:href="../820/465820.xml">
Dark Avenger</link> (a <link xlink:type="simple" xlink:href="../594/40594.xml">
pseudonym</link>) as a means of avoiding pattern recognition from antivirus-software. Other computer cracks like the young antoinejebara1 and Schneiding red wrote polymorphic codes that bypassed entire systems.</p>

<sec>
<st>
 Example </st>

<p>

An algorithm that uses, for example, the variables A and B but not the variable C could stay intact even if you added lots of code that changed the contents of the variable C.</p>
<p>

The original algorithm:</p>
<p>

Start:
GOTO Decryption_Code
Encrypted:
...
lots of encrypted code
...
Decryption_Code:
A = Encrypted
Loop:
B = *A
B = B XOR CryptoKey
<list>
<entry level="1" type="bullet">

A = B</entry>
</list>

A = A + 1
GOTO Loop IF NOT A = Decryption_Code
GOTO Encrypted
CryptoKey:
some_random_number</p>
<p>

The same algorithm, but with lots of unnecessary C-altering code:</p>
<p>

Start:
GOTO Decryption_Code
Encrypted:
...
lots of encrypted code
...
Decryption_Code:
C = C + 1
A = Encrypted
Loop:
B = *A
C = 3214 * A
B = B XOR CryptoKey
<list>
<entry level="1" type="bullet">

A = B</entry>
</list>

C = 1
C = A + B
A = A + 1
GOTO Loop IF NOT A = Decryption_Code
C = C^2
GOTO Encrypted
CryptoKey:
some_random_number</p>
<p>

The code inside "Encrypted" ("lots of encrypted code") could then search the code between Decryption_Code and CryptoKey and remove all the code that alters the variable C. Before the next time the encryption engine is used, it could input new unnecessary code that alters C, or even exchange the code in the algorithm for new code that does the same thing. Usually the coder uses a zero key (for example; A <link xlink:type="simple" xlink:href="../979/105979.xml">
xor</link> 0 = A) for the first generation of the virus, making it easier for him because with this key the code is not encrypted. He then implements an incremental key algorithm or a random one.  </p>
<p>

Another polymorphism technique is to autoinject <message wordnetid="106598915" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<link xlink:type="simple" xlink:href="../580/390580.xml">
NOP</link></direction>
</message>
 (No Operation) or other opcodes that don't alter the algorithm.</p>

</sec>
<sec>
<st>
 See also </st>
<p>

<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../761/174761.xml">
Timeline of notable computer viruses and worms</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../400/861400.xml">
Metamorphic code</link></entry>
<entry level="1" type="bullet">

 <paradigm wordnetid="113804375" confidence="0.8">
<linguistic_relation wordnetid="113797142" confidence="0.8">
<inflection wordnetid="113803782" confidence="0.8">
<grammatical_relation wordnetid="113796779" confidence="0.8">
<link xlink:type="simple" xlink:href="../647/217647.xml">
Self-modifying code</link></grammatical_relation>
</inflection>
</linguistic_relation>
</paradigm>
</entry>
<entry level="1" type="bullet">

 <accomplishment wordnetid="100035189" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<action wordnetid="100037396" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<feat wordnetid="100036762" confidence="0.8">
<link xlink:type="simple" xlink:href="../459/218459.xml">
Alphanumeric code</link></feat>
</psychological_feature>
</act>
</action>
</event>
</accomplishment>
</entry>
<entry level="1" type="bullet">

 <accomplishment wordnetid="100035189" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<action wordnetid="100037396" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<feat wordnetid="100036762" confidence="0.8">
<link xlink:type="simple" xlink:href="../067/218067.xml">
Shellcode</link></feat>
</psychological_feature>
</act>
</action>
</event>
</accomplishment>
</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../213/29213.xml">
Software cracking</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../540/2471540.xml">
Security cracking</link></entry>
</list>
</p>

</sec>
<sec>
<st>
 References </st>
<p>

<list>
<entry level="1" type="bullet">

 Diomidis Spinellis. <weblink xlink:type="simple" xlink:href="http://www.spinellis.gr/pubs/jrnl/2002-ieeetit-npvirus/html/npvirus.html">
Reliable identification of bounded-length viruses is NP-complete</weblink>. <it>IEEE Transactions on Information Theory</it>, 49(1):280â€“284, January 2003. <weblink xlink:type="simple" xlink:href="http://dx.doi.org/10.1109/TIT.2002.806137">
doi:10.1109/TIT.2002.806137</weblink></entry>
</list>
</p>


</sec>
</bdy>
</article>
