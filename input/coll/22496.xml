<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 15:32:01[mciao0826] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<system  confidence="0.9511911446218017" wordnetid="104377057">
<header>
<title>Oberon programming language</title>
<id>22496</id>
<revision>
<id>241286448</id>
<timestamp>2008-09-27T08:05:54Z</timestamp>
<contributor>
<username>Chris Burrows</username>
<id>448944</id>
</contributor>
</revision>
<categories>
<category>Systems programming languages</category>
<category>Oberon programming language family</category>
<category>Class-based programming languages</category>
<category>Procedural programming languages</category>
</categories>
</header>
<bdy>
<template>
<name>Infobox programming language</name>
<parameters>
<paradigm>
imperative, structured, modular</paradigm>
<designer>
<person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../642/21642.xml">
Niklaus Wirth</link></scientist>
</person>
</designer>
<name>
Oberon</name>
<typing>
strong, static</typing>
<year>
1986</year>
<influenced>
<programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../019/449019.xml">
Oberon-2</link></programming_language>
, <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../742/2799742.xml">
Zonnon</link></instrumentality>
</artifact>
</system>
</influenced>
<influenced_by>
<programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../259/81259.xml">
Modula-2</link></programming_language>
</influenced_by>
</parameters>
</template>


<p>

<b>Oberon</b> is a <link xlink:type="simple" xlink:href="../015/23015.xml">
programming language</link> created in 1986 by Professor <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../642/21642.xml">
Niklaus Wirth</link></scientist>
</person>
 (creator of the <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../773/23773.xml">
Pascal</link></programming_language>
, <link xlink:type="simple" xlink:href="../824/20824.xml">
Modula</link>, and <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../259/81259.xml">
Modula-2</link></programming_language>
 programming languages) and his associates at <university wordnetid="108286163" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../910/210910.xml">
ETH Zurich</link></university>
 in <country wordnetid="108544813" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../748/26748.xml">
Switzerland</link></country>
. It was developed as part of the implementation of the <link xlink:type="simple" xlink:href="../102/347102.xml">
Oberon operating system</link>. The original intention was to use Modula-2 as the implementation language but it lacked the required safe type-extension facilities. Also, it was planned to eventually publish the full details of the operating system and compiler so that they could be studied and understood. These factors led to the decision to design a new language which concentrated on just the essential features necessary for the task in hand. The name is from the moon of <link xlink:type="simple" xlink:href="../475/44475.xml">
Uranus</link>, <planet wordnetid="109394007" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../781/66781.xml">
Oberon</link></planet>
.</p>
<p>

Oberon is very much like <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../259/81259.xml">
Modula-2</link></programming_language>
 in its syntax, but is considerably smaller. Oberon's feature simplicity leads to considerable space and coding efficiency for its compilers. The full language can be specified in a page of <link xlink:type="simple" xlink:href="../289/71289.xml">
EBNF</link>. The Oberon report is, at 16 pages, about â…“ the size of the Modula-2 report, and one of the early full compilers was only about 4000 lines long. Unlike Modula-2, it has <link xlink:type="simple" xlink:href="../734/6734.xml">
garbage collection</link>.</p>
<p>

Oberon was designed for <link xlink:type="simple" xlink:href="../102/347102.xml">
Oberon operating system</link> which ran on the Ceres workstation (built around the <link xlink:type="simple" xlink:href="../224/35224.xml">
National Semiconductor 32032</link> CPU) and the <computer wordnetid="103082979" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<machine wordnetid="103699975" confidence="0.8">
<digital_computer wordnetid="103196324" confidence="0.8">
<workstation wordnetid="104603399" confidence="0.8">
<link xlink:type="simple" xlink:href="../483/556483.xml">
Chameleon</link></workstation>
</digital_computer>
</machine>
</device>
</instrumentality>
</artifact>
</computer>
 workstation. The Oberon language (and later, <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../019/449019.xml">
Oberon-2</link></programming_language>
) has now been ported to many other operating systems, including the <message wordnetid="106598915" confidence="0.8">
<request wordnetid="106513366" confidence="0.8">
<link xlink:type="simple" xlink:href="../881/15881.xml">
Java</link></request>
</message>
 platform, where Oberon source code compiles to source code in Java, or to <link xlink:type="simple" xlink:href="../997/89997.xml">
bytecode</link> for a Java virtual machine. The Oberon operating system is also available for several hardware platforms other than the original workstation.</p>

<sec>
<st>
Design goals</st>
<p>

Oberon is designed to be a 'safe' language; it employs array bounds checking, garbage collection and strong type checking. These features, particularly ones which enable logic errors to be detected as early as possible (i.e. at compile-time), can significantly reduce the number of <link xlink:type="simple" xlink:href="../085/37085.xml">
bug</link>s occurring in a program at runtime. However, some features included in other languages in an attempt to reduce bugs (e.g. enumerations and programmer-defined ranges on integers), were omitted. Consequently, more care should be taken by the programmer, when working with numeric expressions, to avoid logic errors.</p>
<p>

Oberon was intended to make mistakes harder in part by making code less opaque, and in part because features not included cannot be misused. This approach can be taken even further, as in <link xlink:type="simple" xlink:href="../451/1451.xml">
APL</link>, which is both exceptionally terse and renowned for being less than easy to understand, but Oberon was deliberately constructed to not oversimplify.</p>
<p>

As this is an intent whose success cannot be easily quantified, there remains some disagreement that Oberon has achieved its intended goals in this respect. One objection to its strategy of language design simplification was expressed by <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<research_worker wordnetid="110523076" confidence="0.8">
<link xlink:type="simple" xlink:href="../916/1565916.xml">
Jean Ichbiah</link></research_worker>
</scientist>
</causal_agent>
</person>
</physical_entity>
, the architect of <physical_entity wordnetid="100001930" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../242/1242.xml">
Ada</link></causal_agent>
</physical_entity>
 when Wirth criticized Ada for being too big; he responded "There are times when Wirth believes in small solutions for big problems. I don't believe in that sort of miracle. Big problems need big solutions!" Oberon developers have even felt that Oberon went too far in this respect -- Oberon-2 returned the 'FOR' statement to that version of the language.</p>
<p>

It can be argued that failure to include a feature may force the programmer to reimplement the feature in his code, leading to multiple 'wheel reinvention' and consequent problems. Libraries can mitigate this -- more or less -- effectively depending on the feature and a language's graceful use of such libraries. <message wordnetid="106598915" confidence="0.8">
<request wordnetid="106513366" confidence="0.8">
<link xlink:type="simple" xlink:href="../881/15881.xml">
Java</link></request>
</message>
 is an example of a relatively simple language (though far less so than Oberon) embedded in large standard libraries. (Oberon has a much smaller standard library than Java.) As much of the effort of learning any language is learning the standard libraries, Ichbiah's objection above can be extended to a strategy of simplification by moving features from the core language into standard libraries. Wirth, and Oberon fans, argue that Oberon has essentially, and effectively, avoided this problem.</p>

</sec>
<sec>
<st>
Interesting features</st>

<ss1>
<st>
Key characteristics</st>
<p>

The following features characterise the Oberon language:</p>
<p>

<list>
<entry level="1" type="bullet">

 Pascal-like, but more consistent, syntax</entry>
<entry level="1" type="bullet">

 Type-extension with strong type-checking</entry>
<entry level="1" type="bullet">

 Modules with type-checked interfaces and separate compilation</entry>
<entry level="1" type="bullet">

 Compatibility between all numeric types (mixed expressions)</entry>
<entry level="1" type="bullet">

 String operations</entry>
<entry level="1" type="bullet">

 Support for system programming</entry>
</list>
</p>

</ss1>
<ss1>
<st>
Visibility flags</st>
<p>

Global variables, types, constants, and procedures are by default only visible within the declaring module. They may be made public to other modules by suffixing them with a <b>visibility flag</b>, namely an asterisk (*) for read-write permission. The default was chosen to ensure safety in case a flag was inadvertently omitted.</p>
<p>

Local variables, types, constants, and procedures are always visible only to the declaring procedure.</p>

</ss1>
<ss1>
<st>
Call by reference or by value</st>
<p>

Two possible modes are available for procedure parameters. Call-by-value (CBV) allows expressions to be used as parameters, so that the value of the expression is passed down to the procedure. Call-by-reference (CBR) allows variables to be used, so that the value of the variable may be changed by the procedure. A procedure may declare a CBR parameter by prefixing it with the VAR keyword.</p>

</ss1>
</sec>
<sec>
<st>
Available implementations &amp; further language variants</st>

<ss1>
<st>
Oberon</st>
<p>

No-cost implementations of Oberon (the language) and Oberon (the operating system) can be found on the Internet (several are from ETHZ itself).</p>

</ss1>
<ss1>
<st>
Oberon-2</st>
<p>

A few changes were made to the first released specification (object-oriented programming features were added, the 'FOR' loop was reinstated, for instance); the result was <b><programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../019/449019.xml">
Oberon-2</link></programming_language>
</b>, currently the most common implementation. There is a release called <it><link xlink:type="simple" xlink:href="../351/1517351.xml">
Native Oberon</link></it> which includes an operating system, and can directly boot on PC class hardware. A <platform wordnetid="103961939" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<surface wordnetid="104362025" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<tool wordnetid="104451818" confidence="0.8">
<horizontal_surface wordnetid="103536348" confidence="0.8">
<implement wordnetid="103563967" confidence="0.8">
<link xlink:type="simple" xlink:href="../402/60402.xml">
.NET</link></implement>
</horizontal_surface>
</tool>
</instrumentality>
</surface>
</artifact>
</platform>
 implementation of Oberon with the addition of some minor .NET-related extensions has also been developed at ETHZ. </p>
<p>

Oberon-2 compilers maintained by ETH include versions for Windows, Linux, Solaris, Mac OS X.</p>
<p>

There is an Oberon-2 <link xlink:type="simple" xlink:href="../317/927317.xml">
Lex</link> scanner and <artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<tool wordnetid="104451818" confidence="0.8">
<apparatus wordnetid="102727825" confidence="0.8">
<generator wordnetid="103434188" confidence="0.8">
<implement wordnetid="103563967" confidence="0.8">
<equipment wordnetid="103294048" confidence="0.8">
<link xlink:type="simple" xlink:href="../358/34358.xml">
Yacc</link></equipment>
</implement>
</generator>
</apparatus>
</tool>
</instrumentality>
</artifact>
 <link xlink:type="simple" xlink:href="../015/310015.xml">
parser</link> by Stephen J Bevan of Manchester University, UK, based on the one in the MÃ¶ssenbÃ¶ck and Wirth reference.  It is at version 1.4.</p>

</ss1>
<ss1>
<st>
Oberon-07</st>
<p>

Oberon-07 is a revision to Oberon made by Niklaus Wirth in 2007.  It further simplifies the language by removing some procedures and expressions.</p>
<p>

For full details, see <weblink xlink:type="simple" xlink:href="http://www.inf.ethz.ch/personal/wirth/Articles/Oberon/Oberon07.Report.pdf">
The Programming Language Oberon-07</weblink>.</p>

</ss1>
<ss1>
<st>
Related languages</st>
<p>

Development has continued on languages in this family. A further extension of Oberon-2 produced <idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<component wordnetid="105868954" confidence="0.8">
<part wordnetid="105867413" confidence="0.8">
<link xlink:type="simple" xlink:href="../599/357599.xml">
Component Pascal</link></part>
</component>
</concept>
</idea>
, currently supported by Oberon Microsystems, a commercial company spun off from ETHZ, and by Queensland University of Technology. In addition, the <link xlink:type="simple" xlink:href="../023/3154023.xml">
Lagoona</link> and <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../578/602578.xml">
Obliq</link></programming_language>
 languages carry the Oberon spirit into specialized areas. </p>
<p>

ETHZ has released <link>
Active Oberon</link> which supports active objects, and the <link xlink:type="simple" xlink:href="../723/1532723.xml">
Bluebottle operating system</link> and environment (JDK, HTTP, FTP, etc) for the language. As with many prior designs from ETHZ, versions of both are available for download on the Internet. As this is written, both single and dual <link xlink:type="simple" xlink:href="../198/34198.xml">
x86</link> CPUs and the <link xlink:type="simple" xlink:href="../445/29445.xml">
StrongARM</link> family are supported. </p>
<p>

Recent .NET development efforts at ETHZ have been focused on a new language called <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../742/2799742.xml">
Zonnon</link></instrumentality>
</artifact>
</system>
. This is an extended Oberon language that also supports the concept of active objects. Additional new features include operator overloading and exception handling. Zonnon is available as a plug-in language for the Microsoft Visual Studio for .NET development environment.  </p>
<p>

Oberon-V (originally called Seneca, after <person wordnetid="100007846" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../150/75150.xml">
Seneca the Younger</link></person>
) is a descendant of Oberon designed for numerical applications on supercomputers, especially vector or pipelined architectures. It includes array constructors and an ALL statement. (See "Seneca - A Language for Numerical Applications on Vectorcomputers", Proc CONPAR 90 - VAPP IV Conf. R. Griesemer, Diss Nr. 10277, ETH Zurich.)</p>

</ss1>
</sec>
<sec>
<st>
See also</st>
<p>

<list>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../102/347102.xml">
Oberon operating system</link></entry>
</list>
</p>

</sec>
<sec>
<st>
External links</st>

<ss1>
<st>
General</st>
<p>

<list>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.oberon.ethz.ch">
Oberon Home Page at ETH-ZÃ¼rich</weblink></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.inf.ethz.ch/personal/wirth/Articles/Oberon.html">
Niklaus Wirth's Oberon page at ETH-ZÃ¼rich</weblink></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.oberon.ethz.ch/native/">
Native Oberon Home Page at ETHZ</weblink></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.oberon.ethz.ch/genealogy.html">
Oberon Language Genealogy</weblink></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://v.webring.com/hub?ring=oberon">
Oberon Web Ring</weblink></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.ssw.uni-linz.ac.at/Research/Projects/Oberon.html">
Oberon at SSW, Linz</weblink></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www-vs.informatik.uni-ulm.de/projekte/Oberon-2.Report/">
Language Report</weblink></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.zinnamturm.de/#Pow">
Pow Course  -  by Dan Popa (Romanian version)</weblink></entry>
</list>
</p>

</ss1>
<ss1>
<st>
Evolution of Oberon and Oberon-2</st>
<p>

<list>
<entry level="1" type="bullet">

"<it><weblink xlink:type="simple" xlink:href="ftp://ftp.inf.ethz.ch/pub/software/Oberon/OberonV4/Docu/ModToOberon.ps.gz">
From Modula-2 to Oberon</weblink>"</it> Wirth (1988)</entry>
<entry level="1" type="bullet">

"<it><weblink xlink:type="simple" xlink:href="ftp://ftp.inf.ethz.ch/pub/software/Oberon/OberonV4/Docu/OberonReport.ps.gz">
The Programming Language Oberon</weblink>"</it> Wirth (1988)</entry>
<entry level="1" type="bullet">

"<it><weblink xlink:type="simple" xlink:href="ftp://ftp.inf.ethz.ch/pub/software/Oberon/OberonV4/Docu/Oberon2.Differences.ps.gz">
Differences between Oberon and Oberon-2</weblink>"</it> MÃ¶ssenbÃ¶ck and Wirth (1991)</entry>
<entry level="1" type="bullet">

"<it><weblink xlink:type="simple" xlink:href="http://www-vs.informatik.uni-ulm.de:81/projekte/Oberon-2.Report/">
The Programming Language Oberon-2</weblink></it>" H. MÃ¶ssenbÃ¶ck, N. Wirth, Institut fÃ¼r Computersysteme, ETH ZÃ¼rich, January 1992</entry>
<entry level="1" type="bullet">

"<it><weblink xlink:type="simple" xlink:href="http://www.oberon.ch/pdf/CP-New.pdf">
What's New in Component Pascal</weblink></it>" (Changes from Oberon-2 to CP), Pfister (2001)</entry>
</list>
</p>


</ss1>
</sec>
</bdy>
</system>
</article>
