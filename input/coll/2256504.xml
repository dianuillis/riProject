<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 19:31:50[mciao0827] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>TCP Westwood</title>
<id>2256504</id>
<revision>
<id>143518860</id>
<timestamp>2007-07-09T15:53:43Z</timestamp>
<contributor>
<username>Who</username>
<id>237462</id>
</contributor>
</revision>
<categories>
<category>TCP/IP</category>
</categories>
</header>
<bdy>

<b>TCP Westwood (TCPW)</b>, is a sender-side-only modification to <link>
TCP NewReno</link> that is intended to better handle large <link xlink:type="simple" xlink:href="../063/3586063.xml">
bandwidth-delay product</link> paths (large pipes), with potential packet loss due to transmission or other errors (leaky pipes), and with dynamic load (dynamic pipes).<p>

TCP Westwood relies on mining the ACK stream for information to help it better set the congestion control parameters: Slow Start Threshold (ssthresh), and Congestion Window (cwin). In TCP Westwood, an "Eligible Rate" is estimated and used by the sender to update ssthresh and cwin upon loss indication, or during its "Agile Probing" phase, a proposed modification to the well-known Slow Start phase. In addition, a scheme called Persistent Non Congestion Detection (PNCD) has been devised to detect persistent lack of congestion and induce an Agile Probing phase to expeditiously utilize large dynamic bandwidth.  </p>
<p>

The resultant performance gains in efficiency, without undue sacrifice of fairness, friendliness, and stability have been reported in numerous papers that can be found on <weblink xlink:type="simple" xlink:href="http://www.cs.ucla.edu/NRL/hpi/tcpw/">
this web site</weblink>. Significant efficiency gains can be obtained for large leaky dynamic pipes, while maintaining fairness. Under a more appropriate criterion for friendliness, i.e. "opportunistic friendliness", TCP Westwood is shown to have good, and controllable, friendliness.</p>
<p>

<link xlink:type="simple" xlink:href="../369/3639369.xml">
TCP Westwood plus</link> is an evolution of TCP Westwood, in fact it was soon discovered that the Westwood bandwidth estimation algorithm did not work well in the presence of reverse traffic due to ack compression. The TCP Westwood+ version is implemented in the kernel of <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../297/6097297.xml">
Linux</link></O>
.</p>

<sec>
<st>
See also</st>
<p>

<list>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../369/3639369.xml">
TCP Westwood+</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../471/1723471.xml">
TCP congestion avoidance algorithm</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../538/30538.xml#xpointer(//*[./st=%22Development_of_TCP%22])">
Transmission Control Protocol#Development_of_TCP</link></entry>
</list>
</p>

</sec>
<sec>
<st>
External links</st>
<p>

<list>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.cs.ucla.edu/NRL/hpi/tcpw/">
TCP Westwood</weblink> Home Page.</entry>
</list>
</p>


</sec>
</bdy>
</article>
