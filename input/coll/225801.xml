<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 16:34:40[mciao0827] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>Performance tuning</title>
<id>225801</id>
<revision>
<id>234861007</id>
<timestamp>2008-08-28T21:17:45Z</timestamp>
<contributor>
<username>Wednesday Next</username>
<id>6155041</id>
</contributor>
</revision>
<categories>
<category>Computer hardware tuning</category>
<category>Network performance</category>
</categories>
</header>
<bdy>

<b>Performance tuning</b> is the improvement of <link xlink:type="simple" xlink:href="../675/8286675.xml">
system</link> <link xlink:type="simple" xlink:href="../515/224515.xml">
performance</link>. This is typically a computer application, but the same methods can be applied to economic markets, bureaucracies or other complex systems. The motivation for such activity is called a performance problem, which can be real or anticipated. Most systems will respond to increased <link xlink:type="simple" xlink:href="../981/218981.xml">
load</link> with some degree of decreasing performance. A system's ability to accept higher load is called <link xlink:type="simple" xlink:href="../529/185529.xml">
scalability</link>, and modifying a system to handle a higher load is synonymous to performance tuning.<p>

Systematic tuning follows these steps:
<list>
<entry level="1" type="number">

 Assess the problem and establish numeric values that categorize acceptable behavior.</entry>
<entry level="1" type="number">

 Measure the performance of the system before modification.</entry>
<entry level="1" type="number">

 Identify the part of the system that is critical for improving the performance. This is called the <link xlink:type="simple" xlink:href="../718/191718.xml">
bottleneck</link>.</entry>
<entry level="1" type="number">

 Modify that part of the system to remove the bottleneck.</entry>
<entry level="1" type="number">

 Measure the performance of the system after modification.</entry>
</list>
</p>
<p>

This is an instance of the measure-evaluate-improve-learn cycle from <link xlink:type="simple" xlink:href="../224/305224.xml">
quality assurance</link>.</p>
<p>

A performance problem may be identified by slow or unresponsive systems. This usually occurs because high system <link xlink:type="simple" xlink:href="../323/41323.xml">
load</link>ing, causing some part of the system to reach a limit in its ability to respond.  This limit within the system is referred to as a <link xlink:type="simple" xlink:href="../718/191718.xml">
bottleneck</link>.</p>
<p>

A handful of techniques are used to improve performance. Among them are code optimization, load balancing, caching strategy, and distributed computing, and self-tuning.</p>

<sec>
<st>
Performance analysis </st>
<p>

<indent level="1">

 <it>See the main article at <link xlink:type="simple" xlink:href="../080/2310080.xml">
Performance analysis</link></it>
</indent>

</p>
</sec>
<sec>
<st>
Performance engineering </st>
<p>

<indent level="1">

 <it>See the main article at <link xlink:type="simple" xlink:href="../610/6615610.xml">
Performance engineering</link></it>
</indent>

</p>
</sec>
<sec>
<st>
 Code optimization </st>
<p>

<indent level="1">

<it>See the main article at <link xlink:type="simple" xlink:href="../779/225779.xml">
Optimization (computer science)</link></it>.
</indent>

Enhancing performance by rewriting specific portions of a program to run faster is one form of code optimization.  The term code optimization can refer to improving the implementation of a particular <link xlink:type="simple" xlink:href="../775/775.xml">
algorithm</link> for performing a task (code tuning). It can also refer to utilizing a better algorithm.  Examples of code optimization include improving the code so that work is done once before a loop rather than inside a loop or replacing a call to a simple <link xlink:type="simple" xlink:href="../352/29352.xml">
selection sort</link> with a call to the more complicated algorithm for a <link xlink:type="simple" xlink:href="../249/3268249.xml">
quicksort</link>.</p>

</sec>
<sec>
<st>
 Caching strategy </st>

<p>

<indent level="1">

<it>Main article: <link xlink:type="simple" xlink:href="../829/6829.xml">
Cache</link></it>
</indent>

Caching is a fundamental method of removing performance bottlenecks that are the result of slow access to data. Caching improves performance by retaining frequently used information in high speed memory, which reduces access "isha" time and thus improves performance. Caching is an effective manner of improving performance in situations where the principle of <link xlink:type="simple" xlink:href="../028/64028.xml">
locality of reference</link> applies. </p>
<p>

The methods used to determine which data is stored in progressively faster storage are collectively called <b>caching strategies.</b></p>

</sec>
<sec>
<st>
 Load balancing </st>

<p>

<indent level="1">

<it>Main article: <link xlink:type="simple" xlink:href="../118/61118.xml">
Load balancing (computing)</link></it>
</indent>

A system can consist of independent components, each able to service requests.  If all the requests are serviced by one of these systems (or a small number) while others remain idle then time is wasted waiting for used system to be available.  Arranging so all systems are used equally is referred to as <link xlink:type="simple" xlink:href="../118/61118.xml">
load balancing</link> and can improve over-all performance.</p>
<p>

Load balancing is often used to achieve further gains from a distributed system by intelligently selecting which machine to run an operation on based on how busy all potential candidates are, and how well suited each machine is to the type of operation that needs to be performed.</p>

</sec>
<sec>
<st>
 Distributed computing </st>

<p>

<indent level="1">

<it>Main article: <link xlink:type="simple" xlink:href="../501/8501.xml">
Distributed computing</link></it>
</indent>

<link xlink:type="simple" xlink:href="../501/8501.xml">
Distributed computing</link> is used to increase the performance of operations that can be performed in parallel, by concurrently executing multiple operations. Operations may be distributed across multiple processes on a single <link xlink:type="simple" xlink:href="../218/5218.xml">
CPU</link>, taking advantage of <link xlink:type="simple" xlink:href="../857/6857.xml">
multitasking</link>, multiple processes across multiple CPUs, or across multiple machines.  As operations are executed concurrently, ensuring synchronization between processes is essential to ensure correct results.</p>
<p>

As the trend of increasing the potential for parallel execution on modern CPU architectures continues, the use of distributed systems is essential to achieve performance benefits from the available <link xlink:type="simple" xlink:href="../162/145162.xml">
parallelism</link>.  High performance <link xlink:type="simple" xlink:href="../896/18949896.xml">
cluster computing</link> is a well known use of distributed systems for performance improvements.</p>
<p>

Distributed computing and clustering can negatively impact latency while simultaneously increasing load on shared resources, such as database systems. To minimize latency and avoid bottlenecks, distributed computing can benefit significantly from distributed <link xlink:type="simple" xlink:href="../829/6829.xml">
cache</link>s.</p>

</sec>
<sec>
<st>
 Self-tuning </st>

<p>

<indent level="1">

<it>Main article: <link xlink:type="simple" xlink:href="../382/11462382.xml">
Self-tuning</link></it>
</indent>

A self-tuning system is capable of optimizing its own internal running parameters in order to maximize or minimize the fulfillment of an <link xlink:type="simple" xlink:href="../033/52033.xml">
objective function</link>; typically <link xlink:type="simple" xlink:href="../344/268344.xml">
efficiency</link> or <link xlink:type="simple" xlink:href="../118/41118.xml">
error</link>.  Self-tuning systems typically exhibit <link xlink:type="simple" xlink:href="../103/146103.xml">
non-linear</link> <link xlink:type="simple" xlink:href="../708/2020708.xml">
adaptive control</link>.  Self-tuning systems have been a hallmark of the aerospace industry for decades, as this sort of feedback is necessary to generate <link xlink:type="simple" xlink:href="../033/52033.xml">
optimal</link> multi-variable control for nonlinear processes.   </p>

</sec>
<sec>
<st>
See also</st>
<p>

<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../213/7390213.xml">
Performance Application Programming Interface</link></entry>
</list>
</p>

</sec>
<sec>
<st>
External links </st>
<p>

<list>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.articlecity.com/articles/computers_and_internet/article_3255.shtml">
Tweaking Your System Performance In Windows XP</weblink> - Easy to read guide on tuning computer performance. </entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.vertexbuffer.com">
Online CPU and GPU</weblink> - Optimization for video game technology</entry>
</list>
</p>

</sec>
</bdy>
</article>
