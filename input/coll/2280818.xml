<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 19:33:15[mciao0827] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>Broadcast encryption</title>
<id>2280818</id>
<revision>
<id>193987976</id>
<timestamp>2008-02-25T19:14:30Z</timestamp>
<contributor>
<username>BOTijo</username>
<id>3729068</id>
</contributor>
</revision>
<categories>
<category>Digital rights management</category>
</categories>
</header>
<bdy>

<b>Broadcast encryption</b> is the <link xlink:type="simple" xlink:href="../432/18934432.xml">
cryptographic</link> problem of <link xlink:type="simple" xlink:href="../294/10294.xml">
encrypting</link> <link xlink:type="simple" xlink:href="../604/113604.xml">
broadcast</link> content (e.g. TV programs) in such a way that only qualified users (e.g. subscribers who've paid their fees) can decrypt the content. The challenge arises from the requirement that unsubscription of some users should not affect the remaining users. The problem is further complicated by the fact that there is typically more than one data stream ("channel"), each of which may have a different set of subscribers. Several solutions exist offering various tradeoffs between the increase in the size of the broadcast, the number of keys that each user needs to store, and the feasiblity of an unqualified user or a collusion of unqualified users being able to decrypt the content.<p>

The problem of rogue users sharing their decryption keys with unqualified users is mathematically insoluble. <it><software wordnetid="106566077" confidence="0.8">
<application wordnetid="106570110" confidence="0.8">
<program wordnetid="106568978" confidence="0.8">
<written_communication wordnetid="106349220" confidence="0.8">
<writing wordnetid="106359877" confidence="0.8">
<code wordnetid="106355894" confidence="0.8">
<coding_system wordnetid="106353757" confidence="0.8">
<link xlink:type="simple" xlink:href="../556/1790556.xml">
Traitor tracing</link></coding_system>
</code>
</writing>
</written_communication>
</program>
</application>
</software>
</it> <link xlink:type="simple" xlink:href="../775/775.xml">
algorithm</link>s aim to minimize the damage by retroactively identifying the user or users who leaked their keys, so that punitive measures, legal or otherwise, may be undertaken. In practice, <link xlink:type="simple" xlink:href="../989/661989.xml">
pay TV</link> systems often  employ <link xlink:type="simple" xlink:href="../580/29580.xml">
set-top box</link>es with <link xlink:type="simple" xlink:href="../347/357347.xml">
tamper-resistant</link> <link xlink:type="simple" xlink:href="../957/59957.xml">
smart card</link>s that impose physical restraints on a user learning their own decryption keys. Some schemes, such as <link xlink:type="simple" xlink:href="../249/11010249.xml">
AACS</link>  allow the provider to eliminate any desired subset of users from being able to use the service by arranging keys in a <link xlink:type="simple" xlink:href="../321/4321.xml">
binary tree</link>. Each item has a branch from a node to the root whose keys it does not know. If the master secret is encrypted with one of those keys it will not be able to be decrypted. <link xlink:type="simple" xlink:href="../826/11015826.xml">
Blu-ray</link> and <medium wordnetid="106254669" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../091/11065091.xml">
HD DVD</link></medium>
 both use this scheme.</p>

<sec>
<st>
See also</st>
<p>

<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../226/18938226.xml">
Digital Rights Management</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../407/20407.xml">
Multicasting</link></entry>
</list>
</p>


</sec>
</bdy>
</article>
