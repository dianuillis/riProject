<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 16:35:35[mciao0826] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>Object-oriented operating system</title>
<id>230109</id>
<revision>
<id>236865980</id>
<timestamp>2008-09-07T14:20:57Z</timestamp>
<contributor>
<username>Joswig</username>
<id>6048993</id>
</contributor>
</revision>
<categories>
<category>Operating system technology</category>
</categories>
</header>
<bdy>

An <b>object-oriented operating system</b> is an <link xlink:type="simple" xlink:href="../194/22194.xml">
operating system</link> which internally uses <link xlink:type="simple" xlink:href="../757/22757.xml">
object-oriented methodologies</link>.<p>

An object-oriented operating system is in contrast to an object-oriented <link xlink:type="simple" xlink:href="../249/45249.xml">
user interface</link> or programming <link xlink:type="simple" xlink:href="../145/1173145.xml">
framework</link>, which can be placed above a non-object-oriented operating system like <link xlink:type="simple" xlink:href="../146/8146.xml">
DOS</link>, <link xlink:type="simple" xlink:href="../890/18890.xml">
Microsoft Windows</link> or <family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../642/31642.xml">
Unix</link></family>
.</p>
<p>

It can be argued, however, that there are already object-oriented concepts involved in the design of a more typical operating system such as <family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../642/31642.xml">
Unix</link></family>
. While a more traditional language like <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../021/6021.xml">
C</link></programming_language>
 does not support object orientation as fluidly as more recent languages, the notion, for example, of a <link xlink:type="simple" xlink:href="../077/7077.xml">
file</link>, <link xlink:type="simple" xlink:href="../533/2761533.xml">
stream</link>, or <link xlink:type="simple" xlink:href="../101/9101.xml">
device driver</link> (in Unix, each represented as a <link xlink:type="simple" xlink:href="../754/608754.xml">
file descriptor</link>) can be considered a good example of object orientation: they are, after all, <link xlink:type="simple" xlink:href="../ury/24th_century.xml">
abstract data type</link>s, with various <link xlink:type="simple" xlink:href="../817/232817.xml">
method</link>s in the form of <link xlink:type="simple" xlink:href="../908/102908.xml">
system call</link>s, whose behavior varies based on the type of object, whose implementation details are hidden from the caller, and might even use <link xlink:type="simple" xlink:href="../746/2617746.xml">
inheritance</link> in their underlying code.</p>

<sec>
<st>
 Examples </st>

<ss1>
<st>
 NeXTSTEP </st>
<p>

During the late 1980s, <president wordnetid="110468962" confidence="0.9173553029164789">
<person wordnetid="100007846" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../236/7412236.xml">
Steve Jobs</link></person>
</president>
 formed the <link xlink:type="simple" xlink:href="../457/7878457.xml">
computer</link> company <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../694/21694.xml">
NeXT</link></company>
. One of NeXT's first tasks was to design an object-oriented operating system, <link xlink:type="simple" xlink:href="../642/40642.xml">
NEXTSTEP</link>. They did this by adding an object-oriented framework on top of <link xlink:type="simple" xlink:href="../028/21028.xml">
Mach</link> and <link xlink:type="simple" xlink:href="../807/1223807.xml">
BSD</link> using the <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../802/22802.xml">
Objective-C</link></programming_language>
 language as a basis.</p>

</ss1>
<ss1>
<st>
 Choices </st>
<p>

<link>
Choices</link> is an object-oriented operating system that was developed at the <university wordnetid="108286163" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../695/384695.xml">
University of Illinois at Urbana-Champaign</link></university>
. It is written in <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../038/72038.xml">
C++</link></programming_language>
 and uses objects to represent core kernel components like the <link xlink:type="simple" xlink:href="../218/5218.xml">
CPU</link>, <link xlink:type="simple" xlink:href="../178/45178.xml">
process</link>es and so on. <link xlink:type="simple" xlink:href="../746/2617746.xml">
Inheritance</link> is used to separate the kernel into portable machine independent classes and small non-portable dependent classes. Choices has been ported to and runs on <link xlink:type="simple" xlink:href="../954/36954.xml">
SPARC</link>, <link xlink:type="simple" xlink:href="../198/34198.xml">
x86</link> and <chip wordnetid="103020034" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<microprocessor wordnetid="103760310" confidence="0.8">
<conductor wordnetid="103088707" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<semiconductor_device wordnetid="104171831" confidence="0.8">
<link xlink:type="simple" xlink:href="../558/60558.xml">
ARM</link></semiconductor_device>
</device>
</conductor>
</microprocessor>
</instrumentality>
</artifact>
</chip>
.</p>

</ss1>
<ss1>
<st>
 Athene </st>
<p>

<link>
Athene</link> is an object-based operating system first released in 2000 by <link>
Rocklyte Systems</link>.  The user environment is constructed entirely from objects that are linked together at runtime.  Applications for Athene can also be created using this methodology and are commonly scripted using the object scripting language 'DML' (<link>
Dynamic Markup Language</link>).  Objects can be shared between processes by creating them in shared memory and locking them as required for access.  Athene's object framework is multi-platform, allowing it to be used in Windows and Linux environments for the development of object-oriented programs.</p>

</ss1>
<ss1>
<st>
 BeOS </st>
<p>

One attempt at creating a truly object-oriented operating system was the <link xlink:type="simple" xlink:href="../801/4801.xml">
BeOS</link> of the mid 1990s, which used objects and the <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../038/72038.xml">
C++</link></programming_language>
 language for the <link xlink:type="simple" xlink:href="../ury/24th_century.xml">
application programming interface</link> (API). But the kernel itself was written in C with C++ wrappers in user space. The system did not become mainstream though even today it has its fans and benefits from ongoing development.</p>

</ss1>
<ss1>
<st>
 Syllable </st>
<p>

<link xlink:type="simple" xlink:href="../066/88066.xml">
Syllable</link> makes heavy use of <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../038/72038.xml">
C++</link></programming_language>
 and for that reason is often compared to <link xlink:type="simple" xlink:href="../801/4801.xml">
BeOS</link>.</p>

</ss1>
<ss1>
<st>
 Java-based operating systems </st>
<p>

Given that <company wordnetid="108058098" confidence="0.8">
<institution wordnetid="108053576" confidence="0.8">
<link xlink:type="simple" xlink:href="../980/26980.xml">
Sun Microsystems</link></institution>
</company>
' <message wordnetid="106598915" confidence="0.8">
<request wordnetid="106513366" confidence="0.8">
<link xlink:type="simple" xlink:href="../881/15881.xml">
Java</link></request>
</message>
 is today one of the most dominant object-oriented languages, it is no surprise that Java-based operating systems have been attempted.  In this area, ideally, the <link xlink:type="simple" xlink:href="../394/50394.xml">
kernel</link> would consist of the bare minimum required to support a <link xlink:type="simple" xlink:href="../389/16389.xml">
JVM</link>.  This is the only component of such an operating system that would have to be written in a language other than Java. Built upon that JVM and basic hardware support, it would be possible to write the rest of the operating system in Java; even parts of the system that are more traditionally written in a lower-level language such as C, for example <link xlink:type="simple" xlink:href="../101/9101.xml">
device driver</link>s, can be written in Java.</p>
<p>

Examples of attempts at such an operating system include <link xlink:type="simple" xlink:href="../441/2078441.xml">
JNode</link> and <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../728/625728.xml">
JavaOS</link></O>
.</p>

</ss1>
<ss1>
<st>
 Symbolics Genera </st>

<p>

<message wordnetid="106598915" confidence="0.8">
<platform wordnetid="103961939" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<surface wordnetid="104362025" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<horizontal_surface wordnetid="103536348" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link>
Genera</link></database>
</wordnet>
</horizontal_surface>
</lexical_database>
</surface>
</artifact>
</electronic_database>
</information>
</platform>
</message>
 from <computer wordnetid="103082979" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<company wordnetid="108058098" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<machine wordnetid="103699975" confidence="0.8">
<digital_computer wordnetid="103196324" confidence="0.8">
<workstation wordnetid="104603399" confidence="0.8">
<institution wordnetid="108053576" confidence="0.8">
<link xlink:type="simple" xlink:href="../195/28195.xml">
Symbolics</link></institution>
</workstation>
</digital_computer>
</machine>
</device>
</company>
</instrumentality>
</artifact>
</computer>
 is an operating system for <link>
Lisp Machines</link> written in <link xlink:type="simple" xlink:href="../332/2110332.xml">
ZetaLisp</link> and Symbolics <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../068/6068.xml">
Common Lisp</link></programming_language>
. It makes heavy use of Flavors (an early object-oriented extension to Lisp) and the <link>
Common Lisp Object System (CLOS)</link>. The development started in the mid 70s at MIT.</p>

</ss1>
</sec>
<sec>
<st>
 See also </st>
<p>

<list>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../356/18311356.xml">
Virtualization</link> approach to O-O OS</entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../226/24226.xml">
Plan9</link> alternative 'resource' approach</entry>
<entry level="1" type="bullet">

<physical_entity wordnetid="100001930" confidence="0.8">
<communicator wordnetid="109610660" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<compiler wordnetid="109946957" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<writer wordnetid="110794014" confidence="0.8">
<machine wordnetid="103699975" confidence="0.8">
<link xlink:type="simple" xlink:href="../511/60511.xml">
Parrot virtual machine</link></machine>
</writer>
</causal_agent>
</compiler>
</device>
</instrumentality>
</artifact>
</person>
</communicator>
</physical_entity>
 alternative VM project</entry>
<entry level="1" type="bullet">

<programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../319/28319.xml">
Smalltalk</link></programming_language>
, the first O-O GUI development environment (IDE) also developed with a view to an O-O OS (not realized)</entry>
<entry level="1" type="bullet">

<programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../590/275590.xml">
Slate</link></programming_language>
 evolves from Smalltalk with some O-O OS aspirations restored</entry>
</list>
</p>

</sec>
<sec>
<st>
External links</st>
<p>

<list>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.rocklyte.com/athene/index.html">
Athene</weblink></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://choices.cs.uiuc.edu/">
Choices</weblink></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.sonycsl.co.jp/project/Apertos/">
Apertos</weblink></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.research.ibm.com/people/d/dfb/hermes.html">
Hermes</weblink>, former IBM project</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://obligement.free.fr/articles_traduction/itwsassenrath_en.php">
Rebol</weblink> aspirations to displace the OS with the language environment itself</entry>
</list>
</p>

</sec>
</bdy>
</article>
