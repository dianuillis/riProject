<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 16:34:47[mciao0828] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<problem  confidence="0.9511911446218017" wordnetid="114410605">
<algorithm  confidence="0.9511911446218017" wordnetid="105847438">
<header>
<title>Floyd–Warshall algorithm</title>
<id>230401</id>
<revision>
<id>241305102</id>
<timestamp>2008-09-27T11:29:25Z</timestamp>
<contributor>
<username>Citation bot</username>
<id>7903804</id>
</contributor>
</revision>
<categories>
<category>Articles to be expanded since June 2008</category>
<category>Routing algorithms</category>
<category>Articles with example pseudocode</category>
<category>All articles to be expanded</category>
<category>Graph algorithms</category>
<category>Polynomial-time problems</category>
<category>Dynamic programming</category>
</categories>
</header>
<bdy>

"Floyd's algorithm" redirects here. For cycle detection, see <link>
Floyd's cycle-finding algorithm</link>.<p>

<table style="padding: 0px; width: 170px; margin: 0 0 1em 1em;" align="right" class="toccolours">
<header style="background: #ccf;">
 <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../731/6263731.xml">
Graph search algorithm</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
s</header>
<row>
<col>
<b>Search</b>
<list>
<entry level="1" type="bullet">

<event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../558/100558.xml">
A*</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</entry>
<entry level="1" type="bullet">

<event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../828/14993828.xml">
B*</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</entry>
<entry level="1" type="bullet">

<condition wordnetid="113920835" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<state wordnetid="100024720" confidence="0.8">
<problem wordnetid="114410605" confidence="0.8">
<difficulty wordnetid="114408086" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../244/221244.xml">
Bellman-Ford algorithm</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</difficulty>
</problem>
</state>
</rule>
</event>
</condition>
</entry>
<entry level="1" type="bullet">

<event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../271/148271.xml">
Best-first search</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</entry>
<entry level="1" type="bullet">

<event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../516/3157516.xml">
Bidirectional search</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</entry>
<entry level="1" type="bullet">

<algorithm wordnetid="105847438" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../026/97026.xml">
Breadth-first search</link></algorithm>
</entry>
<entry level="1" type="bullet">

<event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../558/17247558.xml">
D*</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</entry>
<entry level="1" type="bullet">

<algorithm wordnetid="105847438" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../034/97034.xml">
Depth-first search</link></algorithm>
</entry>
<entry level="1" type="bullet">

<algorithm wordnetid="105847438" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../285/890285.xml">
Depth-limited search</link></algorithm>
</entry>
<entry level="1" type="bullet">

<event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../809/45809.xml">
Dijkstra's algorithm</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../401/230401.xml">
Floyd-Warshall algorithm</link></entry>
<entry level="1" type="bullet">

<event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../002/364002.xml">
Hill climbing</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</entry>
<entry level="1" type="bullet">

<event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../326/433326.xml">
Iterative deepening depth-first search</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</entry>
<entry level="1" type="bullet">

<event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../311/1284311.xml">
Johnson's algorithm</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</entry>
<entry level="1" type="bullet">

<event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../989/2801989.xml">
Uniform-cost search</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</entry>
</list>
</col>
</row>
</table>

In <link xlink:type="simple" xlink:href="../323/5323.xml">
computer science</link>, the <b>Floyd–Warshall algorithm</b> (sometimes known as the  <b>WFI Algorithm</b> or <b>Roy–Floyd algorithm</b>, since <link>
Bernard Roy</link> described this algorithm in <link xlink:type="simple" xlink:href="../662/34662.xml">
1959</link>) is a <link xlink:type="simple" xlink:href="../806/325806.xml">
graph</link> analysis <link xlink:type="simple" xlink:href="../775/775.xml">
algorithm</link> for finding <link xlink:type="simple" xlink:href="../985/41985.xml">
shortest paths</link> in a  weighted, directed graph.  A single execution of the algorithm will find the shortest paths between all pairs of vertices. The <b>Floyd–Warshall algorithm</b> is an example of <link xlink:type="simple" xlink:href="../297/125297.xml">
dynamic programming</link>. </p>

<sec>
<st>
Algorithm</st>
<p>

The Floyd-Warshall algorithm compares all possible paths through the graph between each pair of vertices.  It is able to do this with only <math>V^3</math> comparisons.  This is remarkable considering that there may be up to <math>V^2</math> edges in the graph, and every combination of edges is tested.  It does so by incrementally improving an estimate on the shortest path between two vertices, until the estimate is known to be optimal.</p>
<p>

Consider a graph <math>G</math> with vertices <math>V</math>, each numbered 1 through N. Further consider a function <math>\textrm{shortestPath}(i,j,k)</math> that returns the shortest possible path from <math>i</math> to <math>j</math> using only vertices 1 through <math>k</math> as intermediate points along the way.  Now, given this function, our goal is to find the shortest path from each <math>i</math> to each <math>j</math> using only nodes 1 through <math>k+1</math>.  </p>
<p>

There are two candidates for this path: either the true shortest path only uses nodes in the set <math>(1...k)</math>; or there exists some path that goes from <math>i</math> to <math>k+1</math>, then from <math>k+1</math> to <math>j</math> that is better.  We know that the best path from <math>i</math> to <math>j</math> that only uses nodes 1 through <math>k</math> is defined by <math>\textrm{shortestPath}(i,j,k)</math>, and it is clear that if there were a better path from <math>i</math> to <math>k+1</math> to <math>j</math>, then the length of this path would be the concatenation of the shortest path from <math>i</math> to <math>k+1</math> (using vertices in <math> (1...k) </math>) and the shortest path from <math>k+1</math> to <math>j</math> (also using vertices in <math> (1...k) </math>).</p>
<p>

Therefore, we can define <math>shortestPath(i,j,k)</math> in terms of the following <link xlink:type="simple" xlink:href="../798/54798.xml">
recursive</link> formula:</p>
<p>

<math>\textrm{shortestPath}(i,j,k) = \min(\textrm{shortestPath}(i,j,k-1),\textrm{shortestPath}(i,k,k-1)\,+\,\textrm{shortestPath}(k,j,k-1));\,\!</math></p>
<p>

<math>\textrm{shortestPath}(i,j,0) = \textrm{edgeCost}(i,j);\,\!</math></p>
<p>

This formula is the heart of Floyd Warshall.  The algorithm works by first computing <math>shortestPath(i,j,1)</math> for all (i,j) pairs, then using that to find <math>shortestPath(i,j,2)</math> for all <math>(i,j)</math> pairs, etc.  This process continues until k=n, and we have found the shortest path for all <math>(i,j)</math> pairs using any intermediate vertices.</p>

</sec>
<sec>
<st>
Pseudocode</st>
<p>

Conveniently, when calculating the <math>k</math>th case, one can overwrite the information saved from the computation of <math>k-1</math>.  This means the algorithm uses quadratic memory.  Be careful to note the initialization conditions: </p>
<p>

1 /* Assume a function <it>edgeCost</it>(i,j) which returns the cost of the edge from i to j
2    (infinity if there is none).
3    Also assume that <b>n</b> is the number of vertices and <it>edgeCost</it>(i,i)=0
4 */
5
6 <b>int</b> path;
7 /* A 2-dimensional matrix. At each step in the algorithm, path[i][j] is the shortest path
8    from i to j using intermediate values in (1..k-1).  Each path[i][j] is initialized to
9    <it>edgeCost</it>(i,j).
10 */
11
12 <b>procedure</b> <it>FloydWarshall</it> ()
13    <b>for</b> <math>\mathit{k} := 0</math> <b>to</b> <math>\mathit{n-1}</math>
14       <b>for each</b> <math>\mathit{(i,j)}</math> <b>in</b> <math>(0..n-1)</math>
15          path[i][j] = min ( path[i][j], path[i][k]+path[k][j] );</p>

</sec>
<sec>
<st>
Behaviour with negative cycles</st>
<p>

For numerically meaningful output, Floyd-Warshall assumes that there are no negative cycles (in fact, between any pair of vertices which form part of a negative cycle, the shortest path is not well-defined because the path can be infinitely small). Nevertheless, if there are negative cycles, Floyd–Warshall can be used to detect them. A negative cycle can be detected if the <it>path</it> matrix contains a negative number along the diagonal. If path[i][i] is negative for some vertex i, then this vertex belongs to at least one negative cycle.</p>
<p>

<table class="metadata plainlinks ambox ">
<row>
<col>

ambox-notice" style=""</col>
</row>
<row>
<col class="mbox-image"><p>

<image width="36px" src="Wiki_letter_w.svg">
</image>
</p>
</col>
<col style="" class="mbox-text">
 <b>Please help <weblink xlink:type="simple" xlink:href="http://localhost:18088/wiki/index.php?title=Floyd%E2%80%93Warshall_algorithm&amp;action=edit">
improve this section</weblink> by expanding it.</b> Further information might be found on the  or at . 
<it>(June 2008)''</it></col>
</row>
</table>

</p>

</sec>
<sec>
<st>
Analysis</st>
<p>

To find all <math>\mathit{n}^2</math> of <math>\mathcal{W}_k</math> from those of <math>\mathcal{W}_{\mathit{k}-1}</math> requires <math>2\mathit{n}^2</math> bit operations. Since we begin with <math>\mathcal{W}_0 = \mathcal{W}_\mathcal{R}</math> and compute the sequence of <math>\mathit{n}</math> zero-one matrices <math>\mathcal{W}_1</math>, <math>\mathcal{W}_2</math>, <math>...</math>, <math>\mathcal{W}_\mathit{n} = \mathcal{M}_{\mathcal{R}^*}</math>, the total number of bit operations used is <math>\mathit{n} \times 2\mathit{n}^2 = 2\mathit{n}^3</math>. Therefore, the <link xlink:type="simple" xlink:href="../543/7543.xml">
complexity</link> of the algorithm is <link xlink:type="simple" xlink:href="../578/44578.xml">
<math>\Theta({n}^3)</math></link> and can be solved by a <link xlink:type="simple" xlink:href="../403/30403.xml">
deterministic machine</link> in <link xlink:type="simple" xlink:href="../576/44576.xml">
polynomial time</link>.</p>

</sec>
<sec>
<st>
Applications and generalizations</st>
<p>

The Floyd–Warshall algorithm can be used to solve the following problems, among others:
<list>
<entry level="1" type="bullet">

 Shortest paths in directed graphs (Floyd's algorithm).</entry>
<entry level="1" type="bullet">

 <mathematical_relation wordnetid="113783581" confidence="0.8">
<operator wordnetid="113786413" confidence="0.8">
<function wordnetid="113783816" confidence="0.8">
<link xlink:type="simple" xlink:href="../239/292239.xml">
Transitive closure</link></function>
</operator>
</mathematical_relation>
 of directed graphs (Warshall's algorithm). In Warshall's original formulation of the algorithm, the graph is unweighted and represented by a Boolean adjacency matrix. Then the addition operation is replaced by <link xlink:type="simple" xlink:href="../152/18152.xml">
logical conjunction</link> (AND) and the minimum operation by <link xlink:type="simple" xlink:href="../962/7962.xml">
logical disjunction</link> (OR).</entry>
<entry level="1" type="bullet">

 Finding a <link xlink:type="simple" xlink:href="../717/25717.xml">
regular expression</link> denoting the <link xlink:type="simple" xlink:href="../723/25723.xml">
regular language</link> accepted by a <link xlink:type="simple" xlink:href="../931/10931.xml">
finite automaton</link> (Kleene's algorithm)</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../122/217122.xml">
Inversion</link> of <link xlink:type="simple" xlink:href="../491/19725491.xml">
real</link> <link xlink:type="simple" xlink:href="../728/19008728.xml">
matrices</link> (<link xlink:type="simple" xlink:href="../689/5134689.xml">
Gauss-Jordan algorithm</link>).</entry>
<entry level="1" type="bullet">

 Optimal routing. In this application one is interested in finding the path with the maximum flow between two vertices. This means that, rather than taking minima as in the pseudocode above, one instead takes maxima. The edge weights represent fixed constraints on flow. Path weights represent bottlenecks; so the addition operation above is replaced by the minimum operation.</entry>
<entry level="1" type="bullet">

 Testing whether an <link xlink:type="simple" xlink:href="../806/325806.xml">
undirected graph</link> is <link xlink:type="simple" xlink:href="../431/244431.xml">
bipartite</link>.</entry>
</list>
</p>

</sec>
<sec>
<st>
Implementations</st>
<p>

<list>
<entry level="1" type="bullet">

 A <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../939/23939.xml">
Perl</link></programming_language>
 implementation is available in the <weblink xlink:type="simple" xlink:href="http://search.cpan.org/search?query=Graph&amp;mode=all">
Graph</weblink> module</entry>
<entry level="1" type="bullet">

 A <link xlink:type="simple" xlink:href="../845/9845.xml">
Javascript</link> implementation is available at <weblink xlink:type="simple" xlink:href="http://alexle.net/stuff/floyd-algorithm/">
Alex Le's Blog</weblink></entry>
<entry level="1" type="bullet">

 A <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../862/23862.xml">
Python</link></programming_language>
 implementation is available in the [https://networkx.lanl.gov/ NetworkX] package</entry>
<entry level="1" type="bullet">

 A <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../021/6021.xml">
C</link></programming_language>
 implementation is available at <weblink xlink:type="simple" xlink:href="http://www.ece.rice.edu/~jpr/research/fwarsh.html">
ece.rice.edu</weblink> </entry>
<entry level="1" type="bullet">

 A <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../038/72038.xml">
C++</link></programming_language>
 implementation is available in the <weblink xlink:type="simple" xlink:href="http://www.boost.org/libs/graph/doc/">
boost::graph</weblink> library</entry>
<entry level="1" type="bullet">

 A <message wordnetid="106598915" confidence="0.8">
<request wordnetid="106513366" confidence="0.8">
<link xlink:type="simple" xlink:href="../881/15881.xml">
Java</link></request>
</message>
 implementation is in the <weblink xlink:type="simple" xlink:href="http://svn.apache.org/repos/asf/commons/dormant/graph2/branches/jakarta/src/java/org/apache/commons/graph/impl/AllPaths.java">
Apache commons graph</weblink> library.</entry>
</list>
</p>

</sec>
<sec>
<st>
References</st>
<p>

<list>
<entry level="1" type="bullet">

  <cite id="Reference-Cormen-1990" style="font-style:normal" class="book"><scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../475/4108475.xml">
Cormen, Thomas H.</link></scientist>
;&#32;<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../884/1400884.xml">
Leiserson, Charles E.</link></scientist>
, <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../057/68057.xml">
Rivest, Ronald L.</link></scientist>
</person>
&#32;(1990). <work wordnetid="104599396" confidence="0.8">
<product wordnetid="104007894" confidence="0.8">
<creation wordnetid="103129123" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<book wordnetid="106410904" confidence="0.8">
<publication wordnetid="106589574" confidence="0.8">
<link xlink:type="simple" xlink:href="../226/3499226.xml">
Introduction to Algorithms</link></publication>
</book>
</artifact>
</creation>
</product>
</work>
, 1st edition,&#32;<company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../601/719601.xml">
MIT Press</link></company>
 and <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../269/651269.xml">
McGraw-Hill</link></company>
. ISBN 0-262-03141-8.</cite>&nbsp;</entry>
<entry level="2" type="bullet">

 Section 26.2, "The Floyd–Warshall algorithm", pp. 558–565; </entry>
<entry level="2" type="bullet">

 Section 26.4, "A general framework for solving path problems in directed graphs", pp. 570–576.</entry>
<entry level="1" type="bullet">

  <cite style="font-style:normal"><link xlink:type="simple" xlink:href="../900/301900.xml">
Floyd, Robert W.</link>&#32;(June 1962).&#32;"Algorithm 97: Shortest Path". <it><work wordnetid="104599396" confidence="0.8">
<product wordnetid="104007894" confidence="0.8">
<creation wordnetid="103129123" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<periodical wordnetid="106593296" confidence="0.8">
<publication wordnetid="106589574" confidence="0.8">
<link xlink:type="simple" xlink:href="../161/291161.xml">
Communications of the ACM</link></publication>
</periodical>
</artifact>
</creation>
</product>
</work>
</it>&#32;<b>5</b>&#32;(6): 345. <document wordnetid="106470073" confidence="0.8">
<written_communication wordnetid="106349220" confidence="0.8">
<writing wordnetid="106362953" confidence="0.8">
<link xlink:type="simple" xlink:href="../994/422994.xml">
doi</link></writing>
</written_communication>
</document>
:<weblink xlink:type="simple" xlink:href="http://dx.doi.org/10.1145%2F367766.368168">
10.1145/367766.368168</weblink>.</cite>&nbsp;</entry>
<entry level="1" type="bullet">

  <cite style="font-style:normal" class="book"><scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../805/28805.xml">
Kleene, S. C.</link></scientist>
&#32;(1956).&#32;"Representation of events in nerve nets and finite automata",&#32;in <link xlink:type="simple" xlink:href="../693/5693.xml">
C. E. Shannon</link> and <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../362/308362.xml">
J. McCarthy</link></scientist>
</person>
: Automata Studies.&#32;Princeton University Press,&#32;pp. 3–42.</cite>&nbsp;</entry>
<entry level="1" type="bullet">

  <cite style="font-style:normal">Warshall, Stephen&#32;(January 1962).&#32;"A theorem on Boolean matrices". <it><magazine wordnetid="106595351" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../845/2321845.xml">
Journal of the ACM</link></magazine>
</it>&#32;<b>9</b>&#32;(1): 11–12. <document wordnetid="106470073" confidence="0.8">
<written_communication wordnetid="106349220" confidence="0.8">
<writing wordnetid="106362953" confidence="0.8">
<link xlink:type="simple" xlink:href="../994/422994.xml">
doi</link></writing>
</written_communication>
</document>
:<weblink xlink:type="simple" xlink:href="http://dx.doi.org/10.1145%2F321105.321107">
10.1145/321105.321107</weblink>.</cite>&nbsp;</entry>
<entry level="1" type="bullet">

  <cite style="font-style:normal" class="book">Kenneth H. Rosen&#32;(2003). Discrete Mathematics and Its Applications, 5th Edition.&#32;Addison Wesley. ISBN 0-07-119881-4 (ISE).</cite>&nbsp;</entry>
</list>
</p>

</sec>
<sec>
<st>
See also</st>
<p>

<list>
<entry level="1" type="bullet">

 <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../900/301900.xml">
Robert Floyd</link></scientist>
</person>
</entry>
<entry level="1" type="bullet">

 <person wordnetid="100007846" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../798/7499798.xml">
Stephen Warshall</link></person>
</entry>
<entry level="1" type="bullet">

 <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../809/45809.xml">
Dijkstra's algorithm</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</entry>
</list>
</p>

</sec>
<sec>
<st>
External links</st>
<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://tide4javascript.com/?s=Floyd">
Analyze Floyd's algorithm in an online Javascript IDE</weblink></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.pms.informatik.uni-muenchen.de/lehre/compgeometry/Gosper/shortest_path/shortest_path.html#visualization">
Interactive animation of Floyd–Warshall algorithm</weblink></entry>
</list>
</p>


</sec>
</bdy>
</algorithm>
</problem>
</article>
