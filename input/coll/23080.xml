<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 15:32:19[mciao0826] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<standard  confidence="0.8" wordnetid="107260623">
<system_of_measurement  confidence="0.8" wordnetid="113577171">
<header>
<title>Pretty Good Privacy</title>
<id>23080</id>
<revision>
<id>243492445</id>
<timestamp>2008-10-06T19:21:20Z</timestamp>
<contributor>
<username>Zorrobot</username>
<id>7218328</id>
</contributor>
</revision>
<categories>
<category>PGP</category>
<category>Cryptographic software</category>
<category>E-mail authentication</category>
<category>Internet privacy</category>
<category>Open standards</category>
<category>1991 software</category>
<category>Internet standards</category>
<category>History of cryptography</category>
</categories>
</header>
<bdy>

<b>Pretty Good Privacy</b> (PGP) is a <link xlink:type="simple" xlink:href="../783/5783.xml">
computer program</link> that provides <link xlink:type="simple" xlink:href="../432/18934432.xml">
cryptographic</link> <link xlink:type="simple" xlink:href="../009/25009.xml">
privacy</link> and <link xlink:type="simple" xlink:href="../967/47967.xml">
authentication</link>. PGP is often used for signing, encrypting and decrypting e-mails to increase the security of e-mail communications. It was originally created by <link xlink:type="simple" xlink:href="../486/23486.xml">
Philip Zimmermann</link> in 1991.<p>

PGP and other similar products follow the <link>
OpenPGP</link> standard (RFC 4880) for encrypting and decrypting data. </p>

<sec>
<st>
 How PGP encryption works </st>
<p>

PGP encryption uses <link xlink:type="simple" xlink:href="../222/24222.xml">
public-key cryptography</link> and includes a system which binds the public keys to a user name and/or an <link xlink:type="simple" xlink:href="../738/9738.xml">
e-mail</link> address. The first version of this system was generally known as a <link xlink:type="simple" xlink:href="../356/296356.xml">
web of trust</link> to contrast with the <message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<proposal wordnetid="107162194" confidence="0.8">
<recommendation wordnetid="106671637" confidence="0.8">
<advice wordnetid="106671484" confidence="0.8">
<link xlink:type="simple" xlink:href="../352/296352.xml">
X.509</link></advice>
</recommendation>
</proposal>
</rule>
</direction>
</protocol>
</message>
 system which uses a hierarchical approach based on <link xlink:type="simple" xlink:href="../370/296370.xml">
certificate authority</link> and which was added to PGP implementations later. Current versions of PGP encryption include both alternatives through an automated key management server.</p>

<ss1>
<st>
Digital signatures</st>
<p>

PGP supports message authentication and integrity checking. The latter is used to detect whether a message has been altered since it was completed (the <it>message integrity</it> property), and the former to determine whether it was actually sent by the person/entity claimed to be the sender (a <it><link xlink:type="simple" xlink:href="../644/59644.xml">
digital signature</link></it>). In PGP, these are used by default in conjunction with encryption, but can be applied to <link xlink:type="simple" xlink:href="../935/157935.xml">
plaintext</link> as well. The sender uses PGP to create a digital signature for the message with either the <link xlink:type="simple" xlink:href="../385/25385.xml">
RSA</link> or <link xlink:type="simple" xlink:href="../470/59470.xml">
DSA</link> signature algorithms. To do so, PGP computes a hash (also called a <link xlink:type="simple" xlink:href="../526/439526.xml">
message digest</link>) from the plaintext, and then creates the <link xlink:type="simple" xlink:href="../644/59644.xml">
digital signature</link> from that hash using the sender's private keys.</p>
<p>

The message recipient uses the sender's public key and the digital signature to recover the original message digest. He compares this message digest with the message digest he computed her/himself from the (recovered) plaintext. If the signature matches the received plaintext's message digest, it must be presumed (to a very high degree of confidence) that the message received has not been corrupted, either deliberately or accidentally. As well, since it was properly signed, it is very likely (to a very high degree of confidence) that the claimed sender actually did send it.</p>

</ss1>
<ss1>
<st>
Web of trust</st>
<p>

Both when encrypting messages and when verifying signatures, it is critical that the public key one uses to send messages to someone or some entity actually does 'belong' to the intended recipient. Simply downloading a public key from somewhere is not overwhelming assurance of that association; deliberate (or accidental) <link xlink:type="simple" xlink:href="../284/41284.xml">
spoofing</link> is possible. PGP has, from its first versions, always included provisions for distributing a user's public keys in an '<link>
identity certificate</link>' which is so constructed cryptographically that any tampering (or accidental garble) is readily detectable. But merely making a certificate which is impossible to modify without being detected effectively is also insufficient. It can prevent corruption only after the certificate has been created, not before. Users must also ensure by some means that the public key in a certificate actually does belong to the person/entity claiming it. From its first release, PGP products have included an internal certificate 'vetting scheme' to assist with this; a trust model which has been called a <link xlink:type="simple" xlink:href="../356/296356.xml">
web of trust</link>. A given public key (or more specifically, information binding a user name to a key) may be digitally signed by a third party user to attest to the association between someone (actually a user name) and the key. There are several levels of confidence which can be included in such signatures. Although many programs read and write this information, few (if any) include this level of certification when calculating whether to trust a key.</p>
<p>

The web of trust protocol was first described by Zimmermann in 1992 in the manual for PGP version 2.0:</p>
<p>

As time goes on, you will accumulate keys from other people that you may want to designate as trusted introducers.  Everyone else will each choose their own trusted introducers.  And everyone will gradually accumulate and distribute with their key a collection of certifying signatures from other people, with the expectation that anyone receiving it will trust at least one or two of the signatures.  This will cause the emergence of a decentralized fault-tolerant web of confidence for all public keys.</p>


<p>

The web of trust mechanism has advantages over a centrally managed <link xlink:type="simple" xlink:href="../112/194112.xml">
Public key infrastructure</link> scheme such as that used by <message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<link xlink:type="simple" xlink:href="../737/593737.xml">
S/MIME</link></rule>
</direction>
</protocol>
</message>
, but has not been universally used. Users have been willing to accept certificates and check their validity manually, or to simply accept them. The underlying problem has found no satisfactory solution.</p>

</ss1>
<ss1>
<st>
Certificates</st>
<p>

In the (more recent) OpenPGP specification, <it>trust signatures</it> can be used to support creation of <link xlink:type="simple" xlink:href="../370/296370.xml">
certificate authorities</link>. A trust signature indicates both that the key belongs to its claimed owner and that the owner of the key is trustworthy to sign other keys at one level below their own. A level 0 signature is comparable to a web of trust signature, since only the validity of the key is certified. A level 1 signature is similar to the trust one has in a certificate authority because a key signed to level 1 is able to issue an unlimited number of level 0 signatures. A level 2 signature is highly analogous to the trust assumption users must rely on whenever they use the default certificate authority list (like those included in web browsers); it allows the owner of the key to make other keys certificate authorities.</p>
<p>

PGP versions have always included a way to cancel ('revoke') identity certificates. A lost or compromised private key will require this if communication security is to be retained by that user. This is, more or less, equivalent to the <link xlink:type="simple" xlink:href="../365/296365.xml">
certificate revocation list</link>s of centralized PKI schemes.  Recent PGP versions have also supported certificate expiration dates.</p>
<p>

The problem of correctly identifying a public key as belonging to a particular user is not unique to PGP. All public key / private key cryptosystems have the same problem, if in slightly different guise, and no fully satisfactory solution is known. PGP's original scheme, at least, leaves the decision whether or not to use its endorsement/vetting system to the user, while most other PKI schemes do not, requiring instead that every certificate attested to by a central <link xlink:type="simple" xlink:href="../370/296370.xml">
certificate authority</link> be accepted as correct.</p>

</ss1>
<ss1>
<st>
Security quality</st>
<p>

To the best of publicly available information, there is no known method which will allow a person or group to break PGP encryption by cryptographic or computational means. Early versions of PGP have been found to have theoretical vulnerabilities and so current versions are recommended. Indeed, in 1996, <link xlink:type="simple" xlink:href="../432/18934432.xml">
cryptographer</link> <person wordnetid="100007846" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../732/36732.xml">
Bruce Schneier</link></person>
 characterized an early version as being "the closest you're likely to get to military-grade encryption."<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref> In addition to protecting data in transit over a network, PGP encryption can also be used to protect data in long-term data storage such as disk files.</p>
<p>

The cryptographic security of PGP encryption depends on the assumption that the algorithms used are unbreakable by direct <link xlink:type="simple" xlink:href="../715/5715.xml">
cryptanalysis</link> with current equipment and techniques. For instance, in the original version, the <link xlink:type="simple" xlink:href="../385/25385.xml">
RSA</link> algorithm was used to encrypt session keys; RSA's security depends upon the  <link xlink:type="simple" xlink:href="../890/363890.xml">
one-way function</link> nature of mathematical <statement wordnetid="106722453" confidence="0.8">
<message wordnetid="106598915" confidence="0.8">
<premise wordnetid="106753800" confidence="0.8">
<postulate wordnetid="106753299" confidence="0.8">
<proposition wordnetid="106750804" confidence="0.8">
<link xlink:type="simple" xlink:href="../491/15491.xml">
integer factoring</link></proposition>
</postulate>
</premise>
</message>
</statement>
<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%222%22])">2</ref>. Likewise, the secret key algorithm used in PGP version 2 was <cipher wordnetid="106254239" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../076/15076.xml">
IDEA</link></cipher>
, which might, at some future time, be found to have a previously unsuspected cryptanalytic flaw. Specific instances of current PGP, or IDEA, insecurities — if they exist — are not publicly known. As current versions of PGP have added additional encryption algorithms, the degree of their cryptographic vulnerability varies with the algorithm used. In practice, each of the algorithms in current use is not publicly known to have cryptanalytic weaknesses.</p>
<p>

Any agency wanting to read PGP messages would probably use easier means than standard cryptanalysis, e.g. <link xlink:type="simple" xlink:href="../585/235585.xml">
rubber-hose cryptanalysis</link> or <link xlink:type="simple" xlink:href="../098/10418098.xml">
black-bag cryptanalysis</link> i.e. installing some form of <link xlink:type="simple" xlink:href="../056/30056.xml">
trojan horse</link> or <link xlink:type="simple" xlink:href="../829/57829.xml">
keystroke logging</link> software/hardware on the target computer to capture encrypted keyrings and their passwords. The <link xlink:type="simple" xlink:href="../127/11127.xml">
FBI</link> has already used this attack against PGP<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%223%22])">3</ref><ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%224%22])">4</ref> in its investigations. However, it is important to note that any such vulnerabilities apply not just to PGP, but to all encryption software.</p>
<p>

In 2003, an incident involving seized <company wordnetid="108058098" confidence="0.8">
<institution wordnetid="108053576" confidence="0.8">
<link xlink:type="simple" xlink:href="../016/46016.xml">
Psion</link></institution>
</company>
 <link xlink:type="simple" xlink:href="../304/23304.xml">
PDA</link>s belonging to members of the <link xlink:type="simple" xlink:href="../099/26099.xml">
Red Brigade</link> indicated that neither the <link xlink:type="simple" xlink:href="../376/1977376.xml">
Italian police</link> nor the FBI were able to decode PGP-encrypted files stored on them.<weblink xlink:type="simple" xlink:href="http://www.pcworld.com/article/110841/pgp_encryption_proves_powerful.html">
http://www.pcworld.com/article/110841/pgp_encryption_proves_powerful.html</weblink></p>
<p>

A more recent incident in December 2006 (see <it><link xlink:type="simple" xlink:href="../436/14732436.xml">
United States v. Boucher</link></it>) involving <agency wordnetid="108337324" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../847/636847.xml">
US customs agents</link></agency>
 and a seized <link xlink:type="simple" xlink:href="../584/198584.xml">
laptop PC</link> which allegedly contained <link xlink:type="simple" xlink:href="../954/19596954.xml">
child pornography</link> indicates that US Government agencies find it "nearly impossible" to access PGP-encrypted files. Additionally, a judge ruling on the same case in November 2007 has stated that forcing the suspect to reveal his PGP pass-phrase would violate his <amendment wordnetid="101250101" confidence="0.8">
<change_of_state wordnetid="100199130" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<change wordnetid="100191142" confidence="0.8">
<improvement wordnetid="100248977" confidence="0.8">
<correction wordnetid="100258854" confidence="0.8">
<action wordnetid="100037396" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<link xlink:type="simple" xlink:href="../603/13575603.xml">
Fifth Amendment</link></psychological_feature>
</act>
</action>
</correction>
</improvement>
</change>
</event>
</change_of_state>
</amendment>
 rights i.e. a suspect's constitutional right not to incriminate himself.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%225%22])">5</ref><ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%226%22])">6</ref></p>

</ss1>
</sec>
<sec>
<st>
 History </st>

<ss1>
<st>
Early history</st>
<p>

Phil Zimmermann created the first version of PGP encryption in 1991. The name, "Pretty Good Privacy", is humorously ironic and was inspired by the name of a <link xlink:type="simple" xlink:href="../196/239196.xml">
grocery</link> store, "Ralph's Pretty Good Grocery," featured in radio host <comedian wordnetid="109940146" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../743/12743.xml">
Garrison Keillor</link></comedian>
's fictional town, <region wordnetid="108630985" confidence="0.8">
<administrative_district wordnetid="108491826" confidence="0.8">
<location wordnetid="100027167" confidence="0.8">
<municipality wordnetid="108626283" confidence="0.8">
<geographical_area wordnetid="108574314" confidence="0.8">
<district wordnetid="108552138" confidence="0.8">
<urban_area wordnetid="108675967" confidence="0.8">
<city wordnetid="108524735" confidence="0.8">
<link xlink:type="simple" xlink:href="../373/9240373.xml">
Lake Wobegon</link></city>
</urban_area>
</district>
</geographical_area>
</municipality>
</location>
</administrative_district>
</region>
. Of course, the irony is that PGP's security was intended to be not merely <it>pretty good</it>, but excellent. This first version included a <link xlink:type="simple" xlink:href="../042/53042.xml">
symmetric-key algorithm</link> that Zimmermann had designed himself, named <cipher wordnetid="106254239" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../583/8619583.xml">
BassOmatic</link></cipher>
 after a <series wordnetid="108457976" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../013/763013.xml">
Saturday Night Live</link></series>
 skit. Zimmermann had been a long-time <link xlink:type="simple" xlink:href="../055/2996055.xml">
anti-nuclear activist</link>, and created PGP encryption so that similarly inclined people might securely use <link xlink:type="simple" xlink:href="../430/3430.xml">
BBS</link>s and securely store messages and files. No license was required for its non-commercial use. There was not even a nominal charge, and the complete <link xlink:type="simple" xlink:href="../661/27661.xml">
source code</link> was included with all copies. PGP found its way onto <work wordnetid="100575741" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<standard wordnetid="107260623" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<community wordnetid="108223802" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<message wordnetid="106598915" confidence="0.8">
<social_group wordnetid="107950920" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<gathering wordnetid="107975026" confidence="0.8">
<service wordnetid="100577525" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<link xlink:type="simple" xlink:href="../994/18588994.xml">
Usenet</link></activity>
</psychological_feature>
</group>
</act>
</service>
</gathering>
</rule>
</event>
</social_group>
</message>
</system_of_measurement>
</community>
</direction>
</standard>
</protocol>
</work>
 and from there onto the <link xlink:type="simple" xlink:href="../539/14539.xml">
Internet</link>, and it very rapidly acquired a considerable following around the world. Users and supporters included dissidents in totalitarian countries (some affecting letters to Zimmermann have been published, and some have been included in testimony before the US Congress), civil libertarians in other parts of the world (see Zimmermann's published testimony in various hearings), and the 'free communications' activists who call themselves <link xlink:type="simple" xlink:href="../314/37314.xml">
cypherpunk</link>s (who provided both publicity and distribution).</p>

</ss1>
<ss1>
<st>
Criminal investigation</st>
<p>

Shortly after its release, PGP encryption found its way outside the <body wordnetid="107965085" confidence="0.8">
<social_group wordnetid="107950920" confidence="0.8">
<political_orientation wordnetid="106212839" confidence="0.8">
<colony wordnetid="108374049" confidence="0.8">
<state wordnetid="108168978" confidence="0.8">
<political_unit wordnetid="108359949" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<democracy wordnetid="106217103" confidence="0.8">
<link xlink:type="simple" xlink:href="../750/3434750.xml">
United States</link></democracy>
</group>
</political_unit>
</state>
</colony>
</political_orientation>
</social_group>
</body>
, and in February 1993 Zimmermann became the formal target of a criminal investigation by the US Government for "<link xlink:type="simple" xlink:href="../621/18940621.xml">
munition</link>s export without a license". Cryptosystems using keys larger than <link xlink:type="simple" xlink:href="../403/487403.xml">
40 bits</link> were then considered munitions within the definition of the <link xlink:type="simple" xlink:href="../003/826003.xml#xpointer(//*[./st=%22PC+era%22])">
US export regulations</link>; PGP has never used keys smaller than 128 bits so it qualified at that time. Penalties for violation, if found guilty, were substantial. After several years, the investigation of Zimmermann was closed without filing criminal charges against him or anyone else.</p>
<p>

Zimmermann challenged these regulations in a curious way. He published the entire <link xlink:type="simple" xlink:href="../661/27661.xml">
source code</link> of PGP in a hardback book<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%227%22])">7</ref>, via <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../601/719601.xml">
MIT Press</link></company>
, which was distributed and sold widely. Anybody wishing to build their own copy of PGP could buy the $60 book, cut off the covers, separate the pages, and scan them using an <software wordnetid="106566077" confidence="0.8">
<application wordnetid="106570110" confidence="0.8">
<program wordnetid="106568978" confidence="0.8">
<written_communication wordnetid="106349220" confidence="0.8">
<writing wordnetid="106359877" confidence="0.8">
<code wordnetid="106355894" confidence="0.8">
<coding_system wordnetid="106353757" confidence="0.8">
<link xlink:type="simple" xlink:href="../091/49091.xml">
OCR</link></coding_system>
</code>
</writing>
</written_communication>
</program>
</application>
</software>
 program, creating a set of source code text files. One could then build the application using the freely available <link xlink:type="simple" xlink:href="../323/12323.xml">
GNU C Compiler</link>. PGP would thus be available anywhere in the world. The claimed principle was simple: export of <it>munitions</it>—guns, bombs, planes, and software—was (and remains) restricted; but the export of <it>books</it> is protected by the <amendment wordnetid="101250101" confidence="0.8">
<change_of_state wordnetid="100199130" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<change wordnetid="100191142" confidence="0.8">
<improvement wordnetid="100248977" confidence="0.8">
<correction wordnetid="100258854" confidence="0.8">
<action wordnetid="100037396" confidence="0.8">
<civil_right wordnetid="105182563" confidence="0.8">
<human_right wordnetid="105176846" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<right wordnetid="105174653" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<link xlink:type="simple" xlink:href="../653/31653.xml">
First Amendment</link></psychological_feature>
</right>
</act>
</human_right>
</civil_right>
</action>
</correction>
</improvement>
</change>
</event>
</change_of_state>
</amendment>
. The question was never tested in court in respect to PGP, but had been established by the Supreme Court in the <case wordnetid="107308889" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../772/340772.xml">
Bernstein case</link></case>
.</p>
<p>

<link xlink:type="simple" xlink:href="../003/826003.xml#xpointer(//*[./st=%22PC+era%22])">
US export regulations</link> regarding cryptography remain in force, but were liberalized substantially throughout the late 1990s. Since 2000, compliance with the regulations is also much easier. PGP encryption no longer meets the definition of a non-exportable weapon, and can be exported internationally except to 7 specific countries and a named list of groups and individuals.</p>

</ss1>
<ss1>
<st>
PGP 3</st>
<p>

During this turmoil, Zimmermann's team worked on a new version of PGP encryption called PGP 3. This new version was to have considerable security improvements, including a new certificate structure which fixed small security flaws in the PGP 2.x certificates as well as permitting a certificate to include separate keys for signing and encryption. Furthermore, the experience with patent and export problems led them to eschew patents entirely. PGP 3 introduced use of the <cipher wordnetid="106254239" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../998/240998.xml">
CAST-128</link></cipher>
 (a.k.a. <link xlink:type="simple" xlink:href="../998/240998.xml">
CAST5</link>) symmetric key algorithm, and the <link xlink:type="simple" xlink:href="../470/59470.xml">
DSA</link> and <link xlink:type="simple" xlink:href="../458/59458.xml">
ElGamal</link> asymmetric key algorithms, all of which were unencumbered by patents.</p>
<p>

After the Federal criminal investigation ended in 1996, Zimmermann and his team started a company to produce new versions of PGP encryption. They merged with Viacrypt (to whom Zimmermann had sold commercial rights and who had licensed RSA directly from RSADSI) which then changed its name to PGP Incorporated. The newly combined Viacrypt/PGP team started work on new versions of PGP encryption based on the PGP 3 system. Unlike PGP 2, which was an exclusively <link xlink:type="simple" xlink:href="../707/6707.xml">
command line</link> program, PGP 3 was designed from the start as a <link xlink:type="simple" xlink:href="../421/106421.xml">
software library</link> allowing users to work from a command line or inside a <link xlink:type="simple" xlink:href="../293/12293.xml">
GUI</link> environment. The original agreement between Viacrypt and the Zimmermann team had been that Viacrypt would have even-numbered versions and Zimmermann odd-numbered versions. Viacrypt, thus, created a new version (based on PGP 2) that they called PGP 4. To remove confusion about how it could be that PGP 3 was the successor to PGP 4, PGP 3 was renamed and released as PGP 5 in May 1997.</p>

</ss1>
<ss1>
<st>
OpenPGP</st>
<p>

Inside PGP Inc., there was still concern about patent issues. RSADSI was challenging the continuation of the Viacrypt RSA license to the newly merged firm. The company adopted an informal internal standard called "Unencumbered PGP": "use no algorithm with licensing difficulties".  Because of PGP encryption's importance worldwide (it is thought to be the most widely chosen quality cryptographic system), many wanted to write their own software that would interoperate with PGP 5. Zimmermann became convinced that an open standard for PGP encryption was critical for them and for the cryptographic community as a whole. In July 1997, PGP Inc. proposed to the <link xlink:type="simple" xlink:href="../285/15285.xml">
IETF</link> that there be a standard called OpenPGP. They gave the IETF permission to use the name OpenPGP to describe this new standard as well as any program that supported the standard. The IETF accepted the proposal and started the OpenPGP <link xlink:type="simple" xlink:href="../958/3734958.xml">
Working Group</link>.</p>
<p>

OpenPGP is on the <link xlink:type="simple" xlink:href="../742/14742.xml">
Internet Standards Track</link>; the current specification is RFC 4880 (November 2007). OpenPGP is still under active development and the successor to RFC 2440, which is RFC 4880, has been made a proposed standard. Many e-mail clients provide OpenPGP-compliant email security as described in RFC 3156.</p>
<p>

The <group wordnetid="100031264" confidence="0.8">
<link xlink:type="simple" xlink:href="../437/18949437.xml">
Free Software Foundation</link></group>
 has developed its own OpenPGP-compliant program called <link xlink:type="simple" xlink:href="../809/38809.xml">
GNU Privacy Guard</link> (abbreviated GnuPG or GPG). GnuPG is freely available together with all source code under the <link xlink:type="simple" xlink:href="../683/18938683.xml">
GNU General Public License</link> (GPL) and is maintained separately from several Graphical User Interfaces (<link xlink:type="simple" xlink:href="../293/12293.xml">
GUI</link>s) that interact with the GnuPG library for encryption, decryption and signing functions (see <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../988/2121988.xml">
KGPG</link></software>
, <work wordnetid="100575741" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<undertaking wordnetid="100795720" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<link xlink:type="simple" xlink:href="../593/2288593.xml">
Seahorse</link></activity>
</psychological_feature>
</act>
</undertaking>
</event>
</work>
, <link>
MacGPG</link>). Several other vendors have also developed OpenPGP-compliant software.</p>

</ss1>
<ss1>
<st>
Network Associates acquisition</st>
<p>

In December 1997, PGP Inc. was acquired by Network Associates, Inc. Zimmermann and the PGP team became NAI employees. NAI continued to pioneer export through software publishing, being the first company to have a legal export strategy by publishing source code. Under its aegis, the PGP team added disk encryption, desktop firewalls, intrusion detection, and <message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<link xlink:type="simple" xlink:href="../342/43342.xml">
IPsec</link></rule>
</direction>
</protocol>
</message>
 <link xlink:type="simple" xlink:href="../130/147130.xml">
VPN</link>s to the PGP family. After the export regulation liberalizations of 2000 which no longer required publishing of source, NAI stopped releasing source code, over the PGP team's objection. There was consternation amongst PGP users worldwide at this and, inevitably, some conspiracy theories as well.</p>
<p>

In early 2001, Zimmermann left NAI. He served as Chief Cryptographer for <link xlink:type="simple" xlink:href="../222/332222.xml">
Hush Communications</link>, who provide an OpenPGP-based e-mail service, <web_site wordnetid="106359193" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../222/332222.xml">
Hushmail</link></web_site>
. He has also worked with Veridis and other companies.  In October, 2001, NAI announced that its PGP assets were for sale and that it was suspending further development of PGP encryption. The only remaining asset kept was the PGP E-Business Server (the original PGP Commandline version).  In February 2002, NAI cancelled all support for PGP products, with the exception of the re-named commandline product.  NAI (now McAfee) continues to sell and support the product under the name McAfee E-Business Server.</p>

</ss1>
<ss1>
<st>
Current situation</st>
<p>

In August 2002, several ex-PGP team members formed a new company, <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../520/2170520.xml">
PGP Corporation</link></company>
, and bought the PGP assets (except for the command line version) from NAI. PGP Corporation is supporting existing PGP users and honoring NAI support contracts. Zimmermann now serves as a special advisor and consultant to PGP Corporation, as well as continuing to run his own consulting company.  In 2003 PGP Corporation created a new server-based product offering called PGP Universal.  In mid-2004, PGP Corporation shipped its own command line version called PGP Command Line, which integrates with the other PGP Encryption Platform applications. In 2005 PGP Corporation made its first acquisition—the <country wordnetid="108544813" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../867/11867.xml">
German</link></country>
 software company Glueck and Kanja Technology AG, which is now PGP Deutschland AG. Since the 2002 purchase of NAI PGP assets, PGP Corporation has offered worldwide PGP technical support from their office in <village wordnetid="108672738" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../249/151249.xml">
Draper</link></village>
, <symbol wordnetid="106806469" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../716/31716.xml">
Utah</link></symbol>
.</p>

</ss1>
</sec>
<sec>
<st>
PGP Corporation encryption applications</st>

<p>

<indent level="1">

<it>This section describes commercial programs available from <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../520/2170520.xml">
PGP Corporation</link></company>
.  For information on other programs compatible with the <link xlink:type="simple" xlink:href="#xpointer(//*[./st=%22OpenPGP%22])">
OpenPGP</link> specification, see <link xlink:type="simple" xlink:href="#xpointer(//*[./st=%22OpenPGP_implementations%22])">
OpenPGP implementations</link> below.</it>
</indent>

While originally used primarily for encrypting the contents of e-mail messages and attachments from a desktop client, PGP products have been diversified since 2002 into a set of encryption applications which can be managed by an optional central policy server.  PGP encryption applications include e-mail and attachments, digital signatures, laptop full disk encryption, file and folder security, protection for IM sessions, batch file transfer encryption, and protection for files and folders stored on network servers and, more recently, encrypted and/or signed HTTP request/responses by means of a client side (<pause wordnetid="115271008" confidence="0.8">
<extension wordnetid="115272382" confidence="0.8">
<time_interval wordnetid="115269513" confidence="0.8">
<delay wordnetid="115272029" confidence="0.8">
<link xlink:type="simple" xlink:href="../809/11643809.xml">
Enigform</link></delay>
</time_interval>
</extension>
</pause>
) and a server side (<link xlink:type="simple" xlink:href="../778/12214778.xml">
mod auth openpgp</link>) plugin.</p>
<p>

The PGP Desktop 9.x family includes PGP Desktop Email, PGP Whole Disk Encryption, and PGP NetShare. Additionally, a number of Desktop bundles are also available. Depending on application, the products feature desktop e-mail, digital signatures, IM security, whole disk encryption, file and folder security, <link>
self decrypting archive</link>s, and secure shredding of deleted files. Capabilities are licensed in different ways depending on features required.</p>
<p>

The PGP Universal Server 2.x management console handles centralized deployment, security policy, policy enforcement, key management, and reporting.  It is used for automated e-mail encryption in the gateway and manages PGP Desktop 9.x clients. In addition to its local keyserver, PGP Universal Server works with the PGP public keyserver—called the PGP Global Directory—to find recipient keys. It has the capability of delivering e-mail securely when no recipient key is found via a secure HTTPS browser session.</p>
<p>

With PGP Desktop 9.x managed by PGP Universal Server 2.x, first released in 2005, all PGP encryption applications are based on a new proxy-based architecture. These newer versions of PGP software eliminate the use of e-mail plug-ins and insulate the user from changes to other desktop applications. All desktop and server operations are now based on security policies and operate in an automated fashion. The PGP Universal server automates the creation, management, and expiration of keys, sharing these keys among all PGP encryption applications.</p>
<p>

The current shipping versions are PGP Desktop 9.8.3 and PGP Universal 2.8.3.</p>
<p>

Also available are PGP Command Line, which enables command line-based encryption and signing of information for storage, transfer, and backup, as well as the PGP Support Package for BlackBerry which enables RIM BlackBerry devices to enjoy sender-to-recipient messaging encryption.</p>
<p>

New versions of PGP applications use both OpenPGP and the S/MIME, allowing communications with any user of a <link xlink:type="simple" xlink:href="../888/21888.xml">
NIST</link> specified standard.</p>

</sec>
<sec>
<st>
See also</st>


<p>

<table style="background:#f9f9f9; font-size:85%; line-height:110%; ">
<row>
<col>
 <image width="32x28px" src="Crypto_key.svg">
</image>
</col>
<col style="padding:0 0.2em;">
 <b><it>
Cryptography&#32;portal</it></b></col>
</row>
</table>
</p>
<p>

<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../809/38809.xml">
GPG</link></entry>
<entry level="1" type="bullet">

 <message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<proposal wordnetid="107162194" confidence="0.8">
<recommendation wordnetid="106671637" confidence="0.8">
<advice wordnetid="106671484" confidence="0.8">
<link xlink:type="simple" xlink:href="../352/296352.xml">
X.509</link></advice>
</recommendation>
</proposal>
</rule>
</direction>
</protocol>
</message>
</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../502/2405502.xml">
E-mail privacy</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../139/11008139.xml">
E-mail encryption</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../222/24222.xml">
Public-key cryptography</link></entry>
<entry level="1" type="bullet">

 <message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<link xlink:type="simple" xlink:href="../737/593737.xml">
S/MIME</link></rule>
</direction>
</protocol>
</message>
 secured e-mail</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../861/8860861.xml">
PGP word list</link></entry>
<entry level="1" type="bullet">

 <message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<link xlink:type="simple" xlink:href="../674/4422674.xml">
ZRTP</link></rule>
</direction>
</protocol>
</message>
</entry>
</list>
</p>

</sec>
<sec>
<st>
Further reading</st>

<p>

<list>
<entry level="1" type="bullet">

  <cite style="font-style:normal" class="book"><physical_entity wordnetid="100001930" confidence="0.8">
<communicator wordnetid="109610660" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<intellectual wordnetid="109621545" confidence="0.8">
<alumnus wordnetid="109786338" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<writer wordnetid="110794014" confidence="0.8">
<scholar wordnetid="110557854" confidence="0.8">
<journalist wordnetid="110224578" confidence="0.8">
<link xlink:type="simple" xlink:href="../707/2349707.xml">
Garfinkel, Simson</link></journalist>
</scholar>
</writer>
</causal_agent>
</alumnus>
</intellectual>
</person>
</communicator>
</physical_entity>
&#32;(<link>
1991-12-01</link>). PGP: Pretty Good Privacy.&#32;<link xlink:type="simple" xlink:href="../827/216827.xml">
O'Reilly &amp; Associates</link>. ISBN 1-56592-098-8.</cite>&nbsp;</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 Zimmerman, Phil&#32;(1991-06).&#32;"<weblink xlink:type="simple" xlink:href="http://www.philzimmermann.com/EN/essays/WhyIWrotePGP.html">
Why I Wrote PGP</weblink>".&#32;Retrieved on <link>
2008-03-03</link>.</entry>
</list>
</p>

</sec>
<sec>
<st>
References</st>

<p>

<reflist>
<entry id="1">
  <cite style="font-style:normal" class="book"><person wordnetid="100007846" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../732/36732.xml">
Schneier, Bruce</link></person>
&#32;(<link>
1995-10-09</link>). Applied Cryptography.&#32;<region wordnetid="108630985" confidence="0.8">
<administrative_district wordnetid="108491826" confidence="0.8">
<location wordnetid="100027167" confidence="0.8">
<district wordnetid="108552138" confidence="0.8">
<country wordnetid="108544813" confidence="0.8">
<link xlink:type="simple" xlink:href="../131/8210131.xml">
New York</link></country>
</district>
</location>
</administrative_district>
</region>
:&#32;<company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../930/537930.xml">
Wiley</link></company>
,&#32;587. ISBN 0471117099.</cite>&nbsp;</entry>
<entry id="2">
  <cite style="font-style:normal" class="book"><link>
Nichols, Randall</link>&#32;(<link xlink:type="simple" xlink:href="../553/34553.xml">
1999</link>). ICSA Guide to Cryptography.&#32;<company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../269/651269.xml">
McGrawHill</link></company>
,&#32;267. ISBN 0079137598.</cite>&nbsp;</entry>
<entry id="3">
<weblink xlink:type="simple" xlink:href="http://www.epic.org/crypto/scarfo.html">
United States v. Scarfo (Key-Logger Case)</weblink></entry>
<entry id="4">
<weblink xlink:type="simple" xlink:href="http://www.news.com/8301-10784_3-9741357-7.html">
Feds use keylogger to thwart PGP, Hushmail | Tech news blog - CNET News.com</weblink></entry>
<entry id="5">
<weblink xlink:type="simple" xlink:href="http://www.news.com/8301-13578_3-9834495-38.html?tag=nefd.blgs">
Judge: Man can't be forced to divulge encryption passphrase | The Iconoclast - politics, law, and technology - CNET News.com</weblink></entry>
<entry id="6">
<weblink xlink:type="simple" xlink:href="http://www.news.com/8301-13578_3-9854034-38.html">
Feds appeal loss in PGP compelled-passphrase case | The Iconoclast - politics, law, and technology - CNET News.com</weblink></entry>
<entry id="7">
 <cite style="font-style:normal" class="book"><link xlink:type="simple" xlink:href="../486/23486.xml">
Zimmermann, Philip</link>&#32;(<link xlink:type="simple" xlink:href="../658/34658.xml">
1995</link>). PGP Source Code and Internals.&#32;<company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../601/719601.xml">
MIT Press</link></company>
. ISBN 0-262-24039-4.</cite>&nbsp;</entry>
</reflist>
</p>

</sec>
<sec>
<st>
 External links </st>

<ss1>
<st>
OpenPGP implementations</st>
<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.pgp.com">
PGP Corporation</weblink> </entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.gnupg.org/">
GNU Privacy Guard</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.cgeep.com/">
cGeep Pro</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://openpgp.nominet.org.uk/">
OpenPGP::SDK</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.patownsend.com/PGPencryption.htm">
Patrick Townsend &amp; Associates</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.authora.com">
Authora Inc.</weblink> </entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.mcafee.com/us/products/mcafee/encryption/category.htm">
McAfee Inc.</weblink> </entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.feneris.com">
Feneris Solutions Inc. Canada</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.easybyte.com/products/cryptocx.html">
EasyByte Cryptocx</weblink> - Component</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.veridis.com/openpgp/en/index.asp">
Veridis</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.bouncycastle.org/">
Legion of The Bouncy Castle</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://netbsd-soc.sourceforge.net/projects/bpg/">
BSD Privacy Guard</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.primefactors.com/what_psypherOPS.html">
Prime Factors Inc.</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://secemail.brookes.ac.uk/">
Oxford Brookes Secure Email Proxy</weblink></entry>
</list>
</p>

</ss1>
<ss1>
<st>
Support</st>
<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://forums.pgpsupport.com/">
PGP Corporation Support Forum</weblink> community support plus contributions from PGP Support staff</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.philzimmermann.com">
Phil Zimmermann's Home Page</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://pgp.mit.edu/">
MIT Public Key Directory for Registration and Search</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.rossde.com/PGP/pgp_keyserv.html">
List of public keyservers</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.ietf.org/html.charters/openpgp-charter.html">
IETF OpenPGP working group</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.openpgp.org/">
OpenPGP Alliance</weblink></entry>
</list>
</p>


</ss1>
</sec>
</bdy>
</system_of_measurement>
</standard>
</article>
