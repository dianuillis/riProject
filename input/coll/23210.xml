<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 15:32:15[mciao0828] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>Pseudorandomness</title>
<id>23210</id>
<revision>
<id>240540458</id>
<timestamp>2008-09-23T21:51:07Z</timestamp>
<contributor>
<username>StigBot</username>
<id>5316354</id>
</contributor>
</revision>
<categories>
<category>Pseudorandomness</category>
<category>Theoretical computer science</category>
</categories>
</header>
<bdy>
<p>

A <b>pseudorandom</b> process is a process that appears <link xlink:type="simple" xlink:href="../523/19196523.xml">
random</link> but is not. Pseudorandom sequences typically exhibit <link xlink:type="simple" xlink:href="../773/2551773.xml">
statistical randomness</link> while being generated by an entirely deterministic causal process. Such a process is easier to produce than a genuine random one, and has the benefit that it can be used again and again to produce exactly the same numbers, useful for testing and fixing software.</p>
<p>

To generate truly random numbers requires the measurements of non-deterministic processes. The open source operating system Linux uses various system timings(like user keystrokes, I/O, or least-significent digit voltage measurements) to produce a pool of random numbers. It attempts to constantly replenish this pool and, assuming its entropy doesn't fall beneath a certain level, will issue a random number. This system is similar to those of dedicated hardware random number generators.</p>

<sec>
<st>
History</st>

<p>

The generation of random numbers has many uses (mostly in <link xlink:type="simple" xlink:href="../685/26685.xml">
statistics</link>, for random <link xlink:type="simple" xlink:href="../361/160361.xml">
sampling</link>, and <link xlink:type="simple" xlink:href="../444/43444.xml">
simulation</link>). Before modern computing, researchers requiring random numbers would either generate them through various means (<link xlink:type="simple" xlink:href="../244/8244.xml">
dice</link>, <link xlink:type="simple" xlink:href="../083/23083.xml">
cards</link>, <link xlink:type="simple" xlink:href="../487/26487.xml">
roulette</link> wheels, etc.) or use existing random number tables.</p>
<p>

The first attempt to provide researchers with a ready supply of random digits was in 1927, when the Cambridge University Press published a table of 41,600 digits developed by Leonard H.C. Tippet. In 1947, the <link xlink:type="simple" xlink:href="../944/214944.xml">
RAND Corporation</link> generated numbers by the electronic simulation of a roulette wheel; the results were eventually published in 1955  as <it><work wordnetid="104599396" confidence="0.8">
<product wordnetid="104007894" confidence="0.8">
<creation wordnetid="103129123" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<book wordnetid="106410904" confidence="0.8">
<publication wordnetid="106589574" confidence="0.8">
<link xlink:type="simple" xlink:href="../812/1354812.xml">
A Million Random Digits with 100,000 Normal Deviates</link></publication>
</book>
</artifact>
</creation>
</product>
</work>
</it>.</p>
<p>

<person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../942/15942.xml">
John von Neumann</link></scientist>
</person>
 was a pioneer in computer-based random number generators. In <link xlink:type="simple" xlink:href="../602/34602.xml">
1951</link>, <person wordnetid="100007846" confidence="0.9508927676800064">
<mathematician wordnetid="110301261" confidence="0.9173553029164789">
<link xlink:type="simple" xlink:href="../706/379706.xml">
Derrick Henry Lehmer</link></mathematician>
</person>
 invented the <link xlink:type="simple" xlink:href="../527/45527.xml">
linear congruential generator</link>, used in most <link xlink:type="simple" xlink:href="../524/45524.xml">
pseudorandom number generator</link>s today. With the spread of the use of computers, algorithmic pseudorandom number generators replaced random number tables, and "true" random number generators (<link xlink:type="simple" xlink:href="../506/160506.xml">
Hardware random number generator</link>s) are only used in a few cases.</p>

</sec>
<sec>
<st>
Almost random</st>

<p>

<indent level="1">

<it>Anyone who considers arithmetical methods of producing random digits is, of course, in a state of sin.</it> &mdash; <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../942/15942.xml">
John von Neumann</link></scientist>
</person>
 (<link xlink:type="simple" xlink:href="../602/34602.xml">
1951</link>)
</indent>

A pseudo-random variable is a variable which is created by a deterministic procedure (often a computer program or subroutine) which (generally) takes random bits as input. The pseudo-random string will typically be longer than the original random string, but less random (less <link xlink:type="simple" xlink:href="../445/15445.xml">
entropic</link>, in the <link xlink:type="simple" xlink:href="../773/14773.xml">
information theory</link> sense). This can be useful for randomized algorithms.</p>
<p>

<link xlink:type="simple" xlink:href="../524/45524.xml">
Pseudorandom number generator</link>s are widely used in such applications as computer modeling (e.g., <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<model wordnetid="110324560" confidence="0.8">
<assistant wordnetid="109815790" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../876/60876.xml">
Markov chain</link></causal_agent>
</worker>
</assistant>
</model>
</person>
</physical_entity>
s), statistics, experimental design, etc. Some of them are sufficiently random to be useful in these applications. Many are not, and considerable sophistication is required to correctly determine the difference for any particular purpose. Incautious use of readily available random number generators has caused considerable, and long sustained, damage to the worth of large numbers of research projects for many years. The <artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<apparatus wordnetid="102727825" confidence="0.8">
<generator wordnetid="103434188" confidence="0.8">
<equipment wordnetid="103294048" confidence="0.8">
<link xlink:type="simple" xlink:href="../294/621294.xml">
RANDU</link></equipment>
</generator>
</apparatus>
</instrumentality>
</artifact>
 generator routine available on many large <link xlink:type="simple" xlink:href="../266/20266.xml">
mainframe computer</link>s for decades had considerable, widely unappreciated, faults.</p>

</sec>
<sec>
<st>
Complexity-based pseudorandomness</st>
<p>

A <link xlink:type="simple" xlink:href="../543/23543.xml">
distribution</link> is considered to be pseudorandom if it cannot be distinguished from the truly (Uniform) random distribution by any efficient (polynomial time) procedure or circuit. The <b>uniform distribution</b>, for a length parameter <it>n</it> assigns each <it>n</it>-bit string <math>x \in \{0,1\}^n</math> with equal probability of <math>2^{-n}\,</math>. Pseudorandom distributions can be generated <link xlink:type="simple" xlink:href="../922/47922.xml">
deterministic</link>ally from short random <link xlink:type="simple" xlink:href="../694/37694.xml">
seeds</link>, which are much shorter than the length of the pseudorandom output. </p>
<p>

A method for distinguishing two distributions from each other is by taking their <link xlink:type="simple" xlink:href="../620/5187620.xml">
statistical distance</link>. If two distributions <math>p = [p_1, \cdots, p_N]</math> and <math>q = [q_1, \cdots, q_N]</math> have a very small statistical distance <math>{\left \Vert p - q \right \Vert}_1 / 2</math>, there exists no circuit, S, such that S can distinguish them well, even with no restriction on the size of S (where <math>{\left \Vert \right \Vert}_1</math> denotes the L1 norm, see <link xlink:type="simple" xlink:href="../354/408354.xml">
taxicab geometry</link>). Also, if the size of S is too small then it may not be able to distinguish some distributions that are very different. </p>

<ss1>
<st>
Definition</st>
<p>

A distribution ensemble <math>\mathrm{D}_n\,</math> is <math>(S(n), \epsilon(n))\,</math> pseudorandom if, for any circuit <math>C</math> of size <math>\leq S(n)</math>, with <math>\mathrm{U}_n\,</math> as the uniform random distribution, then</p>
<p>

<indent level="3">

<math>\left \vert \mathrm{Pr}_{\mathrm{x} \in \mathrm{U}_n} [C(x) = 1] - \mathrm{Pr}_{\mathrm{x} \in \mathrm{D}_n} [C(x) = 1] \right \vert \leq \epsilon(n)</math>
</indent>

<math>\mathrm{D}_n\,</math> is called pseudorandom if it is pseudorandom for all <math>S(n) = poly(n\,)</math> and <math>\epsilon(n) = 1/O(poly(n))\,</math>.  This definition of pseudorandomness is used primarily in the study of <link xlink:type="simple" xlink:href="../809/1812809.xml">
pseudorandom generator</link>s.</p>

</ss1>
</sec>
<sec>
<st>
Cryptography</st>

<p>

<indent level="1">

<it>See also: <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../249/182249.xml">
Cryptographically secure pseudorandom number generator</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</it>
</indent>

For such applications as <link xlink:type="simple" xlink:href="../432/18934432.xml">
cryptography</link>, the use of pseudorandom number generators (whether hardware or software or some combination) is insecure. When random values are required in cryptography, the goal is to make a message as hard to crack as possible, by eliminating or obscuring the parameters used to encrypt the message (the <link xlink:type="simple" xlink:href="../039/53039.xml">
key</link>) from the message itself or from the context in which it is carried.  Pseudorandom sequences are deterministic and reproducible; all that is required to discover and reproduce a pseudorandom sequence is the algorithm used to generate it and the initial seed.  So the entire sequence of numbers is only as powerful as the randomly chosen parts - sometimes the algorithm and the seed, but usually only the seed.</p>
<p>

There are many examples in cryptographic history of cyphers, otherwise excellent, in which random choices were not random enough and security was lost in direct consequence. The <military_action wordnetid="100952963" confidence="0.8">
<group_action wordnetid="101080366" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<conflict wordnetid="100958896" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<war wordnetid="100973077" confidence="0.8">
<link xlink:type="simple" xlink:href="../927/32927.xml">
World War II</link></war>
</psychological_feature>
</act>
</conflict>
</event>
</group_action>
</military_action>
 <link xlink:type="simple" xlink:href="../573/15573.xml">
Japan</link>ese <link xlink:type="simple" xlink:href="../373/50373.xml">
PURPLE</link> cypher machine used for diplomatic communications is a good example. It was consistently broken throughout WWII, mostly because the "key values" used were insufficiently random. They had patterns, and those patterns made any intercepted traffic readily decryptable. Had keys (ie, the initial settings of the stepping switches in the machine) been made unpredictably (ie, randomly), that traffic would have been much harder to break, and perhaps even secure in practice.</p>
<p>

Users and designers of cryptography are strongly cautioned to treat their randomness needs with the utmost care. Absolutely nothing has changed with the era of computerized cryptography, except that patterns in pseudorandom data are easier to discover than ever before. Randomness is, if anything, more important than ever.</p>


</sec>
<sec>
<st>
Monte Carlo method simulations</st>

<p>

A <technique wordnetid="105665146" confidence="0.8">
<know-how wordnetid="105616786" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<link xlink:type="simple" xlink:href="../098/56098.xml">
Monte Carlo method</link></method>
</know-how>
</technique>
 Simulation is defined as any method that utilizes sequences of random numbers to perform the simulation.  Other simulations include quantum chromo dynamics, radiation cancer therapy, traffic flow, <link xlink:type="simple" xlink:href="../980/27980.xml">
stellar evolution</link> and VLSI design.  All these simulations require the use of random numbers and therefore <link xlink:type="simple" xlink:href="../524/45524.xml">
pseudorandom number generator</link>s, which makes creating random-like numbers very important.</p>
<p>

An easy example of how a computer would do a Monte Carlo method Simulation is the calculation of <link xlink:type="simple" xlink:href="../601/23601.xml">
π</link>.  If a square enclosed a circle and a point were randomly chosen inside the square the point would either lie inside the circle or outside it.  If the process were repeated many times, you can see that the ratio of the random points that lie inside the circle to outside it is proportional to ratio of the circle area to the square area.  From this we can estimate π.</p>

</sec>
<sec>
<st>
See also</st>
<p>

<list>
<entry level="1" type="bullet">

 <family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../991/7991.xml">
Disperser</link></family>
</entry>
<entry level="1" type="bullet">

 <family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../313/9313.xml">
Expander graph</link></family>
</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../309/9309.xml">
Extractor</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../685/25685.xml">
Random variable</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../594/41594.xml">
PN Sequences</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../896/2006896.xml">
Pseudo-random binary sequence</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../524/45524.xml">
Pseudorandom number generator</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../163/4160163.xml">
List of random number generators</link></entry>
</list>
</p>

</sec>
<sec>
<st>
 External links </st>
<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.fourmilab.ch/hotbits">
HotBits: Genuine random numbers, generated by radioactive decay</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.bookrags.com/sciences/sciencehistory/random-numbers-wsd.html">
Random number history</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.merrymeet.com/jon/usingrandom.html">
Using and Creating Cryptographic-Quality Random Numbers</weblink></entry>
<entry level="1" type="bullet">

 In RFC 1750, the use of pseudo-random number sequences in cryptography is discussed at length.</entry>
<entry level="1" type="bullet">

 In Donald E. Knuth, <work wordnetid="104599396" confidence="0.8">
<product wordnetid="104007894" confidence="0.8">
<creation wordnetid="103129123" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<book wordnetid="106410904" confidence="0.8">
<publication wordnetid="106589574" confidence="0.8">
<link xlink:type="simple" xlink:href="../358/31358.xml">
The Art of Computer Programming</link></publication>
</book>
</artifact>
</creation>
</product>
</work>
, Volume 2: Seminumerical Algorithms (3rd edition),  1997. Addison-Wesley Professional, ISBN 0-201-89684-2</entry>
</list>
</p>


</sec>
</bdy>
</article>
