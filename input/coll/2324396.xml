<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 19:31:34[mciao0826] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<accomplishment  confidence="0.8" wordnetid="100035189">
<event  confidence="0.8" wordnetid="100029378">
<action  confidence="0.8" wordnetid="100037396">
<act  confidence="0.8" wordnetid="100030358">
<psychological_feature  confidence="0.8" wordnetid="100023100">
<feat  confidence="0.8" wordnetid="100036762">
<header>
<title>Directory traversal</title>
<id>2324396</id>
<revision>
<id>243883390</id>
<timestamp>2008-10-08T13:28:01Z</timestamp>
<contributor>
<username>Cydebot</username>
<id>1215485</id>
</contributor>
</revision>
<categories>
<category>Security exploits</category>
<category>Web security exploits</category>
</categories>
</header>
<bdy>

A <b>directory traversal</b> (or <b>path traversal</b>) is to <link xlink:type="simple" xlink:href="../875/9875.xml">
exploit</link> insufficient security validation / sanitization of user-supplied input file names, so that characters representing "traverse to parent directory" are passed through to the file APIs.<p>

The goal of this attack is to order an application to access a <link xlink:type="simple" xlink:href="../077/7077.xml">
computer file</link> that is not intended to be accessible. This attack exploits a lack of security (the software is acting exactly as it is supposed to) as opposed to exploiting a bug in the code.</p>
<p>

<b>Directory traversal</b> is also known as the ../ (dot dot slash) attack, <link xlink:type="simple" xlink:href="../027/5515027.xml">
directory</link> climbing, and backtracking. Some forms of this attack are also <link xlink:type="simple" xlink:href="../120/1046120.xml">
canonicalization</link> attacks.</p>

<sec>
<st>
 Example </st>
<p>

A typical example of vulnerable application code is:</p>

<p>

?php
$template = 'blue.php';
if ( isset( $_COOKIE['TEMPLATE'] ) )
$template = $_COOKIE['TEMPLATE'];
include ( "/home/users/phpguru/templates/" . $template );
?&amp;gt;</p>

<p>

An attack against this system could be to send the following HTTP request:

GET /vulnerable.php HTTP/1.0
Cookie: TEMPLATE=../../../../../../../../../etc/passwd

</p>
<p>

Generating a server response such as:

HTTP/1.0 200 OK
Content-Type: text/html
Server: Apache

root:fi3sED95ibqR6:0:1:System Operator:/:/bin/ksh 
daemon:*:1:1::/tmp: 
phpguru:f8fk3j1OIf31.:182:100:Developer:/home/users/phpguru/:/bin/csh
</p>
<p>

The repeated ../ characters after /home/users/phpguru/templates/ has caused 
<weblink xlink:type="simple" xlink:href="http://www.php.net/manual/en/function.include.php">
include()</weblink> to traverse to the root directory, and then include the UNIX password file <know-how wordnetid="105616786" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<link xlink:type="simple" xlink:href="../511/17981511.xml">
/etc/passwd</link></method>
</know-how>
. </p>
<p>

UNIX <know-how wordnetid="105616786" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<link xlink:type="simple" xlink:href="../511/17981511.xml">
/etc/passwd</link></method>
</know-how>
 is a common file used to demonstrate <b>directory traversal</b>, as it is often used by <link xlink:type="simple" xlink:href="../540/2471540.xml">
crackers</link> to try <link xlink:type="simple" xlink:href="../981/477981.xml">
cracking</link> the passwords.</p>

</sec>
<sec>
<st>
 Variations of directory traversal </st>
<p>

Directory traversal is trickier to prevent than it might seem. A "filter out known bad characters" protection strategy is likely to <b>fail</b>. </p>
<p>

There are many other factors involved that would determine whether a directory traversal would actually work. However, if the application does not validate the legitimacy of such parameters, it is quite likely that attackers may have some wiggle room to exploit this functionality for malicious purposes.</p>
<p>

Listed below are some known directory traversal attack strings:</p>

<ss1>
<st>
 Directory traversal on UNIX </st>
<p>

Common <family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../815/31815.xml">
Unix-like</link></family>
 directory traversal uses the ../ characters.</p>

</ss1>
<ss1>
<st>
 Directory traversal on Microsoft Windows </st>
<p>

<link xlink:type="simple" xlink:href="../890/18890.xml">
Microsoft Windows</link> or <link xlink:type="simple" xlink:href="../146/8146.xml">
DOS</link> directory traversal uses the ..\ characters. </p>
<p>

Today, many Windows programs or APIs also accept <family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../815/31815.xml">
UNIX-like</link></family>
 directory traversal characters. </p>
<p>

Each partition has a separate root directory (labeled C:\ for a particular partition C) and there is no common root directory above that. This means that for most directory vulnerabilities on Windows, the attack is limited to a single partition.</p>

</ss1>
<ss1>
<st>
 URI encoded directory traversal </st>

<p>

<link xlink:type="simple" xlink:href="../120/1046120.xml">
Canonicalization</link> problem. </p>
<p>

Some web applications scan <link xlink:type="simple" xlink:href="../671/717671.xml">
query string</link> for dangerous characters such as:
<list>
<entry level="1" type="bullet">

 ..</entry>
<entry level="1" type="bullet">

 ..\</entry>
<entry level="1" type="bullet">

 ../</entry>
</list>

to prevent directory traversal. However, the query string is usually URI decoded before use. Therefore these applications are vulnerable to <standard wordnetid="107260623" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../286/1829286.xml">
percent encoded</link></system_of_measurement>
</standard>
 directory traversal such as:
<list>
<entry level="1" type="bullet">

 %2e%2e%2f which translates to ../</entry>
<entry level="1" type="bullet">

 %2e%2e/ which translates to ../</entry>
<entry level="1" type="bullet">

 ..%2f which translates to ../</entry>
<entry level="1" type="bullet">

 %2e%2e%5c which translates to ..\</entry>
</list>

etc.</p>

</ss1>
<ss1>
<st>
 Unicode / UTF-8 encoded directory traversal </st>

<p>

<link xlink:type="simple" xlink:href="../120/1046120.xml">
Canonicalization</link> problem. </p>
<p>

<message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<format wordnetid="106636806" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../188/32188.xml">
UTF-8</link></database>
</wordnet>
</format>
</lexical_database>
</electronic_database>
</information>
</message>
 was noted as a source of vulnerabilities and attack vectors in <weblink xlink:type="simple" xlink:href="http://www.schneier.com/crypto-gram-0007.html">
Cryptogram Newsletter July 2000</weblink> by <person wordnetid="100007846" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../732/36732.xml">
Bruce Schneier</link></person>
 and Jeffrey Streifling.  </p>
<p>

When Microsoft added <link xlink:type="simple" xlink:href="../742/31742.xml">
unicode</link> support to their Web server, a new way of encoding ../ was introduced into their code, causing their attempts at directory traversal prevention to be circumvented.</p>
<p>

Multiple percent encodings, such as
<list>
<entry level="1" type="bullet">

 %c1%1c</entry>
<entry level="1" type="bullet">

 %c0%9v</entry>
<entry level="1" type="bullet">

 %c0%af</entry>
</list>

translated into / or \ characters.</p>
<p>

Why? Percent encodings were decoded into the corresponding 8-bit characters by Microsoft webserver. This has historically been correct behavior as Windows and <link xlink:type="simple" xlink:href="../146/8146.xml">
DOS</link> traditionally used <link xlink:type="simple" xlink:href="../150/328150.xml">
canonical</link> 8-bit characters sets based upon <message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<representation wordnetid="105926676" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<link xlink:type="simple" xlink:href="../586/586.xml">
ASCII</link></rule>
</direction>
</representation>
</protocol>
</message>
.</p>
<p>

However, the original <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<format wordnetid="106636806" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../188/32188.xml">
UTF-8</link></database>
</wordnet>
</format>
</lexical_database>
</electronic_database>
</information>
</message>
 was not canonical, and several strings were now string encodings translatable into the same string. Microsoft performed the anti-traversal checks without UTF-8 <link xlink:type="simple" xlink:href="../120/1046120.xml">
canonicalization</link>, and therefore not noticing that (<system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../263/13263.xml">
HEX</link></instrumentality>
</artifact>
</system>
) C0AF and (<system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../263/13263.xml">
HEX</link></instrumentality>
</artifact>
</system>
) 2F were the same character when doing <idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<category wordnetid="105838765" confidence="0.8">
<language wordnetid="106282651" confidence="0.8">
<type wordnetid="105840188" confidence="0.8">
<kind wordnetid="105839024" confidence="0.8">
<link xlink:type="simple" xlink:href="../701/27701.xml">
string</link></kind>
</type>
</language>
</category>
</concept>
</idea>
 comparisons.</p>

</ss1>
</sec>
<sec>
<st>
 Possible Methods to Prevent Directory Traversal </st>

<p>

A possible algorithm for preventing directory traversal would be to:</p>
<p>

<list>
<entry level="1" type="bullet">

 Process URI requests that do not result in a file request, e.g, executing a hook into user code, before continuing below.</entry>
<entry level="1" type="bullet">

 When a URI request for a file/directory is to be made, build a full path to the file/directory if it exists, and normalize all characters (e.g, %20 converted to spaces).</entry>
<entry level="1" type="bullet">

 It is assumed that a 'Document Root' fully qualified, normalized, path is known, and this string has a length N. Assume that no files outside this directory can be served.</entry>
<entry level="1" type="bullet">

 Ensure that the first N characters of the fully qualified path to the requested file is exactly the same as the 'Document Root'.</entry>
<entry level="1" type="bullet">

 If so, allow the file to be returned.</entry>
<entry level="1" type="bullet">

 If not, return an error, since the request is clearly out of bounds from what the web-server should be allowed to serve.</entry>
</list>
</p>

</sec>
<sec>
<st>
 See also </st>
<p>

<list>
<entry level="1" type="bullet">

 <event wordnetid="100029378" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<link xlink:type="simple" xlink:href="../308/585308.xml">
Chroot jails</link></activity>
</procedure>
</psychological_feature>
</act>
</event>
 may be subject to directory traversal using if the chroot jail is incorrectly created. Possible directory traversal attack vectors are open <link xlink:type="simple" xlink:href="../754/608754.xml">
file descriptor</link>s to directories outside the jail. The <link xlink:type="simple" xlink:href="../129/159129.xml">
working directory</link> is another possible attack vector.</entry>
</list>
</p>

</sec>
<sec>
<st>
 Resources </st>
<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.owasp.org">
Open Web Application Security Project</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.webappsec.org/projects/threat/classes/path_traversal.shtml">
The WASC Threat Classification - Path Traversal</weblink></entry>
</list>
</p>

</sec>
<sec>
<st>
 External links </st>
<p>

<list>
<entry level="1" type="bullet">

Conviction for using directory traversal. <weblink xlink:type="simple" xlink:href="http://www.theregister.co.uk/2005/10/05/dec_case/">
http://www.theregister.co.uk/2005/10/05/dec_case/</weblink> <weblink xlink:type="simple" xlink:href="http://comment.zdnet.co.uk/0,39020505,39226981,00.htm">
http://comment.zdnet.co.uk/0,39020505,39226981,00.htm</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://seclists.org/lists/bugtraq/2000/Oct/0264.html">
Bugtraq: IIS %c1%1c remote command execution</weblink></entry>
<entry level="1" type="bullet">

 Cryptogram Newsletter July 2000 <weblink xlink:type="simple" xlink:href="http://www.schneier.com/crypto-gram-0007.html">
http://www.schneier.com/crypto-gram-0007.html</weblink>.</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.armorize.com/resources/vulnerability.php?rdChart=Chart1&amp;Keyword=Directory+traversal&amp;dbxCategory=ALL_Category&amp;dbxYear=ALL_Year&amp;dbxLanguage=ALL_Language&amp;Submit=Search">
Known directory traversal vulnerabilities since 2000</weblink> by Armorize Technologies</entry>
</list>
</p>


</sec>
</bdy>
</feat>
</psychological_feature>
</act>
</action>
</event>
</accomplishment>
</article>
