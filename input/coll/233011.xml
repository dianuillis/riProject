<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 16:35:46[mciao0827] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>Optimistic concurrency control</title>
<id>233011</id>
<revision>
<id>241957510</id>
<timestamp>2008-09-30T07:05:08Z</timestamp>
<contributor>
<username>Neilc</username>
<id>53222</id>
</contributor>
</revision>
<categories>
<category>concurrency control</category>
</categories>
</header>
<bdy>
<p>

In <link xlink:type="simple" xlink:href="../323/5323.xml">
computer science</link>, in the field of <link xlink:type="simple" xlink:href="../377/8377.xml">
database</link>s, <b>optimistic concurrency control</b>, (OCC) is a <link xlink:type="simple" xlink:href="../356/217356.xml">
concurrency control</link> method used in <link xlink:type="simple" xlink:href="../873/25873.xml">
relational database</link>s without using <link xlink:type="simple" xlink:href="../593/244593.xml">
lock</link>ing. It is commonly referred to as <b>optimistic locking</b>, a reference to the non-exclusive locks that are created on the database.</p>
<p>

Optimistic concurrency control is based on the assumption that most <link xlink:type="simple" xlink:href="../953/233953.xml">
database transaction</link>s don't conflict with other transactions, allowing OCC to be as permissive as possible in allowing transactions to execute.</p>
<p>

There are three phases in an OCC transaction:</p>

<p>

<b>Read</b>: The client reads values from the database, storing them to a private sandbox or cache that the client can then edit.
<b>Validate</b>: When the client has completed editing of the values in its sandbox or cache, it initiates the storage of the changes back to the database.  During validation, an algorithm checks if the changes to the data would conflict with either
<list>
<entry level="1" type="bullet">

 already-committed transactions in the case of <it>backward validation schemes</it>, or</entry>
<entry level="1" type="bullet">

 currently executing transactions in the case of <it>forward validation schemes</it>.</entry>
</list>

If a conflict exists, a conflict resolution algorithm must be used to resolve the conflict somehow (ideally by minimizing the number of changes made by the user) or, as a last resort, the entire transaction can be aborted (resulting in the loss of all changes made by the user).</p>
<p>

<b>Write</b>: If there is no possibility of conflict, the transaction commits.</p>

<p>

Optimistic concurrency is generally used in environments with a low contention for data.  When conflicts are rare, validation can be done efficiently, leading to higher throughput than other concurrency control methods.  However, if conflicts happen often, the cost of repeatedly restarting transactions, hurts performance significantly &mdash; other <link xlink:type="simple" xlink:href="../354/217354.xml">
non-lock concurrency control</link> methods have better performance when there are many conflicts.</p>

<sec>
<st>
Web usage</st>

<p>

The <link xlink:type="simple" xlink:href="../753/479753.xml">
stateless</link> nature of <link xlink:type="simple" xlink:href="../104/2701104.xml">
HTTP</link> makes locking infeasible for web user interfaces. It's common for a user to start editing a record, then leave without following a "cancel" or "logout" link. If locking is used, other users who attempt to edit the same record must wait until the first user's lock expires.</p>
<p>

OCC is a natural choice. It is simple to implement and avoids unnecessary waiting or silently overwritten records. Typically the <link xlink:type="simple" xlink:href="../674/3422674.xml">
form</link> presented to the user includes a hidden field with the record's original content, a timestamp, a sequence number, or an opaque token. On submit, this is compared against the database. If it differs, the conflict resolution algorithm is invoked.</p>

<ss1>
<st>
Examples</st>

<p>

<list>
<entry level="1" type="bullet">

 <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../710/323710.xml">
MediaWiki</link></software>
's edit pages use OCC. The conflict resolution algorithm is described .</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../573/4573.xml">
Bugzilla</link> uses OCC; conflicts are called "mid-air collisions".  <weblink xlink:type="simple" xlink:href="http://wiki.mozilla.org/Bugzilla:FAQ:Administrative_Questions#Does_Bugzilla_provide_record_locking_when_there_is_simultaneous_access_to_the_same_bug.">
http://wiki.mozilla.org/Bugzilla:FAQ:Administrative_Questions#Does_Bugzilla_provide_record_locking_when_there_is_simultaneous_access_to_the_same_bug.</weblink></entry>
<entry level="1" type="bullet">

 The <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../401/1421401.xml">
Ruby on Rails</link></software>
 framework has an API for OCC. <weblink xlink:type="simple" xlink:href="http://api.rubyonrails.com/classes/ActiveRecord/Locking.html">
http://api.rubyonrails.com/classes/ActiveRecord/Locking.html</weblink></entry>
<entry level="1" type="bullet">

 Most <link xlink:type="simple" xlink:href="../955/55955.xml">
revision control</link> systems support the "merge" model for concurrency, which is OCC.</entry>
</list>
</p>

</ss1>
</sec>
<sec>
<st>
References</st>

<p>

<list>
<entry level="1" type="bullet">

 <cite style="font-style:normal">Kung, H. T.; John T. Robinson&#32;(June 1981).&#32;"On optimistic methods for concurrency control". <it>ACM Transactions on Database Systems</it>&#32;<b>6</b>&#32;(2): 213-226. <document wordnetid="106470073" confidence="0.8">
<written_communication wordnetid="106349220" confidence="0.8">
<writing wordnetid="106362953" confidence="0.8">
<link xlink:type="simple" xlink:href="../994/422994.xml">
doi</link></writing>
</written_communication>
</document>
:<weblink xlink:type="simple" xlink:href="http://dx.doi.org/10.1145%2F319566.319567">
10.1145/319566.319567</weblink>.</cite>&nbsp;</entry>
</list>
</p>


</sec>
<sec>
<st>
See also</st>
<p>

<list>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../506/11848506.xml">
Opportunistic Locking</link></entry>
</list>
</p>


</sec>
</bdy>
</article>
