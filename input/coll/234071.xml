<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 16:34:37[mciao0825] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<entity  confidence="0.9511911446218017" wordnetid="100001740">
<header>
<title>Copy and paste programming</title>
<id>234071</id>
<revision>
<id>241261924</id>
<timestamp>2008-09-27T03:30:20Z</timestamp>
<contributor>
<username>Rnickel</username>
<id>1076919</id>
</contributor>
</revision>
<categories>
<category>All NPOV disputes</category>
<category>Anti-patterns</category>
<category>NPOV disputes from July 2008</category>
</categories>
</header>
<bdy>

<b>Copy and paste programming</b> is a pejorative term to describe highly repetitive <link xlink:type="simple" xlink:href="../311/5311.xml">
computer programming</link> code apparently produced by <link xlink:type="simple" xlink:href="../115/157115.xml">
copy and paste</link> operations. It is frequently symptomatic of a lack of programming competence, or an insufficiently expressive development environment, as subroutines or libraries would normally be used instead. In certain contexts it has legitimate value, if used with care.
<sec>
<st>
Forms of Copy And Paste Programming</st>

<ss1>
<st>
Plagiarism</st>
<p>

Copy and pasting is often done by inexperienced or student programmers, who find the act of writing code from scratch difficult and prefer to search for a pre-written solution or partial solution they can use as a basis for their own problem solving.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref></p>

</ss1>
<ss1>
<st>
Duplication</st>

<ss3>
<st>
As a way of applying library code</st>
<p>

Copy and pasting is also done by experienced programmers, who often have their own libraries of well tested, ready-to-use code snippets and generic <link xlink:type="simple" xlink:href="../775/775.xml">
algorithm</link>s that are easily adapted to specific tasks.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%222%22])">2</ref></p>

</ss3>
<ss3>
<st>
As a way of branching code</st>
<p>

<link xlink:type="simple" xlink:href="../285/3422285.xml">
Branching code</link> is a normal part of large-team software development, allowing parallel development on both branches and hence, shorter development cycles. Classical branching has the following qualities:
<list>
<entry level="1" type="bullet">

 Is managed by a <link xlink:type="simple" xlink:href="../955/55955.xml">
version control</link> system that supports branching</entry>
<entry level="1" type="bullet">

 Branches are re-merged once parallel development is completed.</entry>
</list>
</p>
<p>

Copy and paste is a less formal alternative to classical branching, often used when it is foreseen that the branches will diverge more and more over time, as when a new product is being spun off from an existing product.</p>

</ss3>
<ss3>
<st>
As an approach to repetitive tasks</st>

<p>

<table class="metadata plainlinks ambox ">
<row>
<col>

ambox-content" style=""</col>
</row>
<row>
<col class="mbox-image"><p>

<image width="40px" src="Unbalanced_scales.svg">
</image>
</p>
</col>
<col style="" class="mbox-text">
 <b>The  of this section is .</b> 
Please see the discussion on the . <it>(July 2008)</it>Please do not remove this message until the </col>
</row>
</table>

 
Copy and pasting may also occur in code that performs a repetitive task. Each repetition is copied from above and pasted in again, with minor modifications. It is a common mistake of the inexperienced or lazy programmer to duplicate code instead of writing a set of methods or objects.</p>

</ss3>
</ss1>
<ss1>
<st>
Deliberate Design Choice</st>
<p>

Use of programming idioms and <link xlink:type="simple" xlink:href="../952/164952.xml">
design patterns</link> are distinct from copy and paste programming, as they are expected to be recalled from the programmer's mind, rather than retrieved from a code bank.</p>
<p>

There is research aimed at "decriminalizing" cut and paste, known as the <link xlink:type="simple" xlink:href="../610/2199610.xml">
Subtext programming language</link>.  Note that under this model, cut and paste is the primary model of interaction and hence not an anti-pattern.</p>

</ss1>
</sec>
<sec>
<st>
Effects</st>

<ss1>
<st>
Specific to Plagiarized Code</st>
<p>

<list>
<entry level="1" type="bullet">

 Inexperienced programmers who copy code often do not fully understand the pre-written code they are taking. As such, the problem arises more from their inexperience and lack of <belief wordnetid="105941423" confidence="0.8">
<doctrine wordnetid="105943300" confidence="0.8">
<link>
courage</link></doctrine>
</belief>
 than from the act of copying and pasting, per se.  The code often comes from disparate sources such as friends' or co-workers' code, <link xlink:type="simple" xlink:href="../813/294813.xml">
Internet forum</link>s, code provided by the student's professors/TAs, or <link xlink:type="simple" xlink:href="../323/5323.xml">
computer science</link> textbooks. The result risks being a disjointed clash of styles, and may have superfluous code that tackles problems for which solutions are no longer required. </entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../085/37085.xml">
Bug</link>s can also easily be introduced by assumptions and design choices made in the separate sources that no longer apply when placed in a new environment.</entry>
<entry level="1" type="bullet">

 Such code may also, in effect, be unintentionally <link xlink:type="simple" xlink:href="../739/22739.xml">
obfuscated</link>, as the names of variables, classes, functions, etc, are normally left unchanged, even though their purpose may be completely different in the new context than it was in the original context.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref></entry>
</list>
</p>

</ss1>
<ss1>
<st>
Specific to Duplicated Code</st>

<ss3>
<st>
As a way of applying library code</st>
<p>

<list>
<entry level="1" type="bullet">

 Being a form of <link xlink:type="simple" xlink:href="../705/3875705.xml">
code duplication</link>, copy and paste programming has some intrinsic problems; such problems are exacerbated if the code doesn't preserve any semantic link between the source text and the copies. In this case, if changes are needed, time is wasted hunting for all the duplicate locations. (This can be partially mitigated if the original code and/or the copy are properly commented; however, even then the problem remains of making the same edits multiple times. Also, because code maintenance often omits updating the comments<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%223%22])">3</ref>, comments describing where to find remote pieces of code are notorious for going out-of-date.)  </entry>
<entry level="1" type="bullet">

 Adherents of <link xlink:type="simple" xlink:href="../757/22757.xml">
object oriented</link> methodologies further object to the "code library" use of copy and paste. Instead of making multiple mutated copies of a generic algorithm, an object oriented approach would <paradigm wordnetid="113804375" confidence="0.8">
<linguistic_relation wordnetid="113797142" confidence="0.8">
<inflection wordnetid="113803782" confidence="0.8">
<grammatical_relation wordnetid="113796779" confidence="0.8">
<link xlink:type="simple" xlink:href="../491/60491.xml">
abstract</link></grammatical_relation>
</inflection>
</linguistic_relation>
</paradigm>
 the algorithm into a reusable <link xlink:type="simple" xlink:href="../501/79501.xml">
encapsulated</link> <idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<link xlink:type="simple" xlink:href="../392/7392.xml">
class</link></concept>
</idea>
. The class is written flexibly, with full support of <link xlink:type="simple" xlink:href="../746/2617746.xml">
inheritance</link> and <link xlink:type="simple" xlink:href="../572/418572.xml">
overloading</link>, so that all calling code can be interfaced to use this generic code directly, rather than mutating the original.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%224%22])">4</ref> As additional functionality is required, the library is extended (while retaining <link xlink:type="simple" xlink:href="../459/4459.xml">
backward compatibility</link>). This way, if the original algorithm has a bug to fix or can be improved, all software using it stands to benefit.</entry>
</list>
</p>

</ss3>
<ss3>
<st>
As a way of branching code</st>
<p>

As a way of spinning-off a new product, copy and paste programming has some advantages. Because the new development initiative does not touch the code of the existing product:
<list>
<entry level="1" type="bullet">

 There is no need to <link xlink:type="simple" xlink:href="../411/38411.xml">
regression test</link> the existing product, saving on QA time associated with the new product launch, and reducing <link xlink:type="simple" xlink:href="../704/762704.xml">
time to market</link>.</entry>
<entry level="1" type="bullet">

 There is no risk of introduced bugs in the existing product, which might upset the installed user base. </entry>
</list>
</p>
<p>

The downsides are
<list>
<entry level="1" type="bullet">

 If the new product does not diverge as much as anticipated from the existing product, you can wind up supporting two code bases (at twice the cost) for what is essentially one product. This can lead to expensive <link xlink:type="simple" xlink:href="../871/25871.xml">
refactoring</link> and manual merging down the line. </entry>
<entry level="1" type="bullet">

 The duplicate code base doubles the time required to implement changes which may be desired across both products; this <it>increases</it> time-to-market for such changes, and may in fact wipe out any time gains achieved by branching the code in the first place.</entry>
</list>
</p>
<p>

As above, the alternative to a copy-and-paste approach would be an object-oriented approach:
<list>
<entry level="1" type="bullet">

 Start by factoring out code to be shared by both products into libraries. </entry>
<entry level="1" type="bullet">

 Use those libraries (rather than a second copy of the code base) as the foundation for development of the new product.</entry>
<entry level="1" type="bullet">

 If an additional third, fourth, or fifth version of the product is envisaged down the line, this approach is far stronger, because the ready-made code libraries dramatically shorten the development life cycle for any additional products after the second.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%225%22])">5</ref></entry>
</list>
</p>

</ss3>
<ss3>
<st>
As an approach to repetitive tasks</st>
<p>

<list>
<entry level="1" type="bullet">

 For repetitive tasks, the copy and paste approach often leads to large methods (a bad <link xlink:type="simple" xlink:href="../034/234034.xml">
code smell</link>).  </entry>
<entry level="1" type="bullet">

 The <link xlink:type="simple" xlink:href="../801/23801.xml">
procedural programming</link> model also discourages the copy-and-paste approach. Under a procedural model, a preferred approach to repetitive tasks is to create a function or subroutine that performs a single pass through the task; this subroutine is then called by the parent routine, either repetitively or better yet, with some form of looping structure. Such code is termed "well decomposed", and is recommended as being easier to read and more readily extensible.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%226%22])">6</ref></entry>
</list>
</p>
<p>

As reaction hereof the rule "<link xlink:type="simple" xlink:href="../957/3291957.xml">
don't repeat yourself</link>" is cited.</p>

</ss3>
</ss1>
</sec>
<sec>
<st>
References</st>


<p>

<reflist>
<entry id="1">
"<weblink xlink:type="simple" xlink:href="http://portal.acm.org/citation.cfm?id=1272896&amp;dl=GUIDE&amp;coll=GUIDE&amp;CFID=30889213&amp;CFTOKEN=55540185">
Revisiting Novice Programmers Errors</weblink>".&#32;  acm.org.&#32;Retrieved on <link>
2008-06-04</link>.
</entry>
<entry id="2">
"<weblink xlink:type="simple" xlink:href="http://www.codeproject.com/KB/aspnet/dynamic_page_building.aspx?display=Print">
Building ASP.NET Web Pages Dynamically in the Code-Behind</weblink>".&#32;  codeproject.com.&#32;Retrieved on <link>
2008-06-04</link>.</entry>
<entry id="3">
Spinellis, Diomidis.&#32;"<weblink xlink:type="simple" xlink:href="http://www.informit.com/articles/article.aspx?p=457502">
The Bad Code Spotter's Guide</weblink>".&#32;  InformIT.com.&#32;Retrieved on <link>
2008-06-06</link>.</entry>
<entry id="4">
Lewallen, Raymond.&#32;"<weblink xlink:type="simple" xlink:href="http://codebetter.com/blogs/raymond.lewallen/pages/59908.aspx">
4 major principles of Object-Oriented Programming</weblink>".&#32;  codebetter.com.&#32;Retrieved on <link>
2008-06-04</link>.</entry>
<entry id="5">
Eriksen, Lisa.&#32;"<weblink xlink:type="simple" xlink:href="http://www.docstoc.com/docs/356624/Code-Reuse-in-Object-Oriented-Software-Development">
Code Reuse In Object Oriented Software Development</weblink>".&#32;  Norwegian University of Science and Technology, Department of Computer and Information Science.&#32;Retrieved on <link>
2008-05-29</link>.</entry>
<entry id="6">
"<weblink xlink:type="simple" xlink:href="http://www.stanford.edu/class/cs106x/handouts/14-Decomposition.pdf">
Stanford University, CS 106X ("Programming Abstractions") Course Handout: "Decomposition"</weblink>".&#32;  Stanford University.&#32;Retrieved on <link>
2008-06-04</link>.</entry>
</reflist>
</p>

</sec>
<sec>
<st>
See also</st>
<p>

<list>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../115/157115.xml">
Copy and paste</link></entry>
</list>
</p>

</sec>
<sec>
<st>
External links</st>
<p>

<list>
<entry level="1" type="bullet">

</entry>
</list>
</p>

</sec>
</bdy>
</entity>
</article>
