<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 15:32:53[mciao0826] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<process  confidence="0.8" wordnetid="105701363">
<thinking  confidence="0.8" wordnetid="105770926">
<explanation  confidence="0.8" wordnetid="105793000">
<theory  confidence="0.8" wordnetid="105989479">
<higher_cognitive_process  confidence="0.8" wordnetid="105770664">
<header>
<title>Presburger arithmetic</title>
<id>23756</id>
<revision>
<id>229952108</id>
<timestamp>2008-08-05T09:43:11Z</timestamp>
<contributor>
<username>EmilJ</username>
<id>94981</id>
</contributor>
</revision>
<categories>
<category>1929 introductions</category>
<category>Formal theories of arithmetic</category>
<category>Model theory</category>
<category>Logic in computer science</category>
<category>Proof theory</category>
</categories>
</header>
<bdy>

<b>Presburger arithmetic</b> is the <link xlink:type="simple" xlink:href="../983/10983.xml">
first-order theory</link> of the <link xlink:type="simple" xlink:href="../474/21474.xml">
natural number</link>s with <link xlink:type="simple" xlink:href="../338/61338.xml">
addition</link>, named in honor of <link>
Mojżesz Presburger</link>, who published it in 1929. It is not as powerful as <link xlink:type="simple" xlink:href="../005/25005.xml">
Peano arithmetic</link> because it omits <link xlink:type="simple" xlink:href="../845/20845.xml">
multiplication</link>.
<sec>
<st>
Overview</st>
<p>

The language of Presburger arithmetic contains constants 0 and 1 and a binary function +, interpreted as addition. In this language, the axioms of Presburger arithmetic are the <link>
universal closures</link> of the following:
<list>
<entry level="1" type="number">

 ¬(0 = <it>x</it> + 1)</entry>
<entry level="1" type="number">

 <it>x</it> + 1 = <it>y</it> + 1 → <it>x</it> = <it>y</it> </entry>
<entry level="1" type="number">

 <it>x</it> + 0 = <it>x''</it></entry>
<entry level="1" type="number">

 (<it>x</it> + <it>y</it>) + 1 = <it>x</it> + (<it>y</it> + 1)</entry>
<entry level="1" type="number">

 Let <it>P</it>(<it>x</it>) be a <link xlink:type="simple" xlink:href="../983/10983.xml">
first-order formula</link> in the language of Presburger arithmetic with a  free variable <it>x</it> (and possibly other free variables). Then the following formula is an axiom:</entry>
<entry level="2" type="indent">

(<it>P</it>(0) &amp;and; &amp;forall;<it>x</it>(<it>P</it>(<it>x</it>) &amp;rarr; <it>P</it>(<it>x</it> + 1))) &amp;rarr; <it>P</it>(<it>y</it>).</entry>
</list>
</p>
<p>

(5) is an <link xlink:type="simple" xlink:href="../613/764613.xml">
axiom schema</link> of <link xlink:type="simple" xlink:href="../881/18881.xml">
induction</link>, representing infinitely many axioms. Since the axioms in the schema in (5) cannot be replaced by any finite number of axioms, Presburger arithmetic is not finitely axiomatizable. </p>
<p>

Presburger arithmetic cannot formalize concepts such as <link xlink:type="simple" xlink:href="../492/49492.xml">
divisibility</link> or <link xlink:type="simple" xlink:href="../666/23666.xml">
prime number</link>. Generally, any number concept leading to multiplication cannot be defined in Presburger arithmetic since that leads to incompleteness and undecidability. However, it can formulate individual instances of divisibility; for example, it proves "for all <it>x</it>, there exists <it>y</it> : <it>y</it> + <it>y</it> = <it>x</it> ∨ <it>y</it> + <it>y</it> + 1 = <it>x</it>". This states that every number is either even or odd.</p>

</sec>
<sec>
<st>
Properties</st>

<p>

<link>
Mojżesz Presburger</link> proved Presburger arithmetic to be:
<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../802/75802.xml">
consistent</link>: There is no statement in Presburger arithmetic which can be deduced from the axioms such that its negation can also be deduced.</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../054/56054.xml">
complete</link>: For each statement in Presburger arithmetic, either it is possible to deduce it from the axioms or it is possible to deduce its negation.</entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../118/913118.xml">
decidable</link>: There exists an <link xlink:type="simple" xlink:href="../775/775.xml">
algorithm</link> which decides whether any given statement in Presburger arithmetic is true or false.</entry>
</list>
</p>
<p>

The decidability of Presburger arithmetic can be shown using <link xlink:type="simple" xlink:href="../441/2150441.xml">
quantifier elimination</link>, supplemented by reasoning about arithmetical congruence.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref></p>
<p>

<link xlink:type="simple" xlink:href="../005/25005.xml">
Peano arithmetic</link>, which is Presburger arithmetic augmented with multiplication, cannot be decidable as a consequence of the negative answer to the <link xlink:type="simple" xlink:href="../672/9672.xml">
Entscheidungsproblem</link>. By <link>
Gödel's incompleteness theorem</link>, Peano arithmetic is  incomplete and its consistency is not internally provable.</p>
<p>

The decision problem for Presburger arithmetic is an interesting example in <link xlink:type="simple" xlink:href="../543/7543.xml">
computational complexity theory</link> and <link xlink:type="simple" xlink:href="../926/5926.xml">
computation</link>. Let <it>n</it> be the length of a statement in Presburger arithmetic. Then Fischer and <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../404/298404.xml">
Rabin</link></scientist>
</person>
 (1974) proved that any decision algorithm for Presburger arithmetic has a worst-case runtime of at least <math>2^{2^{cn}}</math>, for some constant <it>c</it>&amp;gt;0.  Hence, the decision problem for Presburger arithmetic is an example of a decision problem that has been proved to require more than exponential run time. Fischer and Rabin also proved that for any reasonable axiomatization (defined precisely in their paper), there exist theorems of length <it>n</it> which have <link xlink:type="simple" xlink:href="../166/8541166.xml">
doubly exponential</link> length proofs. Intuitively, this means there are computational limits on what can be proven by computer programs. Fischer and Rabin's work also implies that Presburger arithmetic can be used to define formulas which correctly calculate any algorithm as long as the inputs are less than relatively large bounds. The bounds can be increased, but only by using new formulas. On the other hand, a triply exponential upper bound on a decision procedure for Presburger Arithmetic was proved by Oppen (1978).</p>

</sec>
<sec>
<st>
Applications</st>
<p>

Because Presburger arithmetic is decidable, a <link xlink:type="simple" xlink:href="../336/8336.xml">
decision procedure</link> exists for it. Thus, an <link xlink:type="simple" xlink:href="../546/2546.xml">
automatic theorem prover</link> for Presburger arithmetic is possible. Such theorem provers exist. The double exponential complexity of the theory makes it infeasible to use the theorem provers on complicated formulas, but it only occurs in the presence of nested quantifiers: Oppen and Nelson (1980) describes an automatic theorem prover which uses the <link xlink:type="simple" xlink:href="../458/349458.xml">
simplex algorithm</link> on an extended Presburger arithmetic without nested quantifiers. The simplex algorithm has exponential worst-case run time, but the average run time is far better. Exponential run time is only observed for specially constructed cases. This makes a simplex-based approach practical in a working system.</p>
<p>

Presburger arithmetic can be extended to include multiplication by constants, since multiplication is repeated addition. Most array subscript calculations then fall within the region of decidable problems.  This approach is the basis of at least five proof of <link xlink:type="simple" xlink:href="../339/357339.xml">
correctness</link> systems for <link xlink:type="simple" xlink:href="../783/5783.xml">
computer programs</link>, beginning with the <link>
Stanford Pascal Verifier</link> in the late 1970s and continuing though to Microsoft's <link xlink:type="simple" xlink:href="../904/3078904.xml">
Spec#</link> system of 2005.</p>

</sec>
<sec>
<st>
See also</st>
<p>

<list>
<entry level="1" type="bullet">

<process wordnetid="105701363" confidence="0.8">
<thinking wordnetid="105770926" confidence="0.8">
<explanation wordnetid="105793000" confidence="0.8">
<theory wordnetid="105989479" confidence="0.8">
<higher_cognitive_process wordnetid="105770664" confidence="0.8">
<link xlink:type="simple" xlink:href="../440/2544440.xml">
Robinson arithmetic</link></higher_cognitive_process>
</theory>
</explanation>
</thinking>
</process>
</entry>
</list>
</p>

</sec>
<sec>
<st>
References</st>

<p>

<list>
<entry level="1" type="bullet">

 Cooper, D. C., 1972, "Theorem Proving in Arithmetic without Multiplication" in B. Meltzer and D. Michie, eds., <it>Machine Intelligence</it>. Edinburgh University Press: 91–100.</entry>
<entry level="1" type="bullet">

 <physical_entity wordnetid="100001930" confidence="0.8">
<peer wordnetid="109626238" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<colleague wordnetid="109935990" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<associate wordnetid="109816771" confidence="0.8">
<link xlink:type="simple" xlink:href="../372/8908372.xml">
Ferrante, Jeanne</link></associate>
</scientist>
</causal_agent>
</colleague>
</person>
</peer>
</physical_entity>
, and Charles W. Rackoff, 1979. <it>The Computational Complexity of Logical Theories</it>. Lecture Notes in Mathematics 718. <link xlink:type="simple" xlink:href="../949/1418949.xml">
Springer-Verlag</link>.</entry>
<entry level="1" type="bullet">

 Fischer, M. J., and <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../404/298404.xml">
Michael O. Rabin</link></scientist>
</person>
, 1974, "<weblink xlink:type="simple" xlink:href="http://www.lcs.mit.edu/publications/pubs/ps/MIT-LCS-TM-043.ps">
"Super-Exponential Complexity of Presburger Arithmetic.</weblink>" <it>Proceedings of the SIAM-AMS Symposium in Applied Mathematics Vol. 7</it>: 27–41.</entry>
<entry level="1" type="bullet">

 <cite style="font-style:normal">G. Nelson and D. C. Oppen&#32;(Apr. 1978).&#32;""A simplifier based on efficient decision algorithms"". <it>Proc. 5th ACM SIGACT-SIGPLAN symposium on Principles of programming languages</it>: 141&ndash;150. <document wordnetid="106470073" confidence="0.8">
<written_communication wordnetid="106349220" confidence="0.8">
<writing wordnetid="106362953" confidence="0.8">
<link xlink:type="simple" xlink:href="../994/422994.xml">
doi</link></writing>
</written_communication>
</document>
:<weblink xlink:type="simple" xlink:href="http://dx.doi.org/10.1145%2F512760.512775">
10.1145/512760.512775</weblink>.</cite>&nbsp;</entry>
<entry level="1" type="bullet">

 <link>
Mojżesz Presburger</link>, 1929, "Über die Vollständigkeit eines gewissen Systems der Arithmetik ganzer Zahlen, in welchem die Addition als einzige Operation hervortritt" in <it>Comptes Rendus du I congrès de Mathématiciens des Pays Slaves</it>. Warszawa: 92–101.</entry>
<entry level="1" type="bullet">

 Pugh, William, 1991, "<weblink xlink:type="simple" xlink:href="http://doi.acm.org/10.1145/125826.125848">
The Omega test: a fast and practical integer programming algorithm for dependence analysis,</weblink>".</entry>
<entry level="1" type="bullet">

 Reddy, C. R., and D. W. Loveland, 1978, "<weblink xlink:type="simple" xlink:href="http://doi.acm.org/10.1145/800133.804361">
Presburger Arithmetic with Bounded Quantifier Alternation.</weblink>" <it>ACM Symposium on Theory of Computing</it>: 320–325.</entry>
<entry level="1" type="bullet">

 Young, P., 1985, "Godel theorems, exponential difficulty and undecidability of arithmetic theories: an exposition" in A. Nerode and R. Shore, Recursion Theory, American Mathematical Society: 503-522.</entry>
<entry level="1" type="bullet">

Derek C. Oppen: A 222<it>pn</it> Upper Bound on the Complexity of Presburger Arithmetic. J. Comput. Syst. Sci. 16(3): 323-332 (1978) <document wordnetid="106470073" confidence="0.8">
<written_communication wordnetid="106349220" confidence="0.8">
<writing wordnetid="106362953" confidence="0.8">
<link xlink:type="simple" xlink:href="../994/422994.xml">
doi</link></writing>
</written_communication>
</document>
:<weblink xlink:type="simple" xlink:href="http://dx.doi.org/10.1016%2F0022-0000%2878%2990021-1">
10.1016/0022-0000(78)90021-1</weblink></entry>
</list>
</p>

<ss1>
<st>
Inline references</st>

<p>

<reflist>
<entry id="1">
Enderton, <it>A Mathematical Introduction to Logic</it>, p. 188</entry>
</reflist>
</p>

</ss1>
</sec>
<sec>
<st>
External links</st>
<p>

<list>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.stefan-baur.de/priv.studies.studienarbeit.html">
online prover</weblink> A Java applet proves or disproves arbitrary formulas of Presburger arithmetic (In German)</entry>
</list>
</p>



</sec>
</bdy>
</higher_cognitive_process>
</theory>
</explanation>
</thinking>
</process>
</article>
