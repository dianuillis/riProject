<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 16:35:52[mciao0828] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>Malbolge</title>
<id>237720</id>
<revision>
<id>242069184</id>
<timestamp>2008-09-30T20:07:12Z</timestamp>
<contributor>
<username>Oerjan</username>
<id>1448822</id>
</contributor>
</revision>
<categories>
<category>Esoteric programming languages</category>
</categories>
</header>
<bdy>

This article is about the programming language. For the eighth circle of hell, which this language is named after, see <dimension wordnetid="105093581" confidence="0.8">
<magnitude wordnetid="105090441" confidence="0.8">
<property wordnetid="104916342" confidence="0.8">
<link xlink:type="simple" xlink:href="../416/1003416.xml">
Malebolge</link></property>
</magnitude>
</dimension>
.
<b>Malbolge</b> is a <link xlink:type="simple" xlink:href="../551/18935551.xml">
public domain</link> <link xlink:type="simple" xlink:href="../398/53398.xml">
esoteric programming language</link> invented by Ben Olmstead in 1998, named after the eighth circle of hell in <person wordnetid="100007846" confidence="0.9508927676800064">
<poet wordnetid="110444194" confidence="0.9173553029164789">
<theorist wordnetid="110706812" confidence="0.9173553029164789">
<statesman wordnetid="110650162" confidence="0.9173553029164789">
<writer wordnetid="110794014" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../169/8169.xml">
Dante</link></writer>
</statesman>
</theorist>
</poet>
</person>
's <it><link xlink:type="simple" xlink:href="../140/31140.xml">
Inferno</link></it>, the <dimension wordnetid="105093581" confidence="0.8">
<magnitude wordnetid="105090441" confidence="0.8">
<property wordnetid="104916342" confidence="0.8">
<link xlink:type="simple" xlink:href="../416/1003416.xml">
Malebolge</link></property>
</magnitude>
</dimension>
.<p>

The peculiarity of Malbolge is that it was designed to be the most difficult and esoteric programming language.  However, several of the tricks used to make understanding it difficult can be simplified away.</p>

<sec>
<st>
Programming in Malbolge</st>
<p>

Malbolge was so difficult to understand when it arrived that it took two years for the first Malbolge program to appear.  The program was not even written by a human being: it was generated by a <link xlink:type="simple" xlink:href="../032/1686032.xml">
beam search</link> algorithm designed by Andrew Cooke and implemented in <link xlink:type="simple" xlink:href="../016/18016.xml">
Lisp</link>.</p>
<p>

Later, Lou Scheffer posted a <link xlink:type="simple" xlink:href="../715/5715.xml">
cryptanalysis</link> of Malbolge and provided a program to copy its input to its output.  </p>
<p>

Olmstead believed Malbolge to be a <link xlink:type="simple" xlink:href="../962/1811962.xml">
linear bounded automaton</link>. There is a more interesting discussion about whether one can implement sensible loops in Malbolge &mdash; it took many years before the first non-terminating one was introduced. A correct <music wordnetid="107020895" confidence="0.8">
<song wordnetid="107048000" confidence="0.8">
<auditory_communication wordnetid="107109019" confidence="0.8">
<musical_composition wordnetid="107037465" confidence="0.8">
<link xlink:type="simple" xlink:href="../764/490764.xml">
99 Bottles of Beer</link></musical_composition>
</auditory_communication>
</song>
</music>
 program, which deals with non-trivial loops and conditions, was not announced for eight years; the first correct one was by Hisashi Iizawa in 2007.</p>

</sec>
<sec>
<st>
 Hello, world in Malbolge </st>
<p>

This Malbolge program displays "<link xlink:type="simple" xlink:href="../834/13834.xml">
Hello, world.</link>"</p>
<p>

(=`:9876Z4321UT.-Q+*)M'&amp;%$H"!~}|Bzy?=|{z]KwZY44Eq0/{mlk**
hKs_dG5[m_BA{?-Y;;Vb'rR5431M}/.zHGwEDCAA@98\6543W10/.R,+O 

== Simplified workings of Malbolge ==
Malbolge is [[machine language]] for a [[Ternary numeral system|ternary]] [[virtual machine]], the Malbolge [[interpreter (computing)|interpreter]]. To aid in the writing of Malbolge [[computer program|programs]] that run properly, the way the standard interpreter works will be described below. 

==== Notes ====
* The standard interpreter and the official specification do not match perfectly.
* This is a simplified explanation of the interpreter [[source code]]: it obviates useless encryption and subtraction steps and introduces an [[assembly language]].


=== Registers ===
Malbolge has three [[processor register|registers]], '''''a''''', '''''c''''', and '''''d''''', which are like [[variable]]s in other languages.  When a program starts, the value of all three registers is zero.  '''''c''''' is special: it [[program counter|points to the current instruction]].

=== Pointer notation ===
'''''d''''' can hold a memory address; '''''[d]<b><it> is the value stored at that address. </it></b>[c]<b><it> is similar.</it></b></p>

<ss1>
<st>
 Memory </st>
<p>

The virtual machine has 59049 (310) <link xlink:type="simple" xlink:href="../847/25847.xml">
memory</link> locations that can each hold a ten-digit <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../950/62950.xml">
ternary number</link></instrumentality>
</artifact>
</system>
. Each memory location has an address from 0 to 59048 and can hold a value from 0 to 59048. Incrementing past this limit wraps back to zero.</p>
<p>

Before a Malbolge program starts, the first part of memory is filled with the program. All whitespace in the program is ignored and, to make programming more difficult, everything else in the program must start out as one of the instructions below.</p>
<p>

The rest of memory is filled by using the <it>crazy</it> operation (see below) on the previous two addresses (<b>[m]&nbsp;=&nbsp;crz&nbsp;[m&nbsp;-&nbsp;2],&nbsp;[m&nbsp;-&nbsp;1]</b>).  Memory filled this way will repeat every twelve addresses (the individual ternary digits will repeat every three or four addresses, so a group of ternary digits is guaranteed to repeat every twelve).</p>

</ss1>
<ss1>
<st>
 Instructions </st>
<p>

Malbolge has eight <link xlink:type="simple" xlink:href="../470/230470.xml">
instructions</link>. Malbolge figures out which instruction to execute by taking the value at <b><it>[c]</it></b>, adding the value of <b><it>c</it></b> to it, and taking the remainder when this is divided by 94. The final result tells the interpreter what to do:</p>
<p>

<table align="center" cellpadding="2" class="wikitable" border="1">
<caption>
Instructions</caption>
<row align="center">
<header>
 Value of ([c]&nbsp;+&nbsp;c)&nbsp;%&nbsp;94</header>
<header>
Instruction represented</header>
<header>
Explanation</header>
</row>
<row align="center">
<header>
4</header>
<col>
 <it>jmp&nbsp;[d]&nbsp;+&nbsp;1''</it></col>
<col align="left">
 The value at <b><it>[d]</it></b>, plus one, is where Malbolge will jump to and start executing instructions.</col>
</row>
<row align="center">
<header>
5</header>
<col>
<it>out&nbsp;a''</it></col>
<col align="left">
 Prints the value of <b><it>a</it></b>, as an <message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<representation wordnetid="105926676" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<link xlink:type="simple" xlink:href="../586/586.xml">
ASCII</link></rule>
</direction>
</representation>
</protocol>
</message>
character, to the screen.</col>
</row>
<row align="center">
<header>
23</header>
<col>
<it>in&nbsp;a''</it></col>
<col align="left">
Inputs a character, as an ASCII code, into <b><it>a</it></b>. Newlines or line feeds are both code <it>10</it>.  An end-of-file condition is code <it>59048</it>.</col>
</row>
<row align="center">
<header>
39</header>
<col>
 <it>rotr&nbsp;[d]mov&nbsp;a,&nbsp;[d]''</it></col>
<col align="left">
 Rotates the value at <b><it>[d]</it></b> by one ternary digit (000211111<b><it>2</it></b> becomes <b><it>2</it></b>000211111). Stores the result both at <b><it>[d]</it></b> and in <b><it>a</it></b>.</col>
</row>
<row align="center">
<header>
40</header>
<col>
 <it>mov&nbsp;d,&nbsp;[d]''</it></col>
<col align="left">
 Copies the value at <b><it>[d]</it></b> to <b><it>d</it></b>.</col>
</row>
<row align="center">
<header>
62</header>
<col>
 <it>crz&nbsp;[d],&nbsp;amov&nbsp;a,&nbsp;[d]''</it></col>
<col align="left">
 Does the <it>crazy</it> operation (see below) with the value at <b><it>[d]</it></b> and the value of <b><it>a</it></b>. Stores the result both at <b><it>[d]</it></b> and in <b><it>a</it></b>.</col>
</row>
<row align="center">
<header>
68</header>
<col>
<it>nop''</it></col>
<col align="left">
Does nothing.</col>
</row>
<row align="center">
<header>
81</header>
<col>
<it>end''</it></col>
<col align="left">
Ends the Malbolge program.</col>
</row>
<row align="center">
<col colspan="3">
<it>Any other value does the same as </it>'68<b>: nothing. These other values are not allowed in a program while it is being loaded, but are allowed afterwards.''</b></col>
</row>
</table>
</p>
<p>

After each instruction is executed, the guilty instruction gets encrypted (see below) so that it won't do the same thing next time, unless a jump just happened. Right after a jump, Malbolge will encrypt the innocent instruction just prior to the one it jumped to instead. Then, the values of both <b><it>c</it></b> and <b><it>d</it></b> are increased by one and the next instruction is executed.</p>

</ss1>
<ss1>
<st>
 <it>Crazy</it> operation </st>
<p>

For each ternary digit of both inputs, use the following table to get a ternary digit of the result. For example, <b>crz&nbsp;0001112220,&nbsp;0120120120</b> gives 1001022211.</p>
<p>

<table align="center" cellpadding="2" class="wikitable" border="1">
<caption>
<it>Crazy</it> operation</caption>
<row align="center">
<header colspan="2" rowspan="2">
crz</header>
<header colspan="3">
Input 2</header>
</row>
<row align="center">
<header>
0</header>
<header>
1</header>
<header>
2</header>
</row>
<row align="center">
<header rowspan="3">
Input 1</header>
<header>
0</header>
<col>
1</col>
<col>
0</col>
<col>
0</col>
</row>
<row align="center">
<header>
1</header>
<col>
1</col>
<col>
0</col>
<col>
2</col>
</row>
<row align="center">
<header>
2</header>
<col>
2</col>
<col>
2</col>
<col>
1</col>
</row>
</table>
</p>

</ss1>
<ss1>
<st>
 Encryption </st>
<p>

After an instruction is executed, the value at <b><it>[c]</it></b> (without anything added to it) will be replaced with itself <link xlink:type="simple" xlink:href="../428/1352428.xml">
mod</link> 94. Then, the result is <link xlink:type="simple" xlink:href="../294/10294.xml">
encrypted</link> with one of the following two equivalent <link xlink:type="simple" xlink:href="../356/48356.xml">
methods</link>.</p>

<ss2>
<st>
 Method 1 </st>
<p>

Find the result below. Store the ASCII code of the character below it at <b><it>[c]</it></b>.</p>
<p>

0000000000111111111122222222223333333333444444444455555555556666666666777777777788888888889999
0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123
----------------------------------------------------------------------------------------------
9m&amp;lt;.TVac`uY*MK'X~xDl}REokN:#?G"i@5z]&amp;gqtyfr$(we4{WP)H-Zn,[%\3dL+Q;&amp;gt;U!pJS72FhOA1CB6v^=I_0/8|jsb</p>

</ss2>
<ss2>
<st>
 Method 2 </st>
<p>

Find the result below. Store the encrypted version at <b><it>[c]</it></b>.</p>
<p>

<table align="center" cellpadding="2" class="wikitable" border="1">
<caption>
Encryption table</caption>
<row align="center">
<header>
Result</header>
<header>
Encrypted</header>
<header>
Result</header>
<header>
Encrypted</header>
<header>
Result</header>
<header>
Encrypted</header>
<header>
Result</header>
<header>
Encrypted</header>
<header>
Result</header>
<header>
Encrypted</header>
</row>
<row align="center">
<col>
<b>0</b></col>
<col>
57</col>
<col>
<b>19</b></col>
<col>
108</col>
<col>
<b>38</b></col>
<col>
113</col>
<col>
<b>57</b></col>
<col>
91</col>
<col>
<b>76</b></col>
<col>
79</col>
</row>
<row align="center">
<col>
<b>1</b></col>
<col>
109</col>
<col>
<b>20</b></col>
<col>
125</col>
<col>
<b>39</b></col>
<col>
116</col>
<col>
<b>58</b></col>
<col>
37</col>
<col>
<b>77</b></col>
<col>
65</col>
</row>
<row align="center">
<col>
<b>2</b></col>
<col>
60</col>
<col>
<b>21</b></col>
<col>
82</col>
<col>
<b>40</b></col>
<col>
121</col>
<col>
<b>59</b></col>
<col>
92</col>
<col>
<b>78</b></col>
<col>
49</col>
</row>
<row align="center">
<col>
<b>3</b></col>
<col>
46</col>
<col>
<b>22</b></col>
<col>
69</col>
<col>
<b>41</b></col>
<col>
102</col>
<col>
<b>60</b></col>
<col>
51</col>
<col>
<b>79</b></col>
<col>
67</col>
</row>
<row align="center">
<col>
<b>4</b></col>
<col>
84</col>
<col>
<b>23</b></col>
<col>
111</col>
<col>
<b>42</b></col>
<col>
114</col>
<col>
<b>61</b></col>
<col>
100</col>
<col>
<b>80</b></col>
<col>
66</col>
</row>
<row align="center">
<col>
<b>5</b></col>
<col>
86</col>
<col>
<b>24</b></col>
<col>
107</col>
<col>
<b>43</b></col>
<col>
36</col>
<col>
<b>62</b></col>
<col>
76</col>
<col>
<b>81</b></col>
<col>
54</col>
</row>
<row align="center">
<col>
<b>6</b></col>
<col>
97</col>
<col>
<b>25</b></col>
<col>
78</col>
<col>
<b>44</b></col>
<col>
40</col>
<col>
<b>63</b></col>
<col>
43</col>
<col>
<b>82</b></col>
<col>
118</col>
</row>
<row align="center">
<col>
<b>7</b></col>
<col>
99</col>
<col>
<b>26</b></col>
<col>
58</col>
<col>
<b>45</b></col>
<col>
119</col>
<col>
<b>64</b></col>
<col>
81</col>
<col>
<b>83</b></col>
<col>
94</col>
</row>
<row align="center">
<col>
<b>8</b></col>
<col>
96</col>
<col>
<b>27</b></col>
<col>
35</col>
<col>
<b>46</b></col>
<col>
101</col>
<col>
<b>65</b></col>
<col>
59</col>
<col>
<b>84</b></col>
<col>
61</col>
</row>
<row align="center">
<col>
<b>9</b></col>
<col>
117</col>
<col>
<b>28</b></col>
<col>
63</col>
<col>
<b>47</b></col>
<col>
52</col>
<col>
<b>66</b></col>
<col>
62</col>
<col>
<b>85</b></col>
<col>
73</col>
</row>
<row align="center">
<col>
<b>10</b></col>
<col>
89</col>
<col>
<b>29</b></col>
<col>
71</col>
<col>
<b>48</b></col>
<col>
123</col>
<col>
<b>67</b></col>
<col>
85</col>
<col>
<b>86</b></col>
<col>
95</col>
</row>
<row align="center">
<col>
<b>11</b></col>
<col>
42</col>
<col>
<b>30</b></col>
<col>
34</col>
<col>
<b>49</b></col>
<col>
87</col>
<col>
<b>68</b></col>
<col>
33</col>
<col>
<b>87</b></col>
<col>
48</col>
</row>
<row align="center">
<col>
<b>12</b></col>
<col>
77</col>
<col>
<b>31</b></col>
<col>
105</col>
<col>
<b>50</b></col>
<col>
80</col>
<col>
<b>69</b></col>
<col>
112</col>
<col>
<b>88</b></col>
<col>
47</col>
</row>
<row align="center">
<col>
<b>13</b></col>
<col>
75</col>
<col>
<b>32</b></col>
<col>
64</col>
<col>
<b>51</b></col>
<col>
41</col>
<col>
<b>70</b></col>
<col>
74</col>
<col>
<b>89</b></col>
<col>
56</col>
</row>
<row align="center">
<col>
<b>14</b></col>
<col>
39</col>
<col>
<b>33</b></col>
<col>
53</col>
<col>
<b>52</b></col>
<col>
72</col>
<col>
<b>71</b></col>
<col>
83</col>
<col>
<b>90</b></col>
<col>
124</col>
</row>
<row align="center">
<col>
<b>15</b></col>
<col>
88</col>
<col>
<b>34</b></col>
<col>
122</col>
<col>
<b>53</b></col>
<col>
45</col>
<col>
<b>72</b></col>
<col>
55</col>
<col>
<b>91</b></col>
<col>
106</col>
</row>
<row align="center">
<col>
<b>16</b></col>
<col>
126</col>
<col>
<b>35</b></col>
<col>
93</col>
<col>
<b>54</b></col>
<col>
90</col>
<col>
<b>73</b></col>
<col>
50</col>
<col>
<b>92</b></col>
<col>
115</col>
</row>
<row align="center">
<col>
<b>17</b></col>
<col>
120</col>
<col>
<b>36</b></col>
<col>
38</col>
<col>
<b>55</b></col>
<col>
110</col>
<col>
<b>74</b></col>
<col>
70</col>
<col>
<b>93</b></col>
<col>
98</col>
</row>
<row align="center">
<col>
<b>18</b></col>
<col>
68</col>
<col>
<b>37</b></col>
<col>
103</col>
<col>
<b>56</b></col>
<col>
44</col>
<col>
<b>75</b></col>
<col>
104</col>
</row>
</table>
</p>

</ss2>
<ss2>
<st>
 Cycles in the encryption </st>

<p>

Lou Scheffer's cryptanalysis of Malbolge mentions six different cycles in the encryption. They are listed here:</p>
<p>

<list>
<entry level="1" type="bullet">

 33 ⇒ 53 ⇒ 45 ⇒ 119 ⇒ 78 ⇒ 49 ⇒ 87 ⇒ 48 ⇒ 123 ⇒ 71 ⇒ 83 ⇒ 94 ⇒ 57 ⇒ 91 ⇒ 106 ⇒ 77 ⇒ 65 ⇒ 59 ⇒ 92 ⇒ 115 ⇒ 82 ⇒ 118 ⇒ 107 ⇒ 75 ⇒ 104 ⇒ 89 ⇒ 56 ⇒ 44 ⇒ 40 ⇒ 121 ⇒ 35 ⇒ 93 ⇒ 98 ⇒ 84 ⇒ 61 ⇒ 100 ⇒ 97 ⇒ 46 ⇒ 101 ⇒ 99 ⇒ 86 ⇒ 95 ⇒ 109 ⇒ 88 ⇒ 47 ⇒ 52 ⇒ 72 ⇒ 55 ⇒ 110 ⇒ 126 ⇒ 64 ⇒ 81 ⇒ 54 ⇒ 90 ⇒ 124 ⇒ 34 ⇒ 122 ⇒ 63 ⇒ 43 ⇒ 36 ⇒ 38 ⇒ 113 ⇒ 108 ⇒ 39 ⇒ 116 ⇒ 69 ⇒ 112 ⇒ 68 ⇒ 33 ...</entry>
<entry level="1" type="bullet">

 37 ⇒ 103 ⇒ 117 ⇒ 111 ⇒ 120 ⇒ 58 ⇒ 37 ...</entry>
<entry level="1" type="bullet">

 41 ⇒ 102 ⇒ 96 ⇒ 60 ⇒ 51 ⇒ 41 ...</entry>
<entry level="1" type="bullet">

 42 ⇒ 114 ⇒ 125 ⇒ 105 ⇒ 42 ...</entry>
<entry level="1" type="bullet">

 50 ⇒ 80 ⇒ 66 ⇒ 62 ⇒ 76 ⇒ 79 ⇒ 67 ⇒ 85 ⇒ 73 ⇒ 50 ...</entry>
<entry level="1" type="bullet">

 70 ⇒ 74 ⇒ 70 ...</entry>
</list>
</p>
<p>

These cycles can be used to create loops that do different things each time and that eventually become repetitive. Lou Scheffer used this idea to create a Malbolge program (included in his cryptanalysis linked below) that repeats anything the user inputs.</p>

</ss2>
</ss1>
</sec>
<sec>
<st>
 See also </st>

<p>

<table style="background:#f9f9f9; font-size:85%; line-height:110%; ">
<row>
<col>
 <image width="32x28px" src="Free_Software_Portal_Logo.svg">
</image>
</col>
<col style="padding:0 0.2em;">
 <b><it>
Free software&#32;portal</it></b></col>
</row>
</table>
</p>

<p>

<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../075/15075.xml">
INTERCAL</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../739/22739.xml">
Obfuscated code</link></entry>
</list>
</p>

</sec>
<sec>
<st>
External links</st>
<p>

<list>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.lscheffer.com/malbolge_interp.html">
Malbolge interpreter (C source code)</weblink></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.acooke.org/malbolge.html">
Description of Andrew Cooke's algorithm for creating the first Malbolge program</weblink></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.lscheffer.com/malbolge.shtml">
Lou Scheffer's cryptanalysis of Malbolge</weblink></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://esoteric.voxelperfect.net/wiki/Malbolge_programming">
Treatise on writing Malbolge programs; takes Scheffer's analysis a bit further</weblink></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.99-bottles-of-beer.net/language-malbolge-995.html">
"99 bottles" in Malbolge (real loop version)</weblink></entry>
</list>
</p>


</sec>
</bdy>
</article>
