<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 16:36:35[mciao0828] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<event  confidence="0.8" wordnetid="100029378">
<rule  confidence="0.8" wordnetid="105846932">
<act  confidence="0.8" wordnetid="100030358">
<psychological_feature  confidence="0.8" wordnetid="100023100">
<procedure  confidence="0.8" wordnetid="101023820">
<activity  confidence="0.8" wordnetid="100407535">
<algorithm  confidence="0.8" wordnetid="105847438">
<header>
<title>Rader&apos;s FFT algorithm</title>
<id>241408</id>
<revision>
<id>236701416</id>
<timestamp>2008-09-06T18:44:32Z</timestamp>
<contributor>
<username>Norm mit</username>
<id>924147</id>
</contributor>
</revision>
<categories>
<category>FFT algorithms</category>
</categories>
</header>
<bdy>

<b>Rader's algorithm</b> (1968) is a <link xlink:type="simple" xlink:href="../512/11512.xml">
fast Fourier transform</link> (FFT) algorithm that computes the <link xlink:type="simple" xlink:href="../811/8811.xml">
discrete Fourier transform</link> (DFT) of <link xlink:type="simple" xlink:href="../666/23666.xml">
prime</link> sizes by re-expressing the DFT as a cyclic <link xlink:type="simple" xlink:href="../519/7519.xml">
convolution</link>.  (The other algorithm for FFTs of prime sizes, <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../431/241431.xml">
Bluestein's algorithm</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
, also works by rewriting the DFT as a convolution.)<p>

Since Rader's algorithm only depends upon the periodicity of the DFT kernel, it is directly applicable to any other transform (of prime order) with a similar property, such as a <link xlink:type="simple" xlink:href="../396/421396.xml">
number-theoretic transform</link> or the <link xlink:type="simple" xlink:href="../210/206210.xml">
discrete Hartley transform</link>.</p>
<p>

The algorithm can be modified to gain a factor of two savings for the case of DFTs of real data, using a slightly modified re-indexing/permutation to obtain two half-size cyclic convolutions of real data (Chu &amp; Burrus, 1982); an alternative adaptation for DFTs of real data, using the discrete Hartley transform, was described by Johnson &amp; Frigo (2007).</p>
<p>

Winograd extended Rader's algorithm to include prime-power DFT sizes <math>p^m</math> (Winograd 1976; Winograd 1978), and today Rader's algorithm is sometimes described as a special case of <link>
Winograd's FFT algorithm</link>, also called the <it>multiplicative Fourier transform algorithm</it> (Tolimieri et al, 1997), which applies to an even larger class of sizes.  However, for <link xlink:type="simple" xlink:href="../289/82289.xml">
composite</link> sizes such as prime powers, the <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../702/352702.xml">
Cooley-Tukey FFT algorithm</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
 is much simpler and more practical to implement, so Rader's algorithm is typically only used for large-prime <link xlink:type="simple" xlink:href="../867/4044867.xml">
base case</link>s of Cooley-Tukey's <link xlink:type="simple" xlink:href="../407/25407.xml">
recursive</link> decomposition of the DFT (Frigo and Johnson, 2005).</p>

<sec>
<st>
Algorithm</st>

<p>

Recall that the DFT is defined by the formula</p>
<p>

<indent level="1">

<math> X_k = \sum_{n=0}^{N-1} x_n e^{-\frac{2\pi i}{N} nk }
\qquad
k = 0,\dots,N-1. </math>
</indent>

If <it>N</it> is a prime number, then the set of non-zero indices <it>n</it> = 1,...,<it>N</it>&ndash;1 forms a <link xlink:type="simple" xlink:href="../447/19447.xml">
group</link> under multiplication <link xlink:type="simple" xlink:href="../087/20087.xml">
modulo</link> <it>N</it>.  One consequence of the <link xlink:type="simple" xlink:href="../527/21527.xml">
number theory</link> of such groups is that there exists a <link xlink:type="simple" xlink:href="../945/99945.xml">
generator</link> of the group (sometimes called a <link xlink:type="simple" xlink:href="../804/422804.xml">
primitive root</link>), an integer <it>g</it> such that <it>n</it> = <it>gq</it> (mod <it>N</it>) for any non-zero index <it>n</it> and for a unique <it>q</it> in 0,...,<it>N</it>&ndash;2 (forming a <link xlink:type="simple" xlink:href="../942/3942.xml">
bijection</link> from <it>q</it> to non-zero <it>n</it>).  Similarly <it>k</it> = <it>g</it>&ndash;<it>p</it>  (mod <it>N</it>) for any non-zero index <it>k</it> and for a unique <it>p</it> in 0,...,<it>N</it>&ndash;2, where the negative exponent denotes the multiplicative inverse of <it>gp</it> modulo <it>N</it>.  That means that we can rewrite the DFT using these new indices <it>p</it> and <it>q</it> as:</p>
<p>

<indent level="1">

<math> X_0 =  \sum_{n=0}^{N-1} x_n,</math>
</indent>

<indent level="1">

<math> X_{g^{-p}} = x_0 +  \sum_{q=0}^{N-2} x_{g^q} e^{-\frac{2\pi i}{N} g^{-(p-q)} }
\qquad
p = 0,\dots,N-2. </math>
</indent>

(Recall that <it>xn</it> and <it>Xk</it> are implicitly periodic in <it>N</it>, and also that <it>e</it>2&amp;pi;i=1.  Thus, all indices and exponents are taken modulo <it>N</it> as required by the group arithmetic.)</p>
<p>

The final summation, above, is precisely a cyclic convolution of the two sequences <it>aq</it> and <it>bq</it> of length <it>N</it>&ndash;1 (<it>q</it> = 0,...,<it>N</it>&ndash;2) defined by:</p>
<p>

<indent level="1">

<math>a_q = x_{g^q}</math>
</indent>
:<math>b_q = e^{-\frac{2\pi i}{N} g^{-q} }.</math></p>

<ss1>
<st>
Evaluating the convolution</st>

<p>

Since <it>N</it>&ndash;1 is composite, this convolution can be performed directly via the <link xlink:type="simple" xlink:href="../268/53268.xml">
convolution theorem</link> and more conventional FFT algorithms.  However, that may not be efficient if <it>N</it>&ndash;1 itself has large prime factors, requiring recursive use of Rader's algorithm.  Instead, one can compute a length-(<it>N</it>&ndash;1) cyclic convolution exactly by zero-padding it to a length of at least 2(<it>N</it>&ndash;1)&ndash;1, say to a <link xlink:type="simple" xlink:href="../948/376948.xml">
power of two</link>, which can then be evaluated in O(<it>N</it> log <it>N</it>) time without the recursive application of Rader's algorithm.</p>
<p>

This algorithm, then, requires O(<it>N</it>) additions plus O(<it>N</it> log <it>N</it>) time for the convolution.  In practice, the O(<it>N</it>) additions can often be performed by absorbing the additions into the convolution: if the convolution is performed by a pair of FFTs, then the sum of <it>xn</it> is given by the DC (0th) output of the FFT of <it>aq</it> plus <it>x</it>0, and <it>x</it>0 can be added to all the outputs by adding it to the DC term of the convolution prior to the inverse FFT.  Still, this algorithm requires intrinsically more operations than FFTs of nearby composite sizes, and typically takes 3&ndash;10 times as long in practice.</p>
<p>

If Rader's algorithm is performed by using FFTs of size <it>N</it>&ndash;1 to compute the convolution, rather than by zero padding as mentioned above, the efficiency depends strongly upon <it>N</it> and the number of times that Rader's algorithm must be applied recursively.  The worst case would be if <it>N</it>&ndash;1 were 2<it>N</it>2 where <it>N</it>2 is prime, with <it>N</it>2&ndash;1 = 2<it>N</it>3 where <it>N</it>3 is prime, and so on.  In such cases, supposing that the chain of primes extended all the way down to some bounded value, the recursive application of Rader's algorithm would actually require O(<it>N</it>2) time.  Such <it>N</it>j are called <class wordnetid="107997703" confidence="0.8">
<collection wordnetid="107951464" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<link xlink:type="simple" xlink:href="../244/89244.xml">
Sophie Germain primes</link></group>
</collection>
</class>
, and such a sequence of them is called a <link xlink:type="simple" xlink:href="../790/321790.xml">
Cunningham chain</link> of the first kind.  The lengths of Cunningham chains, however, are observed to grow more slowly than log2(<it>N</it>), so Rader's algorithm applied in this way is probably not <link xlink:type="simple" xlink:href="../578/44578.xml">
&amp;Omega;</link>(<it>N</it>2), though it is possibly worse than O(<it>N</it> log <it>N</it>) for the worst cases.  Fortunately, a guarantee of O(<it>N</it> log <it>N</it>) complexity can be achieved by zero padding.</p>

</ss1>
</sec>
<sec>
<st>
References</st>
<p>

<list>
<entry level="1" type="bullet">

 C. M. Rader, "Discrete Fourier transforms when the number of data samples is prime," <it>Proc. IEEE</it> <b>56</b>, 1107&ndash;1108 (1968).</entry>
<entry level="1" type="bullet">

 S. Chu and C. Burrus, "A prime factor FTT [<it>sic</it>] algorithm using distributed arithmetic," <it> IEEE Transactions on Acoustics, Speech, and Signal Processing</it> <b>30</b> (2), 217&ndash;227 (1982).</entry>
<entry level="1" type="bullet">

 Matteo Frigo and Steven G. Johnson, "<weblink xlink:type="simple" xlink:href="http://fftw.org/fftw-paper-ieee.pdf">
The Design and Implementation of FFTW3</weblink>," <it>Proceedings of the IEEE</it> <b>93</b> (2), 216–231 (2005).</entry>
<entry level="1" type="bullet">

 S. Winograd, "On Computing the Discrete Fourier Transform", <it>Proc. National Academy of Sciences USA</it>, <b>73</b>(4), 1005&ndash;1006 (1976).</entry>
<entry level="1" type="bullet">

 S. Winograd, "On Computing the Discrete Fourier Transform", <it>Mathematics of Computation</it>, <b>32</b>(141), 175&ndash;199 (1978).</entry>
<entry level="1" type="bullet">

 R. Tolimieri, M. An and C.Lu, "Algorithms for Discrete Fourier Transform and Convolution," Springer-Verlag, 2nd ed., 1997. </entry>
</list>

</p>
</sec>
</bdy>
</algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</article>
