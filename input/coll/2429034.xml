<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 19:37:28[mciao0826] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>SVISTA</title>
<id>2429034</id>
<revision>
<id>182075757</id>
<timestamp>2008-01-04T10:16:51Z</timestamp>
<contributor>
<username>VolkovBot</username>
<id>3035831</id>
</contributor>
</revision>
<categories>
<category>Virtualization software</category>
</categories>
</header>
<bdy>

<b>SVISTA</b> (Serenity Virtual Station) is one of the commercial <link xlink:type="simple" xlink:href="../309/5309.xml">
software</link> products promoted by <link>
Serenity Systems International</link>. The workstation software consists of a <link xlink:type="simple" xlink:href="../353/32353.xml">
virtual machine</link> suite for <link xlink:type="simple" xlink:href="../617/14617.xml">
Intel</link> <link xlink:type="simple" xlink:href="../198/34198.xml">
x86</link>-compatible computers which allows the creation and execution of multiple x86 virtual computers simultaneously. Each virtual machine instance can execute its own guest <link xlink:type="simple" xlink:href="../194/22194.xml">
operating system</link> including <link xlink:type="simple" xlink:href="../890/18890.xml">
Windows</link>, <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../297/6097297.xml">
Linux</link></O>
, <link xlink:type="simple" xlink:href="../409/22409.xml">
OS/2</link> and <link xlink:type="simple" xlink:href="../807/1223807.xml">
BSD variants</link>. In simple terms, SVISTA allows one physical machine to run numerous operating systems simultaneously. 
<sec>
<st>
Description</st>

<p>

The <link xlink:type="simple" xlink:href="../457/7878457.xml">
computer</link> and operating system instance that executes the SVISTA process is referred to as the <it>host machine</it>. Instances of operating systems running inside a virtual machine are referred to as <it>guest virtual machines</it>. Like an <link xlink:type="simple" xlink:href="../937/18943937.xml">
emulator</link>, SVISTA provides a completely virtualized set of hardware to the guest operating system; for example, irrespective of make and model of the physical network adapter, the guest machine will see an <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../366/169366.xml">
Novell</link></company>
/<link xlink:type="simple" xlink:href="../602/37602.xml">
Eagle</link> NE2000 or <company wordnetid="108058098" confidence="0.8">
<electronics_company wordnetid="108003035" confidence="0.8">
<institution wordnetid="108053576" confidence="0.8">
<link xlink:type="simple" xlink:href="../604/1785604.xml">
Realtek</link></institution>
</electronics_company>
</company>
 RTL8029(AS) <link xlink:type="simple" xlink:href="../613/243613.xml">
network adapter</link>. SVISTA virtualizes all devices within the virtual environment, including the <link xlink:type="simple" xlink:href="../214/390214.xml">
video adapter</link>, network adapter, and <link xlink:type="simple" xlink:href="../777/13777.xml">
hard disk</link> adapters. It also provides pass-through drivers for <link xlink:type="simple" xlink:href="../770/270770.xml#xpointer(//*[./st=%22Series+circuits%22])">
serial</link> and <link xlink:type="simple" xlink:href="../770/270770.xml#xpointer(//*[./st=%22Parallel+circuits%22])">
parallel</link> devices.</p>
<p>

Because all guest virtual machines use the same hardware drivers irrespective of the actual hardware on the host computer, virtual machine instances are highly portable between computers. For example, a running virtual machine can be stopped, copied to another physical computer, and started.  </p>

</sec>
<sec>
<st>
Implementation</st>

<p>

Conventional emulators like <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<copycat wordnetid="109964411" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../072/362072.xml">
Bochs</link></causal_agent>
</copycat>
</person>
</physical_entity>
 emulate the microprocessor, executing each guest <link xlink:type="simple" xlink:href="../218/5218.xml">
CPU</link> instruction by calling a software subroutine on the host machine that simulates the function of that CPU instruction. This level of abstraction allows the guest machine to run on host machines with a different type of microprocessor, but is also very slow.</p>
<p>

A more efficient approach consists in software <link xlink:type="simple" xlink:href="../485/50485.xml">
debugger</link> technique. Some parts of the code are executed natively on the real processor; on 'bad' instructions, there are software interrupts that break execution of the guest operating system code and that particular instruction is emulated.</p>
<p>

SVISTA, as well as <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../250/8175250.xml">
VMware Workstation</link></software>
, <link xlink:type="simple" xlink:href="../850/2786850.xml">
Virtual PC</link> for <link xlink:type="simple" xlink:href="../890/18890.xml">
Windows</link> and <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<copycat wordnetid="109964411" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../669/1465669.xml">
QEMU</link></causal_agent>
</copycat>
</person>
</physical_entity>
 with the kqemu add-on, take an even more optimized approach and run code directly when this is possible. This is the case for user mode and <link xlink:type="simple" xlink:href="../324/641324.xml">
virtual 8086 mode</link> code on x86. </p>
<p>

The drawback is that the guest OS has to be compatible with the host CPU. So unlike an emulator, one cannot use SVISTA to run <link xlink:type="simple" xlink:href="../043/20043.xml">
Mac</link>/<link xlink:type="simple" xlink:href="../281/24281.xml">
PowerPC</link> software on an <link xlink:type="simple" xlink:href="../198/34198.xml">
Intel x86</link> processor. Another drawback is that it is not normally possible to efficiently nest SVISTA virtual machines. Finally, although SVISTA virtual machines run in user mode, SVISTA itself requires installing various drivers in the host operating system.</p>

</sec>
<sec>
<st>
Features</st>

<p>

Besides bridging to network adapters, <recording wordnetid="104063868" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<sound_recording wordnetid="104262678" confidence="0.8">
<memory_device wordnetid="103744840" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<phonograph_record wordnetid="103924069" confidence="0.8">
<medium wordnetid="106254669" confidence="0.8">
<link xlink:type="simple" xlink:href="../902/18959902.xml">
CD-ROM</link></medium>
</phonograph_record>
</device>
</memory_device>
</sound_recording>
</instrumentality>
</artifact>
</recording>
 readers and hard disk drives, <link xlink:type="simple" xlink:href="../034/2429034.xml">
SVISTA</link> also provides the ability to simulate some hardware. For example, an <format wordnetid="106636806" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../185/346185.xml">
ISO image</link></format>
 can be mounted as a CDROM and .hdd files can be mounted as hard disks.</p>

</sec>
<sec>
<st>
Issues</st>
<p>

When using SVISTA instances in an environment where <symbol wordnetid="106806469" confidence="0.8">
<signal wordnetid="106791372" confidence="0.8">
<identifier wordnetid="107270601" confidence="0.8">
<link xlink:type="simple" xlink:href="../668/20668.xml">
MAC address</link></identifier>
</signal>
</symbol>
es are used as unique identifiers (UID), it is advisable to manually configure the MAC address for each virtual machine to ensure each is actually unique. One example of such an environment is one in which MAC security is enabled on switches and another example is an environment in which <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../899/2254899.xml">
Altiris</link></company>
 products are used (if configured to use the MAC address as the UID). If you are in such a situation, simply disable all networks/adapters other than bridged and edit each virtual machine's configuration (.2os) file and change the 'MAC address' to be unique.</p>

</sec>
<sec>
<st>
See also</st>
<p>

<list>
<entry level="1" type="bullet">

 <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../018/312018.xml">
VMware</link></company>
</entry>
<entry level="1" type="bullet">

 <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../892/2082892.xml">
Parallels Workstation</link></software>
</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../697/373697.xml">
User Mode Linux</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../852/590852.xml">
Xen (virtual machine monitor)</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../833/1582833.xml">
Comparison of virtual machines</link></entry>
</list>
</p>

</sec>
<sec>
<st>
External links</st>
<p>

<list>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.serenityvirtual.com/">
Serenity Systems International</weblink></entry>
</list>
</p>

</sec>
</bdy>
</article>
