<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 15:32:57[mciao0828] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>Password</title>
<id>24304</id>
<revision>
<id>244169238</id>
<timestamp>2008-10-09T17:04:20Z</timestamp>
<contributor>
<username>Unicityd</username>
<id>7652215</id>
</contributor>
</revision>
<categories>
<category>Computer security</category>
<category>Password authentication</category>
</categories>
</header>
<bdy>

For other uses, see <link xlink:type="simple" xlink:href="../692/1724692.xml">
Password (disambiguation)</link>.<p>

In computing, a <b>password</b> is a <link xlink:type="simple" xlink:href="../866/1449866.xml">
word</link> or string of <idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<category wordnetid="105838765" confidence="0.8">
<type wordnetid="105840188" confidence="0.8">
<kind wordnetid="105839024" confidence="0.8">
<link xlink:type="simple" xlink:href="../443/73443.xml">
characters</link></kind>
</type>
</category>
</concept>
</idea>
 that is entered, often along with a <link xlink:type="simple" xlink:href="../990/16301990.xml">
user name</link>, in modern times usually into a computer system to <know-how wordnetid="105616786" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<link xlink:type="simple" xlink:href="../372/9878372.xml">
log in</link></method>
</know-how>
, or to gain access to some resource. Passwords are a common form of <link xlink:type="simple" xlink:href="../967/47967.xml">
authentication</link>. Full security requires that the password be kept <link xlink:type="simple" xlink:href="../505/66505.xml">
secret</link> from those not allowed access.</p>
<p>

The use of passwords is known to be ancient. Sentries would challenge those wishing to enter an area or approaching it to supply a password or <it>watchword.</it> Sentries would only allow a person or group to pass if they knew the password. In modern times, passwords are used to <link xlink:type="simple" xlink:href="../684/40684.xml">
control access</link> to protected computer <link xlink:type="simple" xlink:href="../194/22194.xml">
operating system</link>s, <link xlink:type="simple" xlink:href="../137/19644137.xml">
mobile phone</link>s, <link xlink:type="simple" xlink:href="../587/7587.xml">
cable TV</link> decoders, <link xlink:type="simple" xlink:href="../628/46628.xml">
automated teller machines</link> (ATMs), etc. A typical <link xlink:type="simple" xlink:href="../990/16301990.xml">
computer user</link> may require passwords for many purposes: logging in to computer accounts, retrieving <link xlink:type="simple" xlink:href="../738/9738.xml">
e-mail</link> from servers, accessing programs, databases, networks, web sites, and even reading the morning newspaper online.</p>
<p>

Despite the name, there is no need for passwords to be actual words; indeed passwords which are not actual words are harder to guess, a desirable property.  Some passwords are formed from multiple words and are more accurately called a <link xlink:type="simple" xlink:href="../420/152420.xml">
passphrase</link>. The term  <b>passcode</b> is sometimes used when the secret information is purely numeric, such as the <link xlink:type="simple" xlink:href="../220/337220.xml">
personal identification number</link> (PIN) commonly used for ATM access. Passwords are generally short enough to be <link xlink:type="simple" xlink:href="../844/18844.xml">
memorized</link>.</p>

<sec>
<st>
Designing a personal, user-friendly password</st>
<p>

Passwords vary in their degree of security protection, frequency of change, and typically vary in required characteristics (eg, minimum and maximum lengths, permitted characters, etc) from system to system.  The most public, and therefore least secure, password might be one that is given to members of a group, a committee or some other organization. For instance, "publiclibrary", "internet", "AAAfinancecommittee" or "password" are all examples of easily remembered passwords, more or less publicly knowable passwords.</p>
<p>

Less easily attacked passwords might be built from such a basic form, for instance, "smith12nov34street" or "AAAchairpersonSUE". These are slightly more secure, but being relatively easily predictable should not be relied upon to actually block unauthorized access. Effective access control requires passwords which are more difficult to guess or to find automatically, less publicly knowable (ideally not at all), and these are the subject of much of the rest of this article. One method of creating passwords that are memorable, but harder to attack successfully is to use selective substitution of numbers for letters, e.g. 'I' is replaced by '1', 'E' by '3' etc. This becomes even more secure if the numbers are 'shifted' on the keyboard. In this instance, the number '1' might be replaced by '!', assuming '!' is a permitted character in passwords on the relevant system.</p>

</sec>
<sec>
<st>
Factors in the security of a password system</st>
<p>

The security of a password-protected system depends on several factors. The overall system must, of course, be designed for sound security, with protection against <link xlink:type="simple" xlink:href="../196/18994196.xml">
computer virus</link>es,  <link xlink:type="simple" xlink:href="../676/144676.xml">
man-in-the-middle attack</link>s and the like.  Physical security issues are also a concern, from deterring <link xlink:type="simple" xlink:href="../609/3982609.xml">
shoulder surfing</link> to  more sophisticated physical threats such as video cameras and keyboard sniffers. And, of course, passwords should be chosen so that they are hard for an attacker to guess and hard for an attacker to discover using any (and all) of the available automatic attack schemes. See <link xlink:type="simple" xlink:href="../886/4459886.xml">
password strength</link>, <link xlink:type="simple" xlink:href="../398/7398.xml">
computer security</link>, and <link xlink:type="simple" xlink:href="../885/55885.xml">
computer insecurity</link>.</p>
<p>

Effective access control provisions may force extreme measures on criminals seeking to acquire a password or biometric token.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref> Less extreme measures include <link xlink:type="simple" xlink:href="../449/162449.xml">
extortion</link>, <link xlink:type="simple" xlink:href="../585/235585.xml">
rubber hose cryptanalysis</link>, <link xlink:type="simple" xlink:href="../678/667678.xml">
side channel attack</link>, ... </p>
<p>

Here are some specific password management issues that must be considered in thinking about, choosing, and handling, a password:</p>

<ss1>
<st>
Rate at which an attacker can try guessed passwords</st>
<p>

The rate at which an attacker can submit guessed passwords to the system is a key factor in determining system security. Some systems impose a time-out of several seconds after a small number (e.g.,  three) of failed password entry attempts. In the absence of other vulnerabilities, such systems can be effectively secure with relatively simple passwords, if they have been well chosen and are not easily guessed. <weblink xlink:type="simple" xlink:href="http://www.modernlifeisrubbish.co.uk/top-10-most-common-passwords.asp">
http://www.modernlifeisrubbish.co.uk/top-10-most-common-passwords.asp</weblink> </p>
<p>

Many systems store or transmit a <link xlink:type="simple" xlink:href="../526/439526.xml">
cryptographic hash</link> of the password in a manner that makes the hash value accessible to an attacker. When this is done, and it is very common, an attacker can work off-line, rapidly testing candidate passwords against the true password's hash value. Passwords that are used to generate cryptographic keys (e.g., for <link xlink:type="simple" xlink:href="../968/8399968.xml">
disk encryption</link> or <link xlink:type="simple" xlink:href="../973/63973.xml">
Wi-Fi</link> security) can also be subjected to high rate guessing. Lists of common passwords are widely available and can make password attacks very efficient. (See <operation wordnetid="100955060" confidence="0.8">
<accomplishment wordnetid="100035189" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<action wordnetid="100037396" confidence="0.8">
<attack wordnetid="100972621" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<feat wordnetid="100036762" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<link xlink:type="simple" xlink:href="../981/477981.xml">
Password cracking</link></activity>
</feat>
</psychological_feature>
</act>
</attack>
</action>
</event>
</accomplishment>
</operation>
.) Security in such situations depends on using passwords or passphrases of adequate complexity, making such an attack computationally infeasible for the attacker. Some systems, such as PGP and Wi-Fi WPA apply a computation-intensive hash to the password to slow such attacks. See <link xlink:type="simple" xlink:href="../286/4266286.xml">
key strengthening</link>.</p>

</ss1>
<ss1>
<st>
Form of stored passwords</st>
<p>

Some computer systems store user passwords as <link xlink:type="simple" xlink:href="../791/600791.xml">
cleartext</link>, against which to compare user log on attempts. If an attacker gains access to such an internal password store, all passwords -- and so all user accounts -- will be compromised. If some users employ the same password for accounts on different systems, those will be compromised as well.</p>
<p>

More secure systems store each password in a cryptographically protected form, so access to the actual password will still be difficult for a snooper who gains internal access to the system, while validation of user access attempts remains possible.</p>
<p>

A common approach stores only a "hashed" form of the plaintext password. When a user types in a password on such a system, the password handling software runs through a <link xlink:type="simple" xlink:href="../526/439526.xml">
cryptographic hash</link> algorithm, and if the hash value generated from the user's entry matches the hash stored in the password database, the user is permitted access. The hash value is created by applying a hash function (for maximum resistance to attack this should be a <link xlink:type="simple" xlink:href="../526/439526.xml">
cryptographic hash function</link>) to a string consisting of the submitted password and, usually, another value known as a <link xlink:type="simple" xlink:href="../756/701756.xml">
salt</link>. The salt prevents attackers from easily building a list of hash values for common passwords. <function wordnetid="113783816" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../826/18826.xml">
MD5</link></function>
 and <link xlink:type="simple" xlink:href="../672/26672.xml">
SHA1</link> are frequently used cryptographic hash functions. </p>
<p>

A modified version of the <cipher wordnetid="106254239" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../978/7978.xml">
DES</link></cipher>
 algorithm was used for this purpose in early <family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../642/31642.xml">
Unix</link></family>
 systems. The UNIX DES function was iterated to make the hash function equivalent slow, further frustrating automated guessing attacks, and used the password candidate as a key to encrypt a fixed value, thus blocking yet another attack on the password shrouding system. More recent Unix or Unix like systems (eg, <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../297/6097297.xml">
Linux</link></O>
 or the various <link xlink:type="simple" xlink:href="../807/1223807.xml">
BSD</link> systems) use what most believe to be still more effective protective mechanisms based on MD5, SHA1, Blowfish, Twofish, or any of several other algorithms to prevent or frustrate attacks on stored password files<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%222%22])">2</ref>.</p>
<p>

If the hash function is well designed, it will be computationally infeasible to reverse it to directly find a <link xlink:type="simple" xlink:href="../935/157935.xml">
plaintext</link> password. However, many systems do not protect their hashed passwords adequately, and if an attacker can gain access to the hashed values he can use widely available tools which compare the encrypted outcome of every word from some list, such as a dictionary (many are available on the Internet). Large lists of possible passwords in many languages are widely available on the Internet, as are software programs to try common variations. The existence of these <link xlink:type="simple" xlink:href="../785/53785.xml">
dictionary attack</link> tools constrains user password choices which are intended to resist easy attacks; they must not be findable on such lists. Obviously, words on such lists should be avoided as passwords. Use of a <link xlink:type="simple" xlink:href="../286/4266286.xml">
key stretching</link> hash such as <standard wordnetid="107260623" confidence="0.8">
<know-how wordnetid="105616786" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../244/1568244.xml">
PBKDF2</link></system_of_measurement>
</method>
</know-how>
</standard>
 is designed to reduce this risk.</p>
<p>

A poorly designed hash function can make attacks feasible even if a strong password is chosen. See <mathematical_relation wordnetid="113783581" confidence="0.8">
<know-how wordnetid="105616786" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<function wordnetid="113783816" confidence="0.8">
<link xlink:type="simple" xlink:href="../360/690360.xml">
LM hash</link></function>
</method>
</know-how>
</mathematical_relation>
 for a very widely deployed, and deplorably insecure, example. <weblink xlink:type="simple" xlink:href="http://support.microsoft.com/default.aspx?scid=KB;EN-US;q299656">
http://support.microsoft.com/default.aspx?scid=KB;EN-US;q299656</weblink></p>

</ss1>
<ss1>
<st>
Methods of verifying a password over a network</st>

<p>

A variety of methods have been used to verify submitted passwords in a network setting:</p>

<ss2>
<st>
Simple transmission of the password</st>

<p>

Passwords are vulnerable to interception (i.e., "snooping") while being transmitted to the authenticating machine or person. If the password is carried as electrical signals on unsecured physical wiring between the user access point and the central system controlling the password database, it is subject to snooping by <technique wordnetid="105665146" confidence="0.8">
<know-how wordnetid="105616786" confidence="0.8">
<power wordnetid="105190804" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<link xlink:type="simple" xlink:href="../221/91221.xml">
wiretapping</link></method>
</power>
</know-how>
</technique>
 methods. If it is carried as packetitzed data over the Internet, anyone able to watch the <link xlink:type="simple" xlink:href="../734/43734.xml">
packets</link> containing the logon information can snoop with a very low probability of detection.</p>
<p>

Email is sometimes used to distribute passwords. Since most email is sent as <link xlink:type="simple" xlink:href="../791/600791.xml">
cleartext</link>, it is available without effort during transport to any eavesdropper.  Further, the email will be stored on at least two computers as cleartext -- the sender's and the recipient's. If it passes through intermediate systems during its travels, it will likely be stored on those as well, at least for some time. Attempts to delete an email from all these vulnerabilities may, or may not, succeed; <link xlink:type="simple" xlink:href="../867/533867.xml">
backup</link>s or history files or <link xlink:type="simple" xlink:href="../829/6829.xml">
cache</link>s on any of several systems may still contain the email. Indeed merely identifying every one of those systems may be difficult. Emailed passwords are generally an insecure method of distribution.</p>
<p>

An example of <link xlink:type="simple" xlink:href="../791/600791.xml">
cleartext</link> transmission of passwords is the original <web_site wordnetid="106359193" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../734/5043734.xml">
Wikipedia</link></web_site>
 website. When you logged into your Wikipedia account, your <link xlink:type="simple" xlink:href="../990/16301990.xml">
username</link> and password are sent from your computer's browser through the Internet as cleartext. In principle, anyone could read them in transit and thereafter log into your account as you; Wikipedia's servers have no way of distinguishing such an attacker from you. In practice, an unknowably larger number could do so as well (eg, employees at your Internet Service Provider, at any of the systems through which the traffic passes, etc). More recently, Wikipedia has offered a secure login option, which, like many e-commerce sites, uses the <link xlink:type="simple" xlink:href="../813/187813.xml">
SSL</link> / (<message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<standard wordnetid="107260623" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../813/187813.xml">
TLS</link></system_of_measurement>
</rule>
</direction>
</standard>
</protocol>
</message>
) cryptographically based protocol to eliminate the cleartext transmission. But, because anyone can gain access to Wikipedia (without logging in at all), and then edit essentially all articles, it can be argued that there is little need to encrypt these transmissions as there's little being protected. Other websites (eg, banks and financial institutions) have quite different security requirements, and cleartext transmission of anything is clearly insecure in those contexts.</p>
<p>

Using client-side encryption will only protect transmission from the mail handling system server to the client machine. Previous or subsequent relays of the email will not be protected and the email will probably be stored on multiple computers, certainly on the originating and receiving computers, most often in cleartext.</p>

</ss2>
<ss2>
<st>
Transmission through encrypted channels</st>

<p>

The risk of interception of passwords sent over the Internet can be reduced by, among other approaches, using <link xlink:type="simple" xlink:href="../432/18934432.xml">
cryptographic</link> protection. The most widely used is the <message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<standard wordnetid="107260623" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../813/187813.xml">
Transport Layer Security</link></system_of_measurement>
</rule>
</direction>
</standard>
</protocol>
</message>
 (TLS, previously called <link xlink:type="simple" xlink:href="../813/187813.xml">
SSL</link>) feature built into most current Internet <link xlink:type="simple" xlink:href="../173/33173.xml">
browsers</link>. Most browsers alert the user of a TLS/SSL protected exchange with a server by displaying a closed lock icon, or some other sign, when TLS is in use. There are several other techniques in use; see <link xlink:type="simple" xlink:href="../432/18934432.xml">
cryptography</link>.</p>

</ss2>
<ss2>
<st>
Hash-based challenge-response methods</st>

<p>

Unfortunately, there is a conflict between stored hashed-passwords and hash-based <link xlink:type="simple" xlink:href="../627/412627.xml">
challenge-response authentication</link>; the latter requires a client to prove to a server that he knows what the <link xlink:type="simple" xlink:href="../246/7111246.xml">
shared secret</link> (i.e., password) is, and to do this, the server must be able to obtain the shared secret from its stored form. On many systems (including <family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../642/31642.xml">
Unix</link></family>
-type systems) doing remote authentication, the shared secret usually becomes the hashed form and has the serious limitation of exposing passwords to offline guessing attacks. In addition, when the hash is used as a shared secret, an attacker does not need the original password to authenticate remotely; he only needs the hash.</p>

</ss2>
<ss2>
<st>
Zero-knowledge password proofs</st>

<p>

Rather than transmitting the password, <link xlink:type="simple" xlink:href="../676/2152676.xml">
password-authenticated key agreement</link> or the hash, systems can perform a <link xlink:type="simple" xlink:href="../316/2152316.xml">
zero-knowledge password proof</link> algorithm, which proves knowledge of the password without exposing it.</p>
<p>

Moving a step further, augmented systems for <link xlink:type="simple" xlink:href="../676/2152676.xml">
password-authenticated key agreement</link> (e.g., <link>
AMP</link>, <link>
B-SPEKE</link>, <link>
PAK-Z</link>, <link>
SRP-6</link>) avoid both the conflict and limitation of hash-based methods; An augmented system allows a client to prove knowledge of the password to a server, where the server knows only a (not exactly) hashed password, and where the unhashed password is required to gain access.</p>

</ss2>
</ss1>
<ss1>
<st>
Procedures for changing passwords</st>

<p>

Usually, a system must provide a way to change a password, either because a user believes the current password has been (or might have been) compromised, or as a precautionary measure. If a new password is passed to the system in unencrypted form, security can be lost (e.g., via wiretapping) even before the new password can even be installed in the password database. And, of course, if the new password is given to a compromised employee, little is gained. Some web sites include the user-selected password in an unencrypted confirmation e-mail message, with the obvious increased vulnerability.</p>
<p>

<event wordnetid="100029378" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<link xlink:type="simple" xlink:href="../507/927507.xml">
Identity management</link></activity>
</procedure>
</psychological_feature>
</act>
</event>
 systems are increasingly used to automate issuance of replacements for lost passwords, a feature called <link xlink:type="simple" xlink:href="../202/2013202.xml">
self service password reset</link>. The user's identity is verified by asking questions and comparing the answers to ones previously stored (ie, when the account was opened). Typical questions include "Where were you born?," "What is your favorite movie?" or "What is the name of your pet?"  In many cases the answers to these questions can be relatively easily guessed by an attacker, determined by low effort research, or obtained through <link xlink:type="simple" xlink:href="../243/730243.xml">
social engineering</link>, and so this is less than fully satisfactory as a verification technique. While many users have been trained never to reveal a password, few consider the name of their pet or favorite movie to require similar care.</p>

</ss1>
<ss1>
<st>
Password longevity</st>

<p>

"Password aging" is a feature of some operating systems which forces users to change passwords frequently (e.g., quarterly, monthly or even more often), with the intent that a stolen password will become unusable more or less quickly. Such policies usually provoke user protest and foot-dragging at best and hostility at worst. Users may develop simple variation patterns to keep their passwords memorable. In any case, the security benefits are distinctly limited, if worthwhile, because attackers often exploit a password as soon as it is compromised, which will likely be some time before change is required. In many cases, particularly with administrative or "root" accounts, once an attacker has gained access, he can make alterations to the operating system that will allow him future access even after the initial password he used expires. (see <link xlink:type="simple" xlink:href="../942/223942.xml">
rootkit</link>). Implementing such a policy requires careful consideration of the relevant human factors.</p>


</ss1>
<ss1>
<st>
Number of users per password</st>

<p>

Sometimes a single password controls access to a device, for example, for a network router, or password-protected mobile phone. However, in the case of a <link xlink:type="simple" xlink:href="../398/7398.xml">
computer system</link>, a password is usually stored for each user account, thus making all access traceable (save, of course, in the case of users sharing passwords).
A would-be user on most systems must supply a username as well as a password, almost always at account set up time, and periodically thereafter. If the user supplies a password matching the one stored for the supplied username, he or she is permitted further access into the computer system. This is also the case for a cash machine, except that the 'user name' is typically the account number stored on the bank customer's card, and the PIN is usually quite short (4 to 6 digits).</p>
<p>

Allotting separate passwords to each user of a system is preferable to having a single password shared by legitimate users of the system, certainly from a security viewpoint. This is partly because users are more willing to tell another person (who may not be authorized) a shared password than one exclusively for their use. Single passwords are also much less convenient to change because many people need to be told at the same time, and they make removal of a particular user's access more difficult, as for instance on graduation or resignation. Per-user passwords are also essential if users are to be held accountable for their activities, such as making financial transactions or viewing medical records.</p>

</ss1>
<ss1>
<st>
Design of the protected software</st>

<p>

Common techniques used to improve the security of software systems protected by a password include:</p>
<p>

<list>
<entry level="1" type="bullet">

Not echoing the password on the display screen as it is being entered or obscuring it as it is typed by using asterisks or circular blobs.</entry>
<entry level="1" type="bullet">

Allowing passwords of adequate length (some <link xlink:type="simple" xlink:href="../295/18295.xml">
legacy</link> operating systems, including early versions of Unix and Windows, limited passwords to an 8 character maximum.</entry>
<entry level="1" type="bullet">

Requiring users to re-enter their password after a period of inactivity (a semi log-off policy).</entry>
<entry level="1" type="bullet">

Enforcing a <link xlink:type="simple" xlink:href="../189/1256189.xml">
password policy</link> to increase <link xlink:type="simple" xlink:href="../886/4459886.xml">
password strength</link> and security.</entry>
<entry level="2" type="bullet">

Requiring periodic password changes.</entry>
<entry level="2" type="bullet">

Assigning randomly chosen passwords.</entry>
<entry level="2" type="bullet">

Requiring minimum or maximum password lengths.</entry>
<entry level="2" type="bullet">

Requiring characters from various character classes in a password. </entry>
<entry level="2" type="bullet">

Providing an alternative to keyboard entry (eg, spoken passwords, or <link xlink:type="simple" xlink:href="../622/290622.xml">
biometric</link> passwords).</entry>
<entry level="1" type="bullet">

Using encrypted tunnels or <link xlink:type="simple" xlink:href="../676/2152676.xml">
password-authenticated key agreement</link> to prevent access to transmitted passwords via network attacks </entry>
<entry level="1" type="bullet">

Limiting the number of allowed failures within a given time period (to prevent repeated password guessing).  After the limit is reached, further attempts will fail (including correct password attempts) until the beginning of the next time period. However, this is vulnerable to a form of <link>
denial of service attack</link>.</entry>
<entry level="1" type="bullet">

Introducing a delay between password submission attempts to slow down automated password guessing programs.</entry>
</list>
</p>
<p>

Some of the more stringent policy enforcement measures can pose a risk of alienating users, possibly decreasing security as a result.</p>

</ss1>
</sec>
<sec>
<st>
Password cracking</st>

<p>

<indent level="1">

<it>Main article: <operation wordnetid="100955060" confidence="0.8">
<accomplishment wordnetid="100035189" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<action wordnetid="100037396" confidence="0.8">
<attack wordnetid="100972621" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<feat wordnetid="100036762" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<link xlink:type="simple" xlink:href="../981/477981.xml">
Password cracking</link></activity>
</feat>
</psychological_feature>
</act>
</attack>
</action>
</event>
</accomplishment>
</operation>
</it>
</indent>
Attempting to crack passwords by trying as many possibilities as time and money permit is a <link xlink:type="simple" xlink:href="../784/53784.xml">
brute force attack</link>. A related method, rather more efficient in most cases, is a <link xlink:type="simple" xlink:href="../785/53785.xml">
dictionary attack</link>. In a dictionary attack, all words in one or more dictionaries are tested. Lists of common passwords are also typically tested.</p>
<p>

<know-how wordnetid="105616786" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<link xlink:type="simple" xlink:href="../886/4459886.xml">
Password strength</link></method>
</know-how>
 is the likelihood that a password cannot be guessed or discovered, and varies with the attack algorithm used. Passwords easily discovered are termed <it>weak</it> or <it>vulnerable</it>; passwords very difficult or impossible to discover are considered <it>strong</it>. There are several programs available for password attack (or even auditing and recovery by systems personnel) such as <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../376/483376.xml">
L0phtCrack</link></software>
, <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../250/208250.xml">
John the Ripper</link></software>
, and <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../000/4215000.xml">
Cain</link></software>
; some of which use password design vulnerabilities (as found in the Microsoft LANManager system) to increase efficiency. These programs are sometimes used by system administrators to detect weak passwords proposed by users.</p>
<p>

Studies of production computer systems have consistently shown that a large fraction of all user-chosen passwords are readily guessed automatically. For example, Columbia University found 22% of user passwords could be recovered with little effort. <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%223%22])">3</ref>
According to <person wordnetid="100007846" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../732/36732.xml">
Bruce Schneier</link></person>
, examining data from a 2006 <link xlink:type="simple" xlink:href="../364/428364.xml">
phishing</link> attack, 55% of MySpace passwords would be crackable in 8 hours using a commercially available Password Recovery Toolkit capable of testing 200,000 passwords per second in 2006.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%224%22])">4</ref> He also reported that the sinle most common password was <it>password1</it>, confirming yet again the general lack of informed care in choosing passwords amongst users.  (He nevertheless maintained, based on these data, that the general quality of passwords has improved over the years -- for example, average length was up to eight characters from under seven in previous surveys, and less than 4% were dictionary words. <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%225%22])">5</ref>)</p>

</sec>
<sec>
<st>
Alternatives to passwords for access control</st>
<p>

The numerous ways in which permanent or semi-permanent passwords can be compromised has prompted the development of other techniques. Unfortunately, some are inadequate in practice, and in any case few  have become universally available for users seeking a more secure alternative.</p>
<p>

<list>
<entry level="1" type="bullet">

<know-how wordnetid="105616786" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<link xlink:type="simple" xlink:href="../077/1190077.xml">
Single-use passwords</link></method>
</know-how>
. Having passwords which are only valid once makes many potential attacks ineffective. Most users find single use passwords extremely inconvenient. They have, however, been widely implemented in personal <link xlink:type="simple" xlink:href="../996/713996.xml">
online banking</link>, where they are known as <link xlink:type="simple" xlink:href="../890/2522890.xml">
TAN</link>s. As most home users only perform a small number of transactions each week, the single use issue has not led to intolerable customer dissatisfaction in this case.</entry>
<entry level="1" type="bullet">

<know-how wordnetid="105616786" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<link xlink:type="simple" xlink:href="../826/1209826.xml">
Security token</link></method>
</know-how>
s are similar in some ways to single-use passwords, but the value to be entered is displayed on a small (generally pocketable) item and changes every minute or so.</entry>
<entry level="1" type="bullet">

Access controls based on <link>
public key cryptography</link> e.g. <message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<standard wordnetid="107260623" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../814/28814.xml">
ssh</link></system_of_measurement>
</rule>
</direction>
</standard>
</protocol>
</message>
. The necessary keys are usually too large to memorize (but see proposal <weblink xlink:type="simple" xlink:href="http://eprint.iacr.org/2005/434">
Passmaze</weblink>) and must be stored on a local computer, security token or portable memory device, such as a <link xlink:type="simple" xlink:href="../414/400414.xml">
flash disk</link> or <link xlink:type="simple" xlink:href="../891/10891.xml">
floppy disk</link>.</entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../622/290622.xml">
Biometric</link> methods promise authentication based on unalterable personal characteristics, but currently (2005) have high error rates and require additional hardware to scan, for example, <link xlink:type="simple" xlink:href="../777/84777.xml">
fingerprint</link>s, <anatomy wordnetid="106057539" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../801/86801.xml">
iris</link></anatomy>
es, etc. They have proven easy to spoof in some famous incidents testing commercially available systems  and, because these characteristics are unalterable, they cannot be changed if compromised; this is a highly important consideration in access control as a compromised access token is necessarily insecure. </entry>
<entry level="1" type="bullet">

<system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../470/927470.xml">
Single sign-on</link></instrumentality>
</artifact>
</system>
 technology is claimed to eliminate the need for having multiple passwords. Such schemes do not relieve user and administrators from choosing reasonable single passwords, nor system designers or administrators from ensuring that private access control information passed among systems enabling single sign-on is secure against attack. As yet, no satisfactory standard has been developed. </entry>
<entry level="1" type="bullet">

Non-text-based passwords, such as <link xlink:type="simple" xlink:href="../304/24304.xml">
graphical passwords</link> or mouse-movement based passwords.<weblink xlink:type="simple" xlink:href="http://waelchatila.com/2005/09/18/1127075317148.html">
http://waelchatila.com/2005/09/18/1127075317148.html</weblink> Another system requires users to select a series of <link xlink:type="simple" xlink:href="../234/53234.xml">
face</link>s as a password, utilizing the <link xlink:type="simple" xlink:href="../620/490620.xml">
human brain</link>'s ability to <link xlink:type="simple" xlink:href="../309/485309.xml">
recall faces</link> easily.<weblink xlink:type="simple" xlink:href="http://mcpmag.com/reviews/products/article.asp?EditorialsID=486">
http://mcpmag.com/reviews/products/article.asp?EditorialsID=486</weblink>. So far, these are promising, but are not widely used.</entry>
<entry level="1" type="bullet">

Graphical passwords are an alternative means of <link xlink:type="simple" xlink:href="../967/47967.xml">
authentication</link> for log-in intended to be used in place of conventional password; they use <link xlink:type="simple" xlink:href="../925/71925.xml">
images</link> instead of <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<format wordnetid="106636806" confidence="0.8">
<link xlink:type="simple" xlink:href="../030/25030.xml">
text</link></format>
</information>
</message>
. In some implementations the user is required to pick from a series of images in the correct sequence in order to gain access. While some believe that graphical passwords would be harder to <operation wordnetid="100955060" confidence="0.8">
<accomplishment wordnetid="100035189" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<action wordnetid="100037396" confidence="0.8">
<attack wordnetid="100972621" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<feat wordnetid="100036762" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<link xlink:type="simple" xlink:href="../981/477981.xml">
crack</link></activity>
</feat>
</psychological_feature>
</act>
</attack>
</action>
</event>
</accomplishment>
</operation>
, others suggest that people will be just as likely to pick common images or sequences as they are to pick common passwords.</entry>
</list>
</p>

</sec>
<sec>
<st>
Website password systems</st>
<p>

Passwords are used on websites to authenticate users and are usually maintained on the Web server, meaning the browser on a remote system sends a password to the server (by HTTP POST), the server checks the password and sends back the relevant content (or an access denied message). This process eliminates the possibility of local reverse engineering as the code used to authenticate the password does not reside on the local machine.</p>
<p>

Transmission of the password, via the browser, in plaintext means it can be intercepted along its journey to the server. Many web authentication systems use SSL to establish an encrypted session between the browser and the server, and is usually the underlying meaning of claims to have a "secure Web site". This is done automatically by the browser and increases integrity of the session, assuming neither end has be compromised and that the SSL/TSL implementations used are high quality ones.</p>
<p>

So-called website password and membership management systems often involve the use of <message wordnetid="106598915" confidence="0.8">
<request wordnetid="106513366" confidence="0.8">
<link xlink:type="simple" xlink:href="../881/15881.xml">
Java</link></request>
</message>
 or <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../845/9845.xml">
JavaScript</link></programming_language>
 code existing on the client side (meaning the visitor's web browser) <format wordnetid="106636806" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../191/13191.xml">
HTML</link></format>
 source code (for example, AuthPro). Drawbacks to such systems are the relative ease in bypassing or circumventing the protection by switching off JavaScript and Meta redirects in the browser, thereby gaining access to the protected web page. Others take advantage of server-side scripting languages such as <link xlink:type="simple" xlink:href="../883/2883.xml">
ASP</link> or <physical_entity wordnetid="100001930" confidence="0.8">
<communicator wordnetid="109610660" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<compiler wordnetid="109946957" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<language wordnetid="106282651" confidence="0.8">
<writer wordnetid="110794014" confidence="0.8">
<link xlink:type="simple" xlink:href="../131/24131.xml">
PHP</link></writer>
</language>
</causal_agent>
</compiler>
</person>
</communicator>
</physical_entity>
 to authenticate users on the server before delivering the source code to the browser. Popular systems such as <weblink xlink:type="simple" xlink:href="http://www.Sentrylogin.com">
Sentry Login</weblink> and <weblink xlink:type="simple" xlink:href="http://www.monster-submit.com/sentry/">
Password Sentry</weblink> take advantage of technology in which web pages are protected using such scripting language code snippets placed in front of the HTML code in the web page source saved in the appropriate extension on the server, such as .asp or .php.</p>

</sec>
<sec>
<st>
History of passwords</st>
<p>

Passwords or <b>watchwords</b> have been used since ancient times.  <link xlink:type="simple" xlink:href="../516/24516.xml">
Polybius</link> describes the system for distribution watchwords in the <link xlink:type="simple" xlink:href="../176/4921176.xml">
Roman military</link> as follows: 
<indent level="1">

The way in which they secure the passing round of the watchword for the night is as follows: from the tenth <military_unit wordnetid="108198398" confidence="0.8">
<unit_of_measurement wordnetid="113583724" confidence="0.8">
<definite_quantity wordnetid="113576101" confidence="0.8">
<link xlink:type="simple" xlink:href="../237/713237.xml">
maniple</link></definite_quantity>
</unit_of_measurement>
</military_unit>
 of each class of infantry and cavalry, the maniple which is encamped at the lower end of the street, a man is chosen who is relieved from guard duty, and he attends every day at sunset at the tent of the <link xlink:type="simple" xlink:href="../594/30594.xml">
tribune</link>, and receiving from him the watchword - that is a wooden tablet with the word inscribed on it - takes his leave, and on returning to his quarters passes on the watchword and tablet before witnesses to the commander of the next maniple, who in turn passes it to the one next him. All do the same until it reaches the first maniples, those encamped near the tents of the tribunes. These latter are obliged to deliver the tablet to the tribunes before dark. So that if all those issued are returned, the tribune knows that the watchword has been given to all the maniples, and has passed through all on its way back to him. If any one of them is missing, he makes inquiry at once, as he knows by the marks from what quarter the tablet has not returned, and whoever is responsible for the stoppage meets with the punishment he merits. <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%226%22])">6</ref>
</indent>

Passwords in military use evolved to include not just a password, but a password and a counterpassword; for example in the opening days of the <link xlink:type="simple" xlink:href="../415/15714415.xml">
Battle of Normandy</link>, paratroopers of the U.S. 101st Airborne Division used a password - "thunder" - which was presented as a challenge, which was to be met with an appropriate response - "flash". The challenge and response were changed periodically. American paratroopers also famously used a device known as a "cricket" on <link xlink:type="simple" xlink:href="../722/8052722.xml">
D-Day</link> in place of a password system as a temporarily unique method of identification; one metallic click given by the device in lieu of a password was to be met by two clicks in reply.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%227%22])">7</ref></p>
<p>

Passwords have been used with computers since the earliest days of computing. <link xlink:type="simple" xlink:href="../061/19061.xml">
MIT</link>'s <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../141/254141.xml">
CTSS</link></O>
, one of the first time sharing systems, was introduced in 1961. It had a LOGIN command that requested a user password. "After typing PASSWORD, the system turns off the printing mechanism, if possible, so that the user may type in his password with privacy." <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%228%22])">8</ref> <physical_entity wordnetid="100001930" confidence="0.8">
<expert wordnetid="109617867" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<cryptanalyst wordnetid="109981540" confidence="0.8">
<specialist wordnetid="110631941" confidence="0.8">
<intellectual wordnetid="109621545" confidence="0.8">
<alumnus wordnetid="109786338" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<scholar wordnetid="110557854" confidence="0.8">
<decoder wordnetid="109995398" confidence="0.8">
<link xlink:type="simple" xlink:href="../338/230338.xml">
Robert Morris</link></decoder>
</scholar>
</scientist>
</causal_agent>
</alumnus>
</intellectual>
</specialist>
</cryptanalyst>
</person>
</expert>
</physical_entity>
 invented the idea of storing login passwords in a hashed form as part of the <family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../642/31642.xml">
Unix</link></family>
 operating system. His algorithm, know as <link xlink:type="simple" xlink:href="../924/4179924.xml">
crypt(3)</link>, used a 12-bit <link xlink:type="simple" xlink:href="../756/701756.xml">
salt</link> and invoked a modified form of the <cipher wordnetid="106254239" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../978/7978.xml">
DES</link></cipher>
 algorithm 25 times to reduce the risk of <link xlink:type="simple" xlink:href="../785/53785.xml">
dictionary attack</link>s.</p>

</sec>
<sec>
<st>
See also</st>
<p>

<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../967/47967.xml">
Authentication</link></entry>
<entry level="1" type="bullet">

 <software wordnetid="106566077" confidence="0.8">
<application wordnetid="106570110" confidence="0.8">
<program wordnetid="106568978" confidence="0.8">
<written_communication wordnetid="106349220" confidence="0.8">
<writing wordnetid="106359877" confidence="0.8">
<code wordnetid="106355894" confidence="0.8">
<coding_system wordnetid="106353757" confidence="0.8">
<link xlink:type="simple" xlink:href="../834/230834.xml">
CAPTCHA</link></coding_system>
</code>
</writing>
</written_communication>
</program>
</application>
</software>
</entry>
<entry level="1" type="bullet">

 <know-how wordnetid="105616786" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<link xlink:type="simple" xlink:href="../746/1371746.xml">
Diceware</link></method>
</know-how>
</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../874/2985874.xml">
Keyfile</link></entry>
<entry level="1" type="bullet">

 <know-how wordnetid="105616786" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<link xlink:type="simple" xlink:href="../420/152420.xml">
Passphrase</link></method>
</know-how>
</entry>
<entry level="1" type="bullet">

 <know-how wordnetid="105616786" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<link xlink:type="simple" xlink:href="../394/4696394.xml">
Password manager</link></method>
</know-how>
</entry>
<entry level="1" type="bullet">

 <know-how wordnetid="105616786" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<link xlink:type="simple" xlink:href="../189/1256189.xml">
Password policy</link></method>
</know-how>
</entry>
<entry level="1" type="bullet">

 <know-how wordnetid="105616786" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<link xlink:type="simple" xlink:href="../886/4459886.xml">
Password strength</link></method>
</know-how>
</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../490/41490.xml">
Password length parameter</link></entry>
<entry level="1" type="bullet">

 <operation wordnetid="100955060" confidence="0.8">
<accomplishment wordnetid="100035189" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<action wordnetid="100037396" confidence="0.8">
<attack wordnetid="100972621" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<feat wordnetid="100036762" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<link xlink:type="simple" xlink:href="../981/477981.xml">
Password cracking</link></activity>
</feat>
</psychological_feature>
</act>
</attack>
</action>
</event>
</accomplishment>
</operation>
</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../984/8672984.xml">
Password fatigue</link></entry>
<entry level="1" type="bullet">

 <message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<know-how wordnetid="105616786" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<link xlink:type="simple" xlink:href="../676/2152676.xml">
Password-authenticated key agreement</link></method>
</rule>
</direction>
</know-how>
</protocol>
</message>
</entry>
<entry level="1" type="bullet">

 <know-how wordnetid="105616786" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<link xlink:type="simple" xlink:href="../800/4013800.xml">
Password notification e-mail</link></method>
</know-how>
</entry>
<entry level="1" type="bullet">

 <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<know-how wordnetid="105616786" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<link xlink:type="simple" xlink:href="../154/2013154.xml">
Password synchronization</link></method>
</know-how>
</instrumentality>
</artifact>
</system>
</entry>
<entry level="1" type="bullet">

 <know-how wordnetid="105616786" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<link xlink:type="simple" xlink:href="../057/4934057.xml">
Pre-shared key</link></method>
</know-how>
</entry>
<entry level="1" type="bullet">

 <know-how wordnetid="105616786" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../094/1335094.xml">
Random password generator</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</method>
</rule>
</event>
</know-how>
</entry>
<entry level="1" type="bullet">

 <operation wordnetid="100955060" confidence="0.8">
<system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<attack wordnetid="100972621" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<link xlink:type="simple" xlink:href="../202/2013202.xml">
Self-service password reset</link></activity>
</psychological_feature>
</act>
</attack>
</event>
</instrumentality>
</artifact>
</system>
</operation>
</entry>
</list>
</p>

</sec>
<sec>
<st>
References</st>
<p>

<reflist>
<entry id="1">
<link xlink:type="simple" xlink:href="../699/566699.xml">
news.bbc.co.uk</link>: <weblink xlink:type="simple" xlink:href="http://news.bbc.co.uk/2/hi/asia-pacific/4396831.stm">
Malaysia car thieves steal finger</weblink></entry>
<entry id="2">
<weblink xlink:type="simple" xlink:href="http://www.usenix.org/publications/login/2004-06/pdfs/alexander.pdf">
Password Protection for Modern Operating Systems</weblink></entry>
<entry id="3">
<weblink xlink:type="simple" xlink:href="http://www1.cs.columbia.edu/~crf/howto/password-howto.html">
Password</weblink></entry>
<entry id="4">
<weblink xlink:type="simple" xlink:href="http://www.schneier.com/blog/archives/2006/12/realworld_passw.html">
Schneier, Real-World Passwords</weblink></entry>
<entry id="5">
<weblink xlink:type="simple" xlink:href="http://www.wired.com/politics/security/commentary/securitymatters/2006/12/72300">
MySpace Passwords Aren't So Dumb</weblink></entry>
<entry id="6">
<weblink xlink:type="simple" xlink:href="http://ancienthistory.about.com/library/bl/bl_text_polybius6.htm">
Polybius on the Roman Military</weblink></entry>
<entry id="7">
Bando, Mark <it>Screaming Eagles: Tales of the 101st Airborne Division in World War II''</it></entry>
<entry id="8">
 CTSS Programmers Guide, 2nd Ed., 1965</entry>
</reflist>
</p>

</sec>
<sec>
<st>
External links</st>

<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.passwordresearch.com/stats/statindex.html">
Large collection of statistics about passwords</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.acsac.org/2005/abstracts/89.html">
Graphical Passwords: A Survey</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://labs.mininova.org/passclicks/">
PassClicks</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.network-research-group.org/default.asp?page=publications">
PassImages</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.jablon.org/passwordlinks.html">
Links for password-based cryptography</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.mysecurecyberspace.com/encyclopedia/index/password.html">
Password</weblink>, <it>Encyclopedia of Risks and Threats</it>, <link xlink:type="simple" xlink:href="../842/11614842.xml">
MySecureCyberspace</link> </entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.emiic.net/services/guides/Passwords%20Guide.pdf">
Procedural Advice for Organisations and Administrators</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.ftp.cl.cam.ac.uk/ftp/users/rja14/tr500.pdf">
Memorability and Security of Passwords</weblink> - Cambridge University Computer Laboratory study of password memorability vs. security.</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://w3dt.net/tools/defaultpasswords/">
Default Passwords for Computer Hardware</weblink> - Online database of default user names &amp; passwords for common computer hardware.</entry>
</list>
</p>



</sec>
</bdy>
</article>
