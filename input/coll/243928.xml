<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 16:37:54[mciao0826] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>Unix security</title>
<id>243928</id>
<revision>
<id>238189374</id>
<timestamp>2008-09-13T18:22:11Z</timestamp>
<contributor>
<username>Jack-A-Roe</username>
<id>5867479</id>
</contributor>
</revision>
<categories>
<category>Unix</category>
<category>All articles needing style editing</category>
<category>Operating system security</category>
<category>Wikipedia articles needing style editing from January 2008</category>
<category>System administration</category>
</categories>
</header>
<bdy>

<table class="metadata plainlinks ambox ">
<row>
<col>

ambox-style" style=""</col>
</row>
<row>
<col class="mbox-image"><p>

<image width="40x40px" src="Ambox_style.png">
</image>
</p>
</col>
<col style="" class="mbox-text">
 <b>The  or style of this article or section may not be appropriate for Wikipedia.</b>
Specific concerns may be found on the . See Wikipedia's for suggestions. <it>(January 2008)''</it></col>
</row>
</table>


<b>Unix security</b>: maintaining a secure environment on <family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../642/31642.xml">
Unix</link></family>
 and Unix-like <link xlink:type="simple" xlink:href="../194/22194.xml">
operating system</link>s is dependent on design concepts of these operating systems, but vigilance through user and administrative techniques is important to maintain security also.


<sec>
<st>
Design concepts</st>

<ss1>
<st>
 Permissions </st>
<p>

A core security feature in these systems is the <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<link xlink:type="simple" xlink:href="../955/1347955.xml">
permissions</link></activity>
</procedure>
</psychological_feature>
</act>
</event>
</instrumentality>
</artifact>
</system>
 system. All files in a typical Unix-style filesystem have permissions set enabling different access to a file.</p>
<p>

Permissions on a file are commonly set using the <link xlink:type="simple" xlink:href="../623/50623.xml">
chmod</link> command and seen through the <link xlink:type="simple" xlink:href="../682/158682.xml">
ls</link> command. For example:
-r-xr-xr-x  1 root  wheel  745720 Sep  8  2002 /bin/sh</p>
<p>

Unix permissions permit different users access to a file. Different <it>user groups</it> have different permissions on a file.</p>
<p>

More advanced Unix filesystems include the <it>Access Control List</it> concept which allows permissions to be granted to multiple users or groups.  An <it>Access Control List</it> may be used to grant permission to additional individual users or groups.  For example:
/pvr [u::rwx,g::r-x,o::r-x/u::rwx,u:sue:rwx,g::r-x,m::rwx,o::r-x]</p>
<p>

In this example, which is from the <link>
chacl</link> command on the <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../297/6097297.xml">
Linux</link></O>
 operating system, the user <b>sue</b> is granted <it>write</it> permission to the <it>/pvr</it> directory.</p>

</ss1>
<ss1>
<st>
 User groups </st>
<p>

Users under Unix style operating systems often belong to managed groups with specific access permissions. This enables users to be grouped by the level of access they have to this system.  Many Unix implementations add an additional layer of security by requiring that a user be a member of the <it><link xlink:type="simple" xlink:href="../157/2239157.xml">
wheel</link></it>  <link xlink:type="simple" xlink:href="../521/1145521.xml">
user privileges group</link> in order to access the su command.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref></p>

</ss1>
<ss1>
<st>
 Issues </st>
<p>

Most Unix style systems have an account or group which enables a user to exact complete control over the system, often known as a <link xlink:type="simple" xlink:href="../478/620478.xml">
root</link> account. If access to this account is gained by an unwanted user, this results in a complete breach of the system. A root account however is necessary for administrative purposes, and for the above security reasons the root account is <it>seldom</it> used for day to day purposes (the <link xlink:type="simple" xlink:href="../028/1008028.xml">
sudo</link> program is more commonly used), so usage of the root account can be more closely monitored.</p>
<p>

Root access "as it should be" can be visualised by those familiar with the <fictional_character wordnetid="109587565" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../381/28381.xml">
Superman</link></fictional_character>
 stories using the following <link xlink:type="simple" xlink:href="../533/103533.xml">
analogy</link>:</p>
<p>

<indent level="2">

Using a root account is rather like being Superman; an administrator's regular user is more like Clark Kent. Clark Kent becomes Superman for only as long as necessary, in order to save people. He then reverts to his "disguise". Root access should be used in the same fashion. The Clark Kent disguise doesn't really restrict him though, as he is still able to use his super powers. This is analogous to using the sudo program.
</indent>

</p>
</ss1>
</sec>
<sec>
<st>
User and administrative techniques</st>
<p>

Unix has many tools that can improve security if used properly by users and administrators.</p>

<ss1>
<st>
Passwords</st>
<p>

Selecting a strong <link xlink:type="simple" xlink:href="../304/24304.xml">
password</link> and guarding it properly are probably the most important things a user can do to improve Unix security.
In Unix systems, passwords are usually stored under the file /etc/passwd. This file also keeps track of the users registered in the system and their main definitions. The entries in /etc/passwd occupy exactly one line each, and have the following form: </p>
<p>

nickname:password_hash:UserID:GroupID:Complete_Name:home_dir:shell_bin
An example would be: 
xfze:$1$zuW2nX3sslp3qJm9MYDdglEApAc36r/:1000:100:Jos√© Carlos D. S. Saraiva:/home/xfze:/bin/bash</p>
<p>

Since all users must have read access to this file, in order for the system to check the login password, one security issue was raised: anyone could have read the file and retrieve the password hashes of other users. To solve this problem, the  file <link xlink:type="simple" xlink:href="../181/782181.xml">
/etc/shadow</link> was created to store the passwords, with only <link xlink:type="simple" xlink:href="../333/56333.xml">
root</link> having read access.  Under password shadowing, the /etc/passwd the 2nd field (<link xlink:type="simple" xlink:href="../781/449781.xml">
password hash</link>) is replaced by an 'x' which tells the system to retrieve the corresponding user's password via the /etc/shadow file.</p>
<p>

The /etc/shadow file usually only contains the first two fields:</p>
<p>

xfze:$1$zuW2nX3sslp3qJm9MYDdglEApAc36r/:::::</p>
<p>

The remaining fields in the /etc/shadow file include: 
<list>
<entry level="1" type="number">

The minimum number of days between password changes</entry>
<entry level="1" type="number">

The maximum number of days until the password must be changed</entry>
<entry level="1" type="number">

The number of days of warning given before the password must be changed</entry>
<entry level="1" type="number">

The number of days after the password must be changed when the account becomes unusable</entry>
<entry level="1" type="number">

The date (expressed as the number of days since <link xlink:type="simple" xlink:href="../035/1006035.xml">
January 1st, 1970</link>) when the account is expired</entry>
</list>
</p>
<p>

These fields may be used to improve Unix security by enforcing a password security policy.</p>

</ss1>
<ss1>
<st>
Users and accounts</st>
<p>

Administrators should delete old accounts promptly.
<list>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../280/459280.xml">
su</link>, <link xlink:type="simple" xlink:href="../028/1008028.xml">
sudo</link>, <link xlink:type="simple" xlink:href="../418/1621418.xml">
sudosh</link>, <message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<standard wordnetid="107260623" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../814/28814.xml">
ssh</link></system_of_measurement>
</rule>
</direction>
</standard>
</protocol>
</message>
 only, no remote root logins</entry>
</list>
</p>

</ss1>
</sec>
<sec>
<st>
Software Maintenance</st>

<ss1>
<st>
Patching</st>
<p>

Operating systems, like all software, may contain bugs in need of fixing or may be enhanced with the addition of new features.  Patching the operating system in a secure manner requires that the software come from a trustworthy source and not have been altered since it was packaged.  Common methods for verifying that operating system patches have not been altered include the use of <link xlink:type="simple" xlink:href="../526/439526.xml">
cryptographic hash</link>, such as an <function wordnetid="113783816" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../826/18826.xml">
MD5</link></function>
 based checksum, or the use of read-only media.</p>
<p>

From a security standpoint, the specific packaging method, such as the <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../236/288236.xml">
RPM Package Manager</link></software>
 format originally from <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../072/26072.xml">
Red Hat Linux</link></O>
 is not as important as the use of features which ensure the integrity of the patch itself.</p>

<ss2>
<st>
Source Distributions</st>
<p>

Source distributions include the ability to examine the code for suspicious content.  The drawback, absent an accompanying cryptographic hash value, is that the user must be able to perform a security analysis of the code themselves.</p>

</ss2>
<ss2>
<st>
RPM Packages</st>
<p>

<O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../297/6097297.xml">
Linux</link></O>
 distributions which use the <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../236/288236.xml">
RPM Package Manager</link></software>
 format for providing base functionality and software updates make use of <function wordnetid="113783816" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../826/18826.xml">
MD5</link></function>
 and <link xlink:type="simple" xlink:href="../809/38809.xml">
GPG</link> to ensure content integrity.  The hash values are packaged with the RPM file and verified when the package is installed.</p>

</ss2>
<ss2>
<st>
Debian Packages</st>
<p>

<O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../297/6097297.xml">
Linux</link></O>
 distribution which use the <structure wordnetid="105726345" confidence="0.8">
<arrangement wordnetid="105726596" confidence="0.8">
<distribution wordnetid="105729036" confidence="0.8">
<link xlink:type="simple" xlink:href="../242/8242.xml">
Debian</link></distribution>
</arrangement>
</structure>
 <format wordnetid="106636806" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../906/457906.xml">
.deb package format</link></format>
 for providing base functionality and software updates make use of <link xlink:type="simple" xlink:href="../809/38809.xml">
GPG</link> signatures to ensure content integrity.  A signature is computed when the package is constructed and verified later when the package is installed.</p>

</ss2>
<ss2>
<st>
Other vendors and distributions</st>
<p>

Regardless of the vendor or distribution, all software distributions should provide a mechanism for verifying that the software is legitimate and has not been modified since it was originally packaged.</p>

</ss2>
</ss1>
</sec>
<sec>
<st>
Services</st>

<p>

Unnecessary system software should not be installed or configured on a system.  Software which is no longer required should be removed completely, if possible.</p>
<p>

<list>
<entry level="1" type="bullet">

Identify what services are running</entry>
<entry level="2" type="bullet">

netstat -na</entry>
<entry level="2" type="bullet">

lsof</entry>
<entry level="2" type="bullet">

nmap</entry>
<entry level="2" type="bullet">

sockstat -4 (<platform wordnetid="103961939" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<surface wordnetid="104362025" confidence="0.8">
<horizontal_surface wordnetid="103536348" confidence="0.8">
<link xlink:type="simple" xlink:href="../554/7580554.xml">
FreeBSD</link></horizontal_surface>
</surface>
</artifact>
</platform>
)</entry>
</list>
</p>
<p>

The commands <link xlink:type="simple" xlink:href="../291/2173291.xml">
inetd</link> and <link xlink:type="simple" xlink:href="../302/2173302.xml">
xinetd</link> act as super-servers for a variety of network protocols such as <link xlink:type="simple" xlink:href="../841/711841.xml">
rlogin</link>, <link xlink:type="simple" xlink:href="../062/31062.xml">
telnet</link> and <link xlink:type="simple" xlink:href="../289/53289.xml">
ftp</link>.</p>
<p>

Turning off unnecessary services</p>
<p>

<list>
<entry level="1" type="bullet">

using <it>chkconfig</it> on <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../072/26072.xml">
Red Hat Linux</link></O>
</entry>
<entry level="1" type="bullet">

using <it>/etc/rc.conf</it> and <it>/usr/local/etc/rc.d</it> on FreeBSD (mention /etc/rc.local)</entry>
<entry level="1" type="bullet">

using <it>rc-update</it> on <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../419/94419.xml">
Gentoo Linux</link></O>
</entry>
</list>
</p>
<p>

This approach is usually called <it>proactive security</it>.  There are some operating systems which are <it>secure by default</it>.  Amongst others, the free BSD flavours (<platform wordnetid="103961939" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<surface wordnetid="104362025" confidence="0.8">
<horizontal_surface wordnetid="103536348" confidence="0.8">
<link xlink:type="simple" xlink:href="../554/7580554.xml">
FreeBSD</link></horizontal_surface>
</surface>
</artifact>
</platform>
, <link xlink:type="simple" xlink:href="../495/21495.xml">
NetBSD</link>, and <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../571/18949571.xml">
OpenBSD</link></O>
) are proactively secure.  For example, the output of netstat on a NetBSD 3.0 workstation clearly outlines this technique:
$ netstat -a
Active Internet connections (including servers)
Proto Recv-Q Send-Q  Local Address          Foreign Address        State
tcp        0      0  localhost.smtp         *.*                    LISTEN
tcp        0      0  *.ssh                  *.*                    LISTEN
Active Internet6 connections (including servers)
Proto Recv-Q Send-Q  Local Address          Foreign Address        (state)
tcp6       0      0  localhost.smtp         *.*                    LISTEN
tcp6       0      0  *.ssh                  *.*                    LISTEN
Active UNIX domain sockets
Address  Type   Recv-Q Send-Q    Inode     Conn     Refs  Nextref Addr
c0d10d80 dgram       0      0        0 c0cd8680        0 c0cb7000 -&amp;gt; /var/run/log
c0cb7000 dgram       0      0        0 c0cd8680        0        0 -&amp;gt; /var/run/log
c0cd8680 dgram       0      0 cb9639e8        0 c0d10d80        0 /var/run/log</p>
<p>

The following example from a BSD system
$ sockstat -4
USER     COMMAND    PID   FD PROTO  LOCAL ADDRESS         FOREIGN ADDRESS
root     sendmail   569    4 tcp    localhost.smtp        *.*
root     sshd       593    4 tcp    *.ssh                 *.*</p>
<p>

Shows that on this machine only the <link xlink:type="simple" xlink:href="../814/28814.xml">
SSH</link> service is listening to the public <link xlink:type="simple" xlink:href="../408/41408.xml">
network interface</link> of the computer. <link xlink:type="simple" xlink:href="../600/48600.xml">
sendmail</link> is listening to the <link xlink:type="simple" xlink:href="../478/160478.xml">
loopback</link> <link xlink:type="simple" xlink:href="../746/620746.xml">
interface</link> only.  Access to a service may be further restricted by using a <link xlink:type="simple" xlink:href="../928/243928.xml#xpointer(//*[./st=%22Firewalls%22])">
firewall</link>.</p>

</sec>
<sec>
<st>
File Systems</st>

<ss1>
<st>
File system security</st>

<p>

<indent level="1">

<it>Main article: <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<link xlink:type="simple" xlink:href="../955/1347955.xml">
File system permissions</link></activity>
</procedure>
</psychological_feature>
</act>
</event>
</instrumentality>
</artifact>
</system>
</it>
</indent>

File system security within <link xlink:type="simple" xlink:href="../642/31642.xml">
UNIX</link> and <family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../815/31815.xml">
Unix-like</link></family>
 systems is based on 9 permission bits, set user and group ID bits, and the sticky bit, for a total of 12 bits.  These permissions apply almost equally to all filesystem objects such as files, directories and devices.</p>
<p>

The 9 permission bits are divided into three groups of three bits each.  The first group describes the permissions of the file owner, the second group describes the permissions of a group associated with the file owner or the directory containing the file, and the third group describes the permissions associated with any process which does not have the same user ID as the file.  Each group of three bits contains a bit indicating the read, write or execute access is granted.  In the case of directories, execute access is interpreted as the permission to perform a filename lookup within the directory.</p>
<p>

The set user ID and set group ID bits, commonly abbreviated <it>set-UID</it> and <it>set-GID</it> respectively, are used to change the identity of the process which executes a file having either or both of those bits set.  A file having the <it><link xlink:type="simple" xlink:href="../629/1054629.xml">
set-UID</link></it> permission bit set will cause a process which executes that file to temporarily switch the effective user ID to that of the file owner.  A file having the <it><link xlink:type="simple" xlink:href="../629/1054629.xml">
set-GID</link></it> permission bit set will cause a process which executes that file to temporarily switch the effective group ID to that of the file group.  A process may then alternate between the effective user or group ID which it inherited from the file and the real user or group ID which it inherited when the user logged on to the system.  This provides a mechanism by which a process may limit the access rights it possesses to those code regions which require those access rights.  This is a form of a security technique known as <link xlink:type="simple" xlink:href="../022/1039022.xml">
privilege separation</link> and improves program security by limiting the unintended or undesirable actions of a processes.</p>
<p>

A directory having the <it>set-GID</it> permission bit set will cause a newly created file to have an initial file group value equal to the file group of the directory. This provides a mechanism whereby a subsystem, such as the system's mail subsystem, can create files which have a common file group value so that <it>set-GID</it> processes within that subsystem are then able to read or write the file.</p>
<p>

The <it>sticky bit</it>, formally known as the <it>save text on swap</it> bit, derives its name from its original purpose.  Originally the <it>sticky bit</it> caused a process's initial memory image to be stored as a contiguous image on the disk drive which was used to store real memory pages when they were not in use.  This improved the performance of commonly executed commands by making the initial memory image readily available.  Modern UNIX systems no longer perform that function when the bit is set, but the name has been preserved nonetheless.  In the case of files, the <it>sticky-bit</it> may be used by the system to indicate the style of file locking to be performed.  In the case of directories, the <it>sticky bit</it> prevents any process, other than one which has super-user privileges or one having an effective user ID of the file owner, from deleting a file within that directory.  The <it>sticky bit</it> is most commonly used on publicly writable directories, such as the various temporary working space directories on the system.</p>

</ss1>
</sec>
<sec>
<st>
Viruses and Virus Scanners</st>
<p>

Unix-like operating systems are immune to most Microsoft Windows viruses because binaries created to run on Windows generally won't run on other platforms.  However, many Unix like installations provide file storage services to Microsoft Windows clients, such as through the use of <link xlink:type="simple" xlink:href="../198/29198.xml">
Samba software</link>, and may unintentionally become a repository for viruses stored by users. It is common for Unix servers to act as <link xlink:type="simple" xlink:href="../624/20624.xml">
Mail Transfer Agents</link> consequently email virus scanning is often installed. The <link xlink:type="simple" xlink:href="../052/891052.xml">
ClamAV</link> virus scanner is available in source code form and may be used to scan Unix file systems for viruses which infect other operating systems.</p>
<p>

There are viruses and worms that target Unix-like operating systems.  In fact, the first computer worm -- the <worm wordnetid="101922303" confidence="0.8">
<invertebrate wordnetid="101905661" confidence="0.8">
<animal wordnetid="100015388" confidence="0.8">
<link xlink:type="simple" xlink:href="../521/53521.xml">
Morris worm</link></animal>
</invertebrate>
</worm>
 -- targeted Unix systems.</p>

</sec>
<sec>
<st>
Firewalls</st>
<p>

A <link xlink:type="simple" xlink:href="../296/1362296.xml">
<it>firewall''</it></link> derives its name from physical construction methods in which <link xlink:type="simple" xlink:href="../350/11350.xml">
a reinforced, fire-resistant wall</link> is used to protect opposite sides of the wall from a fire occurring on one side of the wall.  In the same way, a <link xlink:type="simple" xlink:href="../296/1362296.xml">
network firewall</link> protects systems and networks from network threats which exist on the opposite side of the firewall.</p>

<ss1>
<st>
iptables</st>
<p>

<link xlink:type="simple" xlink:href="../682/971682.xml">
iptables</link> is the current user interface for interacting with <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../297/6097297.xml">
Linux</link></O>
 kernel <link xlink:type="simple" xlink:href="../802/1003802.xml">
netfilter</link> functionality.  It replaced <link xlink:type="simple" xlink:href="../319/2174319.xml">
ipchains</link>.  Other <family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../642/31642.xml">
Unix</link></family>
 like operating systems may provide their own native functionality and other <link xlink:type="simple" xlink:href="../758/18938758.xml">
open source</link> firewall products exist.  More detailed information about iptables is contained elsewhere.  A brief discussion is contained here in order to describe how iptables may be used to configure a Linux firewall.</p>
<p>

<link xlink:type="simple" xlink:href="../802/1003802.xml">
netfilter</link> provides a state-full packet filter which can be configured according to <generic wordnetid="107899976" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../613/243613.xml">
network interface</link></generic>
, <message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<link xlink:type="simple" xlink:href="../323/15323.xml">
protocol</link></rule>
</direction>
</protocol>
</message>
, <link xlink:type="simple" xlink:href="../921/14921.xml">
source and/or destination address</link>, <link>
source and/or destination port</link> and the state of the packet.  A network packet traverses several <it>chains</it> between the time it is received by a network interface and the time it is accepted by the host or forwarded to another host.  The common chains are <b>INPUT</b>, <b>OUTPUT</b> and <b>FORWARD</b>.  The <b>INPUT</b> <it>chain</it> is traversed for all packets as they are received by a network interface, regardless of whether they are to be accepted by the host or forwarded to another host.  The <b>OUTPUT</b> <it>chain</it> is traversed for all packets as they are transmitted by a network interface.  The <b>FORWARD</b> chain is traversed for those packets are being routed through the host from one network interface to another, such as is the case for a multi-homed system (a system with more than one physical network interface).</p>
<p>

Each of the built-in chains has a default <it>policy</it> which defines what action is taken for a packet which reaches the end of the chain.  Packet traversal ends when a <it>rule</it> matches the packet and has an action of <b>ACCEPT</b>, <b>DROP</b>, <b>REJECT</b> or <b>RETURN</b>.</p>
<p>

The simplest <link xlink:type="simple" xlink:href="../682/971682.xml">
iptables</link> firewall consists of <it>rules</it> for each desired service, followed by a rule which indicates that any packets which reach this rule are dropped.  A system which only permitted, for example, incoming email traffic would have a rule which accepted connections on the <message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<link xlink:type="simple" xlink:href="../675/27675.xml">
SMTP</link></rule>
</direction>
</protocol>
</message>
 port, and then dropped others.  A rule would be required which indicated that all established connections were also permitted so that outgoing connections would receive responses from other systems.</p>

<ss2>
<st>
INPUT chain</st>
<p>

The following example shows a simple packet filter for the <b>INPUT</b> chain for the above described example:</p>
<p>

Chain INPUT (policy DROP 0 packets, 0 bytes)
pkts bytes target     prot opt in     out     source               destination
0     0 ACCEPT     all  --  any    any     anywhere             anywhere            state ESTABLISHED
0     0 ACCEPT     tcp  --  any    any     anywhere             anywhere            tcp dpt:smtp
0     0 LOG        all  --  any    any     anywhere             anywhere            LOG level warning
0     0 DROP       all  --  any    any     anywhere             anywhere</p>
<p>

The addition of an explicit <b>DROP</b> action ensures that the packets are discarded should the default policy of the <b>INPUT</b> chain accidentally be changed to <b>ACCEPT</b>.</p>

</ss2>
<ss2>
<st>
OUTPUT chain</st>
<p>

There is less need for an <b>OUTPUT</b> chain and the default <it>policy</it> of the <b>OUTPUT</b> chain can safely be set to <b>ACCEPT</b>.  In some instances it may be desirable for a firewall to limit certain outgoing connections to a certain set of approved systems.  This is known as <link xlink:type="simple" xlink:href="../278/2994278.xml">
egress filtering</link> and may be used to prevent viruses within the firewall from escaping to other systems.  For example, it may be the policy of a network to limit outgoing email connections to a single authorized email servers as a way of combating <link xlink:type="simple" xlink:href="../847/459847.xml">
e-mail spam</link>.  This could be achieved by the following example:</p>
<p>

Chain OUTPUT (policy ACCEPT)
pkts bytes target     prot opt in     out     source               destination
0     0 DROP       tcp  --  any    any    !server               anywhere            tcp dpt:smtp</p>
<p>

There is no need to include any other rules in this example as the default policy for the <b>OUTPUT</b> chain is <b>ACCEPT</b>.  Note also that this rule assumes that the host which is acting as the firewall will not be sending email itself, such as to the email server.  This is a good assumption as typically a firewall system contains the minimal amount of system code needed to act as a firewall.</p>
<p>

A more restrictive <b>OUTPUT</b> chain would contain permissive (<b>ACCEPT</b>) entries for those services which may be accessed outside the firewall and then a restrictive (<b>DROP</b>) policy for the chain itself.</p>

</ss2>
</ss1>
</sec>
<sec>
<st>
General</st>
<p>

Secure network communication:
<list>
<entry level="1" type="bullet">

Layer 7: <link xlink:type="simple" xlink:href="../809/38809.xml">
GPG</link>/<standard wordnetid="107260623" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../080/23080.xml">
PGP</link></system_of_measurement>
</standard>
</entry>
<entry level="1" type="bullet">

Layer 4: <message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<standard wordnetid="107260623" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../813/187813.xml">
SSL/TLS</link></system_of_measurement>
</rule>
</direction>
</standard>
</protocol>
</message>
/<message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<standard wordnetid="107260623" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../814/28814.xml">
SSH</link></system_of_measurement>
</rule>
</direction>
</standard>
</protocol>
</message>
/<software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../552/172552.xml">
Stunnel</link></software>
/<message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<link xlink:type="simple" xlink:href="../737/593737.xml">
S/MIME</link></rule>
</direction>
</protocol>
</message>
</entry>
<entry level="1" type="bullet">

Layer 3: <link xlink:type="simple" xlink:href="../130/147130.xml">
VPN</link>, <message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<link xlink:type="simple" xlink:href="../342/43342.xml">
IPsec</link></rule>
</direction>
</protocol>
</message>
 </entry>
<entry level="1" type="bullet">

Layer 2: <message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<link xlink:type="simple" xlink:href="../698/186698.xml">
PPTP</link></rule>
</direction>
</protocol>
</message>
</entry>
</list>
</p>
<p>

Packet sniffing:
<list>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../533/170533.xml">
tcpdump</link>, <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../912/5736912.xml">
Wireshark</link></software>
</entry>
</list>
</p>
<p>

Attacks:
<list>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../676/144676.xml">
Man in the middle attack</link></entry>
<entry level="1" type="bullet">

land <link xlink:type="simple" xlink:href="../434/2181434.xml">
ping of death</link> xmas <link xlink:type="simple" xlink:href="../776/39776.xml">
Denial-of-service attack</link> et al.</entry>
</list>
</p>

</sec>
<sec>
<st>
Advanced</st>
<p>

<list>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../942/223942.xml">
rootkit</link>s, kernel modules, chkrootkit </entry>
<entry level="1" type="bullet">

exploit details, <link xlink:type="simple" xlink:href="../373/4373.xml">
buffer overflow</link>s, local vs remote</entry>
<entry level="1" type="bullet">

 <idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<property wordnetid="105849040" confidence="0.8">
<feature wordnetid="105849789" confidence="0.8">
<link xlink:type="simple" xlink:href="../908/55908.xml">
Security-Enhanced Linux</link></feature>
</property>
</concept>
</idea>
</entry>
</list>
</p>

</sec>
<sec>
<st>
Service details</st>
<p>

<list>
<entry level="1" type="bullet">

banners</entry>
<entry level="1" type="bullet">

<message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<link xlink:type="simple" xlink:href="../675/27675.xml">
SMTP</link></rule>
</direction>
</protocol>
</message>
 - <link xlink:type="simple" xlink:href="../847/459847.xml">
spam</link></entry>
<entry level="1" type="bullet">

<software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../600/48600.xml">
Sendmail</link></software>
 - banners help header version etc.</entry>
<entry level="1" type="bullet">

<message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<link xlink:type="simple" xlink:href="../339/8339.xml">
Domain Name System</link></rule>
</direction>
</protocol>
</message>
 - reverse mapping dnssec</entry>
</list>
</p>

</sec>
<sec>
<st>
External links</st>
<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.dsm.fordham.edu/~moniot/Classes/InternetWebF00/unix-security/unix-security.html">
<it>The Unix Security Model for web server administration''</it></weblink> Robert K. Moniot <link xlink:type="simple" xlink:href="../548/34548.xml">
2000</link></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.alw.nih.gov/Security/Docs/network-security.html">
<it>An Architectural Overview of UNIX Network Security''</it></weblink> Robert B. Reinhardt <link xlink:type="simple" xlink:href="../598/34598.xml">
1993</link></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://blog.anantshri.info/2007/08/27/how-to-change-root-password-in-debian/">
a simple guide to change password in debian</weblink> - a must read for new administrators if they wish to avoid crackers.</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://andercheran.aiind.upv.es/toni/unix/index_en.html">
Unix security papers</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://astalavista.com/media/directory06/uploads/unixsecurity.nrl.txt">
<it>UNIX System Administrator Responsibilities''</it></weblink></entry>
</list>
</p>

</sec>
<sec>
<st>
References</st>

<p>

<reflist>
<entry id="1">
 <cite id="Reference-Levi-2002" style="font-style:normal" class="book">Levi, Bozidar&#32;(2002). UNIX Administration: A Comprehensive Sourcebook for Effective Systems and Network Management.&#32;CRC Press,&#32;p207. ISBN 0849313511.</cite>&nbsp;</entry>
</reflist>

<it>Practical UNIX and Internet Security,</it> Simson Garfinkel and Gene Spafford, O'Reilly &amp; Associates, 2003. </p>

</sec>
</bdy>
</article>
