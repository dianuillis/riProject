<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 19:37:42[mciao0825] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<entity  confidence="0.9511911446218017" wordnetid="100001740">
<header>
<title>Goldwasser-Micali cryptosystem</title>
<id>2461162</id>
<revision>
<id>187251559</id>
<timestamp>2008-01-27T14:08:09Z</timestamp>
<contributor>
<username>Sadalmelik</username>
<id>1077066</id>
</contributor>
</revision>
<categories>
<category>Asymmetric-key cryptosystems</category>
<category>Electronic commerce</category>
</categories>
</header>
<bdy>
<p>

The <b>Goldwasser-Micali cryptosystem (GM)</b> is an <link xlink:type="simple" xlink:href="../222/24222.xml">
asymmetric key encryption algorithm</link> developed by <scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../178/842178.xml">
Shafi Goldwasser</link></scientist>
 and <scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../119/1385119.xml">
Silvio Micali</link></scientist>
 in <link xlink:type="simple" xlink:href="../756/34756.xml">
1982</link>.  GM has the distinction of being the first <link xlink:type="simple" xlink:href="../442/1051442.xml">
probabilistic</link> public-key encryption scheme which is <link xlink:type="simple" xlink:href="../348/1182348.xml">
provably secure</link> under standard cryptographic assumptions.  However, it is not an efficient cryptosystem, as ciphertexts may be several hundred times larger than the initial plaintext.  To prove the security properties of the cryptosystem, Goldwasser and Micali proposed the widely-used definition of <link xlink:type="simple" xlink:href="../585/960585.xml">
semantic security</link>.</p>

<sec>
<st>
Basis</st>
<p>

The GM cryptosystem is <link xlink:type="simple" xlink:href="../585/960585.xml">
semantically secure</link> based on the assumed intractability of the <link xlink:type="simple" xlink:href="../041/1183041.xml">
quadratic residuosity problem</link> modulo a composite <it>N</it> = <it>pq</it> where <it>p, q</it> are large <link xlink:type="simple" xlink:href="../666/23666.xml">
primes</link>.  This assumption states that given (<it>x</it>, <it>N</it>) it is difficult to determine whether <it>x</it> is a quadratic residue modulo <it>N</it> (i.e., <it>x</it> = <it>y</it>2 mod <it>N</it> for some <it>y</it>), when the <link xlink:type="simple" xlink:href="../313/97313.xml">
Jacobi symbol</link> for <it>x</it> is +1.  The quadratic residue problem is easily solved given the factorization of <it>N</it>, while new quadratic residues may be generated by any party, even without knowledge of this factorization.  The GM cryptosystem leverages this asymmetry by encrypting individual plaintext bits as either random quadratic residues or non-residues modulo <it>N</it>, all with quadratic residue symbol +1.  Recipients use the factorization of <it>N</it> as a <link xlink:type="simple" xlink:href="../039/53039.xml">
secret key</link>, and decrypt the message by testing the quadratic residuosity of the received ciphertext values.  </p>
<p>

Because Goldwasser-Micali  produces a value of size approximately <it>|N|</it> to encrypt every single bit of a plaintext, GM encryption results in substantial <link xlink:type="simple" xlink:href="../473/2467473.xml">
ciphertext expansion</link>.  To prevent <link xlink:type="simple" xlink:href="../341/82341.xml">
factorization</link> attacks, it is recommended that <it>|N|</it> be several hundred bits or more.  Thus, the scheme serves mainly as a proof of concept, and more efficient provably-secure schemes such as <link xlink:type="simple" xlink:href="../458/59458.xml">
Elgamal</link> have been developed since.</p>
<p>

Because encryption is performed using a probabilistic algorithm, a given plaintext may produce very different ciphertexts each time it is encrypted.  This has significant advantages, as it prevents an adversary from recognizing intercepted messages by comparing them to a dictionary of known ciphertexts.</p>

</sec>
<sec>
<st>
Scheme definition</st>

<p>

Goldwasser-Micali consists of three algorithms: a probabilistic key generation algorithm which produces a public and a private key, a probabilistic encryption algorithm, and a deterministic decryption algorithm.</p>
<p>

The scheme relies on deciding whether a given value <it>x</it> is a square mod <it>N</it>, given the factorization (<it>p</it>, <it>q</it>) of <it>N</it>.  This can be accomplished using the following procedure:</p>
<p>

<list>
<entry level="1" type="number">

Compute <it>xp</it> = <it>x</it> mod <it>p</it>, <it>xq</it> = <it>x</it> mod <it>q</it>.</entry>
<entry level="1" type="number">

If <math>x_p^{(p-1)/2} \equiv 1\pmod{p}</math> and <math>x_q^{(q-1)/2} \equiv 1\pmod{q}</math> , then <it>x</it> is a quadratic residue mod <it>N</it>.</entry>
</list>
</p>

<ss1>
<st>
Key generation</st>

<p>

The modulus used in GM encryption is generated in the same manner as in the <link xlink:type="simple" xlink:href="../385/25385.xml">
RSA</link> cryptosystem.  (See <link xlink:type="simple" xlink:href="../385/25385.xml">
RSA</link>, key generation for details.)</p>
<p>

<list>
<entry level="1" type="number">

Alice generates two distinct large <link xlink:type="simple" xlink:href="../666/23666.xml">
prime number</link>s <it>p</it> and <it>q</it>, randomly and independently of each other. </entry>
<entry level="1" type="number">

Alice computes <it>N</it> = <it>p q</it>.</entry>
<entry level="1" type="number">

She then finds some non-residue <it>x</it> such that the <link xlink:type="simple" xlink:href="../567/18567.xml">
Legendre symbol</link>s satisfy <math>\left(\frac{x}{p}\right)=\left(\frac{x}{q}\right)=-1</math> and hence the <link xlink:type="simple" xlink:href="../313/97313.xml">
Jacobi symbol</link> <math>\left(\frac{x}{N}\right)</math> is +1. The value <it>x</it> can for example be found by selecting random values and testing the two Legendre symbols.  If (<it>p</it>, <it>q</it>) = 3 mod 4 (i.e., <it>N</it> is a <series wordnetid="108457976" confidence="0.8">
<arrangement wordnetid="107938773" confidence="0.8">
<sequence wordnetid="108459252" confidence="0.8">
<ordering wordnetid="108456993" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<link xlink:type="simple" xlink:href="../352/2218352.xml">
Blum integer</link></group>
</ordering>
</sequence>
</arrangement>
</series>
), then the value <it>N</it>-1 is guaranteed to have the required property.</entry>
</list>
</p>
<p>

The <it>public key</it> consists of <it>(x, N)</it>.  The secret key is the factorization <it>(p, q)</it>.</p>

</ss1>
<ss1>
<st>
 Message encryption </st>

<p>

Suppose Bob wishes to send a message <it>m</it> to Alice:</p>
<p>

<list>
<entry level="1" type="number">

Bob first encodes <it>m</it> as a string of bits (<it>m</it>1, ..., <it>mn</it>).</entry>
<entry level="1" type="number">

For every bit <it>mi</it>, Bob generates a random value <it>y</it> less than <it>N</it>.  He outputs the value <math>c_i = y^2 x^{m_i}</math> mod <it>N</it>.</entry>
</list>
</p>
<p>

Bob sends the ciphertext (<it>c</it>1, ... , <it>cn</it>).</p>

</ss1>
<ss1>
<st>
 Message decryption </st>

<p>

Alice receives (<it>c</it>1, ... , <it>cn</it>).  She can recover <it>m</it> using the following procedure:</p>
<p>

<list>
<entry level="1" type="number">

For each <it>i</it>, using the prime factorization (<it>p</it>, <it>q</it>), Alice determines whether the value <it>ci</it> is a quadratic residue; if so, <it>mi</it> = 0, otherwise <it>mi</it> = 1.</entry>
</list>
</p>
<p>

Alice outputs the message <it>m</it> = (<it>m</it>1, ... , <it>mn</it>).</p>

</ss1>
<ss1>
<st>
 Security properties </st>

<p>

There is a simple <link xlink:type="simple" xlink:href="../067/848067.xml">
reduction</link> from breaking this cryptosystem to the problem of determining whether a random value modulo <it>N</it> with Jacobi symbol <it>+1</it> is a quadratic residue.  If an algorithm <it>A</it> breaks the cryptosystem,
then to determine if a given value <it>x</it> is a quadratic residue modulo <it>N</it>, we test <it>A</it> to see if it can break the cryptosystem using (<it>x</it>,<it>N</it>) as a public key.  If <it>x</it> is a non-residue, then <it>A</it> should work properly.  However, if <it>x</it> is a residue, then every "ciphertext" will simply be a random quadratic residue, so
<it>A</it> cannot be correct more than half of the time.  Furthermore, this problem is <link>
random self-reducible</link>, which ensures that for a given <it>N</it>, every public key is just as secure as every other public key.  </p>
<p>

The GM cryptosystem has <link xlink:type="simple" xlink:href="../073/4939073.xml">
homomorphic properties</link>, in the sense that if <it>c</it>0, <it>c</it>1 are the encryptions of bits <it>m</it>0, <it>m</it>1, then <it>c</it>0<it>c</it>1 mod <it>N</it> will be an encryption of <math>m_0 \oplus m_1</math>.  For this reason, the GM cryptosystem is sometimes used in more complex cryptographic primitives.</p>

</ss1>
</sec>
<sec>
<st>
Notes and references</st>

<p>

<list>
<entry level="1" type="bullet">

 Shafi Goldwasser and Silvio Micali.  Probabilistic Encryption.  Journal of Computer and System Sciences (JCSS), 28(2):270-299, April 1984.  Preliminary version in: 14th Annual ACM Symposium on Theory of Computing (STOC)</entry>
</list>

</p>
</sec>
<sec>
<st>
See also</st>
<p>

<list>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../878/3098878.xml">
Blum-Goldwasser cryptosystem</link></entry>
</list>


</p>

</sec>
</bdy>
</entity>
</article>
