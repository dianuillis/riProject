<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 15:32:51[mciao0825] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<entity  confidence="0.9511911446218017" wordnetid="100001740">
<header>
<title>RSA</title>
<id>25385</id>
<revision>
<id>244495112</id>
<timestamp>2008-10-11T02:17:12Z</timestamp>
<contributor>
<username>Accurrent</username>
<id>301404</id>
</contributor>
</revision>
<categories>
<category>Articles with Alice and Bob explanations</category>
<category>Wikipedia articles in need of updating</category>
<category>Asymmetric-key cryptosystems</category>
<category>Electronic commerce</category>
</categories>
</header>
<bdy>

RSA is also the IOC country code for the <link xlink:type="simple" xlink:href="../221/17416221.xml">
Republic of South Africa</link>.<p>

In <link xlink:type="simple" xlink:href="../432/18934432.xml">
cryptography</link>, <b>RSA</b> is an <link xlink:type="simple" xlink:href="../775/775.xml">
algorithm</link> for <link xlink:type="simple" xlink:href="../222/24222.xml">
public-key cryptography</link>.  It is the first algorithm known to be suitable for <link xlink:type="simple" xlink:href="../644/59644.xml">
signing</link> as well as encryption, and one of the first great advances in public key cryptography. RSA is widely used in <link xlink:type="simple" xlink:href="../611/9611.xml">
electronic commerce</link> protocols, and is believed to be secure given sufficiently long keys and the use of up-to-date implementations.</p>

<sec>
<st>
History</st>
<p>

The algorithm was publicly described in 1977 by <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../057/68057.xml">
Ron Rivest</link></scientist>
</person>
, <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../314/57314.xml">
Adi Shamir</link></scientist>
</person>
, and <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../886/249886.xml">
Leonard Adleman</link></scientist>
</person>
 at <university wordnetid="108286163" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../879/18879.xml">
MIT</link></university>
; the letters <b>RSA</b> are the initials of their surnames, listed in the same order as on the paper.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref></p>
<p>

<physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<cryptanalyst wordnetid="109981540" confidence="0.8">
<companion wordnetid="109945905" confidence="0.8">
<intellectual wordnetid="109621545" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<friend wordnetid="110112591" confidence="0.8">
<decoder wordnetid="109995398" confidence="0.8">
<link xlink:type="simple" xlink:href="../040/578040.xml">
Clifford Cocks</link></decoder>
</friend>
</causal_agent>
</intellectual>
</companion>
</cryptanalyst>
</person>
</physical_entity>
, a British <link xlink:type="simple" xlink:href="../902/18902.xml">
mathematician</link> working for the <autocracy wordnetid="108361001" confidence="0.8">
<system wordnetid="108435388" confidence="0.8">
<social_group wordnetid="107950920" confidence="0.8">
<political_orientation wordnetid="106212839" confidence="0.8">
<monarchy wordnetid="108363812" confidence="0.8">
<state wordnetid="108168978" confidence="0.8">
<political_unit wordnetid="108359949" confidence="0.8">
<political_system wordnetid="108367880" confidence="0.8">
<economy wordnetid="108366753" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<democracy wordnetid="106217103" confidence="0.8">
<link xlink:type="simple" xlink:href="../717/31717.xml">
UK</link></democracy>
</group>
</economy>
</political_system>
</political_unit>
</state>
</monarchy>
</political_orientation>
</social_group>
</system>
</autocracy>
 intelligence agency <agency wordnetid="108337324" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../884/12884.xml">
GCHQ</link></agency>
, described an equivalent system in an internal document in 1973, but given the relatively expensive computers needed to implement it at the time, it was mostly considered a curiosity and, as far as is publicly known, was never deployed. His discovery, however, was not revealed until 1997 due to its top-secret classification, and Rivest, Shamir, and Adleman devised RSA independently of Cocks's work.</p>
<p>

<university wordnetid="108286163" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../879/18879.xml">
MIT</link></university>
 was granted <weblink xlink:type="simple" xlink:href="http://v3.espacenet.com/textdoc?DB=EPODOC&amp;IDX=US4405829">
US&nbsp;patent&nbsp;4405829</weblink> for a "Cryptographic communications system and method" that used the algorithm in 1983. The patent would have expired in <link xlink:type="simple" xlink:href="../163/36163.xml">
2003</link>, but was released to the public domain by RSA on <link xlink:type="simple" xlink:href="../532/27532.xml">
21 September</link> <link xlink:type="simple" xlink:href="../548/34548.xml">
2000</link>. Since a paper describing the algorithm had been published in August 1977,<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref> prior to the December 1977 <link xlink:type="simple" xlink:href="../953/3800953.xml">
filing date</link> of the <link xlink:type="simple" xlink:href="../266/4542266.xml">
patent application</link>, regulations in much of the rest of the world precluded <link xlink:type="simple" xlink:href="../273/23273.xml">
patent</link>s elsewhere and only the <body wordnetid="107965085" confidence="0.8">
<social_group wordnetid="107950920" confidence="0.8">
<political_orientation wordnetid="106212839" confidence="0.8">
<colony wordnetid="108374049" confidence="0.8">
<state wordnetid="108168978" confidence="0.8">
<political_unit wordnetid="108359949" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<democracy wordnetid="106217103" confidence="0.8">
<link xlink:type="simple" xlink:href="../750/3434750.xml">
US</link></democracy>
</group>
</political_unit>
</state>
</colony>
</political_orientation>
</social_group>
</body>
 patent was granted. Had Cocks' work been publicly known, a patent in the US might not have been possible either.</p>

</sec>
<sec>
<st>
 Operation </st>
<p>

RSA involves a public <link xlink:type="simple" xlink:href="../039/53039.xml">
key</link> and a private key.  The public key can be known to everyone and is used for encrypting messages.  Messages encrypted with the public key can only be decrypted using the private key. The keys for the RSA algorithm are generated the following way:
<list>
<entry level="1" type="number">

Choose two distinct large random <link xlink:type="simple" xlink:href="../666/23666.xml">
prime number</link>s <math>p</math> and <math>q</math></entry>
<entry level="1" type="number">

Compute <math>n = pq\,</math></entry>
<entry level="2" type="bullet">

<math>n\,</math> is used as the <sound_property wordnetid="104983122" confidence="0.8">
<ring wordnetid="104981658" confidence="0.8">
<sound wordnetid="104981139" confidence="0.8">
<property wordnetid="104916342" confidence="0.8">
<link xlink:type="simple" xlink:href="../087/20087.xml">
modulus</link></property>
</sound>
</ring>
</sound_property>
 for both the public and private keys</entry>
<entry level="1" type="number">

Compute the <link xlink:type="simple" xlink:href="../452/53452.xml">
totient</link>:  <math>\varphi(n) = (p-1)(q-1) \,</math>.</entry>
<entry level="1" type="number">

Choose an integer <math>e</math> such that <math>1 &amp;lt; e &amp;lt; \varphi(n)</math>, and <math>e</math> and <math>\varphi (n)</math> share no factors other than <math>1</math> (i.e. <math>e</math> and <math>\varphi (n)</math> are <link xlink:type="simple" xlink:href="../556/6556.xml">
coprime</link>)</entry>
<entry level="2" type="bullet">

<math>e</math> is released as the public key exponent</entry>
<entry level="1" type="number">

Compute <math>d</math> to satisfy the <sound_property wordnetid="104983122" confidence="0.8">
<ring wordnetid="104981658" confidence="0.8">
<sound wordnetid="104981139" confidence="0.8">
<property wordnetid="104916342" confidence="0.8">
<link xlink:type="simple" xlink:href="../087/20087.xml#xpointer(//*[./st=%22The+congruence+relation%22])">
congruence relation</link></property>
</sound>
</ring>
</sound_property>
 <math>d e \equiv  1\pmod{\varphi(n)}</math>; i.e. <math>de = 1 + k\varphi(n)</math> for some integer <math>k</math>.</entry>
<entry level="2" type="bullet">

<math>d</math> is kept as the private key exponent </entry>
</list>
</p>
<p>

Notes on the above steps:
<list>
<entry level="1" type="bullet">

 Step 1: Numbers can be <link xlink:type="simple" xlink:href="../751/183751.xml#xpointer(//*[./st=%22Probabilistic_tests%22])">
probabilistically tested</link> for primality.</entry>
<entry level="1" type="bullet">

 Step 3: changed in <standard wordnetid="107260623" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../008/16706008.xml">
PKCS#1 v2.0</link></system_of_measurement>
</standard>
 to <math>\lambda(n) = {\rm lcm}(p-1, q-1) \,</math>, where lcm is the <link xlink:type="simple" xlink:href="../961/17961.xml">
least common multiple</link>, instead of <math>\varphi(n) = (p-1)(q-1) \,</math>.</entry>
<entry level="1" type="bullet">

 Step 4: A popular choice for the public exponents is <math>e\,</math> = 216 + 1 = <link xlink:type="simple" xlink:href="../219/8087219.xml#xpointer(//*[./st=%22In+mathematics%22])">
65537</link>. Some applications choose smaller values such as <math>e\,</math> = 3, 5, 17 or 257 instead. This is done to make encryption and signature verification faster on small devices like smart cards but small public exponents can lead to greater security risks.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%222%22])">2</ref></entry>
<entry level="1" type="bullet">

 Steps 4 and 5 can be performed with the <link xlink:type="simple" xlink:href="../438/99438.xml">
extended Euclidean algorithm</link>; see <link xlink:type="simple" xlink:href="../087/20087.xml">
modular arithmetic</link>.</entry>
</list>
</p>
<p>

The <b>public key</b> consists of the modulus <math>n\,</math> and the public (or encryption) exponent <math>e\,</math>. The <b>private key</b> consists of the modulus <math>n\,</math> and the private (or decryption) exponent <math>d\,</math> which must be kept secret.</p>
<p>

<list>
<entry level="1" type="bullet">

For efficiency a different form of the <b>private key</b> can be stored:</entry>
<entry level="2" type="bullet">

 <math>p\,</math> and <math>q\,</math>: the primes from the key generation,</entry>
<entry level="2" type="bullet">

 <math>d\mod (p - 1)\,</math> and <math>d\mod(q - 1)\,</math>,</entry>
<entry level="2" type="bullet">

 <math>q^{-1} \mod(p)\,</math>.</entry>
<entry level="1" type="bullet">

All parts of the private key must be kept secret in this form. <math>p\,</math> and <math>q\,</math> are sensitive since they are the factors of <math>n\,</math>, and allow computation of <math>d\,</math> given <math>e\,</math>.  If <math>p\,</math> and <math>q\,</math> are not stored in this form of the private key then they are securely deleted along with other intermediate values from key generation.</entry>
<entry level="1" type="bullet">

Although this form allows faster decryption and signing by using the <link>
Chinese Remainder Theorem</link>, it is considerably less secure since it enables <link xlink:type="simple" xlink:href="../678/667678.xml">
side channel attack</link>s. This is a particular problem if implemented on <link xlink:type="simple" xlink:href="../957/59957.xml">
smart cards</link>, which benefit most from the improved efficiency. (Start with <math>y = x^e mod n</math> and let the card decrypt that. So it computes <math>y^d \pmod{p}</math> or <math>y^d \pmod{q}</math> whose results give some value <math>z</math>. Now, induce an error in one of the computations. Then <math>\gcd(z-x,n)</math> will reveal <math>p</math> or <math>q</math>.)</entry>
</list>
</p>

<ss1>
<st>
 Messages </st>

<ss2>
<st>
Encryption:</st>
<p>

<link xlink:type="simple" xlink:href="../079/679079.xml">
Alice</link> transmits her public key <math>(n,e)\,</math> to <link xlink:type="simple" xlink:href="../079/679079.xml">
Bob</link> and keeps the private key secret. Bob then wishes to send message <b>M</b> to Alice.</p>
<p>

He first turns <b>M</b> into a number <math>m\,</math>  <math>n\,</math> by using an agreed-upon reversible protocol known as a <link xlink:type="simple" xlink:href="#xpointer(//*[./st=%22Padding+schemes%22])">
padding scheme</link>. He then computes the ciphertext <math>c\,</math> corresponding to:</p>
<p>

<indent level="1">

 <math> c = m^e \mod{n}</math>
</indent>

This can be done quickly using the method of <link xlink:type="simple" xlink:href="../237/10237.xml">
exponentiation by squaring</link>. Bob then transmits <math>c\,</math> to Alice.</p>

</ss2>
<ss2>
<st>
 Decryption: </st>

<p>

Alice can recover <math>m\,</math> from <math>c\,</math> by using her private key exponent <math>d\,</math> by the following computation:</p>
<p>

<indent level="1">

 <math>m = c^d \mod{n}.</math>
</indent>

Given <math>m\,</math>, she can recover the original message <b>M</b>.</p>
<p>

The above decryption procedure works because first</p>
<p>

<indent level="1">

 <math>c^d \equiv (m^e)^d \equiv m^{ed}\pmod{n}</math>.
</indent>

Now, <math>e d \equiv 1\pmod{(p - 1)(q - 1)}</math>, and hence</p>
<p>

<indent level="1">

 <math>e d \equiv 1\pmod{p - 1}\,</math> and 
</indent>
: <math>e d \equiv 1\pmod{q - 1}\,</math></p>
<p>

which can also be written as</p>
<p>

<indent level="1">

 <math>e d = k (p - 1) + 1\,</math> and
</indent>
: <math>e d = h (q - 1) + 1\,</math></p>
<p>

for proper values of <math>k\,</math> and <math>h\,</math>. If <math>m\,</math> is not a multiple of <math>p\,</math> then <math>m\,</math> and <math>p\,</math> are coprime because <math>p\,</math> is prime; so by <statement wordnetid="106722453" confidence="0.8">
<message wordnetid="106598915" confidence="0.8">
<theorem wordnetid="106752293" confidence="0.8">
<proposition wordnetid="106750804" confidence="0.8">
<link xlink:type="simple" xlink:href="../453/53453.xml">
Fermat's little theorem</link></proposition>
</theorem>
</message>
</statement>
</p>
<p>

<indent level="1">

 <math>m^{(p-1)} \equiv 1 \pmod{p}</math>
</indent>

and therefore, using the first expression for <math>e d\,</math>,</p>
<p>

<indent level="1">

 <math>m^{ed} = m^{k (p-1) + 1} = (m^{p-1})^k m \equiv {1}^k m = m \pmod{p}\,</math>.
</indent>

If instead <math>m\,</math> is a multiple of <math>p\,</math>, then</p>
<p>

<indent level="1">

 <math>m^{ed} \equiv 0^{ed} = 0 \equiv m \pmod{p}</math>.
</indent>

Using the second expression for <math>e d\,</math>, we similarly conclude that</p>
<p>

<indent level="1">

 <math>m^{ed} \equiv m \pmod{q}\,</math>.
</indent>

Since <math>p\,</math> and <math>q\,</math> are distinct prime numbers, they are relatively prime to each other, so the fact that both primes divide <math>m^{ed} - m </math> implies their product <math>pq\,</math> divides <math>m^{ed} - m </math>, which means </p>
<p>

<indent level="1">

 <math>m^{ed} \equiv m \pmod{pq}</math>.
</indent>

Thus,</p>
<p>

<indent level="1">

 <math>c^d \equiv m \pmod{n}</math>.
</indent>

</p>
</ss2>
</ss1>
<ss1>
<st>
A worked example</st>

<p>

Here is an example of RSA encryption and decryption.  The parameters used here are  artificially small, but one can also .</p>
<p>

<list>
<entry level="1" type="number">

Choose two prime numbers</entry>
<entry level="2" type="indent">

<math>p = 61</math> and <math>q=53</math></entry>
<entry level="1" type="number">

Compute <math>n = p q \,</math></entry>
<entry level="2" type="indent">

<math>n=61*53=3233</math></entry>
<entry level="1" type="number">

Compute the <link xlink:type="simple" xlink:href="../452/53452.xml">
totient</link> <math>\varphi(n) = (p-1)(q-1) \,</math></entry>
<entry level="2" type="indent">

<math>\varphi(n) = (61 - 1)(53 - 1) = 3120\,</math></entry>
<entry level="1" type="number">

Choose <math>e&amp;gt;1</math> coprime to 3120</entry>
<entry level="2" type="indent">

<math>e=17</math></entry>
<entry level="1" type="number">

Compute <math>d\,</math> such that <math>d e \equiv 1\pmod{\varphi(n)}\,</math> e.g., by computing the <link xlink:type="simple" xlink:href="../338/9815338.xml">
modular multiplicative inverse</link> of <it>e</it> modulo <math>\varphi(n)\,</math>:</entry>
<entry level="2" type="indent">

<math>d=2753</math></entry>
<entry level="2" type="indent">

17 * 2753 = 46801 = 1 + 15 * 3120.</entry>
</list>
</p>
<p>

The <b>public key</b> is (<math>n=3233</math>, <math>e=17</math>).  For a padded message <math>m\,</math> the encryption function is:</p>
<p>

<indent level="1">

<math>c = m^e\mod {n}  = m^{17} \mod {3233}.</math>
</indent>

The <b>private key</b> is (<math>n=3233</math>, <math>d=2753</math>). The decryption function is:</p>
<p>

<indent level="1">

<math>m = c^d\mod {n}  = c^{2753} \mod {3233}.</math>
</indent>

For example, to encrypt <math>m=123</math>, we calculate</p>
<p>

<indent level="1">

<math>c = 123^{17}\mod {3233} = 855.</math>
</indent>

To decrypt <math>c = 855</math>, we calculate</p>
<p>

<indent level="1">

<math>m = 855^{2753}\mod {3233} = 123</math>.
</indent>

Both of these calculations can be computed efficiently using the <link xlink:type="simple" xlink:href="../237/10237.xml">
square-and-multiply algorithm</link> for <link xlink:type="simple" xlink:href="../032/903032.xml">
modular exponentiation</link>.</p>

</ss1>
<ss1>
<st>
Padding schemes</st>

<p>

When used in practice, RSA is generally combined with some <link xlink:type="simple" xlink:href="../505/592505.xml">
padding scheme</link>. The goal of the padding scheme is to prevent a number of attacks that potentially work against RSA without padding:</p>
<p>

<list>
<entry level="1" type="bullet">

When encrypting with low encryption exponents (e.g., <it>e</it> = 3) and small values of the <it>m</it>, (i.e. <it>mn</it>1/e) the result of <math>m^e</math> is strictly less than the modulus <it>n</it>.  In this case, ciphertexts can be easily decrypted by taking the <it>e</it>th root of the ciphertext over the integers. </entry>
<entry level="1" type="bullet">

If the same clear text message is sent to <it>e</it> or more recipients in an encrypted way, and the receivers share the same exponent <it>e</it>, but different <it>p</it>, <it>q</it>, and <it>n</it>, then it is easy to decrypt the original clear text message via the <statement wordnetid="106722453" confidence="0.8">
<message wordnetid="106598915" confidence="0.8">
<theorem wordnetid="106752293" confidence="0.8">
<proposition wordnetid="106750804" confidence="0.8">
<link xlink:type="simple" xlink:href="../713/7713.xml">
Chinese remainder theorem</link></proposition>
</theorem>
</message>
</statement>
. <link>
Johan Håstad</link> noticed that this attack is possible even if the cleartexts are not equal, but the attacker knows a linear relation between them <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%223%22])">3</ref>. This attack was later improved by <peer wordnetid="109626238" confidence="0.8">
<physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<cryptanalyst wordnetid="109981540" confidence="0.8">
<intellectual wordnetid="109621545" confidence="0.8">
<colleague wordnetid="109935990" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<associate wordnetid="109816771" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<employee wordnetid="110053808" confidence="0.8">
<mathematician wordnetid="110301261" confidence="0.8">
<decoder wordnetid="109995398" confidence="0.8">
<link xlink:type="simple" xlink:href="../090/540090.xml">
Don Coppersmith</link></decoder>
</mathematician>
</employee>
</causal_agent>
</worker>
</associate>
</scientist>
</colleague>
</intellectual>
</cryptanalyst>
</person>
</physical_entity>
</peer>
 <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%224%22])">4</ref>.</entry>
<entry level="1" type="bullet">

Because RSA encryption is a <link xlink:type="simple" xlink:href="../951/665951.xml">
deterministic encryption algorithm</link> – i.e., has no random component – an attacker can successfully launch a <link xlink:type="simple" xlink:href="../852/63852.xml">
chosen plaintext attack</link> against the cryptosystem, by encrypting likely plaintexts under the public key and test if they are equal to the ciphertext. A cryptosystem is called <link xlink:type="simple" xlink:href="../585/960585.xml">
semantically secure</link> if an attacker cannot distinguish two encryptions from each other even if the attacker knows (or has chosen) the corresponding plaintexts. As described above, RSA without padding is not semantically secure.</entry>
<entry level="1" type="bullet">

RSA has the property that the product of two ciphertexts is equal to the encryption of the product of the respective plaintexts. That is <math>m_1^em_2^e\equiv (m_1m_2)^e\pmod{n}.</math> Because of this multiplicative property a <link xlink:type="simple" xlink:href="../586/103586.xml">
chosen-ciphertext attack</link> is possible. E.g. an attacker, who wants to know the decryption of a ciphertext <it>c</it>=<it>m</it>e mod <it>n</it> may ask the holder of the secret key to decrypt an unsuspicious-looking ciphertext <math>c' = c r^e\bmod n</math> for some value <it>r</it> chosen by the attacker. Because of the multiplicative property <math>c'</math> is the encryption of <math>mr \bmod n</math>. Hence, if the attacker is successful with the attack, he will learn <math>mr \bmod n</math> from which he can derive the message <it>m</it> by multiplying <it>mr</it> with the modular inverse of <it>r</it> modulo <it>n</it>.</entry>
</list>
</p>
<p>

To avoid these problems, practical RSA implementations typically embed some form of structured, randomized <link xlink:type="simple" xlink:href="../505/592505.xml">
padding</link> into the value <it>m</it> before encrypting it.  This padding ensures that <it>m</it> does not fall into the range of insecure plaintexts, and that a given message, once padded, will encrypt to one of a large number of different possible ciphertexts. </p>
<p>

Standards such as <standard wordnetid="107260623" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../008/16706008.xml">
PKCS#1</link></system_of_measurement>
</standard>
 have been carefully designed to securely pad messages prior to RSA encryption.  Because these schemes pad the plaintext <it>m</it> with some number of additional bits, the size of the un-padded message <it>M</it> must be somewhat smaller.  RSA padding schemes must be carefully designed so as to prevent sophisticated attacks which may be facilitated by a predictable message structure.  Early versions of the PKCS#1 standard (up to version 1.5) used a construction that turned RSA into a semantically secure encryption scheme.  This version was later found vulnerable to a practical <link xlink:type="simple" xlink:href="../533/426533.xml">
adaptive chosen ciphertext attack</link>.  Later versions of the standard include <link xlink:type="simple" xlink:href="../249/1579249.xml">
Optimal Asymmetric Encryption Padding</link> (OAEP), which prevents these attacks.  The PKCS#1 standard also incorporates processing schemes designed to provide additional security for RSA signatures, e.g., the Probabilistic Signature Scheme for RSA (<link xlink:type="simple" xlink:href="../008/16706008.xml">
RSA-PSS</link>).</p>

</ss1>
<ss1>
<st>
Signing messages</st>
<p>

Suppose Alice uses Bob's public key to send him an encrypted message.  In the message, she can claim to be Alice but Bob has no way of verifying that the message was actually from Alice since anyone can use Bob's public key to send him encrypted messages.  So, in order to verify the origin of a message, RSA can also be used to <link xlink:type="simple" xlink:href="../644/59644.xml">
sign</link> a message.</p>
<p>

Suppose Alice wishes to send a signed message to Bob. She can use her own private key to do so. She produces a <link xlink:type="simple" xlink:href="../526/439526.xml">
hash value</link> of the message, raises it to the power of <it>d</it> mod <it>n</it> (as she does when decrypting a message), and attaches it as a "signature" to the message. When Bob receives the signed message, he uses the same hash algorithm in conjunction with Alice's public key. He raises the signature to the power of <it>e</it> mod <it>n</it> (as he does when encrypting a message), and compares the resulting hash value with the message's actual hash value. If the two agree, he knows that the author of the message was in possession of Alice's secret key, and that the message has not been tampered with since.</p>
<p>

Note that secure padding schemes such as <link xlink:type="simple" xlink:href="../008/16706008.xml">
RSA-PSS</link> are as essential for the security of message signing as they are for message encryption, and that the same key should never be used for both encryption and signing purposes.</p>

</ss1>
</sec>
<sec>
<st>
Security</st>

<p>

<table class="metadata plainlinks ambox ">
<row>
<col>

ambox-content" style=""</col>
</row>
<row>
<col class="mbox-image"><p>

<image width="44px" src="Ambox_outdated_serious.svg">
</image>
</p>
</col>
<col style="" class="mbox-text">
<b>This article or section needs to be updated.</b>
Please update the article to reflect recent events / newly available information, and remove this template when finished.</col>
</row>
</table>

</p>
<p>

<indent level="1">

<it>See also: <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../851/498851.xml">
RSA Factoring Challenge</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
&nbsp;and <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../972/10892972.xml">
Integer factorization records</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</it>
</indent>
The security of the RSA cryptosystem is based on two mathematical problems: the problem of <link xlink:type="simple" xlink:href="../491/15491.xml">
factoring large numbers</link> and the <link xlink:type="simple" xlink:href="../741/1544741.xml">
RSA problem</link>.  Full decryption of an RSA ciphertext is thought to be infeasible on the assumption that both of these problems are hard, i.e., no efficient algorithm exists for solving them.  Providing security against <it>partial</it> decryption may require the addition of a secure <link xlink:type="simple" xlink:href="../505/592505.xml">
padding scheme</link>.</p>
<p>

The <link xlink:type="simple" xlink:href="../741/1544741.xml">
RSA problem</link> is defined as the task of taking <it>e</it>th roots modulo a composite <it>n</it>: recovering a value <it>m</it> such that <it>c=me</it> mod n, where (<it>n</it>, <it>e</it>) is an RSA public key and <it>c</it> is an RSA ciphertext.  Currently the most promising approach to solving the RSA problem is to factor the modulus <it>n</it>.  With the ability to recover prime factors, an attacker can compute the secret exponent <it>d</it> from a public key (<it>n</it>, <it>e</it>), then decrypt <it>c</it> using the standard procedure.  To accomplish this, an attacker factors <it>n</it> into <it>p</it> and <it>q</it>, and computes (<it>p</it>-1)(<it>q</it>-1) which allows the determination of <it>d</it> from <it>e</it>.  No polynomial-time method for factoring large integers on a classical computer has yet been found, but it has not been proven that none exists.  See <link xlink:type="simple" xlink:href="../491/15491.xml">
integer factorization</link> for a discussion of this problem.  </p>
<p>

<link xlink:type="simple" xlink:href="../251/891251.xml">
As of 2005</link>, the largest number factored by a general-purpose factoring algorithm was 663 bits long (see <link>
RSA-200</link>), using a state-of-the-art distributed implementation.  RSA keys are typically 1024&ndash;2048 bits long. Some experts believe that 1024-bit keys may become breakable in the near term (though this is disputed); few see any way that 4096-bit keys could be broken in the foreseeable future.  Therefore, it is generally presumed that RSA is secure if <it>n</it> is sufficiently large.  If <it>n</it> is 256 <link xlink:type="simple" xlink:href="../364/3364.xml">
bit</link>s or shorter, it can be factored in a few hours on a <link xlink:type="simple" xlink:href="../137/18457137.xml">
personal computer</link>, using software already freely available. Keys of 512 bits (or less) have been shown to be practically breakable in <link xlink:type="simple" xlink:href="../553/34553.xml">
1999</link> when <link>
RSA-155</link> was factored by using several hundred computers. A theoretical hardware device named <link xlink:type="simple" xlink:href="../814/727814.xml">
TWIRL</link> and described by Shamir and Tromer in 2003 called into question the security of 1024 bit keys.  It is currently recommended that <it>n</it> be at least 2048 bits long.</p>
<p>

In 1994, <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../338/68338.xml">
Peter Shor</link></scientist>
</person>
 published <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../674/42674.xml">
Shor's algorithm</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
, showing that a <link xlink:type="simple" xlink:href="../220/25220.xml">
quantum computer</link> could in principle perform the factorization in <link xlink:type="simple" xlink:href="../576/44576.xml">
polynomial time</link>.  However, quantum computation is still in the early stages of development and may never prove to be practical.</p>

</sec>
<sec>
<st>
Practical considerations</st>

<ss1>
<st>
Key generation</st>
<p>

Finding the large primes <it>p</it> and <it>q</it> is usually done by testing random numbers of the right size with probabilistic <link xlink:type="simple" xlink:href="../751/183751.xml">
primality test</link>s which quickly eliminate virtually all non-primes.</p>
<p>

<it>p</it> and <it>q</it> should not be 'too close', lest the <link xlink:type="simple" xlink:href="../433/2132433.xml">
Fermat factorization</link> for <it>n</it> be successful, if p-q, for instance is less than 2n1/4 (which for even small 1024-bit values of n is 3x1077) solving for p and q is trivial. Furthermore, if either <it>p</it>-1 or <it>q</it>-1 has only small prime factors, <it>n</it> can be factored quickly by <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../753/578753.xml">
Pollard's p&nbsp;&amp;minus;&nbsp;1 algorithm</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
, and these values of <it>p</it> or <it>q</it> should therefore be discarded as well.</p>
<p>

It is important that the secret key <it>d</it> be large enough. <link>
Michael J. Wiener</link> showed<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%225%22])">5</ref> that if <it>p</it> is between <it>q</it> and 2<it>q</it> (which is quite typical) and <it>d</it>  <it>n</it>1/4/3, then <it>d</it> can be computed efficiently from <it>n</it> and <it>e</it>. There is no known attack against small public exponents such as <it>e</it>=3, provided that proper padding is used. However, when no padding is used or when the padding is improperly implemented then small public exponents have a greater risk of leading to an attack, such as for example the unpadded plaintext vulnerability listed above. 65537 is a commonly used value for <it>e</it>. This value can be regarded as a compromise between avoiding potential small exponent attacks and still allowing efficient encryptions (or signature verification). The NIST Special Publication on Computer Security (SP 800-78 Rev 1 of August 2007) does not allow public exponents <it>e</it> smaller than 65537, but does not state a reason for this restriction.</p>

</ss1>
<ss1>
<st>
Speed</st>
<p>

<b>RSA</b> is much slower than <cipher wordnetid="106254239" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../978/7978.xml">
DES</link></cipher>
 and other <link xlink:type="simple" xlink:href="../042/53042.xml">
symmetric cryptosystems</link>. In practice, <link xlink:type="simple" xlink:href="../079/679079.xml">
Bob</link> typically encrypts a secret message with a symmetric algorithm, encrypts the (comparatively short) symmetric key with RSA, and transmits both the RSA-encrypted symmetric key and the symmetrically-encrypted message to Alice.</p>
<p>

This procedure raises additional security issues. For instance, it is of utmost importance to use a strong <link xlink:type="simple" xlink:href="../939/2736939.xml">
random number generator</link> for the symmetric key, because otherwise Eve (an eavesdropper wanting to see what was sent) could bypass RSA by guessing the symmetric key.</p>

</ss1>
<ss1>
<st>
Key distribution</st>
<p>

As with all ciphers, how RSA public keys are distributed is important to security. Key distribution must be secured against a <link xlink:type="simple" xlink:href="../676/144676.xml">
man-in-the-middle attack</link>. Suppose Eve has some way to give Bob arbitrary keys and make him believe they belong to Alice.  Suppose further that Eve can <it>intercept</it> transmissions between Alice and Bob. Eve sends Bob her own public key, which Bob believes to be Alice's. Eve can then intercept any ciphertext sent by Bob, decrypt it with her own secret key, keep a copy of the message, encrypt the message with Alice's public key, and send the new ciphertext to Alice. In principle, neither Alice nor Bob would be able to detect Eve's presence. Defenses against such attacks are often based on <link xlink:type="simple" xlink:href="../796/223796.xml">
digital certificate</link>s or other components of a <link xlink:type="simple" xlink:href="../112/194112.xml">
public key infrastructure</link>.</p>

</ss1>
<ss1>
<st>
 Timing attacks </st>

<p>

<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../639/808639.xml">
Kocher</link></scientist>
 described a new attack on <b>RSA</b> in 1995: if the attacker <it>Eve</it> knows <it>Alice's</it> hardware in sufficient detail and is able to measure the decryption times for several known ciphertexts, she can deduce the decryption key <it>d</it> quickly.  This attack can also be applied against the <b>RSA</b> signature scheme.  In <link xlink:type="simple" xlink:href="../163/36163.xml">
2003</link>, <scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../723/7278723.xml">
Boneh</link></scientist>
 and <link xlink:type="simple" xlink:href="../675/19177675.xml">
Brumley</link> demonstrated a more practical attack capable of recovering <b>RSA</b> factorizations over a network connection (e.g., from a <link xlink:type="simple" xlink:href="../813/187813.xml">
Secure Socket Layer</link> (SSL)-enabled webserver).  This attack takes advantage of information leaked by the <statement wordnetid="106722453" confidence="0.8">
<message wordnetid="106598915" confidence="0.8">
<theorem wordnetid="106752293" confidence="0.8">
<proposition wordnetid="106750804" confidence="0.8">
<link xlink:type="simple" xlink:href="../713/7713.xml">
Chinese remainder theorem</link></proposition>
</theorem>
</message>
</statement>
 optimization used by many RSA implementations.</p>
<p>

One way to thwart these attacks is to ensure that the decryption operation takes a constant amount of time for every ciphertext.  However, this approach can significantly reduce performance.  Instead, most <b>RSA</b> implementations use an alternate technique known as <link xlink:type="simple" xlink:href="../067/490067.xml">
cryptographic blinding</link>.  <b>RSA</b> blinding makes use of the multiplicative property of <b>RSA</b>.  Instead of computing <it>cd mod n</it>, Alice first chooses a secret random value <it>r</it>  and computes <it>(rec)d mod n</it>.  The result of this computation is <it>r m mod n</it> and so the effect of <it>r</it> can be removed by multiplying by its inverse.  A new value of <it>r</it> is chosen for each ciphertext.  With blinding applied, the decryption time is no longer correlated to the value of the input ciphertext and so the timing attack fails.</p>

</ss1>
<ss1>
<st>
Adaptive chosen ciphertext attacks</st>
<p>

In <link xlink:type="simple" xlink:href="../647/34647.xml">
1998</link>, <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<cryptanalyst wordnetid="109981540" confidence="0.8">
<intellectual wordnetid="109621545" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<decoder wordnetid="109995398" confidence="0.8">
<link xlink:type="simple" xlink:href="../764/14334764.xml">
Daniel Bleichenbacher</link></decoder>
</causal_agent>
</intellectual>
</cryptanalyst>
</person>
</physical_entity>
 described the first practical <link xlink:type="simple" xlink:href="../533/426533.xml">
adaptive chosen ciphertext attack</link>, against RSA-encrypted messages using the PKCS #1 v1 <link xlink:type="simple" xlink:href="../505/592505.xml">
padding scheme</link> (a padding scheme randomizes and adds structure to an RSA-encrypted message, so it is possible to determine whether a decrypted message is valid.)  Due to flaws with the PKCS #1 scheme, Bleichenbacher was able to mount a practical attack against RSA implementations of the <link xlink:type="simple" xlink:href="../813/187813.xml">
Secure Socket Layer</link> protocol, and to recover session keys.  As a result of this work, cryptographers now recommend the use of provably secure padding schemes such as <link xlink:type="simple" xlink:href="../249/1579249.xml">
Optimal Asymmetric Encryption Padding</link>, and RSA Laboratories has released new versions of PKCS #1 that are not vulnerable to these attacks.</p>

</ss1>
<ss1>
<st>
Branch prediction analysis attacks</st>
<p>

Branch prediction analysis is also called BPA. Many processors use a <link xlink:type="simple" xlink:href="../129/416129.xml">
branch predictor</link> to determine whether a conditional branch in the instruction flow of a program is likely to be taken or not. Usually these processors also implement <link xlink:type="simple" xlink:href="../021/315021.xml">
simultaneous multithreading</link> (SMT). Branch prediction analysis attacks use a spy process to discover (statistically) the private key when processed with these processors.</p>
<p>

Simple Branch Prediction Analysis (SBPA) claims to improve BPA in a non-statistical way. In their paper, "On the Power of Simple Branch Prediction Analysis", the authors of SBPA (<link>
Onur Aciicmez</link> and <link>
Cetin Kaya Koc</link>) claim to have discovered 508 out of 512 bits of an RSA key in 10 iterations.</p>

</ss1>
</sec>
<sec>
<st>
See also</st>
<p>

<list>
<entry level="1" type="bullet">

 <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<cryptanalyst wordnetid="109981540" confidence="0.8">
<companion wordnetid="109945905" confidence="0.8">
<intellectual wordnetid="109621545" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<friend wordnetid="110112591" confidence="0.8">
<decoder wordnetid="109995398" confidence="0.8">
<link xlink:type="simple" xlink:href="../040/578040.xml">
Clifford Cocks</link></decoder>
</friend>
</causal_agent>
</intellectual>
</companion>
</cryptanalyst>
</person>
</physical_entity>
</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../910/51910.xml">
Quantum cryptography</link></entry>
<entry level="1" type="bullet">

 <link>
Cryptographic key length</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../543/7543.xml">
Computational complexity theory</link></entry>
<entry level="1" type="bullet">

 <message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<link xlink:type="simple" xlink:href="../903/7903.xml">
Diffie-Hellman key exchange</link></rule>
</direction>
</protocol>
</message>
</entry>
<entry level="1" type="bullet">

 <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../851/498851.xml">
RSA Factoring Challenge</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../056/563056.xml">
List of software patents</link></entry>
</list>
</p>

</sec>
<sec>
<st>
Notes</st>

<p>

<reflist>
<entry id="1">
<weblink xlink:type="simple" xlink:href="http://www.msri.org/people/members/sara/articles/rsa.pdf">
SIAM News, Volume 36, Number 5, June 2003</weblink>, "Still Guarding Secrets after Years of Attacks, RSA Earns Accolades for its Founders", by Sara Robinson</entry>
<entry id="2">
 <cite style="font-style:normal">Boneh, Dan&#32;(1999).&#32;"<weblink xlink:type="simple" xlink:href="http://crypto.stanford.edu/~dabo/abstracts/RSAattack-survey.html">
Twenty Years of attacks on the RSA Cryptosystem</weblink>". <it>Notices of the American Mathematical Society (AMS)</it>&#32;<b>46</b>&#32;(2): pp. 203-213.</cite>&nbsp;</entry>
<entry id="3">
Johan Håstad, "On using RSA with Low Exponent in a Public Key Network", Crypto 85</entry>
<entry id="4">
Don Coppersmith, "Small Solutions to Polynomial Equations, and Low Exponent RSA Vulnerabilities", Journal of Cryptology, v. 10, n. 4, Dec. 1997</entry>
<entry id="5">
 <cite id="CITEREFWiener1990" style="font-style:normal">Wiener, Michael J.&#32;(May 1990),&#32;"Cryptanalysis of short RSA secret exponents",&#32;<it>Information Theory, IEEE Transactions on</it>&#32;<b>36</b>(3):  553-558, <document wordnetid="106470073" confidence="0.8">
<written_communication wordnetid="106349220" confidence="0.8">
<writing wordnetid="106362953" confidence="0.8">
<link xlink:type="simple" xlink:href="../994/422994.xml">
doi</link></writing>
</written_communication>
</document>
:<weblink xlink:type="simple" xlink:href="http://dx.doi.org/10.1109%2F18.54902">
10.1109/18.54902</weblink></cite>&nbsp;
</entry>
</reflist>
</p>

</sec>
<sec>
<st>
References</st>
<p>

<list>
<entry level="1" type="bullet">

  <cite id="Reference-Menezes-1996" style="font-style:normal" class="book">Menezes, Alfred;&#32;Paul C. van Oorschot; Scott A. Vanstone&#32;(October 1996). Handbook of Applied Cryptography.&#32;CRC Press. ISBN 0-8493-8523-7.</cite>&nbsp;</entry>
<entry level="1" type="bullet">

  <cite style="font-style:normal">Rivest, R.; A. Shamir; L. Adleman&#32;(1978).&#32;"<weblink xlink:type="simple" xlink:href="http://theory.lcs.mit.edu/~rivest/rsapaper.pdf">
A Method for Obtaining Digital Signatures and Public-Key Cryptosystems</weblink>". <it>Communications of the ACM</it>&#32;<b>21</b>&#32;(2): pp.120-126.</cite>&nbsp;</entry>
<entry level="1" type="bullet">

  <cite id="Reference-Cormen-2001" style="font-style:normal" class="book"><scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../475/4108475.xml">
Cormen, Thomas H.</link></scientist>
;&#32;<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../884/1400884.xml">
Charles E. Leiserson</link></scientist>
; <link xlink:type="simple" xlink:href="../057/68057.xml">
Ronald L. Rivest</link>; <scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../993/3489993.xml">
Clifford Stein</link></scientist>
&#32;(2001). <work wordnetid="104599396" confidence="0.8">
<product wordnetid="104007894" confidence="0.8">
<creation wordnetid="103129123" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<book wordnetid="106410904" confidence="0.8">
<publication wordnetid="106589574" confidence="0.8">
<link xlink:type="simple" xlink:href="../226/3499226.xml">
Introduction to Algorithms</link></publication>
</book>
</artifact>
</creation>
</product>
</work>
, 2e,&#32;MIT Press and McGraw-Hill,&#32;pp.881-887. ISBN 0-262-03293-7.</cite>&nbsp;</entry>
</list>
</p>

</sec>
<sec>
<st>
External links</st>
<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&amp;Sect2=HITOFF&amp;p=1&amp;u=%2Fnetahtml%2FPTO%2Fsearch-bool.html&amp;r=1&amp;f=G&amp;l=50&amp;co1=AND&amp;d=PTXT&amp;s1=4,405,829.PN.&amp;OS=PN/4,405,829&amp;RS=PN/4,405,829">
The Original RSA Patent</weblink> as filed with the U.S. Patent Office by Rivest; Ronald L. (Belmont, MA), Shamir; Adi (Cambridge, MA), Adleman; Leonard M. (Arlington, MA), December 14, 1977, Patent Number 4405829.</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.rsasecurity.com/rsalabs/node.asp?id=2125">
PKCS #1: RSA Cryptography Standard</weblink> (<link xlink:type="simple" xlink:href="../240/301240.xml">
RSA Laboratories</link> website)</entry>
<entry level="2" type="bullet">

 The <it><standard wordnetid="107260623" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../418/616418.xml">
PKCS</link></system_of_measurement>
</standard>
 #1</it> <link xlink:type="simple" xlink:href="../065/27065.xml">
standard</link> <it>"provides recommendations for the implementation of <link xlink:type="simple" xlink:href="../222/24222.xml">
public-key cryptography</link> based on the </it>'RSA<b> algorithm, covering the following aspects: cryptographic <idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<category wordnetid="105838765" confidence="0.8">
<type wordnetid="105840188" confidence="0.8">
<kind wordnetid="105839024" confidence="0.8">
<link xlink:type="simple" xlink:href="../491/333491.xml">
primitives</link></kind>
</type>
</category>
</concept>
</idea>
; <link xlink:type="simple" xlink:href="../294/10294.xml">
encryption</link> schemes; <document wordnetid="106470073" confidence="0.8">
<written_communication wordnetid="106349220" confidence="0.8">
<writing wordnetid="106362953" confidence="0.8">
<link xlink:type="simple" xlink:href="../644/59644.xml">
signature</link></writing>
</written_communication>
</document>
 schemes with appendix; <link xlink:type="simple" xlink:href="../625/75625.xml">
ASN.1</link> syntax for representing keys and for identifying the schemes"<it>.</it></b></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.di-mgt.com.au/rsa_alg.html">
Thorough walk through of RSA</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.securecottage.com/demo/rsa2.html">
RSA demo with Java and Javascript</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://cisnet.baruch.cuny.edu/holowczak/classes/9444/rsademo/">
RSA demo Applet</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.muppetlabs.com/~breadbox/txt/rsa.html">
How the RSA Cipher Works</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.cacr.math.uwaterloo.ca/hac/">
Menezes, Oorschot, Vanstone, Scott: <it>Handbook of Applied Cryptography</it> (free PDF downloads), see Chapter 8</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://eprint.iacr.org/2006/351">
Onur Aciicmez, Cetin Kaya Koc, Jean-Pierre Seifert: <it>On the Power of Simple Branch Prediction Analysis''</it></weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://blog.cacert.org/2006/11/193.html">
A New Vulnerability In RSA Cryptography, CAcert NEWS Blog</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://xyssl.org/code/source/rsa/">
Example of an RSA implementation with PKCS#1 padding (LGPL source code)</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.cryptography.com/resources/whitepapers/TimingAttacks.pdf">
Kocher's article about timing attacks</weblink></entry>
</list>
</p>

<p>

<table style=";" class="navbox" cellspacing="0">
<row>
<col style="padding:2px;">
<table style="width:100%;background:transparent;color:inherit;;" class="nowraplinks  " cellspacing="0">
<row>
<col colspan="2" style="width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<table style="width:100%;;;;" class="nowraplinks  navbox-subgroup" cellspacing="0">
<row>
<col colspan="2" style="width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<table style="width:100%;;;;" class="nowraplinks  navbox-subgroup" cellspacing="0">
<row>
<header colspan="2" style=";background:#ccf;" class="navbox-title">
&nbsp;<link xlink:type="simple" xlink:href="../222/24222.xml">
Public-key cryptography</link></header>
</row>
<row style="height:2px;">

</row>
<row>
<col colspan="2" style="width:100%;padding:0px;;;" class="navbox-list navbox-odd"><p>

<b>Algorithms:</b> <link xlink:type="simple" xlink:href="../287/14050287.xml">
CEILIDH</link>&nbsp;&#124; 
<link xlink:type="simple" xlink:href="../406/1564406.xml">
Cramer-Shoup</link>&nbsp;&#124; 
<message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<link xlink:type="simple" xlink:href="../903/7903.xml">
DH</link></rule>
</direction>
</protocol>
</message>
&nbsp;&#124; 
<link xlink:type="simple" xlink:href="../470/59470.xml">
DSA</link>&nbsp;&#124; 
<link xlink:type="simple" xlink:href="../958/3357958.xml">
ECDH</link>&nbsp;&#124; 
<link xlink:type="simple" xlink:href="../525/450525.xml">
ECDSA</link>&nbsp;&#124; 
<message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<link xlink:type="simple" xlink:href="../894/1506894.xml">
EKE</link></rule>
</direction>
</protocol>
</message>
&nbsp;&#124; 
<link xlink:type="simple" xlink:href="../458/59458.xml">
ElGamal encryption</link>&nbsp;&#124; 
<link xlink:type="simple" xlink:href="../473/2033473.xml">
ElGamal signature scheme</link>&nbsp;&#124; 
<link xlink:type="simple" xlink:href="../608/598608.xml">
GMR</link>&nbsp;&#124; 
<link xlink:type="simple" xlink:href="../076/3530076.xml">
IES</link>&nbsp;&#124; 
<link xlink:type="simple" xlink:href="../486/3200486.xml">
Lamport</link>&nbsp;&#124; 
<link xlink:type="simple" xlink:href="../447/1586447.xml">
MQV</link>&nbsp;&#124; 
<link xlink:type="simple" xlink:href="../582/481582.xml">
NTRUEncrypt</link>&nbsp;&#124; 
<link xlink:type="simple" xlink:href="../327/3513327.xml">
NTRUSign</link>&nbsp;&#124; 
<link xlink:type="simple" xlink:href="../685/480685.xml">
Paillier</link>&nbsp;&#124; 
<link xlink:type="simple" xlink:href="../283/451283.xml">
Rabin</link>&nbsp;&#124; 
<link xlink:type="simple" xlink:href="../385/25385.xml">
RSA</link>&nbsp;&#124; 
<link xlink:type="simple" xlink:href="../536/450536.xml">
Schnorr</link>&nbsp;&#124; 
<message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<link xlink:type="simple" xlink:href="../061/2159061.xml">
SPEKE</link></rule>
</direction>
</protocol>
</message>
&nbsp;&#124; 
<message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<know-how wordnetid="105616786" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<link xlink:type="simple" xlink:href="../670/1306670.xml">
SRP</link></method>
</rule>
</direction>
</know-how>
</protocol>
</message>
&nbsp;&#124; 
<message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<know-how wordnetid="105616786" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<link xlink:type="simple" xlink:href="../137/2587137.xml">
STS</link></method>
</rule>
</direction>
</know-how>
</protocol>
</message>
&nbsp;&#124; 
<region wordnetid="108630985" confidence="0.8">
<field wordnetid="108569998" confidence="0.8">
<location wordnetid="100027167" confidence="0.8">
<tract wordnetid="108673395" confidence="0.8">
<geographical_area wordnetid="108574314" confidence="0.8">
<link xlink:type="simple" xlink:href="../209/3963209.xml">
XTR</link></geographical_area>
</tract>
</location>
</field>
</region>
</p>
</col>
</row>
<row style="height:2px">

</row>
<row>
<col colspan="2" style="width:100%;padding:0px;;;" class="navbox-list navbox-even"><p>

<b>Theory:</b> <link xlink:type="simple" xlink:href="../334/181334.xml">
Discrete logarithm</link>&nbsp;&#124; 
<region wordnetid="108630985" confidence="0.8">
<field wordnetid="108569998" confidence="0.8">
<location wordnetid="100027167" confidence="0.8">
<tract wordnetid="108673395" confidence="0.8">
<geographical_area wordnetid="108574314" confidence="0.8">
<link xlink:type="simple" xlink:href="../966/9966.xml">
Elliptic curve cryptography</link></geographical_area>
</tract>
</location>
</field>
</region>
&nbsp;&#124; 
<link xlink:type="simple" xlink:href="../741/1544741.xml">
RSA problem</link></p>
</col>
</row>
<row style="height:2px">

</row>
<row>
<col colspan="2" style="width:100%;padding:0px;;;" class="navbox-list navbox-odd"><p>

<b>Standardization:</b> <link>
ANS X9F1</link>&nbsp;&#124; 
<standard wordnetid="107260623" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../159/549159.xml">
CRYPTREC</link></system_of_measurement>
</standard>
&nbsp;&#124; 
<standard wordnetid="107260623" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../154/1644154.xml">
IEEE P1363</link></system_of_measurement>
</standard>
&nbsp;&#124; 
<standard wordnetid="107260623" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../430/497430.xml">
NESSIE</link></system_of_measurement>
</standard>
&nbsp;&#124; 
<link xlink:type="simple" xlink:href="../099/1602099.xml">
NSA Suite B</link></p>
</col>
</row>
<row style="height:2px">

</row>
<row>
<col colspan="2" style="width:100%;padding:0px;;;" class="navbox-list navbox-even"><p>

<b>Misc:</b> <document wordnetid="106470073" confidence="0.8">
<written_communication wordnetid="106349220" confidence="0.8">
<writing wordnetid="106362953" confidence="0.8">
<link xlink:type="simple" xlink:href="../644/59644.xml">
Digital signature</link></writing>
</written_communication>
</document>
&nbsp;&#124; 
<link xlink:type="simple" xlink:href="../312/7943312.xml">
Fingerprint</link>&nbsp;&#124; 
<link xlink:type="simple" xlink:href="../112/194112.xml">
PKI</link>&nbsp;&#124; 
<link xlink:type="simple" xlink:href="../356/296356.xml">
Web of trust</link>&nbsp;&#124; 
<link xlink:type="simple" xlink:href="../749/5749.xml">
Key size</link></p>
</col>
</row>
</table>
</col>
</row>
</table>
</col>
</row>
<row style="height:2px">

</row>
<row>
<col colspan="2" style="width:100%;padding:0px;;;" class="navbox-list navbox-even">
<table style="width:100%;;;;" class="nowraplinks  navbox-subgroup" cellspacing="0">
<row>
<header colspan="2" style=";background:#ccf;" class="navbox-title">
&nbsp;<link xlink:type="simple" xlink:href="../432/18934432.xml">
Cryptography</link></header>
</row>
<row style="height:2px;">

</row>
<row>
<col colspan="2" style="width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<link xlink:type="simple" xlink:href="../066/520066.xml">
History of cryptography</link> | <link xlink:type="simple" xlink:href="../715/5715.xml">
Cryptanalysis</link> | 
Cryptography portal | <link xlink:type="simple" xlink:href="../585/449585.xml">
Topics in cryptography</link></col>
</row>
<row style="height:2px">

</row>
<row>
<col colspan="2" style="width:100%;padding:0px;;;" class="navbox-list navbox-even">
<event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../042/53042.xml">
Symmetric-key algorithm</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
 | <link xlink:type="simple" xlink:href="../594/4594.xml">
Block cipher</link> | <link xlink:type="simple" xlink:href="../007/49007.xml">
Stream cipher</link> | <link xlink:type="simple" xlink:href="../222/24222.xml">
Public-key cryptography</link> | <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<primitive wordnetid="109627462" confidence="0.8">
<link xlink:type="simple" xlink:href="../526/439526.xml">
Cryptographic hash function</link></primitive>
</causal_agent>
</person>
</physical_entity>
 | <link xlink:type="simple" xlink:href="../523/567523.xml">
Message authentication code</link> | <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../249/182249.xml">
Random numbers</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
 | <link xlink:type="simple" xlink:href="../733/28733.xml">
Steganography</link></col>
</row>
</table>
</col>
</row>
</table>
</col>
</row>
</table>
</p>



</sec>
</bdy>
</entity>
</article>
