<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 19:44:19[mciao0826] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<event  confidence="0.8" wordnetid="100029378">
<rule  confidence="0.8" wordnetid="105846932">
<act  confidence="0.8" wordnetid="100030358">
<psychological_feature  confidence="0.8" wordnetid="100023100">
<procedure  confidence="0.8" wordnetid="101023820">
<activity  confidence="0.8" wordnetid="100407535">
<algorithm  confidence="0.8" wordnetid="105847438">
<header>
<title>Steinhaus-Johnson-Trotter algorithm</title>
<id>2568963</id>
<revision>
<id>205501013</id>
<timestamp>2008-04-14T06:05:07Z</timestamp>
<contributor>
<username>Tom Harris</username>
<id>1098921</id>
</contributor>
</revision>
<categories>
<category>Combinatorial algorithms</category>
<category>Wikipedia articles incorporating text from public domain works of the United States Government</category>
</categories>
</header>
<bdy>

The <b>Steinhaus-Johnson-Trotter algorithm</b> or <b>Johnson-Trotter algorithm</b> is an <link xlink:type="simple" xlink:href="../775/775.xml">
algorithm</link> which generates <link xlink:type="simple" xlink:href="../027/44027.xml">
permutation</link>s by transposing elements.

<sec>
<st>
Algorithm</st>
<p>

The algorithm is setup with the idea that only one set of neighbors needs to swap positions and that there need only be 1 swap to generate the next permutation.  To accommodate this, there needs to be an extra data element added: direction of mobility (ie direction of the swap).  This direction is either left or right, but is initialized to the left.  <message wordnetid="106598915" confidence="0.8">
<subject wordnetid="106599788" confidence="0.8">
<link xlink:type="simple" xlink:href="../185/24185.xml">
Pseudocode</link></subject>
</message>
:</p>
<p>

Initialize the first permutation 1 2 ... <it>n</it> all mobile to the left
<b>while</b> there exists a mobile integer
find the largest mobile integer <it>k</it>
swap <it>k</it> and the adjacent integer in the direction of <it>k</it>'s mobility
<b>for each</b> integer <it>l</it>
<b>if</b> <it>l</it> &amp;gt; <it>k</it> <b>then</b> reverse the direction of mobility of <it>l</it></p>
<p>

An integer is said to be mobile if, in the direction of its mobility, the nearest integer is less than the current integer.  Note that if an integer is to the far left and its mobility is to the left, it is not mobile.  Similarly, if an integer is to the far right and its mobility is to the right, it is also not mobile.</p>

<ss1>
<st>
Example: n=</st>
<p>
=
Using the Steinhaus-Johnson-Trotter algorithm with n = 3 would result in the following:
1  2  3
1  3  2
3  1  2
3&amp;gt; 2  1
2   3&amp;gt; 1
2  1   3&amp;gt;
Note that this hits all 6 permutations.</p>

</ss1>
<ss1>
<st>
Example: n=</st>
<p>
=
Using the Steinhaus-Johnson-Trotter algorithm with n = 4 would result in the following:
1  2  3  4
1  2  4  3
1  4  2  3
4  1  2  3
4&amp;gt; 1  3  2
1   4&amp;gt; 3  2
1  3   4&amp;gt; 2
1  3  2   4&amp;gt;
3  1  2  4
3  1  4  2
3  4  1  2
4  3  1  2
4&amp;gt;  3&amp;gt; 2  1
3&amp;gt;  4&amp;gt; 2  1
3&amp;gt; 2   4&amp;gt; 1
3&amp;gt; 2  1   4&amp;gt;
2   3&amp;gt; 1  4
2   3&amp;gt; 4  1
2  4   3&amp;gt; 1
4  2   3&amp;gt; 1
4&amp;gt; 2  1   3&amp;gt;
2   4&amp;gt; 1   3&amp;gt;
2  1   4&amp;gt;  3&amp;gt;
2  1   3&amp;gt;  4&amp;gt;
Note that this hits all 24 permutations</p>

</ss1>
</sec>
<sec>
<st>
See also</st>
<p>

<list>
<entry level="1" type="bullet">

 <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../962/12684962.xml">
Fisher-Yates shuffle</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</entry>
</list>
</p>

</sec>
<sec>
<st>
External links</st>
<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.theory.csc.uvic.ca/%7Ecos/inf/perm/PermInfo.html">
Implementation of the Steinhaus-Johnson-Trotter algorithm</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.cut-the-knot.org/Curriculum/Combinatorics/JohnsonTrotter.shtml">
Counting And Listing All Permutations: Johnson-Trotter Method</weblink> at <link xlink:type="simple" xlink:href="../167/3259167.xml">
cut-the-knot</link></entry>
</list>
</p>

</sec>
<sec>
<st>
References</st>
<p>

<list>
<entry level="1" type="bullet">

 Paul E. Black, <weblink xlink:type="simple" xlink:href="http://www.nist.gov/dads/HTML/johnsonTrotter.html">
Johnson-Trotter</weblink> at the <link xlink:type="simple" xlink:href="../888/21888.xml">
NIST</link> <link xlink:type="simple" xlink:href="../551/1661551.xml">
Dictionary of Algorithms and Data Structures</link>.</entry>
</list>
</p>




</sec>
</bdy>
</algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</article>
