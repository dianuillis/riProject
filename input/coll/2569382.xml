<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 19:48:41[mciao0827] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<event  confidence="0.8" wordnetid="100029378">
<rule  confidence="0.8" wordnetid="105846932">
<act  confidence="0.8" wordnetid="100030358">
<psychological_feature  confidence="0.8" wordnetid="100023100">
<procedure  confidence="0.8" wordnetid="101023820">
<activity  confidence="0.8" wordnetid="100407535">
<algorithm  confidence="0.8" wordnetid="105847438">
<header>
<title>Jump search</title>
<id>2569382</id>
<revision>
<id>219466406</id>
<timestamp>2008-06-15T10:53:31Z</timestamp>
<contributor>
<username>Edward</username>
<id>4261</id>
</contributor>
</revision>
<categories>
<category>Search algorithms</category>
<category>Wikipedia articles incorporating text from public domain works of the United States Government</category>
</categories>
</header>
<bdy>

In <link xlink:type="simple" xlink:href="../323/5323.xml">
computer science</link>, a <b>jump search</b> or <b>block search</b> refers to a <link xlink:type="simple" xlink:href="../249/28249.xml">
search algorithm</link> for <link xlink:type="simple" xlink:href="../382/208382.xml">
ordered lists</link>. It works by first checking all items <it>Lkm</it>, where <math>k \in \mathbb{N}</math> and <it>m</it> is the block size, until an item is found that is larger than the <link>
search key</link>. To find the exact position of the search key in the list a <link xlink:type="simple" xlink:href="../171/18171.xml">
linear search</link> is performed on the <link>
sublist</link> <it>L</it>[(''k''-1)''m'', ''km''].<p>

The optimal value of <it>m</it> is &amp;radic;<it>n</it>, where <it>n</it> is the length of the list <it>L</it>. Because both steps of the <link xlink:type="simple" xlink:href="../775/775.xml">
algorithm</link> look at, at most, &amp;radic;<it>n</it> items the algorithm runs in O(&amp;radic;<it>n</it>) time. This is better than a <link xlink:type="simple" xlink:href="../171/18171.xml">
linear search</link>, but worse than a <link xlink:type="simple" xlink:href="../266/4266.xml">
binary search</link>. The advantage over the latter is that a jump search only needs to jump backwards once, while a binary can jump backwards up to log <it>n</it> times. This can be important if a jumping backwards takes significantly more time than jumping forward.</p>
<p>

The algorithm can be modified by performing multiple levels of jump search on the sublists, before finally performing the <link xlink:type="simple" xlink:href="../171/18171.xml">
linear search</link>. For an <it>k</it>-level jump search the optimum block size <it>ml</it> for the <it>l</it>th level (counting from 1) is <it>n</it>(k-l)/k. The modified algorithm will perform <it>k</it> backward jumps and runs in O(<it>kn</it>1/(<it>k</it>+1)) time.</p>

<sec>
<st>
Implementation</st>

<p>

<b>Algorithm</b> JumpSeach
Input: An ordered list <it>L</it>, its length <it>n</it> and a search key <it>s</it>.
Output: The position of <it>s</it> in <it>L</it>, or <b>nothing</b> if <it>s</it> is not in <it>L</it>.</p>
<p>

<it>a</it> &amp;larr; 0
<it>b</it> &amp;larr; &amp;lfloor;&amp;radic;<it>n</it>&amp;rfloor;</p>
<p>

<b>while</b> <it>L</it>min(<it>b</it>,<it>n</it>)-1  <it>s</it> <b>do</b>
<it>a</it> &amp;larr; <it>b</it>
<it>b</it> &amp;larr; <it>b</it> + &amp;lfloor;&amp;radic;<it>n</it>&amp;rfloor;
<b>if</b> <it>a</it> &amp;ge; <it>n</it> <b>then</b>
<b>return</b> <b>nothing</b></p>
<p>

<b>while</b> <it>La</it>  <it>s</it> <b>do</b>
<it>a</it> &amp;larr; <it>a</it> + 1
<b>if</b> <it>a</it> = min(<it>b</it>,<it>n</it>)
<b>return</b> <b>nothing</b></p>
<p>

<b>if</b> <it>La</it> = <it>s</it> <b>then</b>
<b>return</b> <it>a</it>
<b>else</b>
<b>return</b> <b>nothing</b></p>

</sec>
<sec>
<st>
See also</st>
<p>

<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../305/2575305.xml">
Jump list</link></entry>
<entry level="1" type="bullet">

 <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../895/69895.xml">
Interpolation search</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</entry>
<entry level="1" type="bullet">

 <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../171/18171.xml">
Linear search</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
 - runs in O(<it>n</it>) time, only looks forward</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../266/4266.xml">
Binary search</link> - runs in O(log <it>n</it>) time, looks both forward and backward</entry>
</list>
</p>

</sec>
<sec>
<st>
References</st>
<p>

<list>
<entry level="1" type="bullet">

 Paul E. Black, <weblink xlink:type="simple" xlink:href="http://www.nist.gov/dads/HTML/jumpsearch.html">
jump search</weblink> at the <link xlink:type="simple" xlink:href="../888/21888.xml">
NIST</link> <link xlink:type="simple" xlink:href="../551/1661551.xml">
Dictionary of Algorithms and Data Structures</link>.</entry>
<entry level="1" type="bullet">

 <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../304/1833304.xml">
Ben Shneiderman</link></scientist>
</person>
, <it>Jump Searching: A Fast Sequential Search Technique</it>, CACM, 21(10):831-834, October 1978.</entry>
</list>
</p>

</sec>
</bdy>
</algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</article>
