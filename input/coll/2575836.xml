<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 19:48:59[mciao0827] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<physical_entity  confidence="0.8" wordnetid="100001930">
<person  confidence="0.8" wordnetid="100007846">
<model  confidence="0.8" wordnetid="110324560">
<assistant  confidence="0.8" wordnetid="109815790">
<know-how  confidence="0.8" wordnetid="105616786">
<worker  confidence="0.8" wordnetid="109632518">
<method  confidence="0.8" wordnetid="105660268">
<causal_agent  confidence="0.8" wordnetid="100007347">
<header>
<title>Abstract state machines</title>
<id>2575836</id>
<revision>
<id>239745115</id>
<timestamp>2008-09-20T07:16:22Z</timestamp>
<contributor>
<username>Salix alba</username>
<id>212526</id>
</contributor>
</revision>
<categories>
<category>Computational models</category>
<category>Theory of computation</category>
<category>Formal methods</category>
</categories>
</header>
<bdy>

In <link xlink:type="simple" xlink:href="../323/5323.xml">
computer science</link>, an <b>abstract state machine</b> (ASM) is a <link xlink:type="simple" xlink:href="../931/10931.xml">
state machine</link> in which the number of <link>
states</link> need not be finite and in which the states are not mere points in the <link xlink:type="simple" xlink:href="../101/546101.xml">
state space</link>.  More precisely, an ASM state is a <link>
structure</link> in the sense of <link xlink:type="simple" xlink:href="../636/19636.xml">
mathematical logic</link>, that is, a nonempty <link xlink:type="simple" xlink:href="../691/26691.xml">
set</link> together with a number of <link>
functions</link> (<link>
operations</link> over the set) and <link>
relations</link>. (Structures can be viewed as <link>
algebras</link>, which explains the original name <it>evolving algebras</it> for ASMs.) In the original conception of ASMs, a single <link>
agent</link> executes a program in a sequence of steps, possibly interacting with its environment. This notion was extended to capture <link>
distributed computations</link>, in which multiple agents execute their programs concurrently.<p>

The concept of ASMs is due to <physical_entity wordnetid="100001930" confidence="0.8">
<peer wordnetid="109626238" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<colleague wordnetid="109935990" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<employee wordnetid="110053808" confidence="0.8">
<associate wordnetid="109816771" confidence="0.8">
<link xlink:type="simple" xlink:href="../014/16488014.xml">
Yuri Gurevich</link></associate>
</employee>
</scientist>
</causal_agent>
</colleague>
</worker>
</person>
</peer>
</physical_entity>
, who first proposed it in the mid-1980s as a way of improving on <link>
Turing's thesis</link> that every <link xlink:type="simple" xlink:href="../775/775.xml">
algorithm</link> is <link xlink:type="simple" xlink:href="../444/43444.xml#xpointer(//*[./st=%22Computer_Science%22])">
simulated</link> by an appropriate <invention wordnetid="105633385" confidence="0.8">
<know-how wordnetid="105616786" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<link xlink:type="simple" xlink:href="../403/30403.xml">
Turing machine</link></method>
</know-how>
</invention>
. He formulated the <it>ASM Thesis</it>: every algorithm, no matter how <link xlink:type="simple" xlink:href="../ury/30th_century.xml">
abstract</link>, is step-for-step <link xlink:type="simple" xlink:href="../937/18943937.xml">
emulated</link> by an appropriate ASM. In <link xlink:type="simple" xlink:href="../548/34548.xml">
2000</link>, Gurevich <link>
axiomatized</link> the notion of sequential algorithms, and proved the ASM thesis for them. Roughly stated, the axioms are as follows: states are structures, the <link xlink:type="simple" xlink:href="../857/548857.xml">
state transition</link> involves only a bounded part of the state, and everything is <link>
invariant</link> under <link xlink:type="simple" xlink:href="../828/14828.xml">
isomorphisms</link> of structures. The axiomatization and characterization of sequential algorithms have been extended to <link>
parallel</link> and interactive algorithms.</p>
<p>

ASMs have been used for the <link xlink:type="simple" xlink:href="../707/2567707.xml">
formal specification</link> of <link xlink:type="simple" xlink:href="../310/5310.xml">
computer hardware</link> and <link xlink:type="simple" xlink:href="../309/5309.xml">
software</link>. <link>
Egon Börger</link> has long been involved in applying ASMs to hardware and software <link>
design</link> and <link>
verification</link>, and he is a leading proponent of their use in <link xlink:type="simple" xlink:href="../010/27010.xml">
software engineering</link>. Since ASMs model algorithms at arbitrary levels of abstraction, they can provide high-level, low-level and mid-level views of a hardware or software design. ASM specifications often consist of a series of ASM models, starting with an abstract <it>ground model</it> and proceeding to greater levels of detail in successive <link>
refinements</link> or coarsenings. Comprehensive ASM specifications of <link xlink:type="simple" xlink:href="../015/23015.xml">
programming languages</link> (including <link xlink:type="simple" xlink:href="../485/23485.xml">
Prolog</link>, <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link>
C</link></programming_language>
, and <message wordnetid="106598915" confidence="0.8">
<request wordnetid="106513366" confidence="0.8">
<link>
Java</link></request>
</message>
) and <link>
design languages</link> (<link>
UML</link> and <link>
SDL</link>) have been developed. A number of software tools for ASM execution and analysis are available. </p>

<sec>
<st>
References</st>
<p>

<list>
<entry level="1" type="bullet">

 Y. Gurevich, <it>Evolving Algebras 1993: Lipari Guide</it>, E. Börger (ed.), <it>Specification and Validation Methods</it>, <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../518/48518.xml">
Oxford University Press</link></company>
, <link xlink:type="simple" xlink:href="../658/34658.xml">
1995</link>, 9-36. (ISBN 0-198-53854-5)</entry>
<entry level="1" type="bullet">

 E. Börger and R. Stärk, <it>Abstract State Machines: A Method for High-Level System Design and Analysis</it>, <company wordnetid="108058098" confidence="0.8">
<institution wordnetid="108053576" confidence="0.8">
<link xlink:type="simple" xlink:href="../949/1418949.xml">
Springer-Verlag</link></institution>
</company>
, <link xlink:type="simple" xlink:href="../163/36163.xml">
2003</link>. (ISBN 3-540-00702-4)</entry>
<entry level="1" type="bullet">

 R. Stärk, J. Schmid and E. Börger, <it>Java and the Java Virtual Machine: Definition, Verification, Validation</it>, <company wordnetid="108058098" confidence="0.8">
<institution wordnetid="108053576" confidence="0.8">
<link xlink:type="simple" xlink:href="../949/1418949.xml">
Springer-Verlag</link></institution>
</company>
, <link xlink:type="simple" xlink:href="../551/34551.xml">
2001</link>. (ISBN 3-540-42088-6)</entry>
<entry level="1" type="bullet">

 Y. Gurevich, <it>Sequential Abstract State Machines capture Sequential Algorithms</it>, <weblink xlink:type="simple" xlink:href="http://tocl.acm.org">
ACM Transactions on Computational Logic</weblink> 1(1) (<link xlink:type="simple" xlink:href="../022/1478022.xml">
July 2000</link>), 77-111.</entry>
</list>
</p>

</sec>
<sec>
<st>
External links</st>
<p>

<list>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.eecs.umich.edu/gasm/">
Abstract State Machines</weblink></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://asmeta.sourceforge.net">
ASMETA, the Abstract State Machine Metamodel and its tool set</weblink></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.coreasm.org">
CoreASM, an extensible ASM execution engine</weblink></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://esl.mit.edu/tasm/">
TASM, The Timed Abstract State Machine Language and Toolset</weblink></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.xasm.org">
The XASM open source project</weblink></entry>
</list>
</p>





</sec>
</bdy>
</causal_agent>
</method>
</worker>
</know-how>
</assistant>
</model>
</person>
</physical_entity>
</article>
