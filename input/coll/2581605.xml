<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 19:43:37[mciao0825] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>Concurrent computing</title>
<id>2581605</id>
<revision>
<id>240025017</id>
<timestamp>2008-09-21T16:29:01Z</timestamp>
<contributor>
<username>Stewartadcock</username>
<id>29890</id>
</contributor>
</revision>
<categories>
<category>All articles with unsourced statements</category>
<category>Concurrent computing</category>
<category>Articles to be merged&amp;#32;since August 2007</category>
<category>Operating system technology</category>
<category>All articles to be merged</category>
<category>Articles with unsourced statements since December 2006</category>
</categories>
</header>
<bdy>

<table class="metadata plainlinks ambox ">
<row>
<col>

ambox-content" style=""</col>
</row>
<row>
<col class="mbox-image"><p>

<image width="40x40px" src="Ambox_content.png">
</image>
</p>
</col>
<col style="" class="mbox-text">
 <b>This article or section is missing  or needs .</b>
Using helps guard against copyright violations and factual inaccuracies. <it>(December 2006)''</it></col>
</row>
</table>


<b>Concurrent computing</b> is the <link xlink:type="simple" xlink:href="../467/928467.xml">
concurrent</link> (simultaneous) execution of multiple interacting computational tasks. These tasks may be implemented as separate <link xlink:type="simple" xlink:href="../783/5783.xml">
programs</link>, or as a set of <link xlink:type="simple" xlink:href="../178/45178.xml">
processes</link> or <link xlink:type="simple" xlink:href="../303/45303.xml">
threads</link> created by a single program. The tasks may also be executing on a single <link xlink:type="simple" xlink:href="../218/5218.xml">
processor</link>, <link xlink:type="simple" xlink:href="../020/64020.xml">
several processors</link> in close proximity, or <link xlink:type="simple" xlink:href="../501/8501.xml">
distributed</link> across a network. Concurrent computing is related to <link xlink:type="simple" xlink:href="../162/145162.xml">
parallel computing</link>, but focuses more on the interactions between tasks. Correct sequencing of the interactions or communications between different tasks, and the coordination of access to resources that are shared between tasks, are key concerns during the design of concurrent computing systems. Pioneers in the field of concurrent computing include <link xlink:type="simple" xlink:href="../018/10018.xml">
Edsger Dijkstra</link>, <physical_entity wordnetid="100001930" confidence="0.8">
<peer wordnetid="109626238" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<pioneer wordnetid="110434725" confidence="0.8">
<colleague wordnetid="109935990" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<originator wordnetid="110383816" confidence="0.8">
<research_worker wordnetid="110523076" confidence="0.8">
<creator wordnetid="109614315" confidence="0.8">
<associate wordnetid="109816771" confidence="0.8">
<link xlink:type="simple" xlink:href="../750/863750.xml">
Per Brinch Hansen</link></associate>
</creator>
</research_worker>
</originator>
</scientist>
</causal_agent>
</colleague>
</pioneer>
</person>
</peer>
</physical_entity>
, and <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../434/39434.xml">
C. A. R. Hoare</link></scientist>
</person>
.
<sec>
<st>
 Concurrent interaction and communication </st>
<p>

In some concurrent computing systems communication between the concurrent components is hidden from the programmer (e.g., by using <link xlink:type="simple" xlink:href="../507/2203507.xml">
futures</link>), while in others it must be handled explicitly. Explicit communication can be divided into two classes:</p>
<p>

<list>
<entry level="1" type="definition">

<link xlink:type="simple" xlink:href="../653/825653.xml">
Shared memory</link> communication : Concurrent components communicate by altering the contents of shared memory locations (exemplified by <message wordnetid="106598915" confidence="0.8">
<request wordnetid="106513366" confidence="0.8">
<link xlink:type="simple" xlink:href="../881/15881.xml">
Java</link></request>
</message>
 and <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../196/2356196.xml">
C#</link></programming_language>
). This style of concurrent programming usually requires the application of some form of locking (e.g., <link xlink:type="simple" xlink:href="../827/36827.xml">
mutexes (means mutual exclusion)</link>, <link xlink:type="simple" xlink:href="../557/164557.xml">
semaphores</link>, or <idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<link xlink:type="simple" xlink:href="../789/1367789.xml">
monitors</link></concept>
</idea>
) to coordinate between threads.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="definition">

<link xlink:type="simple" xlink:href="../867/1324867.xml">
Message passing</link> communication :  Concurrent components communicate by exchanging messages (exemplified by <link xlink:type="simple" xlink:href="../646/9646.xml">
Erlang</link> and <link xlink:type="simple" xlink:href="../660/22660.xml">
occam</link>). The exchange of messages may be carried out asynchronously (sometimes referred to as "send and pray", although it is standard practice to resend messages that are not acknowledged as received), or may use a rendezvous style in which the sender blocks until the message is received. Message-passing concurrency tends to be far easier to reason about than shared-memory concurrency, and is typically considered a more robust, although slower, form of concurrent programming. A wide variety of mathematical theories for understanding and analyzing message-passing systems are available, including the <link xlink:type="simple" xlink:href="../868/1637868.xml">
Actor model</link>, and various <link xlink:type="simple" xlink:href="../240/853240.xml">
process calculi</link>.  Message passing can be efficiently implemented on <link xlink:type="simple" xlink:href="../318/50318.xml">
symmetric multiprocessors</link> using shared <link xlink:type="simple" xlink:href="../865/176865.xml">
coherent memory</link>.</entry>
</list>
</p>

</sec>
<sec>
<st>
 Coordinating access to resources </st>
<p>

One of the major issues in concurrent computing is preventing concurrent processes from interfering with each other. For example, consider the following algorithm for making withdrawals from a checking account represented by the shared resource balance:
&amp;lt;nowiki&amp;gt;
1  bool withdraw(int withdrawal)
2  {
3     if( balance &amp;gt;= withdrawal )
4     {
5         balance -= withdrawal;
6         return true;
7     } 
8     return false;
9  }
&amp;lt;/nowiki&amp;gt;
Suppose balance=500, and two concurrent processes make the calls withdraw(300) and withdraw(350). If line 3 in both operations executes before line 5 both operations will find that balance &amp;gt; withdrawal evaluates to true, and execution will proceed to subtracting the withdrawal amount. However, since both processes perform their withdrawals, the total amount withdrawn will end up being more than the original balance. These sorts of problems with shared resources require the use of <link xlink:type="simple" xlink:href="../356/217356.xml">
concurrency control</link>, or <link xlink:type="simple" xlink:href="../867/554867.xml">
non-blocking algorithm</link>s.</p>
<p>

Because concurrent systems rely on the use of shared resources (including communications mediums), concurrent computing in general requires the use of some form of <link xlink:type="simple" xlink:href="../871/2277871.xml">
arbiter</link> somewhere in the implementation to mediate access to these resources. </p>
<p>

Unfortunately, while many solutions exist to the problem of a conflict over one resource, many of those "solutions" have their own <link xlink:type="simple" xlink:href="../467/928467.xml">
concurrency</link> problems such as <link xlink:type="simple" xlink:href="../181/105181.xml">
deadlock</link> when more than one resource is involved.</p>

</sec>
<sec>
<st>
 Advantages </st>

<p>

<list>
<entry level="1" type="bullet">

Increased application throughput - the number of tasks done in certain time period will increase.</entry>
<entry level="1" type="bullet">

High responsiveness for input/output - input/output-intensive applications mostly wait for input or output operations to complete. Concurrent programming allows the time that would be spent waiting to be used for another task.</entry>
<entry level="1" type="bullet">

More appropriate program struct - some problems and problem domains are well-suited to representation as concurrent tasks or processes.</entry>
</list>
</p>

</sec>
<sec>
<st>
 Concurrent programming languages </st>
<p>

Concurrent programming languages are <link xlink:type="simple" xlink:href="../015/23015.xml">
programming languages</link> that use language constructs for  <link xlink:type="simple" xlink:href="../467/928467.xml">
concurrency</link>. These constructs may involve <link xlink:type="simple" xlink:href="../303/45303.xml">
multi-threading</link>, support for <link xlink:type="simple" xlink:href="../501/8501.xml">
distributed computing</link>, <link xlink:type="simple" xlink:href="../867/1324867.xml">
message passing</link>, <link xlink:type="simple" xlink:href="../431/2041431.xml">
shared resources</link> (including <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<model wordnetid="110324560" confidence="0.8">
<assistant wordnetid="109815790" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../675/956675.xml">
shared memory</link></causal_agent>
</worker>
</assistant>
</model>
</person>
</physical_entity>
) or <link xlink:type="simple" xlink:href="../507/2203507.xml">
futures</link> (known also as <it>promises</it>). </p>
<p>

Today, the most commonly used programming languages that have specific constructs for concurrency are <message wordnetid="106598915" confidence="0.8">
<request wordnetid="106513366" confidence="0.8">
<link xlink:type="simple" xlink:href="../881/15881.xml">
Java</link></request>
</message>
 and <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../196/2356196.xml">
C#</link></programming_language>
. Both of these languages fundamentally use a shared-memory concurrency model, with locking provided by <idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<link xlink:type="simple" xlink:href="../789/1367789.xml">
monitors</link></concept>
</idea>
 (although message-passing models can and have been implemented on top of the underlying shared-memory model). Of the languages that use a message-passing concurrency model, <link xlink:type="simple" xlink:href="../646/9646.xml">
Erlang</link> is probably the most widely used in industry at present.</p>
<p>

Many concurrent programming languages have been developed more as research languages (e.g. <link xlink:type="simple" xlink:href="../312/6751312.xml">
Pict</link>) rather than as languages for production use. However, languages such as Erlang, Limbo, and occam have seen industrial use at various times in the last 20 years. Languages in which concurrency plays an important role include:</p>
<p>

<list>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../242/1242.xml">
Ada</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../510/933510.xml">
Afnix</link> &ndash; concurrent access to data is protected automatically (previously called <it>Aleph</it>, but unrelated to <it>Alef</it>)</entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../217/1935217.xml">
Alef</link> &ndash; concurrent language with threads and message passing, used for systems programming in early versions of <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../226/24226.xml">
Plan 9 from Bell Labs</link></O>
</entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../195/4245195.xml">
Alice</link> &ndash; extension to <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../337/100337.xml">
Standard ML</link></programming_language>
, adds support for concurrency via futures.</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.connectivelogic.co.uk/whatisclip.html">
CDL (Concurrent Description Language)</weblink>, a machine-translatable, composable, object-oriented, visual programming language. </entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../803/945803.xml">
Cilk</link> &ndash; a concurrent <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../021/6021.xml">
C</link></programming_language>
</entry>
<entry level="1" type="bullet">

<link>
Cω</link> &ndash; C Omega, a research language extending C#, uses asynchronous communication</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.jg.inf.ethz.ch/components">
Composita</weblink> &ndash; a component language for structured parallel programming </entry>
<entry level="1" type="bullet">

<link>
Concurrent C</link>.</entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../878/161878.xml">
Concurrent Clean</link> &ndash; a functional programming language, similar to <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../630/13630.xml">
Haskell</link></programming_language>
</entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../178/2037178.xml">
Concurrent ML</link> &ndash; a concurrent extension of <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../337/100337.xml">
Standard ML</link></programming_language>
</entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../343/9637343.xml">
Concurrent Pascal</link> &ndash; by <physical_entity wordnetid="100001930" confidence="0.8">
<peer wordnetid="109626238" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<pioneer wordnetid="110434725" confidence="0.8">
<colleague wordnetid="109935990" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<originator wordnetid="110383816" confidence="0.8">
<research_worker wordnetid="110523076" confidence="0.8">
<creator wordnetid="109614315" confidence="0.8">
<associate wordnetid="109816771" confidence="0.8">
<link xlink:type="simple" xlink:href="../750/863750.xml">
Brinch-Hansen</link></associate>
</creator>
</research_worker>
</originator>
</scientist>
</causal_agent>
</colleague>
</pioneer>
</person>
</peer>
</physical_entity>
</entry>
<entry level="1" type="bullet">

<link>
Corn</link></entry>
<entry level="1" type="bullet">

<substance wordnetid="100019613" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<engine wordnetid="103287733" confidence="0.8">
<paper wordnetid="114974264" confidence="0.8">
<motor wordnetid="103789946" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<card wordnetid="102962545" confidence="0.8">
<part wordnetid="113809207" confidence="0.8">
<machine wordnetid="103699975" confidence="0.8">
<material wordnetid="114580897" confidence="0.8">
<link xlink:type="simple" xlink:href="../386/7933386.xml">
Compute Unified Device Architecture (CUDA)</link></material>
</machine>
</part>
</card>
</device>
</motor>
</paper>
</engine>
</instrumentality>
</artifact>
</substance>
</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../187/302187.xml">
Curry</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../046/1377046.xml">
E</link> &ndash; uses promises, ensures deadlocks cannot occur</entry>
<entry level="1" type="bullet">

<programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../838/9838.xml">
Eiffel</link></programming_language>
 &ndash; through its <link xlink:type="simple" xlink:href="../365/6867365.xml">
SCOOP</link> mechanism based on the concepts of Design by Contract</entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../646/9646.xml">
Erlang</link> &ndash; uses asynchronous message passing with nothing shared</entry>
<entry level="1" type="bullet">

<programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../340/323340.xml">
Io</link></programming_language>
 &ndash; actor-based concurrency</entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../771/4051771.xml">
Janus</link> features distinct "askers" and "tellers" to logical variables, bag channels; is purely declarative</entry>
<entry level="1" type="bullet">

<software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../069/3875069.xml">
JoCaml</link></software>
</entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../745/2225745.xml">
Join Java</link> &ndash; concurrent language based on the <message wordnetid="106598915" confidence="0.8">
<request wordnetid="106513366" confidence="0.8">
<link xlink:type="simple" xlink:href="../881/15881.xml">
Java programming language</link></request>
</message>
</entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../786/502786.xml">
Joule</link> &ndash; dataflow language, communicates by message passing</entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../256/4249256.xml">
Concurrent Haskell</link> &ndash; lazy, pure functional language operating concurrent processes on shared memory</entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../298/236298.xml">
Limbo</link> &ndash; relative of <link xlink:type="simple" xlink:href="../217/1935217.xml">
Alef</link>, used for systems programming in <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../928/507928.xml">
Inferno (operating system)</link></O>
</entry>
<entry level="1" type="bullet">

<language wordnetid="106282651" confidence="0.8">
<link xlink:type="simple" xlink:href="../605/940605.xml">
MultiLisp</link></language>
 &ndash; <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../119/28119.xml">
Scheme</link></programming_language>
 variant extended to support parallelism</entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../660/22660.xml">
occam</link> &ndash; influenced heavily by <link>
Communicating Sequential Processes</link> (CSP).</entry>
<entry level="2" type="bullet">

<link xlink:type="simple" xlink:href="../775/2079775.xml">
occam-π</link> &ndash; a modern variant of <link xlink:type="simple" xlink:href="../660/22660.xml">
occam</link>, which incorporates ideas from Milner's <link xlink:type="simple" xlink:href="../373/420373.xml">
π-calculus</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../244/13345244.xml">
Orc</link> &ndash; a heavily concurrent, nondeterministic language based on <language wordnetid="106282651" confidence="0.8">
<link xlink:type="simple" xlink:href="../430/155430.xml">
Kleene algebra</link></language>
.</entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../916/256916.xml">
Oz</link> &ndash; multiparadigm language, supports shared-state and message-passing concurrency, and futures</entry>
<entry level="2" type="bullet">

<link xlink:type="simple" xlink:href="../556/2317556.xml">
Mozart Programming System</link> &ndash; <link xlink:type="simple" xlink:href="../193/81193.xml">
multiplatform</link> Oz</entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../312/6751312.xml">
Pict</link> &ndash; essentially an executable implementation of Milner's <link xlink:type="simple" xlink:href="../373/420373.xml">
π-calculus</link></entry>
<entry level="1" type="bullet">

<group_action wordnetid="101080366" confidence="0.8">
<enforcement wordnetid="101127019" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<social_control wordnetid="101123598" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<execution wordnetid="101127379" confidence="0.8">
<link xlink:type="simple" xlink:href="../536/2009536.xml">
Stackless Python</link></execution>
</psychological_feature>
</act>
</social_control>
</event>
</enforcement>
</group_action>
</entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../513/2344513.xml">
SALSA</link> &ndash; actor language with token-passing, join, and first-class continuations for distributed computing over the Internet</entry>
<entry level="1" type="bullet">

<programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../510/3254510.xml">
Scala</link></programming_language>
 &ndash; a general purpose programming language designed to express common programming patterns in a concise, elegant, and type-safe way</entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../875/485875.xml">
SR</link> &ndash; research language</entry>
</list>
</p>
<p>

Many other languages provide support for concurrency in the form of libraries (on level roughly comparable with the above list).</p>

</sec>
<sec>
<st>
 Models of concurrency </st>

<p>

<table class="metadata plainlinks ambox ">
<row>
<col>

ambox-move" style=""</col>
</row>
<row>
<col class="mbox-image"><p>

<image width="50px" src="Mergefrom.svg">
</image>
</p>
</col>
<col style="" class="mbox-text">
 It has been suggested that  be  into this article or section. ()</col>
</row>
</table>


There are several models of concurrent computing, which can be used to understand and analyze concurrent systems. These models include:</p>
<p>

<list>
<entry level="1" type="bullet">

 The <link xlink:type="simple" xlink:href="../868/1637868.xml">
Actor model</link></entry>
<entry level="1" type="bullet">

 <language wordnetid="106282651" confidence="0.8">
<link xlink:type="simple" xlink:href="../192/225192.xml">
Petri net</link></language>
s</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../240/853240.xml">
Process calculi</link> such as</entry>
<entry level="2" type="bullet">

 <link xlink:type="simple" xlink:href="../564/18934564.xml">
Ambient calculus</link></entry>
<entry level="2" type="bullet">

 <link xlink:type="simple" xlink:href="../372/420372.xml">
Calculus of Communicating Systems</link> (CCS)</entry>
<entry level="2" type="bullet">

 <link>
Communicating Sequential Processes</link> (CSP)</entry>
<entry level="2" type="bullet">

 <link xlink:type="simple" xlink:href="../373/420373.xml">
π-calculus</link></entry>
</list>
</p>

</sec>
<sec>
<st>
 See also </st>
<p>

<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../867/1324867.xml">
Message passing programming</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../630/4536630.xml">
Ptolemy Project</link></entry>
<entry level="1" type="bullet">

 <accomplishment wordnetid="100035189" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<action wordnetid="100037396" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<feat wordnetid="100036762" confidence="0.8">
<link xlink:type="simple" xlink:href="../661/98661.xml#xpointer(//*[./st=%22Computing%22])">
Race condition#Computing</link></feat>
</psychological_feature>
</act>
</action>
</event>
</accomplishment>
</entry>
<entry level="1" type="bullet">

 <idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<link xlink:type="simple" xlink:href="../312/638312.xml">
Critical section</link></concept>
</idea>
</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../409/212409.xml">
Transaction processing</link></entry>
<entry level="1" type="bullet">

 <paradigm wordnetid="113804375" confidence="0.8">
<linguistic_relation wordnetid="113797142" confidence="0.8">
<inflection wordnetid="113803782" confidence="0.8">
<grammatical_relation wordnetid="113796779" confidence="0.8">
<link xlink:type="simple" xlink:href="../970/5689970.xml">
Flow-based programming</link></grammatical_relation>
</inflection>
</linguistic_relation>
</paradigm>
</entry>
</list>
</p>

</sec>
<sec>
<st>
Bibliography</st>
<p>

<list>
<entry level="1" type="bullet">

 <cite style="font-style:normal" class="book">Filman, Robert E.;&#32;Daniel P. Friedman. <weblink xlink:type="simple" xlink:href="http://ic.arc.nasa.gov/people/filman/text/dpl/dpl.html">
Coordinated Computing: Tools and Techniques for Distributed Software origyear=1984</weblink>.&#32;New York:&#32;McGraw-Hill,&#32;370. ISBN 0-07-022439-0.</cite>&nbsp;</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 <cite id="Reference-Taubenfeld-2006" style="font-style:normal" class="book">Taubenfeld, Gadi&#32;(2006). <weblink xlink:type="simple" xlink:href="http://www.faculty.idc.ac.il/gadi/book.htm">
Synchronization Algorithms and Concurrent Programming</weblink>.&#32;Pearson / Prentice Hall,&#32;433. ISBN 0131972596.</cite>&nbsp;</entry>
</list>
</p>

</sec>
<sec>
<st>
 External links </st>
<p>

<list>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://vl.fmnet.info/concurrent/">
Concurrent Systems Virtual Library</weblink></entry>
</list>
</p>

<p>

<table style=";" class="navbox" cellspacing="0">
<row>
<col style="padding:2px;">
<table style="width:100%;background:transparent;color:inherit;;" class="nowraplinks collapsible autocollapse " cellspacing="0">
<row>
<header colspan="2" style=";" class="navbox-title">
Types of <link xlink:type="simple" xlink:href="../015/23015.xml">
Programming language</link>s</header>
</row>
<row style="height:2px;">

</row>
<row>
<col colspan="2" style="width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<paradigm wordnetid="113804375" confidence="0.8">
<linguistic_relation wordnetid="113797142" confidence="0.8">
<inflection wordnetid="113803782" confidence="0.8">
<grammatical_relation wordnetid="113796779" confidence="0.8">
<link xlink:type="simple" xlink:href="../887/890887.xml">
Array</link></grammatical_relation>
</inflection>
</linguistic_relation>
</paradigm>
 &nbsp;·  <link xlink:type="simple" xlink:href="../368/1368.xml">
Assembly</link> &nbsp;·  <message wordnetid="106598915" confidence="0.8">
<subject wordnetid="106599788" confidence="0.8">
<link xlink:type="simple" xlink:href="../101/174101.xml">
Compiled</link></subject>
</message>
 &nbsp;·  <link xlink:type="simple" xlink:href="../605/2581605.xml">
Concurrent</link> &nbsp;·  <link xlink:type="simple" xlink:href="../103/560103.xml">
Curly bracket</link> &nbsp;·  <link>
Data-oriented</link> &nbsp;·  <link xlink:type="simple" xlink:href="../378/2468378.xml">
Data-structured</link> &nbsp;·  <paradigm wordnetid="113804375" confidence="0.8">
<linguistic_relation wordnetid="113797142" confidence="0.8">
<inflection wordnetid="113803782" confidence="0.8">
<grammatical_relation wordnetid="113796779" confidence="0.8">
<link xlink:type="simple" xlink:href="../396/1079396.xml">
Dataflow</link></grammatical_relation>
</inflection>
</linguistic_relation>
</paradigm>
 &nbsp;·  <paradigm wordnetid="113804375" confidence="0.8">
<linguistic_relation wordnetid="113797142" confidence="0.8">
<inflection wordnetid="113803782" confidence="0.8">
<grammatical_relation wordnetid="113796779" confidence="0.8">
<link xlink:type="simple" xlink:href="../648/210648.xml">
Declarative</link></grammatical_relation>
</inflection>
</linguistic_relation>
</paradigm>
 &nbsp;·  <link xlink:type="simple" xlink:href="../239/519239.xml">
Domain-specific</link> &nbsp;·  <link xlink:type="simple" xlink:href="../398/53398.xml">
Esoteric</link> &nbsp;·  <paradigm wordnetid="113804375" confidence="0.8">
<linguistic_relation wordnetid="113797142" confidence="0.8">
<inflection wordnetid="113803782" confidence="0.8">
<grammatical_relation wordnetid="113796779" confidence="0.8">
<link xlink:type="simple" xlink:href="../177/1445177.xml">
Extensible</link></grammatical_relation>
</inflection>
</linguistic_relation>
</paradigm>
 &nbsp;·  <paradigm wordnetid="113804375" confidence="0.8">
<linguistic_relation wordnetid="113797142" confidence="0.8">
<inflection wordnetid="113803782" confidence="0.8">
<grammatical_relation wordnetid="113796779" confidence="0.8">
<link xlink:type="simple" xlink:href="../933/10933.xml">
Functional</link></grammatical_relation>
</inflection>
</linguistic_relation>
</paradigm>
 &nbsp;·  <paradigm wordnetid="113804375" confidence="0.8">
<linguistic_relation wordnetid="113797142" confidence="0.8">
<inflection wordnetid="113803782" confidence="0.8">
<grammatical_relation wordnetid="113796779" confidence="0.8">
<link xlink:type="simple" xlink:href="../847/197847.xml">
Imperative</link></grammatical_relation>
</inflection>
</linguistic_relation>
</paradigm>
 &nbsp;·  <link xlink:type="simple" xlink:href="../089/15089.xml">
Interpreted</link> &nbsp;·  <link xlink:type="simple" xlink:href="../de)/17927_(Z$I$P$_code).xml">
Logic</link> &nbsp;·  <link xlink:type="simple" xlink:href="../683/20683.xml">
Machine</link> &nbsp;·  <idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<link xlink:type="simple" xlink:href="../560/20560.xml">
Macro</link></concept>
</idea>
 &nbsp;·  <paradigm wordnetid="113804375" confidence="0.8">
<linguistic_relation wordnetid="113797142" confidence="0.8">
<inflection wordnetid="113803782" confidence="0.8">
<grammatical_relation wordnetid="113796779" confidence="0.8">
<link xlink:type="simple" xlink:href="../460/393460.xml">
Metaprogramming</link></grammatical_relation>
</inflection>
</linguistic_relation>
</paradigm>
 &nbsp;·  <paradigm wordnetid="113804375" confidence="0.8">
<linguistic_relation wordnetid="113797142" confidence="0.8">
<inflection wordnetid="113803782" confidence="0.8">
<grammatical_relation wordnetid="113796779" confidence="0.8">
<link xlink:type="simple" xlink:href="../843/226843.xml">
Multi-paradigm</link></grammatical_relation>
</inflection>
</linguistic_relation>
</paradigm>
 &nbsp;·  <link xlink:type="simple" xlink:href="../497/365497.xml">
Non-English-based</link> &nbsp;·  <link xlink:type="simple" xlink:href="../758/22758.xml">
Object-oriented</link> &nbsp;·  <message wordnetid="106598915" confidence="0.8">
<subject wordnetid="106599788" confidence="0.8">
<link xlink:type="simple" xlink:href="../595/605595.xml">
Off-side rule</link></subject>
</message>
 &nbsp;·  <paradigm wordnetid="113804375" confidence="0.8">
<linguistic_relation wordnetid="113797142" confidence="0.8">
<inflection wordnetid="113803782" confidence="0.8">
<grammatical_relation wordnetid="113796779" confidence="0.8">
<link xlink:type="simple" xlink:href="../467/1780467.xml">
Pipeline</link></grammatical_relation>
</inflection>
</linguistic_relation>
</paradigm>
 &nbsp;·  <paradigm wordnetid="113804375" confidence="0.8">
<linguistic_relation wordnetid="113797142" confidence="0.8">
<inflection wordnetid="113803782" confidence="0.8">
<grammatical_relation wordnetid="113796779" confidence="0.8">
<link xlink:type="simple" xlink:href="../801/23801.xml">
Procedural</link></grammatical_relation>
</inflection>
</linguistic_relation>
</paradigm>
 &nbsp;·  <paradigm wordnetid="113804375" confidence="0.8">
<linguistic_relation wordnetid="113797142" confidence="0.8">
<inflection wordnetid="113803782" confidence="0.8">
<grammatical_relation wordnetid="113796779" confidence="0.8">
<link xlink:type="simple" xlink:href="../003/61003.xml">
Prototype-based</link></grammatical_relation>
</inflection>
</linguistic_relation>
</paradigm>
 &nbsp;·  <paradigm wordnetid="113804375" confidence="0.8">
<linguistic_relation wordnetid="113797142" confidence="0.8">
<inflection wordnetid="113803782" confidence="0.8">
<grammatical_relation wordnetid="113796779" confidence="0.8">
<link xlink:type="simple" xlink:href="../905/314905.xml">
Reflective</link></grammatical_relation>
</inflection>
</linguistic_relation>
</paradigm>
 &nbsp;·  <link>
Rule-based</link> &nbsp;·  <link xlink:type="simple" xlink:href="../524/29524.xml">
Scripting</link> &nbsp;·  <link xlink:type="simple" xlink:href="../347/2211347.xml">
Synchronous</link> &nbsp;·  <message wordnetid="106598915" confidence="0.8">
<subject wordnetid="106599788" confidence="0.8">
<link xlink:type="simple" xlink:href="../268/499268.xml">
Visual</link></subject>
</message>
</col>
</row>
</table>
</col>
</row>
</table>
</p>


</sec>
</bdy>
</article>
