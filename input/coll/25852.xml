<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 15:33:47[mciao0828] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<statement  confidence="0.8" wordnetid="106722453">
<message  confidence="0.8" wordnetid="106598915">
<theorem  confidence="0.8" wordnetid="106752293">
<proposition  confidence="0.8" wordnetid="106750804">
<header>
<title>Rice&apos;s theorem</title>
<id>25852</id>
<revision>
<id>244197591</id>
<timestamp>2008-10-09T19:15:07Z</timestamp>
<contributor>
<username>SpBot</username>
<id>7016748</id>
</contributor>
</revision>
<categories>
<category>Theory of computation</category>
<category>Articles containing proofs</category>
<category>Mathematical theorems</category>
</categories>
</header>
<bdy>

In <link xlink:type="simple" xlink:href="../323/5323.xml">
computer science</link>, <b>Rice's theorem</b> named after <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<intellectual wordnetid="109621545" confidence="0.8">
<alumnus wordnetid="109786338" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<mathematician wordnetid="110301261" confidence="0.8">
<scholar wordnetid="110557854" confidence="0.8">
<link xlink:type="simple" xlink:href="../434/15461434.xml">
Henry Gordon Rice</link></scholar>
</mathematician>
</scientist>
</causal_agent>
</alumnus>
</intellectual>
</person>
</physical_entity>
 (also known as <b>The Rice-Myhill-Shapiro theorem</b> after Rice and <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<intellectual wordnetid="109621545" confidence="0.8">
<alumnus wordnetid="109786338" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<mathematician wordnetid="110301261" confidence="0.8">
<scholar wordnetid="110557854" confidence="0.8">
<link xlink:type="simple" xlink:href="../636/2611636.xml">
John Myhill</link></scholar>
</mathematician>
</scientist>
</causal_agent>
</alumnus>
</intellectual>
</person>
</physical_entity>
) states that, for any non-trivial property of <link xlink:type="simple" xlink:href="../577/23577.xml">
partial function</link>s, there exists at least one <link xlink:type="simple" xlink:href="../775/775.xml">
algorithm</link> for which it is  <link xlink:type="simple" xlink:href="../336/8336.xml">
undecidable</link> whether the algorithm computes a partial function with this property.  Here, a property of partial functions is called <it>trivial</it> if it holds for all partial <link xlink:type="simple" xlink:href="../338/1139338.xml">
computable function</link>s or for none.
<sec>
<st>
Introduction</st>
<p>

Another way of stating this problem that is more useful in <link xlink:type="simple" xlink:href="../136/442136.xml">
computability theory</link> is this: suppose we have a set of <link xlink:type="simple" xlink:href="../939/10939.xml">
languages</link> <it>S</it>. Then the problem of deciding whether the language of a given <invention wordnetid="105633385" confidence="0.8">
<know-how wordnetid="105616786" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<link xlink:type="simple" xlink:href="../403/30403.xml">
Turing machine</link></method>
</know-how>
</invention>
 is in <it>S</it> is <link xlink:type="simple" xlink:href="../336/8336.xml">
undecidable</link>, provided that there exists a Turing machine that recognizes a language in <it>S</it> and a Turing machine that recognizes a language not in <it>S</it>. Effectively this means that there is no machine that can always correctly decide whether the language of a given Turing machine has a particular nontrivial property. Special cases include the undecidability of whether a Turing machine accepts a particular string, whether a Turing machine recognizes a particular recognizable language, and whether the language recognized by a Turing machine could be recognized by a nontrivial simpler machine, such as a <know-how wordnetid="105616786" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<link xlink:type="simple" xlink:href="../931/10931.xml">
finite automaton</link></method>
</know-how>
.</p>
<p>

It is important to note that Rice's theorem does not say anything about those properties of machines or programs which are not also properties of functions and languages.  For example, whether a machine runs for more than 100 steps on some input is a decidable property, even when it is non-trivial.  Implementing exactly the same language, two different machines might require a different number of steps to recognize the same input.  Where a property is of the kind that two machines may or may not have it, while still implementing exactly the same language, the property is of the machines and not of the language, and Rice's Theorem does not apply.</p>
<p>

Similarly, whether a machine has more than 5 states is a decidable property.  On the other hand, the statement that "No modern general-purpose computer can solve the general problem of determining whether a program is virus free" is a consequence of Rice's Theorem because, while a statement about computers, it can be reduced to a statement about languages.</p>
<p>

Using <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<intellectual wordnetid="109621545" confidence="0.8">
<alumnus wordnetid="109786338" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<mathematician wordnetid="110301261" confidence="0.8">
<scholar wordnetid="110557854" confidence="0.8">
<link xlink:type="simple" xlink:href="../272/1014272.xml">
Rogers</link></scholar>
</mathematician>
</scientist>
</causal_agent>
</alumnus>
</intellectual>
</person>
</physical_entity>
' characterization of <link xlink:type="simple" xlink:href="../069/2423069.xml">
acceptable programming system</link>s, this result may essentially be generalized to most computer <link xlink:type="simple" xlink:href="../015/23015.xml">
programming language</link>s: there exists no automatic method that decides with generality non-trivial questions on the black-box behavior of computer programs. This is one explanation of the difficulty of <link xlink:type="simple" xlink:href="../395/323395.xml">
debugging</link>.</p>
<p>

As an example, consider the following variant of the <link xlink:type="simple" xlink:href="../668/13668.xml">
halting problem</link>: Take the property a partial function <b>F</b> has if <b>F</b>
is defined for argument 1.  It is obviously non-trivial, since there are partial functions that are defined for 1 and others that are
undefined at 1.  The <it>1-halting problem</it> is the problem of deciding of any algorithm whether it defines a function with this property,
i.e., whether the algorithm halts on input 1. By Rice's theorem, the 1-halting problem is undecidable.</p>

</sec>
<sec>
<st>
Formal statement</st>
<p>

Let <math>\phi\colon \mathbb{N} \to \mathbf{P}^{(1)}</math> be a <link>
GÃ¶del numbering</link> of the <link xlink:type="simple" xlink:href="../338/1139338.xml">
computable function</link>s; a map from the <link xlink:type="simple" xlink:href="../474/21474.xml">
natural numbers</link> to the class of unary partial computable functions.   </p>
<p>

We identify each <it>property</it> that a computable function may have with the subset of <math>\mathbf{P}^{(1)}</math> consisting of the functions with that property.
Thus given a set <math>F \subseteq \mathbf{P}^{(1)}</math>, a computable function <math>\phi_e</math> has property <it>F</it> if and only if <math>\phi_e \in F</math>.  For each property <math>F \subseteq \mathbf{P}^{(1)}</math> there is an associated <link xlink:type="simple" xlink:href="../336/8336.xml">
decision problem</link> <math>D_F</math> of determining, given <it>e</it> , whether <math>\phi_e \in F</math>. </p>
<p>

<b>Rice's theorem</b> states that the decision problem <math>D_F</math> is <link xlink:type="simple" xlink:href="../264/332264.xml">
decidable</link> if and only if <math>F = \emptyset</math> or <math>F = \mathbf{P}^{(1)}</math>.</p>

</sec>
<sec>
<st>
Examples</st>
<p>

According to Rice's theorem, if there is at least one computable function in a particular class <it>C</it> of computable functions  and another computable function not in <it>C</it> then the problem of deciding whether a particular program computes a function in <it>C</it> is undecidable.  For example, Rice's theorem shows that each of the following sets of computable functions is undecidable:
<list>
<entry level="1" type="bullet">

 The class of computable functions that return <it>0</it> for every input, and its complement.</entry>
<entry level="1" type="bullet">

 The class of computable functions that return <it>0</it> for at least one input, and its complement.</entry>
<entry level="1" type="bullet">

 The class of computable functions that are constant, and its complement.</entry>
</list>
</p>

</sec>
<sec>
<st>
Proof</st>

<ss1>
<st>
Proof sketch</st>
<p>

Suppose, for concreteness, that we have an algorithm for examining a program <it>p</it> and determining infallibly whether <it>p</it> is an implementation of the squaring function, which takes an integer <it>d</it> and returns <it>d</it>2.  The proof works just as well if we have an algorithm for deciding any other nontrivial property of programs, and will be given in general below.</p>
<p>

The claim is that we can convert our algorithm for identifying squaring programs into one which identifies functions that halt.  We will describe an algorithm which takes inputs <it>a</it> and <it>i</it> and determines whether program <it>a</it> halts when given input <it>i</it>. </p>
<p>

The algorithm is simple:  we construct a  new program <it>t</it> which (1) temporarily ignores its input while it tries to 
execute program <it>a</it> on input <it>i</it>, and then, if that halts, (2) returns the square of its input.   Clearly,  <it>t</it> is a function for computing squares if and only if step (1) halts.  Since we've assumed that we can infallibly identify program for computing squares, we can determine whether <it>t</it> is such a program, and therefore whether program <it>a</it> halts on input <it>i</it>.  Note that we needn't actually execute <it>t</it>; we need only decide whether it is a squaring program, and, by hypothesis, we know how to do this.</p>
<p>

t(n) {
a(i)
<b>return</b> n&amp;times;n
}</p>
<p>

This method doesn't depend specifically on being able to recognize functions that compute squares; as long as <it>some</it> program can do what we're trying to recognize, we can add a call to <it>a</it> to obtain our <it>t</it>. We could have had a method for recognizing programs for computing square roots, or programs for computing the monthly payroll, or programs that halt when given the input "Abraxas", or programs that commit array bounds errors; in each case, we would be able to solve the halting problem similarly.</p>

</ss1>
<ss1>
<st>
Formal proof</st>
<p>

For the formal proof, algorithms are presumed to define partial functions over <link xlink:type="simple" xlink:href="../701/27701.xml">
strings</link> and are themselves represented by strings. The partial function computed by the algorithm represented by a string <it>a</it> is denoted <b>F</b><it>a</it>. This proof proceeds by <link xlink:type="simple" xlink:href="../418/25418.xml">
reductio ad absurdum</link>: we assume that there is a non-trivial property that is decided by an algorithm, and then show that it follows that we can decide the <link xlink:type="simple" xlink:href="../668/13668.xml">
halting problem</link>, which is not possible, and therefore a contradiction.</p>
<p>

Let us now assume that <it>P</it>(<it>a</it>) is an algorithm that decides some non-trivial property of <b>F</b><it>a</it>. Without loss of
generality we may assume that <it>P</it>(<it>no-halt</it>) = "no", with <it>no-halt</it> being the representation of an algorithm that never halts. If this is not true, then this will hold for the negation of the property. Since <it>P</it> decides a non-trivial property, it follows that there is a string <it>b</it> that represents an algorithm and <it>P</it>(<it>b</it>) = "yes".  We can then define an algorithm <it>H</it>(<it>a</it>, <it>i</it>) as follows:</p>
<p>

<indent level="1">

1. construct a string <it>t</it> that represents an algorithm <it>T</it>(<it>j</it>) such that 
</indent>
:* <it>T</it> first simulates the computation of <b>F</b><it>a</it>(<it>i</it>) 
<list>
<entry level="2" type="bullet">

 then <it>T</it> simulates the computation of <b>F</b><it>b</it>(<it>j</it>) and returns its result.  </entry>
<entry level="1" type="indent">

2. return <it>P</it>(<it>t</it>)</entry>
</list>
</p>
<p>

We can now show that <it>H</it> decides the halting problem: </p>
<p>

<list>
<entry level="1" type="bullet">

 Assume that the algorithm represented by <it>a</it> halts on input <it>i</it>. In this case <b>F</b><it>t</it> = <b>F</b><it>b</it> and, because <it>P</it>(<it>b</it>) = "yes" and the output of <it>P</it>(<it>x</it>) depends only on <b>F</b><it>x</it>, it follows that <it>P</it>(<it>t</it>) = "yes" and, therefore <it>H</it>(<it>a</it>, <it>i</it>) = "yes".</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 Assume that the algorithm represented by <it>a</it> does not halt on input <it>i</it>. In this case <b>F</b><it>t</it> = <b>F</b><it>no-halt</it>, i.e., the partial function that is never defined. Since <it>P</it>(<it>no-halt</it>) = "no" and the output of <it>P</it>(<it>x</it>) depends only on <b>F</b><it>x</it>, it follows that <it>P</it>(<it>t</it>) = "no" and, therefore <it>H</it>(<it>a</it>, <it>i</it>) = "no".</entry>
</list>
</p>
<p>

Since the halting problem is known to be undecidable, this is a contradiction and the assumption that there is an algorithm <it>P</it>(<it>a</it>) that decides a non-trivial property for the function represented by <it>a</it> must be false.</p>

</ss1>
</sec>
<sec>
<st>
Rice's theorem and index sets</st>
<p>

Rice's theorem can be succinctly stated in terms of index sets:</p>
<p>

<indent level="1">

Let <math>\mathcal{C}</math> be a class of partial recursive functions with <link xlink:type="simple" xlink:href="../368/18821368.xml">
index set</link> <math>C</math>.  Then <math>C</math> is <link xlink:type="simple" xlink:href="../798/54798.xml">
recursive</link> if and only if <math>C</math> is empty, or <math>C</math> is all of <math>\omega</math>.
</indent>

where <math>\omega</math> is the set of <link xlink:type="simple" xlink:href="../474/21474.xml">
natural numbers</link>, including <link xlink:type="simple" xlink:href="../513/34513.xml">
zero</link>.</p>

</sec>
<sec>
<st>
See also</st>
<p>

<list>
<entry level="1" type="bullet">

<statement wordnetid="106722453" confidence="0.8">
<message wordnetid="106598915" confidence="0.8">
<theorem wordnetid="106752293" confidence="0.8">
<proposition wordnetid="106750804" confidence="0.8">
<link xlink:type="simple" xlink:href="../922/15081922.xml">
Rice-Shapiro theorem</link></proposition>
</theorem>
</message>
</statement>
</entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../414/155414.xml">
Recursion theory</link></entry>
</list>
</p>

</sec>
<sec>
<st>
References</st>
<p>

<list>
<entry level="1" type="bullet">

Rice, H. G. "<weblink xlink:type="simple" xlink:href="http://links.jstor.org/sici?sici=0002-9947%28195303%2974%3A2%3C358%3ACORESA%3E2.0.CO%3B2-N|">
Classes of Recursively Enumerable Sets and Their Decision Problems</weblink>." Trans. Amer. Math. Soc. <b>74</b>, 358-366, 1953.</entry>
</list>
</p>

</sec>
<sec>
<st>
External links</st>
<p>

<list>
<entry level="1" type="bullet">

 <cite id="Reference-Mathworld-Rice's theorem"><physical_entity wordnetid="100001930" confidence="0.8">
<communicator wordnetid="109610660" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<intellectual wordnetid="109621545" confidence="0.8">
<encyclopedist wordnetid="110055566" confidence="0.8">
<compiler wordnetid="109946957" confidence="0.8">
<alumnus wordnetid="109786338" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<writer wordnetid="110794014" confidence="0.8">
<mathematician wordnetid="110301261" confidence="0.8">
<scholar wordnetid="110557854" confidence="0.8">
<link xlink:type="simple" xlink:href="../189/836189.xml">
Eric W. Weisstein</link></scholar>
</mathematician>
</writer>
</scientist>
</causal_agent>
</alumnus>
</compiler>
</encyclopedist>
</intellectual>
</person>
</communicator>
</physical_entity>
, <it><weblink xlink:type="simple" xlink:href="http://mathworld.wolfram.com/RicesTheorem.html">
Rice's theorem</weblink></it> at <computer wordnetid="103082979" confidence="0.8">
<work wordnetid="104599396" confidence="0.8">
<creation wordnetid="103129123" confidence="0.8">
<machine wordnetid="103699975" confidence="0.8">
<reference_book wordnetid="106417598" confidence="0.8">
<publication wordnetid="106589574" confidence="0.8">
<encyclopedia wordnetid="106427387" confidence="0.8">
<product wordnetid="104007894" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<book wordnetid="106410904" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<web_site wordnetid="106359193" confidence="0.8">
<link xlink:type="simple" xlink:href="../235/374235.xml">
MathWorld</link></web_site>
</device>
</book>
</instrumentality>
</artifact>
</product>
</encyclopedia>
</publication>
</reference_book>
</machine>
</creation>
</work>
</computer>
.</cite></entry>
</list>
</p>


</sec>
</bdy>
</proposition>
</theorem>
</message>
</statement>
</article>
