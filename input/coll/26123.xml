<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 15:33:54[mciao0828] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>Real-time operating system</title>
<id>26123</id>
<revision>
<id>241957228</id>
<timestamp>2008-09-30T07:02:26Z</timestamp>
<contributor>
<username>SmackBot</username>
<id>433328</id>
</contributor>
</revision>
<categories>
<category>Real-time operating systems</category>
<category>Operating system technology</category>
<category>Embedded operating systems</category>
</categories>
</header>
<bdy>

A <b>real-time operating            system</b> (<b>RTOS</b>; generally pronounced as "are-toss") is a <link xlink:type="simple" xlink:href="../857/6857.xml">
multitasking</link> <link xlink:type="simple" xlink:href="../194/22194.xml">
operating system</link> intended for <link xlink:type="simple" xlink:href="../767/25767.xml">
real-time</link> applications. Such applications include <link xlink:type="simple" xlink:href="../630/46630.xml">
embedded system</link>s (programmable thermostats, household appliance controllers, <link xlink:type="simple" xlink:href="../137/19644137.xml">
mobile telephones</link>), industrial <link xlink:type="simple" xlink:href="../781/25781.xml">
robot</link>s, spacecraft, industrial control (see <link xlink:type="simple" xlink:href="../437/62437.xml">
SCADA</link>), and scientific research equipment.<p>

An RTOS facilitates  the creation of a real-time system, but does not guarantee the final result will be real-time; this requires correct development of the software. An RTOS does not necessarily have high <link xlink:type="simple" xlink:href="../932/30932.xml">
throughput</link>; rather, an RTOS provides facilities which, if used properly, guarantee deadlines can be met generally (<link xlink:type="simple" xlink:href="../767/25767.xml#xpointer(//*[./st=%22Hard+and+soft+real-time+systems%22])">
soft real-time</link>) or deterministically (<link xlink:type="simple" xlink:href="../767/25767.xml#xpointer(//*[./st=%22Hard+and+soft+real-time+systems%22])">
hard real-time</link>). An RTOS will typically use specialized scheduling algorithms in order to provide the real-time developer with the tools necessary to produce deterministic behavior in the final system. An RTOS is valued more for how quickly and/or predictably it can respond to a particular event than for the given amount of work it can perform over time. Key factors in an RTOS are therefore a minimal <link xlink:type="simple" xlink:href="../467/15467.xml">
interrupt latency</link> and a minimal <link xlink:type="simple" xlink:href="../032/9445032.xml">
thread switching latency</link>.</p>
<p>

An early example of a large-scale <b>real-time</b> operating system was <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../433/30433.xml">
Transaction Processing Facility</link></O>
 developed by <airline wordnetid="102690081" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../ury/24th_century.xml">
American Airlines</link></airline>
 and <link xlink:type="simple" xlink:href="../259/18622259.xml">
IBM</link> for the <link xlink:type="simple" xlink:href="../993/1155993.xml">
Sabre Airline Reservations System</link>.</p>

<sec>
<st>
 Design philosophies </st>

<p>

Two basic designs exist:</p>
<p>

<list>
<entry level="1" type="bullet">

 Event-driven (priority scheduling) designs switch tasks only when an event of higher priority needs service, called pre-emptive priority.</entry>
<entry level="1" type="bullet">

 Time-sharing designs switch tasks on a clock interrupt, and on events, called <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../074/233074.xml">
round robin</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
.</entry>
</list>
</p>
<p>

Time-sharing designs switch tasks more often than is strictly needed, but give smoother, more deterministic <link xlink:type="simple" xlink:href="../857/6857.xml">
multitasking</link>, giving the illusion that a process or user has sole use of a machine.</p>
<p>

Early <link xlink:type="simple" xlink:href="../597/7597.xml">
CPU design</link>s needed many cycles to switch tasks, during which the CPU could do nothing useful. So early OSes tried to minimize wasting CPU time by maximally avoiding unnecessary task-switches.</p>
<p>

More recent CPUs take far less time to switch from one task to another; the extreme case is <link xlink:type="simple" xlink:href="../824/1274824.xml">
barrel processor</link>s that switch from one task to the next in zero cycles. Newer RTOSes almost invariably implement time-sharing scheduling with priority driven pre-emptive scheduling.</p>

</sec>
<sec>
<st>
 Scheduling </st>
<p>

In typical designs, a task has three states: 1) running, 2) ready, 3) blocked.  Most tasks are blocked, most of the time.  Only one task per CPU is running. In simpler systems, the ready list is usually short, two or three tasks at most.</p>
<p>

The real key is designing the scheduler. Usually the data structure of the ready list in the scheduler is designed to minimize the worst-case length of time spent in the scheduler's critical section, during which preemption is inhibited, and, in some cases, all interrupts are disabled. But, the choice of data structure depends also on the maximum number of tasks that can be on the ready list.</p>
<p>

If there are never more than a few tasks on the ready list, then a simple unsorted bidirectional linked list of ready tasks is likely optimal. If the ready list usually contains only a few tasks but occasionally contains more, then the list should be sorted by priority, so that finding the highest priority task to run does not require iterating through the entire list. Inserting a task then requires walking the ready list until reaching either the end of the list, or a task of lower priority than that of the task being inserted. Care must be taken not to inhibit preemption during this entire search; the otherwise-long critical section should probably be divided into small pieces, so that if, during the insertion of a low priority task, an interrupt occurs that makes a high priority task ready, that high priority task can be inserted and run immediately (before the low priority task is inserted).</p>
<p>

The critical response time, sometimes called the flyback time, is the time it takes to queue a new ready task and restore the state of the highest priority task.  In a well-designed RTOS, readying a new task will take 3-20 instructions per ready queue entry, and restoration of the highest-priority ready task will take 5-30 instructions.  On a 20MHz <chip wordnetid="103020034" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<microprocessor wordnetid="103760310" confidence="0.8">
<conductor wordnetid="103088707" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<semiconductor_device wordnetid="104171831" confidence="0.8">
<link xlink:type="simple" xlink:href="../270/20270.xml">
68000</link></semiconductor_device>
</device>
</conductor>
</microprocessor>
</instrumentality>
</artifact>
</chip>
 processor, task switch times run about 20 microseconds with two tasks ready.  100 MHz <chip wordnetid="103020034" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<microprocessor wordnetid="103760310" confidence="0.8">
<conductor wordnetid="103088707" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<semiconductor_device wordnetid="104171831" confidence="0.8">
<link xlink:type="simple" xlink:href="../558/60558.xml">
ARM</link></semiconductor_device>
</device>
</conductor>
</microprocessor>
</instrumentality>
</artifact>
</chip>
 CPUs switch in a few microseconds.</p>
<p>

In more advanced real-time systems, real-time tasks share computing resources with many non-real-time tasks, and the ready list can be arbitrarily long. In such systems, a scheduler ready list implemented as a linked list would be inadequate.</p>

<ss1>
<st>
 Algorithms </st>
<p>

Some commonly used RTOS scheduling algorithms are:
<list>
<entry level="1" type="bullet">

 Cooperative scheduling</entry>
<entry level="2" type="bullet">

 <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../074/233074.xml">
Round-robin scheduling</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</entry>
<entry level="2" type="bullet">

 <link xlink:type="simple" xlink:href="../731/7564731.xml">
Fixed priority pre-emptive scheduling</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../566/2204566.xml">
Preemptive scheduling</link></entry>
<entry level="2" type="bullet">

 <link xlink:type="simple" xlink:href="../566/2204566.xml#xpointer(//*[./st=%22Time+slice%22])">
Preemptive time slicing</link></entry>
<entry level="2" type="bullet">

 Critical section preemptive scheduling</entry>
<entry level="2" type="bullet">

 Static time scheduling</entry>
<entry level="1" type="bullet">

 <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../507/237507.xml">
Earliest Deadline First</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
 approach</entry>
<entry level="1" type="bullet">

 Advanced scheduling using the stochastic and MTG</entry>
</list>
</p>

</ss1>
</sec>
<sec>
<st>
 Intertask communication and resource sharing </st>
<p>

Multitasking systems must manage sharing data and hardware resources among multiple tasks.  It is usually "unsafe" for two tasks to access the same specific data or hardware resource simultaneously.  ("Unsafe" means the results are inconsistent or unpredictable, particularly when one task is in the midst of changing a data collection.  The view by another task is best done either before any change begins, or after changes are completely finished.)  There are three common approaches to resolve this problem:
<list>
<entry level="1" type="bullet">

 Temporarily masking/disabling <link xlink:type="simple" xlink:href="../289/15289.xml">
interrupt</link>s</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../557/164557.xml">
Binary semaphore</link>s</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../867/1324867.xml">
Message passing</link></entry>
</list>
</p>
<p>

General-purpose operating systems usually do not allow user programs to mask (disable) interrupts, because the user program could  control the CPU for as long as it wished.  Modern CPUs make the interrupt disable control bit (or instruction) inaccessible in <link xlink:type="simple" xlink:href="../467/93467.xml">
user mode</link> to allow operating systems to prevent user tasks from doing this.  Many embedded systems and RTOSs, however, allow the application itself to run in <link>
kernel mode</link> for greater <link xlink:type="simple" xlink:href="../908/102908.xml">
system call</link> efficiency and also to permit the application to have greater control of the operating environment without requiring OS intervention.</p>
<p>

On single-processor systems, if the application runs in kernel mode and can mask interrupts, often that is the best (lowest overhead) solution to preventing simultaneous access to a shared resource.  While interrupts are masked, the current task has <it>exclusive</it> use of the CPU; no other task or interrupt can take control, so the critical section is effectively protected.  When the task exits its critical section, it must unmask interrupts; pending interrupts, if any, will then execute.  Temporarily masking interrupts should only be done when the longest path through the <link xlink:type="simple" xlink:href="../312/638312.xml">
critical section</link> is shorter than the desired maximum <link xlink:type="simple" xlink:href="../467/15467.xml">
interrupt latency</link>, or else this method will increase the system's maximum interrupt latency.  Typically this method of protection is used only when the critical section is just a few source code lines long and contains no loops.  This method is ideal for protecting hardware bitmapped registers when the bits are controlled by different tasks.</p>
<p>

When the critical section is longer than a few source code lines or involves lengthy looping, an embedded/real-time programmer must resort to using mechanisms identical or similar to those available on general-purpose operating systems, such as semaphores and OS-supervised interprocess messaging.  Such mechanisms involve system calls, and usually invoke the OS's dispatcher code on exit, so they can take many hundreds of CPU instructions to execute, while masking interrupts may take as few as three instructions on some processors.  But for longer critical sections, there may be no choice; interrupts cannot be masked for long periods without increasing the system's interrupt latency.</p>
<p>

A binary <b>semaphore</b> is either locked or unlocked.  When it is locked, a queue of tasks can wait for the semaphore.  Typically a task can set a timeout on its wait for a semaphore.  Problems with semaphore based designs are well known: <link xlink:type="simple" xlink:href="../507/521507.xml">
priority inversion</link> and <link xlink:type="simple" xlink:href="../181/105181.xml">
deadlock</link>s.</p>
<p>

In <b>priority inversion</b>, a high priority task waits because a low priority task has a semaphore.  A typical solution is to have the task that has a semaphore run at (inherit) the priority of the highest waiting task. But this simplistic approach fails when there are multiple levels of waiting (A waits for a binary semaphore locked by B, which waits for a binary semaphore locked by C). Handling multiple levels of inheritance without introducing instability in cycles is not straightforward.</p>
<p>

In a <b>deadlock</b>, two or more tasks lock a number of binary semaphores and then wait forever (no timeout) for other binary semaphores, creating a cyclic dependency graph.  The simplest deadlock scenario occurs when two tasks lock two semaphores in lockstep, but in the opposite order.  Deadlock is usually prevented by careful design, or by having floored semaphores (which pass control of a semaphore to the higher priority task on defined conditions).</p>
<p>

The other approach to resource sharing is for tasks to send <b>messages</b>.  In this paradigm, the resource is managed directly by only one task; when another task wants to interrogate or manipulate the resource, it sends a message to the managing task.  This paradigm suffers from similar problems as binary semaphores: Priority inversion occurs when a task is working on a low-priority message, and ignores a higher-priority message (or a message originating indirectly from a high priority task) in its in-box.  Protocol deadlocks occur when two or more tasks wait for each other to send response messages.</p>
<p>

Although their real-time behavior is less crisp than semaphore systems, simple message-based systems usually do not have protocol deadlock hazards, and are generally better-behaved than semaphore systems.</p>

</sec>
<sec>
<st>
 Interrupt handlers and the scheduler </st>
<p>

Since an interrupt handler blocks the highest priority task from running, and since real time operating systems are designed to keep thread latency to a minimum, interrupt handlers are typically kept as short as possible. The interrupt handler defers all interaction with the hardware as long as possible; typically all that is necessary is to acknowledge or disable the interrupt (so that it won't occur again when the interrupt handler returns). The interrupt handler then queues work to be done at a lower priority level, often by unblocking a driver task (through releasing a semaphore or sending a message). The scheduler often provides the ability to unblock a task from interrupt handler context.</p>

</sec>
<sec>
<st>
 Memory allocation </st>
<p>

<link xlink:type="simple" xlink:href="../117/547117.xml">
Memory allocation</link> is even more critical in an RTOS than in other operating systems.</p>
<p>

First, speed of allocation is important. A standard memory allocation scheme scans a linked list of indeterminate length to find a suitable free memory block; however, this is unacceptable as memory allocation has to occur in a fixed time in an RTOS.</p>
<p>

Second, memory can become <link xlink:type="simple" xlink:href="../369/3909369.xml">
fragmented</link> as free regions become separated by regions that are in use.  This can cause a program to stall, unable to get memory, even though there is theoretically enough available.  Memory allocation algorithms that slowly accumulate fragmentation may work fine for desktop machines&mdash;when <link>
reboot</link>ed every month or so&mdash;but are unacceptable for embedded systems that often run for years without rebooting.</p>
<p>

The simple <link xlink:type="simple" xlink:href="../117/547117.xml#xpointer(//*[./st=%22Fixed-size-blocks+allocation%22])">
fixed-size-blocks</link> algorithm works astonishingly well for simple <link xlink:type="simple" xlink:href="../630/46630.xml">
embedded system</link>s.  </p>
<p>

Another real strength of fixed size blocks is for DSP systems particularly where one core is performing one section of the pipeline and the next section is being done on another core.  In this case, fixed size buffer management with one core filling the buffers and another set of cores returning the buffers is very efficient.  A DSP optimized RTOS like <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../404/7611404.xml">
Unison Operating System</link></O>
 or <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../928/12578928.xml">
DSPnano RTOS</link></O>
 provides these features.</p>
<p>

See <link xlink:type="simple" xlink:href="../117/547117.xml">
memory allocation</link> for more details.</p>

</sec>
<sec>
<st>
Examples</st>
<p>

These are the best known, most widely deployed real-time operating systems.  See <link xlink:type="simple" xlink:href="../151/17548151.xml">
List of real-time operating systems</link> for a comprehensive list.  Also, see <link xlink:type="simple" xlink:href="../916/71916.xml">
List of operating systems</link> for all types of operating systems.</p>
<p>

<list>
<entry level="1" type="bullet">

 <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../184/65184.xml">
QNX</link></O>
</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../232/419232.xml">
RTLinux</link></entry>
<entry level="1" type="bullet">

 <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../105/157105.xml">
VxWorks</link></O>
</entry>
<entry level="1" type="bullet">

 <family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../483/519483.xml">
TRON</link></family>
</entry>
</list>
</p>

</sec>
<sec>
<st>
See also</st>

<p>

<image location="none" width="50px" src="Wikibooks-logo-en.svg">
<caption>

Wikibooks
</caption>
</image>

Wikibooks'  has more about this subject:
</p>

<p>

<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../469/4419469.xml">
Adaptive Partition Scheduler</link></entry>
<entry level="1" type="bullet">

 <generic wordnetid="107899976" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../473/Form_4473.xml">
BIOS</link></generic>
</entry>
<entry level="1" type="bullet">

 <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../507/237507.xml">
Earliest deadline first scheduling</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../194/22194.xml">
Operating system</link></entry>
<entry level="1" type="bullet">

 <standard wordnetid="107260623" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../305/23305.xml">
POSIX</link></system_of_measurement>
</standard>
</entry>
<entry level="1" type="bullet">

 <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../185/2050185.xml">
Least slack time scheduling</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</entry>
<entry level="1" type="bullet">

 <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../055/233055.xml">
Rate-monotonic scheduling</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.ingelec.uns.edu.ar/rts/soos/">
SOOS Project</weblink></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../347/2211347.xml">
Synchronous programming language</link></entry>
<entry level="1" type="bullet">

 <standard wordnetid="107260623" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../968/2625968.xml">
DO-178B</link></system_of_measurement>
</standard>
</entry>
</list>
</p>

<p>

<table style=";" class="navbox" cellspacing="0">
<row>
<col style="padding:2px;">
<table style="width:100%;background:transparent;color:inherit;;" class="nowraplinks collapsible autocollapse " cellspacing="0">
<row>
<header colspan="2" style=";" class="navbox-title">
<link xlink:type="simple" xlink:href="../123/26123.xml">
Real-time operating system</link>s (RTOS)</header>
</row>
<row style="height:2px;">

</row>
<row>
<col colspan="2" style="width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../710/14415710.xml">
ChibiOS/RT</link></O>
&nbsp;·  <software wordnetid="106566077" confidence="0.8">
<application wordnetid="106570110" confidence="0.8">
<program wordnetid="106568978" confidence="0.8">
<browser wordnetid="106571301" confidence="0.8">
<written_communication wordnetid="106349220" confidence="0.8">
<writing wordnetid="106359877" confidence="0.8">
<code wordnetid="106355894" confidence="0.8">
<coding_system wordnetid="106353757" confidence="0.8">
<link xlink:type="simple" xlink:href="../237/849237.xml">
Contiki</link></coding_system>
</code>
</writing>
</written_communication>
</browser>
</program>
</application>
</software>
&nbsp;·  <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../172/51172.xml">
DNIX</link></O>
&nbsp;·  <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../524/7275524.xml">
DSOS</link></O>
&nbsp;·  <link xlink:type="simple" xlink:href="../225/432225.xml">
eCos</link>&nbsp;·  <link xlink:type="simple" xlink:href="../204/1146204.xml">
Embedded Linux</link>&nbsp;·  <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../077/353077.xml">
EROS</link></database>
</wordnet>
</lexical_database>
</electronic_database>
</information>
</message>
&nbsp;·  <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../217/2152217.xml">
FreeRTOS</link></O>
&nbsp;·  <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../980/867980.xml">
LynxOS</link></O>
&nbsp;·  <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../256/160256.xml">
MenuetOS</link></O>
&nbsp;·  <link xlink:type="simple" xlink:href="../242/18921242.xml">
MERT</link>&nbsp;·  <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../339/903339.xml">
Nucleus RTOS</link></O>
&nbsp;·  <link xlink:type="simple" xlink:href="../001/16260001.xml">
Open AT OS</link>&nbsp;·  <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../093/39093.xml">
OS-9</link></O>
&nbsp;·  <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../503/431503.xml">
OSE</link></O>
&nbsp;·  <link xlink:type="simple" xlink:href="../926/85926.xml">
pSOS</link>&nbsp;·  <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../179/2161179.xml">
Prex</link></O>
&nbsp;·  <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../184/65184.xml">
QNX</link></O>
&nbsp;·  <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../130/1209130.xml">
RMX</link></O>
&nbsp;·  <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../342/62342.xml">
RSX-11</link></O>
&nbsp;·  <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../309/69309.xml">
RT-11</link></O>
&nbsp;·  <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../806/3673806.xml">
RTEMS</link></O>
&nbsp;·  <link xlink:type="simple" xlink:href="../232/419232.xml">
RTLinux</link>&nbsp;·  <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../313/3302313.xml">
SINTRAN III</link></O>
&nbsp;·  <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../446/72446.xml">
Symbian OS</link></O>
&nbsp;·   <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../550/10735550.xml">
Talon DSP RTOS</link></O>
&nbsp;·  <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../766/1593766.xml">
THEOS</link></database>
</wordnet>
</lexical_database>
</electronic_database>
</information>
</message>
&nbsp;·  <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../433/30433.xml">
TPF</link></O>
&nbsp;·  <family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../483/519483.xml">
TRON</link></family>
&nbsp;·  <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../567/327567.xml">
VRTX</link></O>
&nbsp;·  <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../105/157105.xml">
VxWorks</link></O>
&nbsp;·  <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../360/230360.xml">
Windows CE</link></O>
</col>
</row>
</table>
</col>
</row>
</table>
</p>



</sec>
</bdy>
</article>
