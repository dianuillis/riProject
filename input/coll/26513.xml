<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 15:33:22[mciao0825] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>Reverse Polish notation</title>
<id>26513</id>
<revision>
<id>244328556</id>
<timestamp>2008-10-10T07:55:51Z</timestamp>
<contributor>
<username>Latics</username>
<id>4656569</id>
</contributor>
</revision>
<categories>
<category>Articles with example Python code</category>
<category>Articles with specifically-marked weasel-worded phrases</category>
<category>Calculators</category>
<category>Mathematical notation</category>
</categories>
</header>
<bdy>
<template>
<name>Infobox notation</name>
<parameters>
<logo>
<image width="125px" src="postfix-dia.png">
</image>
</logo>
</parameters>
</template>


<b>Reverse Polish notation</b> (or just <b>RPN</b>) by analogy with the related <notation wordnetid="106808493" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../056/25056.xml">
Polish notation</link></notation>
, a prefix notation introduced in 1920 by the <country wordnetid="108544813" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../936/22936.xml">
Polish</link></country>
 mathematician <link>
Jan Łukasiewicz</link>, is a mathematical notation wherein every operator follows all of its operands. It is also known as <b>Postfix notation</b> and is parenthesis-free.<p>

The Reverse Polish scheme was proposed by <link xlink:type="simple" xlink:href="../375/2702375.xml">
F. L. Bauer</link> and <link xlink:type="simple" xlink:href="../018/10018.xml">
E. W. Dijkstra</link> in the early 1960s to reduce computer memory access and utilize the <link xlink:type="simple" xlink:href="../993/273993.xml">
stack</link> to evaluate expressions. The notation and algorithms for this scheme were enriched by <country wordnetid="108544813" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../264/4689264.xml">
Australia</link></country>
n philosopher and computer scientist <link xlink:type="simple" xlink:href="../790/19501790.xml">
Charles Hamblin</link> in the mid-1960s.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref><ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%222%22])">2</ref></p>
<p>

Most of what follows is about <link xlink:type="simple" xlink:href="../948/3948.xml">
binary operator</link>s. A <link xlink:type="simple" xlink:href="../006/161006.xml">
unary operator</link> for which the Reverse Polish notation is the general convention is the <link xlink:type="simple" xlink:href="../606/10606.xml">
factorial</link>.</p>

<sec>
<st>
 Explanation </st>
<p>

In Reverse Polish notation the <link xlink:type="simple" xlink:href="../213/22213.xml">
operator</link>s follow their <link xlink:type="simple" xlink:href="../656/22656.xml">
operands</link>; for instance, to add three and four, one would write "3 4 +" rather than "3 + 4".  If there are multiple operations, the operator is given immediately after its second operand; so the expression written "3 − 4 + 5" in conventional infix notation would be written "3 4 − 5 +" in RPN: first subtract 4 from 3, then add 5 to that.  An advantage of RPN is that it obviates the need for parentheses that are required by infix.  While "3 − 4 * 5" can also be written "3 − (4 * 5)", that means something quite different from "(3 − 4) * 5", and only the parentheses disambiguate the two meanings.  In postfix, the former would be written "3 4 5 * −", which unambiguously means "3 (4 5 *) −".</p>
<p>

Interpreters of Reverse Polish notation are often <link xlink:type="simple" xlink:href="../993/273993.xml">
stack</link>-based; that is, operands are pushed onto a stack, and when an operation is performed, its operands are popped from a stack and its result pushed back on.  Stacks, and therefore RPN, have the advantage of being easy to implement and very fast.</p>
<p>

Note that, despite the name, reverse Polish notation is not exactly the reverse of Polish notation, as the operands of non-<link xlink:type="simple" xlink:href="../390/294390.xml">
commutative</link> operations are still written in the conventional order (e.g. "6 3 /" in reverse Polish corresponds to "/ 6 3" in Polish notation, these both evaluating to 2).  Numbers are also written with the digits in the conventional order.</p>

</sec>
<sec>
<st>
 Practical implications </st>

<p>

<list>
<entry level="1" type="bullet">

 Calculations occur as soon as an operator is specified.  Thus, expressions are not entered wholesale from right to left but calculated one piece at a time from the centre outwards.  This results in fewer operator errors when performing complex calculations.</entry>
<entry level="1" type="bullet">

 The automatic stack permits the automatic storage of intermediate results for use later: this key feature is what permits RPN calculators easily to evaluate expressions of arbitrary complexity: they do not have limits on the complexity of expression they can calculate, unlike typical scientific calculators.</entry>
<entry level="1" type="bullet">

 Brackets and parentheses are unnecessary: the user simply performs calculations in the order that is required, letting the automatic stack store intermediate results on the fly for later use.  Likewise, there is no requirement for the <link xlink:type="simple" xlink:href="../980/212980.xml">
precedence</link> rules required in infix notation.</entry>
<entry level="1" type="bullet">

 In RPN calculators, no <it>equals</it> key is required to force computation to occur.</entry>
<entry level="1" type="bullet">

 RPN calculators do, however, require an <it>enter</it> key to separate two adjacent numeric operands.</entry>
<entry level="1" type="bullet">

 The machine state is always a stack of values awaiting operation; it is impossible to enter an operator onto the stack.  This makes use conceptually easy compared to more complex entry methods.</entry>
<entry level="1" type="bullet">

 Educationally, RPN calculators have the advantage that the user must understand the expression being calculated: it is not possible to simply copy the expression from paper into the machine and read off the answer without understanding.  One must calculate from the middle of the expression, which makes life easier but only if the user understands what they are doing.</entry>
<entry level="1" type="bullet">

 Reverse Polish notation also reflects the way calculations are done on pen and paper. One first writes the numbers down and then performs the calculation. Thus the concept is easy to teach.</entry>
<entry level="1" type="bullet">

 The widespread use of infix electronic calculators using (<link xlink:type="simple" xlink:href="../014/199014.xml">
infix</link>) in educational systems can make RPN impractical at times due to rigid teaching methods; but once learned, most users of RPN find that it is faster and easier to calculate expressions,&#91;&#93; particularly the more complex ones, than with a conventional <it>scientific</it> calculator.  It is also easy for a computer to convert <link xlink:type="simple" xlink:href="../014/199014.xml">
infix notation</link> to postfix, most notably via Dijkstra's shunting yard algorithm - see <link xlink:type="simple" xlink:href="#xpointer(//*[./st=%22Converting+from+infix+notation%22])">
converting from infix notation</link> below.</entry>
<entry level="1" type="bullet">

Users must know the size of the stack, since practical implementations of RPN use different sizes for the stack. For example, the <link xlink:type="simple" xlink:href="../985/966985.xml">
algebraic</link> expression <b>1-1.001^(-6.2-2^3π)</b>, if performed with a stack size of 4 and executed from left to right, would exhaust the stack. The answer might be given as an <link xlink:type="simple" xlink:href="../554/14554.xml">
imaginary number</link> instead of approximately 0.5 as a <link xlink:type="simple" xlink:href="../491/19725491.xml">
real number</link>. To the novice user, calculations performed without regard to the limits of the stack would be inexplicably wrong.</entry>
<entry level="1" type="bullet">

 When writing RPN on paper, a job that is very rarely needed, adjacent numbers have to have a space between them. This requires clear handwriting to prevent confusion (for instance, 12 34 + could look a lot like 123 4 +).</entry>
</list>
</p>

</sec>
<sec>
<st>
The postfix algorithm</st>
<p>

The algorithm for evaluating any postfix expression is fairly straightforward:
<list>
<entry level="1" type="bullet">

 While there are input tokens left</entry>
<entry level="2" type="bullet">

 Read the next token from input.</entry>
<entry level="2" type="bullet">

 If the token is a value</entry>
<entry level="3" type="bullet">

 Push it onto the stack.</entry>
<entry level="2" type="bullet">

 Otherwise, the token is an operator.</entry>
<entry level="3" type="bullet">

 It is known <it>a priori</it> that the operator takes <b>n</b> arguments.</entry>
<entry level="3" type="bullet">

 If there are fewer than <b>n</b> values on the stack</entry>
<entry level="4" type="bullet">

 <b>(Error)</b> The user has not input sufficient values in the expression.</entry>
<entry level="3" type="bullet">

 Else, Pop the top <b>n</b> values from the stack.</entry>
<entry level="3" type="bullet">

 Evaluate the operator, with the values as arguments.</entry>
<entry level="3" type="bullet">

 Push the returned results, if any, back onto the stack.</entry>
<entry level="1" type="bullet">

 If there is only one value in the stack</entry>
<entry level="2" type="bullet">

 That value is the result of the calculation.</entry>
<entry level="1" type="bullet">

 If there are more values in the stack</entry>
<entry level="2" type="bullet">

 <b>(Error)</b> The user input too many values.</entry>
</list>
</p>

<ss1>
<st>
 Example </st>
<p>

The infix expression "5 + ((1 + 2) * 4) − 3" can be written down like this in RPN:
<indent level="1">

5 1 2 + 4 * + 3 −
</indent>

The expression is evaluated left-to-right, with the inputs interpreted as shown in the following table (the <it>Stack</it> is the list of values the algorithm is "keeping track of" after the <it>Operation</it> given in the middle column has taken place):
<table class="wikitable">
<header>
Input</header>
<row>
<col>
Operation</col>
<col>
Stack</col>
<col>
Comment</col>
</row>
<row>
<col>
5</col>
<col>
Push operand</col>
<col>
5</col>
</row>
<row>
<col>
1</col>
<col>
Push operand</col>
<col>
5, 1</col>
</row>
<row>
<col>
2</col>
<col>
Push operand</col>
<col>
5, 1, 2</col>
</row>
<row>
<col>
+</col>
<col>
Add</col>
<col>
5, 3</col>
<col>
Pop two values (1, 2) and push result (3)</col>
</row>
<row>
<col>
4</col>
<col>
Push operand</col>
<col>
5, 3, 4</col>
</row>
<row>
<col>
*</col>
<col>
Multiply</col>
<col>
5, 12</col>
<col>
Pop two values (3, 4) and push result (12)</col>
</row>
<row>
<col>
+</col>
<col>
Add</col>
<col>
17</col>
<col>
Pop two values (5, 12) and push result (17)</col>
</row>
<row>
<col>
3</col>
<col>
Push operand</col>
<col>
17, 3</col>
</row>
<row>
<col>
−</col>
<col>
Subtract</col>
<col>
14</col>
<col>
Pop two values (17, 3) and push result (14)</col>
</row>
</table>

When a computation is finished, its result remains as the top (and only) value in the stack; in this case, 14.</p>
<p>

The above example could be rewritten by following the "chain calculation" method described by <link xlink:type="simple" xlink:href="../973/13973.xml">
HP</link> for their series of RPN calculators:</p>
<p>

"As was demonstrated in the Algebraic mode, it is usually easier (fewer keystrokes) in working a problem like this to begin with the arithmetic operations inside the parentheses first."<weblink xlink:type="simple" xlink:href="http://h20219.www2.hp.com/Hpsub/downloads/17b2pChain.pdf">
http://h20219.www2.hp.com/Hpsub/downloads/17b2pChain.pdf</weblink></p>
<p>

<indent level="1">

1 2 + 4 * 5 + 3 −
</indent>

</p>
</ss1>
</sec>
<sec>
<st>
 Converting from infix notation </st>

<p>

<indent level="1">

<it>Main article: <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../773/2692773.xml">
Shunting yard algorithm</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</it>
</indent>

<link xlink:type="simple" xlink:href="../018/10018.xml">
Edsger Dijkstra</link> invented the "shunting yard" algorithm to convert infix expressions to postfix (RPN), so named because its operation resembles that of a <link xlink:type="simple" xlink:href="../863/292863.xml">
railroad shunting yard</link>.</p>
<p>

There are other ways of producing postfix expressions from infix notation. Most <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../946/1301946.xml">
Operator-precedence parser</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
s can be modified to produce postfix expressions; in particular, once an <link xlink:type="simple" xlink:href="../629/75629.xml">
abstract syntax tree</link> has been constructed, the corresponding postfix expression is given by a simple <link xlink:type="simple" xlink:href="../584/597584.xml">
post-order traversal</link> of that tree.</p>

</sec>
<sec>
<st>
 Implementations </st>

<p>

The first computers to implement architectures enabling RPN were the English Electric Company's <computer wordnetid="103082979" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<machine wordnetid="103699975" confidence="0.8">
<link xlink:type="simple" xlink:href="../421/1111421.xml">
KDF9</link></machine>
</device>
</instrumentality>
</artifact>
</computer>
 machine, which was announced in 1960 and delivered (i.e. made available commercially) in 1963, and the American <computer wordnetid="103082979" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<machine wordnetid="103699975" confidence="0.8">
<link xlink:type="simple" xlink:href="../693/332693.xml">
Burroughs B5000</link></machine>
</device>
</instrumentality>
</artifact>
</computer>
, announced in 1961 and also delivered in 1963.   One of the designers of the B5000, <link xlink:type="simple" xlink:href="../006/1448006.xml">
Robert S. Barton</link>, later wrote that he developed RPN independently of Hamblin, sometime in 1958 while reading a textbook on symbolic logic, and before he was aware of Hamblin's work.   </p>
<p>

<company wordnetid="108058098" confidence="0.8">
<institution wordnetid="108053576" confidence="0.8">
<link xlink:type="simple" xlink:href="../224/4280224.xml">
Friden</link></institution>
</company>
 introduced RPN to the desktop calculator market with the EC-130 in June 1963.  <link xlink:type="simple" xlink:href="../973/13973.xml">
Hewlett-Packard</link> (HP) engineers designed the <physical_entity wordnetid="100001930" confidence="0.8">
<expert wordnetid="109617867" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<calculator wordnetid="109887034" confidence="0.8">
<link xlink:type="simple" xlink:href="../644/9096644.xml">
9100A Desktop Calculator</link></calculator>
</causal_agent>
</person>
</expert>
</physical_entity>
 in 1968 with RPN. This calculator popularized RPN among the scientific and engineering communities, even though early advertisements for the 9100A failed to mention RPN.  The <physical_entity wordnetid="100001930" confidence="0.8">
<expert wordnetid="109617867" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<calculator wordnetid="109887034" confidence="0.8">
<link xlink:type="simple" xlink:href="../629/449629.xml">
HP-35</link></calculator>
</causal_agent>
</person>
</expert>
</physical_entity>
, the world's first handheld scientific <link xlink:type="simple" xlink:href="../593/7593.xml">
calculator</link>, used RPN in 1972, as did the <link xlink:type="simple" xlink:href="../091/3940091.xml">
HP-10C</link> series of calculators, including the famous financial calculator, the HP-12C.  When Hewlett-Packard introduced a later business calculator, the <link>
HP-19B</link>, without RPN, feedback from financiers and others used to the 12-C compelled them to release the <link>
HP-19BII</link>, which gave users the option of using algebraic notation or RPN.</p>
<p>

Existing implementations using Reverse Polish notation include:
<list>
<entry level="1" type="bullet">

 Any <link xlink:type="simple" xlink:href="../837/910837.xml">
Stack-oriented programming language</link>, such as:</entry>
<entry level="2" type="bullet">

 <link xlink:type="simple" xlink:href="../012/11012.xml">
Forth</link></entry>
<entry level="2" type="bullet">

 <link xlink:type="simple" xlink:href="../398/891398.xml">
Factor</link></entry>
<entry level="2" type="bullet">

 <link xlink:type="simple" xlink:href="../080/24080.xml">
PostScript</link> page description language</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.farsightsoft.com">
RPN calculator</weblink> for Windows</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.microsoft.com/windowsxp/downloads/powertoys/xppowertoys.mspx">
Microsoft PowerToy calculator</weblink> for Windows XP</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://midp-calc.sourceforge.net">
RPN calculator for cellular phones</weblink>, in open source Java</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.nthlab.com/software/rpn">
RPN calculator</weblink> for <artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<link xlink:type="simple" xlink:href="../946/88946.xml">
Palm PDAs</link></device>
</instrumentality>
</artifact>
</entry>
<entry level="1" type="bullet">

 <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../249/3828249.xml">
Mac OS X Calculator</link></software>
</entry>
<entry level="1" type="bullet">

 Most <link xlink:type="simple" xlink:href="../973/13973.xml">
Hewlett-Packard</link> science/engineering and business/finance <link xlink:type="simple" xlink:href="../593/7593.xml">
calculator</link>s</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../399/54399.xml">
TI-89</link> and <physical_entity wordnetid="100001930" confidence="0.8">
<expert wordnetid="109617867" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<calculator wordnetid="109887034" confidence="0.8">
<link xlink:type="simple" xlink:href="../102/354102.xml">
TI-92 series</link></calculator>
</causal_agent>
</person>
</expert>
</physical_entity>
 via third party software <weblink xlink:type="simple" xlink:href="http://www.paxm.org/symbulator/download/rpn.html">
implementation</weblink></entry>
<entry level="1" type="bullet">

 <family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../642/31642.xml">
Unix system</link></family>
 calculator program <link xlink:type="simple" xlink:href="../904/562904.xml">
dc</link></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://web.newsguy.com/marcio/iphone/macalc/">
MAcalc</weblink> for the <link xlink:type="simple" xlink:href="../749/8841749.xml">
iPhone</link></entry>
<entry level="1" type="bullet">

 Interactive <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../845/9845.xml">
JavaScript</link></programming_language>
 <weblink xlink:type="simple" xlink:href="http://main.linuxfocus.org/~guido/javascript/rpnjcalc.html">
RPN calculator</weblink></entry>
<entry level="1" type="bullet">

 JavaScript <weblink xlink:type="simple" xlink:href="http://dse.webonastick.com/rpncalc/">
RPN calculator with keyboard-based user interface</weblink>, more like HP calculators</entry>
<entry level="1" type="bullet">

 Mouseless online <weblink xlink:type="simple" xlink:href="http://www.rpn-calculator.com">
RPN calculator</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.lowth.com/rope/LanguageReference">
Linux IpTables "Rope" programming language</weblink></entry>
<entry level="1" type="bullet">

  (RPN calculator implemented in <link xlink:type="simple" xlink:href="../242/1242.xml">
Ada</link>)</entry>
<entry level="1" type="bullet">

 <skilled_worker wordnetid="110605985" confidence="0.8">
<physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<editor wordnetid="110044879" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../234/18933234.xml#xpointer(//*[./st=%22Features%22])">
Emacs</link></causal_agent>
</worker>
</editor>
</person>
</physical_entity>
</skilled_worker>
 lisp library package: calc</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.vintagecalculators.com/html/sinclair___the_pocket_calculat.html">
Sinclair calculators </weblink></entry>
<entry level="1" type="bullet">

 Open source <link xlink:type="simple" xlink:href="../156/46156.xml">
GTK+</link> based <weblink xlink:type="simple" xlink:href="http://galculator.sourceforge.net/">
galculator</weblink></entry>
<entry level="1" type="bullet">

 Infix to Postfix Conversion / Postfix Evaluator / Postfix to Infix Conversion <weblink xlink:type="simple" xlink:href="http://www.java2s.com/Code/JavaScript/Development/Postfix-Infix.htm">
http://www.java2s.com/Code/JavaScript/Development/Postfix-Infix.htm</weblink></entry>
<entry level="1" type="bullet">

 Simple <weblink xlink:type="simple" xlink:href="http://www.randomwalking.com/misc/xul_rpn/rpn.xul">
XUL RPN Calculator </weblink></entry>
</list>
</p>

</sec>
<sec>
<st>
 A Postfix evaluator implemented in Python </st>

<p>

<list>
<entry level="1" type="number">

 Valid elements of input are binary operators, integers,</entry>
<entry level="1" type="number">

 and floating point numbers, separated by spaces.</entry>
<entry level="1" type="number">

   e.g.  100 2 / 2 ** 3.14 *</entry>
</list>

stack = 
for i in raw_input('Input: ').split():
if i[-1].isdigit():
stack.append(float(i))
else:
if len(stack)  2:
quit('Error: Too few input values')
else:
num2 = stack.pop()
num1 = stack.pop()
stack.append(eval('num1 %op num2' % i))
if len(stack) &amp;gt; 1:
quit('Error: Too many input values')
else:
print 'Answer: %op' % stack[0]</p>


</sec>
<sec>
<st>
 Notes </st>

<p>

<reflist>
<entry id="1">
<weblink xlink:type="simple" xlink:href="http://www.csc.liv.ac.uk/~peter/hamblin.html">
"Charles L. Hamblin and his work"</weblink> by Peter McBurney</entry>
<entry id="2">
<weblink xlink:type="simple" xlink:href="http://www.csc.liv.ac.uk/~peter/this-month/this-month-3-030303.html">
"Charles L. Hamblin: Computer Pioneer"</weblink> by Peter McBurney, July 27, 2008. "<it>Hamblin soon became aware of the problems of (a) computing mathematical formulae containing brackets, and (b) the memory overhead in having dealing with memory stores each of which had its own name. One solution to the first problem was Jan Lukasiewicz's Polish notation, which enables a writer of mathematical notation to instruct a reader the order in which to execute the operations (e.g. addition, multiplication, etc) without using brackets. Polish notation achieves this by having an operator (+, *, etc) precede the operands to which it applies, e.g., +ab, instead of the usual, a+b. Hamblin, with his training in formal logic, knew of Lukasiewicz's work.</it>" </entry>
</reflist>
</p>

</sec>
<sec>
<st>
 See also </st>

<p>

<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../012/11012.xml">
Forth (programming language)</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../080/24080.xml">
PostScript</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../952/1026952.xml">
HP calculators</link></entry>
<entry level="1" type="bullet">

 <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../937/4690937.xml">
LIFO</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</entry>
<entry level="1" type="bullet">

 <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<model wordnetid="110324560" confidence="0.8">
<assistant wordnetid="109815790" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../078/510078.xml">
Stack machine</link></causal_agent>
</worker>
</assistant>
</model>
</person>
</physical_entity>
</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../880/4768880.xml">
Subject Object Verb</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../904/4768904.xml">
Object Subject Verb</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../056/25056.xml">
Prefix notation</link> (Polish notation)</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../166/696166.xml">
Joy Programming Language</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../398/891398.xml">
Factor programming language</link></entry>
</list>
</p>


</sec>
<sec>
<st>
External links</st>
<p>

<list>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://rpnsolve.sourceforge.net">
RPNSolve</weblink> - Free commandline-based RPN solver for Linux/Unix , Open Source (Gnu GPL).  By Adam N. Ward</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://midp-calc.sourceforge.net/Calc.html">
 MIDP calculator</weblink> A powerful RPN calculator for cells: statistics, matrix, plot,...(GPL) - By Roar Lauritzsen</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.xnumber.com/xnumber/rpn_or_adl.htm">
<it>RPN or DAL? A brief analysis of Reverse Polish Notation against Direct Algebraic Logic''</it></weblink> – By James Redin</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.spsu.edu/cs/faculty/bbrown/web_lectures/postfix/">
Postfix Notation Mini-Lecture</weblink> – By Bob Brown</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.langmaker.com/shallowfith.htm">
Fith: An Alien Conlang With A LIFO Grammar</weblink> – By Jeffrey Henning</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://qalculate.sourceforge.net/">
Qalculate!</weblink> An open-source calculator with an RPN mode</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.tordivel.no/xcalc/">
XCALC: A Windows freeware RPN Calculator</weblink> – By Bernt Ribbum</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://lashwhip.com/grpn.html">
GRPN: A Graphical RPN Calculator</weblink> for Unix systems (GPL) – By Paul Wilkins</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://mtvoid.com/calcium/">
Calcium: A freeware RPN Calculator for S60 smartphones</weblink> – By mtvoid</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.objecttechnology.com/yarpncalc/">
YaRPNcalc: A freeware RPN Calculator for PocketPC</weblink> – By Philipp Tschannen</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.nthlab.com/software/rpn/">
RPN: An advanced, programmable postfix calculator with solving and graphing for Palm PDAs</weblink> - By Russell Y. Webb</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.phpclasses.org/browse/package/4078.html">
Simple RPN Interpreter written in PHP</weblink> - by Arturo González-Mata</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.speech.kth.se/calculator/">
Calculator.NET</weblink> - Enhanced Calculator for Windows with full RPN support</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://web.newsguy.com/marcio/iphone/macalc/">
MACalc</weblink> - HP16C based calculator for iPhone</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.benhaim.net/mecalc/mecalc.html">
Meculcalator</weblink> - An on-line Javascript RPN calculator with advanced features</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.cs.inf.ethz.ch/~wirth/Articles/GoodIdeas_origFig.pdf">
http://www.cs.inf.ethz.ch/~wirth/Articles/GoodIdeas_origFig.pdf</weblink> - Good Ideas remembered by Nick Wurth</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.cs.inf.ethz.ch/~wirth/Articles/GoodIdeas_origFig.pdf">
http://www.cs.inf.ethz.ch/~wirth/Articles/GoodIdeas_origFig.pdf</weblink> - Good Ideas remembered by Nick Wurth</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://home.scarlet.be/kpm/magenta2008/mg.html#rpn">
Magenta2008 RPN</weblink> - RPN calculator written in JavaScript with support of complex numbers and optional expression evaluation</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://free42.sourceforge.net/">
Free42 -- An HP-42S Calculator Simulator</weblink> - Free42 is a complete and free multi-platform re-implementation of the HP-42S calculator and the HP-82240 printer</entry>
</list>
</p>


</sec>
</bdy>
</article>
