<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 19:49:47[mciao0825] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<event  confidence="0.8" wordnetid="100029378">
<rule  confidence="0.8" wordnetid="105846932">
<act  confidence="0.8" wordnetid="100030358">
<psychological_feature  confidence="0.8" wordnetid="100023100">
<procedure  confidence="0.8" wordnetid="101023820">
<activity  confidence="0.8" wordnetid="100407535">
<algorithm  confidence="0.8" wordnetid="105847438">
<header>
<title>Edge disjoint shortest pair algorithm</title>
<id>2708054</id>
<revision>
<id>226551169</id>
<timestamp>2008-07-19T00:53:27Z</timestamp>
<contributor>
<username>CambridgeBayWeather</username>
<id>294180</id>
</contributor>
</revision>
</header>
<bdy>

<b>Edge disjoint shortest pair algorithm</b> is an <link xlink:type="simple" xlink:href="../775/775.xml">
algorithm</link> in <link xlink:type="simple" xlink:href="../592/4122592.xml">
computer network</link> <link xlink:type="simple" xlink:href="../750/25750.xml">
routing</link> for generating the shortest pair of edge disjoint paths between a given pair of <link xlink:type="simple" xlink:href="../899/638899.xml">
vertices</link> as follows:<p>

<list>
<entry level="1" type="bullet">

 Run the shortest pair algorithm for the given pair of vertices</entry>
<entry level="1" type="bullet">

 Replace each edge of the shortest path (equivalent to two oppositely directed arcs) by a single arc directed towards the source vertex</entry>
<entry level="1" type="bullet">

 Make the length of each of the above arcs negative</entry>
<entry level="1" type="bullet">

 Run the shortest path algorithm <it>(Note: the algorithm should accept negative costs)''</it></entry>
<entry level="1" type="bullet">

 Erase the overlapping edges of the two paths found, and reverse the direction of the remaining arcs on the first shortest path such that each arc on it is directed towards the sink vertex now. The desired pair of paths results.</entry>
</list>
</p>

<p>

G = (V, E)
d(i) – the distance of vertex i (i∈V) from source vertex A; it’s the sum of arcs in a possible
path from vertex A to vertex i. Note that d(A)=0;
P(i) – the predecessor of vertex I on the same path.
Z – the destination vertex</p>
<p>

Step 1.
Start with d(A)=0,
d(i)     = l (Ai), if i∈ΓA;
= ∞, otherwise (∞ is a large number defined below);
ΓA ≡ set of neighbor vertices of vertex i,
l(ij) = length of arc from vertex i to vertex j.
Assign S = V-{A}, where V is the set of vertices in the given graph.
Assign P(i) = A, ∀i∈S.
Step 2.
a) Find j∈S such that d(j) = min d(i), i∈S.
b) Set S = S – {j}.
c) If j = Z (the destination vertex), END; otherwise go to Step 3.
Step 3.
∀i∈Γj, if d(j)+l(ij)d(i),
</p>
</bdy>
</algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</article>
