<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 16:42:06[mciao0827] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<event  confidence="0.8" wordnetid="100029378">
<rule  confidence="0.8" wordnetid="105846932">
<act  confidence="0.8" wordnetid="100030358">
<psychological_feature  confidence="0.8" wordnetid="100023100">
<procedure  confidence="0.8" wordnetid="101023820">
<activity  confidence="0.8" wordnetid="100407535">
<algorithm  confidence="0.8" wordnetid="105847438">
<header>
<title>Bruun&apos;s FFT algorithm</title>
<id>272020</id>
<revision>
<id>219100124</id>
<timestamp>2008-06-13T15:52:22Z</timestamp>
<contributor>
<username>Stevenj</username>
<id>7918</id>
</contributor>
</revision>
<categories>
<category>FFT algorithms</category>
</categories>
</header>
<bdy>

<b>Bruun's algorithm</b> is a <link xlink:type="simple" xlink:href="../512/11512.xml">
fast Fourier transform</link> (FFT) algorithm based on an unusual recursive <link xlink:type="simple" xlink:href="../000/23000.xml">
polynomial</link>-factorization approach, proposed for powers of two by G. Bruun in 1978 and generalized to arbitrary even composite sizes by H. Murakami in 1996. Because its operations involve only real coefficients until the last computation stage, it was initially proposed as a way to efficiently compute the <link xlink:type="simple" xlink:href="../811/8811.xml">
discrete Fourier transform</link> (DFT) of real data. Bruun's algorithm has not seen widespread use, however, as approaches based on the ordinary <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../702/352702.xml">
Cooley-Tukey FFT algorithm</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
 have been successfully adapted to real data with at least as much efficiency. Furthermore, there is evidence that Bruun's algorithm may be intrinsically less accurate than Cooley-Tukey in the face of finite numerical precision  (Storn, 1993).<p>

Nevertheless, Bruun's algorithm illustrates an alternative algorithmic framework that can express both itself and the Cooley-Tukey algorithm, and thus provides an interesting perspective on FFTs that permits mixtures of the two algorithms and other generalizations.</p>



<sec>
<st>
 A polynomial approach to the DFT </st>

<p>

Recall that the DFT is defined by the formula:</p>
<p>

<indent level="1">

<math>X_k =  \sum_{n=0}^{N-1} x_n e^{-\frac{2\pi i}{N} nk }
\qquad
k = 0,\dots,N-1. </math>
</indent>

For convenience, let us denote the <it>N</it> <link xlink:type="simple" xlink:href="../950/171950.xml">
roots of unity</link> by ω<it>Nn</it> (<it>n</it>=0..<it>N</it>-1):</p>
<p>

<indent level="1">

<math>\omega_N^n = e^{-\frac{2\pi i}{N} n }</math>
</indent>

and define the polynomial <it>x</it>(<it>z</it>) whose coefficients are <it>xn</it>:</p>
<p>

<indent level="1">

<math>x(z) = \sum_{n=0}^{N-1} x_n z^n.</math>
</indent>

The DFT can then be understood as a <it>reduction</it> of this polynomial; that is, <it>Xk</it> is given by:</p>
<p>

<indent level="1">

<math>X_k = x(\omega_N^k) = x(z) \mod (z - \omega_N^k)</math>
</indent>

where <b>mod</b> (<link xlink:type="simple" xlink:href="../973/20973.xml">
modulo</link>) denotes the <statement wordnetid="106722453" confidence="0.8">
<message wordnetid="106598915" confidence="0.8">
<theorem wordnetid="106752293" confidence="0.8">
<proposition wordnetid="106750804" confidence="0.8">
<link xlink:type="simple" xlink:href="../168/771168.xml">
polynomial remainder</link></proposition>
</theorem>
</message>
</statement>
 operation. The key to fast algorithms like Bruun's or Cooley-Tukey comes from the fact that one can perform this set of <it>N</it> remainder operations in recursive stages.</p>

</sec>
<sec>
<st>
 Recursive factorizations and FFTs </st>

<p>

In order to compute the DFT, we need to evaluate the remainder of <math>x(z)</math> modulo <it>N</it> degree-1 polynomials as described above. Evaluating these remainders one by one is equivalent to the evaluating the usual DFT formula directly, and requires O(<it>N</it>2) operations.  However, one can <it>combine</it> these remainders recursively to reduce the cost, using the following trick: if we want to evaluate <math>x(z)</math> modulo two polynomials <math>U(z)</math> and <math>V(z)</math>, we can first take the remainder modulo their product <math>U(z)</math> <math>V(z)</math>, which reduces the <link xlink:type="simple" xlink:href="../352/480352.xml">
degree</link> of the polynomial <math>x(z)</math> and makes subsequent modulo operations less computationally expensive.</p>
<p>

The product of all of the monomials <math>(z - \omega_N^k)</math> for <it>k</it>=0..<it>N</it>-1 is simply <math>z^N-1</math> (whose roots are clearly the <it>N</it> roots of unity). One then wishes to find a recursive factorization of <math>z^N-1</math> into polynomials of few terms and smaller and smaller degree. To compute the DFT, one takes <math>x(z)</math> modulo each level of this factorization in turn, recursively, until one arrives at the monomials and the final result. If each level of the factorization splits every polynomial into an O(1) (constant-bounded) number of smaller polynomials, each with an O(1) number of nonzero coefficients, then the modulo operations for that level take O(<it>N</it>) time; since there will be a logarithmic number of levels, the overall complexity is O (<it>N</it> log <it>N</it>).</p>
<p>

More explicitly, suppose for example that <math>z^N-1 = F_1(z) F_2(z) F_3(z)</math>, and that <math>F_k(z) = F_{k,1}(z) F_{k,2}(z)</math>, and so on.  The corresponding FFT algorithm would consist of first computing <it>xk</it>(<it>z</it>) = <it>x</it>(<it>z</it>) mod 
<it>Fk</it>(<it>z</it>), then computing <it>xk</it>,<it>j</it>(<it>z</it>) = <it>xk</it>(<it>z</it>) mod 
<it>Fk</it>,<it>j</it>(<it>z</it>), and so on, recursively creating more and more remainder polynomials of smaller and smaller degree until one arrives at the final degree-0 results.</p>
<p>

Moreover, as long as the polynomial factors at each stage are <link xlink:type="simple" xlink:href="../556/6556.xml">
relatively prime</link> (which for polynomials means that they have no common roots), one can construct a dual algorithm by reversing the process with the <link>
Chinese Remainder Theorem</link>.</p>

<ss2>
<st>
Cooley-Tukey as polynomial factorization</st>

<p>

The standard decimation-in-frequency (DIF) radix-<it>r</it> Cooley-Tukey algorithm corresponds closely to a recursive factorization.  For example, radix-2 DIF Cooley-Tukey factors <math>z^N-1</math> into <math>F_1 = (z^{N/2}-1)</math> and <math>F_2 = (z^{N/2}+1)</math>.  These modulo operations reduce the degree of <math>x(z)</math> by 2, which corresponds to dividing the problem size by 2.  Instead of recursively factorizing <math>F_2</math>  directly, though, Cooley-Tukey instead first computes <it>x</it>2(<it>z</it> ω<it>N</it>), shifting all the roots (by a <it>twiddle factor</it>) so that it can apply the recursive factorization of <math>F_1</math> to both subproblems.  That is, Cooley-Tukey ensures that all subproblems are also DFTs, whereas this is not generally true for an arbitrary recursive factorization (such as Bruun's, below).</p>

</ss2>
</sec>
<sec>
<st>
 The Bruun factorization </st>

<p>

The basic Bruun algorithm for <link xlink:type="simple" xlink:href="../948/376948.xml">
powers of two</link> factorizes <it>zN</it>-1 recursively via the rules:</p>
<p>

<indent level="1">

<math>z^{2M}-1 = (z^M - 1) (z^M + 1) \,</math>
</indent>
:<math>z^{4M} + az^{2M} + 1 = (z^{2M} + \sqrt{2-a}z^M+1) (z^{2M} - \sqrt{2-a}z^M + 1)</math></p>
<p>

where <it>a</it> is a real constant with |<it>a</it>| ≤ 2.   At the end of the recursion, for <it>M</it>=1, you are left with degree-2 polynomials that can then be evaluated modulo two roots (<it>z</it> - ω<it>Nk</it>) for each polynomial.  Thus, at each recursive stage, all of the polynomials are factorized into two parts of half the degree, each of which has at most three nonzero terms, leading to an O (<it>N</it> log <it>N</it>) algorithm for the FFT.</p>
<p>

Moreover, since all of these polynomials have purely real coefficients (until the very last stage), they automatically exploit the special case where the inputs <it>xn</it> are purely real to save roughly a factor of two in computation and storage.  One can also take straightforward advantage of the case of real-symmetric data for computing the <link xlink:type="simple" xlink:href="../962/59962.xml">
discrete cosine transform</link> (Chen and Sorensen, 1992).</p>

<ss2>
<st>
 Generalization to arbitrary radices </st>

<p>

The Bruun factorization, and thus the Bruun FFT algorithm, was generalized to handle arbitrary <it>even</it> composite lengths, i.e. dividing the polynomial degree by an arbitrary <it>radix</it> (factor), as follows.  First, we define a set of polynomials φ<it>N</it>,α(<it>z</it>) for positive integers <it>N</it> and for α in [0,1) by:</p>
<p>

<indent level="1">

<math>\phi_{N, \alpha}(z) = 
\left\{ \begin{matrix}
z^{2N} - 2 \cos (2 \pi \alpha) z^N + 1  &amp; \mbox{if } 0 &amp;lt; \alpha &amp;lt; 1 \\ \\
z^{2N} - 1  &amp; \mbox{if } \alpha = 0
\end{matrix} \right.
</math>
</indent>

Note that all of the polynomials that appear in the Bruun factorization above can be written in this form.  These polynomials can be recursively factorized for a factor (radix) <it>r</it> via:</p>
<p>

<indent level="1">

<math>\phi_{rM, \alpha}(z) = 
\left\{ \begin{matrix}
\prod_{\ell=0}^{r-1} \phi_{M,(\alpha+\ell)/r}  &amp; \mbox{if } 0 &amp;lt; \alpha \leq 0.5 \\ \\
\prod_{\ell=0}^{r-1} \phi_{M,(1-\alpha+\ell)/r}  &amp; \mbox{if } 0.5 &amp;lt; \alpha &amp;lt; 1 \\ \\
\prod_{\ell=0}^{r-1} \phi_{M,\ell/(2r)}  &amp; \mbox{if } \alpha = 0

\end{matrix} \right.
</math>
</indent>

</p>
</ss2>
</sec>
<sec>
<st>
References</st>

<p>

<list>
<entry level="1" type="bullet">

 Georg Bruun, "<it>z</it>-Transform DFT filters and FFTs," <it>IEEE Trans. on Acoustics, Speech and Signal Processing</it> (ASSP) <b>26</b> (1), 56-63 (1978).</entry>
<entry level="1" type="bullet">

 H. J. Nussbaumer, <it>Fast Fourier Transform and Convolution Algorithms</it> (Springer-Verlag: Berlin, 1990).</entry>
<entry level="1" type="bullet">

 Yuhang Wu, "New FFT structures based on the Bruun algorithm," <it>IEEE Trans. ASSP</it> <b>38</b> (1), 188-191 (1990)</entry>
<entry level="1" type="bullet">

 Jianping Chen and Henrik Sorensen, "An efficient FFT algorithm for real-symmetric data," <it>Proc. ICASSP</it> <b>5</b>, 17-20 (1992).</entry>
<entry level="1" type="bullet">

 Rainer Storn, "Some results in fixed point error analysis of the Bruun-FTT [''sic''] algorithm," <it>IEEE Trans. Signal Processing</it> <b>41</b> (7), 2371-2375 (1993).</entry>
<entry level="1" type="bullet">

 Hideo Murakami, "Real-valued decimation-in-time and decimation-in-frequency algorithms," <it>IEEE Trans. Circuits Syst. II: Analog and Digital Sig. Proc.</it> <b>41</b> (12), 808-816 (1994).</entry>
<entry level="1" type="bullet">

 Hideo Murakami, "Real-valued fast discrete Fourier transform and cyclic convolution algorithms of highly composite even length," <it>Proc. ICASSP</it> <b>3</b>, 1311-1314 (1996).</entry>
<entry level="1" type="bullet">

 Shashank Mittal, Md. Zafar Ali Khan, M. B. Srinivas, "A Comparative Study of Different FFT Architectures for Software Defined Radio", <it>Lecture Notes in Computer Science</it> <b>4599</b> (<it>Embedded Computer Systems: Architectures, Modeling, and Simulation</it>), 375-384 (2007).  Proc. 7th Intl. Workshop, SAMOS 2007 (Samos, Greece, July 16-19, 2007).</entry>
</list>

</p>
</sec>
</bdy>
</algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</article>
