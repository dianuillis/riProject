<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 19:52:17[mciao0826] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>Boolean-valued model</title>
<id>2732301</id>
<revision>
<id>237835799</id>
<timestamp>2008-09-12T01:00:00Z</timestamp>
<contributor>
<username>Newbyguesses</username>
<id>3964521</id>
</contributor>
</revision>
<categories>
<category>Boolean algebra</category>
<category> articles with sections needing expansion</category>
<category>Model theory</category>
<category>Forcing</category>
</categories>
</header>
<bdy>

In <link xlink:type="simple" xlink:href="../636/19636.xml">
mathematical logic</link>, a <b>Boolean-valued model</b> is a generalization of the ordinary <citizen wordnetid="109923673" confidence="0.8">
<expert wordnetid="109617867" confidence="0.8">
<physical_entity wordnetid="100001930" confidence="0.8">
<disbeliever wordnetid="110015897" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<philosopher wordnetid="110423589" confidence="0.8">
<national wordnetid="109625401" confidence="0.8">
<intellectual wordnetid="109621545" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<atheist wordnetid="109820044" confidence="0.8">
<nonreligious_person wordnetid="109625789" confidence="0.8">
<logician wordnetid="110269785" confidence="0.8">
<mathematician wordnetid="110301261" confidence="0.8">
<scholar wordnetid="110557854" confidence="0.8">
<link xlink:type="simple" xlink:href="../920/59920.xml">
Tarskian</link></scholar>
</mathematician>
</logician>
</nonreligious_person>
</atheist>
</causal_agent>
</scientist>
</intellectual>
</national>
</philosopher>
</person>
</disbeliever>
</physical_entity>
</expert>
</citizen>
 notion of <link xlink:type="simple" xlink:href="../928/4055928.xml">
structure</link> or <link xlink:type="simple" xlink:href="../858/19858.xml">
model</link>, in which the <link xlink:type="simple" xlink:href="../711/161711.xml">
truth value</link>s of <link xlink:type="simple" xlink:href="../094/81094.xml">
proposition</link>s are not limited to "true" and "false", but take values in some fixed <link xlink:type="simple" xlink:href="../944/1839944.xml">
complete Boolean algebra</link>.
Boolean-valued models were introduced by <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../875/161875.xml">
Dana Scott</link></scientist>
</person>
, <physical_entity wordnetid="100001930" confidence="0.8">
<expert wordnetid="109617867" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<theorist wordnetid="110706812" confidence="0.8">
<intellectual wordnetid="109621545" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<mathematician wordnetid="110301261" confidence="0.8">
<logician wordnetid="110269785" confidence="0.8">
<link xlink:type="simple" xlink:href="../110/3160110.xml">
Robert M. Solovay</link></logician>
</mathematician>
</scientist>
</causal_agent>
</intellectual>
</theorist>
</person>
</expert>
</physical_entity>
, and <link>
Petr Vopěnka</link> in the <link xlink:type="simple" xlink:href="../664/34664.xml">
1960</link>s in order to help understand  <link xlink:type="simple" xlink:href="../804/5617804.xml">
Paul Cohen</link>'s method of <link xlink:type="simple" xlink:href="../205/152205.xml">
forcing</link>.
<sec>
<st>
Definition</st>

<p>

<table style="background-color:transparent;" cellpadding="0" cellspacing="0">
<row>
<col>
 <image width="17px" src="Wiki_letter_w.svg">

</image>
</col>
<col>
 <it>&nbsp;This short section requires <weblink xlink:type="simple" xlink:href="http://localhost:18088/wiki/index.php?title=Boolean-valued_model&amp;action=edit">
expansion</weblink>.''</it></col>
</row>
</table>

Fix a complete Boolean algebra <it>B</it><ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref> and a <link xlink:type="simple" xlink:href="../983/10983.xml">
first-order language</link> <it>L</it>, the latter consisting of a collection of <link>
constant symbol</link>s, <link xlink:type="simple" xlink:href="../908/174908.xml">
function symbol</link>s, and <link>
relation symbol</link>s. A Boolean-valued model for <it>L</it> then consists of a universe <it>M</it>, which is a set of elements (or <b><it>names</it></b>), together with interpretations for the symbols. Specifically, the model must assign to each constant symbol of <it>L</it> an element of <it>M</it>, and to each <it>n</it>-ary function symbol <it>f</it> of <it>L</it> and each <it>n</it>-tuple 0,...,a<it>n</it>-1&amp;gt; of elements of <it>M</it>, the model must assign an element of <it>M</it> to the term <it>f</it>(a0,...,a<it>n</it>-1).</p>
<p>

Interpretation of the relation symbols, and of equality, is more complicated: To each pair <it>a</it>, <it>b</it>, of elements of <it>M</it>, the model must assign a truth value ||<it>a</it>=<it>b</it>|| to the expression <it>a</it>=<it>b</it>; this truth value is taken from <it>B</it>. Similarly, for each <it>n</it>-ary relation symbol <it>R</it> of <it>L</it> and each <it>n</it>-tuple 0,...,a<it>n</it>-1&amp;gt; of elements of <it>M</it>, the model must assign an element of <it>B</it> to be the truth value ||<it>R</it>(a0,...,a<it>n</it>-1)||.</p>

</sec>
<sec>
<st>
Interpretation of other formulas and sentences</st>
<p>

Other formulas can be interpreted using the Boolean algebra; for propositional connectives, this is easy; one simply applies the corresponding Boolean operators to the truth values of the subformulae. For example, if φ(<it>x</it>) and ψ(<it>y</it>,<it>z</it>) are formulas with one and two <link>
free variable</link>s, respectively, and if <it>a</it>, <it>b</it>, <it>c</it> are elements of the model's universe to be substituted for <it>x</it>, <it>y</it>, and <it>z</it>, then the truth value of
<indent level="1">

 <math>\phi(a)\land\psi(b,c)</math>
</indent>
is simply
<indent level="1">

 <math>||\phi(a)\land\psi(b,c)||=||\phi(a)||\ \land\ ||\psi(b,c)|| </math>
</indent>

For quantified formulas we need to use the completeness of the Boolean algebra <it>B</it>. If φ(<it>x</it>) is a formula with free variable <it>x</it> (and possibly other free variables that we suppress), then
<indent level="1">

 <math>||\exists x\phi(x)||=\bigvee_{a\in M}||\phi(a)||</math>
</indent>
where the right-hand side is to be understood as the <link xlink:type="simple" xlink:href="../692/42692.xml">
supremum</link> in <it>B</it> of the set of all truth values ||φ(<it>a</it>)||, where <it>a</it> ranges over <it>M</it>.</p>
<p>

The truth value of a formula is sometimes referred to as its <link xlink:type="simple" xlink:href="../934/22934.xml">
probability</link>. It needs to be understood that these are not probabilities in the ordinary sense; they are not <link xlink:type="simple" xlink:href="../491/19725491.xml">
real number</link>s, but rather elements of the complete Boolean algebra <it>B</it>.</p>

</sec>
<sec>
<st>
Boolean-valued models of set theory</st>
<p>

Given a complete Boolean algebra <it>B</it><ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref> there is a Boolean-valued model denoted by <it>VB</it>, which is the Boolean-valued analogue of the <link xlink:type="simple" xlink:href="../980/445980.xml">
von Neumann universe</link> <it>V</it>. (Strictly speaking, <it>VB</it> is a <link xlink:type="simple" xlink:href="../696/20696.xml">
proper class</link>, so we need to reinterpret what it means to be a <link xlink:type="simple" xlink:href="../858/19858.xml">
model</link> appropriately.) Informally, we think of <it>VB</it> as something like "Boolean-valued sets"; in other words, a Boolean-valued set, rather than having sharply defined elements and not-elements, has objects with a certain "probability" of being elements of the set. Again, the "probability" is an element of <it>B</it>, not a real number. Compare with the notion of a <link xlink:type="simple" xlink:href="../601/56601.xml">
fuzzy set</link>.</p>
<p>

The ("probabilistic") elements  of the Boolean-valued set, in turn, are also Boolean-valued sets, whose elements are also Boolean-valued sets, and so on. To get a non-circular definition of Boolean-valued set we need to build them up in a hierarchy. So for each ordinal α of <it>V</it> we define the set <it>VαB</it> by:
<indent level="1">

<it>VαB</it> is the union of <it>VβB</it> for βα+1B<it> is the set of all functions from </it>VαB<it> to </it>B<it>. (Such a function represents a "probabilistic" <link xlink:type="simple" xlink:href="../631/27631.xml">
subset</link> of </it>VαB<it>; if </it>f<it> is such a function, then for any </it>x<it>∈</it>VαB<it>, </it>f<it>(</it>x<it>) is the probability that </it>x<it> is in the set.)
</it></indent>
We define the class <it>VB</it> to be the union of all sets <it>VαB</it>. </p>
<p>

It is also possible to relativize this entire construction to some transitive model <it>M</it> of <link xlink:type="simple" xlink:href="../214/152214.xml">
ZF</link> (or sometimes a fragment thereof). In that case we construct the Boolean-valued model <it>MB</it> by applying the above construction <it>inside</it> <it>M</it>. The restriction to transitive models is not serious, as the <link xlink:type="simple" xlink:href="../604/1251604.xml">
Mostowski collapsing theorem</link> implies that every reasonable (=well founded extensional) model is isomorphic to a transitive one. 
(If the model <it>M</it> is not transitive things get messier, as <it>M</it>'s interpretation of what it means to be a "function" or an "ordinal" may differ from  the "external" interpretation.)</p>
<p>

Next we need to define two <it>B</it>-valued  relations of equality and membership on the set <it>VB</it>. (A <it>B</it>-valued relation on <it>VB</it> is a function from <it>VB</it>&amp;times;<it>VB</it> to <it>B</it>.)
To avoid confusion with the usual equality and membership, they are denoted by ||<it>x</it>=<it>y</it>|| and 
||<it>x</it>∈<it>y</it>||  for <it>x</it> and <it>y</it> in <it>VB</it>. They are defined as follows:
<indent level="1">

||<it>x</it>∈<it>y</it>|| is defined to be ∑<it>t</it>∈Dom(<it>y</it>) ||<it>x</it>=<it>t</it>|| ∧ <it>y</it>(<it>t</it>)   ("<it>x</it> is in <it>y</it> if it is equal to something in <it>y</it>")
</indent>
:||<it>x</it>=<it>y</it>|| is defined to be ||<it>x</it>⊆<it>y</it>||∧||y⊆<it>x</it>||   ("<it>x</it> equals <it>y</it> if <it>x</it> and <it>y</it> are both subsets of each other"), where
<indent level="1">

||<it>x</it>⊆<it>y</it>|| is defined to be ∏<it>t</it>∈Dom(<it>x</it>) <it>x</it>(<it>t</it>)⇒||<it>t</it>∈<it>y</it>||   ("<it>x</it> is a subset of <it>y</it> if all elements of <it>x</it> are in <it>y</it>")
</indent>

The symbols ∑ and ∏ mean that we take a least upper bound or greatest lower bound in the complete Boolean algebra <it>B</it>. At first sight the definitions  above appear to be circular: ||&nbsp; ∈&nbsp;|| depends on ||&nbsp;=&nbsp;||, which depends on ||&nbsp;⊆&nbsp;||, which depends on ||&nbsp;∈&nbsp;||. However a close examination shows that the definition of ||&nbsp;∈&nbsp;|| only depends on ||&nbsp;∈&nbsp;|| for elements of smaller rank, so ||&nbsp;∈&nbsp;|| and ||&nbsp; =&nbsp;|| are well defined functions from <it>VB</it>&amp;times;<it>VB</it> to <it>B</it>.</p>
<p>

Finally we need to check that these two <it>B</it>-valued  relations ||&nbsp;∈&nbsp;|| and ||&nbsp;=&nbsp;|| on <it>VB</it> make <it>VB</it> into a Boolean-valued model of set theory. Each sentence of first order set theory with no free variables has a value in  <it>B</it>, and we need to check that all the axioms for equality and all the axioms of ZF set theory (written without free variables) have value the element  "true" of <it>B</it>. This is straightforward, but takes a long time because there are many different axioms that need to be checked.</p>

</sec>
<sec>
<st>
Relationship to forcing</st>
<p>

To obtain <link xlink:type="simple" xlink:href="../208/1141208.xml">
independence results</link> and for many other purposes, set theorists use a technique called <link xlink:type="simple" xlink:href="../205/152205.xml">
forcing</link>, originally developed by <link xlink:type="simple" xlink:href="../804/5617804.xml">
Paul Cohen</link> but since then much elaborated. Forcing "adds to the universe" a <link xlink:type="simple" xlink:href="../247/2213247.xml">
generic</link> subset of a <link xlink:type="simple" xlink:href="../572/23572.xml">
poset</link>, the poset being designed to impose interesting properties on the newly-"added" object. The wrinkle is that (for interesting posets) it can be proved that there simply <it>is</it> no such generic subset of the poset. There are three usual ways of dealing with this:
<list>
<entry level="1" type="bullet">

 <b>syntactic forcing</b> A <it>forcing relation</it> <math> p\Vdash\phi</math> is defined between elements <it>p</it> of the poset and formulas φ of the <it>forcing language</it>. This relation is defined syntactically and has no semantics; that is, no model is ever produced. Rather, starting with the assumption that ZFC (or other axiomatization of set theory) proves the independent statement, one shows that ZFC must also be able to prove a contradiction. However, the forcing is "over <it>V</it>"; that is, it is not necessary to start with a countable transitive model. See Kunen for an exposition.</entry>
<entry level="1" type="bullet">

 <b>countable transitive models</b> One starts with a <link xlink:type="simple" xlink:href="../026/6026.xml">
countable</link> <link xlink:type="simple" xlink:href="../396/2462396.xml">
transitive</link> model <it>M</it> of as much of set theory as is needed for the desired purpose, and that contains the poset. Then there <it>do</it> exist filters on the poset that are generic <it>over M</it>; that is, that meet all dense open subsets of the poset that happen also to be elements of <it>M</it>.</entry>
<entry level="1" type="bullet">

 <b>fictional generic objects</b> Commonly, set theorists will simply <it>pretend</it> that the poset has a subset that is generic over all of <it>V</it>. This generic object, in nontrivial cases, cannot be an element of <it>V</it>, and therefore "does not really exist". (Of course, it's a point of philosophical contention whether <it>any</it> sets "really exist", but that is outside the scope of the current discussion.) Perhaps surprisingly, with a little practice this method is useful and reliable, but many find it philosophically unsatisfying.</entry>
</list>
</p>

<ss1>
<st>
Boolean-valued models and syntactic forcing</st>
<p>

The Boolean-valued model approach can be seen as a way of giving a semantics to syntactic forcing; the price paid is that the semantics is not 2-valued ("true or false"), but assigns truth values from some complete Boolean algebra. Given a forcing poset <it>P</it>, there is a corresponding complete Boolean algebra <it>B</it>, often obtained as the collection of <link xlink:type="simple" xlink:href="../562/30562.xml">
regular open subsets</link> of <it>P</it>, where the <link xlink:type="simple" xlink:href="../954/29954.xml">
topology</link> on <it>P</it> is generated by <it>cones</it> (sets of the form {<it>q</it>|<it>q</it>≤<it>p</it>}, for fixed <it>p</it>). (Other approaches to constructing <it>B</it> are discussed below.)</p>
<p>

Now the order on <it>B</it> (after removing the zero element) can replace <it>P</it> for forcing purposes, and we can interpret the forcing relation "semantically" by saying that, for <it>p</it> an element of <it>B</it> and φ a formula of the forcing language,
<indent level="1">

<math>p\Vdash\phi\iff p\leq||\phi||</math>
</indent>
where again ||φ|| is the truth value of φ in <it>VB</it>.</p>
<p>

Thus this approach succeeds in assigning a semantics to forcing over <it>V</it> without resorting to fictional generic objects. The disadvantages are that the semantics is not 2-valued, and that the combinatorics of <it>B</it> are often more complicated than those of the underlying poset <it>P</it>.</p>

</ss1>
<ss1>
<st>
Boolean-valued models and generic objects over countable transitive models</st>
<p>

One interpretation of forcing starts with a countable transitive model <it>M</it> of ZF set theory, a partially ordered set <it>P</it>, and a "generic" subset <it>G</it> of <it>P</it>, and constructs a new model of ZF set theory from these objects. (The conditions that the model be countable and transitive simplify some technical problems, but are not essential.) Cohen's construction can be carried out using Boolean-valued models as follows. 
<list>
<entry level="1" type="bullet">

 Construct a complete Boolean algebra <it>B</it> as the complete Boolean algebra "generated by" the poset <it>P</it>. </entry>
<entry level="1" type="bullet">

 Construct an ultrafilter <it>U</it> on <it>B</it> (or equivalently a homomorphism from <it>B</it> to the Boolean algebra {true, false}) from the generic subset <it>G</it> of <it>P</it>.</entry>
<entry level="1" type="bullet">

 Use the homomorphism  from <it>B</it> to {true, false} to turn the Boolean-valued model <it>MB</it> of the section above into an ordinary model of ZF.  </entry>
</list>
</p>
<p>

We now explain these steps in more detail.</p>
<p>

For any poset <it>P</it> there is a complete Boolean algebra <it>B</it> and a map <it>e</it> from <it>P</it> to <it>B</it>+ (the non-zero elements of <it>B</it>) such that the image is dense, <it>e</it>(<it>p</it>)&amp;le;<it>e</it>(<it>q</it>) whenever <it>p</it>&amp;le;<it>q</it>, and <it>e</it>(<it>p</it>)<it>e</it>(<it>q</it>)=0 whenever <it>p</it> and <it>q</it> are incompatible. This Boolean algebra is unique up to isomorphism. It can be constructed as the algebra of regular open sets in the topological space of <it>P</it> (with underlying set <it>P</it>, and a base given by the sets <it>Up</it> of elements <it>q</it> with <it>q</it>&amp;le;<it>p</it>). </p>
<p>

The map from the poset <it>P</it> to the complete Boolean algebra <it>B</it> is not injective in general. The map is injective if and only if <it>P</it> has the following property: if every <it>r</it>≤<it>p</it> is compatible with <it>q</it>, then <it>p</it>≤<it>q</it>.</p>
<p>

The ultrafilter <it>U</it> on <it>B</it> is defined to be  the set of elements <it>b</it> of <it>B</it> that are greater than some element of (the image of) <it>G</it>. Given an ultrafilter <it>U</it> on a Boolean algebra, we get a homomorphism to {true, false}
by mapping <it>U</it> to true and its complement to false. Conversely, given such a homomorphism, the inverse image of true is an ultrafilter, so ultrafilters are essentially the same as homomorphisms to {true, false}. (Algebraists might prefer to use maximal ideals instead of ultrafilters: the complement of an ultrafilter is a maximal ideal, and conversely the complement of a maximal ideal is an ultrafilter.)</p>
<p>

If <it>g</it> is a homomorphism from a Boolean algebra <it>B</it> to a Boolean algebra <it>C</it> and <it>MB</it> is any 
<it>B</it>-valued model of ZF (or of any other theory for that matter) we can turn <it>MB</it>  into a <it>C</it> -valued model by applying the homomorphism <it>g</it> to the value of all formulas. In particular if <it>C</it> is {true, false} we get a {true, false}-valued model. This is almost the same as an ordinary model: in fact we get an ordinary model on the set of equivalence classes under ||&nbsp;=&nbsp;|| of a {true, false}-valued model. So we get an ordinary model of ZF set theory by starting from <it>M</it>, a Boolean algebra <it>B</it>, and an ultrafilter <it>U</it> on <it>B</it>.
(The model of ZF constructed like this is not transitive. In practice one  applies the <link xlink:type="simple" xlink:href="../604/1251604.xml">
Mostowski collapsing theorem</link> to turn this into a transitive model.)</p>
<p>

We have seen that forcing can be done using Boolean-valued models, by constructing a Boolean algebra with ultrafilter from a poset with a generic subset. It is also possible to go back the other way: given a Boolean algebra <it>B</it>, we can form a poset <it>P</it> of all the nonzero elements of <it>B</it>, and a generic ultrafilter on <it>B</it> restricts to a generic set on <it>P</it>. So the techniques of forcing and Boolean-valued models are essentially equivalent.</p>

</ss1>
</sec>
<sec>
<st>
Notes</st>
<p>

<reflist>
<entry id="1">
<it>B</it> here is assumed to be <it>nondegenerate</it>; that is, 0 and 1 must be distinct elements of <it>B</it>. Authors writing on Boolean-valued models typically take this requirement to be part of the definition of "Boolean algebra", but authors writing on Boolean algebras in general often do not.</entry>
</reflist>

</p>
</sec>
<sec>
<st>
References</st>
<p>

<list>
<entry level="1" type="bullet">

 Bell, J. L. (1985) <it>Boolean-Valued Models and Independence Proofs in Set Theory</it>, Oxford. ISBN 0-19-853241-5</entry>
<entry level="1" type="bullet">

 <cite id="CITEREFGrishin2001" style="font-style:normal">Grishin, V.N.&#32;(2001),&#32;<weblink xlink:type="simple" xlink:href="http://eom.springer.de/b/b016990.htm">
"Boolean-valued model"</weblink>, in&#32;Hazewinkel, Michiel,&#32;<it><computer wordnetid="103082979" confidence="0.8">
<work wordnetid="104599396" confidence="0.8">
<creation wordnetid="103129123" confidence="0.8">
<machine wordnetid="103699975" confidence="0.8">
<reference_book wordnetid="106417598" confidence="0.8">
<publication wordnetid="106589574" confidence="0.8">
<encyclopedia wordnetid="106427387" confidence="0.8">
<product wordnetid="104007894" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<book wordnetid="106410904" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<web_site wordnetid="106359193" confidence="0.8">
<link xlink:type="simple" xlink:href="../594/4647594.xml">
Encyclopaedia of Mathematics</link></web_site>
</device>
</book>
</instrumentality>
</artifact>
</product>
</encyclopedia>
</publication>
</reference_book>
</machine>
</creation>
</work>
</computer>
</it>, Kluwer Academic Publishers, ISBN 978-1556080104</cite>&nbsp;</entry>
<entry level="1" type="bullet">

  <cite style="font-style:normal" class="book"><physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<theorist wordnetid="110706812" confidence="0.8">
<intellectual wordnetid="109621545" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<mathematician wordnetid="110301261" confidence="0.8">
<link xlink:type="simple" xlink:href="../903/6207903.xml">
Jech, Thomas</link></mathematician>
</scientist>
</causal_agent>
</intellectual>
</theorist>
</person>
</physical_entity>
&#32;(2002). Set theory, third millennium edition (revised and expanded).&#32;Springer. ISBN 3-540-44085-2.</cite>&nbsp;</entry>
<entry level="1" type="bullet">

  <cite style="font-style:normal" class="book">Kunen, Kenneth&#32;(1980). Set Theory: An Introduction to Independence Proofs.&#32;North-Holland. ISBN 0-444-85401-0.</cite>&nbsp;</entry>
<entry level="1" type="bullet">

  <cite style="font-style:normal" class="book">Kusraev, A. G. and  S. S. Kutateladze&#32;(1999). Boolean Valued Analysis.&#32;Kluwer Academic Publishers. ISBN 0-7923-5921-6.</cite>&nbsp; Contains an account of Boolean-valued models and applications to Riesz spaces, Banach spaces and algebras. </entry>
<entry level="1" type="bullet">

  <cite style="font-style:normal" class="book">Manin, Yu. I.&#32;(1977). A Course in Mathematical Logic.&#32;Springer. ISBN 0-387-90243-0.</cite>&nbsp; Contains an account of forcing and Boolean-valued models written for mathematicians who are not set theorists.</entry>
</list>
</p>


</sec>
</bdy>
</article>
