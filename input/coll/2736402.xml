<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 19:57:00[mciao0827] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<event  confidence="0.8" wordnetid="100029378">
<rule  confidence="0.8" wordnetid="105846932">
<act  confidence="0.8" wordnetid="100030358">
<psychological_feature  confidence="0.8" wordnetid="100023100">
<procedure  confidence="0.8" wordnetid="101023820">
<activity  confidence="0.8" wordnetid="100407535">
<algorithm  confidence="0.8" wordnetid="105847438">
<header>
<title>Dancing Links</title>
<id>2736402</id>
<revision>
<id>242254481</id>
<timestamp>2008-10-01T14:35:32Z</timestamp>
<contributor>
<username>Jokes Free4Me</username>
<id>1140712</id>
</contributor>
</revision>
<categories>
<category>Search algorithms</category>
<category>Donald Knuth</category>
<category>Linked lists</category>
<category>Sudoku</category>
</categories>
</header>
<bdy>

In <link xlink:type="simple" xlink:href="../323/5323.xml">
computer science</link>, <b>Dancing Links</b>, also known as <b>DLX</b>, is the technique suggested by <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../095/8095.xml">
Donald Knuth</link></scientist>
</person>
 to efficiently implement his <link xlink:type="simple" xlink:href="../542/3626542.xml">
Algorithm X</link>. Algorithm X is a <link xlink:type="simple" xlink:href="../867/4044867.xml">
recursive</link>, <link xlink:type="simple" xlink:href="../957/665957.xml">
nondeterministic</link>, <link xlink:type="simple" xlink:href="../034/97034.xml">
depth-first</link>, <link xlink:type="simple" xlink:href="../867/238867.xml">
backtracking</link> <link xlink:type="simple" xlink:href="../775/775.xml">
algorithm</link> that finds all solutions to the <link xlink:type="simple" xlink:href="../651/2828651.xml">
exact cover</link> problem. Some of the better-known exact cover problems include <link xlink:type="simple" xlink:href="../671/321671.xml">
tiling</link>, the <condition wordnetid="113920835" confidence="0.8">
<state wordnetid="100024720" confidence="0.8">
<problem wordnetid="114410605" confidence="0.8">
<difficulty wordnetid="114408086" confidence="0.8">
<link xlink:type="simple" xlink:href="../474/10474.xml">
N queens problem</link></difficulty>
</problem>
</state>
</condition>
, and <link xlink:type="simple" xlink:href="../807/1365807.xml">
Sudoku</link>.<p>

The name <it>Dancing Links</it> comes from the way the algorithm works, as iterations of the algorithm cause the links to "dance" with partner links so as to resemble an "exquisitely choreographed dance." Knuth credits Hitotumatu and Noshita with having invented the idea in 1979, but it is his paper which has popularized it.</p>

<sec>
<st>
Implementation</st>
<p>

As the remainder of this article discusses the details of an implementation technique for Algorithm X, the reader is strongly encouraged to read the <link xlink:type="simple" xlink:href="../542/3626542.xml">
Algorithm X</link> article first.</p>

<ss1>
<st>
Main ideas</st>
<p>

The idea of DLX is based on the observation that in a circular <link>
doubly linked list</link> of nodes,</p>
<p>

x.left.right ← x.right;
x.right.left ← x.left;</p>
<p>

will remove node <it>x</it> from the list, while</p>
<p>

x.left.right ← x;
x.right.left ← x;</p>
<p>

will restore <it>x</it>'s position in the list. This works regardless of the number of elements in the list, even if that number is 1.</p>
<p>

<person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../095/8095.xml">
Knuth</link></scientist>
</person>
 observed that a naive implementation of his Algorithm X would spend an inordinate amount of time searching for 1's. When selecting a column, the entire matrix had to be searched for 1's. When selecting a row, an entire column had to be searched for 1's. After selecting a row, that row and a number of columns had to be searched for 1's. To improve this search time from <link xlink:type="simple" xlink:href="../578/44578.xml">
complexity</link> O(n) to O(1), Knuth implemented a <link xlink:type="simple" xlink:href="../015/341015.xml">
sparse matrix</link> where only 1's are stored.</p>
<p>

At all times, each node in the matrix will point to the adjacent nodes to the left and right (1's in the same row), above and below (1's in the same column), and the header for its column (described below).  Each row and column in the matrix will consist of a circular doubly linked list of nodes.</p>

</ss1>
<ss1>
<st>
Header</st>
<p>

Each column will have a special node known as the "column header," which will be included in the column list, and will form a special row ("control row") consisting of all the columns which still exist in the matrix.</p>
<p>

Finally, each column header may optionally track the number of nodes in its column, so that locating a column with the lowest number of nodes is of <link xlink:type="simple" xlink:href="../578/44578.xml">
complexity</link> O(<it>n</it>) rather than O(<it>n</it>&amp;times;<it>m</it>) where <it>n</it> is the number of columns and <it>m</it> is the number of rows.</p>

</ss1>
<ss1>
<st>
Exploring</st>
<p>

In Algorithm X, rows and columns are regularly eliminated from and restored to the matrix. Eliminations are determined by selecting a column and a row in that column. If a selected column doesn't have any rows, the current matrix is unsolvable and must be backtracked. When an elimination occurs, the selected row's column, other rows 'belonging' to that column, and other columns to which the selected row 'belongs' are all removed. These columns are removed because they have been filled, and these rows are removed because they conflict with the selected row. To perform the elimination, first remove the selected column's header. Next, for each row where the selected column contains a 1, traverse the row and remove it from other columns (this makes those rows inaccessible and is how  conflicts are prevented). Finally, remove each column (other than the selected column, it has already been removed) in which the selected row has a 1 (they have been filled by the selected row). This order ensures that any removed node is removed exactly once and in a predictable order, so it can be backtracked appropriately. If the resulting matrix has no columns, then they have all been filled and the selected rows form the solution.</p>

</ss1>
<ss1>
<st>
Backtracking</st>
<p>

To backtrack, the above process must be reversed using the second algorithm stated above. A requirement of using that algorithm is that backtracking must be done as an exact reversal of eliminations. Knuth's paper gives a clear picture of these relationships and how the node removal and reinsertion works.</p>

</ss1>
<ss1>
<st>
Optional constraints</st>
<p>

It is also possible to solve one-cover problems in which a particular constraint is optional, but can be satisfied no more than once. Dancing Links accommodates these with primary columns which must be filled and secondary columns which are optional. This alters the algorithm's solution test from a matrix having no columns to a matrix having no primary columns, but doesn't require any further changes. Knuth discusses optional constraints as applied to the <condition wordnetid="113920835" confidence="0.8">
<state wordnetid="100024720" confidence="0.8">
<problem wordnetid="114410605" confidence="0.8">
<difficulty wordnetid="114408086" confidence="0.8">
<link xlink:type="simple" xlink:href="../474/10474.xml">
N queens problem</link></difficulty>
</problem>
</state>
</condition>
. The chessboard diagonals represent optional constraints, as some diagonals may not be occupied. If a diagonal is occupied, it can only be occupied once.</p>

</ss1>
</sec>
<sec>
<st>
Application to Sudoku</st>
<p>

For a discussion of how Dancing Links can be applied to <link xlink:type="simple" xlink:href="../807/1365807.xml">
Sudoku</link>, see <condition wordnetid="113920835" confidence="0.8">
<state wordnetid="100024720" confidence="0.8">
<problem wordnetid="114410605" confidence="0.8">
<difficulty wordnetid="114408086" confidence="0.8">
<link xlink:type="simple" xlink:href="../651/2828651.xml#xpointer(//*[./st=%22Sudoku%22])">
Exact cover</link></difficulty>
</problem>
</state>
</condition>
.</p>

</sec>
<sec>
<st>
External links</st>
<p>

<list>
<entry level="1" type="bullet">

 <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../095/8095.xml">
Knuth, Donald</link></scientist>
</person>
&#32;(2000).&#32;"<it><weblink xlink:type="simple" xlink:href="http://www-cs-faculty.stanford.edu/~knuth/preprints.html">
Dancing links</weblink></it>". &#32;P159.&#32;Retrieved on <link>
2006-07-11</link>.</entry>
<entry level="1" type="bullet">

 <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../095/8095.xml">
Knuth, Donald</link></scientist>
</person>
&#32;(2000).&#32;"<it><weblink xlink:type="simple" xlink:href="http://lanl.arxiv.org/pdf/cs/0011047">
Dancing links</weblink></it>"&#32;(<link xlink:type="simple" xlink:href="../077/24077.xml">
PDF</link>). &#32;Retrieved on <link>
2007-10-17</link>.</entry>
<entry level="1" type="bullet">

 Hitotumatua, Hirosi, and Noshita, Kohei&#32;(1979).&#32;"<it><weblink xlink:type="simple" xlink:href="http://dx.doi.org/10.1016/0020-0190(79)90016-4">
A technique for implementing backtrack algorithms and its application</weblink></it>". &#32;Subscription required for full text.&#32;Retrieved on <link>
2006-07-11</link>.</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://spivey.oriel.ox.ac.uk/mike/comp2005/results.html">
Application to Sudoku</weblink></entry>
<entry level="1" type="bullet">

 A <weblink xlink:type="simple" xlink:href="http://hadoop.apache.org/core/docs/current/api/org/apache/hadoop/examples/dancing/package-summary.html#package_description">
distributed Dancing Links</weblink> implementation as a <link xlink:type="simple" xlink:href="../308/5919308.xml">
Hadoop</link> <idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<link xlink:type="simple" xlink:href="../875/1702875.xml">
MapReduce</link></concept>
</idea>
 example</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://dancingsudoku.sourceforge.net/">
a Java Sudoku Solver implementing the Dancing Links Algorithm</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.bluechromis.com/stan/sudoku.html">
a Java library implementation of Algorithm X and a Sudoku solver using the library</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://qxxy.com/people/roger/2005/12/09/">
a C++ implementation of DLX</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.jalat.com/blogs/lisp?id=4">
a blog entry detailing a Common Lisp implementation of a Sudoku solver using DLX</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://kw.pm.org/talks/2006-01-sudoku/">
a Perl implementation of Algorithm X which generates, solves and grades Sudoku puzzles</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://users.tkk.fi/~aajanki/sudoku/index.html">
 DLX library in Python and a Sudoku solver using it</weblink></entry>
</list>
</p>


</sec>
</bdy>
</algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</article>
