<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 15:34:22[mciao0825] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>Sorting algorithm</title>
<id>28442</id>
<revision>
<id>243364939</id>
<timestamp>2008-10-06T05:20:33Z</timestamp>
<contributor>
<username>Dcoetzee</username>
<id>13476</id>
</contributor>
</revision>
<categories>
<category>Sorting algorithms</category>
</categories>
</header>
<bdy>

In <link xlink:type="simple" xlink:href="../323/5323.xml">
computer science</link> and <link xlink:type="simple" xlink:href="../831/18831.xml">
mathematics</link>, a <b>sorting algorithm</b> is an <link xlink:type="simple" xlink:href="../775/775.xml">
algorithm</link> that puts elements of a <link xlink:type="simple" xlink:href="../382/208382.xml">
list</link> in a certain <link xlink:type="simple" xlink:href="../330/30330.xml">
order</link>. The   most-used orders are numerical order and <link xlink:type="simple" xlink:href="../667/567667.xml">
lexicographical order</link>. Efficient <link xlink:type="simple" xlink:href="../656/144656.xml">
sorting</link> is important to optimizing the use of other algorithms (such as <link xlink:type="simple" xlink:href="../249/28249.xml">
search</link> and <link xlink:type="simple" xlink:href="../362/20362.xml">
merge</link> algorithms) that require sorted lists to work correctly; it is also often useful for <link xlink:type="simple" xlink:href="../120/1046120.xml">
canonicalizing</link> data and for producing human-readable output. More formally, the output must satisfy two conditions:<p>

<list>
<entry level="1" type="number">

 The output is in nondecreasing order (each element is no smaller than the previous element according to the desired <link xlink:type="simple" xlink:href="../330/30330.xml">
total order</link>);</entry>
<entry level="1" type="number">

 The output is a <link xlink:type="simple" xlink:href="../027/44027.xml">
permutation</link>, or reordering, of the input.</entry>
</list>
</p>
<p>

Since the dawn of computing, the sorting problem has attracted a great deal of research, perhaps due to the complexity of solving it efficiently despite its simple, familiar statement. For example, <link xlink:type="simple" xlink:href="../255/4255.xml">
bubble sort</link> was analyzed as early as 1956.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref> Although many consider it a solved problem, useful new sorting algorithms are still being invented (for example, <link xlink:type="simple" xlink:href="../633/2448633.xml">
library sort</link> was first published in 2004). Sorting algorithms are prevalent in introductory computer science classes, where the abundance of algorithms for the problem provides a gentle introduction to a variety of core algorithm concepts, such as <link xlink:type="simple" xlink:href="../578/44578.xml">
big O notation</link>, <link xlink:type="simple" xlink:href="../154/201154.xml">
divide-and-conquer algorithm</link>s, <link xlink:type="simple" xlink:href="../519/8519.xml">
data structure</link>s, <link xlink:type="simple" xlink:href="../383/495383.xml">
randomized algorithm</link>s, <link xlink:type="simple" xlink:href="../956/37956.xml">
best, worst and average case</link> analysis, <link xlink:type="simple" xlink:href="../481/773481.xml">
time-space tradeoff</link>s, and lower bounds.</p>

<sec>
<st>
 Classification </st>
<p>

Sorting algorithms used in <link xlink:type="simple" xlink:href="../323/5323.xml">
computer science</link> are often classified by:</p>
<p>

<list>
<entry level="1" type="bullet">

 Computational <link xlink:type="simple" xlink:href="../543/7543.xml">
complexity</link> (<link xlink:type="simple" xlink:href="../956/37956.xml">
worst</link>, <link xlink:type="simple" xlink:href="../956/37956.xml">
average</link> and <link xlink:type="simple" xlink:href="../956/37956.xml">
best</link> behaviour) of element comparisons in terms of the size of the list <math>\left( n \right)</math>. For typical sorting algorithms good behavior is <link xlink:type="simple" xlink:href="../578/44578.xml">
<math>\mathcal{O}</math></link><math>\left( n \log n\right)</math> and bad behavior is <math>\Omega\left( n^2 \right)</math>. (See <link xlink:type="simple" xlink:href="../578/44578.xml">
Big O notation</link>) Ideal behavior for a sort is <math>\mathcal{O}\left( n \right)</math>. <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../304/3189304.xml">
Comparison sort</link></database>
</wordnet>
</lexical_database>
</electronic_database>
</information>
</message>
s, sort algorithms which only access the list via an abstract key comparison operation, always need <math>\Omega\left( n \log n\right)</math> comparisons in the worst case.</entry>
<entry level="1" type="bullet">

 Computational <link xlink:type="simple" xlink:href="../543/7543.xml">
complexity</link> of swaps (for "in place" algorithms).</entry>
<entry level="1" type="bullet">

 Memory usage (and use of other computer resources). In particular, some sorting algorithms are "<link xlink:type="simple" xlink:href="../861/219861.xml">
in place</link>", such that only <math>\mathcal{O}(1)</math> or <math>\mathcal{O}(\log n)</math> memory is needed beyond the items being sorted, while others need to create auxiliary locations for data to be temporarily stored.</entry>
<entry level="1" type="bullet">

 Recursion.  Some algorithms are either recursive or non recursive, while others may be both (e.g., merge sort).</entry>
<entry level="1" type="bullet">

 Stability: <b>stable sorting algorithms</b> maintain the relative order of records with equal keys (i.e., values). See below for more information. </entry>
<entry level="1" type="bullet">

 Whether or not they are a <link xlink:type="simple" xlink:href="../304/3189304.xml">
comparison sort</link>. A comparison sort examines the data only by comparing two elements with a comparison operator.</entry>
<entry level="1" type="bullet">

 General method: insertion, exchange, selection, merging, <it>etc</it>. Exchange sorts include bubble sort and quicksort. Selection sorts include shaker sort and heapsort.</entry>
</list>
</p>

<ss2>
<st>
 Stability </st>
<p>

<it>Stable sorting algorithms</it> maintain the relative order of <series wordnetid="108457976" confidence="0.8">
<arrangement wordnetid="107938773" confidence="0.8">
<sequence wordnetid="108459252" confidence="0.8">
<ordering wordnetid="108456993" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<link xlink:type="simple" xlink:href="../131/828131.xml">
records with equal keys</link></group>
</ordering>
</sequence>
</arrangement>
</series>
http://localhost:18088/wiki/index.php/Strict_weak_ordering (i.e., sort key values).
That is, a sorting algorithm is <it>stable</it> if whenever there are two records <it>R</it> and <it>S</it> with the same key and with <it>R</it> appearing before <it>S</it> in the original list, <it>R</it> will appear before <it>S</it> in the sorted list. </p>
<p>

When equal elements are indistinguishable, such as with integers, or more generally, any data where the entire element is the key, stability is not an issue. However, assume that the following pairs of numbers are to be sorted by their first component:</p>
<p>

(4, 2)  (3, 7)  (3, 1)  (5, 6)</p>
<p>

In this case, two different results are possible, one which maintains the relative order of records with equal keys, and one which does not:</p>
<p>

(3, 7)  (3, 1)  (4, 2)  (5, 6)   (order maintained)
(3, 1)  (3, 7)  (4, 2)  (5, 6)   (order changed)</p>
<p>

Unstable sorting algorithms may change the relative order of records with equal keys, but stable sorting algorithms never do so. Unstable sorting algorithms can be specially implemented to be stable. One way of doing this is to artificially extend the key comparison, so that comparisons between two objects with otherwise equal keys are decided using the order of the entries in the original data order as a tie-breaker. Remembering this order, however, often involves an additional space cost.</p>
<p>

Sorting based on a primary, secondary, tertiary, etc. sort key can be done by any sorting method, taking all sort keys into account in comparisons (in other words, using a single composite sort key). If a sorting method is stable, it is also possible to sort multiple times, each time with one sort key. In that case the keys need to be applied in order of increasing priority.</p>
<p>

Example: sorting pairs of numbers as above by first, then second component:</p>
<p>

(4, 2)  (3, 7)  (3, 1)  (4, 6) (original)</p>
<p>

(3, 1)  (4, 2)  (4, 6)  (3, 7) (after sorting by second component)
(3, 1)  (3, 7)  (4, 2)  (4, 6) (after sorting by first component)</p>
<p>

On the other hand:</p>
<p>

(3, 7)  (3, 1)  (4, 2)  (4, 6) (after sorting by first component)
(3, 1)  (4, 2)  (4, 6)  (3, 7) (after sorting by second component, 
order by first component is disrupted).</p>

</ss2>
</sec>
<sec>
<st>
 List of sorting algorithms </st>
<p>

In this table, <it>n</it> is the number of records to be sorted. The columns "Average" and "Worst" give the time complexity in each case, under the assumption that the length of each key is constant, and that therefore all comparisons, swaps, and other needed operations can proceed in constant time. "Memory" denotes the amount of auxiliary storage needed beyond that used by the list itself, under the same assumption. These are all <link xlink:type="simple" xlink:href="../304/3189304.xml">
comparison sort</link>s.</p>
<p>

<table class="wikitable sortable">
<header>
Name</header>
<header>
Average</header>
<header>
Worst</header>
<header>
Memory</header>
<header>
Stable</header>
<header>
Method</header>
<header>
Other notes</header>
<row align="center">
<col>
<algorithm wordnetid="105847438" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../255/4255.xml">
Bubble sort</link></algorithm>
</col>
<col style="background:#ffdddd">
<math> \mathcal{O} \left( n^2 \right) </math></col>
<col style="background:#ffdddd">
<math> \mathcal{O} \left( n^2 \right) </math></col>
<col style="background:#ddffdd">
<math>\mathcal{O}\left( 1 \right)</math></col>
<col style="background:#ddffdd">
Yes</col>
<col>
Exchanging</col>
<col align="left"></col>
</row>
<row align="center">
<col>
<algorithm wordnetid="105847438" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../482/159482.xml">
Cocktail sort</link></algorithm>
</col>
<col>
&mdash;</col>
<col style="background:#ffdddd">
<math> \mathcal{O} \left( n^2 \right) </math></col>
<col style="background:#ddffdd">
<math>\mathcal{O}\left( 1 \right)</math></col>
<col style="background:#ddffdd">
Yes</col>
<col>
Exchanging</col>
<col align="left"></col>
</row>
<row align="center">
<col>
<message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<idea wordnetid="105833840" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<category wordnetid="105838765" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<kind wordnetid="105839024" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../439/159439.xml">
Comb sort</link></database>
</kind>
</wordnet>
</lexical_database>
</category>
</concept>
</electronic_database>
</idea>
</information>
</message>
</col>
<col>
&mdash;</col>
<col>
&mdash;</col>
<col style="background:#ddffdd">
<math>\mathcal{O}\left( 1 \right)</math></col>
<col style="background:#ffdddd">
No</col>
<col>
Exchanging</col>
<col align="left">
Small code size</col>
</row>
<row align="center">
<col>
<message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<idea wordnetid="105833840" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<category wordnetid="105838765" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<kind wordnetid="105839024" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../127/522127.xml">
Gnome sort</link></database>
</kind>
</wordnet>
</lexical_database>
</category>
</concept>
</electronic_database>
</idea>
</information>
</message>
</col>
<col>
&mdash;</col>
<col style="background:#ffdddd">
<math> \mathcal{O} \left( n^2 \right) </math></col>
<col style="background:#ddffdd">
<math>\mathcal{O}\left( 1 \right)</math></col>
<col style="background:#ddffdd">
Yes</col>
<col>
Exchanging</col>
<col align="left">
Tiny code size</col>
</row>
<row align="center">
<col>
<algorithm wordnetid="105847438" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../352/29352.xml">
Selection sort</link></algorithm>
</col>
<col style="background:#ffdddd">
<math> \mathcal{O} \left( n^2 \right) </math></col>
<col style="background:#ffdddd">
<math> \mathcal{O} \left( n^2 \right) </math></col>
<col style="background:#ddffdd">
<math>\mathcal{O}\left( 1 \right)</math></col>
<col style="background:#ffdddd">
No</col>
<col>
Selection</col>
<col align="left">
Can be implemented as a stable sort</col>
</row>
<row align="center">
<col>
<algorithm wordnetid="105847438" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../205/15205.xml">
Insertion sort</link></algorithm>
</col>
<col style="background:#ffdddd">
<math> \mathcal{O} \left( n^2 \right) </math></col>
<col style="background:#ffdddd">
<math> \mathcal{O} \left( n^2 \right) </math></col>
<col style="background:#ddffdd">
<math>\mathcal{O}\left( 1 \right)</math></col>
<col style="background:#ddffdd">
Yes</col>
<col>
Insertion</col>
<col align="left">
 Average case is also <math>\mathcal{O}\left( n + d \right)</math>, where <it>d</it> is the number of <link>
inversions</link></col>
</row>
<row align="center">
<col>
<message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<idea wordnetid="105833840" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<category wordnetid="105838765" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<kind wordnetid="105839024" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../355/77355.xml">
Shell sort</link></database>
</kind>
</wordnet>
</lexical_database>
</category>
</concept>
</electronic_database>
</idea>
</information>
</message>
</col>
<col>
&mdash;</col>
<col style="background:#ffdddd">
<math>\mathcal{O}\left( n \log^2 n \right)</math></col>
<col style="background:#ddffdd">
<math>\mathcal{O}\left( 1 \right)</math></col>
<col style="background:#ffdddd">
No</col>
<col>
Insertion</col>
<col align="left"></col>
</row>
<row align="center">
<col>
<link xlink:type="simple" xlink:href="../027/6508027.xml">
Binary tree sort</link></col>
<col style="background:#ddffdd">
<math>\mathcal{O}\left( n \log n \right)</math></col>
<col style="background:#ddffdd">
<math>\mathcal{O}\left( n \log n \right)</math></col>
<col style="background:#ffdddd">
<math>\mathcal{O}\left( n \right)</math></col>
<col style="background:#ddffdd">
Yes</col>
<col>
Insertion</col>
<col align="left">
 When using a <link xlink:type="simple" xlink:href="../310/378310.xml">
self-balancing binary search tree</link></col>
</row>
<row align="center">
<col>
<message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<idea wordnetid="105833840" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<category wordnetid="105838765" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<kind wordnetid="105839024" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../633/2448633.xml">
Library sort</link></database>
</kind>
</wordnet>
</lexical_database>
</category>
</concept>
</electronic_database>
</idea>
</information>
</message>
</col>
<col style="background:#ddffdd">
<math>\mathcal{O}\left( n \log n \right)</math></col>
<col style="background:#ffdddd">
<math> \mathcal{O} \left( n^2 \right) </math></col>
<col style="background:#ffdddd">
<math>\mathcal{O}\left( n \right)</math></col>
<col style="background:#ddffdd">
Yes</col>
<col>
Insertion</col>
<col align="left"></col>
</row>
<row align="center">
<col>
<algorithm wordnetid="105847438" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../039/20039.xml">
Merge sort</link></algorithm>
</col>
<col style="background:#ddffdd">
<math>\mathcal{O}\left( n \log n \right)</math></col>
<col style="background:#ddffdd">
<math>\mathcal{O}\left( n \log n \right)</math></col>
<col style="background:#ffdddd">
<math>\mathcal{O}\left( n \right)</math></col>
<col style="background:#ddffdd">
Yes</col>
<col>
Merging</col>
<col align="left"></col>
</row>
<row align="center">
<col >
<link xlink:type="simple" xlink:href="../861/219861.xml">
In-place</link> <link xlink:type="simple" xlink:href="../039/20039.xml">
merge sort</link></col>
<col style="background:#ddffdd">
<math>\mathcal{O}\left( n \log n \right)</math></col>
<col style="background:#ddffdd">
<math>\mathcal{O}\left( n \log n \right)</math></col>
<col style="background:#ddffdd">
<math>\mathcal{O}\left( 1 \right)</math></col>
<col style="background:#ffdddd">
No</col>
<col>
Merging</col>
<col align="left">
 Example implementation here: <weblink xlink:type="simple" xlink:href="http://citeseer.ist.psu.edu/472101.html">
http://citeseer.ist.psu.edu/472101.html</weblink></col>
</row>
<row align="center">
<col>
<algorithm wordnetid="105847438" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../995/13995.xml">
Heapsort</link></algorithm>
</col>
<col style="background:#ddffdd">
<math>\mathcal{O}\left( n \log n \right)</math></col>
<col style="background:#ddffdd">
<math>\mathcal{O}\left( n \log n \right)</math></col>
<col style="background:#ddffdd">
<math>\mathcal{O}\left( 1 \right)</math></col>
<col style="background:#ffdddd">
No</col>
<col>
Selection</col>
<col align="left"></col>
</row>
<row align="center">
<col>
<link xlink:type="simple" xlink:href="../450/100450.xml">
Smoothsort</link></col>
<col>
&mdash;</col>
<col style="background:#ddffdd">
<math>\mathcal{O}\left( n \log n \right)</math></col>
<col style="background:#ddffdd">
<math>\mathcal{O}\left( 1 \right)</math></col>
<col style="background:#ffdddd">
No</col>
<col>
Selection</col>
<col align="left"></col>
</row>
<row align="center">
<col>
<algorithm wordnetid="105847438" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../249/3268249.xml">
Quicksort</link></algorithm>
</col>
<col style="background:#ddffdd">
<math>\mathcal{O}\left( n \log n \right)</math></col>
<col style="background:#ffdddd">
<math> \mathcal{O}\left( n^2 \right)</math></col>
<col style="background:#ffffdd">
<math>\mathcal{O}\left( \log n \right)</math></col>
<col style="background:#ffdddd">
No</col>
<col>
Partitioning</col>
<col align="left">
 <link>
Naïve</link>variants use <math> \mathcal{O} \left( n \right) </math> space; can be <math>\mathcal{O}\left( n \log n \right)</math> worst case if median pivot is used</col>
</row>
<row align="center">
<col>
<message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<idea wordnetid="105833840" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<category wordnetid="105838765" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<kind wordnetid="105839024" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../477/363477.xml">
Introsort</link></database>
</kind>
</wordnet>
</lexical_database>
</category>
</concept>
</electronic_database>
</idea>
</information>
</message>
</col>
<col style="background:#ddffdd">
<math>\mathcal{O}\left( n \log n \right)</math></col>
<col style="background:#ddffdd">
<math>\mathcal{O}\left( n \log n \right)</math></col>
<col style="background:#ffffdd">
<math>\mathcal{O}\left( \log n \right)</math></col>
<col style="background:#ffdddd">
No</col>
<col>
Hybrid</col>
<col align="left">
 used in most implementations of <link xlink:type="simple" xlink:href="../777/156777.xml">
STL</link></col>
</row>
<row align="center">
<col>
<idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<category wordnetid="105838765" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<social_event wordnetid="107288639" confidence="0.8">
<contest wordnetid="107456188" confidence="0.8">
<game wordnetid="100456199" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<kind wordnetid="105839024" confidence="0.8">
<link xlink:type="simple" xlink:href="../256/1184256.xml">
Patience sorting</link></kind>
</psychological_feature>
</game>
</contest>
</social_event>
</event>
</category>
</concept>
</idea>
</col>
<col>
&mdash;</col>
<col style="background:#ffdddd">
<math> \mathcal{O} \left( n^2 \right) </math></col>
<col style="background:#ffdddd">
<math>\mathcal{O}\left( n \right)</math></col>
<col style="background:#ffdddd">
No</col>
<col>
Insertion &amp; Selection</col>
<col align="left">
 Finds all the <link xlink:type="simple" xlink:href="../078/4587078.xml">
longest increasing subsequence</link>s within O(<it>n</it> log <it>n</it>)</col>
</row>
<row align="center">
<col>
<message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<idea wordnetid="105833840" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<category wordnetid="105838765" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<kind wordnetid="105839024" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../351/14083351.xml">
Strand sort</link></database>
</kind>
</wordnet>
</lexical_database>
</category>
</concept>
</electronic_database>
</idea>
</information>
</message>
</col>
<col style="background:#ddffdd">
<math>\mathcal{O}\left( n \log n \right)</math></col>
<col style="background:#ffdddd">
<math> \mathcal{O} \left( n^2 \right) </math></col>
<col style="background:#ffdddd">
<math>\mathcal{O}\left( n \right)</math></col>
<col style="background:#ddffdd">
Yes</col>
<col>
Selection</col>
<col align="left"></col>
</row>
</table>
</p>
<p>

The following table describes sorting algorithms that are not <link xlink:type="simple" xlink:href="../304/3189304.xml">
comparison sort</link>s. As such, they are not limited by a <math>\mathcal{O}\left( n \log n \right)</math> lower bound.  Complexities below are in terms of <it>n</it>, the number of items to be sorted, <it>k</it>, the size of each key, and <it>s</it>, the chunk size used by the implementation. Many of them are based on the assumption that the key size is large enough that all entries have unique key values, and hence that <it>n</it>  2<it>k</it>, where  means "much less than."</p>
<p>

<table class="wikitable sortable">
<header>
Name</header>
<header>
Average</header>
<header>
Worst</header>
<header>
Memory</header>
<header>
Stable</header>
<header>
<it>n</it>  2<it>k''</it></header>
<header>
Notes</header>
<row align="center">
<col>
<message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<idea wordnetid="105833840" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<category wordnetid="105838765" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<kind wordnetid="105839024" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../681/24681.xml">
Pigeonhole sort</link></database>
</kind>
</wordnet>
</lexical_database>
</category>
</concept>
</electronic_database>
</idea>
</information>
</message>
</col>
<col style="background:#ddffdd">
<math>\mathcal{O}\left( n + 2^k \right)</math></col>
<col style="background:#ddffdd">
<math>\mathcal{O}\left( n + 2^k \right)</math></col>
<col>
<math>\mathcal{O}\left( 2^k \right)</math></col>
<col style="background:#ddffdd">
Yes</col>
<col>
Yes</col>

</row>
<row align="center">
<col>
<message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<idea wordnetid="105833840" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<category wordnetid="105838765" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<kind wordnetid="105839024" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../592/97592.xml">
Bucket sort</link></database>
</kind>
</wordnet>
</lexical_database>
</category>
</concept>
</electronic_database>
</idea>
</information>
</message>
</col>
<col style="background:#ddffdd">
<math>\mathcal{O}\left( n \cdot k \right)</math></col>
<col style="background:#ffdddd">
<math>\mathcal{O}\left( n^2 \cdot k \right)</math></col>
<col>
<math>\mathcal{O}\left( n \cdot k \right)</math></col>
<col style="background:#ddffdd">
Yes</col>
<col>
No</col>
<col>
Assumes uniform distribution of elements from the domain in the array.</col>
</row>
<row align="center">
<col>
<message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<idea wordnetid="105833840" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<category wordnetid="105838765" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<kind wordnetid="105839024" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../864/99864.xml">
Counting sort</link></database>
</kind>
</wordnet>
</lexical_database>
</category>
</concept>
</electronic_database>
</idea>
</information>
</message>
</col>
<col style="background:#ddffdd">
<math>\mathcal{O}\left( n + 2^k \right)</math></col>
<col style="background:#ddffdd">
<math>\mathcal{O}\left( n + 2^k \right)</math></col>
<col>
<math>\mathcal{O}\left( n + 2^k \right)</math></col>
<col style="background:#ddffdd">
Yes</col>
<col>
Yes</col>

</row>
<row align="center">
<col>
LSD <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<idea wordnetid="105833840" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<category wordnetid="105838765" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<kind wordnetid="105839024" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../980/25980.xml">
Radix sort</link></database>
</kind>
</wordnet>
</lexical_database>
</category>
</concept>
</electronic_database>
</idea>
</information>
</message>
</col>
<col style="background:#ddffdd">
<math>\mathcal{O}\left( n \cdot \frac{k}{s} \right)</math></col>
<col style="background:#ddffdd">
<math>\mathcal{O}\left( n \cdot \frac{k}{s} \right)</math></col>
<col>
<math>\mathcal{O}\left( n \right)</math></col>
<col style="background:#ddffdd">
Yes</col>
<col>
No</col>

</row>
<row align="center">
<col>
MSD <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<idea wordnetid="105833840" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<category wordnetid="105838765" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<kind wordnetid="105839024" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../980/25980.xml">
Radix sort</link></database>
</kind>
</wordnet>
</lexical_database>
</category>
</concept>
</electronic_database>
</idea>
</information>
</message>
</col>
<col style="background:#ddffdd">
<math>\mathcal{O}\left( n \cdot \frac{k}{s} \right)</math></col>
<col style="background:#ddffdd">
<math>\mathcal{O}\left( n \cdot \frac{k}{s} \cdot 2^s \right)</math></col>
<col>
<math>\mathcal{O}\left( \frac{k}{s} \cdot 2^s \right)</math></col>
<col style="background:#ffdddd">
No</col>
<col>
No</col>

</row>
<row align="center">
<col>
<message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../578/7794578.xml">
Spreadsort</link></database>
</wordnet>
</lexical_database>
</electronic_database>
</information>
</message>
</col>
<col style="background:#ddffdd">
<math>\mathcal{O}\left( n \cdot \frac{k}{s} \right)</math></col>
<col style="background:#ddffdd">
<math>\mathcal{O}\left( n \cdot ( k - \log (n) )^5  \right)</math></col>
<col>
<math>\mathcal{O}\left( \frac{k}{s} \cdot 2^s \right)</math></col>
<col style="background:#ffdddd">
No</col>
<col>
No</col>
<col>
Asymptotics are based on the assumption that n  2k, but the algorithm does not require this.</col>
</row>
</table>
</p>
<p>

The following table describes some sorting algorithms that are impractical for real-life use due to extremely poor performance or a requirement for specialized hardware.</p>
<p>

<table class="wikitable sortable">
<header>
Name</header>
<header>
Average</header>
<header>
Worst</header>
<header>
Memory</header>
<header>
Stable</header>
<header>
Comparison</header>
<header>
Other notes</header>
<row align="center">
<col>
<algorithm wordnetid="105847438" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../870/99870.xml">
Bogosort</link></algorithm>
</col>
<col >
<math>\mathcal{O}\left( n \cdot n! \right)</math></col>
<col >
<math>\mathcal{O}\left( \infty \right)</math></col>
<col>
<math>\mathcal{O}\left( 1 \right)</math></col>
<col style="background:#ffdddd">
No</col>
<col>
Yes</col>
<col align="left">
 Average time using <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../962/12684962.xml">
Fisher-Yates shuffle</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</col>
</row>
<row align="center">
<col>
<algorithm wordnetid="105847438" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../870/99870.xml#xpointer(//*[./st=%22Bozo+sort%22])">
Bozo sort</link></algorithm>
</col>
<col >
<math>\mathcal{O}\left( n \cdot n! \right)</math></col>
<col >
<math>\mathcal{O}\left( \infty \right)</math></col>
<col>
<math>\mathcal{O}\left( 1 \right)</math></col>
<col style="background:#ffdddd">
No</col>
<col>
Yes</col>
<col align="left">
Average time is asymptotically half that of bogosort</col>
</row>
<row align="center">
<col>
<message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<idea wordnetid="105833840" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<category wordnetid="105838765" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<kind wordnetid="105839024" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../662/563662.xml">
Stooge sort</link></database>
</kind>
</wordnet>
</lexical_database>
</category>
</concept>
</electronic_database>
</idea>
</information>
</message>
</col>
<col >
<math>\mathcal{O}\left( n^{2.71} \right)</math></col>
<col >
<math>\mathcal{O}\left( n^{2.71} \right)</math></col>
<col>
<math>\mathcal{O}\left( \log n \right)</math></col>
<col style="background:#ffdddd">
No</col>
<col>
Yes</col>

</row>
<row align="center">
<col>
<message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../423/1350423.xml">
Bead sort</link></database>
</wordnet>
</lexical_database>
</electronic_database>
</information>
</message>
</col>
<col>
N/A</col>
<col>
N/A</col>
<col>
&mdash;</col>
<col>
N/A</col>
<col>
No</col>
<col align="left">
Requires specialized hardware</col>
</row>
<row align="center">
<col>
<message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../065/478065.xml">
Simple pancake sort</link></database>
</wordnet>
</lexical_database>
</electronic_database>
</information>
</message>
</col>
<col>
<math>\mathcal{O}\left( n \right)</math></col>
<col>
<math>\mathcal{O}\left( n \right)</math></col>
<col>
<math>\mathcal{O}\left( \log n \right)</math></col>
<col style="background:#ffdddd">
No</col>
<col>
Yes</col>
<col align="left">
Count is number of flips.</col>
</row>
<row align="center">
<col>
<message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../061/562061.xml">
Sorting network</link></database>
</wordnet>
</lexical_database>
</electronic_database>
</information>
</message>
s</col>
<col >
<math>\mathcal{O}\left( \log n \right)</math></col>
<col >
<math>\mathcal{O}\left( \log n \right)</math></col>
<col>
<math>\mathcal{O}\left( n \cdot \log (n) \right)</math></col>
<col style="background:#ddffdd">
Yes</col>
<col>
No</col>
<col align="left">
Requires a custom circuit of size <math>\mathcal{O}\left( n \cdot \log (n) \right)</math></col>
</row>
</table>
</p>
<p>

Additionally, theoretical computer scientists have detailed other sorting algorithms that provide better than <math>\mathcal{O}\left( n \log n \right)</math> time complexity with additional constraints, including:</p>
<p>

<list>
<entry level="1" type="bullet">

 Han's algorithm, a deterministic algorithm for sorting keys from a <entity wordnetid="100001740" confidence="0.8">
<link xlink:type="simple" xlink:href="../714/47714.xml">
domain</link></entity>
 of finite size, taking <math>\mathcal{O}\left( n \log \log n \right)</math> time and <math>\mathcal{O}\left( n \right)</math> space.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%222%22])">2</ref></entry>
<entry level="1" type="bullet">

 Thorup's algorithm, a randomized algorithm for sorting keys from a domain of finite size, taking <math>\mathcal{O}\left( n \log \log n \right)</math> time and <math>\mathcal{O}\left( n \right)</math> space.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%223%22])">3</ref></entry>
<entry level="1" type="bullet">

 An <link xlink:type="simple" xlink:href="../563/14563.xml">
integer</link> sorting algorithm taking <math>\mathcal{O}\left( n \sqrt{\log \log n} \right)</math> time and <math>\mathcal{O}\left( n \right)</math> space.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%224%22])">4</ref></entry>
</list>
</p>
<p>

While theoretically interesting, to date these algorithms have seen little use in practice.</p>

</sec>
<sec>
<st>
 Summaries of popular sorting algorithms </st>

<ss1>
<st>
 Bubble sort </st>

<p>

<indent level="1">

<it>Main article: <algorithm wordnetid="105847438" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../255/4255.xml">
Bubble sort</link></algorithm>
</it>
</indent>
<it>Bubble sort</it> is a straightforward and simplistic method of sorting data that is used in computer science education. The algorithm starts at the beginning of the data set. It compares the first two elements, and if the first is greater than the second, it swaps them. It continues doing this for each pair of adjacent elements to the end of the data set. It then starts again with the first two elements, repeating until no swaps have occurred on the last pass. While simple, this algorithm is highly inefficient and is rarely used except in education.  For example, if we have 100 elements then the total number of comparisons will be 10000. A slightly better variant, <link xlink:type="simple" xlink:href="../482/159482.xml">
cocktail sort</link>, works by inverting the ordering criteria and the pass direction on alternating passes.
Its average case and worst case are both O(<it>n</it>²).</p>

</ss1>
<ss1>
<st>
 Selection sort </st>

<p>

<indent level="1">

<it>Main article: <algorithm wordnetid="105847438" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../352/29352.xml">
Selection sort</link></algorithm>
</it>
</indent>
<it>Selection sort</it> is a simple sorting algorithm that improves on the performance of bubble sort. It works by first finding the smallest element using a linear scan and swapping it into the first position in the list, then finding the second smallest element by scanning the remaining elements, and so on. Selection sort is unique compared to almost any other algorithm in that its running time is not affected by the prior ordering of the list: it performs the same number of operations because of its simple structure. Selection sort requires (<it>n</it> - 1) swaps and hence Θ(<it>n</it>) memory writes. However, Bubble sort requires (<it>n</it> - 1) + (<it>n</it> - 2) + ... + 2 + 1 = <it>n</it>(<it>n</it> - 1) / 2 = Θ(<it>n</it>2) comparisons. Thus it can be very attractive if writes are the most expensive operation, but otherwise selection sort will usually be outperformed by insertion sort or the more complicated algorithms.</p>

</ss1>
<ss1>
<st>
 Insertion sort </st>

<p>

<indent level="1">

<it>Main article: <algorithm wordnetid="105847438" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../205/15205.xml">
Insertion sort</link></algorithm>
</it>
</indent>
<it>Insertion sort</it> is a simple sorting algorithm that is relatively efficient for small lists and mostly-sorted lists, and often is used as part of more sophisticated algorithms. It works by taking elements from the list one by one and inserting them in their correct position into a new sorted list. In arrays, the new list and the remaining elements can share the array's space, but insertion is expensive, requiring shifting all following elements over by one. The insertion sort works just like its name suggests - it inserts each item into its proper place in the final list. The simplest implementation of this requires two list structures - the source list and the list into which sorted items are inserted. To save memory, most implementations use an in-place sort that works by moving the current item past the already sorted items and repeatedly swapping it with the preceding item until it is in place. <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<idea wordnetid="105833840" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<category wordnetid="105838765" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<kind wordnetid="105839024" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../355/77355.xml">
Shell sort</link></database>
</kind>
</wordnet>
</lexical_database>
</category>
</concept>
</electronic_database>
</idea>
</information>
</message>
 (see below) is a variant of insertion sort that is more efficient for larger lists. This method is much more efficient than the bubble sort, though it has more constraints.</p>

</ss1>
<ss1>
<st>
 Shell sort </st>

<p>

<indent level="1">

<it>Main article: <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<idea wordnetid="105833840" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<category wordnetid="105838765" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<kind wordnetid="105839024" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../355/77355.xml">
Shell sort</link></database>
</kind>
</wordnet>
</lexical_database>
</category>
</concept>
</electronic_database>
</idea>
</information>
</message>
</it>
</indent>
<it>Shell sort</it> was invented by <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<link xlink:type="simple" xlink:href="../054/6414054.xml">
Donald Shell</link></scientist>
</causal_agent>
</person>
</physical_entity>
 in <link xlink:type="simple" xlink:href="../662/34662.xml">
1959</link>. It improves upon bubble sort and insertion sort by moving out of order elements more than one position at a time. One implementation can be described as arranging the data sequence in a two-dimensional array and then sorting the columns of the array using insertion sort. Although this method is inefficient for large data sets, it is one of the fastest algorithms for sorting small numbers of elements (sets with fewer than 1000 or so elements). Another advantage of this algorithm is that it requires relatively small amounts of memory.</p>

</ss1>
<ss1>
<st>
 Merge sort </st>

<p>

<indent level="1">

<it>Main article: <algorithm wordnetid="105847438" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../039/20039.xml">
Merge sort</link></algorithm>
</it>
</indent>
<it>Merge sort</it> takes advantage of the ease of merging already sorted lists into a new sorted list. It starts by comparing every two elements (i.e., 1 with 2, then 3 with 4...) and swapping them if the first should come after the second. It then merges each of the resulting lists of two into lists of four, then merges those lists of four, and so on; until at last two lists are merged into the final sorted list. Of the algorithms described here, this is the first that scales well to very large lists, because its worst-case running time is O(<it>n</it> log <it>n</it>). </p>

</ss1>
<ss1>
<st>
 Heapsort </st>

<p>

<indent level="1">

<it>Main article: <algorithm wordnetid="105847438" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../995/13995.xml">
Heapsort</link></algorithm>
</it>
</indent>
<it>Heapsort</it> is a much more efficient version of <link xlink:type="simple" xlink:href="../352/29352.xml">
selection sort</link>. It also works by determining the largest (or smallest) element of the list, placing that at the end (or beginning) of the list, then continuing with the rest of the list, but accomplishes this task efficiently by using a data structure called a <link xlink:type="simple" xlink:href="../996/13996.xml">
heap</link>, a special type of <link xlink:type="simple" xlink:href="../321/4321.xml">
binary tree</link>. Once the data list has been made into a heap, the root node is guaranteed to be the largest element. When it is removed and placed at the end of the list, the heap is rearranged so the largest element remaining moves to the root. Using the heap, finding the next largest element takes <it>O(log n)</it> time, instead of <it>O(n)</it> for a linear scan as in simple selection sort. This allows Heapsort to run in <it>O(n log n)</it> time.</p>

</ss1>
<ss1>
<st>
 Quicksort </st>

<p>

<indent level="1">

<it>Main article: <algorithm wordnetid="105847438" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../249/3268249.xml">
Quicksort</link></algorithm>
</it>
</indent>
<it>Quicksort</it> is a <link xlink:type="simple" xlink:href="../154/201154.xml">
divide and conquer</link> <link xlink:type="simple" xlink:href="../775/775.xml">
algorithm</link> which relies on a <it>partition</it> operation: to partition an array, we choose an element, called a <it>pivot</it>, move all smaller elements before the pivot, and move all greater elements after it. This can be done efficiently in linear time and <link xlink:type="simple" xlink:href="../861/219861.xml">
in-place</link>. We then recursively sort the lesser and greater sublists. Efficient implementations of quicksort (with in-place partitioning) are typically unstable sorts and somewhat complex, but are among the fastest sorting algorithms in practice. Together with its modest O(log <it>n</it>) space usage, this makes quicksort one of the most popular sorting algorithms, available in many standard libraries. The most complex issue in quicksort is choosing a good pivot element; consistently poor choices of pivots can result in drastically slower (O(<it>n</it>²)) performance, but if at each step we choose the <it>median</it> as the pivot then it works in O(<it>n</it>&nbsp;log&nbsp;<it>n</it>).</p>

</ss1>
<ss1>
<st>
Bucket sort</st>

<p>

<indent level="1">

<it>Main article: <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<idea wordnetid="105833840" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<category wordnetid="105838765" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<kind wordnetid="105839024" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../592/97592.xml">
Bucket sort</link></database>
</kind>
</wordnet>
</lexical_database>
</category>
</concept>
</electronic_database>
</idea>
</information>
</message>
</it>
</indent>
Bucket sort is a sorting algorithm that works by partitioning an array into a finite number of buckets. Each bucket is then sorted individually, either using a different sorting algorithm, or by recursively applying the bucket sorting algorithm. A variation of this method called the single buffered count sort is faster than the quick sort and takes about the same time to run on any set of data.</p>

</ss1>
<ss1>
<st>
 Radix sort </st>

<p>

<indent level="1">

<it>Main article: <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<idea wordnetid="105833840" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<category wordnetid="105838765" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<kind wordnetid="105839024" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../980/25980.xml">
Radix sort</link></database>
</kind>
</wordnet>
</lexical_database>
</category>
</concept>
</electronic_database>
</idea>
</information>
</message>
</it>
</indent>
<it>Radix sort</it> is an algorithm that sorts a list of fixed-size numbers of length <it>k</it> in O(<it>n</it> · <it>k</it>) time by treating them as bit strings. We first sort the list by the least significant bit while preserving their relative order using a stable sort. Then we sort them by the next bit, and so on from right to left, and the list will end up sorted. Most often, the <link xlink:type="simple" xlink:href="../864/99864.xml">
counting sort</link> algorithm is used to accomplish the bitwise sorting, since the number of values a bit can have is small.</p>

</ss1>
</sec>
<sec>
<st>
 Memory usage patterns and index sorting </st>
<p>

When the size of the array to be sorted approaches or exceeds the available primary memory, so that (much slower) disk or swap space must be employed, the memory usage pattern of a sorting algorithm becomes important, and an algorithm that might have been fairly efficient when the array fit easily in RAM may become impractical. In this scenario, the total number of comparisons becomes (relatively) less important, and the number of times sections of memory must be copied or swapped to and from the disk can dominate the performance characteristics of an algorithm. Thus, the number of passes and the localization of comparisons can be more important than the raw number of comparisons, since comparisons of nearby elements to one another happen at <link xlink:type="simple" xlink:href="../631/6631.xml">
system bus</link> speed (or, with caching, even at <link>
CPU</link> speed), which, compared to disk speed, is virtually instantaneous.</p>
<p>

For example, the popular recursive <link xlink:type="simple" xlink:href="../249/3268249.xml">
quicksort</link> algorithm provides quite reasonable performance with adequate RAM, but due to the recursive way that it copies portions of the array it becomes much less practical when the array does not fit in RAM, because it may cause a number of slow copy or move operations to and from disk. In that scenario, another algorithm may be preferable even if it requires more total comparisons.</p>
<p>

One way to work around this problem, which works well when complex records (such as in a <link xlink:type="simple" xlink:href="../873/25873.xml">
relational database</link>) are being sorted by a relatively small key field, is to create an index into the array and then sort the index, rather than the entire array. (A sorted version of the entire array can then be produced with one pass, reading from the index, but often even that is unnecessary, as having the sorted index is adequate.)  Because the index is much smaller than the entire array, it may fit easily in memory where the entire array would not, effectively eliminating the disk-swapping problem. This procedure is sometimes called "tag sort".<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%225%22])">5</ref></p>
<p>

Another technique for overcoming the memory-size problem is to combine two algorithms in a way that takes advantages of the strength of each to improve overall performance. For instance, the array might be subdivided into chunks of a size that will fit easily in RAM (say, a few thousand elements), the chunks sorted using an efficient algorithm (such as <link xlink:type="simple" xlink:href="../249/3268249.xml">
quicksort</link> or <link xlink:type="simple" xlink:href="../995/13995.xml">
heapsort</link>), and the results merged as per <link xlink:type="simple" xlink:href="../039/20039.xml">
mergesort</link>. This is less efficient than just doing mergesort in the first place, but it requires less physical RAM (to be practical) than a full quicksort on the whole array.</p>
<p>

Techniques can also be combined. For sorting very large sets of data that vastly exceed system memory, even the index may need to be sorted using an algorithm or combination of algorithms designed to perform reasonably with <link xlink:type="simple" xlink:href="../354/32354.xml">
virtual memory</link>, i.e., to reduce the amount of swapping required.</p>

</sec>
<sec>
<st>
 Graphical representations </st>
<p>

<list>
<entry level="1" type="bullet">

 <university wordnetid="108286163" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../811/239811.xml">
Boston College</link></university>
 has a <it><weblink xlink:type="simple" xlink:href="http://vision.bc.edu/~dmartin/teaching/sorting/anim-html/all.html">
graphical demonstration</weblink></it> and thorough discussion of 8 standard sorting algorithms on 4 common initial conditions.</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../047/568047.xml">
Hobart and William Smith Colleges</link> has a <it><weblink xlink:type="simple" xlink:href="http://math.hws.edu/TMCM/java/xSortLab/">
graphical demonstration</weblink></it> of various sorting algorithms. It includes explanations of each step in the sort, plus a timing test. Thus is a good tool for the novice computer science student.</entry>
<entry level="1" type="bullet">

 <link>
University of Linköping</link> has a <it><weblink xlink:type="simple" xlink:href="http://www.ida.liu.se/~TDDB28/mtrl/demo/sorting/index.sv.shtml">
graphical demonstration</weblink></it> in their course material.</entry>
<entry level="1" type="bullet">

 The <weblink xlink:type="simple" xlink:href="http://thomas.baudel.name/Visualisation/VisuTri/">
sort algorithm visualizer</weblink> provides graphical animation of 11 comparison-based sorts in a variety of initial configurations.</entry>
<entry level="1" type="bullet">

 A <weblink xlink:type="simple" xlink:href="http://homepage.mac.com/mihailod/atic/sorting.html">
Java applet</weblink> visually demonstrates several sorting algorithms.</entry>
<entry level="1" type="bullet">

 Some <weblink xlink:type="simple" xlink:href="http://coderaptors.com/?All_sorting_algorithms">
Java applets</weblink> showing common comparison-based sorts with colored elements and allowing experimenting with initial conditions. Also calculates some statistics and describes the algorithms.</entry>
</list>
</p>
<p>

Microsoft's "Quick" programming languages (such as <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../569/63569.xml">
QuickBASIC</link></programming_language>
 and <link xlink:type="simple" xlink:href="../276/1728276.xml">
QuickPascal</link>) have a file named "sortdemo" (with extension BAS and PAS for QB and QP, respectively) in the examples folder that provides a graphical representation of several of the various sort procedures described here, as well as performance ratings of each.</p>

</sec>
<sec>
<st>
 See also </st>
<p>

<list>
<entry level="1" type="bullet">

 <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../246/1478246.xml">
External sorting</link></database>
</wordnet>
</lexical_database>
</electronic_database>
</information>
</message>
</entry>
<entry level="1" type="bullet">

 <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../061/562061.xml">
Sorting network</link></database>
</wordnet>
</lexical_database>
</electronic_database>
</information>
</message>
s (compare)</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../489/7489.xml">
Collation</link></entry>
<entry level="1" type="bullet">

 <parlance wordnetid="107081177" confidence="0.8">
<message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<formulation wordnetid="107069948" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<expressive_style wordnetid="107066659" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../537/1345537.xml">
Schwartzian transform</link></database>
</expressive_style>
</wordnet>
</formulation>
</lexical_database>
</electronic_database>
</information>
</message>
</parlance>
</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../189/23189.xml#xpointer(//*[./st=%22Shuffling+algorithms%22])">
Shuffling algorithms</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../249/28249.xml">
Search algorithm</link>s</entry>
<entry level="1" type="bullet">

 : Uses sorting a deck of cards with many sorting algorithms as an example</entry>
</list>
</p>

</sec>
<sec>
<st>
Notes</st>

<p>

<reflist>
<entry id="1">
http://www.cs.duke.edu/~ola/papers/bubble.pdf</entry>
<entry id="2">
Y. Han. <it>Deterministic sorting in <math>\mathcal{O}\left( n \log \log n \right)</math> time and linear space</it>. Proceedings of the thiry-fourth annual ACM symposium on Theory of computing, Montreal, Quebec, Canada, 2002,p.602-608. </entry>
<entry id="3">
M. Thorup. <it>Randomized Sorting in <math>\mathcal{O}\left( n \log \log n \right)</math> Time and Linear Space Using Addition, Shift, and Bit-wise Boolean Operations</it>. Journal of Algorithms, Volume 42, Number 2, February 2002 , pp. 205-230(26)</entry>
<entry id="4">
Y. Han, M. Thorup, <it>Integer Sorting in <math>\mathcal{O}\left( n \sqrt{\log \log n} \right)</math> Time and Linear Space.</it> Proceedings of the 43rd Symposium on Foundations of Computer Science, 2002, p. 135-144.</entry>
<entry id="5">
<weblink xlink:type="simple" xlink:href="http://www.pcmag.com/encyclopedia_term/0,2542,t=tag+sort&amp;i=52532,00.asp">
tag sort Definition</weblink></entry>
</reflist>
</p>

</sec>
<sec>
<st>
References</st>
<p>

<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../095/8095.xml">
D. E. Knuth</link>, <it><work wordnetid="104599396" confidence="0.8">
<product wordnetid="104007894" confidence="0.8">
<creation wordnetid="103129123" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<book wordnetid="106410904" confidence="0.8">
<publication wordnetid="106589574" confidence="0.8">
<link xlink:type="simple" xlink:href="../358/31358.xml">
The Art of Computer Programming</link></publication>
</book>
</artifact>
</creation>
</product>
</work>
, Volume 3: Sorting and Searching</it>.</entry>
</list>
</p>

</sec>
<sec>
<st>
 External links</st>



<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.iti.fh-flensburg.de/lang/algorithmen/sortieren/algoen.htm">
Sequential and parallel sorting algorithms</weblink> - has explanations and analyses of many of these algorithms.</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.dcc.uchile.cl/~rbaeza/handbook/sort_a.html">
Ricardo Baeza-Yates' sorting algorithms on the Web</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.nist.gov/dads/">
'Dictionary of Algorithms, Data Structures, and Problems'</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.softpanorama.org/Algorithms/sorting.shtml">
Slightly Skeptical View on Sorting Algorithms</weblink> Softpanorama page that discusses several classic algorithms and promotes alternatives to quicksort.</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.azillionmonkeys.com/qed/sort.html">
Sorting Revisited</weblink></entry>
<entry level="1" type="bullet">

 For a repository of algorithms with source code and lectures, see <weblink xlink:type="simple" xlink:href="http://www.cs.sunysb.edu/~algorith/">
The Stony Brook Algorithm Repository</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.cs.oswego.edu/~mohammad/classes/csc241/samples/sort/Sort2-E.html">
Graphical Java illustrations of the Bubble sort, Insertion sort, Quicksort, and Selection sort</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://math.hws.edu/TMCM/java/xSortLab/">
xSortLab</weblink> - An interactive Java demonstration of Bubble, Insertion, Quick, Select and Merge sorts, which displays the data as a bar graph with commentary on the workings of the algorithm printed below the graph.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.iti.fh-flensburg.de/lang/algorithmen/sortieren/sortcontest/sortcontest.htm">
Sorting contest</weblink> - An applet visually demonstrating a contest between a number of different sorting algorithms</entry>
<entry level="1" type="bullet">

 (Italian) <weblink xlink:type="simple" xlink:href="http://www.massimop.eu/?page_id=103">
Java Applet that show some sorting algorithms</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.TropicalCoder.com/3dBubbleSort.htm">
The Three Dimensional Bubble Sort</weblink>- A method of sorting in three or more dimensions (of questionable merit)</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.mycplus.com/utilitiesdetail.asp?iPro=9">
Sort huge amounts of data by doing a multi-phase sorting on temporary file</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://siebn.de/index.php?page=anisort/english">
AniSort</weblink> - Java applet visualizing 6 different sorting algorithms</entry>
<entry level="1" type="bullet">

 Pointers to <weblink xlink:type="simple" xlink:href="http://web-cat.cs.vt.edu/AlgovizWiki/SortAlgorithms">
sorting visualizations</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.cs.loyola.edu/~kbg/MonkeySort.pdf">
Monkey Sort discussion (another name for Bozo-sort)</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://home.westman.wave.ca/~rhenry/sort/">
Extensive collection of animated sorting algorithms with source code.</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.cs.rit.edu/~atk/Java/Sorting/sorting.html">
Several sorting algorithms demonstrated in Java</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://linux.wku.edu/~lamonml/algor/sort/">
OPL booklet of the main sorting algorithms by Michael Lamont</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://matthewcopeland.com/QiSort.html">
QiSort - A new O(n log n) algorithm for 2007</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.bluffton.edu/~nesterd/java/SortingDemo.html">
Sorting algorithm demonstrations with source code "tracing"</weblink></entry>
</list>
</p>

<p>

<table style=";" class="navbox" cellspacing="0">
<row>
<col style="padding:2px;">
<table style="width:100%;background:transparent;color:inherit;;" class="nowraplinks collapsible autocollapse " cellspacing="0">
<row>
<header colspan="3" style=";" class="navbox-title">
<link xlink:type="simple" xlink:href="../442/28442.xml">
Sorting algorithm</link>s</header>
</row>
<row style="height:2px;">

</row>
<row>
<col style=";;" class="navbox-group">
Theory</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<link xlink:type="simple" xlink:href="../543/7543.xml">
Computational complexity theory</link> | <link xlink:type="simple" xlink:href="../578/44578.xml">
Big O notation</link> | <link xlink:type="simple" xlink:href="../330/30330.xml">
Total order</link> | <link xlink:type="simple" xlink:href="../382/208382.xml">
Lists</link> | <link xlink:type="simple" xlink:href="../442/28442.xml#xpointer(//*[./st=%22Stability%22])">
Stability</link> | <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../304/3189304.xml">
Comparison sort</link></database>
</wordnet>
</lexical_database>
</electronic_database>
</information>
</message>
</col>
<col style="width:0%;padding:0px 0px 0px 2px;" rowspan="15">
<image width="200px" src="SimpleSortingNetwork.svg">
</image>
</col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
Exchange sorts</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-even">
<algorithm wordnetid="105847438" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../255/4255.xml">
Bubble sort</link></algorithm>
 | <algorithm wordnetid="105847438" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../482/159482.xml">
Cocktail sort</link></algorithm>
 | <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<idea wordnetid="105833840" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<category wordnetid="105838765" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<kind wordnetid="105839024" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../945/10807945.xml">
Odd-even sort</link></database>
</kind>
</wordnet>
</lexical_database>
</category>
</concept>
</electronic_database>
</idea>
</information>
</message>
 | <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<idea wordnetid="105833840" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<category wordnetid="105838765" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<kind wordnetid="105839024" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../439/159439.xml">
Comb sort</link></database>
</kind>
</wordnet>
</lexical_database>
</category>
</concept>
</electronic_database>
</idea>
</information>
</message>
 | <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<idea wordnetid="105833840" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<category wordnetid="105838765" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<kind wordnetid="105839024" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../127/522127.xml">
Gnome sort</link></database>
</kind>
</wordnet>
</lexical_database>
</category>
</concept>
</electronic_database>
</idea>
</information>
</message>
 | <algorithm wordnetid="105847438" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../249/3268249.xml">
Quicksort</link></algorithm>
</col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
Selection sorts</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<algorithm wordnetid="105847438" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../352/29352.xml">
Selection sort</link></algorithm>
 | <algorithm wordnetid="105847438" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../995/13995.xml">
Heapsort</link></algorithm>
 | <link xlink:type="simple" xlink:href="../450/100450.xml">
Smoothsort</link></col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
Insertion sorts</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-even">
<algorithm wordnetid="105847438" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../205/15205.xml">
Insertion sort</link></algorithm>
 | <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<idea wordnetid="105833840" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<category wordnetid="105838765" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<kind wordnetid="105839024" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../355/77355.xml">
Shell sort</link></database>
</kind>
</wordnet>
</lexical_database>
</category>
</concept>
</electronic_database>
</idea>
</information>
</message>
 | <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../027/6508027.xml">
Tree sort</link></database>
</wordnet>
</lexical_database>
</electronic_database>
</information>
</message>
 | <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<idea wordnetid="105833840" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<category wordnetid="105838765" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<kind wordnetid="105839024" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../633/2448633.xml">
Library sort</link></database>
</kind>
</wordnet>
</lexical_database>
</category>
</concept>
</electronic_database>
</idea>
</information>
</message>
 | <idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<category wordnetid="105838765" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<social_event wordnetid="107288639" confidence="0.8">
<contest wordnetid="107456188" confidence="0.8">
<game wordnetid="100456199" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<kind wordnetid="105839024" confidence="0.8">
<link xlink:type="simple" xlink:href="../256/1184256.xml">
Patience sorting</link></kind>
</psychological_feature>
</game>
</contest>
</social_event>
</event>
</category>
</concept>
</idea>
</col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
Merge sorts</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<algorithm wordnetid="105847438" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../039/20039.xml">
Merge sort</link></algorithm>
 | <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<idea wordnetid="105833840" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<category wordnetid="105838765" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<kind wordnetid="105839024" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../351/14083351.xml">
Strand sort</link></database>
</kind>
</wordnet>
</lexical_database>
</category>
</concept>
</electronic_database>
</idea>
</information>
</message>
</col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
Non-comparison sorts</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-even">
<message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<idea wordnetid="105833840" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<category wordnetid="105838765" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<kind wordnetid="105839024" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../980/25980.xml">
Radix sort</link></database>
</kind>
</wordnet>
</lexical_database>
</category>
</concept>
</electronic_database>
</idea>
</information>
</message>
 | <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<idea wordnetid="105833840" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<category wordnetid="105838765" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<kind wordnetid="105839024" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../592/97592.xml">
Bucket sort</link></database>
</kind>
</wordnet>
</lexical_database>
</category>
</concept>
</electronic_database>
</idea>
</information>
</message>
 | <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<idea wordnetid="105833840" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<category wordnetid="105838765" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<kind wordnetid="105839024" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../864/99864.xml">
Counting sort</link></database>
</kind>
</wordnet>
</lexical_database>
</category>
</concept>
</electronic_database>
</idea>
</information>
</message>
 | <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<idea wordnetid="105833840" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<category wordnetid="105838765" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<kind wordnetid="105839024" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../681/24681.xml">
Pigeonhole sort</link></database>
</kind>
</wordnet>
</lexical_database>
</category>
</concept>
</electronic_database>
</idea>
</information>
</message>
 | <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../302/11517302.xml">
Burstsort</link></database>
</wordnet>
</lexical_database>
</electronic_database>
</information>
</message>
</col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
Others</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<information wordnetid="106634376" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<message wordnetid="106598915" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<link xlink:type="simple" xlink:href="../064/897064.xml">
Topological sorting</link></procedure>
</activity>
</psychological_feature>
</wordnet>
</act>
</rule>
</event>
</message>
</algorithm>
</database>
</lexical_database>
</electronic_database>
</information>
 | <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../061/562061.xml">
Sorting network</link></database>
</wordnet>
</lexical_database>
</electronic_database>
</information>
</message>
 | <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../090/2713090.xml">
Bitonic sorter</link></database>
</wordnet>
</lexical_database>
</electronic_database>
</information>
</message>
</col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
Ineffective/jokeful sorts</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-even">
<algorithm wordnetid="105847438" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../870/99870.xml">
Bogosort</link></algorithm>
 | <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<idea wordnetid="105833840" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<category wordnetid="105838765" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<kind wordnetid="105839024" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../662/563662.xml">
Stooge sort</link></database>
</kind>
</wordnet>
</lexical_database>
</category>
</concept>
</electronic_database>
</idea>
</information>
</message>
</col>
</row>
</table>
</col>
</row>
</table>
</p>



</sec>
</bdy>
</article>
