<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 19:55:38[mciao0825] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>Application Domain</title>
<id>2850879</id>
<revision>
<id>239419667</id>
<timestamp>2008-09-19T00:51:20Z</timestamp>
<contributor>
<username>Everyking</username>
<id>44020</id>
</contributor>
</revision>
<categories>
<category>.NET framework</category>
<category>Software architecture</category>
</categories>
</header>
<bdy>

A <b>Common Language Runtime application domain</b> is a mechanism (similar to an <link xlink:type="simple" xlink:href="../194/22194.xml">
operating system</link> <link xlink:type="simple" xlink:href="../178/45178.xml">
process</link>), used to isolate executed <link xlink:type="simple" xlink:href="../746/454746.xml">
software application</link>s from one another so that they do not affect each other.  This is achieved by making any unique <link xlink:type="simple" xlink:href="../423/934423.xml">
virtual address space</link> run exactly one application and scopes the resources for the process or application domain using that address space.<p>

A <link xlink:type="simple" xlink:href="../003/46003.xml">
Common Language Runtime</link> (CLR) application domain is contained within an operating system process.  A process may contain many application domains.  This carries major advantages:</p>
<p>

<list>
<entry level="1" type="bullet">

 There is lower system cost.</entry>
<entry level="1" type="bullet">

 Multiple threads can exist within a single AppDomain.</entry>
<entry level="1" type="bullet">

 The application in a domain can be stopped without affecting the state of another domain in the same process.</entry>
<entry level="1" type="bullet">

 A fault or <link xlink:type="simple" xlink:href="../231/59231.xml">
exception</link> in one domain does not affect an application in another domain or crash the entire process that hosts the domains. </entry>
<entry level="1" type="bullet">

 Configuration information is part of a domain's scope, not the scope of the process.</entry>
<entry level="1" type="bullet">

 Each domain can be assigned different security access levels, all within a single process.</entry>
<entry level="1" type="bullet">

 Code in one domain cannot directly access code in another (see below).</entry>
</list>
</p>
<p>

In this sense, the CLR is like a mini-operating system.  It runs a single process that contains a number of sub-processes, or application domains.</p>
<p>

Direct communication cannot be achieved across application domains.  However, application domains can still talk to each other by passing <link xlink:type="simple" xlink:href="../665/169665.xml">
objects</link> via marshaling by value (unbound objects), marshaling by reference through a proxy (AppDomain-bound objects).  There is a third type of object called a context-bound object which can be marshalled by reference across domains and also within the context of its own application domain. Because of the verifiable <link xlink:type="simple" xlink:href="../650/602650.xml">
type-safety</link> of managed code, the CLR can provide fault isolation between domains at a much lower cost than an operating system process can. The static type verification used for isolation does not require the same process switches or hardware ring transitions that an operating system process requires.</p>

<sec>
<st>
References</st>
<p>

http://codebetter.com/blogs/raymond.lewallen/archive/2005/04/03/61190.aspx</p>

<p>


domain is a logicalpart</p>
</sec>
</bdy>
</article>
