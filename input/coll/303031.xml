<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 16:44:40[mciao0825] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>Information Processing Language</title>
<id>303031</id>
<revision>
<id>236644605</id>
<timestamp>2008-09-06T12:35:12Z</timestamp>
<contributor>
<username>Bkil</username>
<id>329938</id>
</contributor>
</revision>
<categories>
<category>Procedural programming languages</category>
<category>History of artificial intelligence</category>
</categories>
</header>
<bdy>

<b>Information Processing Language</b> (IPL) is a <link xlink:type="simple" xlink:href="../015/23015.xml">
programming language</link> developed by <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../300/287300.xml">
Allen Newell</link></scientist>
</person>
, <link xlink:type="simple" xlink:href="../092/317092.xml">
Cliff Shaw</link>, and <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../205/14205.xml">
Herbert Simon</link></scientist>
</person>
 at <link xlink:type="simple" xlink:href="../944/214944.xml">
RAND Corporation</link> and the <university wordnetid="108286163" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../573/286573.xml">
Carnegie Institute of Technology</link></university>
 from about 1956.  Newell had the role of language specifier-application programmer, Shaw was the system programmer and Simon took the role of application programmer-user.<p>

The language includes features intended to support programs that could perform general problem solving, including lists, associations, schemas (frames), dynamic memory allocation, data types, recursion, associative retrieval, functions as arguments, generators (streams), and <link xlink:type="simple" xlink:href="../857/6857.xml">
cooperative multitasking</link>.  IPL pioneered the concept of list processing, albeit in an assembly-language style.</p>

<sec>
<st>
A Taste of IPL</st>

<p>

An IPL computer has: </p>
<p>

<list>
<entry level="1" type="number">

 a set of <it>symbols</it>. All symbols are addresses, and name cells.  Unlike symbols in later languages, symbols consist of a character followed by a number, and are written H1, A29, 9-7, 9-100.</entry>
<entry level="2" type="number">

 Cell names beginning with a letter are <it>regional</it>, and are absolute addresses.</entry>
<entry level="2" type="number">

 Cell names beginning with "9-" are <it>local</it>, and are meaningful within the context of a single list.  One list's 9-1 is independent of another list's 9-1.</entry>
<entry level="2" type="number">

 Other symbols (e.g., pure numbers) are <it>internal</it>.</entry>
<entry level="1" type="number">

 a set of <it>cells</it>.   Lists are built from several cells holding mutual references. Cells have several fields: </entry>
<entry level="2" type="number">

 P, a 3-bit field used for an operation code when the cell is used as an instruction, and unused when the cell is data.</entry>
<entry level="2" type="number">

 Q, a 3-valued field used for indirect reference when the cell is used as an instruction, and unused when the cell is data.</entry>
<entry level="2" type="number">

 SYMB, a symbol used as the value in the cell.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="number">

 a set of <it>primitive processes</it>, which would be termed <it>primitive functions</it> in modern languages.</entry>
</list>
</p>
<p>

The main data structure of IPL is the list, but lists are more intricate structures than in many languages.  A list consists of a singly-linked sequence of symbols, as might be expected -- plus some <it>description lists</it>, which are subsidiary singly-linked lists interpreted as alternating attribute names and values.  IPL provides primitives to access and mutate attribute value by name.  The description lists are given local names (of the form 9-1). So, a list called L1 holding the symbols S4 and S5, and described by associating value V1 to attribute A1 and V2 to A2, would be stored as follows.  0 indicates the end of a list; the cell names 100, 101, etc. are automatically generated internal symbols whose values are irrelevant.  These cells can be scattered throughout memory; only L1, which uses a regional name that must be globally known, needs to reside in a specific place.</p>

<p>

<table>
<caption>
<b>IPL-V List Structure Example</b></caption>
<row>
<header>
Name</header>
<header>
SYMB</header>
<header>
LINK</header>
</row>
<row>
<col>
L1</col>
<col>
9-1</col>
<col>
100</col>
</row>
<row>
<col>
100</col>
<col>
S4</col>
<col>
101</col>
</row>
<row>
<col>
101</col>
<col>
S5</col>
<col>
0</col>
</row>
<row>
<col>
9-1</col>
<col>
0</col>
<col>
200</col>
</row>
<row>
<col>
200</col>
<col>
A1</col>
<col>
201</col>
</row>
<row>
<col>
201</col>
<col>
V1</col>
<col>
202</col>
</row>
<row>
<col>
202</col>
<col>
A2</col>
<col>
203</col>
</row>
<row>
<col>
203</col>
<col>
V2</col>
<col>
0</col>
</row>
</table>
</p>

<p>

IPL is an <link xlink:type="simple" xlink:href="../368/1368.xml">
assembly language</link> for manipulating lists.  It has a few cells which are used as special-purpose registers.  H1, for example, is the program counter.  The SYMB field of H1 is the name of the current instruction. However, H1 is interpreted as a list; the LINK of H1 is, in modern terms, a pointer to the head of the call stack.  For example, subroutine calls push the SYMB of H1 onto this stack.</p>
<p>

H2 is the free-list.  Procedures which need to allocate memory grab cells off of H2; procedures which are finished with memory put it on H2.  On entry to a function, the list of parameters is given in H0; on exit, the results should be returned in H0.  Many procedures return a boolean result indicating success or failure, which is put in H5. Ten cells, W0-W9, are reserved for public working storage.  Procedures are "morally bound" (to quote the CACM article) to save and restore the values of these cells.</p>
<p>

There are eight instructions, based on the values of P: subroutine call, push/pop S to H0; push/pop the symbol in S to the list attached to S; copy value to S; conditional branch.  In these instructions, S is the target.  S is either the value of the SYMB field if Q=0, the symbol in the cell named by SYMB if Q=1, or the symbol in the cell named by the symbol in the cell named by SYMB if Q=2.  In all cases but conditional branch, the LINK field of the cell tells which instruction to execute next.</p>
<p>

IPL has a library of some 150 basic operations.  These include such operations as: </p>
<p>

<list>
<entry level="1" type="bullet">

 Test symbols for equality</entry>
<entry level="1" type="bullet">

 Find, set, or erase an attribute of a list</entry>
<entry level="1" type="bullet">

 locate the next symbol in a list; insert a symbol in a list; erase or copy an entire list.</entry>
<entry level="1" type="bullet">

 Arithmetic operations (on symbol names).</entry>
<entry level="1" type="bullet">

 Manipulation of symbols; e.g., test if a symbol denotes an integer, or make a symbol local.</entry>
<entry level="1" type="bullet">

 I/O operations </entry>
<entry level="1" type="bullet">

 "generators", which correspond to iterators and filters in functional programming.  For example, a generator may accept a list of numbers and produce the list of their squares.    Generators could accept suitably-designed functions -- strictly, the addresses of code of suitably-designed functions -- as arguments.  </entry>
</list>
</p>

</sec>
<sec>
<st>
 History </st>

<p>

The first application of IPL was to demonstrate that the theorems in <it><work wordnetid="104599396" confidence="0.8">
<product wordnetid="104007894" confidence="0.8">
<creation wordnetid="103129123" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<book wordnetid="106410904" confidence="0.8">
<publication wordnetid="106589574" confidence="0.8">
<link xlink:type="simple" xlink:href="../133/24133.xml">
Principia Mathematica</link></publication>
</book>
</artifact>
</creation>
</product>
</work>
</it> which were laboriously proven by hand, by <person wordnetid="100007846" confidence="0.9508927676800064">
<philosopher wordnetid="110423589" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../163/4163.xml">
Bertrand Russell</link></philosopher>
</person>
 and <person wordnetid="100007846" confidence="0.9508927676800064">
<philosopher wordnetid="110423589" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../395/43395.xml">
Alfred North Whitehead</link></philosopher>
</person>
, could in fact be proven by computation.  According to Simon's autobiography <it>Models of My Life</it>, this first application was developed first by hand simulation, using his children as the computing elements, while writing on and holding up note cards as the registers which contained the state variables of the program.</p>
<p>

IPL was used to implement several early <link xlink:type="simple" xlink:href="../164/1164.xml">
artificial intelligence</link> programs, also by the same authors: the <link xlink:type="simple" xlink:href="../265/13685265.xml">
Logic Theory Machine</link> (1956), the <link xlink:type="simple" xlink:href="../658/1234658.xml">
General Problem Solver</link> (1957), and their <link xlink:type="simple" xlink:href="../367/68367.xml">
computer chess</link> program <link>
NSS</link> (1958).</p>
<p>

Several versions of IPL were created: IPL-I (never implemented), IPL-II (1957 for <computer wordnetid="103082979" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<machine wordnetid="103699975" confidence="0.8">
<link xlink:type="simple" xlink:href="../631/146631.xml">
JOHNNIAC</link></machine>
</device>
</instrumentality>
</artifact>
</computer>
), IPL-III (existed briefly), IPL-IV, IPL-V (1958, for <computer wordnetid="103082979" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<machine wordnetid="103699975" confidence="0.8">
<link xlink:type="simple" xlink:href="../676/143676.xml">
IBM 650</link></machine>
</device>
</instrumentality>
</artifact>
</computer>
, <computer wordnetid="103082979" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<machine wordnetid="103699975" confidence="0.8">
<link xlink:type="simple" xlink:href="../492/76492.xml">
IBM 704</link></machine>
</device>
</instrumentality>
</artifact>
</computer>
, <computer wordnetid="103082979" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<machine wordnetid="103699975" confidence="0.8">
<link xlink:type="simple" xlink:href="../332/147332.xml">
IBM 7090</link></machine>
</device>
</instrumentality>
</artifact>
</computer>
, many others. Widely used), IPL-VI.</p>
<p>

However the language was soon displaced by <link xlink:type="simple" xlink:href="../016/18016.xml">
Lisp</link>, which had far more powerful features,  a simpler syntax, and the benefit of automatic <link xlink:type="simple" xlink:href="../734/6734.xml">
garbage collection</link>.</p>

</sec>
<sec>
<st>
 Legacy to computer programming </st>

<p>

IPL arguably introduced several programming language features: 
<list>
<entry level="1" type="bullet">

 <b>List manipulation</b> (but only lists of atoms, not general lists)</entry>
<entry level="1" type="bullet">

 <b>Property lists</b> (but only when attached to other lists)</entry>
<entry level="1" type="bullet">

 <b>Higher-order functions</b> (except that assembly programming has always been able to compute with addresses of functions to call; IPL was an early attempt to generalize this property of assembly language and do it in a principled way.)</entry>
<entry level="1" type="bullet">

 <b>Computation with symbols</b> (except that the symbols are letter+number, not full words)</entry>
<entry level="1" type="bullet">

 <b>Virtual Machine</b>  </entry>
</list>
</p>
<p>

Many of these features were generalized, cleaned up, and incorporated into Lisp <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref> and from there into a wide spectrum of programming languages over the next several decades.</p>

</sec>
<sec>
<st>
Publications</st>
<p>

<list>
<entry level="1" type="bullet">

Newell, A. and F.C. Shaw. "Programming the Logic Theory Machine." Feb. 1957.  Proceedings of the Western Joint Computer Conference, pp. 230-240.</entry>
<entry level="1" type="bullet">

Newell, Allen, and Fred M. Tonge. 1960. "An Introduction to Information Processing Language V." CACM 3(4): 205-211.</entry>
<entry level="1" type="bullet">

Newell, Allen. 1964. Information processing language-v manual; Second Edition. Rand Corporation [Allen Newell], Englewood Cliffs, NJ: Prentice-Hall.</entry>
</list>
</p>

</sec>
<sec>
<st>
References</st>
<p>

<it>This article was originally based on material from the <work wordnetid="104599396" confidence="0.8">
<product wordnetid="104007894" confidence="0.8">
<creation wordnetid="103129123" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<wordbook wordnetid="106418693" confidence="0.8">
<book wordnetid="106410904" confidence="0.8">
<dictionary wordnetid="106418901" confidence="0.8">
<reference_book wordnetid="106417598" confidence="0.8">
<publication wordnetid="106589574" confidence="0.8">
<link xlink:type="simple" xlink:href="../324/11324.xml">
Free On-line Dictionary of Computing</link></publication>
</reference_book>
</dictionary>
</book>
</wordbook>
</artifact>
</creation>
</product>
</work>
, which is  under the <link xlink:type="simple" xlink:href="../782/18938782.xml">
GFDL</link>.</it>
<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://stills.nap.edu/readingroom/books/biomems/anewell.html">
Allen Newell</weblink>, Herbert A. Simon, Biographical Memoirs, National Academy of Sciences - includes a short section on IPL.</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://hopl.murdoch.edu.au/showlanguage.prx?exp=13&amp;language=IPL">
History of Programming Languages: IPL</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://wombat.doc.ic.ac.uk/foldoc/foldoc.cgi?Information+Processing+Language">
Information Processing Language</weblink>, <work wordnetid="104599396" confidence="0.8">
<product wordnetid="104007894" confidence="0.8">
<creation wordnetid="103129123" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<wordbook wordnetid="106418693" confidence="0.8">
<book wordnetid="106410904" confidence="0.8">
<dictionary wordnetid="106418901" confidence="0.8">
<reference_book wordnetid="106417598" confidence="0.8">
<publication wordnetid="106589574" confidence="0.8">
<link xlink:type="simple" xlink:href="../324/11324.xml">
FOLDOC</link></publication>
</reference_book>
</dictionary>
</book>
</wordbook>
</artifact>
</creation>
</product>
</work>
</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://bitsavers.org/pdf/rand/ipl/">
http://bitsavers.org/pdf/rand/ipl/</weblink> IPL documents from BitSavers.</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www-formal.stanford.edu/jmc/history/lisp/node2.html">
http://www-formal.stanford.edu/jmc/history/lisp/node2.html</weblink> influence of IPL on LISP.</entry>
</list>
</p>

</sec>
<sec>
<st>
See also</st>
<p>

<list>
<entry level="1" type="bullet">

 <software wordnetid="106566077" confidence="0.9508927676800064">
<web_site wordnetid="106359193" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../946/6023946.xml">
Metamath</link></web_site>
</software>
, a project using computer-verified proofs.</entry>
</list>
</p>


</sec>
</bdy>
</article>
