<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 15:36:22[mciao0828] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>Theory of computation</title>
<id>30402</id>
<revision>
<id>242773107</id>
<timestamp>2008-10-03T16:14:43Z</timestamp>
<contributor>
<username>HRV</username>
<id>7829869</id>
</contributor>
</revision>
<categories>
<category>All articles with unsourced statements</category>
<category>Theory of computation</category>
<category>Articles with unsourced statements since September 2007</category>
</categories>
</header>
<bdy>

<table class="metadata plainlinks ambox ">
<row>
<col>

ambox-content" style=""</col>
</row>
<row>
<col class="mbox-image"><p>

<image width="40x40px" src="Ambox_content.png">
</image>
</p>
</col>
<col style="" class="mbox-text">
 <b>This article or section is missing  or needs .</b>
Using helps guard against copyright violations and factual inaccuracies. <it>(September 2007)''</it></col>
</row>
</table>


The <b>theory of computation</b> is the branch of <link xlink:type="simple" xlink:href="../323/5323.xml">
computer science</link> that deals with whether and how efficiently problems can be solved on a <link xlink:type="simple" xlink:href="../278/1773278.xml">
model of computation</link>, using an <link xlink:type="simple" xlink:href="../775/775.xml">
algorithm</link>.  The field is divided into two major branches: <link xlink:type="simple" xlink:href="../136/442136.xml">
computability theory</link> and <link xlink:type="simple" xlink:href="../543/7543.xml">
complexity theory</link>, but both branches deal with <link xlink:type="simple" xlink:href="../278/1773278.xml">
formal models of computation</link>.<p>

In order to perform a rigorous study of computation, computer scientists work with a mathematical abstraction of computers called a model of computation.  There are several models in use, but the most commonly examined is the <invention wordnetid="105633385" confidence="0.8">
<know-how wordnetid="105616786" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<link xlink:type="simple" xlink:href="../403/30403.xml">
Turing machine</link></method>
</know-how>
</invention>
.  A Turing machine can be thought of as a desktop PC with a potentially infinite memory capacity, though it can only access this memory in small discrete chunks.  Computer scientists study the Turing machine because it is simple to formulate, can be analyzed and used to prove results, and because it represents what many consider the most powerful possible "reasonable" model of computation. It might seem that the potentially infinite memory capacity is an unrealizable attribute, but any <link xlink:type="simple" xlink:href="../118/913118.xml">
decidable</link> problem solved by a Turing machine will always require only a finite amount of memory. So in principle, any problem that can be solved (decided) by a Turing machine can be solved by a computer that has a bounded amount of memory.</p>

<sec>
<st>
 Computability theory </st>

<p>

<indent level="1">

<it>Main article: <link xlink:type="simple" xlink:href="../136/442136.xml">
Computability theory (computer science)</link></it>
</indent>

Computability theory deals primarily with the question of whether a problem is solvable at all on a computer.  The statement that the <link xlink:type="simple" xlink:href="../668/13668.xml">
halting problem</link> cannot be solved by a Turing machine is one of the most important results in computability theory, as it is an example of a concrete problem that is both easy to formulate and impossible to solve using a Turing machine.  Much of computability theory builds on the halting problem result.</p>
<p>

The next important step in computability theory was the <statement wordnetid="106722453" confidence="0.8">
<message wordnetid="106598915" confidence="0.8">
<theorem wordnetid="106752293" confidence="0.8">
<proposition wordnetid="106750804" confidence="0.8">
<link xlink:type="simple" xlink:href="../852/25852.xml">
Rice's theorem</link></proposition>
</theorem>
</message>
</statement>
, which states that for all non-trivial properties of partial functions, it is undecidable whether a Turing machine computes a partial function with that property.</p>
<p>

Computability theory is closely related to the branch of <link xlink:type="simple" xlink:href="../636/19636.xml">
mathematical logic</link> called <link xlink:type="simple" xlink:href="../414/155414.xml">
recursion theory</link>, which removes the restriction of studying only models of computation which are close to physically realizable.  Many mathematicians and <link xlink:type="simple" xlink:href="../940/6839940.xml">
Computational theorist</link>s who study recursion theory will refer to it as computability theory.  There is no real difference between the fields other than whether a researcher working in this area has his or her office in the <link xlink:type="simple" xlink:href="../323/5323.xml">
computer science</link> or <link xlink:type="simple" xlink:href="../831/18831.xml">
mathematics</link> field.</p>

</sec>
<sec>
<st>
 Complexity theory </st>

<p>

<indent level="1">

<it>Main article: <link xlink:type="simple" xlink:href="../543/7543.xml">
Computational complexity theory</link></it>
</indent>

<link xlink:type="simple" xlink:href="../543/7543.xml">
Complexity theory</link> considers not only whether a problem can be solved at all on a computer, but also how efficiently the problem can be solved.  Two major aspects are considered: time complexity and space complexity, which are respectively how many steps does it take to perform a computation, and how much memory is required to perform that computation.</p>
<p>

In order to analyze how much time and space a given <link xlink:type="simple" xlink:href="../775/775.xml">
algorithm</link> requires, computer scientists express the time or space required to solve the problem as a function of the size of the input problem.  For example, finding a particular number in a long list of numbers becomes harder as the list of numbers grows larger.  If we say there are <math>n</math> numbers in the list, then if the list is not sorted or indexed in any way we may have to look at every number in order to find the number we're seeking.  We thus say that  in order to solve this problem, the computer needs to perform a number of steps that grows linearly in the size of the problem.</p>
<p>

To simplify this problem, computer scientists have adopted <link xlink:type="simple" xlink:href="../578/44578.xml">
Big O notation</link>, which allows functions to be compared in a way that ensures that particular aspects of a machine's construction do not need to be considered, but rather only the asymptotic behavior as problems become large.  So in our previous example we might say that the problem requires <math>O(n)</math> steps to solve.</p>
<p>

Perhaps the most important open problem in all of computer science is the question of whether a certain broad class of problems denoted <class wordnetid="107997703" confidence="0.8">
<collection wordnetid="107951464" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<link xlink:type="simple" xlink:href="../562/21562.xml">
NP</link></group>
</collection>
</class>
 can be solved efficiently.  This is discussed further at <condition wordnetid="113920835" confidence="0.8">
<state wordnetid="100024720" confidence="0.8">
<class wordnetid="107997703" confidence="0.8">
<problem wordnetid="114410605" confidence="0.8">
<difficulty wordnetid="114408086" confidence="0.8">
<collection wordnetid="107951464" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<link xlink:type="simple" xlink:href="../115/6115.xml">
Complexity classes P and NP</link></group>
</collection>
</difficulty>
</problem>
</class>
</state>
</condition>
.</p>

</sec>
<sec>
<st>
 Other formal definitions of computation </st>

<p>

Aside from a <invention wordnetid="105633385" confidence="0.8">
<know-how wordnetid="105616786" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<link xlink:type="simple" xlink:href="../403/30403.xml">
Turing machine</link></method>
</know-how>
</invention>
, other equivalent (See: <link xlink:type="simple" xlink:href="../854/6854.xml">
Church-Turing thesis</link>) models of computation are in use.</p>
<p>

<list>
<entry level="1" type="definition">

<link xlink:type="simple" xlink:href="../203/18203.xml">
lambda calculus</link>: A computation consists of an initial lambda expression (or two if you want to separate the function and its input) plus a finite sequence of lambda terms, each deduced from the preceding term by one application of <link xlink:type="simple" xlink:href="../203/18203.xml">
Beta reduction</link>.</entry>
<entry level="1" type="definition">

<link xlink:type="simple" xlink:href="../848/149848.xml">
Combinatory logic</link></entry>
<entry level="1" type="indent">

is a concept which has many similarities to <math>\lambda</math>-calculus, but also important differences exist (e.g. fixed point combinator <b>Y</b> has normal form in combinatory logic but not in <math>\lambda</math>-calculus). Combinatory logic was developed with great ambitions: understanding the nature of paradoxes, making foundations of mathematics more economic (conceptually), eliminating the notion of variables (thus clarifying their role in mathematics).</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="definition">

<link xlink:type="simple" xlink:href="../469/26469.xml">
mu-recursive function</link>s: a computation consists of a mu-recursive function, <it>i.e.</it> its defining sequence, any input value(s) and a sequence of recursive functions appearing in the defining sequence with inputs and outputs.  Thus, if in the defining sequence of a recursive function <math>f(x)</math> the functions <math>g(x)</math> and <math>h(x,y)</math> appear, then terms of the form 'g(5)=7' or 'h(3,2)=10' might appear.  Each entry in this sequence needs to be an application of a basic function or follow from the entries above by using <message wordnetid="106598915" confidence="0.8">
<mathematical_relation wordnetid="113783581" confidence="0.8">
<subject wordnetid="106599788" confidence="0.8">
<function wordnetid="113783816" confidence="0.8">
<link xlink:type="simple" xlink:href="../084/1911084.xml">
composition</link></function>
</subject>
</mathematical_relation>
</message>
, <link xlink:type="simple" xlink:href="../829/24829.xml">
primitive recursion</link> or <link xlink:type="simple" xlink:href="../469/26469.xml">
 mu recursion</link>.  For instance if <math>f(x)=h(x,g(x))</math>, then for 'f(5)=3' to appear, terms like 'g(5)=6' and 'h(3,6)=3' must occur above.  The computation terminates only if the final term gives the value of the recursive function applied to the inputs.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="definition">

<link xlink:type="simple" xlink:href="../156/198156.xml">
Markov algorithm</link>: a <link xlink:type="simple" xlink:href="../154/2452154.xml">
string rewriting system</link> that uses <link xlink:type="simple" xlink:href="../569/12569.xml">
grammar</link>-like rules to operate on <link xlink:type="simple" xlink:href="../701/27701.xml">
strings</link> of symbols.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="definition">

<physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<model wordnetid="110324560" confidence="0.8">
<assistant wordnetid="109815790" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../218/505218.xml">
Register machine</link></causal_agent>
</worker>
</assistant>
</model>
</person>
</physical_entity>
</entry>
<entry level="1" type="indent">

is a theoretically interesting idealization of a computer. There are several variants. In most of them, each register can hold a natural number (of unlimited size), and the instructions are simple (and few in number), e.g. only decrementation (combined with conditional jump) and incrementation exist (and halting). The lack of the infinite (or dynamically growing) external store (seen at Turing machines) can be understood by replacing its role with <link>
Gödel number</link>ing techniques: the fact that each register holds a natural number allows the possibility of representing a complicated thing (e.g. a sequence, or a matrix etc.) by an appropriate huge natural number — unambiguity of both representation and interpretation can be established by <link xlink:type="simple" xlink:href="../527/21527.xml">
number theoretical</link>  foundations of these techniques.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="definition">

<link>
P′′</link></entry>
<entry level="1" type="indent">

Like Turing machines, <link>
P′′</link> uses an infinite tape of symbols (without random access), and a rather minimalistic set of instructions. But these instructions are very different, thus, unlike Turing machines, P′′ does not need to maintain a distinct state, because all “memory-like” functionality can be provided only by the tape. Instead of rewriting the current symbol, it can perform a <link xlink:type="simple" xlink:href="../087/20087.xml">
modular arithmetic</link> incrementation on it. P′′ has also a pair of instructions for a cycle, inspecting the blank symbol. Despite its minimalistic nature, it has become the parental formal language of an implemented and (for entertainment) used programming language called <link xlink:type="simple" xlink:href="../086/4086.xml">
Brainfuck</link>.</entry>
</list>
</p>
<p>

In addition to the general computational models, some simpler computational models are useful for special, restricted applications.  <link xlink:type="simple" xlink:href="../717/25717.xml">
Regular expressions</link>, for example,  specify string patterns in many contexts, from office productivity software to <link xlink:type="simple" xlink:href="../015/23015.xml">
programming language</link>s. Another formalism mathematically equivalent to regular expressions, <link xlink:type="simple" xlink:href="../931/10931.xml">
Finite automata</link> are used in circuit design and in some kinds of problem-solving. <message wordnetid="106598915" confidence="0.8">
<subject wordnetid="106599788" confidence="0.8">
<language wordnetid="106282651" confidence="0.8">
<link xlink:type="simple" xlink:href="../759/6759.xml">
Context-free grammar</link></language>
</subject>
</message>
s  specify programming language syntax.  Non-deterministic <link xlink:type="simple" xlink:href="../510/24510.xml">
pushdown automata</link> are another formalism equivalent to context-free grammars. <mathematical_relation wordnetid="113783581" confidence="0.8">
<function wordnetid="113783816" confidence="0.8">
<link xlink:type="simple" xlink:href="../829/24829.xml">
Primitive recursive function</link></function>
</mathematical_relation>
s are a defined subclass of the recursive functions.</p>
<p>

Different models of computation have the ability to do different tasks. One way to measure the power of a computational model is to study the class of <link xlink:type="simple" xlink:href="../939/10939.xml">
formal language</link>s that the model can generate; in such a way to the <language wordnetid="106282651" confidence="0.8">
<link xlink:type="simple" xlink:href="../011/6011.xml">
Chomsky hierarchy</link></language>
 of languages is obtained.</p>

</sec>
<sec>
<st>
See also</st>
<p>

<list>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../250/3813250.xml">
Introduction to Automata Theory, Languages, and Computation</link></entry>
</list>
</p>

</sec>
<sec>
<st>
Further reading</st>
<p>

<list>
<entry level="1" type="bullet">

  <cite style="font-style:normal" class="book"><physical_entity wordnetid="100001930" confidence="0.8">
<expert wordnetid="109617867" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<mathematician wordnetid="110301261" confidence="0.8">
<logician wordnetid="110269785" confidence="0.8">
<link xlink:type="simple" xlink:href="../572/5573572.xml">
S. Barry Cooper</link></logician>
</mathematician>
</scientist>
</causal_agent>
</person>
</expert>
</physical_entity>
&#32;(2004). Computability Theory.&#32;Chapman and Hall/CRC. ISBN 1-58488-237-9.</cite>&nbsp;</entry>
<entry level="1" type="bullet">

  <cite style="font-style:normal" class="book"><link>
Richard L. Epstein</link> and <link>
Walter A. Carnielli</link>&#32;(2000). Computability: Computable Functions, Logic, and the Foundations of Mathematics, with Computability: A Timeline (2nd ed.).&#32;Wadsworth/Thomson Learning. ISBN 0-534-54644-7.</cite>&nbsp;</entry>
<entry level="1" type="bullet">

  <cite style="font-style:normal" class="book"><physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<mathematician wordnetid="110301261" confidence="0.8">
<link xlink:type="simple" xlink:href="../015/3644015.xml">
Michael Sipser</link></mathematician>
</scientist>
</causal_agent>
</person>
</physical_entity>
&#32;(2006). Introduction to the Theory of Computation 2ed.&#32;PWS Publishing. ISBN 0-534-94728-X.</cite>&nbsp; Part Two: Computability Theory, chapters 3–6, pp.123–222.</entry>
<entry level="1" type="bullet">

  <cite style="font-style:normal" class="book"><link>
Eitan Gurari</link>&#32;(1989). <weblink xlink:type="simple" xlink:href="http://www.cse.ohio-state.edu/~gurari/theory-bk/theory-bk.html">
An Introduction to the Theory of Computation</weblink>.&#32;Computer Science Press. ISBN 0-7167-8182-4.</cite>&nbsp;</entry>
<entry level="1" type="bullet">

Hein, James L. (1996) <it>Theory of Computation.</it>  Sudbury, MA: Jones &amp; Bartlett.  ISBN 978-0867204971 A gentle introduction to the field, appropriate for second-year undergraduate computer science students.</entry>
<entry level="1" type="bullet">

<person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../443/299443.xml">
Hopcroft, John E.</link></scientist>
</person>
, and <link xlink:type="simple" xlink:href="../318/1702318.xml">
Jeffrey D. Ullman</link> (2006). <it><link xlink:type="simple" xlink:href="../250/3813250.xml">
Introduction to Automata Theory, Languages, and Computation</link>. 3rd ed</it>  Reading, MA: Addison-Wesley. ISBN 978-0321455369 One of the standard references in the field.</entry>
<entry level="1" type="bullet">

Taylor, R. Gregory (1998). <it>Models of Computation and Formal Languages.</it>  New York: Oxford University Press.  ISBN 978-0195109832  An unusually readable textbook, appropriate for upper-level undergraduates or beginning graduate students.</entry>
<entry level="1" type="bullet">

<physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<intellectual wordnetid="109621545" confidence="0.8">
<alumnus wordnetid="109786338" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<mathematician wordnetid="110301261" confidence="0.8">
<scholar wordnetid="110557854" confidence="0.8">
<link xlink:type="simple" xlink:href="../272/1014272.xml">
Hartley Rogers, Jr</link></scholar>
</mathematician>
</scientist>
</causal_agent>
</alumnus>
</intellectual>
</person>
</physical_entity>
 (1987). <it>Theory of Recursive Functions and Effective Computability</it>, MIT Press. ISBN 0-262-68052-1</entry>
<entry level="1" type="bullet">

Lewis, F. D. (2007). <it><weblink xlink:type="simple" xlink:href="http://www.cs.uky.edu/~lewis/texts/theory/title.pdf">
Essentials of theoretical computer science</weblink></it> A nice textbook covering the topics of formal languages, automata and grammars. The emphasis appears to be on presenting an overview of the results and their applications rather than providing proofs of the results.</entry>
</list>
</p>

</sec>
<sec>
<st>
External links</st>
<p>

<list>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.cis.upenn.edu/~giorgi/cl.html">
Computability Logic</weblink> - A theory of interactive computation. The main web source on this subject.</entry>
</list>
</p>



</sec>
</bdy>
</article>
