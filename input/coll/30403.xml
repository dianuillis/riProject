<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 15:35:26[mciao0825] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<invention  confidence="0.8" wordnetid="105633385">
<model  confidence="0.9511911446218017" wordnetid="110324560">
<know-how  confidence="0.8" wordnetid="105616786">
<method  confidence="0.8" wordnetid="105660268">
<machine  confidence="0.9511911446218017" wordnetid="103699975">
<header>
<title>Turing machine</title>
<id>30403</id>
<revision>
<id>244308591</id>
<timestamp>2008-10-10T05:21:27Z</timestamp>
<contributor>
<username>Abovechief</username>
<id>6959088</id>
</contributor>
</revision>
<categories>
<category>Computational models</category>
<category>Educational abstract machines</category>
<category>English inventions</category>
<category>Alan Turing</category>
<category>Theoretical computer science</category>
<category>Recursion theory</category>
<category>Formal methods</category>
</categories>
</header>
<bdy>

For the test of artificial intelligence, see <link xlink:type="simple" xlink:href="../840/43840.xml">
Turing test</link>.  For the instrumental rock band, see <group wordnetid="100031264" confidence="0.8">
<link xlink:type="simple" xlink:href="../995/9763995.xml">
Turing Machine (band)</link></group>
.<p>

<b>Turing machines</b> are basic abstract symbol-manipulating devices which, despite their simplicity, can be adapted to simulate the logic of any <link xlink:type="simple" xlink:href="../457/7878457.xml">
computer</link> <link xlink:type="simple" xlink:href="../775/775.xml">
algorithm</link>. They were described in <link xlink:type="simple" xlink:href="../673/34673.xml">
1936</link> by <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../208/1208.xml">
Alan Turing</link></scientist>
</person>
. Turing machines are not intended as a practical computing technology, but a <link xlink:type="simple" xlink:href="../535/49535.xml">
thought experiment</link> about the limits of mechanical computation.  Thus they were not actually constructed. Studying their <link xlink:type="simple" xlink:href="../492/60492.xml">
abstract properties</link> yields many insights into <link xlink:type="simple" xlink:href="../323/5323.xml">
computer science</link> and <link xlink:type="simple" xlink:href="../543/7543.xml">
complexity theory</link>.</p>
<p>

A Turing machine that is able to simulate any other Turing machine is called a <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<model wordnetid="110324560" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<assistant wordnetid="109815790" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<machine wordnetid="103699975" confidence="0.8">
<link xlink:type="simple" xlink:href="../435/71435.xml">
Universal Turing machine</link></machine>
</causal_agent>
</worker>
</device>
</assistant>
</instrumentality>
</artifact>
</model>
</person>
</physical_entity>
 (<b>UTM</b>, or simply a <b>universal machine</b>). A more mathematically-oriented definition with a similar "universal" nature was introduced by <scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../731/49731.xml">
Alonzo Church</link></scientist>
, whose work on <link xlink:type="simple" xlink:href="../203/18203.xml">
lambda calculus</link> intertwined with Turing's in a formal theory of <link xlink:type="simple" xlink:href="../926/5926.xml">
computation</link> known as the <link xlink:type="simple" xlink:href="../854/6854.xml">
Church-Turing thesis</link>. The thesis states that Turing machines indeed capture the informal notion of effective method in <link xlink:type="simple" xlink:href="../225/3729225.xml">
logic</link> and <link xlink:type="simple" xlink:href="../831/18831.xml">
mathematics</link>, and provide a precise definition of an <link xlink:type="simple" xlink:href="../775/775.xml">
algorithm</link> or 'mechanical procedure'.</p>

<sec>
<st>
Informal description</st>
<p>

<indent level="1">

<it>For visualizations of Turing machines, see <invention wordnetid="105633385" confidence="0.8">
<know-how wordnetid="105616786" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<link xlink:type="simple" xlink:href="../952/6477952.xml">
Turing machine gallery</link></method>
</know-how>
</invention>
.</it>
</indent>

The <invention wordnetid="105633385" confidence="0.8">
<know-how wordnetid="105616786" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<link xlink:type="simple" xlink:href="../403/30403.xml">
Turing machine</link></method>
</know-how>
</invention>
 mathematically models a machine that mechanically operates on a tape on which symbols are written, which it can read and write one at a time using a tape head; operation is fully determined by a finite set of elementary instructions, such as "in state 42, if the symbol you see is a '0', write a '1'; if you see a '1', shift to the right, and change into state 17; in state 17, if you see a '0', write a '1' and change to state 6;" et cetera.  In the original article ("On computable numbers, with an application to the Entscheidungsproblem", see references below), Turing imagines not a mechanical machine, but a person, whom he calls the "computer", who executes these deterministic, mechanical rules slavishly (or as Turing puts it, "in a desultory manner").</p>
<p>

<image location="right" width="300px" src="Turing_machine_2a.svg" type="thumb">
<caption>

The head is always over a particular square of the tape; only a finite stretch of squares is given.  The instruction to be performed (q4) is shown over the scanned square. (Drawing after Kleene (1952) p.375.)
</caption>
</image>
</p>
<p>

<image location="right" width="300px" src="Turing_machine_2b.svg" type="thumb">
<caption>

Here, the internal state (q1) is shown inside the head, and the illustration describes the tape as being infinite and pre-filled with "0", the symbol serving as blank. The system's full state (its <it>configuration</it>) consists of the internal state, the contents of the shaded squares including the blank scanned by the head ("11B"), and the position of the head. (Drawing after Minsky (1967) p. 121).
</caption>
</image>
</p>
<p>

More precisely, a Turing machine consists of:
<list>
<entry level="1" type="number">

 A <b>TAPE</b> which is divided into cells, one next to the other. Each cell contains a symbol from some finite alphabet. The alphabet contains a special <it>blank</it> symbol (here written as '0') and one or more other symbols. The tape is assumed to be arbitrarily extendable to the left and to the right, i.e., the Turing machine is always supplied with as much tape as it needs for its computation. Cells that have not been written to before are assumed to be filled with the blank symbol. In some models the tape has a left end marked with a special symbol; the tape extends or is indefinitely extensible to the right. The symbols are sometimes referred to as <it>colors</it>.</entry>
<entry level="1" type="number">

 A <b>HEAD</b> that can read and write symbols on the tape and move the tape left and right one (and only one) cell at a time. In some models the head moves and the tape is stationary.</entry>
<entry level="1" type="number">

 A finite <b>TABLE</b> ("action table", or <it>transition function</it>) of instructions (usually quintuples [5-tuples] : qiaj→qi1aj1dk, but sometimes 4-tuples) that, given the <it>state</it>(qi) the machine is currently in <it>and</it> the <it>symbol</it>(aj) it is reading on the tape(symbol currently under HEAD) tells the machine to do the following in sequence (for the 5-tuple models): * either erase or write a symbol (instead of aj written aj1), <it>and then</it> * move the head (which described by dk and can have values: 'L' for one step left <it>or</it> 'R' for one step right <it>or</it> 'H' for staying in the same place), <it>and then</it> * assume the same or a <it>new state</it> as prescribed (go to state qi1). In the 4-tuple models the TABLE tells the machine to (ia) erase or write a symbol <it>or</it> (ib) move the head left or right, <it>and then</it> (ii) assume the same or a new state as prescribed, but not both actions (ia) and (ib) in the same instruction. In some models, if there is no entry in the table for the current combination of symbol and state then the machine will halt; other models require all entries to be filled.</entry>
<entry level="1" type="number">

 A <b>state register</b> that stores the state of the Turing table, one of finitely many. There is one special <it>start state</it> with which the state register is initialized. These states, writes Turing, replace the "state of mind" a person performing computations would ordinarily be in.</entry>
</list>
</p>
<p>

Note that every part of the machine — its state and symbol-collections — and its actions — printing, erasing and tape motion — is <it>finite</it>, <it>discrete</it> and <it>distinguishable</it>; it is the potentially unlimited amount of tape that gives it an unbounded amount of <link xlink:type="simple" xlink:href="../300/5300.xml">
storage space</link>.</p>

</sec>
<sec>
<st>
Examples of Turing machines</st>
<p>

To see examples of the following models, see <invention wordnetid="105633385" confidence="0.8">
<know-how wordnetid="105616786" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<link xlink:type="simple" xlink:href="../511/6246511.xml">
Turing machine examples</link></method>
</know-how>
</invention>
:</p>
<p>

<list>
<entry level="1" type="number">

Turing's very first machine</entry>
<entry level="1" type="number">

Copy routine</entry>
<entry level="1" type="number">

3-state <link xlink:type="simple" xlink:href="../911/67911.xml">
busy beaver</link></entry>
</list>
</p>

</sec>
<sec>
<st>
 Formal definition </st>

<p>

Hopcroft and Ullman (1979, p. 148) formally define a (one-tape) Turing machine as a 7-<link xlink:type="simple" xlink:href="../729/132729.xml">
tuple</link> <math>M= \langle Q, \Gamma, b, \Sigma, \delta, q_0, F \rangle</math> where
<list>
<entry level="1" type="bullet">

 <math>Q</math> is a finite set of <it>states''</it></entry>
<entry level="1" type="bullet">

 <math>\Gamma</math> is a finite set of the <it>tape alphabet/symbols''</it></entry>
<entry level="1" type="bullet">

 <math>b \in \Gamma</math> is the <it>blank symbol</it> (the only symbol allowed to occur on the tape infinitely often at any step during the computation)</entry>
<entry level="1" type="bullet">

 <math>\Sigma\subseteq\Gamma\setminus\{b\}</math> is the set of <it>input symbols''</it></entry>
<entry level="1" type="bullet">

 <math>\delta: Q \times \Gamma \rightarrow Q \times \Gamma \times \{L,R\}</math> is a <link xlink:type="simple" xlink:href="../577/23577.xml">
partial function</link> called the <it><link xlink:type="simple" xlink:href="../475/1817475.xml">
transition function</link></it>, where L is left shift, R is right shift. (A relatively uncommon variant allows "no shift", say N, as a third element of the latter set.)</entry>
<entry level="1" type="bullet">

 <math>q_0 \in Q</math> is the <it>initial state''</it></entry>
<entry level="1" type="bullet">

 <math>F \subseteq Q</math> is the set of <it>final</it> or <it>accepting states</it>.</entry>
</list>

Anything that operates according to these specifications is a Turing machine.</p>
<p>

The 7-tuple for the 3-state <link xlink:type="simple" xlink:href="../911/67911.xml">
busy beaver</link> looks like this (see more about this busy beaver at <invention wordnetid="105633385" confidence="0.8">
<know-how wordnetid="105616786" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<link xlink:type="simple" xlink:href="../511/6246511.xml">
Turing machine examples</link></method>
</know-how>
</invention>
):
<indent level="1">

Q = { <b>A</b>, <b>B</b>, <b>C</b>, <b>HALT</b> }
</indent>
:Γ = { 0, 1 }
<indent level="1">

b = 0 = "blank"
</indent>
:Σ = { 1 }
<indent level="1">

δ = see state-table below
</indent>
:q0 = <b>A</b> = initial state
<indent level="1">

F = the one element set of final states {<b>HALT</b>}
</indent>

Initially all tape cells are marked with 0.</p>
<p>

<table style="text-align:center" class="wikitable">
<caption>
State table for 3 state, 2 symbol busy beaver</caption>
<header rowspan="2">
Tape symbol</header>
<header colspan="3">
Current state <b>A</b></header>
<header colspan="3">
Current state <b>B</b></header>
<header colspan="3">
Current state <b>C</b></header>
<row style="font-size:9pt">
<col>
Write symbol</col>
<col>
Move tape</col>
<col>
Next state</col>
<col>
Write symbol</col>
<col>
Move tape</col>
<col>
Next state</col>
<col>
Write symbol</col>
<col>
Move tape</col>
<col>
Next state</col>
</row>
<row>
<col>
0</col>
<col>
1</col>
<col>
R</col>
<col>
<b>B</b></col>
<col>
1</col>
<col>
L</col>
<col>
<b>A</b></col>
<col>
1</col>
<col>
L</col>
<col>
<b>B</b></col>
</row>
<row>
<col>
1</col>
<col>
1</col>
<col>
L</col>
<col>
<b>C</b></col>
<col>
1</col>
<col>
R</col>
<col>
<b>B</b></col>
<col>
1</col>
<col>
R</col>
<col>
<b>HALT</b></col>
</row>
</table>
</p>

</sec>
<sec>
<st>
 Additional details required to visualize or implement Turing machines </st>

<p>

When trying to mentally picture Turing machines, more details of its operation will need to be filled in, and even more when actually building them.  In the words of an Emde Boas (1990), p. 6: <it>The set-theoretical object [his formal seven-tuple description similar to the above] provides only partial information on how the machine will behave and what its computations will look like.</it></p>
<p>

For instance,
<list>
<entry level="1" type="bullet">

 There will need to be some decision on what the symbols actually look like, and a failproof way of reading and writing symbols indefinitely.</entry>
<entry level="1" type="bullet">

 The shift left and shift right operations may shift the tape head across the tape, but when actually building a Turing machine it is more practical to make the tape slide back and forth under the head instead.</entry>
<entry level="1" type="bullet">

 The tape can be finite, and automatically extended with blanks as needed (which is closest to the mathematical definition), but it is more common to think of it as stretching infinitely at both ends and being pre-filled with blanks except on the explicitly given finite fragment the tape head is on.  (This is, of course, not implementable in practice.)  The tape <it>cannot</it> be fixed in length, since that would not correspond to the given definition and would seriously limit the range of computations the machine can perform.</entry>
</list>
</p>

<ss1>
<st>
Alternative definitions</st>
<p>

Definitions in literature sometimes differ slightly, to make arguments or proofs easier or clearer, but this is always done in such a way that the resulting machine has the same computational power. For example, changing the set <math>\{L,R\}</math> to <math>\{L,R,N\}</math>, where <it>N</it> ("None" or "No-operation") would allow the machine to stay on the same tape cell instead of moving left or right, does not increase the machine's computational power.</p>
<p>

The most common convention represents each "Turing instruction" in a "Turing table" by one of nine 5-tuples, per the convention of Turing/Davis (Turing (1936 in <it>Undecidable</it>, p. 126-127 and Davis (2000) p. 152):</p>
<p>

<indent level="1">

 (definition 1): <b>(qi, Sj, Sk/E/N, L/R/N, qm)</b>
</indent>
:: <b>(</b> current state <b>qi</b> <b>,</b> symbol scanned <b>Sj</b> <b>,</b> print symbol Sk <b>PSk</b>/erase <b>E</b>/none <b>N</b> <b>,</b> move_tape_one_ square left <b>L</b>/right <b>R</b>/None <b>N</b> <b>,</b> new state <b>qm</b> <b>)</b></p>
<p>

Other authors (Minsky (1967) p. 119, Hopcroft and Ullman (1979) p. 158, Stone (1972) p. 9) adopt a different convention, with new state <b>qm</b> listed immediately after the scanned symbol Sj:
<indent level="1">

 (definition 2): <b>(qi, Sj, qm, Sk/E/N, L/R/N)</b>
</indent>
:: <b>(</b> current state <b>qi</b>, symbol scanned <b>Sj</b> <b>,</b> new state <b>qm</b> <b>,</b> print symbol Sk <b>PSk</b>/erase <b>E</b>/none <b>N</b> <b>,</b> move_tape_one_square left <b>L</b>/none <b>N</b>/right <b>R</b> <b>)</b></p>
<p>

For remainder of this article "definition 1" (the Turing/Davis convention) will be used.</p>
<p>

<table style="text-align: center" class="wikitable">
<caption>
Example: state table for the 3-state 2-symbol busy beaver reduced to 5-tuples</caption>
<header>
Current state</header>
<header>
Scanned symbol</header>
<header>
Print symbol</header>
<header>
Move tape</header>
<header>
Final (i.e. next) state</header>
<header>
5-tuples</header>
<row>
<col>
<b>A</b></col>
<col>
0</col>
<col>
1</col>
<col>
R</col>
<col>
<b>B</b></col>
<col>
(<b>A</b>, 0, 1, R, <b>B</b>)</col>
</row>
<row>
<col>
<b>A</b></col>
<col>
1</col>
<col>
1</col>
<col>
L</col>
<col>
<b>C</b></col>
<col>
(<b>A</b>, 1, 1, L, <b>C</b>)</col>
</row>
<row>
<col>
<b>B</b></col>
<col>
0</col>
<col>
1</col>
<col>
L</col>
<col>
<b>A</b></col>
<col>
(<b>B</b>, 0, 1, L, <b>A</b>)</col>
</row>
<row>
<col>
<b>B</b></col>
<col>
1</col>
<col>
1</col>
<col>
R</col>
<col>
<b>B</b></col>
<col>
(<b>B</b>, 1, 1, R, <b>B</b>)</col>
</row>
<row>
<col>
<b>C</b></col>
<col>
0</col>
<col>
1</col>
<col>
L</col>
<col>
<b>B</b></col>
<col>
(<b>C</b>, 0, 1, L, <b>B</b>)</col>
</row>
<row>
<col>
<b>C</b></col>
<col>
1</col>
<col>
1</col>
<col>
N</col>
<col>
<b>H</b></col>
<col>
(<b>C</b>, 1, 1, N, <b>H</b>)</col>
</row>
</table>
</p>
<p>

In the following table, Turing's original model allowed only the first three lines that he called N1, N2, N3 (cf Turing in <it>Undecidable</it>, p. 126). He allowed for erasure of the "scanned square" by naming a 0th symbol S0 = "erase" or "blank", etc. However, he did not allow for non-printing, so every instruction-line includes "print symbol Sk" or "erase" (cf footnote 12 in Post (1947), <it>Undecidable</it> p. 300). The abbreviations are Turing's (<it>Undecidable</it> p.119). Subsequent to Turing's original paper in 1936–1937, machine-models have allowed all nine possible five-tuples:</p>
<p>

<table style="text-align: center" class="wikitable">
<row>

<col style="width:15%">
Current m-configuration (Turing state)</col>
<col>
Tape symbol</col>
<col>
Print-operation</col>
<col>
Tape-motion</col>
<col style="width:15%">
Final m-configuration (Turing state)</col>
<col>
5-tuple</col>
<col>
5-tuple comments</col>

<col>
4-tuple</col>
</row>
<row>
<col>
N1</col>
<col>
qi</col>
<col>
Sj</col>
<col>
Print(Sk)</col>
<col>
Left L</col>
<col>
qm</col>
<col>
(qi, Sj, Sk, L, qm)</col>
<col>
"blank" = S0, 1=S1, etc.</col>


</row>
<row>
<col>
N2</col>
<col>
qi</col>
<col>
Sj</col>
<col>
Print(Sk)</col>
<col>
Right R</col>
<col>
qm</col>
<col>
(qi, Sj, Sk, R, qm)</col>
<col>
"blank" = S0, 1=S1, etc.</col>


</row>
<row>
<col>
N3</col>
<col>
qi</col>
<col>
Sj</col>
<col>
Print(Sk)</col>
<col>
None N</col>
<col>
qm</col>
<col>
(qi, Sj, Sk, N, qm)</col>
<col>
"blank" = S0, 1=S1, etc.</col>

<col>
(qi, Sj, Sk, qm)</col>
</row>

<row>
<col>
4</col>
<col>
qi</col>
<col>
Sj</col>
<col>
None N</col>
<col>
Left L</col>
<col>
qm</col>
<col>
(qi, Sj, N, L, qm)</col>


<col>
(qi, Sj, L, qm)</col>
</row>
<row>
<col>
5</col>
<col>
qi</col>
<col>
Sj</col>
<col>
None N</col>
<col>
Right R</col>
<col>
qm</col>
<col>
(qi, Sj, N, R, qm)</col>


<col>
(qi, Sj, R, qm)</col>
</row>
<row>
<col>
6</col>
<col>
qi</col>
<col>
Sj</col>
<col>
None N</col>
<col>
None N</col>
<col>
qm</col>
<col>
(qi, Sj, N, N, qm)</col>
<col>
Direct "jump"</col>

<col>
(qi, Sj, N, qm)</col>
</row>
<row>
<col>
7</col>
<col>
qi</col>
<col>
Sj</col>
<col>
Erase</col>
<col>
Left L</col>
<col>
qm</col>
<col>
(qi, Sj, E, L, qm)</col>



</row>
<row>
<col>
8</col>
<col>
qi</col>
<col>
Sj</col>
<col>
Erase</col>
<col>
Right R</col>
<col>
qm</col>
<col>
(qi, Sj, E, R, qm)</col>



</row>
<row>
<col>
9</col>
<col>
qi</col>
<col>
Sj</col>
<col>
Erase</col>
<col>
None N</col>
<col>
qm</col>
<col>
(qi, Sj, E, N, qm)</col>


<col>
(qi, Sj, E, qm)</col>
</row>
</table>
</p>
<p>

Any Turing table (list of instructions) can be constructed from the above nine 5-tuples. For technical reasons, the three non-printing or "N" instructions (4, 5, 6) can usually be dispensed with. For examples see <invention wordnetid="105633385" confidence="0.8">
<know-how wordnetid="105616786" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<link xlink:type="simple" xlink:href="../511/6246511.xml">
Turing machine examples</link></method>
</know-how>
</invention>
.</p>
<p>

Less frequently the use of 4-tuples are encountered: these represent a further atomization of the Turing instructions (cf Post (1947), Boolos &amp; Jeffrey (1974, 1999), Davis-Sigal-Weyuker (1994)); also see more at <link xlink:type="simple" xlink:href="../147/3688147.xml">
Post-Turing machine</link>.</p>

</ss1>
<ss1>
<st>
The "state"</st>
<p>

The word "state" used in context of Turing machines can be a source of confusion. Most commentators after Turing have used "state" to mean the name/designator of the current instruction to be performed—i.e. the contents of the state register. But Turing (1936) made a strong distinction between a record of what he called the machine's "m-configuration", and the machine's (or person's) "state of progress" through the computation. What Turing called "the state formula" includes both the current instruction and <it>all</it> the symbols on the tape:</p>
<p>

"Thus the state of progress of the computation at any stage is completely determined by the note of instructions and the symbols on the tape. That is, the <b>state of the system</b> may be described by a single expression (sequence of symbols) consisting of the symbols on the tape followed by Δ (which we suppose not to appear elsewhere) and then by the note of instructions. This expression is called the 'state formula' (<it>Undecidable</it>, p.139–140, emphasis added)</p>
<p>

Earlier in his paper Turing carried this even further: he gives an example where he places a symbol of the current "m-configuration"—the instruction's label—beneath the scanned square, together with all the symbols on the tape (<it>Undecidable</it>, p.121); this he calls "the <it>complete configuration</it>" (<it>Undecidable</it>, p. 118). To print the "complete configuration" on one line he places the state-label/m-configuration to the <it>left</it> of the scanned symbol.</p>
<p>

A variant of this is seen in Kleene (1952) where Kleene shows how to write the <link>
Gödel number</link> of a machine's "situation": he places the "m-configuration" symbol q4 over the scanned square in roughly the center of the 6 non-blank squares on the tape (see the Turing-tape figure in this article) and puts it to the <it>right</it> of the scanned square. But Kleene refers to "q4" itself as "the machine state" (Kleene, p. 374-375). Hopcroft and Ullman call this composite the "instantaneous description" and follow the Turing convention of putting the "current state" (instruction-label, m-configuration) to the <it>left</it> of the scanned symbol (p.149).</p>
<p>

<b>Example: total state of 3-state 2-symbol busy beaver after 3 "moves"</b> (taken from example "run" in the figure below):
<indent level="2">

 1<b>A</b>1
</indent>
This means: after three moves the tape has … 000110000 … on it, the head is scanning the right-most 1, and the state is <b>A</b>. Blanks (in this case represented by "0"s) can be part of the total state as shown here: <b>B</b>01 ; the tape has a single 1 on it, but the head is scanning the 0 ("blank") to its left and the state is <b>B</b>.</p>
<p>

"State" in the context of Turing machines should be clarified as to which is being  described: (i) the current instruction, or (ii) the list of symbols on the tape together with the current instruction, or (iii) the list of symbols on the tape together with the current instruction placed to the left of the scanned symbol or to the right of the scanned symbol.</p>
<p>

Turing's biographer Andrew Hodges (1983: 107) has noted and discussed this confusion.</p>

</ss1>
<ss1>
<st>
Turing machine "state" diagrams</st>

<p>

<table class="wikitable">
<caption>
The table for the 3-state busy beaver ("P" = print/write a "1")</caption>
<row>
<header>
Tape symbol</header>
<header colspan="3">
Current state <b>A</b></header>
<header colspan="3">
Current state <b>B</b></header>
<header colspan="3">
Current state <b>C</b></header>
</row>
<row>

<col>
Write symbol</col>
<col>
Move tape</col>
<col>
Next state</col>
<col>
Write symbol</col>
<col>
Move tape</col>
<col>
Next state</col>
<col>
Write symbol</col>
<col>
Move tape</col>
<col>
Next state</col>
</row>
<row>
<col>
<b>0</b></col>
<col>
P</col>
<col>
R</col>
<col>
<b>B</b></col>
<col>
P</col>
<col>
L</col>
<col>
<b>A</b></col>
<col>
P</col>
<col>
L</col>
<col>
<b>B</b></col>
</row>
<row>
<col>
<b>1</b></col>
<col>
P</col>
<col>
L</col>
<col>
<b>C</b></col>
<col>
P</col>
<col>
R</col>
<col>
<b>B</b></col>
<col>
P</col>
<col>
R</col>
<col>
<b>HALT</b></col>
</row>
</table>
</p>
<p>

<image location="right" width="500px" src="State_diagram_3_state_busy_beaver_2B.gif" type="thumb">
<caption>

The "3-state busy beaver" Turing Machine in a <link xlink:type="simple" xlink:href="../931/10931.xml">
finite state representation</link>. Each circle represents a "state" of the TABLE—an "m-configuration" or "instruction". "Direction" of a state <it>transition</it> is shown by an arrow. The label (e.g.. <b>0/P,R</b>) near the outgoing state (at the "tail" of the arrow) specifies the scanned symbol that causes a particular transition (e.g. <b>0</b>) followed by a slash <b>/</b>, followed by the subsequent "behaviors" of the machine, e.g. "<b>P</b> <b>P</b>rint" then move tape "<b>R</b> <b>R</b>ight". No general accepted format exists. The convention shown is after McClusky (1965), Booth (1965), Hill and Peterson (1974).
</caption>
</image>
</p>
<p>

To the right: the above TABLE as expressed as a "state transition" diagram.</p>
<p>

Usually large TABLES are better left as tables (Booth, p. 74). They are more readily simulated by computer in tabular form (Booth, p. 74). However, certain concepts—e.g. machines with "reset" states and machines with repeating patterns (cf Hill and Peterson p. 244ff)—can be more readily seen when viewed as a drawing.</p>
<p>

Whether a drawing represents an improvement on its TABLE must be decided by the reader for the particular context. See <know-how wordnetid="105616786" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<link xlink:type="simple" xlink:href="../931/10931.xml">
Finite state machine</link></method>
</know-how>
 for more.</p>
<p>

<image location="right" width="500px" src="State_diagram_3_state_busy_beaver_4_.JPG" type="thumbnail">
<caption>

The evolution of the busy-beaver's computation starts at the top and proceeds to the bottom.
</caption>
</image>
</p>
<p>

The reader should again be cautioned that such diagrams represent a snapshot of their TABLE frozen in time, <it>not</it> the course ("trajectory") of a computation <it>through</it> time and/or space. While every time the busy beaver machine "runs" it will always follow the same state-trajectory, this is not true for the "copy" machine that can be provided with variable input "parameters".</p>
<p>

The diagram "Progress of the computation" shows the 3-state busy beaver's "state" (instruction) progress through its computation from start to finish. On the far right is the Turing "complete configuration" (Kleene "situation", Hopcroft-Ullman "instantaneous description") at each step. If the machine were to be stopped and cleared to blank both the "state register" and entire tape, these "configurations" could be used to rekindle a computation anywhere in its progress (cf Turing (1936) <it>Undecidable</it> pp. 139–140).</p>

</ss1>
</sec>
<sec>
<st>
Models equivalent to the Turing machine model</st>
<p>

Many machines that might be thought to have more computational capability than a simple universal Turing machine can be shown to have no more power (Hopcroft and Ullman p. 159, cf Minsky (1967)). They might compute faster, perhaps, or use less memory, or their instruction set might be smaller, but they cannot compute more powerfully (i.e. more mathematical functions). (Recall that the <link xlink:type="simple" xlink:href="../854/6854.xml">
Church-Turing thesis</link> <it>hypothesizes</it> this to be true: that anything that can be “computed” can be computed by some Turing machine.)</p>
<p>

A Turing machine is equivalent to a <link xlink:type="simple" xlink:href="../510/24510.xml">
pushdown automaton</link> made more flexible and concise by relaxing the <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../937/4690937.xml">
last-in-first-out</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
 requirement of its stack. (Interestingly, this seemingly minor relaxation enables the Turing machine to perform such a wide variety of computations that it can serve as a clearer model for the computational capabilities of all modern computer software.)</p>
<p>

At the other extreme, some very simple models turn out to be <link xlink:type="simple" xlink:href="../621/30621.xml">
Turing-equivalent</link>, i.e. to have the same computational power as the Turing machine model.</p>
<p>

Common equivalent models are the multi-tape Turing machine, machines with input and output, and the <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<model wordnetid="110324560" confidence="0.8">
<assistant wordnetid="109815790" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../935/21935.xml">
<it>non-deterministic</it> Turing machine</link></causal_agent>
</worker>
</assistant>
</model>
</person>
</physical_entity>
 (NDTM) as opposed to the <it>deterministic</it> Turing machine (DTM) for which the action table has at most one entry for each combination of symbol and state.</p>

<p>

<indent level="1">

<it>See also: <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<model wordnetid="110324560" confidence="0.8">
<assistant wordnetid="109815790" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../864/6263864.xml">
Turing machine equivalents</link></causal_agent>
</worker>
</assistant>
</model>
</person>
</physical_entity>
, <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<model wordnetid="110324560" confidence="0.8">
<assistant wordnetid="109815790" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../218/505218.xml">
Register machine</link></causal_agent>
</worker>
</assistant>
</model>
</person>
</physical_entity>
,&nbsp;and <link xlink:type="simple" xlink:href="../147/3688147.xml">
Post-Turing machine</link></it>
</indent>

<physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<model wordnetid="110324560" confidence="0.8">
<assistant wordnetid="109815790" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../401/12302401.xml">
Read only right moving Turing Machines</link></causal_agent>
</worker>
</assistant>
</model>
</person>
</physical_entity>
 are equivalent to <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<model wordnetid="110324560" confidence="0.8">
<assistant wordnetid="109815790" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../406/653406.xml">
NDFA's</link></causal_agent>
</worker>
</assistant>
</model>
</person>
</physical_entity>
 (as well as <link xlink:type="simple" xlink:href="../404/653404.xml">
DFA's</link> by conversion using the <link xlink:type="simple" xlink:href="../167/1163167.xml">
NDFA to DFA conversion algorithm</link>). </p>
<p>

For practical and didactical intentions the <link xlink:type="simple" xlink:href="#xpointer(//*[./st=%22Models+equivalent+to+the+Turing+machine+model%22])">
equivalent</link> <link xlink:type="simple" xlink:href="../218/505218.xml">
register machine</link> can be used as a usual <link xlink:type="simple" xlink:href="../368/1368.xml">
assembly</link> <link xlink:type="simple" xlink:href="../015/23015.xml">
programming language</link>.</p>

</sec>
<sec>
<st>
Choice c-machines, Oracle o-machines</st>
<p>

Early in his paper (1936) Turing makes a distinction between an "automatic machine"—its "motion … completely determined by the configuration" and a "choice machine":</p>
<p>

"…whose motion is only partially determined by the configuration … When such a machine reaches one of these ambiguous configurations, it cannot go on until some arbitrary choice has been made by an external operator. This would be the case if we were using machines to deal with axiomatic systems" (p. 118 Undecidable)</p>
<p>

Turing (1936) does not elaborate further excepting a footnote in which he describes how to use an a-machine to "find all the provable formulae of the [Hilbert] calculus" rather than use a choice machine. He "suppose[s] that the choices are always between two possibilities 0 and 1. Each proof will then be determined by a sequence of choices i1, i2, …, in (i1 = 0 or 1, i2 = 0 or 1, …, in = 0 or 1), and hence the number 2n + i12n-1 + i22n-2 + … +in completely determines the proof. The automatic machine carries out successively proof 1, proof 2, proof 3, …"(Footnote ‡ <it>The Undecidable</it>:138)</p>
<p>

This is indeed the technique by which a deterministic (i.e. a-) Turing machine can be used to mimic the action of a <link>
nondeterministic Turing machine</link>; Turing solved the matter in a footnote and appears to dismiss it from further consideration.   </p>
<p>

An <link xlink:type="simple" xlink:href="../431/22431.xml">
oracle machine</link> or o-machine is a Turing a-machine that pauses its computation at state "<b>o</b>" while, to complete its calculation, it "awaits the decision" of "the oracle"—an unspecified entity "apart from saying that it cannot be a machine" (Turing (1939), Undecidable p. 166–168). The concept is now actively used by mathematicians.</p>

</sec>
<sec>
<st>
Universal Turing machines</st>

<p>

<indent level="1">

<it>Main article: <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<model wordnetid="110324560" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<assistant wordnetid="109815790" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<machine wordnetid="103699975" confidence="0.8">
<link xlink:type="simple" xlink:href="../435/71435.xml">
Universal Turing machine</link></machine>
</causal_agent>
</worker>
</device>
</assistant>
</instrumentality>
</artifact>
</model>
</person>
</physical_entity>
</it>
</indent>

As Turing wrote in <it>Undecidable</it>, p. 128:
"It is possible to invent a <it>single machine</it> which can be used to compute <it>any</it> computable sequence. If this machine <b>U</b> is supplied with the tape on the beginning of which is written the string of quintuples separated by semicolons of some computing machine <b>M</b>, then <b>U</b> will compute the same sequence as <b>M</b>." (italics added)</p>
<p>

This finding is now taken for granted, but at the time (1936) it was considered astonishing. The model of computation that Turing called his "universal machine"—"<b>U</b>" for short—is considered by some (cf Davis (2000)) to have been the fundamental theoretical breakthrough that led to the notion of the <link xlink:type="simple" xlink:href="../091/478091.xml">
stored program</link> <link xlink:type="simple" xlink:href="../457/7878457.xml">
computer</link>.</p>
<p>

"Turing's paper … contains, in essence, the invention of the modern computer and some of the programming techniques that accompanied it" (Minsky (1967), p. 104).</p>
<p>

As part of his book <it><work wordnetid="104599396" confidence="0.8">
<product wordnetid="104007894" confidence="0.8">
<creation wordnetid="103129123" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<book wordnetid="106410904" confidence="0.8">
<publication wordnetid="106589574" confidence="0.8">
<link xlink:type="simple" xlink:href="../070/93070.xml">
A New Kind of Science</link></publication>
</book>
</artifact>
</creation>
</product>
</work>
</it>, <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../469/52469.xml">
Stephen Wolfram</link></scientist>
</person>
 announced his discovery of a 2-state 5-symbol universal Turing machine. Wolfram's example was the smallest universal Turing machine then known since it has the smallest product (2,5)=10 of any known universal Turing machine. Other small (weak/semi-weak)universal Turing machines were found by Watanabe, Rogozin, Morgenstern and more recently Neary and Woods, these last authors also showing no threshold between computational complexity and program-size since all of them turned out to be computationally efficient. Whether there is any threshold remains an open question.</p>
<p>

On May 14th, 2007, Wolfram announced a US$25,000 prize for the proof or disproof of the conjecture that an even simpler, <invention wordnetid="105633385" confidence="0.8">
<knowledge_domain wordnetid="105999266" confidence="0.8">
<discipline wordnetid="105996646" confidence="0.8">
<mathematics wordnetid="106000644" confidence="0.8">
<science wordnetid="105999797" confidence="0.8">
<link xlink:type="simple" xlink:href="../858/13899858.xml">
2-state 3-symbol Turing machine</link></science>
</mathematics>
</discipline>
</knowledge_domain>
</invention>
 is universal.<weblink xlink:type="simple" xlink:href="http://www.wolframscience.com/prizes/tm23/">
http://www.wolframscience.com/prizes/tm23/</weblink> On <link>
2007-10-24</link>, the prize was won by Alex Smith, an undergraduate studying Electronic and Computer Engineering at the University of Birmingham, UK.<weblink xlink:type="simple" xlink:href="http://blog.wolfram.com/2007/10/the_prize_is_won_the_simplest.html">
http://blog.wolfram.com/2007/10/the_prize_is_won_the_simplest.html</weblink><weblink xlink:type="simple" xlink:href="http://technology.newscientist.com/article/dn12826-simplest-universal-computer-wins-student-25000.html">
http://technology.newscientist.com/article/dn12826-simplest-universal-computer-wins-student-25000.html</weblink>. However, on <link>
2007-10-29</link> <physical_entity wordnetid="100001930" confidence="0.8">
<peer wordnetid="109626238" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<intellectual wordnetid="109621545" confidence="0.8">
<colleague wordnetid="109935990" confidence="0.8">
<alumnus wordnetid="109786338" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<scholar wordnetid="110557854" confidence="0.8">
<associate wordnetid="109816771" confidence="0.8">
<link xlink:type="simple" xlink:href="../977/1597977.xml">
Vaughan Pratt</link></associate>
</scholar>
</scientist>
</causal_agent>
</alumnus>
</colleague>
</intellectual>
</person>
</peer>
</physical_entity>
 of <university wordnetid="108286163" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../977/26977.xml">
Stanford University</link></university>
 announced he had discovered a flaw in the proof.<weblink xlink:type="simple" xlink:href="http://cs.nyu.edu/pipermail/fom/2007-October/012156.html">
http://cs.nyu.edu/pipermail/fom/2007-October/012156.html</weblink> Wolfram Research disputed Pratt's interpretation.<weblink xlink:type="simple" xlink:href="http://forum.wolframscience.com/showthread.php?s=&amp;threadid=1472">
http://forum.wolframscience.com/showthread.php?s=&amp;threadid=1472</weblink></p>

</sec>
<sec>
<st>
Comparison with real machines</st>
<p>

It is often said that Turing machines, unlike simpler automata, are as powerful as real machines, and are able to execute any operation that a real program can. What is missed in this statement is that, because a real machine can only be in finitely many <it>configurations</it>, in fact this "real machine" is nothing but a <link xlink:type="simple" xlink:href="../404/653404.xml">
deterministic finite automaton</link>. On the other hand, Turing machines are equivalent to machines that have an unlimited amount of storage space for their computations. In fact, Turing machines are not intended to model computers, but rather they are intended to model computation itself; historically, computers, which compute only on their (fixed) internal storage, were developed only later.</p>
<p>

There are a number of ways to explain why Turing machines are useful models of real computers:</p>
<p>

<list>
<entry level="1" type="number">

 Anything a real computer can compute, a Turing machine can also compute. For example: "A Turing machine can simulate any type of subroutine found in programming languages, including recursive procedures and any of the known parameter-passing mechanisms" (Hopcroft and Ullman p. 157). Thus, a statement about the limitations of Turing machines will also apply to real computers.</entry>
<entry level="1" type="number">

 The difference lies only with the ability of a Turing machine to manipulate an unbounded amount of data. However, given a finite amount of time, a Turing machine (like a real machine) can only manipulate a finite amount of data.</entry>
<entry level="1" type="number">

 Like a Turing machine, a real machine can have its storage space enlarged as needed, by acquiring more disks or other storage media. If the supply of these runs short, the Turing machine may become less useful as a model. But the fact is that neither Turing machines nor real machines need astronomical amounts of storage space in order to perform useful computation. The processing time required is usually much more of a problem.</entry>
<entry level="1" type="number">

 Descriptions of real machine programs using simpler abstract models are often much more complex than descriptions using Turing machines. For example, a Turing machine describing an algorithm may have a few hundred states, while the equivalent <link xlink:type="simple" xlink:href="../404/653404.xml">
deterministic finite automaton</link> on a given real machine has quadrillions. This makes the DFA representation infeasible to analyze.</entry>
<entry level="1" type="number">

 Turing machines describe algorithms independent of how much memory they use. There is a limit to the memory possessed by any current machine, but this limit can rise arbitrarily in time. Turing machines allow us to make statements about algorithms which will (theoretically) hold forever, regardless of advances in <it>conventional</it> computing machine architecture.</entry>
<entry level="1" type="number">

 Turing machines simplify the statement of algorithms. Algorithms running on Turing-equivalent abstract machines are usually more general than their counterparts running on real machines, because they have arbitrary-precision data types available and never have to deal with unexpected conditions (including, but not limited to, running out of memory).</entry>
</list>
</p>
<p>

One way in which Turing machines are a poor model for programs is that many real programs, such as <link xlink:type="simple" xlink:href="../194/22194.xml">
operating system</link>s and <link xlink:type="simple" xlink:href="../236/33236.xml">
word processor</link>s, are written to receive unbounded input over time, and therefore do not halt. Turing machines do not model such ongoing computation well (but can still model portions of it, such as individual procedures).</p>

<ss1>
<st>
 Limitations of Turing machines in computational complexity theory </st>

<p>

<indent level="1">

<it>Further information: <link xlink:type="simple" xlink:href="../543/7543.xml">
Computational complexity theory</link></it>
</indent>
A limitation of Turing Machines is that they do not model the strengths of a particular arrangement well. For instance, modern stored-program computers are actually instances of a more specific form of <link xlink:type="simple" xlink:href="../492/60492.xml">
abstract machine</link> known as the <link xlink:type="simple" xlink:href="../421/7179421.xml">
random access stored program machine</link> or RASP machine model. Like the <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<model wordnetid="110324560" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<assistant wordnetid="109815790" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<machine wordnetid="103699975" confidence="0.8">
<link xlink:type="simple" xlink:href="../435/71435.xml">
Universal Turing machine</link></machine>
</causal_agent>
</worker>
</device>
</assistant>
</instrumentality>
</artifact>
</model>
</person>
</physical_entity>
 the RASP stores its "program" in "memory" external to its finite-state machine's "instructions". Unlike the Universal Turing Machine, the RASP has an infinite number of distinguishable, numbered but unbounded "registers"—memory "cells" that can contain any integer (cf Elgot and Robinson (1964), Hartmanis (1971), and in particular Cook-Rechow (1973); references at <link xlink:type="simple" xlink:href="../227/544227.xml">
random access machine</link>). The RASP's finite-state machine is equipped with the capability for indirect addressing (e.g. the contents of one register can be used as an address to specify another register); thus the RASP's "program" can address any register in the register-sequence. The upshot of this distinction is that there are computational optimizations that can be performed based on the memory indices, which are not possible in a general Turing Machine; thus when Turing Machines are used as the basis for bounding running times, a 'false lower bound' can be proven on certain algorithms' running times (due to the false simplifying assumption of a Turing Machine). An example of this is <link xlink:type="simple" xlink:href="../266/4266.xml">
binary search</link>, an algorithm that can be shown to perform more quickly when using the RASP model of computation rather than the Turing machine model.</p>

</ss1>
</sec>
<sec>
<st>
History</st>

<p>

<indent level="1">

<it>See also: <link xlink:type="simple" xlink:href="../775/775.xml">
Algorithm</link>&nbsp;and <link xlink:type="simple" xlink:href="../854/6854.xml">
Church-Turing thesis</link></it>
</indent>

</p>
<ss1>
<st>
 Historical background: computational machinery </st>

<p>

<physical_entity wordnetid="100001930" confidence="0.8">
<peer wordnetid="109626238" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<colleague wordnetid="109935990" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<academician wordnetid="109759069" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<adult wordnetid="109605289" confidence="0.8">
<professional wordnetid="110480253" confidence="0.8">
<mathematician wordnetid="110301261" confidence="0.8">
<educator wordnetid="110045713" confidence="0.8">
<associate wordnetid="109816771" confidence="0.8">
<link xlink:type="simple" xlink:href="../895/3155895.xml">
Robin Gandy</link></associate>
</educator>
</mathematician>
</professional>
</adult>
</scientist>
</academician>
</causal_agent>
</colleague>
</person>
</peer>
</physical_entity>
—a student of <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../208/1208.xml">
Alan Turing</link></scientist>
</person>
 (1912–1954) and his life-long friend—traces the lineage of the notion of "calculating machine" back to <link xlink:type="simple" xlink:href="../698/5698.xml">
Babbage</link> (circa 1834) and actually proposes "Babbage's Thesis":</p>
<p>

"<it>That the whole of development and operations of analysis are now capable of being executed by machinery</it>" (italics in Babbage as cited by Gandy, p. 54)</p>
<p>

Gandy's analysis of Babbage's <link xlink:type="simple" xlink:href="../271/1271.xml">
Analytical Engine</link> describes the following five operations (cf p. 52–53):
<list>
<entry level="1" type="number">

 The arithmetic functions +, -, x where - indicates "proper" subtraction x - y = 0 if y &amp;gt;= x</entry>
<entry level="1" type="number">

 Any sequence of operations is an operation</entry>
<entry level="1" type="number">

 Iteration of an operation (repeating n times an operation P)</entry>
<entry level="1" type="number">

 Conditional iteration (repeating n times an operation P conditional on the "success" of test T)</entry>
<entry level="1" type="number">

 Conditional transfer (i.e. conditional "<link xlink:type="simple" xlink:href="../853/197853.xml">
goto</link>")</entry>
</list>
</p>
<p>

Gandy states that "the functions which can be calculated by (1), (2), and (4) are precisely those which are <link xlink:type="simple" xlink:href="../338/1139338.xml">
Turing computable</link>." (p. 53). He cites other proposals for "universal calculating machines" included those of <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<pioneer wordnetid="110434725" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<originator wordnetid="110383816" confidence="0.8">
<creator wordnetid="109614315" confidence="0.8">
<link xlink:type="simple" xlink:href="../086/1195086.xml">
Percy Ludgate</link></creator>
</originator>
</causal_agent>
</pioneer>
</person>
</physical_entity>
 (1909), <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<engineer wordnetid="109615807" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<inventor wordnetid="110214637" confidence="0.8">
<creator wordnetid="109614315" confidence="0.8">
<link xlink:type="simple" xlink:href="../044/182044.xml">
Leonardo Torres y Quevedo</link></creator>
</inventor>
</causal_agent>
</engineer>
</person>
</physical_entity>
 (1914), <link>
M. d'Ocagne</link> (1922), <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<link xlink:type="simple" xlink:href="../048/1836048.xml">
Louis Couffignal</link></scientist>
</causal_agent>
</person>
</physical_entity>
 (1933), <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../767/32767.xml">
Vannevar Bush</link></scientist>
</person>
 (1936), <link xlink:type="simple" xlink:href="../446/342446.xml">
Howard Aiken</link> (1937). However:</p>
<p>

"... the emphasis is on programming a fixed iterable sequence of arithmetical operations. The fundamental importance of conditional iteration and conditional transfer for a general theory of calculating machines is not recognized ..."(Gandy p. 55)</p>

</ss1>
<ss1>
<st>
 The Entscheidungsproblem (the "decision problem"): Hilbert's tenth question of 1900 </st>

<p>

With regards to <condition wordnetid="113920835" confidence="0.8">
<state wordnetid="100024720" confidence="0.8">
<problem wordnetid="114410605" confidence="0.8">
<difficulty wordnetid="114408086" confidence="0.8">
<link xlink:type="simple" xlink:href="../584/154584.xml">
Hilbert's problems</link></difficulty>
</problem>
</state>
</condition>
 posed by the famous mathematician <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../302/8302.xml">
David Hilbert</link></scientist>
</person>
 in 1900, an aspect of problem #10 had been floating about for almost 30 years before it was framed precisely. Hilbert's original expression for #10 is as follows:</p>
<p>

"<b>10. Determination of the solvability of a Diophantine equation</b>. Given a <link xlink:type="simple" xlink:href="../109/9109.xml">
Diophantine equation</link> with any number of unknown quantities and with rational integral coefficients: To devise a process according to which it can be determined in a finite number of operations whether the equation is solvable in rational integers.</p>
<p>

"The Entscheidungsproblem [decision problem for [[First-order logic|first-order logic]]] is solved when we know a procedure that allows for any given logical expression to decide by finitely many operations its validity or satisfiability ... The Entscheidungsproblem must be considered the main problem of mathematical logic. ..." (quoted, with this translation and the original German, in Nachum Dershowitz and Yuri Gurevich, "A Natural Axiomatization of Church's Thesis", 2007:1 <weblink xlink:type="simple" xlink:href="http://research.microsoft.com/~gurevich/annotated.html">
http://research.microsoft.com/~gurevich/annotated.html</weblink>)</p>
<p>

By 1922, this notion of "<link xlink:type="simple" xlink:href="../672/9672.xml">
Entscheidungsproblem</link>" had developed a bit, and <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<mathematician wordnetid="110301261" confidence="0.8">
<link xlink:type="simple" xlink:href="../136/12648136.xml">
H. Behmann</link></mathematician>
</scientist>
</causal_agent>
</person>
</physical_entity>
 stated that </p>
<p>

"... most general form of the Entscheidungsproblem [is] as follows:
<indent level="1">

"A quite definite generally applicable prescription is required which will allow one to decide in a finite number of steps the truth or falsity of a given purely logical assertion ..." (Gandy p. 57 quoting Behmann)
</indent>
"Behmann remarks that ... the general problem is equivalent to the problem of deciding which mathematical propositions are true." (Gandy p. 57)</p>
<p>

If one were able to solve the Entscheidungsproblem then one would have a "procedure for solving many (or even all) mathematical problems" (Gandy p. 92).</p>
<p>

By the 1928 international congress of mathematicians Hilbert "made his questions quite precise. First, was mathematics <it><link xlink:type="simple" xlink:href="../054/56054.xml">
complete</link></it> ... Second, was mathematics <it><link xlink:type="simple" xlink:href="../802/75802.xml">
consistent</link></it> ... And thirdly, was mathematics <it><link xlink:type="simple" xlink:href="../118/913118.xml">
decidable</link></it>?" (Hodges p. 91, Hawking p. 1121). The first two questions were answered in 1930 by <link>
Kurt Gödel</link> at the very same meeting where Hilbert delivered his retirement speech (much to the chagrin of Hilbert); the third — the Entscheidungsproblem — had to wait until the mid-1930s.</p>
<p>

The problem was that an answer first required a precise definition of "<it>definite general applicable prescription</it>", which <scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../731/49731.xml">
Alonzo Church</link></scientist>
 would come to call "<link>
effective calculability</link>", and in 1928 no such definition existed. But over the next 6–7 years <link xlink:type="simple" xlink:href="../382/362382.xml">
Emil Post</link> developed his definition of a worker moving from room to room writing and erasing marks per a list of instructions (Post 1936), as did Princeton professor Church and his two students <link xlink:type="simple" xlink:href="../805/28805.xml">
Stephen Kleene</link> and <link xlink:type="simple" xlink:href="../224/679224.xml">
J. B. Rosser</link> by use of Church's <link>
λ-calculus</link> and Gödel's <link xlink:type="simple" xlink:href="../414/155414.xml">
recursion theory</link> (1934). Church's paper (published 15 April 1936) showed that the Entscheidungsproblem was indeed "undecidable" and beat Turing to the punch by almost a year (Turing's paper submitted 28 May 1936, published January 1937). In the meantime, <link xlink:type="simple" xlink:href="../382/362382.xml">
Emil Post</link> submitted a brief paper in the fall of 1936, so Turing at least had priority over Post. While Church refereed Turing's paper, Turing had time to study Church's paper and add an Appendix where he sketched a proof that Church's λ-calculus and his machines would compute the same functions.</p>
<p>

"But what Church had done was something rather different, and in a certain sense weaker . . . the Turing construction was more direct, and provided an argument from first principles, closing the gap in Church's demonstration." (Hodges p. 112).</p>
<p>

And Post had only proposed a definition of <link>
calculability</link> and criticized Church's "definition", but had proved nothing.</p>

</ss1>
<ss1>
<st>
 Alan Turing's a- (automatic-)machine </st>

<p>

In the spring of 1935 <link xlink:type="simple" xlink:href="../208/1208.xml">
Alan M. Turing</link>, the young Master's student at King's College Cambridge UK took on the challenge; he had been stimulated by the lectures of the logician <link xlink:type="simple" xlink:href="../867/19867.xml">
M. H. A. Newman</link> "and learned from them of Gödel's work and the Entscheidungsproblem ... Newman used the word 'mechanical' ... In his obituary of Turing 1955 Newman writes:</p>
<p>

"To the question 'what is a "mechanical" process?' Turing returned the characteristic answer 'Something that can be done by a machine' and he embarked on the highly congenial task of analysing the general notion of a computing machine." (Gandy p. 74)</p>
<p>

Gandy states that:</p>
<p>

"I suppose, but do not know, that Turing, right from the start of his work, had as his goal a proof of the undecidability of the Entscheidungsproblem. He told me that the 'main idea' of the paper came to him when he was lying in Grantchester meadows in the summer of 1935. The 'main idea' might have either been his analysis of computation or his realization that there was a universal machine, and so a diagonal argument to prove unsolvability." (p. 76)</p>
<p>

While Gandy believed that Newman's statement above is "misleading", this opinion is not shared by all. Turing had had a life-long interest in machines: "Alan had dreamt of inventing typewriters as a boy; [his mother] Mrs. Turing had a typewriter; and he could well have begun by asking himself what was meant by calling a typewriter 'mechanical'" (Hodges p. 96). While at Princeton pursuing his PhD, Turing built a Boolean-logic multiplier (see below). His PhD thesis, titled "Systems of Logic Based on Ordinals", contains the following definition of "a computable function":</p>
<p>

"It was stated above that 'a function is effectively calculable if its values can be found by some purely mechanical process'. We may take this statement literally, understanding by a purely mechanical process one which could be carried out by a machine. It is possible to give a mathematical description, in a certain normal form, of the structures of these machines. The development of these ideas leads to the author's definition of a computable function, and to an identification of computability with effective calculabiity. It is not difficult, though somewhat laborious, to prove that these three definitions [the 3rd is the λ-calculus] are equivalent ..." (Turing (1939) in <it>The Undecidable</it> p. 160)</p>
<p>

When Turing returned to the UK he ultimately became jointly responsible for breaking the German secret codes created by encryption machines called "The Enigma"; he also became involved in the design of the ACE (<computer wordnetid="103082979" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<machine wordnetid="103699975" confidence="0.8">
<link xlink:type="simple" xlink:href="../735/988735.xml">
Automatic Computing Engine</link></machine>
</device>
</instrumentality>
</artifact>
</computer>
), "[Turing's] ACE proposal was effectively self-contained, and its roots lay not in the <computer wordnetid="103082979" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<machine wordnetid="103699975" confidence="0.8">
<link xlink:type="simple" xlink:href="../011/78011.xml">
EDVAC</link></machine>
</device>
</instrumentality>
</artifact>
</computer>
 [the USA's initiative], but in his own universal machine" (Hodges p. 318). Arguments still continue concerning the origin and nature of what has been named by Kleene (1952) <link xlink:type="simple" xlink:href="../854/6854.xml">
Turing's Thesis</link>. But what Turing <it>did prove</it> with his computational-machine model appears in his paper <it>On Computable Numbers, With an Application to the Entscheidungsproblem</it> (1937):</p>
<p>

"[that] the Hilbert Entscheidungsproblem can have no solution ... I propose, therefore to show that there can be no general process for determining whether a given formula U of the functional calculus K is provable, i.e. that there can be no machine which, supplied with any one U of these formulae, will eventually say whether U is provable." (from Turing's paper reprinted in <it>The Undecidable</it>, p. 145)</p>
<p>

Turing's example (his second proof): If one is to ask for a general procedure to tell us: "Does this machine ever print 0", the question is "undecidable."</p>

</ss1>
<ss1>
<st>
 1937&ndash;1970: The "digital computer", the birth of "Computer science" </st>

<p>

In 1937, while at Princeton working on his PhD thesis, Turing built a digital (Boolean-logic) multiplier from scratch, making his own electromechanical relays (Hodges p. 138). "Alan's task was to embody the logical design of a Turing machine in a network of relay-operated switches . . ." (Hodges p. 138). While Turing might have been just curious and experimenting, quite-earnest work in the same direction was going in Germany (<person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../810/16810.xml">
Konrad Zuse</link></scientist>
</person>
 (1938)), and in the United States (<link xlink:type="simple" xlink:href="../446/342446.xml">
Howard Aiken</link>) and <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<pioneer wordnetid="110434725" confidence="0.8">
<intellectual wordnetid="109621545" confidence="0.8">
<alumnus wordnetid="109786338" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<originator wordnetid="110383816" confidence="0.8">
<scholar wordnetid="110557854" confidence="0.8">
<creator wordnetid="109614315" confidence="0.8">
<link xlink:type="simple" xlink:href="../628/637628.xml">
George Stibitz</link></creator>
</scholar>
</originator>
</scientist>
</causal_agent>
</alumnus>
</intellectual>
</pioneer>
</person>
</physical_entity>
 (1937); the fruits of their labors were used by the Axis and Allied military in World War II (cf Hodges p. 298–299). In the early to mid-1950s <scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../047/1056047.xml">
Hao Wang</link></scientist>
 and <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../639/19639.xml">
Marvin Minsky</link></scientist>
</person>
 reduced the Turing machine to a simpler form (a precursor to the <link xlink:type="simple" xlink:href="../147/3688147.xml">
Post-Turing machine</link> of <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<intellectual wordnetid="109621545" confidence="0.8">
<alumnus wordnetid="109786338" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<mathematician wordnetid="110301261" confidence="0.8">
<scholar wordnetid="110557854" confidence="0.8">
<link xlink:type="simple" xlink:href="../041/953041.xml">
Martin Davis</link></scholar>
</mathematician>
</scientist>
</causal_agent>
</alumnus>
</intellectual>
</person>
</physical_entity>
 ); simultaneously European researchers were reducing the new-fangled <link xlink:type="simple" xlink:href="../457/7878457.xml">
electronic computer</link> to a computer-like theoretical object equivalent to what was now being called a "Turing machine". In the late 1950s and early 1960s, the coincidentally-parallel developments of Melzak and Lambek (1961), Minsky (1961), and Shepherdson and Sturgis (1961) carried the European work further and reduced the Turing machine to a more friendly, computer-like abstract model called the <link xlink:type="simple" xlink:href="../543/7583543.xml">
counter machine</link>; Elgot and Robinson (1964), Hartmanis (1971), Cook and Reckhow (1973) carried this work even further with the <link xlink:type="simple" xlink:href="../218/505218.xml">
register machine</link> and <link xlink:type="simple" xlink:href="../227/544227.xml">
random access machine</link> models —but basically all are just multi-tape Turing machines with an arithmetic-like instruction set.</p>

</ss1>
<ss1>
<st>
 1970&ndash;present: The Turing machine as a model of computation </st>

<p>

Today the counter, register and random-access machines and their sire the Turing machine continue to be the models of choice for theorists investigating questions in the <link xlink:type="simple" xlink:href="../402/30402.xml">
theory of computation</link>. In particular, <link xlink:type="simple" xlink:href="../543/7543.xml">
computational complexity theory</link> makes use of the Turing machine: </p>
<p>

"Depending on the objects one likes to manipulate in the computations (numbers like nonnegative integers or alphanumeric strings), two models have obtained a dominant position in machine-based complexity theory:
<indent level="1">

"<it>the off-line multitape Turing machine</it>. . . , which represents the standard model for string-oriented computation, and
</indent>
:"the <it>random access machine (RAM)</it> as introduced by Cook and Reckhow . . . , which models the idealized Von Neumann style computer." (van Emde Boas 1990:4)
"Only in the related area of analysis of algorithms this role is taken over by the RAM model"(van Emde Boas 1990:16)</p>

</ss1>
</sec>
<sec>
<st>
See also</st>

<p>

<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../775/775.xml">
Algorithm</link>, for a brief history of some of the inventions and the mathematics leading to Turing's definition of what he called his "a-machine"</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../911/67911.xml">
Busy beaver</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../854/6854.xml">
Church-Turing thesis</link>, which says Turing machines can perform any computation that can be performed</entry>
<entry level="1" type="bullet">

 <idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<rule wordnetid="105846054" confidence="0.8">
<link xlink:type="simple" xlink:href="../035/37035.xml">
Conway's Game of Life</link></rule>
</concept>
</idea>
, a Turing-complete cellular automaton</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../668/13668.xml">
Halting problem</link>, for more references</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../019/58019.xml">
Harvard architecture</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../435/12907435.xml">
Modified Harvard architecture</link></entry>
<entry level="1" type="bullet">

 <idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<rule wordnetid="105846054" confidence="0.8">
<link xlink:type="simple" xlink:href="../016/105016.xml">
Langton's ant</link></rule>
</concept>
</idea>
, a simple two-dimensional analogue of the Turing machine.</entry>
<entry level="1" type="bullet">

 <series wordnetid="108457976" confidence="0.8">
<arrangement wordnetid="107938773" confidence="0.8">
<ordering wordnetid="108456993" confidence="0.8">
<hierarchy wordnetid="108377806" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<link xlink:type="simple" xlink:href="../475/186475.xml">
Arithmetical hierarchy</link></group>
</hierarchy>
</ordering>
</arrangement>
</series>
</entry>
<entry level="1" type="bullet">

 <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<model wordnetid="110324560" confidence="0.8">
<assistant wordnetid="109815790" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../812/197812.xml">
Probabilistic Turing machine</link></causal_agent>
</worker>
</assistant>
</model>
</person>
</physical_entity>
</entry>
<entry level="1" type="bullet">

 <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../555/4786555.xml">
Quantum Turing machine</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../621/30621.xml">
Turing completeness</link>, an attribute used in <link xlink:type="simple" xlink:href="../136/442136.xml">
computability theory</link> to describe computing systems with power equivalent to a universal Turing machine.</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../633/46633.xml">
Turing tarpit</link>, any computing system or language which, despite possessing Turing completeness, is generally considered useless for practical computing.</entry>
<entry level="1" type="bullet">

 <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<model wordnetid="110324560" confidence="0.8">
<assistant wordnetid="109815790" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../091/478091.xml">
Von Neumann architecture</link></causal_agent>
</worker>
</assistant>
</model>
</person>
</physical_entity>
</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../205/6205.xml">
Chaitin constant</link> or <link xlink:type="simple" xlink:href="../174/10174.xml">
Omega (computer science)</link> for information relating to the halting problem</entry>
<entry level="1" type="bullet">

 <link>
Gödel, Escher, Bach</link>, an influential book largely about the Church-Turing Thesis.</entry>
</list>
</p>


</sec>
<sec>
<st>
References</st>
<p>

<list>
<entry level="1" type="bullet">

Brunfiel, Geoff, <weblink xlink:type="simple" xlink:href="http://www.nature.com/news/2007/071024/full/news.2007.190.html">
Student snags maths prize</weblink>, <it>Nature</it>, October 24. 2007.</entry>
<entry level="1" type="bullet">

  <cite id="Reference-Boolos-1989, 1999" style="font-style:normal" class="book">Boolos, George;&#32;Richard Jeffrey&#32;(1989, 1999). Computability and Logic, 3rd ed.,&#32;Cambridge UK:&#32;Cambridge University Press. ISBN 0-521-20402-X.</cite>&nbsp;</entry>
<entry level="1" type="bullet">

 <cite id="Reference-Boolos-2002" style="font-style:normal" class="book">Boolos, George;&#32;John Burgess, Richard Jeffrey,&#32;(2002). Computability and Logic, 4th ed.,&#32;Cambridge UK:&#32;Cambridge University Press. ISBN 0-521-00758-5 (pb.).</cite>&nbsp; Some parts have been significantly rewritten by Burgess. Presentation of Turing machines in context of Lambek "abacus machines" (cf <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<model wordnetid="110324560" confidence="0.8">
<assistant wordnetid="109815790" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../218/505218.xml">
Register machine</link></causal_agent>
</worker>
</assistant>
</model>
</person>
</physical_entity>
) and <link xlink:type="simple" xlink:href="../264/5987264.xml">
recursive function</link>s, showing their equivalence.</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../372/10387372.xml">
Taylor L. Booth</link> (1967), <it>Sequential Machines and Automata Theory</it>, John Wiley and Sons, Inc., New York. Graduate level engineering text; ranges over a wide variety of topics, Chapter IX <it>Turing Machines</it> includes some recursion theory.</entry>
<entry level="1" type="bullet">

 B. <physical_entity wordnetid="100001930" confidence="0.8">
<philosopher wordnetid="110423589" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<intellectual wordnetid="109621545" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<academician wordnetid="109759069" confidence="0.8">
<adult wordnetid="109605289" confidence="0.8">
<historian wordnetid="110177150" confidence="0.8">
<professional wordnetid="110480253" confidence="0.8">
<scholar wordnetid="110557854" confidence="0.8">
<educator wordnetid="110045713" confidence="0.8">
<link xlink:type="simple" xlink:href="../942/5717942.xml">
Jack Copeland</link></educator>
</scholar>
</professional>
</historian>
</adult>
</academician>
</causal_agent>
</intellectual>
</person>
</philosopher>
</physical_entity>
 ed. (2004), <it>The Essential Turing: Seminal Writings in Computing, Logic, Philosophy, Artificial Intelligence, and Artificial Life plus The Secrets of Enigma,</it> Clarendon Press (Oxford University Press), Oxford UK, ISBN 0-19-825079-7. Contains the Turing papers plus a draft letter to <link xlink:type="simple" xlink:href="../382/362382.xml">
Emil Post</link> re his criticism of "Turing's convention", and Donald W. Davies' <it>Corrections to Turing's Universal Computing Machine</it>  </entry>
<entry level="1" type="bullet">

  <cite style="font-style:normal" class="book"><physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<intellectual wordnetid="109621545" confidence="0.8">
<alumnus wordnetid="109786338" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<mathematician wordnetid="110301261" confidence="0.8">
<scholar wordnetid="110557854" confidence="0.8">
<link xlink:type="simple" xlink:href="../041/953041.xml">
Martin Davis</link></scholar>
</mathematician>
</scientist>
</causal_agent>
</alumnus>
</intellectual>
</person>
</physical_entity>
&#32;(1958). Computability and Unsolvability.&#32;McGraw-Hill Book Company, Inc, New York.</cite>&nbsp;. On pages 12-20 he gives examples of 5-tuple tables for Addition, The Successor Function, Subtraction (x &amp;gt; = y), Proper Subtraction (0 if x  y), The Identity Function and various identity functions, and Multiplication.</entry>
<entry level="1" type="bullet">

  <cite id="Reference-Davis-1994" style="font-style:normal" class="book">Davis, Martin;&#32;Ron Sigal, Elaine J. Weyuker&#32;(1994). Second Edition: Computability, Complexity, and Languages and Logic: Fundamentals of Theoretical Computer Science, 2nd ed.,&#32;San Diego:&#32;Academic Press, Harcourt, Brace &amp; Company.</cite>&nbsp;</entry>
<entry level="1" type="bullet">

 <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<intellectual wordnetid="109621545" confidence="0.8">
<alumnus wordnetid="109786338" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<mathematician wordnetid="110301261" confidence="0.8">
<scholar wordnetid="110557854" confidence="0.8">
<link xlink:type="simple" xlink:href="../041/953041.xml">
Martin Davis</link></scholar>
</mathematician>
</scientist>
</causal_agent>
</alumnus>
</intellectual>
</person>
</physical_entity>
 (ed.) (1965), <it>The Undecidable</it>, Raven Press, Hewlett, NY.</entry>
<entry level="1" type="bullet">

  <cite style="font-style:normal" class="book"><physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<intellectual wordnetid="109621545" confidence="0.8">
<alumnus wordnetid="109786338" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<mathematician wordnetid="110301261" confidence="0.8">
<scholar wordnetid="110557854" confidence="0.8">
<link xlink:type="simple" xlink:href="../041/953041.xml">
Martin Davis</link></scholar>
</mathematician>
</scientist>
</causal_agent>
</alumnus>
</intellectual>
</person>
</physical_entity>
&#32;(2000). Engines of Logic: Mathematicians and the origin of the Computer, 1st edition,&#32;W. W. Norton &amp; Company, New York. ISBN 0-393-32229-7 pbk..</cite>&nbsp;</entry>
<entry level="1" type="bullet">

 Jim Giles, <weblink xlink:type="simple" xlink:href="http://technology.newscientist.com/article/dn12826-simplest-universal-computer-wins-student-25000.html">
 Simplest 'universal computer' wins student $25,000</weblink>, New Scientist, October 24, 2007.</entry>
<entry level="1" type="bullet">

 <physical_entity wordnetid="100001930" confidence="0.8">
<peer wordnetid="109626238" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<colleague wordnetid="109935990" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<academician wordnetid="109759069" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<adult wordnetid="109605289" confidence="0.8">
<professional wordnetid="110480253" confidence="0.8">
<mathematician wordnetid="110301261" confidence="0.8">
<educator wordnetid="110045713" confidence="0.8">
<associate wordnetid="109816771" confidence="0.8">
<link xlink:type="simple" xlink:href="../895/3155895.xml">
Robin Gandy</link></associate>
</educator>
</mathematician>
</professional>
</adult>
</scientist>
</academician>
</causal_agent>
</colleague>
</person>
</peer>
</physical_entity>
, "The Confluence of Ideas in 1936", pp.51–102 in <link>
Rolf Herken</link>, see below.</entry>
<entry level="1" type="bullet">

  <cite id="Reference-Hennie-1977" style="font-style:normal" class="book">Hennie, Fredrick&#32;(1977). Introduction to Computability.&#32;Addison-Wesley, Reading, Mass.</cite>&nbsp;. On pages 90–103 Hennie discusses the UTM with examples and flow-charts, but no actual 'code'.</entry>
<entry level="1" type="bullet">

 <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../148/19376148.xml">
Stephen Hawking</link></scientist>
</person>
 (editor), 2005, <it>God Created the Integers: The Mathematical Breakthroughs that Changed History", Running Press, Philadelphia, ISBN-13: 978-0-7624-1922-7. Includes Turing's 1936–1937 paper, with brief commentary and biography of Turing as written by Hawking. </it></entry>
<entry level="1" type="bullet">

  <cite style="font-style:normal" class="book"><link>
Rolf Herken</link>. The Universal Turing Machine—A Half-Century Survey.&#32;Springer Verlag. ISBN 3-211-82637-8.</cite>&nbsp;</entry>
<entry level="1" type="bullet">

 <person wordnetid="100007846" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../990/18550990.xml">
Andrew Hodges</link></person>
, <it>Alan Turing: The Enigma</it>, Simon and Schuster, New York. Cf Chapter "The Spirit of Truth" for a history leading to, and a discussion of, his proof.</entry>
<entry level="1" type="bullet">

  <cite style="font-style:normal" class="book"><person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../443/299443.xml">
John Hopcroft</link></scientist>
</person>
 and <peer wordnetid="109626238" confidence="0.8">
<physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<honoree wordnetid="110183757" confidence="0.8">
<intellectual wordnetid="109621545" confidence="0.8">
<colleague wordnetid="109935990" confidence="0.8">
<acquirer wordnetid="109764201" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<recipient wordnetid="109627906" confidence="0.8">
<associate wordnetid="109816771" confidence="0.8">
<laureate wordnetid="110249011" confidence="0.8">
<alumnus wordnetid="109786338" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scholar wordnetid="110557854" confidence="0.8">
<link xlink:type="simple" xlink:href="../318/1702318.xml">
Jeffrey Ullman</link></scholar>
</causal_agent>
</alumnus>
</laureate>
</associate>
</recipient>
</scientist>
</acquirer>
</colleague>
</intellectual>
</honoree>
</person>
</physical_entity>
</peer>
,&#32;(1979). Introduction to Automata Theory, Languages and Computation, 1st edition,&#32;Addison-Wesley, Reading Mass. ISBN 0-201-02988-X..</cite>&nbsp; A difficult book. Centered around the issues of machine-interpretation of "languages", NP-Completeness, etc.</entry>
<entry level="1" type="bullet">

  <cite id="Reference-Hopcroft-2001" style="font-style:normal" class="book">Hopcroft, John E.;&#32;Rajeev Motwani, Jeffrey D. Ullman&#32;(2001). Introduction to Automata Theory, Languages, and Computation, 2nd ed.,&#32;Reading Mass:&#32;Addison-Wesley.</cite>&nbsp; Distinctly different and less intimidating than the first edition.</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../805/28805.xml">
Stephen Kleene</link> (1952), <it>Introduction to Metamathematics</it>, North-Holland Publishing Company, Amsterdam Netherlands, 10th impression (with corrections of 6th reprint 1971). Graduate level text; most of Chapter XIII <it>Computable functions</it> is on Turing machine proofs of computability of recursive functions, etc.</entry>
<entry level="1" type="bullet">

  <cite id="Reference-[[Knuth]]-1973" style="font-style:normal" class="book"><link xlink:type="simple" xlink:href="../211/17211.xml">
Knuth</link>, Donald E.&#32;(1973). Volume 1/Fundamental Algorithms: The Art of computer Programming, 2nd ed.,&#32;Reading, Mass.:&#32;Addison-Wesley Publishing Company.</cite>&nbsp;. With reference to the role of Turing machines in the development of computation (both hardware and software) see 1.4.5 <it>History and Bibliography</it> pp. 225ff and 2.6 <it>History and Bibliography</it>pp. 456ff.</entry>
<entry level="1" type="bullet">

 <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../639/19639.xml">
Marvin Minsky</link></scientist>
</person>
, <it>Computation: Finite and Infinite Machines</it>, Prentice-Hall, Inc., N.J., 1967. See Chapter 8, Section 8.2 "Unsolvability of the Halting Problem." Excellent, i.e. relatively readable, sometimes funny.</entry>
<entry level="1" type="bullet">

  <cite style="font-style:normal" class="book"><physical_entity wordnetid="100001930" confidence="0.8">
<peer wordnetid="109626238" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<honoree wordnetid="110183757" confidence="0.8">
<intellectual wordnetid="109621545" confidence="0.8">
<colleague wordnetid="109935990" confidence="0.8">
<acquirer wordnetid="109764201" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<adult wordnetid="109605289" confidence="0.8">
<professional wordnetid="110480253" confidence="0.8">
<recipient wordnetid="109627906" confidence="0.8">
<educator wordnetid="110045713" confidence="0.8">
<associate wordnetid="109816771" confidence="0.8">
<communicator wordnetid="109610660" confidence="0.8">
<laureate wordnetid="110249011" confidence="0.8">
<alumnus wordnetid="109786338" confidence="0.8">
<academician wordnetid="109759069" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<writer wordnetid="110794014" confidence="0.8">
<scholar wordnetid="110557854" confidence="0.8">
<link xlink:type="simple" xlink:href="../428/3509428.xml">
Christos Papadimitriou</link></scholar>
</writer>
</causal_agent>
</academician>
</alumnus>
</laureate>
</communicator>
</associate>
</educator>
</recipient>
</professional>
</adult>
</scientist>
</acquirer>
</colleague>
</intellectual>
</honoree>
</person>
</peer>
</physical_entity>
&#32;(1993). Computational Complexity, 1st edition,&#32;Addison Wesley. ISBN 0-201-53082-1.</cite>&nbsp; Chapter 2: Turing machines, pp.19–56.</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../382/362382.xml">
Emil Post</link> (1936), "Finite Combinatory Processes—Formulation 1", <it>Journal of Symbolic Logic</it>, 1, 103–105, 1936. Reprinted in <it>The Undecidable</it> pp.289ff.</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../382/362382.xml">
Emil Post</link> (1947), "Recursive Unsolvability of a Problem of Thue", <it>Journal of Symbolic Logic</it>, vol. 12, pp. 1–11. Reprinted in <it>The Undecidable</it> pp.293ff. In the Appendix of this paper Post comments on and gives corrections to Turing's paper of 1936–1937.</entry>
<entry level="1" type="bullet">

  <cite style="font-style:normal" class="book"><person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../193/26193.xml">
Roger Penrose</link></scientist>
</person>
&#32;(1989, 1990). The Emperor's New Mind, 2nd edition,&#32;Oxford University Press, New York. ISBN 0-19-851973-7.</cite>&nbsp;</entry>
<entry level="1" type="bullet">

  <cite style="font-style:normal" class="book"><physical_entity wordnetid="100001930" confidence="0.8">
<communicator wordnetid="109610660" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<writer wordnetid="110794014" confidence="0.8">
<link xlink:type="simple" xlink:href="../433/12074433.xml">
Ivars Peterson</link></writer>
</causal_agent>
</person>
</communicator>
</physical_entity>
&#32;(1988). The Mathematical Tourist: Snapshots of Modern Mathematics, 1st edition,&#32;W. H. Freeman and Company, New York. ISBN 0-7167-2064-7 (pbk.).</cite>&nbsp;</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://web.archive.org/web/20050308141040/http://www.imt.ro/Romjist/Volum1/Vol1_3/turing.htm">
Rogozhin, Yurii, "A Universal Turing Machine with 22 States and 2 Symbols"</weblink>, <it>Romanian Journal Of Information Science and Technology</it>, 1(3), 259–265, 1998. (surveys known results about small universal Turing machines)</entry>
<entry level="1" type="bullet">

  <cite style="font-style:normal" class="book"><physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<mathematician wordnetid="110301261" confidence="0.8">
<link xlink:type="simple" xlink:href="../015/3644015.xml">
Michael Sipser</link></mathematician>
</scientist>
</causal_agent>
</person>
</physical_entity>
&#32;(1997). Introduction to the Theory of Computation.&#32;PWS Publishing. ISBN 0-534-94728-X.</cite>&nbsp; Chapter 3: The Church-Turing Thesis, pp.125–149.</entry>
<entry level="1" type="bullet">

  <cite id="Reference-Stone-1972" style="font-style:normal" class="book">Stone, Harold S.&#32;(1972). Introduction to Computer Organization and Data Structures, 1st ed.,&#32;New York:&#32;McGraw-Hill Book Company. ISBN 0-07-061726-0.</cite>&nbsp;</entry>
<entry level="1" type="bullet">

  <cite style="font-style:normal" class="book"><physical_entity wordnetid="100001930" confidence="0.8">
<communicator wordnetid="109610660" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<academician wordnetid="109759069" confidence="0.8">
<adult wordnetid="109605289" confidence="0.8">
<writer wordnetid="110794014" confidence="0.8">
<professional wordnetid="110480253" confidence="0.8">
<educator wordnetid="110045713" confidence="0.8">
<link xlink:type="simple" xlink:href="../368/7028368.xml">
Paul Strathern</link></educator>
</professional>
</writer>
</adult>
</academician>
</causal_agent>
</person>
</communicator>
</physical_entity>
. Turing and the Computer—The Big Idea.&#32;Anchor Books/Doubleday. ISBN 0-385-49243-X.</cite>&nbsp;</entry>
<entry level="1" type="bullet">

   <cite id="CITEREFTuring2009" style="font-style:normal">Turing, A.M.&#32;(1936),&#32;"On Computable Numbers, with an Application to the Entscheidungsproblem",&#32;<it>Proceedings of the London Mathematical Society</it>, 2&#32;<b>42</b>:  230-65, 1937</cite>&nbsp; (and  <cite id="CITEREFTuring1937" style="font-style:normal">Turing, A.M.&#32;(1937),&#32;"On Computable Numbers, with an Application to the Entscheidungsproblem: A correction",&#32;<it>Proceedings of the London Mathematical Society</it>, 2&#32;<b>43</b>:  544-6</cite>&nbsp;).  Reprinted in many collections, e.g. in <it>The Undecidable</it> pp.115–154; available on the web in many places, e.g. <weblink xlink:type="simple" xlink:href="http://www.scribd.com/doc/2937039/Alan-M-Turing-On-Computable-Numbers">
at Scribd</weblink>.</entry>
<entry level="1" type="bullet">

 <link>
Peter van Emde Boas</link> 1990, <it>Machine Models and Simulations</it>, pp. 3–66, in <link>
Jan van Leeuwen</link>, ed., <it>Handbook of Theoretical Computer Science, Volume A: Algorithms and Complexity</it>, The MIT Press/Elsevier, [place?], ISBN 0-444-88071-2 (Volume A). QA76.H279 1990. Valuable survey, with 141 references.</entry>
<entry level="1" type="bullet">

 <scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../047/1056047.xml">
Hao Wang</link></scientist>
, "A variant to Turing's theory of computing machines", <it>Journal of the Association for Computing Machinery</it> (JACM) 4, 63–92 (1957).</entry>
<entry level="1" type="bullet">

 <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../469/52469.xml">
Stephen Wolfram</link></scientist>
</person>
, <weblink xlink:type="simple" xlink:href="http://www.wolframscience.com/nksonline/page-707">
Wolfram, Stephen, <it>A New Kind of Science''</it></weblink>, Wolfram Media, ISBN 1-57955-008-8</entry>
</list>
</p>

</sec>
<sec>
<st>
External links</st>

<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://plato.stanford.edu/entries/turing-machine/">
Turing Machine on Stanford Encyclopedia of Philosophy</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://plato.stanford.edu/entries/church-turing/">
Detailed info on the Church-Turing Hypothesis</weblink> (Stanford Encyclopedia of Philosophy)</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.weizmann.ac.il/mathusers/lbn/new_pages/Research_Turing.html">
Turing Machine-Like Models</weblink> in Molecular Biology, to understand life mechanisms with a the DNA-tape processor.</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.SaschaSeidel.de/html/programmierung/download_The_Turing_machine.php">
The Turing machine</weblink>—Summary about the Turing machine, its functionality and historical facts</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.angelfire.com/az3/nfold/turing.html/">
Can the cosmos be modeled by a Turing machine?</weblink> Private web site concludes that the cosmos cannot be represented as a Turing computation.</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.wolframscience.com/prizes/tm23/">
The Wolfram 2,3 Turing Machine Research Prize</weblink>—Stephen Wolfram's $25,000 prize for the proof or disproof of the universality of the potentially smallest universal Turing Machine.  The contest has ended, with the proof affirming the machine's universality.</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://web.archive.org/web/20030210114324/http://www.rendell.uk.co/gol/tm.htm">
Turing Machine in Conway's Game of Life</weblink> by Paul Rendell</entry>
<entry level="1" type="bullet">

 "<weblink xlink:type="simple" xlink:href="http://demonstrations.wolfram.com/TuringMachineCausalNetworks/">
Turing Machine Causal Networks</weblink>" by Enrique Zeleny, <link xlink:type="simple" xlink:href="../109/594109.xml">
The Wolfram Demonstrations Project</link>.</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.dmoz.org/Computers/Computer_Science/Theoretical/Automata_Theory/Turing_Machines/">
Turing Machines</weblink> at the <work wordnetid="100575741" confidence="0.8">
<possession wordnetid="100032613" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<company wordnetid="108058098" confidence="0.8">
<undertaking wordnetid="100795720" confidence="0.8">
<property wordnetid="113244109" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<subsidiary_company wordnetid="108003935" confidence="0.8">
<institution wordnetid="108053576" confidence="0.8">
<link xlink:type="simple" xlink:href="../501/18949501.xml">
Open Directory Project</link></institution>
</subsidiary_company>
</activity>
</psychological_feature>
</act>
</property>
</undertaking>
</company>
</event>
</possession>
</work>
</entry>
</list>
</p>

<p>

<table style=";width:auto;" class="navbox" cellspacing="0">
<row>
<col style="padding:2px;">
<table style="width:100%;background:transparent;color:inherit;;" class="nowraplinks collapsible autocollapse " cellspacing="0">
<row>
<header colspan="2" style=";" class="navbox-title">
<link xlink:type="simple" xlink:href="../356/103356.xml">
Automata theory</link>: <link xlink:type="simple" xlink:href="../939/10939.xml">
formal language</link>s and <link xlink:type="simple" xlink:href="../716/18020716.xml">
formal grammar</link>s</header>
</row>
<row style="height:2px;">

</row>
<row>
<col colspan="2" style="width:100%;padding:0px;;;background:transparent;color:inherit;" class="navbox-list navbox-odd">
<table style="text-align:left;width:100%;" class="navbox-columns-table" cellspacing="0">
<row>
<col colspan="1" style="" class="navbox-abovebelow">
<b><language wordnetid="106282651" confidence="0.8">
<link xlink:type="simple" xlink:href="../011/6011.xml">
Chomsky
hierarchy</link></language>
</b></col>
<col colspan="1" style="border-left:2px solid #fdfdfd;" class="navbox-abovebelow">
<b><language wordnetid="106282651" confidence="0.8">
<link xlink:type="simple" xlink:href="../716/18020716.xml">
Grammars</link></language>
</b></col>
<col colspan="1" style="border-left:2px solid #fdfdfd;" class="navbox-abovebelow">
<b><link xlink:type="simple" xlink:href="../939/10939.xml">
Languages</link></b></col>
<col colspan="1" style="border-left:2px solid #fdfdfd;" class="navbox-abovebelow">
<b>Minimal
<link xlink:type="simple" xlink:href="../931/10931.xml">
automaton</link></b></col>
</row>
<row style="height:2px;">

</row>
<row style="vertical-align:top;">
<col style="padding:0px;text-align: center;;;;width:10em;">
Type-0 n/a Type-1 n/a n/a Type-2 n/a Type-3 n/a</col>
<col style="border-left:2px solid #fdfdfd;padding:0px;text-align: center;;;;width:10em;"><p>

<language wordnetid="106282651" confidence="0.8">
<link xlink:type="simple" xlink:href="../174/4906174.xml">
Unrestricted</link></language>
(no common name) <language wordnetid="106282651" confidence="0.8">
<link xlink:type="simple" xlink:href="../211/6211.xml">
Context-sensitive</link></language>
<language wordnetid="106282651" confidence="0.8">
<link xlink:type="simple" xlink:href="../637/12656637.xml">
Indexed</link></language>
<model wordnetid="105890249" confidence="0.8">
<idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<hypothesis wordnetid="105888929" confidence="0.8">
<link xlink:type="simple" xlink:href="../555/567555.xml">
Tree-adjoining</link></hypothesis>
</concept>
</idea>
</model>
 etc.<message wordnetid="106598915" confidence="0.8">
<subject wordnetid="106599788" confidence="0.8">
<language wordnetid="106282651" confidence="0.8">
<link xlink:type="simple" xlink:href="../759/6759.xml">
Context-free</link></language>
</subject>
</message>
<language wordnetid="106282651" confidence="0.8">
<link xlink:type="simple" xlink:href="../024/10609024.xml">
Deterministic context-free</link></language>
<language wordnetid="106282651" confidence="0.8">
<link xlink:type="simple" xlink:href="../855/25855.xml">
Regular</link></language>
n/a</p>
</col>
<col style="border-left:2px solid #fdfdfd;padding:0px;text-align: center;;;;width:10em;"><p>

<language wordnetid="106282651" confidence="0.8">
<link xlink:type="simple" xlink:href="../789/54789.xml">
Recursively enumerable</link></language>
<language wordnetid="106282651" confidence="0.8">
<link xlink:type="simple" xlink:href="../874/53874.xml">
Recursive</link></language>
<language wordnetid="106282651" confidence="0.8">
<link xlink:type="simple" xlink:href="../212/6212.xml">
Context-sensitive</link></language>
<language wordnetid="106282651" confidence="0.8">
<link xlink:type="simple" xlink:href="../284/7324284.xml">
Indexed</link></language>
(<language wordnetid="106282651" confidence="0.8">
<link xlink:type="simple" xlink:href="../226/13026226.xml">
Mildly context-sensitive</link></language>
)<language wordnetid="106282651" confidence="0.8">
<link xlink:type="simple" xlink:href="../867/6867.xml">
Context-free</link></language>
<language wordnetid="106282651" confidence="0.8">
<link xlink:type="simple" xlink:href="../589/7962589.xml">
Deterministic context-free</link></language>
<language wordnetid="106282651" confidence="0.8">
<link xlink:type="simple" xlink:href="../723/25723.xml">
Regular</link></language>
<language wordnetid="106282651" confidence="0.8">
<link xlink:type="simple" xlink:href="../792/4922792.xml">
Star-free</link></language>
</p>
</col>
<col style="border-left:2px solid #fdfdfd;padding:0px;text-align: center;;;;width:10em;"><p>

<invention wordnetid="105633385" confidence="0.8">
<know-how wordnetid="105616786" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<link xlink:type="simple" xlink:href="../403/30403.xml">
Turing machine</link></method>
</know-how>
</invention>
<physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<model wordnetid="110324560" confidence="0.8">
<assistant wordnetid="109815790" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../564/1352564.xml">
Decider</link></causal_agent>
</worker>
</assistant>
</model>
</person>
</physical_entity>
<physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<model wordnetid="110324560" confidence="0.8">
<assistant wordnetid="109815790" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../962/1811962.xml">
Linear-bounded</link></causal_agent>
</worker>
</assistant>
</model>
</person>
</physical_entity>
<physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<model wordnetid="110324560" confidence="0.8">
<assistant wordnetid="109815790" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../447/9791447.xml">
Nested stack</link></causal_agent>
</worker>
</assistant>
</model>
</person>
</physical_entity>
<physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<model wordnetid="110324560" confidence="0.8">
<assistant wordnetid="109815790" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../961/14345961.xml">
Embedded pushdown</link></causal_agent>
</worker>
</assistant>
</model>
</person>
</physical_entity>
<physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<model wordnetid="110324560" confidence="0.8">
<assistant wordnetid="109815790" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../510/24510.xml">
Nondeterministic pushdown</link></causal_agent>
</worker>
</assistant>
</model>
</person>
</physical_entity>
<physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<model wordnetid="110324560" confidence="0.8">
<assistant wordnetid="109815790" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../656/3972656.xml">
Deterministic pushdown</link></causal_agent>
</worker>
</assistant>
</model>
</person>
</physical_entity>
<link xlink:type="simple" xlink:href="../931/10931.xml">
Finite</link><language wordnetid="106282651" confidence="0.8">
<link xlink:type="simple" xlink:href="../149/17995149.xml">
Aperiodic finite</link></language>
</p>
</col>
</row>
</table>
</col>
</row>
<row style="height:2px;">

</row>
<row>
<col colspan="2" style=";" class="navbox-abovebelow">
Each category of languages or grammars is a <link xlink:type="simple" xlink:href="../631/27631.xml">
proper subset</link>of the category directly above it; and any automaton in each category has an equivalent automaton in the category directly above it.</col>
</row>
</table>
</col>
</row>
</table>
</p>



</sec>
</bdy>
</machine>
</method>
</know-how>
</model>
</invention>
</article>
