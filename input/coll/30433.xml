<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 15:36:22[mciao0828] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<O  confidence="0.9508927676800064" wordnetid="106832680">
<header>
<title>Transaction Processing Facility</title>
<id>30433</id>
<revision>
<id>241540768</id>
<timestamp>2008-09-28T14:54:07Z</timestamp>
<contributor>
<username>Una Smith</username>
<id>3349439</id>
</contributor>
</revision>
<categories>
<category>Real-time operating systems</category>
<category>Transaction processing</category>
<category>IBM Mainframe computer operating systems</category>
</categories>
</header>
<bdy>
<template>
<name>Infobox OS</name>
<parameters>
<ui>
?</ui>
<supported_platforms>
?</supported_platforms>
<website>
<weblink xlink:type="simple" xlink:href="http://www.ibm.com/software/htp/tpf/">
IBM: z/TPF operating system</weblink></website>
<latest_release_version>
V1R1</latest_release_version>
<programmed_in>
?</programmed_in>
<latest_release_date>
December, 2005</latest_release_date>
<kernel_type>
<link xlink:type="simple" xlink:href="../123/26123.xml">
Real-time</link></kernel_type>
<working_state>
Current</working_state>
<developer>
<company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../259/18622259.xml">
IBM</link></company>
</developer>
<family>
z/TPF</family>
<name>
z/TPF</name>
<source_model>
<link xlink:type="simple" xlink:href="../886/18934886.xml">
Closed source</link> (Source code is available to licenced users with restrictions)</source_model>
<license>
<link xlink:type="simple" xlink:href="../886/18934886.xml">
Proprietary</link> monthly license charge (MLC)</license>
</parameters>
</template>

<p>

<table style="float: right; clear: right; border: 1px solid #8888aa; background: #f7f8ff; padding: 5px; margin: 0 0 15px 15px; text-align: left;" cellpadding="1">
<row>
<col style="background: #ccf; text-align: center;">
 <b><link xlink:type="simple" xlink:href="../089/13856089.xml">
History of IBM mainframeoperating systems</link></b></col>
</row>
<row>
<col style="background: #fff;">
<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../891/1680891.xml">
IBSYS</link> 1950s</entry>
<entry level="1" type="bullet">

 <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../141/254141.xml">
CTSS</link></O>
 1961</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../635/140635.xml">
BOS/360</link> 1965</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../634/140634.xml">
TOS/360</link> 1965</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../358/6253358.xml">
TSS/360</link> 1967</entry>
<entry level="1" type="bullet">

 <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../821/197821.xml">
MUSIC/SP</link></O>
 1960s</entry>
<entry level="1" type="bullet">

 <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../432/148432.xml">
MTS</link></O>
1970s</entry>
</list>
</col>
</row>
<row>
<col style="background: #eee;">
<list>
<entry level="1" type="bullet">

 <b><link xlink:type="simple" xlink:href="../229/626229.xml">
DOS/360 and successors</link></b> 1966</entry>
<entry level="2" type="bullet">

 DOS/VS 1972</entry>
<entry level="2" type="bullet">

 DOS/VSE 1980s </entry>
<entry level="2" type="bullet">

 VSE/ESA 1991</entry>
<entry level="2" type="bullet">

 <link xlink:type="simple" xlink:href="../682/32682.xml">
z/VSE</link>2005</entry>
</list>
</col>
</row>
<row>
<col style="background: #fff;">
<list>
<entry level="1" type="bullet">

 <b><link xlink:type="simple" xlink:href="../737/14387737.xml">
OS/360 and successors</link></b> 1966</entry>
<entry level="2" type="bullet">

 <link xlink:type="simple" xlink:href="../651/2660651.xml">
MFT</link> 1966</entry>
<entry level="3" type="bullet">

 <link xlink:type="simple" xlink:href="../217/9815217.xml">
OS/VS1</link> 1972</entry>
<entry level="2" type="bullet">

 <link xlink:type="simple" xlink:href="../423/19161423.xml">
MVT</link> 1967</entry>
<entry level="3" type="bullet">

 <link>
OS/VS2R1</link> (SVS) 1972</entry>
<entry level="2" type="bullet">

 <link xlink:type="simple" xlink:href="../649/19649.xml">
MVS</link> (<link>
OS/VS2R2</link>) 1974</entry>
<entry level="3" type="bullet">

 <link xlink:type="simple" xlink:href="../812/13302812.xml">
MVS/370</link> 1970s</entry>
<entry level="3" type="bullet">

 <link xlink:type="simple" xlink:href="../254/39254.xml">
MVS/XA</link> 1980s</entry>
<entry level="3" type="bullet">

 <link xlink:type="simple" xlink:href="../340/39340.xml">
MVS/ESA</link> 1988</entry>
<entry level="3" type="bullet">

 <link xlink:type="simple" xlink:href="../129/39129.xml">
OS/390</link> 1995</entry>
<entry level="3" type="bullet">

 <link xlink:type="simple" xlink:href="../122/39122.xml">
z/OS</link>2000</entry>
</list>
</col>
</row>
<row>
<col style="background: #eee;">
<list>
<entry level="1" type="bullet">

 <b><link xlink:type="simple" xlink:href="../460/8177460.xml">
VM line</link></b></entry>
<entry level="2" type="bullet">

 <link>
CP-40</link><O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../784/315784.xml">
/CMS</link></O>
 1967</entry>
<entry level="2" type="bullet">

 <link xlink:type="simple" xlink:href="../718/315718.xml">
CP-67</link><O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../784/315784.xml">
/CMS</link></O>
 1967</entry>
<entry level="2" type="bullet">

 <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../581/6190581.xml">
VP/CSS</link></O>
 1968</entry>
<entry level="2" type="bullet">

 <link xlink:type="simple" xlink:href="../018/315018.xml">
VM/370</link> 1972</entry>
<entry level="2" type="bullet">

 <link xlink:type="simple" xlink:href="../018/315018.xml">
VM/SP</link> 1980</entry>
<entry level="2" type="bullet">

 <link>
VM/XA</link> 1988</entry>
<entry level="2" type="bullet">

 <link xlink:type="simple" xlink:href="../018/315018.xml">
VM/ESA</link> 1990</entry>
<entry level="2" type="bullet">

 <link xlink:type="simple" xlink:href="../680/1266680.xml">
z/VM</link>2000</entry>
</list>
</col>
</row>
<row>
<col style="background: #fff;">
<list>
<entry level="1" type="bullet">

<b>TPF line</b></entry>
<entry level="2" type="bullet">

<link>
 ACP</link> 1967</entry>
<entry level="2" type="bullet">

<link>
 TPF</link> 1979</entry>
<entry level="2" type="bullet">

<link xlink:type="simple" xlink:href="../433/30433.xml">
z/TPF</link>2000s</entry>
</list>
</col>
</row>
<row>
<col style="background: #eee;">
<list>
<entry level="1" type="bullet">

 <b><family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../815/31815.xml">
Unix-like</link></family>
 on IBM mainframes</b></entry>
<entry level="2" type="bullet">

 <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../332/13227332.xml">
UTS</link></O>
 1981</entry>
<entry level="2" type="bullet">

 <O wordnetid="106832680" confidence="0.9508927676800064">
<link>
AIX/370</link></O>
 1990</entry>
<entry level="2" type="bullet">

 <O wordnetid="106832680" confidence="0.9508927676800064">
<link>
AIX/ESA</link></O>
 1991</entry>
<entry level="2" type="bullet">

 <structure wordnetid="105726345" confidence="0.8">
<arrangement wordnetid="105726596" confidence="0.8">
<distribution wordnetid="105729036" confidence="0.8">
<link xlink:type="simple" xlink:href="../604/1266604.xml">
Linux</link></distribution>
</arrangement>
</structure>
1999</entry>
</list>
</col>
</row>
<row>
<col style="background: #ccf; text-align:right;"></col>
</row>
</table>

<b>TPF</b> is an <link xlink:type="simple" xlink:href="../259/18622259.xml">
IBM</link> <link xlink:type="simple" xlink:href="../123/26123.xml">
real-time operating system</link> for <link xlink:type="simple" xlink:href="../872/14872.xml">
mainframes</link> descended from the IBM <link xlink:type="simple" xlink:href="../294/29294.xml">
System/360</link> family, including <link xlink:type="simple" xlink:href="../088/3968088.xml">
zSeries</link> and <link xlink:type="simple" xlink:href="../088/3968088.xml">
System z9</link>.  The name is an <link xlink:type="simple" xlink:href="../571/1052571.xml">
initialism</link> for <b>Transaction Processing Facility</b>.</p>
<p>

TPF evolved from the <link xlink:type="simple" xlink:href="../932/525932.xml">
Airlines Control Program</link> (ACP), a free package developed in the mid-1960s by <link xlink:type="simple" xlink:href="../259/18622259.xml">
IBM</link> in association with major North American and European airlines.  In 1979, IBM introduced TPF as a replacement for ACP&nbsp;&mdash; and as a priced software product. The new name suggests its greater scope.</p>
<p>

Current users include <link xlink:type="simple" xlink:href="../993/1155993.xml">
Sabre</link> (reservations), <link xlink:type="simple" xlink:href="../119/12715119.xml">
Amadeus</link> (reservations), <link xlink:type="simple" xlink:href="../920/246920.xml">
VISA Inc</link> (authorizations), <series wordnetid="108457976" confidence="0.8">
<arrangement wordnetid="107938773" confidence="0.8">
<chain wordnetid="108376250" confidence="0.8">
<company wordnetid="108058098" confidence="0.8">
<ordering wordnetid="108456993" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<institution wordnetid="108053576" confidence="0.8">
<link xlink:type="simple" xlink:href="../463/796463.xml">
Holiday Inn</link></institution>
</group>
</ordering>
</company>
</chain>
</arrangement>
</series>
 (central reservations), <link xlink:type="simple" xlink:href="../813/1351813.xml">
CBOE</link> (order routing), <airline wordnetid="102690081" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../591/161591.xml">
Singapore Airlines</link></airline>
, <airline wordnetid="102690081" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../882/16882.xml">
KLM</link></airline>
, <airline wordnetid="102690081" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../254/25254.xml">
Qantas</link></airline>
, <railway wordnetid="104048568" confidence="0.8">
<company wordnetid="108058098" confidence="0.8">
<enterprise wordnetid="108056231" confidence="0.8">
<carrier wordnetid="108057633" confidence="0.8">
<business wordnetid="108061042" confidence="0.8">
<institution wordnetid="108053576" confidence="0.8">
<link xlink:type="simple" xlink:href="../928/51928.xml">
Amtrak</link></institution>
</business>
</carrier>
</enterprise>
</company>
</railway>
, <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../498/1189498.xml">
Marriott International</link></company>
 , <link xlink:type="simple" xlink:href="../209/1065209.xml">
worldspan</link> and the <link xlink:type="simple" xlink:href="../413/255413.xml">
NYPD</link> (911 system).</p>
<p>

TPF delivers fast, high-volume, high-throughput transaction processing, handling large, continuous loads of essentially simple transactions across large, geographically dispersed networks. The world's largest TPF-based systems are easily capable of processing tens of thousands of transactions per second. TPF is also designed for highly reliable, continuous (24x7) operation. It is not uncommon for TPF customers to have continuous online availability of a decade or more, even with system and software upgrades.</p>
<p>

While there are other industrial-strength transaction processing systems, notably IBM's own <link xlink:type="simple" xlink:href="../505/391505.xml">
CICS</link> and <link xlink:type="simple" xlink:href="../260/391260.xml">
IMS</link>, TPF's <it>raison d'être</it> is extreme volume, large numbers of concurrent users and very fast response times, for example, <link xlink:type="simple" xlink:href="../920/246920.xml">
VISA credit card</link> processing during the holiday shopping season.</p>
<p>

TPF implements an application known as <link xlink:type="simple" xlink:href="../277/10784277.xml">
PARS</link>. Many airlines use this passenger reservation application or its international version IPARS. TPF was traditionally a 370 <link xlink:type="simple" xlink:href="../368/1368.xml">
assembly language</link> environment for performance reasons, and many TPF assembler applications persist. However, more recent versions of TPF encourage the use of <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../021/6021.xml">
C</link></programming_language>
. Another <link xlink:type="simple" xlink:href="../015/23015.xml">
programming language</link> called <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../030/531030.xml">
SabreTalk</link></instrumentality>
</artifact>
</system>
 was born and died on TPF. One of TPF's major components is a high performance, specialized database facility called TPFDF.</p>
<p>

It is common for TPF sites to also use other IBM mainframe operating systems, such as <link xlink:type="simple" xlink:href="../122/39122.xml">
z/OS</link> and <link xlink:type="simple" xlink:href="../680/1266680.xml">
z/VM</link>, for offline and complementary processing. It is also possible to run a close cousin of TPF, called <link xlink:type="simple" xlink:href="../073/2597073.xml">
ALCS</link>, atop z/OS rather than as a separate operating system. All these operating systems usually coexist on the same physical hardware since IBM mainframes feature multiple ways of partitioning, to handle mixed workloads.</p>
<p>

IBM announced the delivery of the next release of TPF, dubbed z/TPF V1.1, in September 2005. Most significantly, z/TPF adds 64-bit addressing and mandates use of the 64-bit <link xlink:type="simple" xlink:href="../875/11875.xml">
GNU</link> development tools.  The <physical_entity wordnetid="100001930" confidence="0.8">
<communicator wordnetid="109610660" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<compiler wordnetid="109946957" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<writer wordnetid="110794014" confidence="0.8">
<link xlink:type="simple" xlink:href="../323/12323.xml">
GCC compiler</link></writer>
</causal_agent>
</compiler>
</person>
</communicator>
</physical_entity>
 will be the only supported compiler for z/TPF.</p>

<sec>
<st>
Operating Environment</st>

<ss1>
<st>
Tightly Coupled</st>

<p>

TPF is capable of running in a <link xlink:type="simple" xlink:href="../020/64020.xml">
multiprocessor</link>, that is, on mainframe systems in which there is more than one CPU.  Within the community, the CPUs are referred to as <b>Instruction Streams</b> or simply <b>I-streams</b>.  On a mainframe or in a logical partition (LPAR) of a mainframe with more than one I-stream, TPF is said to be running <b>tightly-coupled</b>.</p>
<p>

Due to the <link xlink:type="simple" xlink:href="../851/154851.xml">
reentrant</link> nature of TPF programs and the control program, this is made possible as no active piece of work modifies any program.  The default is to run on the <it>main I-stream</it> which is given as the lowest numbered I-stream found during IPL.  However users and/or programs can initiate work on other I-streams via internal mechanisms in the API which let the caller dictate which I-stream to initiate the work on.  In the new <it>z/TPF</it>, the system itself will try to load balance by routing any application that does not request a preference or <it>affinity</it> to I-streams with less work than others.</p>
<p>

In the TPF architecture, each I-stream shares common core, except for a 4Kb in size prefix area for each I-stream.  In other instances where core data must or should be kept separate, the application designer typically carves up reserved storage areas into a number of sections equal to the number of I-streams.  A good example of the TPF system doing this can be found with TPFs support of <it>I-stream unique globals</it>.  Proper access to these carved sections of core are made by taking the base address of the area, and adding to it the product of the I-stream relative number times the size of each area.</p>

</ss1>
<ss1>
<st>
Loosely Coupled</st>

<p>

TPF is capable of supporting multiple mainframes (of any size themselves - be it single I-stream to multiple I-stream) connecting to and operating on a common database.  Currently, 32 IBM mainframes may share the TPF database; if such a system were in operation, it would be called <b>32-way loosely coupled</b>.  The simplest <link xlink:type="simple" xlink:href="../470/1639470.xml">
loosely coupled</link> system would be two IBM mainframes sharing one <b>DASD</b> (Direct Access Storage Device).  In this case the control program would be equally loaded into core and each program or record on DASD could be potentially accessed by either mainframe.</p>
<p>

In order to serialize accesses between data records on a loosely coupled system, a practice known as <link xlink:type="simple" xlink:href="../470/689470.xml">
Record locking</link> must be used.  This means that when one mainframe processor obtains a <b>hold</b> on a record, the mechanism must prevent all other processors from obtaining the same hold and communicate to the requesting processors that they are waiting.  Within any tightly coupled system this is easy to manage between I-streams via the use of the <b>Record Hold Table</b>.  However when the lock is obtained offboard of the TPF processor in the DASD control unit, an external process must be used.  Historically the record locking was accomplished in the DASD control unit via an <b>RPQ</b> known as <b>LLF</b> (Limited Locking Facility) and later <b>ELLF</b> (extended).  Given that most if not all DASD on the market today do not have these RPQs, other methods such as IBMs <b>Coupling Facility</b> must be used to manage record locks.</p>

<ss3>
<st>
Processor Shared Records</st>

<p>

Records that absolutely must be managed by a <link xlink:type="simple" xlink:href="../470/689470.xml">
record locking</link> process are those which are processor shared.  In TPF most record accesses are done by using <b>record type</b> and <b>ordinal</b>.  So if you had defined a record type in the TPF system of 'FRED' and gave it 100 records or ordinals, then in a processor shared scheme record type 'FRED' ordinal '5' would resolve to the exact same file address on DASD - clearly necessitating the use of a record locking mechanism.</p>
<p>

All processor shared records on a TPF system will be accessed via the exact same file address which will resolve to the exact same location.</p>

</ss3>
<ss3>
<st>
Processor Unique Records</st>

<p>

A processor unique record is one that is defined such that each processor expected to be in the loosely coupled complex has a record type of 'FRED' and perhaps 100 ordinals.  However, if a user on any 2 or more processors examines the file address that record type 'FRED', ordinal '5' resolves to, they will note a different physical address is used.</p>

</ss3>
</ss1>
</sec>
<sec>
<st>
TPF Attributes</st>

<ss1>
<st>
What TPF is not</st>

<p>

TPF has no graphical user interface (hereafter <link xlink:type="simple" xlink:href="../293/12293.xml">
GUI</link>).  TPF's built-in user interface is line driven with simple text screens that scroll upwards.  There are no mice, windows, or icons on a TPF <b>Prime CRAS</b>.  All work is accomplished via the use of typed one or two line commands, similar to early versions of <link xlink:type="simple" xlink:href="../642/31642.xml">
UNIX</link> before <message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<link xlink:type="simple" xlink:href="../147/34147.xml">
X</link></rule>
</direction>
</protocol>
</message>
.</p>
<p>

TPF also does not include a compiler/assembler, text editor, or the concept of a desktop.  TPF application source code is typically kept in PDSs on a z/OS system.  However, some previous installations of TPF kept source code in <link xlink:type="simple" xlink:href="../680/1266680.xml">
z/VM</link>-based files and used the CMS update facility to handle versioning.  Currently the z/OS compiler/assembler is used to build TPF code into object modules, producing load files that the TPF "online system" can accept.  Starting with z/TPF 1.1, <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../297/6097297.xml">
Linux</link></O>
 will be the build platform.</p>
<p>

Using TPF requires an intimate knowledge of the Operations Guide since there is no shipped support for any type of online command "directory" that you might find on other platforms. Commands created by IBM and shipped by IBM for the running and administration of TPF are referred to as "Z-messages" as they are all prefixed with the letter "Z."  Other letters are reserved so that customers may write their own commands.</p>
<p>

TPF has extremely limited capability to debug itself. Typically third party software packages such as <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../259/18622259.xml">
IBM</link></company>
's <b>TPF Tool Kit</b> or <b>Step by Step Trace</b> from <weblink xlink:type="simple" xlink:href="http://www.bedford.com/">
Bedford Associates</weblink> are employed to aid in the tracing and tracking of errant TPF code.  Since TPF can run as a second level guest under IBM's z/VM, a user can employ the VM trace facility to closely follow the execution of code.  TPF will allow certain types of function traces to operate and dump their data to a tape, typically through <b>user exits</b> that present parameters to a called function or perhaps the contents of a block of storage.  There are some other types of trace information that TPF can collect in core while running, and this information gets "dumped" whenever the system encounters a severe error.</p>

</ss1>
<ss1>
<st>
What TPF is</st>

<p>

TPF is highly optimized to permit messages from the supported network to either be switched out to another location, routed to an application (specific set of programs) or to permit extremely efficient accesses to database records.</p>

<ss3>
<st>
Data records</st>
<p>

Historically all data on the TPF system had to fit in fixed record (and core block) sizes of 381, 1055 and 4K bytes.  This was due in part to the physical record sizes of blocks located on DASD.  Much overhead was saved by freeing up any part of the operating system from breaking large data entities into smaller ones during file operations, and reassembling same during read operations.  Since IBM hardware does I/O via the use of <b>channels</b> and <b>channel programs</b>, TPF would generate very small and efficient channel programs to do its I/O - all in the name of speed.  Since the early days also placed a premium on the size of storage media - be it memory or disk, TPF applications evolved into doing very powerful things while using very little resource.</p>
<p>

Today, much of these limitations are removed.  In fact, only because of legacy support are smaller than 4K DASD records still used.  With the advances made in DASD technology, a read/write of a 4K record is just as efficient as a 1055 byte record.  The same advances have increased the capacity of each device so that there is no longer a premium placed on the ability to pack data into the smallest model as possible.</p>

</ss3>
<ss3>
<st>
Programs and Residency</st>
<p>

TPF also had its programs allocated as 381, 1055 and 4K bytes in size and each program consisted of a single record (aka <it>segment</it>).  Therefore a comprehensive application needed many segments.  With the advent of C-support, application programs were no longer limited to 4K sizes, much larger C programs could be created, loaded to the TPF system as multiple 4K records and read into memory during a fetch operation and correctly reassembled.  Since in the past core memory was at a premium, only highly used programs ran 100% of the time as <b>core resident</b>, most ran as <b>file resident</b>.  Given the limitations of older hardware, and even today's relative limitations, a fetch of a program, be it a single 4K record or many, is expensive.  Since core memory is monetarily cheap and physically much much larger, greater numbers of programs could be allocated to reside in core.  With the advent of z/TPF, all programs will reside in core - eventually - the only question is when they get fetched the first time.</p>
<p>

Before z/TPF, all assembler language programs were limited to 4K in size.  Assembler is a more space-efficient language to program in so a lot of function can be packed into relatively few 4K segments of assembler code compared to C in 4K segments.  However, C language programming is much easier to obtain skilled people in, so most if not all new development is done in C.  Since z/TPF allows assembler programs to be repackaged into 1 logical file, critical legacy applications can be maintained and actually improve efficiency - the cost of entering one of these programs will now come at the initial enter when the entire program is fetched into core and logical flow through the program is accomplished via simple branch instructions, instead of a dozen or so IBM instructions previously needed to perform what is known as 'core resident enter/back'.</p>

</ss3>
<ss3>
<st>
Core Usage</st>
<p>

Historically and in step with the previous, core blocks - memory - were also 381, 1055 and 4K bytes in size.  Since <b>ALL</b> memory blocks had to be of this size, most of the overhead for obtaining memory found in other systems was discarded.  The programmer merely needed to decide what size block would fit the need and ask for it.  TPF would maintain a list of blocks in use and simply hand the first block on the available list.</p>
<p>

Physical memory was carved into sections reserved for each size so a 1055 byte block always came from a section and returned there, the only overhead needed was to add its address to the physical block table's proper list.  No compaction or data collection was required.</p>
<p>

As applications got more advanced demands for more core increased and once C became available, memory chunks of indeterminate or large size were required.  This gave rise to the use of heap storage and of course some memory management routines.  To ease the overhead, TPF memory was broken into frames - 4K in size (and now 1Mb in size with z/TPF).  If an application needed a certain number of bytes, the number of contiguous frames required to fill that need were granted.</p>

</ss3>
</ss1>
</sec>
<sec>
<st>
 External links </st>
<p>

<list>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://publib.boulder.ibm.com/infocenter/tpfhelp/current/index.jsp">
TPF Information Center</weblink> (IBM)</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.ibm.com/tpf">
z/TPF</weblink> (IBM)</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.tpfug.org">
TPF User Group</weblink> (TPF User Group)</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.blackbeard.com/tpf/">
Blackbeard</weblink> (Alternative TPF Homepage)</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.bedford.com/">
Bedford Associates</weblink> (Suppliers of step by step trace and TPF Consultancy Services)</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://tech.groups.yahoo.com/group/tpffers/">
TPFfers</weblink> (Single largest online community of TPF programmers)</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.pcs-training.co.uk">
PCS Training</weblink> (Independent training company specialising in TPF)</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.tpfwork.com">
TPFWork.com</weblink> (Job board specialising in TPF and ALCS)</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.tpfsoftware.com">
TPFSOFTWARE</weblink> (Provides products &amp; Services in TPF &amp; Allied technologies for Airline, Banking &amp; Hospitality)</entry>
</list>
</p>


<p>

<table style=";" class="navbox" cellspacing="0">
<row>
<col style="padding:2px;">
<table style="width:100%;background:transparent;color:inherit;;" class="nowraplinks collapsible autocollapse " cellspacing="0">
<row>
<header colspan="2" style=";" class="navbox-title">
<link xlink:type="simple" xlink:href="../123/26123.xml">
Real-time operating system</link>s (RTOS)</header>
</row>
<row style="height:2px;">

</row>
<row>
<col colspan="2" style="width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../710/14415710.xml">
ChibiOS/RT</link></O>
&nbsp;·  <software wordnetid="106566077" confidence="0.8">
<application wordnetid="106570110" confidence="0.8">
<program wordnetid="106568978" confidence="0.8">
<browser wordnetid="106571301" confidence="0.8">
<written_communication wordnetid="106349220" confidence="0.8">
<writing wordnetid="106359877" confidence="0.8">
<code wordnetid="106355894" confidence="0.8">
<coding_system wordnetid="106353757" confidence="0.8">
<link xlink:type="simple" xlink:href="../237/849237.xml">
Contiki</link></coding_system>
</code>
</writing>
</written_communication>
</browser>
</program>
</application>
</software>
&nbsp;·  <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../172/51172.xml">
DNIX</link></O>
&nbsp;·  <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../524/7275524.xml">
DSOS</link></O>
&nbsp;·  <link xlink:type="simple" xlink:href="../225/432225.xml">
eCos</link>&nbsp;·  <link xlink:type="simple" xlink:href="../204/1146204.xml">
Embedded Linux</link>&nbsp;·  <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../077/353077.xml">
EROS</link></database>
</wordnet>
</lexical_database>
</electronic_database>
</information>
</message>
&nbsp;·  <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../217/2152217.xml">
FreeRTOS</link></O>
&nbsp;·  <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../980/867980.xml">
LynxOS</link></O>
&nbsp;·  <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../256/160256.xml">
MenuetOS</link></O>
&nbsp;·  <link xlink:type="simple" xlink:href="../242/18921242.xml">
MERT</link>&nbsp;·  <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../339/903339.xml">
Nucleus RTOS</link></O>
&nbsp;·  <link xlink:type="simple" xlink:href="../001/16260001.xml">
Open AT OS</link>&nbsp;·  <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../093/39093.xml">
OS-9</link></O>
&nbsp;·  <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../503/431503.xml">
OSE</link></O>
&nbsp;·  <link xlink:type="simple" xlink:href="../926/85926.xml">
pSOS</link>&nbsp;·  <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../179/2161179.xml">
Prex</link></O>
&nbsp;·  <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../184/65184.xml">
QNX</link></O>
&nbsp;·  <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../130/1209130.xml">
RMX</link></O>
&nbsp;·  <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../342/62342.xml">
RSX-11</link></O>
&nbsp;·  <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../309/69309.xml">
RT-11</link></O>
&nbsp;·  <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../806/3673806.xml">
RTEMS</link></O>
&nbsp;·  <link xlink:type="simple" xlink:href="../232/419232.xml">
RTLinux</link>&nbsp;·  <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../313/3302313.xml">
SINTRAN III</link></O>
&nbsp;·  <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../446/72446.xml">
Symbian OS</link></O>
&nbsp;·   <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../550/10735550.xml">
Talon DSP RTOS</link></O>
&nbsp;·  <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../766/1593766.xml">
THEOS</link></database>
</wordnet>
</lexical_database>
</electronic_database>
</information>
</message>
&nbsp;·  <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../433/30433.xml">
TPF</link></O>
&nbsp;·  <family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../483/519483.xml">
TRON</link></family>
&nbsp;·  <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../567/327567.xml">
VRTX</link></O>
&nbsp;·  <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../105/157105.xml">
VxWorks</link></O>
&nbsp;·  <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../360/230360.xml">
Windows CE</link></O>
</col>
</row>
</table>
</col>
</row>
</table>
</p>



</sec>
</bdy>
</O>
</article>
