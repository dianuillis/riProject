<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 20:05:38[mciao0828] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<entity  confidence="0.9511911446218017" wordnetid="100001740">
<header>
<title>Blum-Goldwasser cryptosystem</title>
<id>3098878</id>
<revision>
<id>219046136</id>
<timestamp>2008-06-13T09:32:14Z</timestamp>
<contributor>
<username>Ianblair23</username>
<id>145927</id>
</contributor>
</revision>
<categories>
<category>Asymmetric-key cryptosystems</category>
<category>Electronic commerce</category>
</categories>
</header>
<bdy>

The <b>Blum-Goldwasser</b> (BG) cryptosystem is an <link xlink:type="simple" xlink:href="../222/24222.xml">
asymmetric key encryption algorithm</link> proposed by <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../357/308357.xml">
Manuel Blum</link></scientist>
</person>
 and <scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../178/842178.xml">
Shafi Goldwasser</link></scientist>
 in <link xlink:type="simple" xlink:href="../578/34578.xml">
1984</link>.  Blum-Goldwasser is a <link xlink:type="simple" xlink:href="../442/1051442.xml">
probabilistic</link>, <link xlink:type="simple" xlink:href="../585/960585.xml">
semantically secure</link> cryptosystem with a constant-size <link xlink:type="simple" xlink:href="../473/2467473.xml">
ciphertext expansion</link>.  The encryption algorithm implements an XOR-based <link xlink:type="simple" xlink:href="../007/49007.xml">
stream cipher</link> using the <artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<apparatus wordnetid="102727825" confidence="0.8">
<generator wordnetid="103434188" confidence="0.8">
<equipment wordnetid="103294048" confidence="0.8">
<link xlink:type="simple" xlink:href="../599/39599.xml">
Blum Blum Shub</link></equipment>
</generator>
</apparatus>
</instrumentality>
</artifact>
 (BBS) pseudo-random number generator to generate the <link xlink:type="simple" xlink:href="../065/10441065.xml">
keystream</link>.  Decryption is accomplished by manipulating the final state of the BBS generator using the secret key, in order to find the initial seed and reconstruct the keystream.<p>

The BG cryptosystem is <link xlink:type="simple" xlink:href="../585/960585.xml">
semantically secure</link> based on the assumed intractability of <link xlink:type="simple" xlink:href="../491/15491.xml">
integer factorization</link>; specifically, factoring a composite value <math>N = pq</math> where <math>p, q</math> are large <link xlink:type="simple" xlink:href="../666/23666.xml">
primes</link>.  BG has multiple advantages over earlier probabilistic encryption schemes such as the <link xlink:type="simple" xlink:href="../162/2461162.xml">
Goldwasser-Micali cryptosystem</link>.  First, its semantic security reduces solely to integer factorization, without requiring any additional assumptions (e.g., hardness of the <link xlink:type="simple" xlink:href="../041/1183041.xml">
quadratic residuosity problem</link> or the <link xlink:type="simple" xlink:href="../741/1544741.xml">
RSA problem</link>).  Secondly, BG is efficient in terms of storage, inducing a constant-size <link xlink:type="simple" xlink:href="../473/2467473.xml">
ciphertext expansion</link> regardless of message length. BG is also relatively efficient in terms of computation, and fairs well even in comparison with cryptosystems such as RSA (depending on message length and exponent choices).  However, BG is highly vulnerable to adaptive chosen ciphertext attacks (see below).  </p>
<p>

Because encryption is performed using a probabilistic algorithm, a given plaintext may produce very different ciphertexts each time it is encrypted.  This has significant advantages, as it prevents an adversary from recognizing intercepted messages by comparing them to a dictionary of known ciphertexts.</p>

<sec>
<st>
Scheme definition</st>

<p>

<b>Note that the following description is a draft, and may contain errors!</b></p>
<p>

Blum-Goldwasser consists of three algorithms: a probabilistic key generation algorithm which produces a public and a private key, a probabilistic encryption algorithm, and a deterministic decryption algorithm.</p>

<ss1>
<st>
Key generation</st>

<p>

To allow for decryption, the modulus used in Blum-Goldwasser encryption should be a <series wordnetid="108457976" confidence="0.8">
<arrangement wordnetid="107938773" confidence="0.8">
<sequence wordnetid="108459252" confidence="0.8">
<ordering wordnetid="108456993" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<link xlink:type="simple" xlink:href="../352/2218352.xml">
Blum integer</link></group>
</ordering>
</sequence>
</arrangement>
</series>
.  This value is generated in the same manner as an <link xlink:type="simple" xlink:href="../385/25385.xml">
RSA</link> modulus, except that the prime factors <math>(p, q)</math> must be congruent to 3 mod 4.  (See <link xlink:type="simple" xlink:href="../385/25385.xml">
RSA</link>, key generation for details.)</p>
<p>

<list>
<entry level="1" type="number">

Alice generates two large <link xlink:type="simple" xlink:href="../666/23666.xml">
prime number</link>s <math>p \,</math> and <math>q \,</math> such that <math>p \ne q</math>, randomly and independently of each other, where <math>(p, q) \equiv 3</math> mod <math>4</math>.</entry>
<entry level="1" type="number">

Alice computes <math>N = p q</math>.</entry>
</list>
</p>
<p>

The <it>public key</it> is <math>N</math>.  The secret key is the factorization <math>(p, q)</math>.</p>

</ss1>
<ss1>
<st>
 Message encryption </st>

<p>

Suppose Bob wishes to send a message <it>m</it> to Alice:</p>
<p>

<list>
<entry level="1" type="number">

Bob first encodes <math>m</math> as a string of <math>L</math> bits <math>(m_0, \dots, m_{L-1})</math>.</entry>
<entry level="1" type="number">

Bob selects a random element <math>r</math>, where <math>1 &amp;lt; r &amp;lt; N</math>, and computes <math>x_0 = r^2~mod~N</math>.</entry>
<entry level="1" type="number">

Bob uses the BBS pseudo-random number generator to generate <math>L</math> random bits <math>(b_0, \dots, b_{L-1})</math> (the keystream), as follows:</entry>
<entry level="2" type="number">

For <math>i=0</math> to <math>L-1</math>:</entry>
<entry level="2" type="number">

Set <math>b_i</math> equal to the least-significant bit of <math>x_i</math>.  </entry>
<entry level="2" type="number">

Increment <math>i</math>.  </entry>
<entry level="2" type="number">

Compute <math>x_i = (x_{i-1})^2~mod~N</math>.</entry>
<entry level="1" type="number">

Compute the ciphertext by XORing the plaintext bits with the keystream: <math>{\vec c} = {\vec m} \oplus {\vec b}, y=x_{0}^{2^{L}}~mod~N</math>.</entry>
</list>
</p>
<p>

Bob sends the ciphertext <math>(c_0, \dots, c_{L-1}), y</math>.  </p>
<p>

To improve performance, the BBS generator can securely output up to <math>O(log log N)</math> of the least-significant bits of <math>x_i</math> during each round.  See <artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<apparatus wordnetid="102727825" confidence="0.8">
<generator wordnetid="103434188" confidence="0.8">
<equipment wordnetid="103294048" confidence="0.8">
<link xlink:type="simple" xlink:href="../599/39599.xml">
Blum Blum Shub</link></equipment>
</generator>
</apparatus>
</instrumentality>
</artifact>
 for details.</p>

</ss1>
<ss1>
<st>
 Message decryption </st>

<p>

Alice receives <math>(c_0, \dots, c_{L-1}), y</math>.  She can recover <math>m</math> using the following procedure:</p>
<p>

<list>
<entry level="1" type="number">

Using the prime factorization <math>(p, q)</math>, Alice computes <math>r_p = y^{((p+1)/4)^{L}}~mod~(p-1)</math> and <math>r_q = y^{((q+1)/4)^{L}}~mod~(q-1)</math>.</entry>
<entry level="1" type="number">

Compute the initial seed <math>x_0=q(q^{-1}~{mod}~p)r_p + p(p^{-1}~{mod}~q)r_q~{mod}~N</math></entry>
<entry level="1" type="number">

From <math>x_0</math>, recompute the bit-vector <math>{\vec b}</math> using the BBS generator, as in the encryption algorithm.</entry>
<entry level="1" type="number">

Compute the plaintext by XORing the keystream with the ciphertext: <math>{\vec m} = {\vec c} \oplus {\vec b}</math>.</entry>
</list>
</p>
<p>

Alice recovers the plaintext <math>m=(m_0, \dots, m_{L-1})</math>.</p>

</ss1>
</sec>
<sec>
<st>
 Security and efficiency </st>

<p>

The Blum-Goldwasser scheme is <link xlink:type="simple" xlink:href="../585/960585.xml">
semantically-secure</link> based on the hardness of predicting the keystream bits given only the final BBS state <math>y</math> and the public key <math>N</math>.  However, ciphertexts of the form <math>{\vec c}, y</math> are vulnerable to an <link xlink:type="simple" xlink:href="../533/426533.xml">
adaptive chosen ciphertext attack</link> in which the adversary requests the decryption <math>m^{\prime}</math> of a chosen ciphertext <math>{\vec a}, y</math>.  The decryption <math>m</math> of the original ciphertext can be computed as <math>{\vec a} \oplus m^{\prime} \oplus {\vec c}</math>.</p>
<p>

Depending on plaintext size, BG may be more or less computationally expensive than RSA.  Because most RSA deployments use a fixed encryption exponent optimized to minimize encryption time, RSA encryption will typically outperform BG for all but the shortest messages.  However, as the RSA decryption exponent is randomly distributed, modular exponentiation may require a comparable number of squarings/multiplications to BG decryption for a ciphertext of the same length.  BG has the advantage of scaling more efficiently to longer ciphertexts, where RSA requires multiple separate encryptions.  In these cases, BG may be significantly more efficient.</p>

</sec>
<sec>
<st>
 References </st>

<p>

<list>
<entry level="1" type="number">

M. Blum, S. Goldwasser, "An Efficient Probabilistic Public Key Encryption Scheme which Hides All Partial Information", Proceedings of <it>Advances in Cryptology - CRYPTO '84</it>, pp. 289-299, Springer Verlag, 1985.</entry>
<entry level="1" type="number">

Menezes, Alfred; van Oorschot, Paul C.; and Vanstone, Scott A. <it>Handbook of Applied Cryptography</it>. CRC Press, October 1996. ISBN 0-8493-8523-7</entry>
</list>
</p>

</sec>
<sec>
<st>
External links</st>
<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.cacr.math.uwaterloo.ca/hac/">
Menezes, Oorschot, Vanstone, Scott: <it>Handbook of Applied Cryptography</it> (free PDF downloads), see Chapter 8</weblink></entry>
</list>
</p>



</sec>
</bdy>
</entity>
</article>
