<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 15:37:00[mciao0826] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<condition  confidence="0.8" wordnetid="113920835">
<state  confidence="0.8" wordnetid="100024720">
<problem  confidence="0.8" wordnetid="114410605">
<difficulty  confidence="0.8" wordnetid="114408086">
<header>
<title>Travelling salesman problem</title>
<id>31248</id>
<revision>
<id>244100600</id>
<timestamp>2008-10-09T10:36:03Z</timestamp>
<contributor>
<username>ZeroOne</username>
<id>88248</id>
</contributor>
</revision>
<categories>
<category>operations research</category>
<category>Graph theory</category>
<category>NP-complete problems</category>
</categories>
</header>
<bdy>

<image width="150px" src="Trav-sale-prob.svg" type="thumb">
<caption>

If a salesman starts at point 'a', and if the distances between every pair of points are known, what is the shortest route the salesman could take to visit all the other points and return to point 'a'?
</caption>
</image>

The <b><link xlink:type="simple" xlink:href="../109/1603109.xml">
travelling salesman</link> problem</b> (<b>TSP</b>) in <link xlink:type="simple" xlink:href="../476/43476.xml">
operations research</link> is a problem in <link xlink:type="simple" xlink:href="../567/420567.xml">
discrete</link> or <link xlink:type="simple" xlink:href="../555/420555.xml">
combinatorial optimization</link>. It is a prominent illustration of a class of problems in <link xlink:type="simple" xlink:href="../543/7543.xml">
computational complexity theory</link> which are classified as <class wordnetid="107997703" confidence="0.8">
<collection wordnetid="107951464" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<link xlink:type="simple" xlink:href="../681/54681.xml">
NP-hard</link></group>
</collection>
</class>
. <p>

The problem is: given a number of cities and the costs of travelling from any city to any other city, what is the least-cost round-trip route that visits each city exactly once and then returns to the starting city?</p>

<sec>
<st>
Problem statement</st>

<p>

Given a number of cities and the costs of travelling from any city to any other city, what is the least-cost round-trip route that visits each city exactly once and then returns to the starting city?</p>

<ss1>
<st>
Observation</st>
<p>

The size of the solution space is <math>\frac{1}{2}(n-1)!</math> for <it>n</it> &amp;gt; 2, where <it>n</it> is the number of cities. This is the number of <condition wordnetid="113920835" confidence="0.8">
<state wordnetid="100024720" confidence="0.8">
<problem wordnetid="114410605" confidence="0.8">
<difficulty wordnetid="114408086" confidence="0.8">
<link xlink:type="simple" xlink:href="../437/244437.xml">
Hamiltonian cycle</link></difficulty>
</problem>
</state>
</condition>
s in a <link xlink:type="simple" xlink:href="../816/85816.xml">
complete graph</link> of <it>n</it> nodes, that is, closed <link xlink:type="simple" xlink:href="../889/638889.xml">
paths</link> that visit all nodes exactly once.</p>

</ss1>
<ss1>
<st>
Related problems</st>
<p>

<list>
<entry level="1" type="number">

 An equivalent formulation in terms of <link xlink:type="simple" xlink:href="../401/12401.xml">
graph theory</link> is: Given a <work wordnetid="104599396" confidence="0.8">
<product wordnetid="104007894" confidence="0.8">
<creation wordnetid="103129123" confidence="0.8">
<glossary wordnetid="106420781" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<wordbook wordnetid="106418693" confidence="0.8">
<book wordnetid="106410904" confidence="0.8">
<reference_book wordnetid="106417598" confidence="0.8">
<publication wordnetid="106589574" confidence="0.8">
<link xlink:type="simple" xlink:href="../802/325802.xml">
complete weighted graph</link></publication>
</reference_book>
</book>
</wordbook>
</artifact>
</glossary>
</creation>
</product>
</work>
 (where the vertices would represent the cities, the edges would represent the roads, and the weights would be the cost or distance of that road), find a Hamiltonian cycle with the least weight. It can be shown that the requirement of returning to the starting city does not change the <link xlink:type="simple" xlink:href="../543/7543.xml">
computational complexity</link> of the problem.</entry>
<entry level="1" type="number">

 Another related problem is the <link xlink:type="simple" xlink:href="../524/420524.xml">
bottleneck travelling salesman problem</link> (bottleneck TSP): Find a Hamiltonian cycle in a <link xlink:type="simple" xlink:href="../802/325802.xml">
weighted graph</link> with the minimal weight of the weightiest <link>
edge</link>. The problem is of considerable practical importance, apart from evident transportation and logistics areas. A classic example is in <link xlink:type="simple" xlink:href="../910/65910.xml">
printed circuit</link> manufacturing: scheduling of a route of the drill machine to drill holes in a PCB. In robotic machining or drilling applications, the "cities" are parts to machine or holes (of different sizes) to drill, and the "cost of travel" includes time for retooling the robot (single machine job sequencing problem).</entry>
<entry level="1" type="number">

 The generalized travelling salesman problem deals with "states" that have (one or more) "cities" and the salesman has to visit exactly one "city" from each "state". Also known as the "travelling politician problem". One application is encountered in ordering a solution to the <link xlink:type="simple" xlink:href="../868/826868.xml">
cutting stock problem</link> in order to minimise knife changes. Another is concerned with drilling in semiconductor manufacturing, see e.g. <weblink xlink:type="simple" xlink:href="http://patft.uspto.gov/netacgi/nph-Parser?patentnumber=7054798">
U.S. Patent 7,054,798</weblink><weblink xlink:type="simple" xlink:href="http://www.pat2pdf.org/pat2pdf/foo.pl?number=7054798">
&nbsp;</weblink>. Surprisingly, Behzad and Modarres<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref> demonstrated that the generalised travelling salesman problem can be transformed into a standard travelling salesman problem with the same number of cities, but a modified <link xlink:type="simple" xlink:href="../350/831350.xml">
distance matrix</link>.</entry>
</list>
</p>

</ss1>
</sec>
<sec>
<st>
History</st>
<p>

Mathematical problems related to the travelling salesman problem were treated in the 1800s by the Irish mathematician Sir <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../817/39817.xml">
William Rowan Hamilton</link></scientist>
</person>
 and by the British mathematician <person wordnetid="100007846" confidence="0.9508927676800064">
<mathematician wordnetid="110301261" confidence="0.9173553029164789">
<link xlink:type="simple" xlink:href="../789/7803789.xml">
Thomas Kirkman</link></mathematician>
</person>
. A discussion of the early work of Hamilton and Kirkman can be found in <it>Graph Theory 1736-1936</it>.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%222%22])">2</ref> The general form of the TSP appears to have been first studied by mathematicians during the 1930s in Vienna and at Harvard, notably by <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<mathematician wordnetid="110301261" confidence="0.8">
<link xlink:type="simple" xlink:href="../431/149431.xml">
Karl Menger</link></mathematician>
</scientist>
</causal_agent>
</person>
</physical_entity>
. </p>
<p>

The problem was later undertaken by <scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../794/391794.xml">
Hassler Whitney</link></scientist>
 and <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<theorist wordnetid="110706812" confidence="0.8">
<intellectual wordnetid="109621545" confidence="0.8">
<alumnus wordnetid="109786338" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<mathematician wordnetid="110301261" confidence="0.8">
<scholar wordnetid="110557854" confidence="0.8">
<research_worker wordnetid="110523076" confidence="0.8">
<link xlink:type="simple" xlink:href="../510/6638510.xml">
Merrill M. Flood</link></research_worker>
</scholar>
</mathematician>
</scientist>
</causal_agent>
</alumnus>
</intellectual>
</theorist>
</person>
</physical_entity>
 at <university wordnetid="108286163" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../922/23922.xml">
Princeton University</link></university>
. A detailed treatment of the connection between Menger and Whitney as well as the growth in the study of TSP can be found in Alexander Schrijver's 2005 paper "On the history of combinatorial optimization (till 1960)".<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%223%22])">3</ref></p>

</sec>
<sec>
<st>
NP-hardness</st>
<p>

The problem has been shown to be <class wordnetid="107997703" confidence="0.8">
<collection wordnetid="107951464" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<link xlink:type="simple" xlink:href="../681/54681.xml">
NP-hard</link></group>
</collection>
</class>
 (more precisely, it is complete for the <link xlink:type="simple" xlink:href="../426/502426.xml">
complexity class</link> FPNP; see <link xlink:type="simple" xlink:href="../345/663345.xml">
function problem</link>), and the <link xlink:type="simple" xlink:href="../336/8336.xml">
decision problem</link> version ("given the costs and a number <it>x</it>, decide whether there is a round-trip route cheaper than <it>x</it>") is <class wordnetid="107997703" confidence="0.8">
<collection wordnetid="107951464" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<link xlink:type="simple" xlink:href="../466/39466.xml">
NP-complete</link></group>
</collection>
</class>
. The <link xlink:type="simple" xlink:href="../524/420524.xml">
bottleneck travelling salesman problem</link> is also NP-hard. The problem remains NP-hard even for the case when the cities are in the plane with <link xlink:type="simple" xlink:href="../932/53932.xml">
Euclidean distance</link>s, as well as in a number of other restrictive cases. Removing the condition of visiting each city "only once" does not remove the NP-hardness, since it is easily seen that in the planar case an optimal tour visits cities only once (otherwise, by the <link xlink:type="simple" xlink:href="../941/53941.xml">
triangle inequality</link>, a shortcut that skips a repeated visit would decrease the tour length).</p>

</sec>
<sec>
<st>
Algorithms</st>
<p>

The traditional lines of attacking for the NP-hard problems are the following:
<list>
<entry level="1" type="bullet">

 Devising algorithms for finding exact solutions (they will work reasonably fast only for relatively small problem sizes).</entry>
<entry level="1" type="bullet">

 Devising "suboptimal" or <link xlink:type="simple" xlink:href="../509/846509.xml">
heuristic algorithm</link>s, i.e., algorithms that deliver either seemingly or probably good solutions, but which could not be proved to be optimal.</entry>
<entry level="1" type="bullet">

 Finding special cases for the problem ("subproblems") for which either better or exact heuristics are possible.</entry>
</list>
</p>
<p>

For benchmarking of TSP algorithms, <b>TSPLIB</b> is a library of sample instances of the TSP and related problems is maintained, see the TSPLIB external reference. Many of them are lists of actual cities and layouts of actual <link xlink:type="simple" xlink:href="../910/65910.xml">
printed circuits</link>.</p>

<ss1>
<st>
Exact algorithms</st>
<p>

The most direct solution would be to try all the <link xlink:type="simple" xlink:href="../027/44027.xml">
permutation</link>s (ordered combinations) and see which one is cheapest (using <link>
brute force search</link>), but given that the number of permutations is <it>n</it>! (the <link xlink:type="simple" xlink:href="../606/10606.xml">
factorial</link> of the number of cities, <it>n</it>), this solution rapidly becomes impractical. Using the techniques of <link xlink:type="simple" xlink:href="../297/125297.xml">
dynamic programming</link>, one can solve the problem in time <math>O(n^2 2^n)</math><ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%224%22])">4</ref>. Although this is exponential, it is still much better than <math>O(n!)</math>.</p>
<p>

Other approaches include:
<list>
<entry level="1" type="bullet">

 Various <link xlink:type="simple" xlink:href="../580/456580.xml">
branch-and-bound</link> algorithms, which can be used to process TSPs containing 40-60 cities.</entry>
<entry level="1" type="bullet">

 Progressive improvement algorithms which use techniques reminiscent of <link xlink:type="simple" xlink:href="../730/43730.xml">
linear programming</link>. Works well for up to 200 cities.</entry>
<entry level="1" type="bullet">

 Implementations of branch-and-bound and problem-specific cut generation; this is the method of choice for solving large instances. This approach holds the current record, solving an instance with 85,900 cities, see below.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%225%22])">5</ref></entry>
</list>
</p>
<p>

An exact solution for 15,112 German towns from TSPLIB was found in 2001 using the <link xlink:type="simple" xlink:href="../680/1597680.xml">
cutting-plane method</link> proposed by <physical_entity wordnetid="100001930" confidence="0.8">
<expert wordnetid="109617867" confidence="0.8">
<analyst wordnetid="109790482" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<statistician wordnetid="110653238" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<mathematician wordnetid="110301261" confidence="0.8">
<research_worker wordnetid="110523076" confidence="0.8">
<link xlink:type="simple" xlink:href="../rry/Bill_B$erry.xml">
George Dantzig</link></research_worker>
</mathematician>
</scientist>
</causal_agent>
</statistician>
</person>
</analyst>
</expert>
</physical_entity>
, <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<mathematician wordnetid="110301261" confidence="0.8">
<link xlink:type="simple" xlink:href="../238/239238.xml">
Ray Fulkerson</link></mathematician>
</scientist>
</causal_agent>
</person>
</physical_entity>
, and <link>
Selmer Johnson</link> in <link xlink:type="simple" xlink:href="../982/34982.xml">
1954</link>, based on <link xlink:type="simple" xlink:href="../730/43730.xml">
linear programming</link>. The computations were performed on a network of 110 processors located at <university wordnetid="108286163" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../813/25813.xml">
Rice University</link></university>
 and <university wordnetid="108286163" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../922/23922.xml">
Princeton University</link></university>
 (see the Princeton external link). The total computation time was equivalent to 22.6&nbsp;years on a single 500&nbsp;MHz <link xlink:type="simple" xlink:href="../971/8971.xml">
Alpha processor</link>. In May 2004, the travelling salesman problem of visiting all 24,978 towns in Sweden was solved: a tour of length approximately 72,500 kilometers was found and it was proven that no shorter tour exists.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%226%22])">6</ref></p>
<p>

In March 2005, the travelling salesman problem of visiting all 33,810 points in a circuit board was solved using <link xlink:type="simple" xlink:href="../361/16645361.xml">
CONCORDE</link>: a tour of length 66,048,945 units was found and it was proven that no shorter tour exists. The computation took approximately 15.7 CPU years (Cook et al. 2006). In April 2006 an instance with 85,900 points was solved using <link xlink:type="simple" xlink:href="../361/16645361.xml">
CONCORDE</link>, taking over 136 CPU years, see the book by Applegate et al [2006] <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%227%22])">7</ref>.</p>

</ss1>
<ss1>
<st>
Heuristics</st>
<p>

Various <link xlink:type="simple" xlink:href="../105/563105.xml">
approximation algorithm</link>s, which quickly yield good solutions with high probability, have been devised. Modern methods can find solutions for extremely large problems (millions of cities) within a reasonable time which are with a high probability just 2-3% away from the optimal solution.</p>
<p>

Several categories of heuristics are recognized.</p>

<ss2>
<st>
Constructive heuristics</st>
<p>

The <link xlink:type="simple" xlink:href="../926/41926.xml">
nearest neighbour (NN) algorithm</link> (the so-called <link xlink:type="simple" xlink:href="../247/89247.xml">
greedy algorithm</link> is similar, but slightly different) lets the salesman start from any one city and choose the nearest city not visited yet to be his next visit. This algorithm quickly yields an effectively short route.</p>
<p>

Rosenkrantz et al. [1977] showed that the NN algorithm has the approximation factor <math>\Theta(\log |V|)</math> for instances satisfying the triangle inequality. And the result is always of length = 0.5*(log(n)+1), where n is the number of cities (Levitin, 2003).</p>
<p>

For each n&amp;gt;1, there exist infinitely many examples for which the NN (greedy algorithm) gives the longest possible route (Gutin, Yeo, and Zverovich, 2002). This is true for both asymmetric and symmetric TSPs (Gutin and Yeo, 2007).</p>
<p>

Recently a new constructive heuristic, Match Twice and Stitch (MTS) (Kahng, Reda 2004 <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%228%22])">8</ref>), is proposed. MTS has been shown to empirically outperform all existing tour construction heuristics. MTS performs two sequential matchings, where the second matching is executed after deleting all the edges of the first matching, to yield a set of cycles. The cycles are then stitched to produce the final tour.</p>

</ss2>
<ss2>
<st>
Iterative improvement</st>
<p>

<list>
<entry level="1" type="bullet">

 <b>Pairwise exchange</b>, or <b><link xlink:type="simple" xlink:href="../888/8818888.xml">
Lin-Kernighan</link></b> heuristics.</entry>
<entry level="1" type="indent">

 The pairwise exchange or '2-opt' technique involves iteratively removing two edges and replacing these with two different edges that reconnect the fragments created by edge removal into a new and more optimal tour. This is a special case of the k-opt method. Note that the label 'Lin-Kernighan' is an often heard misnomer for 2-opt. Lin-Kernighan is actually a more general method.</entry>
<entry level="1" type="bullet">

 <b><it>k</it></b><b>-opt heuristic</b></entry>
<entry level="1" type="indent">

 Take a given tour and delete <it>k</it> mutually disjoint edges. Reassemble the remaining fragments into a tour, leaving no disjoint subtours (that is, don't connect a fragment's endpoints together). This in effect simplifies the TSP under consideration into a much simpler problem. Each fragment endpoint can be connected to 2<it>k</it>&nbsp;&amp;minus;&nbsp;2 other possibilities: of 2<it>k</it> total fragment endpoints available, the two endpoints of the fragment under consideration are disallowed. Such a constrained 2<it>k</it>-city TSP can then be solved with brute force methods to find the least-cost recombination of the original fragments. The k-opt technique is a special case of the V-opt or variable-opt technique. The most popular of the k-opt methods are 3-opt, and these were introduced by Shen Lin of Bell Labs in 1965. There is a special case of 3-opt where the edges are not disjoint (two of the edges are adjacent to one another). In practice, it is often possible to achieve substantial improvement over 2-opt without the combinatorial cost of the general 3-opt by restricting the 3-changes to this special subset where two of the removed edges are adjacent. This so called two-and-a-half-opt typically falls roughly midway between 2-opt and 3-opt both in terms of the quality of tours achieved and the time required to achieve those tours.</entry>
<entry level="1" type="bullet">

 <b><it>V</it></b><it>-opt heuristic</it>'</entry>
<entry level="1" type="indent">

 The variable-opt method is related to, and a generalization of the k-opt method. Whereas the k-opt methods remove a fixed number (k) of edges from the original tour, the variable-opt methods do not fix the size of the edge set to remove. Instead they grow the set as the search process continues. The best known method in this family is the Lin-Kernighan method (mentioned above as a misnomer for 2-opt). Shen Lin and Brian Kernighan first published their method in 1972, and it was the most reliable heuristic for solving travelling salesman problems for nearly two decades. More advanced variable-opt methods were developed at Bell Labs in the late 1980s by David Johnson and his research team. These methods (sometimes called Lin-Kernighan-Johnson) build on the Lin-Kernighan method, adding ideas from tabu search and evolutionary computing. The basic Lin-Kernighan technique gives results that are guaranteed to be at least 3-opt. The Lin-Kernighan-Johnson methods compute a Lin-Kernighan tour, and then perturb the tour by what has been described as a mutation that removes at least four edges and reconnecting the tour in a different way, then v-opting the new tour. The mutation is often enough to move the tour from the local well identified by Lin-Kernighan. V-opt methods are widely considered the most powerful heuristics for the problem, and are able to address special cases, such as the Hamilton Cycle Problem and other non-metric TSPs that other heuristics fail on. For many years Lin-Kernighan-Johnson had identified optimal solutions for all TSPs where an optimal solution was known and had identified the best known solutions for all other TSPs on which the method had been tried.</entry>
</list>
</p>

</ss2>
<ss2>
<st>
Randomised improvement</st>
<p>

<list>
<entry level="1" type="bullet">

 Optimised <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<model wordnetid="110324560" confidence="0.8">
<assistant wordnetid="109815790" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../876/60876.xml">
Markov chain</link></causal_agent>
</worker>
</assistant>
</model>
</person>
</physical_entity>
 algorithms which use local searching heuristic sub-algorithms can find a route extremely close to the optimal route for 700 to 800 cities.</entry>
<entry level="1" type="bullet">

 Random path change algorithms are currently the state-of-the-art search algorithms and work up to 100,000 cities. The concept is quite simple: Choose a random path, choose four nearby points, swap their ways to create a new random path, while in parallel decreasing the upper bound of the path length. If repeated until a certain number of trials of random path changes fail due to the upper bound, one has found a local minimum with high probability, and further it is a global minimum with high probability (where high means that the rest probability decreases exponentially in the size of the problem - thus for 10,000 or more nodes, the chances of failure is negligible).</entry>
</list>
</p>
<p>

TSP is a touchstone for many general heuristics devised for combinatorial optimisation such as <link xlink:type="simple" xlink:href="../254/40254.xml">
genetic algorithm</link>s, <link xlink:type="simple" xlink:href="../244/172244.xml">
simulated annealing</link>, <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../937/381937.xml">
Tabu search</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
, <link xlink:type="simple" xlink:href="../615/588615.xml">
ant colony optimisation</link>, and the <link xlink:type="simple" xlink:href="../980/5767980.xml">
cross entropy method</link>.</p>

<ss3>
<st>
 Example letting the inversion operator find a good solution </st>
<p>

Suppose that the number of towns is sixty.  For a random search process, this is like having a deck of cards numbered 1, 2, 3, ... 59, 60 where the number of permutations is of the same order of magnitude as the total number of atoms in the known universe. If the hometown is not counted the number of possible tours becomes 60*59*58*...*4*3 (about 1080, i. e. a 1 followed by 80 zeros).</p>
<p>

Suppose that the salesman does not have a map showing the location of the towns, but only a deck of numbered cards, which he may permute, put in a card reader - as in early computers - and let the computer calculate the length of the tour. The probability to find the shortest tour by random permutation is about one in 1080 so, it will never happen. So, should he give up?</p>
<p>

No, by no means, evolution may be of great help to him; at least if it could be simulated on his computer. The natural evolution uses an <link xlink:type="simple" xlink:href="../073/11557073.xml">
inversion operator</link>, which - in principle - is extremely well suited for finding good solutions to the problem. A part of the card deck (<link xlink:type="simple" xlink:href="../955/7955.xml">
DNA</link>) - chosen at random - is taken out, turned in opposite direction and put back in the deck again like in the figure below with 6 towns. The hometown (nr 1) is not counted.</p>
<p>

<indent level="1">

<image width="150px" src="Rundtur.GIF">
<caption>

Rundtur.GIF
</caption>
</image>

</indent>

If this inversion takes place where the tour happens to have a loop, then the loop is opened and the salesman is guaranteed a shorter tour. The probability that this will happen is greater than 1/(60*60) for any loop if we have 60 towns, so, in a population with one million card decks it might happen 1000000/3600 = 277 times that a loop will disappear.</p>
<p>

This has been simulated with a population of 180 card decks, from which 60 decks are selected in every generation. The figure below shows a random tour at start</p>
<p>

<indent level="1">

<image width="150px" src="Slumptur.GIF">
<caption>

Slumptur.GIF
</caption>
</image>

</indent>

After about 1500 generations all loops have been removed and the length of the random tour at start has been reduced to 1/5 of the original tour. The human eye can see that some improvements can be made, but probably the random search has found a tour, which is not much longer than the shortest possible. See figure below.</p>
<p>

<indent level="1">

<image width="150px" src="Kortad-rundtur.GIF">
<caption>

Kortad-rundtur.GIF
</caption>
</image>

</indent>

In a special case when all towns are equidistantly placed along a circle, the optimal solution is found when all loops have been removed. This means that this simple random search is able to find one optimal tour out of as many as 1080. See also Goldberg, 1989.</p>

</ss3>
<ss3>
<st>
Ant colony optimization</st>
<p>

<link xlink:type="simple" xlink:href="../164/1164.xml">
Artificial intelligence</link> researcher <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<academician wordnetid="109759069" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<adult wordnetid="109605289" confidence="0.8">
<professional wordnetid="110480253" confidence="0.8">
<educator wordnetid="110045713" confidence="0.8">
<link xlink:type="simple" xlink:href="../360/1183360.xml">
Marco Dorigo</link></educator>
</professional>
</adult>
</scientist>
</academician>
</causal_agent>
</person>
</physical_entity>
 described in 1997 a method of heuristically generating "good solutions" to the TSP using a <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../615/588615.xml">
simulation of an ant colony</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
 called <it>ACS</it>.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%229%22])">9</ref> It uses some of the same ideas used by real ants to find short paths between food sources and their nest, an <link xlink:type="simple" xlink:href="../436/37436.xml">
emergent</link> behavior resulting from each ant's preference to follow <link xlink:type="simple" xlink:href="../390/105390.xml#xpointer(//*[./st=%22Trail+pheromones%22])">
trail pheromones</link> deposited by other ants. </p>
<p>

ACS sends out a large number of virtual ant agents to explore many possible routes on the map. Each ant probabilistically chooses the next city to visit based on a heuristic combining the distance to the city and the amount of virtual pheromone deposited on the edge to the city. The ants explore, depositing pheromone on each edge that they cross, until they have all completed a tour. At this point the ant which completed the shortest tour deposits virtual pheromone along its complete tour route (<it>global trail updating</it>). The amount of pheromone deposited is inversely proportional to the tour length; the shorter the tour, the more it deposits.</p>

</ss3>
</ss2>
</ss1>
<ss1>
<st>
Special cases</st>

<ss2>
<st>
Metric TSP</st>
<p>

A very natural restriction of the TSP is to require that the distances between cities form a <link xlink:type="simple" xlink:href="../467/1561467.xml">
metric</link>, i.e., they satisfy the <link xlink:type="simple" xlink:href="../941/53941.xml">
triangle inequality</link>. That is, for any 3 cities A, B and C, the distance between A and C must be at most the distance from A to B plus the distance from B to C. Most natural instances of TSP satisfy this constraint.</p>
<p>

In this case, there is a <link xlink:type="simple" xlink:href="../925/2018925.xml">
constant-factor approximation algorithm</link> due to Christofides<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2210%22])">10</ref> that always finds a tour of length at most 1.5 times the shortest tour. In the next paragraphs, we explain a weaker (but simpler) algorithm which finds a tour of length at most twice the shortest tour.</p>
<p>

The length of the <link xlink:type="simple" xlink:href="../795/41795.xml">
minimum spanning tree</link> of the network is a natural lower bound for the length of the optimal route. In the TSP with <link xlink:type="simple" xlink:href="../941/53941.xml">
triangle inequality</link> case it is possible to prove upper bounds in terms of the <link xlink:type="simple" xlink:href="../795/41795.xml">
minimum spanning tree</link> and design an algorithm that has a provable upper bound on the length of the route. The first published (and the simplest) example follows.</p>
<p>

<list>
<entry level="1" type="number">

 Construct the <link xlink:type="simple" xlink:href="../795/41795.xml">
minimum spanning tree</link>.</entry>
<entry level="1" type="number">

 Duplicate all its edges. That is, wherever there is an edge from <it>u</it> to <it>v</it>, add a second edge from <it>u</it> to <it>v</it>. This gives us an <link xlink:type="simple" xlink:href="../219/333219.xml">
Eulerian graph</link>.</entry>
<entry level="1" type="number">

 Find a <link xlink:type="simple" xlink:href="../219/333219.xml">
Eulerian cycle</link> in it. Clearly, its length is twice the length of the tree.</entry>
<entry level="1" type="number">

 Convert the Eulerian cycle into the <condition wordnetid="113920835" confidence="0.8">
<state wordnetid="100024720" confidence="0.8">
<problem wordnetid="114410605" confidence="0.8">
<difficulty wordnetid="114408086" confidence="0.8">
<link xlink:type="simple" xlink:href="../437/244437.xml">
Hamiltonian</link></difficulty>
</problem>
</state>
</condition>
 one in the following way: walk along the Eulerian cycle, and each time you are about to come into an already visited vertex, skip it and try to go to the next one (along the Eulerian cycle).</entry>
</list>
</p>
<p>

It is easy to prove that the last step works. Moreover, thanks to the triangle inequality, each skipping at Step 4 is in fact a shortcut, i.e., the length of the cycle does not increase. Hence it gives us a TSP tour no more than twice as long as the optimal one.</p>
<p>

The <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../536/3589536.xml">
Christofides algorithm</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
 follows a similar outline but combines the minimum spanning tree with a solution of another problem, minimum-weight <link xlink:type="simple" xlink:href="../797/581797.xml">
perfect matching</link>. This gives a TSP tour which is at most 1.5 times the optimal.  The Christofides algorithm was one of the first <link xlink:type="simple" xlink:href="../105/563105.xml">
approximation algorithm</link>s, and was in part responsible for drawing attention to approximation algorithms as a practical approach to intractable problems. As a matter of fact, the term "algorithm" was not commonly extended to approximation algorithms until later; the Christofides algorithm was initially referred to as the Christofides heuristic. </p>
<p>

In the special case that distances between cities are all either one or two (and thus the triangle inequality is necessarily satisfied), there is a polynomial-time approximation algorithm that finds a tour of length at most 8/7 times the optimal tour length<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2211%22])">11</ref>.  However, it is a long-standing (since 1975) open problem to improve the Christofides approximation factor of 1.5 for general metric TSP to a smaller constant. It is known that, unless <it>P</it>&nbsp;=&nbsp;<it>NP</it>, there is no polynomial-time algorithm that finds a tour of length at most 220/219=1.00456… times the optimal tour's length<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2212%22])">12</ref>. In the case of bounded metrics it is known that there is no polynomial time algorithm that constructs a tour of length at most 1/388 more than optimal, unless <it>P</it>&nbsp;=&nbsp;<it>NP</it><ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2213%22])">13</ref>.</p>

</ss2>
<ss2>
<st>
Euclidean TSP</st>
<p>

<b>Euclidean TSP</b>, or <b>planar TSP</b>, is the TSP with the distance being the ordinary <link xlink:type="simple" xlink:href="../932/53932.xml">
Euclidean distance</link>. Although the problem still remains NP-hard, it is known that there exists a subexponential time algorithm for it. Moreover, many heuristics work better.</p>
<p>

Euclidean TSP is a particular case of TSP with triangle inequality, since distances in plane obey triangle inequality. However, it seems to be easier than general TSP with triangle inequality. For example, the minimum spanning tree of the graph associated with an instance of Euclidean TSP is a <link xlink:type="simple" xlink:href="../597/1040597.xml">
Euclidean minimum spanning tree</link>, and so can be computed in expected O(<it>n</it> log <it>n</it>) time for <it>n</it> points (considerably less than the number of edges). This enables the simple 2-approximation algorithm for TSP with triangle inequality above to operate more quickly.</p>
<p>

In general, for any <it>c</it>&nbsp;&amp;gt;&nbsp;0, there is a polynomial-time algorithm that finds a tour of length at most (1&nbsp;+&nbsp;1/<it>c</it>) times the optimal for geometric instances of TSP in O(<it>n</it> (log <it>n</it>)^O(<it>c</it>)) time; this is called a <link xlink:type="simple" xlink:href="../431/666431.xml">
polynomial-time approximation scheme</link><ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2214%22])">14</ref> In practice, heuristics with weaker guarantees continue to be used.</p>

</ss2>
<ss2>
<st>
Asymmetric TSP</st>
<p>

In most cases, the distance between two nodes in the TSP network is the same in both directions. The case where the distance from A to B is not equal to the distance from B to A is called asymmetric TSP. A practical application of an asymmetric TSP is route optimisation using street-level routing (asymmetric due to one-way streets, slip-roads and motorways).</p>

<ss3>
<st>
Solving by conversion to Symmetric TSP</st>
<p>

Solving an asymmetric TSP graph can be somewhat complex. The following is a 3x3 matrix containing all possible path weights between the nodes A, B and C. One option is to turn an asymmetric matrix of size N into a <it>symmetric</it> matrix of size 2N, doubling the complexity.</p>
<p>

<indent level="1">

| class="wikitable"
</indent>
|- align="center"
|+ Asymmetric Path Weights
! !! A !! B !! C
|- align="center"
! A
| || 1 || 2
|- align="center"
! B
| 6 || || 3
|- align="center"
! C
| 5 || 4 ||
|}</p>
<p>

To double the size, each of the nodes in the graph is duplicated, creating a second <it>ghost node</it>. Using duplicate points with very low weights, such as -∞, provides a cheap route "linking" back to the real node and allowing symmetric evaluation to continue. The original 3x3 matrix shown above is visible in the bottom left and the inverse of the original in the top-right. Both copies of the matrix have had their diagonals replaced by the low-cost hop paths, represented by -∞.</p>
<p>

<indent level="1">

| class="wikitable"
</indent>
|- align="center" class="wikitable"
|+ Symmetric Path Weights
! !! A !! B !! C !! A' !! B' !! C'
|- align="center"
! A
| || || || -∞ || 6 || 5
|- align="center"
! B
| || || || 1 || -∞ || 4
|- align="center"
! C
| || || || 2 || 3 || -∞
|- align="center"
! A'
| -∞ || 1 || 2 || || ||
|- align="center"
! B'
| 6 || -∞ || 3 || || ||
|- align="center"
! C'
| 5 || 4 || -∞ || || ||
|}</p>
<p>

The original 3x3 matrix would produce two Hamiltonian cycles (a path that visits every node once), namely A-B-C-A [score 9] and A-C-B-A [score 12]. Evaluating the 6x6 symmetric version of the same problem now produces many paths, including A-A'-B-B'-C-C'-A, A-B'-C-A'-A, A-A'-B-C'-A [all score 9-∞].</p>
<p>

The important thing about each new sequence is that there will be an alternation between dashed (A',B',C') and un-dashed nodes (A,B,C) and that the link to "jump" between any related pair (A-A') is effectively free. A version of the algorithm could use any weight for the A-A' path, as long as that weight is <it>lower</it> than all other path weights present in the graph. As the path weight to "jump" must effectively be "free", the value zero (0) could be used to represent this cost — if zero is not being used for another purpose already (such as designating invalid paths). In the two examples above, non-existent paths between nodes are shown as a blank square.</p>

</ss3>
</ss2>
</ss1>
</sec>
<sec>
<st>
Human performance on TSP</st>
<p>

The TSP, in particular the <link xlink:type="simple" xlink:href="../577/118577.xml">
Euclidean</link> variant of the problem, has attracted the attention of researchers in <link xlink:type="simple" xlink:href="../961/5961.xml">
cognitive psychology</link>. It is observed that humans are able to produce good quality solutions quickly. The first issue of the <weblink xlink:type="simple" xlink:href="http://docs.lib.purdue.edu/jps/">
Journal of Problem Solving</weblink> is devoted to the topic of human performance on TSP.</p>

</sec>
<sec>
<st>
TSP path length</st>
<p>

Many quick algorithms yield approximate TSP solution for large city number. To have an idea of the precision of an approximation, one should measure the resulted path length and compare it to the exact path length. To find out the exact path length, there are 3 approaches:
<list>
<entry level="1" type="number">

 find a lower bound of it,</entry>
<entry level="1" type="number">

 find an upper bound of it with CPU time T, do extrapolation on T to infinity so result in a reasonable guess of the exact value, or</entry>
<entry level="1" type="number">

 solve the exact value without solving the city sequence.</entry>
</list>
</p>

<ss1>
<st>
Lower bound</st>
<p>

Consider N points randomly distributed in one unit square, with N&amp;gt;&amp;gt;1.
A simple lower bound of the shortest path length is <math>\frac{1}{2} \sqrt{N}</math>, obtained by considering each point connected to its nearest neighbor which is <math>\left.{\frac{1}{2}}\right/\sqrt{N}</math> distance away on average.</p>
<p>

Another lower bound is <math>\left({\frac{1}{2} + \frac{3}{4}}\right) \frac{\sqrt{N}}{2}</math>, obtained by considering each point j connected to j's nearest neighbor, and j's second nearest neighbor connected to j. Since j's nearest neighbor is <math>\left.{\frac{1}{2}}\right/\sqrt{N}</math> distance away; j's second nearest neighbor is <math>\left.{\frac{3}{4}}\right/\sqrt{N}</math> distance away on average.
<list>
<entry level="1" type="bullet">

 David S. Johnson<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2215%22])">15</ref> obtained a lower bound by experiment:</entry>
</list>

<math>0.7080\sqrt{N}+0.522</math>
<list>
<entry level="1" type="bullet">

 Christine L. Valenzuela and Antonia J. Jones <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2216%22])">16</ref> obtained a better lower bound by experiment:</entry>
</list>

<math>0.7078\sqrt{N}+0.551</math></p>

</ss1>
</sec>
<sec>
<st>
See also</st>
<p>

<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../592/140592.xml">
Assignment problem</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../564/172564.xml">
Route inspection problem</link></entry>
<entry level="1" type="bullet">

 <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../247/89247.xml">
Greedy algorithm</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../629/73629.xml">
Six degrees of separation</link></entry>
<entry level="1" type="bullet">

 <link>
Seven Bridges of Königsberg</link></entry>
</list>
</p>

</sec>
<sec>
<st>
References</st>

<p>

<reflist>
<entry id="1">
 <cite id="CITEREFBehzadModarres2002" style="font-style:normal">Behzad, Arash&#32;&amp;&#32;Modarres, Mohammad&#32;(2002),&#32;"New Efficient Transformation of the Generalized Traveling Salesman Problem into Traveling Salesman Problem",&#32;<it>Proceedings of the 15th International Conference of Systems Engineering (Las Vegas)</it></cite>&nbsp;</entry>
<entry id="2">
<link>
N.L. Biggs</link>, <link>
E.K. LLoyd</link>, and <link>
R.J. Wilson</link>, <it>Graph Theory 1736-1936</it>, Clarendon Press, Oxford, 1976.</entry>
<entry id="3">
Schrijver, Alexander. "On the history of combinatorial optimization (till 1960)," Handbook of Discrete Optimization (K. Aardal, G.L. Nemhauser, R. Weismantel, eds.), Elsevier, Amsterdam, 2005, pp. 1-68. <weblink xlink:type="simple" xlink:href="http://homepages.cwi.nl/~lex/files/histco.ps">
PS</weblink>, <weblink xlink:type="simple" xlink:href="http://homepages.cwi.nl/~lex/files/histco.pdf">
PDF</weblink></entry>
<entry id="4">
 <cite id="CITEREFHeldKarp1962" style="font-style:normal"><link>
Held, Michael</link>&#32;&amp;&#32;<link>
Karp, Richard M.</link>&#32;(1962),&#32;"A Dynamic Programming Approach to Sequencing Problems",&#32;<it>Journal of the Society for Industrial and Applied Mathematics</it>&#32;<b>10</b>(1):  196–210, <document wordnetid="106470073" confidence="0.8">
<written_communication wordnetid="106349220" confidence="0.8">
<writing wordnetid="106362953" confidence="0.8">
<link xlink:type="simple" xlink:href="../994/422994.xml">
doi</link></writing>
</written_communication>
</document>
:<weblink xlink:type="simple" xlink:href="http://dx.doi.org/10.1137%2F0110015">
10.1137/0110015</weblink></cite>&nbsp;</entry>
<entry id="5">
 <cite id="CITEREFApplegateBixbyChv.C3.A1talCook2006" style="font-style:normal">Applegate, D. L.; Bixby, R. M.; Chvátal, V.&#32;&amp;&#32;Cook&#32;(2006),&#32;<it>The Traveling Salesman Problem</it></cite>&nbsp;.</entry>
<entry id="6">
Work by David Applegate, AT&amp;T Labs - Research, Robert Bixby, <company wordnetid="108058098" confidence="0.8">
<institution wordnetid="108053576" confidence="0.8">
<link xlink:type="simple" xlink:href="../729/14176729.xml">
ILOG</link></institution>
</company>
 and Rice University, Vašek Chvátal, Concordia University, William Cook, Georgia Tech, and Keld Helsgaun, Roskilde University is discussed on their project web page hosted by Georgia Tech and last updated in June 2004, <weblink xlink:type="simple" xlink:href="http://www.tsp.gatech.edu/sweden/">
here</weblink></entry>
<entry id="7">
 <cite id="CITEREFApplegateBixbyChv.C3.A1talCook2006" style="font-style:normal">Applegate, D. L.; Bixby, R. M.; Chvátal, V.&#32;&amp;&#32;Cook&#32;(2006),&#32;<it>The Traveling Salesman Problem</it></cite>&nbsp;</entry>
<entry id="8">
A. B. Kahng and S. Reda, "Match Twice and Stitch: A New TSP Tour Construction Heuristic," Operations Research Letters, 2004, 32(6). pp. 499-509. http://www.sciencedirect.com/science?_ob=GatewayURL&amp;_method=citationSearch&amp;_uoikey=B6V8M-4CKFN5S-4&amp;_origin=SDEMFRASCII&amp;_version=1&amp;md5=04d492ab46c07b9911e230ebecd0f70d</entry>
<entry id="9">
Marco Dorigo. Ant Colonies for the Traveling Salesman Problem. IRIDIA, Université Libre de Bruxelles. IEEE Transactions on Evolutionary Computation, 1(1):53&ndash;66. 1997. http://citeseer.ist.psu.edu/86357.html</entry>
<entry id="10">
N. Christofides, <it>Worst-case analysis of a new heuristic for the traveling salesman problem</it>, Report 388, <link xlink:type="simple" xlink:href="../587/286587.xml">
Graduate School of Industrial Administration</link>, Carnegie Mellon University, 1976.</entry>
<entry id="11">
P. Berman (2006). <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<mathematician wordnetid="110301261" confidence="0.8">
<link xlink:type="simple" xlink:href="../042/2994042.xml">
M. Karpinski</link></mathematician>
</scientist>
</causal_agent>
</person>
</physical_entity>
, "<weblink xlink:type="simple" xlink:href="http://eccc.hpi-web.de/eccc-reports/2005/TR05-069/revisn01.pdf">
8/7-Approximation Algorithm for (1,2)-TSP</weblink>", Proc. 17th ACM-SIAM SODA (2006), pp. 641-648.</entry>
<entry id="12">
C.H. Papadimitriou and Santosh Vempala. (2000). "<weblink xlink:type="simple" xlink:href="http://www.cs.berkeley.edu/~christos/tsp.ps">
On the approximability of the traveling salesman problem</weblink>", <it>Proceedings of the 32nd Annual ACM Symposium on Theory of Computing</it>, 2000.</entry>
<entry id="13">
L. Engebretsen, <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<mathematician wordnetid="110301261" confidence="0.8">
<link xlink:type="simple" xlink:href="../042/2994042.xml">
M. Karpinski</link></mathematician>
</scientist>
</causal_agent>
</person>
</physical_entity>
, <it>Approximation hardness of TSP with bounded metrics</it>, Proceedings of 28th ICALP (2001), LNCS 2076, Springer 2001, pp. 201-212.</entry>
<entry id="14">
Sanjeev Arora. Polynomial Time Approximation Schemes for Euclidean Traveling Salesman and other Geometric Problems. <it>Journal of the ACM</it>, Vol.45, Issue 5, pp.753&ndash;782. ISSN:0004-5411. September 1998. http://citeseer.ist.psu.edu/arora96polynomial.html</entry>
<entry id="15">
<weblink xlink:type="simple" xlink:href="http://www.research.att.com/~dsj/papers/HKsoda.pdf">
David S. Johnson</weblink></entry>
<entry id="16">
<weblink xlink:type="simple" xlink:href="http://users.cs.cf.ac.uk/Antonia.J.Jones/Papers/EJORHeldKarp/HeldKarp.pdf">
Christine L. Valenzuela and Antonia J. Jones</weblink></entry>
</reflist>
</p>

</sec>
<sec>
<st>
 Further reading </st>
<p>

<list>
<entry level="1" type="bullet">

  <cite style="font-style:normal" class="book">D.L. Applegate, R.E. Bixby, V. Chvátal and W.J. Cook&#32;(2006). The Traveling Salesman Problem: A Computational Study.&#32;Princeton University Press. ISBN 978-0-691-12993-8.</cite>&nbsp;</entry>
<entry level="1" type="bullet">

 S. Arora (1998). "<weblink xlink:type="simple" xlink:href="http://graphics.stanford.edu/courses/cs468-06-winter/Papers/arora-tsp.pdf">
Polynomial Time Approximation Schemes for Euclidean Traveling Salesman and other Geometric Problems</weblink>". Journal of ACM, 45 (1998), pp. 753-782.</entry>
<entry level="1" type="bullet">

 William Cook, Daniel Espinoza, Marcos Goycoolea (2006). Computing with domino-parity inequalities for the TSP. INFORMS Journal on Computing. Accepted.</entry>
<entry level="1" type="bullet">

 <scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../475/4108475.xml">
Thomas H. Cormen</link></scientist>
, <scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../884/1400884.xml">
Charles E. Leiserson</link></scientist>
, <link xlink:type="simple" xlink:href="../057/68057.xml">
Ronald L. Rivest</link>, and <scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../993/3489993.xml">
Clifford Stein</link></scientist>
 (1954). <it><work wordnetid="104599396" confidence="0.8">
<product wordnetid="104007894" confidence="0.8">
<creation wordnetid="103129123" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<book wordnetid="106410904" confidence="0.8">
<publication wordnetid="106589574" confidence="0.8">
<link xlink:type="simple" xlink:href="../226/3499226.xml">
Introduction to Algorithms</link></publication>
</book>
</artifact>
</creation>
</product>
</work>
</it>, Second Edition. MIT Press and McGraw-Hill, 2001. ISBN 0-262-03293-7. Section 35.2: The traveling-salesman problem, pp. 1027–1033.</entry>
<entry level="1" type="bullet">

 G.B. Dantzig, R. Fulkerson, and S. M. Johnson, <it>Solution of a large-scale traveling salesman problem</it>, Operations Research 2 (1954), pp. 393-410.</entry>
<entry level="1" type="bullet">

  <cite style="font-style:normal" class="book"><link xlink:type="simple" xlink:href="../372/1709372.xml">
Michael R. Garey</link> and <physical_entity wordnetid="100001930" confidence="0.8">
<peer wordnetid="109626238" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<intellectual wordnetid="109621545" confidence="0.8">
<colleague wordnetid="109935990" confidence="0.8">
<alumnus wordnetid="109786338" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scholar wordnetid="110557854" confidence="0.8">
<associate wordnetid="109816771" confidence="0.8">
<link xlink:type="simple" xlink:href="../983/577983.xml">
David S. Johnson</link></associate>
</scholar>
</causal_agent>
</alumnus>
</colleague>
</intellectual>
</person>
</peer>
</physical_entity>
&#32;(1979). Computers and Intractability: A Guide to the Theory of NP-Completeness.&#32;W.H. Freeman. ISBN 0-7167-1045-5.</cite>&nbsp; A2.3: ND22&ndash;24, pp.211&ndash;212.</entry>
<entry level="1" type="bullet">

 D.E. Goldberg (1989).  Genetic Algorithms in Search, Optimization &amp; Machine Learning. Addison-Wesley, New York, 1989.</entry>
<entry level="1" type="bullet">

 G. Gutin, A. Yeo and A. Zverovich, Traveling salesman should not be greedy: domination analysis of greedy-type heuristics for the TSP. Discrete Applied Mathematics 117 (2002), 81-86.</entry>
<entry level="1" type="bullet">

  <cite style="font-style:normal" class="book">G. Gutin and A.P. Punnen&#32;(2006). The Traveling Salesman Problem and Its Variations.&#32;Springer. ISBN 0-387-44459-9.</cite>&nbsp;</entry>
<entry level="1" type="bullet">

 D.S. Johnson &amp; L.A. McGeoch (1997). <it>The Traveling Salesman Problem: A Case Study in Local Optimization</it>, Local Search in Combinatorial Optimisation, E. H. L. Aarts and J.K. Lenstra (ed), John Wiley and Sons Ltd, 1997, pp. 215-310.</entry>
<entry level="1" type="bullet">

  <cite style="font-style:normal" class="book">E. L. Lawler and Jan Karel Lenstra and <link xlink:type="simple" xlink:href="../045/12672045.xml">
A. H. G. Rinnooy Kan</link> and D. B. Shmoys&#32;(1985). The Traveling Salesman Problem: A Guided Tour of Combinatorial Optimization.&#32;John Wiley &amp; Sons. ISBN 0-471-90413-9.</cite>&nbsp;</entry>
<entry level="1" type="bullet">

 J.N. MacGregor &amp; T. Ormerod (1996). Human performance on the traveling salesman problem. Perception &amp; Psychophysics, 58(4), pp. 527–539.</entry>
<entry level="1" type="bullet">

 J. Mitchell (1999). "<weblink xlink:type="simple" xlink:href="http://citeseer.ist.psu.edu/622594.html">
Guillotine subdivisions approximate polygonal subdivisions: A simple polynomial-time approximation scheme for geometric TSP, <it>k</it>-MST, and related problems</weblink>", SIAM Journal on Computing, 28 (1999), pp. 1298–1309.</entry>
<entry level="1" type="bullet">

 S. Rao, W. Smith. <it>Approximating geometrical graphs via 'spanners' and 'banyans'.</it> Proc. 30th Annual ACM Symposium on Theory of Computing, 1998, pp. 540-550.</entry>
<entry level="1" type="bullet">

  <cite style="font-style:normal">Daniel J. Rosenkrantz and Richard E. Stearns and Phlip M. Lewis II&#32;(1977).&#32;"An Analysis of Several Heuristics for the Traveling Salesman Problem". <it>SIAM J. Comput.</it>&#32;<b>6</b>: 563–581. <document wordnetid="106470073" confidence="0.8">
<written_communication wordnetid="106349220" confidence="0.8">
<writing wordnetid="106362953" confidence="0.8">
<link xlink:type="simple" xlink:href="../994/422994.xml">
doi</link></writing>
</written_communication>
</document>
:<weblink xlink:type="simple" xlink:href="http://dx.doi.org/10.1137%2F0206041">
10.1137/0206041</weblink>.</cite>&nbsp;</entry>
<entry level="1" type="bullet">

 D. Vickers, M. Butavicius, M. Lee, &amp; A. Medvedev (2001). Human performance on visually presented traveling salesman problems. Psychological Research, 65, pp. 34–45.</entry>
</list>
</p>

</sec>
<sec>
<st>
External links</st>
<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://bjornson.inhb.de/?p=26">
Flash Demo solving random TSP's with next neighbour, nearest Insert, farthest Insert and cheapest Insert heuristics</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.dna-evolutions.com/dnaappletsample.html">
Demo applet of a evolutionary algorithm for solving TSP's and VRPTW problems</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://obitko.com/tutorials/genetic-algorithms/tsp-example.php">
Applet for TSP solving using genetic algorithm</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://neurondotnet.freehostia.com/samples/tspsolver.html">
Approximate Solution to Travelling Salesman Problem using Kohonen Self-Organizing Maps</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.iwr.uni-heidelberg.de/groups/comopt/software/TSPLIB95/">
 Gerhard Reinelt TSPLIB Databases</weblink> </entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.tsp.gatech.edu/index.html">
Travelling Salesman Problem</weblink> at <university wordnetid="108286163" confidence="0.9508927676800064">
<ranking wordnetid="114429484" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../781/9916781.xml">
Georgia Tech</link></ranking>
</university>
</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.vias.org/simulations/simusoft_travsalm.html">
Solution of the Travelling Salesman Problem using a Kohonen Map</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.e-nuts.net/en/self-organizing-map">
Kohonen Neural Network</weblink> applied to the Travelling Salesman Problem (using three dimensions).</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.tsp.gatech.edu/concorde.html">
CONCORDE</weblink> Home of the CONCORDE TSP Solver, an ANSI C library dedicated to solving the TSP problem.</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://bob.myisland.as/tsp/">
Solving TSP</weblink> through <link xlink:type="simple" xlink:href="../896/346896.xml">
BOINC</link>.</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://CRAN.R-project.org/package=TSP">
R-package TSP</weblink> Infrastructure for the travelling salesman problem for <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../707/376707.xml">
 R</link></programming_language>
.</entry>
<entry level="1" type="bullet">

 <it><weblink xlink:type="simple" xlink:href="http://demonstrations.wolfram.com/TravelingSalesmanProblem/">
Travelling Salesman Problem</weblink></it> by Jon McLoone based on a program by Stephen Wolfram, after work by Stan Wagon, <link xlink:type="simple" xlink:href="../109/594109.xml">
The Wolfram Demonstrations Project</link>.</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://tspflaming.sourceforge.net/">
TSP Flaming</weblink> Solution of the Travelling Salesman Problem using <link>
 Simulated Annealing</link>.</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://humantspsolver.com/">
Human TSP Solver</weblink> Web application for crowdsourcing instances of the TSP.</entry>
</list>
</p>




</sec>
</bdy>
</difficulty>
</problem>
</state>
</condition>
</article>
