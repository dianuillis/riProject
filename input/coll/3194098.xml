<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 20:14:34[mciao0826] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<event  confidence="0.8" wordnetid="100029378">
<rule  confidence="0.8" wordnetid="105846932">
<act  confidence="0.8" wordnetid="100030358">
<psychological_feature  confidence="0.8" wordnetid="100023100">
<procedure  confidence="0.8" wordnetid="101023820">
<activity  confidence="0.8" wordnetid="100407535">
<algorithm  confidence="0.8" wordnetid="105847438">
<header>
<title>Line segment intersection</title>
<id>3194098</id>
<revision>
<id>217017757</id>
<timestamp>2008-06-04T07:11:59Z</timestamp>
<contributor>
<username>Mistercow</username>
<id>345094</id>
</contributor>
</revision>
<categories>
<category>Geometric algorithms</category>
</categories>
</header>
<bdy>

In <link xlink:type="simple" xlink:href="../927/176927.xml">
computational geometry</link>, the <b>line segment intersection problem</b> supplies a list of line segments in the plane and asks us to determine whether any two of them intersect, or cross.<p>

Naive algorithms examine each pair of segments, but this is highly inefficient, since most pairs of segments aren't anywhere close to one another in a typical input sequence. The most common, more efficient way to solve this problem is to use a <link xlink:type="simple" xlink:href="../856/8700856.xml">
sweep line algorithm</link>, where we imagine a line sliding across the line segments and we track which line segments it intersects at each point in time using a dynamic data structure based on <link xlink:type="simple" xlink:href="../310/378310.xml">
self-balancing binary search tree</link>s.</p>

<sec>
<st>
 References </st>

<p>

<list>
<entry level="1" type="bullet">

  <cite style="font-style:normal" class="book">Mark de Berg, Marc van Kreveld, Mark Overmars, and Otfried Schwarzkopf&#32;(2000). Computational Geometry, 2nd edition,&#32;Springer. ISBN 3-540-65620-0.</cite>&nbsp; Chapter 2: Line Segment Intersection, pp.19&ndash;44.</entry>
<entry level="1" type="bullet">

 <scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../475/4108475.xml">
Thomas H. Cormen</link></scientist>
, <scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../884/1400884.xml">
Charles E. Leiserson</link></scientist>
, <link xlink:type="simple" xlink:href="../057/68057.xml">
Ronald L. Rivest</link>, and <scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../993/3489993.xml">
Clifford Stein</link></scientist>
. <it><work wordnetid="104599396" confidence="0.8">
<product wordnetid="104007894" confidence="0.8">
<creation wordnetid="103129123" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<book wordnetid="106410904" confidence="0.8">
<publication wordnetid="106589574" confidence="0.8">
<link xlink:type="simple" xlink:href="../226/3499226.xml">
Introduction to Algorithms</link></publication>
</book>
</artifact>
</creation>
</product>
</work>
</it>, Second Edition. MIT Press and McGraw-Hill, 1990. ISBN 0-262-03293-7. Section 33.2: Determining whether any pair of segments intersects, pp.934&ndash;947.</entry>
<entry level="1" type="bullet">

 J. L. Bentley and T. Ottmann., Algorithms for reporting and counting geometric intersections, IEEE Trans. Comput. C28 (1979), 643â€“647.</entry>
</list>
</p>

</sec>
<sec>
<st>
 See also </st>
<p>

<list>
<entry level="1" type="bullet">

 <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../810/16329810.xml">
Bentley-Ottmann algorithm</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</entry>
<entry level="1" type="bullet">

 <link>
Shamos-Hoey algorithm</link></entry>
</list>
</p>

</sec>
<sec>
<st>
 External links </st>

<p>

<list>
<entry level="1" type="bullet">

 Robert Pless. <weblink xlink:type="simple" xlink:href="http://www.cs.wustl.edu/~pless/506/l4.html">
Lecture 4 notes</weblink>. <university wordnetid="108286163" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../920/58920.xml">
Washington University in St. Louis</link></university>
, CS 506: Computational Geometry.</entry>
<entry level="1" type="bullet">

 A <weblink xlink:type="simple" xlink:href="http://www.lupinho.de/gishur/html/Sweeps.html">
Java applet</weblink> demonstrating the sweep line algorithm for the problem.</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.cgal.org/Manual/3.2/doc_html/cgal_manual/Sweep_line_2/Chapter_main.html">
Line segment intersection</weblink> in <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../183/11587183.xml">
CGAL</link></software>
, the Computational Geometry Algorithms Library</entry>
<entry level="1" type="bullet">

 For the simple case of testing the intersection of two line segments: <weblink xlink:type="simple" xlink:href="http://astronomy.swin.edu.au/~pbourke/geometry/lineline2d/">
Solution by Paul Bourke.</weblink></entry>
<entry level="1" type="bullet">

 A sample implementation of a computer algorithm to find the points that minimize distance between two line segments: <weblink xlink:type="simple" xlink:href="http://www.geometryalgorithms.com/Archive/algorithm_0106/algorithm_0106.htm">
http://www.geometryalgorithms.com/Archive/algorithm_0106/algorithm_0106.htm</weblink></entry>
</list>
</p>




</sec>
</bdy>
</algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</article>
