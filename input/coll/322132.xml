<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 16:48:17[mciao0828] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>Chord (distributed hash table)</title>
<id>322132</id>
<revision>
<id>239369811</id>
<timestamp>2008-09-18T20:26:46Z</timestamp>
<contributor>
<username>Sagabot</username>
<id>2230472</id>
</contributor>
</revision>
<categories>
<category>Distributed data sharing</category>
<category>Articles with example pseudocode</category>
<category>Wikipedia articles needing context</category>
<category>Wikipedia introduction cleanup</category>
<category>Distributed computing</category>
</categories>
</header>
<bdy>

<table class="metadata plainlinks ambox ">
<row>
<col>

ambox-style" style=""</col>
</row>
<row>
<col class="mbox-image"><p>

<image width="40x40px" src="Ambox_style.png">
</image>
</p>
</col>
<col style="" class="mbox-text">
 The introduction to this article provides <b>insufficient context</b> for those unfamiliar with the subject.
Please help <weblink xlink:type="simple" xlink:href="http://localhost:18088/wiki/index.php?title=Chord_%28distributed_hash_table%29&amp;action=edit">
improve the article</weblink> with a .</col>
</row>
</table>


<image location="right" width="300px" src="Chord_project.png">
</image>
<p>

<b>Chord</b> is one of the original <link xlink:type="simple" xlink:href="../141/192141.xml">
distributed hash table</link> protocols.  Chord is being developed at <link xlink:type="simple" xlink:href="../061/19061.xml">
MIT</link> and the current Chord <link xlink:type="simple" xlink:href="../661/27661.xml">
source code</link> can be downloaded and used under the <link xlink:type="simple" xlink:href="../193/19193.xml">
MIT License</link>.</p>

<sec>
<st>
Overview</st>

<p>

Using the Chord lookup protocol, node keys are arranged in a circle. The circle cannot have more than <math>2^m</math> nodes. The ring can have ids/keys ranging from 0 to <math>2^m - 1</math>.</p>
<p>

IDs and keys are assigned an m-bit identifier using what is known as <it>consistent hashing</it>. The <link xlink:type="simple" xlink:href="../672/26672.xml">
SHA-1</link> algorithm is the base hashing function for <link xlink:type="simple" xlink:href="../041/2434041.xml">
consistent hashing</link>. The <it>consistent hashing</it> is integral to the probability of the robustness and performance because both keys and IDs (<link xlink:type="simple" xlink:href="../921/14921.xml">
IP addresses</link>) are uniformly distributed and in the same identifier space.  Consistent hashing is also necessary to let nodes join and leave the network without disrupting the network.</p>
<p>

Each node has a <it>successor</it> and a <it>predecessor</it>. The <it>successor</it> to a node or key is the next node in the identifier circle when you move clockwise. The <it>predecessor</it> of a node or key is the next node in the id circle when you move counter-clockwise. If there is a node for each possible ID, the <it>successor</it> of node 2 is node 3, and the <it>predecessor</it> of node 1 is node 0; however, normally there are holes in the sequence, so, for example, the successor of node 153 may be node 167 (and nodes from 154 to 166 will not exist); in this case, the predecessor of node 167 will be node 153. 
Since the successor (or predecessor) node may disappear from the network (because of failure or departure), each node records a whole segment of the circle adjacent to it, i.e. the K nodes preceding it and the K nodes following it. one <it>successor</it> and <it>predecessor</it> are kept in a list to maintain a high probability that the successor and predecessor pointers actually point to the correct nodes after possible failure or departure of the initial successor or predecessor.</p>

</sec>
<sec>
<st>
Potential Uses</st>

<p>

<list>
<entry level="1" type="bullet">

Cooperative Mirroring: A <link xlink:type="simple" xlink:href="../118/61118.xml">
load balancing</link> mechanism by a local network hosting information available to computers outside of the local network.  This scheme could allow developers to balance the load between many computers instead of a central server to ensure availability of their product.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

Time-shared storage: In a network, once a computer joins the network its available data is distributed throughout the network for retrieval when that computer disconnects from the network.  As well as other computers' data is sent to the computer in question for offline retrieval when they are no longer connected to the network.  Mainly for nodes without the ability to connect full time to the network.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

Distributed Indices: Retrieval of files over the network within a searchable database.  eg. P2P file transfer clients.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

Large scale combinatorial searches: Keys being candidate solutions to a problem and each key mapping to the node, or computer, that is responsible for evaluating them as a solution or not. eg. Code Breaking</entry>
</list>
</p>

</sec>
<sec>
<st>
Proof sketches</st>
<p>

<b>Chord must contact at most O(log N) nodes to find a successor in an N-node network, with high probability</b></p>
<p>

Define a node n that has a query for a key k.  Suppose node p is the node that the key k maps to in Chord (n <math>\neq</math> p).  Therefore, node n forwards its query to node f, the closest predecessor of k in its finger table, call it the i<it>-th</it> interval of node n, somewhere between n and p. The new distance between f and p is then at most <math>2^{i-1}</math>.  Reiterating, each time the distance at least halves and within m steps (with m as defined above) the query will arrive at node p.  Since the identifiers are random after 'log N' forwardings, the probability is <math>{2^m}\over{N}</math> and the expected number of identifiers in this interval is 1 with high probability, so only O(log N) nodes need to be contacted.</p>
<p>

<b>If Chord keeps track of r = O(log N) predecessors/successors, then with high probability, if each node has probability of 1/4 of failing, find_successor (see below)  and find_predecessor (see below) will return the correct nodes</b></p>
<p>

Simply, the probability that all r nodes fail is <math>\left({{1}\over{4}}\right)^r = {{1}\over{N}}</math>, which is a low probability; so with high probability at least one of them is alive and the node will have the correct pointer.</p>

</sec>
<sec>
<st>
Pseudocode</st>

<p>

<b>Definitions for pseudocode:</b>
<list>
<entry level="1" type="bullet">

finger[k]: first node that succeeds <math>(n+2^{k-1})  \mbox{ mod } 2^m, 1 \leq k \leq m</math></entry>
<entry level="1" type="bullet">

successor: the next node from the node in question on the identifier ring</entry>
<entry level="1" type="bullet">

predecessor: the previous node from the node in question on the identifier ring</entry>
</list>
</p>
<p>

The pseudocode to find the <it>successor</it> node of an id is given below:</p>
<p>

// ask node n to find the successor of id
n.find_successor(id)
if (id<math>\in</math>(n, successor])
return successor;
else
// forward the query around the circle
n0 = closest_preceding_node(id);
return n0.find_successor(id);</p>
<p>

// search the local table for the highest predecessor of id
n.closest_preceding_node(id)
for i = m downto 1
if (finger[i]<math>\in</math>(n,id))
return finger[i];
return n;</p>
<p>

The pseudocode to stabilize the chord ring/circle after node joins and departures is as follows:</p>
<p>

// create a new Chord ring.
n.create()
predecessor = nil;
successor = n;</p>
<p>

// join a Chord ring containing node n'.
n.join(n')
predecessor = nil;
successor = n'.find_successor(n);</p>
<p>

// called periodically. verifies nâ€™s immediate
// successor, and tells the successor about n.
n.stabilize()
x = successor.predecessor;
if (x<math>\in</math>(n, successor))
successor = x;
successor.notify(n);</p>
<p>

// n' thinks it might be our predecessor.
n.notify(n')
if (predecessor is nil or n'<math>\in</math>(predecessor, n))
predecessor = n';</p>
<p>

// called periodically. refreshes finger table entries.
// next stores the index of the finger to fix
n.fix_fingers()
next = next + 1;
if (next &amp;gt; m)
next = 1;
finger[next] = find_successor(n+<math>2^{next-1}</math>);</p>
<p>

// called periodically. checks whether predecessor has failed.
n.check_predecessor()
if (predecessor has failed)
predecessor = nil;</p>

</sec>
<sec>
<st>
 See also </st>
<p>

<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../471/1963471.xml">
CAN</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../895/532895.xml">
Kademlia</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../273/5200273.xml">
Pastry (DHT)</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../684/5440684.xml">
Tapestry (DHT)</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../011/14947011.xml">
Koorde</link></entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../913/18860913.xml">
OverSim</link> - the overlay simulation framework</entry>
</list>
</p>

</sec>
<sec>
<st>
External links</st>
<p>

<list>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.pdos.lcs.mit.edu/chord">
The Chord Project</weblink></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.pdos.lcs.mit.edu/papers/chord:sigcomm01/">
Paper proposing Chord: "Chord: A Scalable Peer-to-peer Lookup Service for Internet Applications"</weblink></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://pdos.csail.mit.edu/papers/ton:chord/">
Updated version of the above paper</weblink></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://open-chord.sourceforge.net/">
Open Chord - An Open Source Java Implementation</weblink></entry>
</list>
</p>


</sec>
</bdy>
</article>
