<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 16:48:49[mciao0828] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>Graph (mathematics)</title>
<id>325806</id>
<revision>
<id>244476079</id>
<timestamp>2008-10-11T00:07:16Z</timestamp>
<contributor>
<username>Twri</username>
<id>7976492</id>
</contributor>
</revision>
<categories>
<category>Discrete mathematics</category>
<category>Algebraic graph theory</category>
<category>Graph theory</category>
<category>Topological graph theory</category>
</categories>
</header>
<bdy>

This article presents the essential definitions. For a more complete account see <it><link xlink:type="simple" xlink:href="../401/12401.xml">
graph theory</link></it>. For the graph of a function, see <link xlink:type="simple" xlink:href="../352/87352.xml">
graph of a function</link>.<p>

<image width="250px" src="6n-graf.svg" type="thumb">
<caption>

A <link xlink:type="simple" xlink:href="../813/325813.xml">
drawing</link> of a labeled graph on 6 vertices and 7 edges.
</caption>
</image>
</p>
<p>

In <link xlink:type="simple" xlink:href="../831/18831.xml">
mathematics</link> and <link xlink:type="simple" xlink:href="../323/5323.xml">
computer science</link>, a <b>graph</b> is the basic object of study in <link xlink:type="simple" xlink:href="../401/12401.xml">
graph theory</link>. Informally speaking, a graph is a set of objects called <b>points</b>, <b>vertices</b>, or <b>nodes</b>, connected by links called respectively <b>lines</b>, <b>edges</b>, or <b>arcs</b>. In a proper graph, which is by default <b>undirected</b>, a line from point <it>A</it> to point <it>B</it> is considered to be the same thing as a line from point <it>B</it> to point <it>A</it>. In a <b>digraph</b>, short for <b>directed graph</b>, the two directions are counted as being distinct <b>arcs</b> or <b>directed edges</b>. </p>
<p>

Typically, a graph is depicted in diagrammatic form as a set of dots (for the points, vertices, or nodes), joined by curves (for the lines or edges).</p>

<sec>
<st>
Definitions</st>
<p>

Definitions in graph theory vary. The following are some of the more basic ways of defining graphs and related mathematical structures.</p>

<ss1>
<st>
Graph</st>
<p>

<image width="125px" src="Multigraph.svg" type="thumb">
<caption>

A general example of a graph (actually, a <link xlink:type="simple" xlink:href="../970/1774970.xml">
pseudograph</link>) with three vertices and six edges.
</caption>
</image>

A <b>graph</b> or <b>undirected graph</b> <math>G</math> is an <link xlink:type="simple" xlink:href="../362/22362.xml">
ordered pair</link> <math>G := (V, E)</math> that is subject to the following conditions:
<list>
<entry level="2" type="bullet">

 <math>V</math> is a <link xlink:type="simple" xlink:href="../691/26691.xml">
set</link>, whose elements are called <b>vertices</b> or <b>nodes</b>,</entry>
<entry level="2" type="bullet">

 <math>E</math> is a <link xlink:type="simple" xlink:href="../303/305303.xml">
multiset</link> of unordered pairs of vertices (not necessarily distinct), called <b>edges</b> or <b>lines</b>.</entry>
</list>
</p>
<p>

(Note that this defines the most general type of graph. Some authors call this a <link xlink:type="simple" xlink:href="../970/1774970.xml">
multigraph</link> or <link xlink:type="simple" xlink:href="../970/1774970.xml">
pseudograph</link> and reserve the term "graph" for <link>
simple graph</link>s.)</p>
<p>

The vertices belonging to an edge are called the <b>ends</b>, <b>endpoints</b>, or <b>end vertices</b> of the edge.</p>
<p>

<math>V</math> (and hence <math>E</math>) are usually taken to be finite, and many of the well-known results are not true (or are rather different) for <b>infinite graphs</b> because many of the arguments fail in the <link>
infinite case</link>. The <b>order</b> of a graph is <math>\left|V\right|</math> (the number of vertices). A graph's <b>size</b> is <math>\left|E\right|</math>, the number of edges. The <b>degree</b> of a vertex is the number of edges that connect to it, where an edge that connects to the vertex at both ends (a <link xlink:type="simple" xlink:href="../083/1449083.xml">
loop</link>) is counted twice.</p>
<p>

The edges <math>E</math> induce a symmetric binary relation ~ on <math>V</math> which is called the <b>adjacency</b> relation of <math>G</math>. Specifically, for each edge {<it>u</it>,<it>v</it>} the vertices <it>u</it> and <it>v</it> are said to be <b>adjacent</b> to one another, which is denoted <it>u</it> ~ <it>v</it>.</p>
<p>

For an edge {<it>u</it>, <it>v</it>}, graph theorists usually use the somewhat shorter notation <it>uv</it>.</p>


</ss1>
</sec>
<sec>
<st>
Types of graphs</st>


<ss1>
<st>
Distinction in terms of the main definition </st>
<p>

As stated above, in different contexts the term "graph" may be useful to be defined with different degree on generality. Whenever it is necessary to draw a strict distinction, the following terms are used.</p>
<p>

Most commonly, in modern texts in graph theory, unless stated otherwise, the term "graph" means "undirected simple finite graph" (see the definitions below).</p>

<ss2>
<st>
Undirected graph</st>
<p>

A graph <it>G</it> = {<it>V</it>,<it>E</it>} in which edges are undirected, i.e., they are unordered pairs of vertices. </p>

</ss2>
<ss2>
<st>
Directed graph</st>

<p>

<image width="125px" src="Directed.svg" type="thumb">
<caption>

A directed graph.
</caption>
</image>
</p>
<p>

<indent level="1">

<it>Main article: <link xlink:type="simple" xlink:href="../986/19721986.xml">
Digraph (mathematics)</link></it>
</indent>
A <b>directed graph</b> or <b>digraph</b> <math>G</math> is an ordered pair <math>G := (V, A)</math> with
<list>
<entry level="1" type="bullet">

 <math>V</math> is a <link xlink:type="simple" xlink:href="../691/26691.xml">
set</link>, whose elements are called <b>vertices</b> or <b>nodes</b>,</entry>
<entry level="1" type="bullet">

 <math>A</math> is a set of ordered pairs of vertices, called <b>directed edges</b>, <b>arcs</b>, or <b>arrows</b>.</entry>
</list>
</p>
<p>

An arc <math>e = (x, y)</math> is considered to be directed <b>from</b> <math>x</math> <b>to</b> <math>y</math>; <math>y</math> is called the <b>head</b> and <math>x</math> is called the <b>tail</b> of the arc; <math>y</math> is said to be a <b>direct successor</b> of <math>x</math>, and <math>x</math> is said to be a <b>direct predecessor</b> of <math>y</math>. If a <link xlink:type="simple" xlink:href="../889/638889.xml">
path</link> leads from <math>x</math> to <math>y</math>, then <math>y</math> is said to be a <b>successor</b> of <math>x</math>, and <math>x</math> is said to be a <b>predecessor</b> of <math>y</math>. The arc <math>(y, x)&amp;lt;/math &amp;gt; is called the arc &amp;lt;math &amp;gt;(x, y)&amp;lt;/math &amp;gt; '''inverted'''.

A directed graph ''G'' is called '''symmetric''' if, for every arc that belongs to ''G'', the corresponding inverted arc also belongs to ''G''. A symmetric loopless directed graph is equivalent to an undirected graph with the pairs of inverted arcs replaced with edges; thus the number of edges is equal to the number of arcs halved.

A variation on this definition is the '''oriented graph''', which is a graph (or multigraph; see below) with an orientation or direction assigned to each of its edges. A distinction between a directed graph and an oriented ''simple'' graph is that if &amp;lt;math&amp;gt;x</math> and <math>y</math> are vertices, a directed graph allows both <math>(x, y)</math> and <math>(y, x)</math> as edges, while only one is permitted in an oriented graph. </p>

</ss2>
<ss2>
<st>
Mixed graph</st>
<p>

A <b>mixed graph</b> <it>G</it> is a graph in which some edges may be directed and some may be undirected.
It is written as an ordered triple <it>G</it> := (<it>V, E, A</it>) with <it>V</it>, <it>E</it>, and <it>A</it> defined as above.
Directed and undirected graphs are special cases.</p>

</ss2>
<ss2>
<st>
Multigraph</st>
<p>

A <link xlink:type="simple" xlink:href="../083/1449083.xml">
loop</link> is an edge (directed or undirected) which starts and ends on the same vertex; these may be permitted or not permitted according to the application. In this context, an edge with two different ends is called a <b>link</b>.</p>
<p>

The term "<link xlink:type="simple" xlink:href="../970/1774970.xml">
multigraph</link>" is generally understood to mean that multiple edges (and sometimes loops) are allowed. Where graphs are defined so as to <it>allow</it> loops and multiple edges, a multigraph is often defined to mean a graph <it>without</it> loops,<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref> however, where graphs are defined so as to <it>disallow</it> loops and multiple edges, the term is often defined to mean a "graph" which can have both multiple edges <it>and</it> loops,<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%222%22])">2</ref> although many use the term "<link xlink:type="simple" xlink:href="../970/1774970.xml">
pseudograph</link>" for this meaning.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%223%22])">3</ref></p>

</ss2>
<ss2>
<st>
Simple graph</st>
<p>

<image width="125px" src="Undirected.svg" type="thumb">
<caption>

A simple graph with three vertices and three edges. Each vertex has degree two, so this is also a regular graph.
</caption>
</image>

As opposed to a multigraph, a simple graph is an undirected graph that has no <link xlink:type="simple" xlink:href="../083/1449083.xml">
self-loops</link> and no more than one edge between any two different vertices. In a simple graph the edges of the graph form a set (rather than a <link xlink:type="simple" xlink:href="../303/305303.xml">
multiset</link>) and each edge is a pair of <it>distinct</it> vertices. In a simple graph with <it>p</it> vertices every vertex has a degree that is less than <it>p</it> (the inverse, however, is not true - there exist non-simple graphs with <it>p</it> vertices in which every vertex has a degree smaller than <it>p</it>).</p>

</ss2>
<ss2>
<st>
Weighted graph</st>
<p>

A graph is a weighted graph if a number (weight) is assigned to each edge. Such weights might represent, for example, costs, lengths or capacities, etc. depending on the problem.</p>
<p>

The weight of the graph is sum of the weights given to all edges.</p>

</ss2>
<ss2>
<st>
Half-edges, loose edges</st>
<p>

In exceptional situations it is even necessary to have edges with only one end, called <b>half-edges</b>, or no ends (<b>loose edges</b>); see for example <link xlink:type="simple" xlink:href="../618/2472618.xml">
signed graph</link>s and <link xlink:type="simple" xlink:href="../880/2472880.xml">
biased graph</link>s.</p>

</ss2>
</ss1>
<ss1>
<st>
Important graph classes</st>

<ss2>
<st>
Regular graph</st>

<p>

<indent level="1">

<it>Main article: <family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../821/85821.xml">
Regular graph</link></family>
</it>
</indent>
A regular graph is a graph where each vertex has the same number of neighbors, i.e., every vertex has the same degree or valency. A regular graph with vertices of degree <it>k</it> is called a <it>k</it>‑regular graph or regular graph of degree <it>k</it>.</p>

</ss2>
<ss2>
<st>
Complete graph</st>

<p>

<indent level="1">

<it>Main article: <graph wordnetid="107000195" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../816/85816.xml">
Complete graph</link></graph>
</it>
</indent>
Complete graphs have the feature that each pair of vertices has an edge connecting them.</p>

</ss2>
<ss2>
<st>
Finite and infinite graphs</st>
<p>

A finite graph is a graph <it>G</it> = <it>V</it>,<it>E</it>&amp;gt; such that <it>V</it>(<it>G</it>) and <it>E</it>(<it>G</it>) are <link xlink:type="simple" xlink:href="../742/11742.xml">
finite set</link>s. An infinite graph is the one with sets of vertices or edges or both <idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<link xlink:type="simple" xlink:href="../679/142679.xml">
infinite</link></concept>
</idea>
.</p>
<p>

Most commonly in graph theory it is implied that the discussed graphs are finite, i.e., finite graphs are called simply "graphs", while the infinite graphs are called so in full.</p>

</ss2>
<ss2>
<st>
Graph classes in terms of connectivity</st>

<p>

<indent level="1">

<it>Main article: <invariant wordnetid="105850432" confidence="0.8">
<idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<property wordnetid="105849040" confidence="0.8">
<feature wordnetid="105849789" confidence="0.8">
<link xlink:type="simple" xlink:href="../492/1614492.xml">
Connectivity (graph theory)</link></feature>
</property>
</concept>
</idea>
</invariant>
</it>
</indent>

In an <link xlink:type="simple" xlink:href="../806/325806.xml">
undirected graph</link> <it>G</it>, two <link xlink:type="simple" xlink:href="../899/638899.xml">
vertices</link> <it>u</it> and <it>v</it> are called <b>connected</b> if <it>G</it> contains a <link xlink:type="simple" xlink:href="../889/638889.xml">
path</link> from <it>u</it> to <it>v</it>. Otherwise, they are called <b>disconnected</b>. A <link xlink:type="simple" xlink:href="../806/325806.xml">
graph</link> is called <b>connected</b> if every pair of distinct vertices in the graph is connected and <b>disconnected</b> otherwise. </p>
<p>

A graph is called <b><it>k</it></b><b>-vertex-connected</b> or <b><it>k</it></b><b>-edge-connected</b> if removal of <it>k</it> or more vertices (respectively, edges) makes the graph disconnected. A <it>k</it>-vertex-connected graph is often called simply <b><it>k</it></b><b>-connected</b>.</p>
<p>

A <link xlink:type="simple" xlink:href="../986/19721986.xml">
directed graph</link> is called <b>weakly connected</b> if replacing all of its directed edges with undirected edges produces a connected (undirected) graph.  It is <b>strongly connected</b> or <b>strong</b> if it contains a directed path from <it>u</it> to <it>v</it> and a directed path from <it>v</it> to <it>u</it> for every pair of vertices <it>u</it>,<it>v</it>.</p>

</ss2>
</ss1>
</sec>
<sec>
<st>
Properties of graphs</st>
<p>

<indent level="1">

<it>For more definitions see <work wordnetid="104599396" confidence="0.8">
<product wordnetid="104007894" confidence="0.8">
<creation wordnetid="103129123" confidence="0.8">
<glossary wordnetid="106420781" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<wordbook wordnetid="106418693" confidence="0.8">
<book wordnetid="106410904" confidence="0.8">
<reference_book wordnetid="106417598" confidence="0.8">
<publication wordnetid="106589574" confidence="0.8">
<link xlink:type="simple" xlink:href="../802/325802.xml">
Glossary of graph theory</link></publication>
</reference_book>
</book>
</wordbook>
</artifact>
</glossary>
</creation>
</product>
</work>
.</it>
</indent>

Two edges of a graph are called <b>adjacent</b> (sometimes <b>coincident</b>) if they share a common vertex. Two arrows of a directed graph are called <b>consecutive</b> if the head of the first one is at the <link xlink:type="simple" xlink:href="../235/4940235.xml">
nock</link> (notch end) of the second one. Similarly, two vertices are called <b>adjacent</b> if they share a common edge (<b>consecutive</b> if they are at the notch and at the head of an arrow), in which case the common edge is said to <b>join</b> the two vertices. An edge and a vertex on that edge are called <b>incident</b>.</p>
<p>

The graph with only one vertex and no edges is called the <b>trivial graph</b>. A graph with only vertices and no edges is known as an <b>edgeless graph</b>. The graph with no vertices and no edges is sometimes called the <b>null graph</b> or <b>empty graph</b>, but not all mathematicians allow this object.</p>
<p>

In a <b>weighted</b> graph or digraph, each edge is associated with some value, variously called its <it>cost</it>, <it>weight</it>, <it>length</it> or other term depending on the application; such graphs arise in many contexts, for example in <link>
optimal routing problem</link>s such as the <link xlink:type="simple" xlink:href="../248/31248.xml">
traveling salesman problem</link>.</p>
<p>

Normally, the vertices of a graph, by their nature as elements of a set, are distinguishable. This kind of graph may be called <b>vertex-labeled</b>. However, for many questions it is better to treat vertices as indistinguishable; then the graph may be called <b>unlabeled</b>. (Of course, the vertices may be still distinguishable by the properties of the graph itself, e.g., by the numbers of incident edges). The same remarks apply to edges, so that graphs which have labeled edges are called <b>edge-labeled</b> graphs. Graphs with labels attached to edges or vertices are more generally designated as <b>labeled</b>. Consequently, graphs in which vertices are indistinguishable and edges are indistinguishable are called <it>unlabeled</it>. (Note that in the literature the term <it>labeled</it> may apply to other kinds of labeling, besides that which serves only to distinguish different vertices or edges.)</p>

</sec>
<sec>
<st>
Examples</st>
<p>

<image width="150px" src="6n-graf.svg" type="thumb">
<caption>

A graph with six nodes.
</caption>
</image>

The picture is a graphic representation of the following graph
<list>
<entry level="1" type="bullet">

 <math>V := \{1, 2, 3, 4, 5, 6\}</math></entry>
<entry level="1" type="bullet">

 <math>E := \{\{1, 2\}, \{1, 5\}, \{2, 3\}, \{2, 5\}, \{3, 4\}, \{4, 5\}, \{4, 6\}\}</math></entry>
</list>
</p>
<p>

The fact that vertex 1 is adjacent to vertex 2 is sometimes denoted by 1 ~ 2.
<list>
<entry level="1" type="bullet">

 In <link xlink:type="simple" xlink:href="../869/5869.xml">
category theory</link> a <link xlink:type="simple" xlink:href="../759/53759.xml">
category</link> can be considered a directed <link xlink:type="simple" xlink:href="../970/1774970.xml">
multigraph</link> with the objects as vertices and the <link xlink:type="simple" xlink:href="../520/19520.xml">
morphism</link>s as directed edges. The <link xlink:type="simple" xlink:href="../987/10987.xml">
functor</link>s between categories induce then some, but not necessarily all, of the <link xlink:type="simple" xlink:href="../328/676328.xml">
digraph morphism</link>s.</entry>
<entry level="1" type="bullet">

 In <link xlink:type="simple" xlink:href="../323/5323.xml">
computer science</link> directed graphs are used to represent <link xlink:type="simple" xlink:href="../931/10931.xml">
finite state machine</link>s and many other discrete structures.</entry>
<entry level="1" type="bullet">

 A <link xlink:type="simple" xlink:href="../931/3931.xml">
binary relation</link> <math>R</math> on a set <math>X</math> is a directed graph. Two edges <math>x</math>, <math>y</math> of <math>X</math> are connected by an arrow if <math>xRy</math>.</entry>
</list>
</p>

</sec>
<sec>
<st>
Important graphs</st>
<p>

Basic examples are:
<list>
<entry level="1" type="bullet">

 In a <link xlink:type="simple" xlink:href="../816/85816.xml">
complete graph</link> each pair of vertices is joined by an edge, that is, the graph contains all possible edges.</entry>
<entry level="1" type="bullet">

 In a <link xlink:type="simple" xlink:href="../431/244431.xml">
bipartite graph</link>, the vertices can be divided into two sets, <it>W</it> and <it>X</it>, so that every edge has one vertex in each of the two sets.</entry>
<entry level="1" type="bullet">

 In a <link xlink:type="simple" xlink:href="../320/525320.xml">
complete bipartite graph</link>, the vertex set is the union of two disjoint subsets, <it>W</it> and <it>X</it>, so that every vertex in <it>W</it> is adjacent to every vertex in <it>X</it> but there are no edges within <it>W</it> or <it>X</it>.</entry>
<entry level="1" type="bullet">

 In a <link xlink:type="simple" xlink:href="../889/638889.xml">
path</link> of length <it>n</it>, the vertices can be listed in order, <it>v</it>0, <it>v</it>1, ..., <it>v</it>n, so that the edges are <it>v</it>i&amp;minus;1<it>v</it>i for each <it>i</it> = 1, 2, ..., <it>n</it>.</entry>
<entry level="1" type="bullet">

 A <graph wordnetid="107000195" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../962/878962.xml">
cycle</link></graph>
 or <it>circuit</it> of length <it>n</it> is a closed path without self-intersections; equivalently, it is a <invariant wordnetid="105850432" confidence="0.8">
<idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<property wordnetid="105849040" confidence="0.8">
<feature wordnetid="105849789" confidence="0.8">
<link xlink:type="simple" xlink:href="../492/1614492.xml">
connected</link></feature>
</property>
</concept>
</idea>
</invariant>
 graph with degree 2 at every vertex. Its vertices can be named <it>v</it>1, ..., <it>v</it>n so that the edges are <it>v</it>i&amp;minus;1<it>vi</it> for each <it>i</it> = 2,...,<it>n</it> and <it>v</it>n<it>v</it>1</entry>
<entry level="1" type="bullet">

 A <link xlink:type="simple" xlink:href="../314/24314.xml">
planar graph</link> can be drawn in a plane with no crossing edges (i.e., <it>embedded</it> in a plane).</entry>
<entry level="1" type="bullet">

 A <it>forest</it> is a graph with no cycles.</entry>
<entry level="1" type="bullet">

 A <link xlink:type="simple" xlink:href="../560/48560.xml">
tree</link> is a connected graph with no cycles.</entry>
</list>
</p>
<p>

More advanced kinds of graphs are:
<list>
<entry level="1" type="bullet">

 The <graph wordnetid="107000195" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../926/194926.xml">
Petersen graph</link></graph>
 and its generalizations</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../531/670531.xml">
Perfect graph</link>s</entry>
<entry level="1" type="bullet">

 <graph wordnetid="107000195" confidence="0.8">
<family wordnetid="108078020" confidence="0.8">
<visual_communication wordnetid="106873252" confidence="0.8">
<link xlink:type="simple" xlink:href="../666/1175666.xml">
Cograph</link></visual_communication>
</family>
</graph>
s</entry>
<entry level="1" type="bullet">

 Other graphs with large <link xlink:type="simple" xlink:href="../186/15094186.xml">
automorphism groups</link>: <family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../175/581175.xml">
vertex-transitive</link></family>
, <family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../871/1671871.xml">
arc-transitive</link></family>
, and <link xlink:type="simple" xlink:href="../222/7768222.xml">
distance-transitive graph</link>s.</entry>
<entry level="1" type="bullet">

 <family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../856/1399856.xml">
Strongly regular graph</link></family>
s and their generalization <link xlink:type="simple" xlink:href="../943/7768943.xml">
distance-regular graph</link>s.</entry>
</list>
</p>

</sec>
<sec>
<st>
Operations on graphs</st>

<p>

<indent level="1">

<it>Main article: <link xlink:type="simple" xlink:href="../244/9938244.xml">
Operations on graphs</link></it>
</indent>

There are several operations that produce new graphs from old ones. They may be separated into three categories
<list>
<entry level="1" type="bullet">

 Elementary operations, sometimes called "editing operations" on graphs, which create a new graph from the original one by a simple, local change, such as addition or deletion of a vertex or an edge, merging and splitting of vertices, etc.</entry>
<entry level="1" type="bullet">

 Unary operations, which create a significantly new graph from the old one. Examples:</entry>
<entry level="2" type="bullet">

 <operation wordnetid="114008806" confidence="0.8">
<family wordnetid="108078020" confidence="0.8">
<state wordnetid="100024720" confidence="0.8">
<action wordnetid="114006945" confidence="0.8">
<class wordnetid="107997703" confidence="0.8">
<collection wordnetid="107951464" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<link xlink:type="simple" xlink:href="../231/675231.xml">
Line graph</link></group>
</collection>
</class>
</action>
</state>
</family>
</operation>
</entry>
<entry level="2" type="bullet">

 <process wordnetid="105701363" confidence="0.8">
<operation wordnetid="114008806" confidence="0.8">
<thinking wordnetid="105770926" confidence="0.8">
<explanation wordnetid="105793000" confidence="0.8">
<state wordnetid="100024720" confidence="0.8">
<action wordnetid="114006945" confidence="0.8">
<theory wordnetid="105989479" confidence="0.8">
<higher_cognitive_process wordnetid="105770664" confidence="0.8">
<link xlink:type="simple" xlink:href="../864/2536864.xml">
Dual graph</link></higher_cognitive_process>
</theory>
</action>
</state>
</explanation>
</thinking>
</operation>
</process>
</entry>
<entry level="2" type="bullet">

 <operation wordnetid="114008806" confidence="0.8">
<state wordnetid="100024720" confidence="0.8">
<action wordnetid="114006945" confidence="0.8">
<link xlink:type="simple" xlink:href="../649/1175649.xml">
Complement graph</link></action>
</state>
</operation>
</entry>
<entry level="1" type="bullet">

 Binary operations, which create new graph from two initial graphs. Examples:</entry>
<entry level="2" type="bullet">

 <operation wordnetid="114008806" confidence="0.8">
<state wordnetid="100024720" confidence="0.8">
<action wordnetid="114006945" confidence="0.8">
<link xlink:type="simple" xlink:href="../459/9938459.xml">
Disjoint union of graphs</link></action>
</state>
</operation>
</entry>
<entry level="2" type="bullet">

 <artifact wordnetid="100021939" confidence="0.8">
<merchandise wordnetid="103748886" confidence="0.8">
<commodity wordnetid="103076708" confidence="0.8">
<link xlink:type="simple" xlink:href="../852/2856852.xml">
Cartesian product of graphs</link></commodity>
</merchandise>
</artifact>
</entry>
<entry level="2" type="bullet">

 <artifact wordnetid="100021939" confidence="0.8">
<merchandise wordnetid="103748886" confidence="0.8">
<commodity wordnetid="103076708" confidence="0.8">
<link xlink:type="simple" xlink:href="../799/2861799.xml">
Tensor product of graphs</link></commodity>
</merchandise>
</artifact>
</entry>
<entry level="2" type="bullet">

 <operation wordnetid="114008806" confidence="0.8">
<state wordnetid="100024720" confidence="0.8">
<action wordnetid="114006945" confidence="0.8">
<link xlink:type="simple" xlink:href="../014/11494014.xml">
Strong product of graphs</link></action>
</state>
</operation>
</entry>
<entry level="2" type="bullet">

 <artifact wordnetid="100021939" confidence="0.8">
<merchandise wordnetid="103748886" confidence="0.8">
<commodity wordnetid="103076708" confidence="0.8">
<link xlink:type="simple" xlink:href="../731/6026731.xml">
Lexicographic product of graphs</link></commodity>
</merchandise>
</artifact>
</entry>
</list>
</p>

</sec>
<sec>
<st>
Generalizations</st>
<p>

In a <link xlink:type="simple" xlink:href="../535/232535.xml">
hypergraph</link>, an edge can join more than two vertices.</p>
<p>

An undirected graph can be seen as a <link xlink:type="simple" xlink:href="../686/252686.xml">
simplicial complex</link> consisting of 1-<link xlink:type="simple" xlink:href="../781/39781.xml">
simplices</link> (the edges) and 0-simplices (the vertices). As such, complexes are generalizations of graphs since they allow for higher-dimensional simplices.</p>
<p>

Every graph gives rise to a <link xlink:type="simple" xlink:href="../321/244321.xml">
matroid</link>.</p>
<p>

In <link xlink:type="simple" xlink:href="../858/19858.xml">
model theory</link>, a graph is just a <link xlink:type="simple" xlink:href="../928/4055928.xml">
structure</link>. But in that case, there is no limitation on the number of edges: it can be any <link xlink:type="simple" xlink:href="../173/6173.xml">
cardinal number</link>.</p>
<p>

In <link xlink:type="simple" xlink:href="../353/149353.xml">
computational biology</link>, <link xlink:type="simple" xlink:href="../966/18411966.xml">
power graph analysis</link> introduces power graphs as an alternative representation of undirected graphs.</p>

</sec>
<sec>
<st>
Notes</st>

<p>

<reflist>
<entry id="1">
 For example, see Balakrishnan, p. 1, Gross (2003), p. 4, and Zwillinger, p. 220.</entry>
<entry id="2">
For example, see. Bollobas, p. 7 and Diestel, p. 25.</entry>
<entry id="3">
Gross (1998), p. 3, Gross (2003), p. 205, Harary, p.10, and Zwillinger, p. 220.</entry>
</reflist>
</p>


</sec>
<sec>
<st>
References</st>
<p>

<list>
<entry level="1" type="bullet">

 Balakrishnan, V. K., <it>Graph Theory</it>, McGraw-Hill; 1st edition (February 1, 1997). ISBN 0-07-005489-4.</entry>
<entry level="1" type="bullet">

 <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<theorist wordnetid="110706812" confidence="0.8">
<intellectual wordnetid="109621545" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<mathematician wordnetid="110301261" confidence="0.8">
<link xlink:type="simple" xlink:href="../760/5893760.xml">
Berge, C.</link></mathematician>
</scientist>
</causal_agent>
</intellectual>
</theorist>
</person>
</physical_entity>
, <it>Théorie des graphes et ses applications</it>. Collection Universitaire de Mathématiques, II    Dunod, Paris 1958, viii+277 pp. (English edition, Wiley 1961; Methuen &amp; Co, New York 1962;    Russian, Moscow 1961; Spanish, Mexico 1962; Roumanian, Bucharest 1969; Chinese, Shanghai    1963; Second printing of the 1962 first English edition. Dover, New York 2001)</entry>
<entry level="1" type="bullet">

 Bollobas, Bela, <it>Modern Graph Theory</it>, Springer; 1st edition (August 12, 2002). ISBN 0-387-98488-7.</entry>
<entry level="1" type="bullet">

 Bang-Jensen, J. and Gutin, G., "Digraphs: Theory, Algorithms and Applications", Springer, 2000, free at www.cs.rhul.ac.uk/books/dbook/</entry>
<entry level="1" type="bullet">

 <cite id="CITEREFDiestel2005" style="font-style:normal">Diestel, Reinhard&#32;(2005),&#32;<it><weblink xlink:type="simple" xlink:href="http://www.math.uni-hamburg.de/home/diestel/books/graph.theory/GraphTheoryIII.pdf">
Graph Theory</weblink></it>&#32;(3rd ed.), Berlin, New York: Springer-Verlag, ISBN 978-3-540-26183-4, </cite>&nbsp;.</entry>
<entry level="1" type="bullet">

 Gross, Jonathan L., and Yellen, Jay, <it>Graph Theory and Its Applications</it>, CRC Press (December 30, 1998). ISBN 0-8493-3982-0.</entry>
<entry level="1" type="bullet">

 Gross, Jonathan L., and Yellen, Jay (eds.), <it>Handbook of Graph Theory</it>. CRC (December 29, 2003). ISBN 1-58488-090-2.</entry>
<entry level="1" type="bullet">

 Harary, Frank, <it>Graph Theory</it>, Addison Wesley Publishing Company (January 1995). ISBN 0-201-41033-8.</entry>
<entry level="1" type="bullet">

 Zwillinger, Daniel, <it>CRC Standard Mathematical Tables and Formulae</it>, Chapman &amp; Hall/CRC; 31st edition (November 27, 2002). ISBN 1-58488-291-3.</entry>
</list>
</p>

</sec>
<sec>
<st>
See also</st>

<p>

<list>
<entry level="1" type="bullet">

 <structure wordnetid="104341686" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<link xlink:type="simple" xlink:href="../463/244463.xml">
Adjacency matrix</link></artifact>
</structure>
</entry>
<entry level="1" type="bullet">

 <process wordnetid="105701363" confidence="0.8">
<operation wordnetid="114008806" confidence="0.8">
<thinking wordnetid="105770926" confidence="0.8">
<explanation wordnetid="105793000" confidence="0.8">
<state wordnetid="100024720" confidence="0.8">
<action wordnetid="114006945" confidence="0.8">
<theory wordnetid="105989479" confidence="0.8">
<higher_cognitive_process wordnetid="105770664" confidence="0.8">
<link xlink:type="simple" xlink:href="../864/2536864.xml">
Dual graph</link></higher_cognitive_process>
</theory>
</action>
</state>
</explanation>
</thinking>
</operation>
</process>
</entry>
<entry level="1" type="bullet">

 <work wordnetid="104599396" confidence="0.8">
<product wordnetid="104007894" confidence="0.8">
<creation wordnetid="103129123" confidence="0.8">
<glossary wordnetid="106420781" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<wordbook wordnetid="106418693" confidence="0.8">
<book wordnetid="106410904" confidence="0.8">
<reference_book wordnetid="106417598" confidence="0.8">
<publication wordnetid="106589574" confidence="0.8">
<link xlink:type="simple" xlink:href="../802/325802.xml">
Glossary of graph theory</link></publication>
</reference_book>
</book>
</wordbook>
</artifact>
</glossary>
</creation>
</product>
</work>
</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../931/557931.xml">
Graph (data structure)</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../813/325813.xml">
Graph drawing</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../399/708399.xml#xpointer(//*[./st=%22Graph+theory%22])">
Important publications in graph theory</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../167/350167.xml">
List of graph theory topics</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../409/766409.xml">
Network theory</link></entry>
</list>
</p>


</sec>
<sec>
<st>
External links</st>
<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.utm.edu/departments/math/graph/">
Graph theory tutorial</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://students.ceid.upatras.gr/~papagel/project/contents.htm">
Some graph theory algorithm animations</weblink></entry>
<entry level="2" type="bullet">

 <it>Step through the algorithm to understand it.''</it></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.nlsde.buaa.edu.cn/~kexu/benchmarks/graph-benchmarks.htm">
Challenging Benchmarks for Maximum Clique, Maximum Independent Set, Minimum Vertex Cover and Vertex Coloring</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.aisee.com/graphs/">
Image gallery : Some real-life graphs</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.visualcomplexity.com">
VisualComplexity.com</weblink> &mdash; A visual exploration on mapping complex networks</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://ttt.upv.es/~arodrigu/grafos/index.htm">
Grafos Spanish copyleft software</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://jgaa.info/accepted/2004/BoyerMyrvold2004.8.3.pdf">
Edge Addition Planarity Algorithm</weblink> &mdash; Online version of a paper that describes the Boyer-Myrvold planarity algorithm.</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://jgaa.info/accepted/2004/BoyerMyrvold2004.8.3/planarity.zip">
Edge Addition Planarity Algorithm Source Code</weblink> &mdash; Free C source code for reference implementation of Boyer-Myrvold planarity algorithm, which provides both a combinatorial planar embedder and Kuratowski subgraph isolator.</entry>
<entry level="1" type="bullet">

 [https://lemon.cs.elte.hu/ Library of Efficient Models and Optimization in Networks] &mdash; An open source C++ template library aimed at combinatorial optimization tasks, especially those working with graphs and networks.</entry>
<entry level="1" type="bullet">

  <cite id="Reference-Mathworld-Graph"><physical_entity wordnetid="100001930" confidence="0.8">
<communicator wordnetid="109610660" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<intellectual wordnetid="109621545" confidence="0.8">
<encyclopedist wordnetid="110055566" confidence="0.8">
<compiler wordnetid="109946957" confidence="0.8">
<alumnus wordnetid="109786338" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<writer wordnetid="110794014" confidence="0.8">
<mathematician wordnetid="110301261" confidence="0.8">
<scholar wordnetid="110557854" confidence="0.8">
<link xlink:type="simple" xlink:href="../189/836189.xml">
Eric W. Weisstein</link></scholar>
</mathematician>
</writer>
</scientist>
</causal_agent>
</alumnus>
</compiler>
</encyclopedist>
</intellectual>
</person>
</communicator>
</physical_entity>
, <it><weblink xlink:type="simple" xlink:href="http://mathworld.wolfram.com/Graph.html">
Graph</weblink></it> at <computer wordnetid="103082979" confidence="0.8">
<work wordnetid="104599396" confidence="0.8">
<creation wordnetid="103129123" confidence="0.8">
<machine wordnetid="103699975" confidence="0.8">
<reference_book wordnetid="106417598" confidence="0.8">
<publication wordnetid="106589574" confidence="0.8">
<encyclopedia wordnetid="106427387" confidence="0.8">
<product wordnetid="104007894" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<book wordnetid="106410904" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<web_site wordnetid="106359193" confidence="0.8">
<link xlink:type="simple" xlink:href="../235/374235.xml">
MathWorld</link></web_site>
</device>
</book>
</instrumentality>
</artifact>
</product>
</encyclopedia>
</publication>
</reference_book>
</machine>
</creation>
</work>
</computer>
.</cite></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://rtime.felk.cvut.cz/scheduling-toolbox">
TORSCHE Scheduling Toolbox for Matlab</weblink> &mdash; A freely available toolbox of scheduling and graph algorithms.</entry>
</list>
</p>


</sec>
</bdy>
</article>
