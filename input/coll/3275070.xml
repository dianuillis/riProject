<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 20:16:28[mciao0825] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<algorithm  confidence="0.9511911446218017" wordnetid="105847438">
<header>
<title>Gilbert–Johnson–Keerthi distance algorithm</title>
<id>3275070</id>
<revision>
<id>222332635</id>
<timestamp>2008-06-28T19:47:31Z</timestamp>
<contributor>
<username>Abdull</username>
<id>73235</id>
</contributor>
</revision>
<categories>
<category>Convex geometry</category>
<category>Geometric algorithms</category>
</categories>
</header>
<bdy>

The <b>Gilbert–Johnson–Keerthi distance <link xlink:type="simple" xlink:href="../775/775.xml">
algorithm</link></b> is a method of determining the minimum distance between two <link xlink:type="simple" xlink:href="../292/6292.xml">
convex set</link>s. Unlike many other distance algorithms, it does not require that the geometry data be stored in any specific format, but instead relies solely on a <link xlink:type="simple" xlink:href="../013/381013.xml">
support function</link> to iteratively generate closer <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../458/349458.xml">
simplexes</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
 to the correct answer using the <link xlink:type="simple" xlink:href="../105/504105.xml">
Minkowski sum</link> (CSO) of two convex shapes.<p>

"Enhanced GJK" algorithms use edge information to speed up the algorithm by following edges when looking for the next simplex.  This improves performance substantially for polytopes with large numbers of vertices.</p>
<p>

GJK algorithms are often used incrementally in simulation systems and video games. In this mode, the final simplex from a previous solution is used as the initial guess in the next iteration, or "frame".  If the positions in the new frame are close to those in the old frame, the algorithm will converge in one or two iterations. This yields collision detection systems which operate in near-constant time.</p>
<p>

The algorithm's stability, speed, and small storage footprint make it popular for realtime <link xlink:type="simple" xlink:href="../552/171552.xml">
collision detection</link>, especially in <link xlink:type="simple" xlink:href="../385/1453385.xml">
physics engine</link>s for <link xlink:type="simple" xlink:href="../363/5363.xml">
video games</link>.</p>

<sec>
<st>
External links</st>
<p>

<list>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://ieeexplore.ieee.org/xpl/freeabs_all.jsp?&amp;arnumber=2083">
"A fast procedure for computing the distance between complex objectsin three-dimensional space", Gilbert, Johnson and Keerthi</weblink> - the initial publication</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://intl.ieeexplore.ieee.org/xpl/abs_free.jsp?arNumber=614298">
"The Gilbert–Johnson–Keerthi distance algorithm: a fast version for incremental motions", Ong and Gilbert</weblink></entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://web.comlab.ox.ac.uk/oucl/work/stephen.cameron/distances">
"Computing the Distance between Objects", Oxford professor Stephen Cameron's implementation of GJK</weblink></entry>
</list>


</p>
<p>

<list>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://code.google.com/p/gjkd/">
A 2D implementation of the Gilbert–Johnson–Keerthi (GJK) algorithm, written in the D programming language</weblink></entry>
</list>


</p>
</sec>
</bdy>
</algorithm>
</article>
