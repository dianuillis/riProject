<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 16:50:06[mciao0826] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>Discretization</title>
<id>330017</id>
<revision>
<id>243402500</id>
<timestamp>2008-10-06T11:05:45Z</timestamp>
<contributor>
<username>Jitse Niesen</username>
<id>14515</id>
</contributor>
</revision>
<categories>
<category>Numerical analysis</category>
<category>Control theory</category>
</categories>
</header>
<bdy>

<image location="right" width="150px" src="Finite_element_solution.svg" type="thumb">
<caption>

A solution to a discretized partial differential equation, obtained with the <link xlink:type="simple" xlink:href="../581/18233581.xml">
finite element method</link>.
</caption>
</image>

In <link xlink:type="simple" xlink:href="../831/18831.xml">
mathematics</link>, <b>discretization</b> concerns the process of transferring <link xlink:type="simple" xlink:href="../122/6122.xml">
continuous</link> models and equations into  counterparts.  This process is usually carried out as a first step toward making them suitable for numerical evaluation and implementation on digital computers.  In order to be processed on a digital computer another process named <link xlink:type="simple" xlink:href="../321/25321.xml">
quantization</link> is essential.<p>

<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../902/17902.xml">
Euler</link> discretization</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../977/5501977.xml">
Zero-order hold</link></entry>
</list>
</p>
<p>

Discretization is also related to <link xlink:type="simple" xlink:href="../492/8492.xml">
discrete mathematics</link>, and is an important component of <link xlink:type="simple" xlink:href="../204/1041204.xml">
granular computing</link>.  In this context, <it>discretization</it> may also refer to modification of variable of category <it>granularity</it>, as when multiple discrete variables are aggregated or multiple discrete categories fused.</p>

<sec>
<st>
 Discretization of linear state space models </st>
<p>

Discretization is also concerned with the transformation of continuous <link xlink:type="simple" xlink:href="../309/1424309.xml">
differential equation</link>s into discrete <link xlink:type="simple" xlink:href="../806/146806.xml">
difference equations</link>, suitable for <link>
numerical computing</link>.</p>
<p>

The following continuous <link xlink:type="simple" xlink:href="../156/548156.xml">
state space model</link></p>
<p>

<indent level="1">

<math>\dot{\mathbf{x}}(t) = \mathbf A \mathbf{x}(t) + \mathbf B \mathbf{u}(t) + \mathbf{v}(t)</math>
</indent>
:<math>\mathbf{y}(t) = \mathbf C \mathbf{x}(t) + \mathbf D \mathbf{u}(t) + \mathbf{w}(t)</math></p>
<p>

where <it>v</it> and <it>w</it> are continuous zero-mean white noise sources with covariances</p>
<p>

<indent level="1">

<math>\mathbf{v}(t) \sim N(0,\mathbf Q)</math>
</indent>
:<math>\mathbf{w}(t) \sim N(0,\mathbf R)</math></p>
<p>

can be discretized, assuming <link xlink:type="simple" xlink:href="../977/5501977.xml">
zero-order hold</link> for the input <it>u</it> and continuous integration for the noise <it>v</it>, to</p>
<p>

<indent level="1">

<math>\mathbf{x}[k+1] = \mathbf A_d \mathbf{x}[k] + \mathbf B_d \mathbf{u}[k] + \mathbf{v}[k]</math>
</indent>
:<math>\mathbf{y}[k] = \mathbf C_d \mathbf{x}[k] + \mathbf D_d \mathbf{u}[k] +  \mathbf{w}[k]</math></p>
<p>

with covariances</p>
<p>

<indent level="1">

<math>\mathbf{v}[k] \sim N(0,\mathbf Q_d)</math>
</indent>
:<math>\mathbf{w}[k] \sim N(0,\mathbf R_d)</math></p>
<p>

where</p>
<p>

<indent level="1">

<math>\mathbf A_d = e^{\mathbf A T} = \mathcal{L}^{-1}\{(s\mathbf I - \mathbf A)^{-1}\}_{t=T} </math>
</indent>
:<math>\mathbf B_d = \left( \int_{\tau=0}^{T}e^{\mathbf A \tau}d\tau \right) \mathbf B = \mathbf A^{-1}(\mathbf A_d - I)\mathbf B </math>, if <math>\mathbf A</math> is nonsingular
<indent level="1">

<math>\mathbf C_d = \mathbf C </math>
</indent>
:<math>\mathbf D_d = \mathbf D </math>
<indent level="1">

<math>\mathbf Q_d = \int_{\tau=0}^{T} e^{\mathbf A \tau} \mathbf Q e^{\mathbf A^T \tau}  d\tau </math>
</indent>
:<math>\mathbf R_d = \mathbf R </math></p>
<p>

and <math>T</math> is the sample time.</p>

<ss1>
<st>
 Discretization of process noise </st>
<p>

Numerical evaluation of <math>\mathbf{Q}_d</math> is a bit trickier due to the matrix exponential integral. It can, however, be computed by first constructing a matrix, and computing the exponential of it:
<indent level="1">

<math> \mathbf{F} = 
\begin{bmatrix} -\mathbf{A} &amp; \mathbf{Q} \\
                 \mathbf{0} &amp; \mathbf{A}^T \end{bmatrix} T</math>
</indent>
:<math> \mathbf{G} = e^\mathbf{F} =
\begin{bmatrix} \dots &amp; \mathbf{\phi}^{-1}\mathbf{Q}_d \\
           \mathbf{0} &amp; \mathbf{\phi}^T             \end{bmatrix}.</math>
The discretized process noise is then evaluated by multiplying the transpose of the lower-right partition of <b>G</b> with the upper-right partition of <b>G</b>:
<indent level="1">

<math>\mathbf{Q}_d = (\mathbf{\phi}^T)^T (\mathbf{\phi}^{-1}\mathbf{Q}_d). </math>
</indent>

</p>
</ss1>
<ss1>
<st>
 Derivation </st>
<p>

Starting with the continuous model
<indent level="1">

<math>\mathbf{\dot{x}}(t) = \mathbf A\mathbf x(t) + \mathbf B \mathbf u(t)</math>
</indent>
we know that the <link xlink:type="simple" xlink:href="../731/672731.xml">
matrix exponential</link> is
<indent level="1">

<math>\frac{d}{dt}e^{\mathbf At} = \mathbf A e^{\mathbf At} = e^{\mathbf At} \mathbf A</math>
</indent>
and by premultiplying the model we get
<indent level="1">

<math>e^{-\mathbf At} \mathbf{\dot{x}}(t) = e^{-\mathbf At} \mathbf A\mathbf x(t) + e^{-\mathbf At} \mathbf B\mathbf u(t)</math>
</indent>
which we recognize as
<indent level="1">

<math>\frac{d}{dt}(e^{-\mathbf At}\mathbf x(t)) = e^{-\mathbf At} \mathbf B\mathbf u(t)</math>
</indent>
and by integrating..
<indent level="1">

<math>e^{-\mathbf At}\mathbf x(t) - e^0\mathbf x(0) = \int_0^t e^{-\mathbf A\tau}\mathbf B\mathbf u(\tau) d\tau</math>
</indent>
:<math>\mathbf x(t) = e^{\mathbf At}\mathbf x(0) + \int_0^t e^{\mathbf A(t-\tau)} \mathbf B\mathbf u(\tau) d \tau</math>
which is an analytical solution to the continuous model.</p>
<p>

Now we want to discretise the above expression. We assume that u is <link xlink:type="simple" xlink:href="../371/19371.xml">
constant</link> during each timestep.
<indent level="1">

<math>\mathbf x[k] \ \stackrel{\mathrm{def}}{=}\  \mathbf x(kT)</math>
</indent>
:<math>\mathbf x[k] = e^{\mathbf AkT}\mathbf x(0) + \int_0^{kT} e^{\mathbf A(kT-\tau)} \mathbf B\mathbf u(\tau) d \tau</math>
<indent level="1">

<math>\mathbf x[k+1] = e^{\mathbf A(k+1)T}\mathbf x(0) + \int_0^{(k+1)T} e^{\mathbf A((k+1)T-\tau)} \mathbf B\mathbf u(\tau) d \tau</math>
</indent>
:<math>\mathbf x[k+1] = e^{\mathbf AT} \left[  e^{\mathbf AkT}\mathbf x(0) + \int_0^{kT} e^{\mathbf A(kT-\tau)} \mathbf B\mathbf u(\tau) d \tau \right]+ \int_{kT}^{(k+1)T} e^{\mathbf A(kT+T-\tau)} \mathbf B\mathbf u(\tau) d \tau</math>
We recognize the bracketed expression as <math>\mathbf x[k]</math>, and the second term can be simplified by substituting <math>v = kT + T - \tau</math>. We also assume that <math>\mathbf u</math> is constant during the <link xlink:type="simple" xlink:href="../532/15532.xml">
integral</link>, which in turn yields
<indent level="1">

<math>\mathbf x[k+1] = e^{\mathbf AT}\mathbf x[k] + \left( \int_0^T e^{\mathbf Av} dv \right) \mathbf B\mathbf u[k]</math>
</indent>
which is an exact solution to the discretization problem.</p>

</ss1>
<ss1>
<st>
 Approximations </st>
<p>

Exact discretization may sometimes be intractable due to the heavy matrix exponential and integral operations involved. It is much easier to calculate an approximate discrete model, based on that for small timesteps <math>e^{\mathbf AT} \approx \mathbf I + \mathbf A T</math>. The approximate solution then becomes:
<indent level="1">

<math>\mathbf x[k+1] \approx (\mathbf I + \mathbf AT) \mathbf x[k] + (\mathbf I T + \frac{1}{2} \mathbf A T^2 ) \mathbf B  \mathbf u[k] </math>
</indent>
which can further be approximated if <math>\frac{1}{2} \mathbf A T^2</math> is small; yielding
<indent level="1">

<math>\mathbf x[k+1] \approx (\mathbf I + \mathbf AT) \mathbf x[k] + T\mathbf B \mathbf u[k] </math>
</indent>

Other possible approximations are <math>e^{\mathbf AT} \approx \left( \mathbf I - \mathbf A T \right)^{-1}</math> and <math>e^{\mathbf AT} \approx \left( \mathbf I +\frac{1}{2}  \mathbf A T \right) \left( \mathbf I - \frac{1}{2} \mathbf A T \right)^{-1}</math>. Each of them have different stability properties. The last one is known as the bilinear transform, or Tustin transform, and preserves the (un)stability of the continuous-time system.</p>

</ss1>
</sec>
<sec>
<st>
 Discretization of continuous features </st>

<p>

In <link xlink:type="simple" xlink:href="../685/26685.xml">
statistics</link> and machine learning, <b>discretization</b> refers to the process of converting continuous features or variables to discretized or nominal features. This can be useful when creating probability mass functions. </p>
<p>

Typically data is discretized into partitions of K equal lengths (equal intervals) or K% of the total data (equal frequencies). <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref></p>
<p>

Some mechanisms for discretizing continuous data include:</p>
<p>

<list>
<entry level="1" type="bullet">

 Fayyad &amp; Irani's MDL method <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%222%22])">2</ref> - Uses <link>
Information Gain</link> to recursively define the best bins.</entry>
<entry level="1" type="bullet">

 And many more <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%223%22])">3</ref></entry>
</list>
</p>

</sec>
<sec>
<st>
See also</st>
<p>

<list>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../174/276174.xml">
Time scale calculus</link></entry>
</list>
</p>

</sec>
<sec>
<st>
 References </st>
<p>

<reflist>
<entry id="1">
 "<weblink xlink:type="simple" xlink:href="http://sci2s.ugr.es/keel/pdf/specific/articulo/IJIS00.pdf">
Entropy and MDL Discretization of Continuous Variables for Bayesian Belief Networks</weblink>".&#32;Retrieved on <link>
2008-07-10</link>.</entry>
<entry id="2">
"<weblink xlink:type="simple" xlink:href="http://hdl.handle.net/2014/35171">
Multi-Interval Discretization of Continuous-Valued Attributes for Classification Learning</weblink>".&#32;Retrieved on <link>
2008-07-10</link>.</entry>
<entry id="3">
"<weblink xlink:type="simple" xlink:href="http://www.ifir.edu.ar/~redes/curso/disc.ps">
Supervised and Unsupervised Discretization of Continuous Features</weblink>".&#32;Retrieved on <link>
2008-07-10</link>.</entry>
</reflist>

<list>
<entry level="1" type="bullet">

 Robert Grover Brown &amp; Patrick Y. C. Hwang: <it>Introduction to random signals and applied Kalman filtering</it>, 3rd ed.</entry>
<entry level="1" type="bullet">

 Chi-Tsong Chen: <it>Linear System Theory and Design</it>.</entry>
<entry level="1" type="bullet">

 C. Van Loan: <it>Computing integrals involving the matrix exponential</it>, IEEE Transactions on Automatic Control, vol.23, no.3, pp. 395-404, Jun 1978</entry>
</list>
</p>


</sec>
</bdy>
</article>
