<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 15:37:51[mciao0826] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<sycophant  confidence="0.9511911446218017" wordnetid="110684827">
<event  confidence="0.8" wordnetid="100029378">
<rule  confidence="0.8" wordnetid="105846932">
<act  confidence="0.8" wordnetid="100030358">
<psychological_feature  confidence="0.8" wordnetid="100023100">
<procedure  confidence="0.8" wordnetid="101023820">
<activity  confidence="0.8" wordnetid="100407535">
<algorithm  confidence="0.8" wordnetid="105847438">
<header>
<title>Web crawler</title>
<id>33120</id>
<revision>
<id>242007542</id>
<timestamp>2008-09-30T13:39:08Z</timestamp>
<contributor>
<username>J.delanoy</username>
<id>2372780</id>
</contributor>
</revision>
<categories>
<category>Internet search algorithms</category>
<category>Web crawlers</category>
<category>All articles needing style editing</category>
<category>Wikipedia references cleanup</category>
<category>Search engine software</category>
<category>Cleanup from June 2008</category>
<category>Wikipedia articles needing style editing from June 2008</category>
</categories>
</header>
<bdy>

<table class="metadata plainlinks ambox ">
<row>
<col>

ambox-style" style=""</col>
</row>
<row>
<col class="mbox-image"><p>

<image width="40x40px" src="Ambox_style.png">
</image>
</p>
</col>
<col style="" class="mbox-text">
 The references used in this article may be clearer with a different or consistent style of <b>, , or </b>. 
<it>(December 2007)''</it></col>
</row>
</table>

<p>

<table class="metadata plainlinks ambox ">
<row>
<col>

ambox-style" style=""</col>
</row>
<row>
<col class="mbox-image"><p>

<image width="40x40px" src="Ambox_style.png">
</image>
</p>
</col>
<col style="" class="mbox-text">
 <b>This section or article contains too much  and may need simplification or further explanation.</b><p>

Please discuss this issue on the , and/or remove or explain jargon terms used in the article. is available. <it>(June 2008)''</it></p>
</col>
</row>
</table>

</p>
<p>

For the <artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<engine wordnetid="103287733" confidence="0.8">
<motor wordnetid="103789946" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<machine wordnetid="103699975" confidence="0.8">
<link xlink:type="simple" xlink:href="../023/4059023.xml">
search engine</link></machine>
</device>
</motor>
</engine>
</instrumentality>
</artifact>
 of the same name, see <artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<engine wordnetid="103287733" confidence="0.8">
<motor wordnetid="103789946" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<machine wordnetid="103699975" confidence="0.8">
<link xlink:type="simple" xlink:href="../034/53034.xml">
WebCrawler</link></machine>
</device>
</motor>
</engine>
</instrumentality>
</artifact>
.
For the fictional robots called Scutters, see <link xlink:type="simple" xlink:href="../153/1301153.xml#xpointer(//*[./st=%22The+Skutters%22])">
Red Dwarf characters#The Skutters</link>.</p>
<p>

A <b>web crawler</b> (also known as a <b>web spider</b>, <b>web robot</b>, or—especially in the <link xlink:type="simple" xlink:href="../901/2652901.xml">
FOAF</link> community—<b>web scutter</b><ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref>) is a program or automated script which browses the <invention wordnetid="105633385" confidence="0.8">
<link xlink:type="simple" xlink:href="../139/33139.xml">
World Wide Web</link></invention>
 in a methodical, automated manner. Other less frequently used names for web crawlers are <b>ants</b>, <b>automatic indexers</b>, <b>bots</b>, and <b>worms</b>.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%222%22])">2</ref></p>
<p>

This process is called <b>web crawling</b> or <b>spidering</b>. Many sites, in particular <artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<engine wordnetid="103287733" confidence="0.8">
<motor wordnetid="103789946" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<machine wordnetid="103699975" confidence="0.8">
<link xlink:type="simple" xlink:href="../023/4059023.xml">
search engine</link></machine>
</device>
</motor>
</engine>
</instrumentality>
</artifact>
s, use spidering as a means of providing up-to-date data. Web crawlers are mainly used to create a copy of all the visited pages for later processing by a search engine that will <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../386/7602386.xml">
index</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
 the downloaded pages to provide fast searches. Crawlers can also be used for automating maintenance tasks on a website, such as checking links or validating <format wordnetid="106636806" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../191/13191.xml">
HTML</link></format>
 code. Also, crawlers can be used to gather specific types of information from Web pages, such as harvesting e-mail addresses (usually for <link xlink:type="simple" xlink:href="../368/28368.xml">
spam</link>).</p>
<p>

A web crawler is one type of <link xlink:type="simple" xlink:href="../607/1569607.xml">
bot</link>, or software agent. In general, it starts with a list of <link xlink:type="simple" xlink:href="../277/32277.xml">
URL</link>s to visit, called the <b>seeds</b>. As the crawler visits these URLs, it identifies all the <link xlink:type="simple" xlink:href="../547/49547.xml">
hyperlink</link>s in the page and adds them to the list of URLs to visit, called the <b>crawl frontier</b>. URLs from the frontier are recursively visited according to a set of policies.</p>

<sec>
<st>
 Crawling policies </st>

<p>

There are three important characteristics of the Web that make crawling it very difficult:
<list>
<entry level="1" type="bullet">

its large volume,</entry>
<entry level="1" type="bullet">

its fast rate of change, and</entry>
<entry level="1" type="bullet">

dynamic page generation,</entry>
</list>

which combine to produce a wide variety of possible crawlable <link xlink:type="simple" xlink:href="../277/32277.xml">
URL</link>s.</p>
<p>

The large volume implies that the crawler can only download a fraction of the web pages within a given time, so it needs to prioritize its downloads. The high rate of change implies that by the time the crawler is downloading the last pages from a site, it is very likely that new pages have been added to the site, or that pages have already been updated or even deleted. </p>
<p>

The recent increase in the number of pages being generated by server-side scripting languages has also created difficulty in that endless combinations of <link xlink:type="simple" xlink:href="../104/2701104.xml">
HTTP GET</link> parameters exist, only a small selection of which will actually return unique content. For example, a simple online photo gallery may offer three options to users, as specified through HTTP GET parameters. If there exist four ways to sort images, three choices of thumbnail size, two file formats, and an option to disable user-provided contents, then that same set of content can be accessed with forty-eight different URLs, all of which will be present on the site. This <link xlink:type="simple" xlink:href="../308/5308.xml">
mathematical combination</link> creates a problem for crawlers, as they must sort through endless combinations of relatively minor scripted changes in order to retrieve unique content.</p>
<p>

As Edwards <it>et al.</it> noted, "Given that the <link xlink:type="simple" xlink:href="../827/15612827.xml">
bandwidth</link> for conducting crawls is neither infinite nor free, it is becoming essential to crawl the Web in not only a scalable, but efficient way, if some reasonable measure of quality or freshness is to be maintained." <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%223%22])">3</ref>. A crawler must carefully choose at each step which pages to visit next.</p>
<p>

The behavior of a web crawler is the outcome of a combination of policies:  </p>
<p>

<list>
<entry level="1" type="bullet">

 A <it>selection policy</it> that states which pages to download. </entry>
<entry level="1" type="bullet">

 A <it>re-visit policy</it> that states when to check for changes to the pages. </entry>
<entry level="1" type="bullet">

 A <it>politeness policy</it> that states how to avoid overloading websites. </entry>
<entry level="1" type="bullet">

 A <it>parallelization policy</it> that states how to coordinate distributed web crawlers.</entry>
</list>
</p>

<ss1>
<st>
 Selection policy </st>

<p>

Given the current size of the Web, even large search engines cover only a portion of the publicly available internet; a study by <link xlink:type="simple" xlink:href="../381/1667381.xml">
Lawrence</link> and <physical_entity wordnetid="100001930" confidence="0.8">
<peer wordnetid="109626238" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<colleague wordnetid="109935990" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<associate wordnetid="109816771" confidence="0.8">
<link xlink:type="simple" xlink:href="../334/1667334.xml">
Giles</link></associate>
</scientist>
</causal_agent>
</colleague>
</person>
</peer>
</physical_entity>
 (Lawrence and Giles, <link xlink:type="simple" xlink:href="../548/34548.xml">
2000</link>) showed that no search engine indexes more than 16% of the Web. As a crawler always downloads just a fraction of the Web pages, it is highly desirable that the downloaded fraction contains the most relevant pages, and not just a random sample of the Web. </p>
<p>

This requires a metric of importance for prioritizing Web pages. The importance of a page is a function of its intrinsic quality, its popularity in terms of links or visits, and even of its URL (the latter is the case of <link xlink:type="simple" xlink:href="../995/5560995.xml">
vertical search engine</link>s restricted to a single top-level domain, or search engines restricted to a fixed Web site). Designing a good selection policy has an added difficulty: it must work with partial information, as the complete set of Web pages is not known during crawling. </p>
<p>

Cho <it>et al.</it> (Cho <it>et al.</it>, <link xlink:type="simple" xlink:href="../647/34647.xml">
1998</link>) made the first study on policies for crawling scheduling. Their data set was a 180,000-pages crawl from the stanford.edu domain, in which a crawling simulation was done with different strategies. The ordering metrics tested were <algorithm wordnetid="105847438" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../026/97026.xml">
breadth-first</link></algorithm>
, <link xlink:type="simple" xlink:href="../494/580494.xml">
backlink</link>-count and partial <link xlink:type="simple" xlink:href="../724/23724.xml">
Pagerank</link> calculations. One of the conclusions was that if the crawler wants to download pages with high Pagerank early during the crawling process, then the partial Pagerank strategy is the better, followed by <algorithm wordnetid="105847438" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../026/97026.xml">
breadth-first</link></algorithm>
 and backlink-count. However, these results are for just a single domain.</p>
<p>

Najork and Wiener <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%224%22])">4</ref> performed an actual crawl on 328 million pages, using <algorithm wordnetid="105847438" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../026/97026.xml">
breadth-first</link></algorithm>
 ordering. They found that a <algorithm wordnetid="105847438" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../026/97026.xml">
breadth-first</link></algorithm>
 crawl captures pages with high Pagerank early in the crawl (but they did not compare this strategy against other strategies). The explanation given by the authors for this result is that "the most important pages have many links to them from numerous hosts, and those links will be found early, regardless of on which host or page the crawl
originates". </p>
<p>

Abiteboul (Abiteboul <it>et al.</it>, <link xlink:type="simple" xlink:href="../163/36163.xml">
2003</link>) designed a crawling strategy based on an algorithm called OPIC (On-line Page Importance Computation). In OPIC, each page is given an initial sum of "cash" which is distributed equally among the pages it points to. It is similar to a Pagerank computation, but it is faster and is only done in one step. An OPIC-driven crawler downloads first the pages in the crawling frontier with higher amounts of "cash". Experiments were carried in a 100,000-pages synthetic graph with a power-law distribution of in-links. However, there was no comparison with other strategies nor experiments in the real Web.</p>
<p>

Boldi <it>et al.</it> (Boldi <it>et al.</it>, <link xlink:type="simple" xlink:href="../524/35524.xml">
2004</link>) used simulation on subsets of the Web of 40 million pages from the .it domain and 100 million pages from the WebBase crawl, testing <algorithm wordnetid="105847438" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../026/97026.xml">
breadth-first</link></algorithm>
 against depth-first, random ordering and an omniscient strategy. The comparison was based on how well PageRank computed on a partial crawl approximates the true PageRank value. Surprisingly, some visits that accumulate PageRank very quickly (most notably, <algorithm wordnetid="105847438" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../026/97026.xml">
breadth-first</link></algorithm>
 and the omniscent visit) provide very poor progressive approximations.</p>
<p>

Baeza-Yates <it>et al.</it> <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%225%22])">5</ref> used simulation on two subsets of the Web of 3 million pages from the .gr and .cl domain, testing several crawling strategies. They showed that both the OPIC strategy and a strategy that uses the length of the per-site queues are both better than <algorithm wordnetid="105847438" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../026/97026.xml">
breadth-first</link></algorithm>
 crawling, and that it is also very effective to use a previous crawl, when it is available, to guide the current one.</p>
<p>

Daneshpajouh <it>et al.</it> <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%226%22])">6</ref> designed a community based algorithm for discovering good seeds. Their method crawls web pages with high PageRank from different communities in less iteration in comparison with crawl starting from random seeds. One can extract good seed from a previously crawled web graph using this new method. Using these seeds a new crawl can be very effective.</p>

<ss2>
<st>
Restricting followed links</st>
<p>

A crawler may only want to seek out HTML pages and avoid all other <link xlink:type="simple" xlink:href="../748/6269748.xml">
MIME type</link>s. In order to request only HTML resources, a crawler may make an HTTP HEAD request to determine a Web resource's MIME type before requesting the entire resource with a GET request. To avoid making numerous HEAD requests, a crawler may alternatively examine the URL and only request the resource if the URL ends with .html, .htm or a slash. This strategy may cause numerous HTML Web resources to be unintentionally skipped. A similar strategy compares the extension of the web resource to a list of known HTML-page types:  .html, .htm, .asp, .aspx, .php, and a slash.</p>
<p>

Some crawlers may also avoid requesting any resources that have a <link xlink:type="simple" xlink:href="../671/717671.xml">
"?"</link> in them (are dynamically produced) in order to avoid <link xlink:type="simple" xlink:href="../163/3292163.xml">
spider trap</link>s which may cause the crawler to download an infinite number of URLs from a Web site.</p>

</ss2>
<ss2>
<st>
Path-ascending crawling</st>
<p>
 
Some crawlers intend to download as many resources as possible from a particular Web site. Cothey (Cothey, 2004) introduced a <it>path-ascending crawler</it> that would ascend to every path in each URL that it intends to crawl. For example, when given a seed URL of http://llama.org/hamster/monkey/page.html, it will attempt to crawl /hamster/monkey/, /hamster/, and /. Cothey found that a path-ascending crawler was very effective in finding isolated resources, or resources for which no inbound link would have been found in regular crawling.</p>
<p>

Many Path-ascending crawlers are also known as <link xlink:type="simple" xlink:href="../156/332156.xml">
Harvester</link> software, because they're used to "harvest" or collect all the content - perhaps the collection of photos in a gallery - from a specific page or host.</p>

</ss2>
<ss2>
<st>
Focused crawling</st>

<p>

<indent level="1">

<it>Main article: <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<follower wordnetid="110099375" confidence="0.8">
<flatterer wordnetid="110095869" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<sycophant wordnetid="110684827" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<link xlink:type="simple" xlink:href="../799/11442799.xml">
Focused crawler</link></procedure>
</activity>
</psychological_feature>
</act>
</causal_agent>
</rule>
</event>
</sycophant>
</algorithm>
</flatterer>
</follower>
</person>
</physical_entity>
</it>
</indent>
The importance of a page for a crawler can also be expressed as a function of the similarity of a page to a given query. Web crawlers that attempt to download pages that are similar to each other are called <b>focused crawler</b> or <b>topical crawlers</b>. The concepts of topical and focused crawling were first introduced by Menczer <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%227%22])">7</ref> <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%228%22])">8</ref> and by Chakrabarti <it>et al.</it> <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%229%22])">9</ref>.</p>
<p>

The main problem in focused crawling is that in the context of a web crawler, we would like to be able to predict the similarity of the text of a given page to the query before actually downloading the page. A possible predictor is the anchor text of links; this was the approach taken by Pinkerton <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2210%22])">10</ref> in a crawler developed in the early days of the Web. Diligenti <it>et al.</it> <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2211%22])">11</ref> propose to use the complete content of the pages already visited to infer the similarity between the driving query and the pages that have not been visited yet. The performance of a focused crawling depends mostly on the richness of links in the specific topic being searched, and a focused crawling usually relies on a general Web search engine for providing starting points.</p>

</ss2>
<ss2>
<st>
Crawling the Deep Web</st>
<p>

A vast amount of Web pages lie in the <link xlink:type="simple" xlink:href="../403/454403.xml">
deep</link> or invisible Web. These pages are typically only accessible by submitting queries to a database, and regular crawlers are unable to find these pages if there are no links that point to them. Google’s <link xlink:type="simple" xlink:href="../978/2831978.xml">
Sitemap Protocol</link> and <link>
mod_oai</link> (Nelson <it>et al.</it>, 2005) are intended to allow discovery of these deep-Web resources.</p>
<p>

Deep web crawling also multiplies the number of web links to be crawled. Some crawlers only take some of the Cho, J. and Garcia-Molina, H. (2003). <weblink xlink:type="simple" xlink:href="http://portal.acm.org/citation.cfm?doid=958942.958945">
Effective page refresh policies for web crawlers</weblink>. ACM Transactions on Database Systems, 28(4).:</p>
<p>

<b>Uniform policy</b>: This involves re-visiting all pages in the collection with the same frequency, regardless of their rates of change.</p>
<p>

<b>Proportional policy</b>: This involves re-visiting more often the pages that change more frequently. The visiting frequency is directly proportional to the (estimated) change frequency. </p>
<p>

(In both cases, the repeated crawling order of pages can be done either at random or with a fixed order.) </p>
<p>

Cho and Garcia-Molina proved the surprising result that, in terms of average freshness, the uniform policy outperforms the proportional policy in both a simulated Web and a real Web crawl. The explanation for this result comes from the fact that, when a page changes too often, the crawler will waste time by trying to re-crawl it too fast and still will not be able to keep its copy of the page fresh.</p>
<p>

To improve freshness, we should penalize the elements that change too often (Cho and Garcia-Molina, 2003a). The optimal re-visiting policy is neither the uniform policy nor the proportional policy. The optimal method for keeping average freshness high includes ignoring the pages that change too often, and the optimal for keeping average age low is to use access frequencies that monotonically (and sub-linearly) increase with the rate of change of each page. In both cases, the optimal is closer to the uniform policy than to the proportional policy: as Coffman <it>et al.</it> (Edward G. Coffman, 1998) note, "in order to minimize the expected
obsolescence time, the accesses to any particular page should be kept as evenly spaced as possible". Explicit formulas for the re-visit policy are not attainable in general, but they are obtained numerically, as they depend on the distribution of page changes. (Cho and Garcia-Molina, 2003a) show that the exponential distribution is a good fit for describing page changes, while Ipeirotis <it>et al.</it> <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2212%22])">12</ref> show how to use statistical tools to discover parameters that affect this distribution. Note that the re-visiting policies considered here regard all pages as homogeneous in terms of quality ("all pages on the Web are worth the same"), something that is not a realistic scenario, so further information about the Web page quality should be included to achieve a better crawling policy.</p>

</ss2>
</ss1>
<ss1>
<st>
 Politeness policy </st>

<p>

Crawlers can retrieve data much quicker and in greater depth than human searchers, so they can have a crippling impact on the performance of a site. Needless to say if a single crawler is performing multiple requests per second and/or downloading large files, a server would have a hard time keeping up with requests from multiple crawlers.</p>
<p>

As noted by Koster <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2213%22])">13</ref>, the use of web crawlers is useful for a number of tasks, but comes with a price for the general community. The costs of using web crawlers include:</p>
<p>

<list>
<entry level="1" type="bullet">

 Network resources, as crawlers require considerable bandwidth and operate with a high degree of parallelism during a long period of time.</entry>
<entry level="1" type="bullet">

 Server overload, especially if the frequency of accesses to a given server is too high.</entry>
<entry level="1" type="bullet">

 Poorly written crawlers, which can crash servers or routers, or which download pages they cannot handle.</entry>
<entry level="1" type="bullet">

 Personal crawlers that, if deployed by too many users, can disrupt networks and Web servers.</entry>
</list>
</p>
<p>

A partial solution to these problems is the <link xlink:type="simple" xlink:href="../673/101673.xml">
robots exclusion protocol</link>, also known as the robots.txt protocol <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2214%22])">14</ref> that is a standard for administrators to indicate which parts of their Web servers should not be accessed by crawlers. This standard does not include a suggestion for the interval of visits to the same server, even though this interval is the most effective way of avoiding server overload. Recently commercial search engines like <link xlink:type="simple" xlink:href="../624/429624.xml">
Ask Jeeves</link>, <web_site wordnetid="106359193" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../041/185041.xml">
MSN</link></web_site>
 and <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../213/188213.xml">
Yahoo</link></company>
 are able to use an extra "Crawl-delay:" parameter in the robots.txt file to indicate the number of seconds to delay between requests.</p>
<p>

The first proposal for the interval between connections was given in <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2215%22])">15</ref> and was 60 seconds. However, if pages were downloaded at this rate from a website with more than 100,000 pages over a perfect connection with zero latency and infinite bandwidth, it would take more than 2 months to download only that entire website; also, only a fraction of the resources from that Web server would be used. This does not seem acceptable.</p>
<p>

Cho uses 10 seconds as an interval for accesses, and the WIRE crawler <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2216%22])">16</ref> uses 15 seconds as the default. The MercatorWeb crawler (Heydon and Najork, 1999) follows an adaptive politeness policy: if it took <it>t</it> seconds to download a document from a given server, the crawler waits for 10<it>t</it> seconds before downloading the next page. Dill <it>et al.</it> <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2217%22])">17</ref> use 1 second.</p>
<p>

For those using web crawlers for research purposes, a more detailed cost-benefit analysis is needed and ethical considerations should be taken into account when deciding where to crawl and how fast to crawl <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2218%22])">18</ref>.</p>
<p>

Anecdotal evidence from access logs shows that access intervals from known crawlers vary between 20 seconds and 3–4 minutes. It is worth noticing that even when being very polite, and taking all the safeguards to avoid overloading web servers, some complaints from Web server administrators are received. <entrepreneur wordnetid="110060352" confidence="0.9173553029164789">
<celebrity wordnetid="109903153" confidence="0.9508927676800064">
<person wordnetid="100007846" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../904/60904.xml">
Brin</link></person>
</celebrity>
</entrepreneur>
 and <celebrity wordnetid="109903153" confidence="0.9508927676800064">
<person wordnetid="100007846" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../903/60903.xml">
Page</link></person>
</celebrity>
 note that: "... running a crawler which connects to more than half a million servers (...) generates a fair amount of email and phone calls. Because of the vast number of people coming on line, there are always those who do not know what a crawler is, because this is the first one they have seen." <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2219%22])">19</ref>.</p>

</ss1>
<ss1>
<st>
 Parallelization policy </st>

<p>

<indent level="1">

<it>Main article: <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../055/237055.xml">
Distributed web crawling</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</it>
</indent>

A <link xlink:type="simple" xlink:href="../162/145162.xml">
parallel</link> crawler is a crawler that runs multiple processes in parallel. The goal is to maximize the download rate while minimizing the overhead from parallelization and to avoid repeated downloads of the same page. To avoid downloading the same page more than once, the crawling system requires a policy for assigning the new URLs discovered during the crawling process, as the same URL can be found by two different crawling processes.</p>

</ss1>
</sec>
<sec>
<st>
Web crawler architectures</st>
<p>

<image location="right" width="150px" src="WebCrawlerArchitecture.svg" type="frame">
<caption>

High-level architecture of a standard Web crawler
</caption>
</image>

A crawler must not only have a good crawling strategy, as noted in the previous sections, but it should also have a highly optimized architecture.</p>
<p>

Shkapenyuk and Suel <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2220%22])">20</ref> noted that: "While it is fairly easy to build a slow crawler that downloads a few pages per second for a short period of time, building a high-performance system that can download hundreds of millions of pages over several weeks presents a number of challenges in system design, I/O and network efficiency, and robustness and manageability."</p>
<p>

Web crawlers are a central part of search engines, and details on their algorithms and architecture are kept as business secrets. When crawler designs are published, there is often an important lack of detail that prevents others from reproducing the work. There are also emerging concerns about "<link xlink:type="simple" xlink:href="../651/43651.xml">
search engine spamming</link>", which prevent major search engines from publishing their ranking algorithms.</p>


<ss1>
<st>
URL normalization</st>

<p>

Crawlers usually perform some type of <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../139/4707139.xml">
URL normalization</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
 in order to avoid crawling the same resource more than once. The term <it>URL normalization</it>, also called <it>URL canonicalization</it>, refers to the process of modifying and standardizing a URL in a consistent manner. There are several types of normalization that may be performed including conversion of URLs to lowercase, removal of "." and ".." segments, and adding trailing slashes to the non-empty path component (Pant <it>et al.</it>, 2004).</p>

</ss1>
</sec>
<sec>
<st>
Crawler identification</st>

<p>

Web crawlers typically identify themselves to a web server by using the <link xlink:type="simple" xlink:href="../303/487303.xml">
User-agent</link> field of an <link xlink:type="simple" xlink:href="../104/2701104.xml">
HTTP</link> request. Web site administrators typically examine their <link xlink:type="simple" xlink:href="../455/33455.xml">
web server</link>s’ log and use the user agent field to determine which crawlers have visited the web server and how often. The user agent field may include a <link xlink:type="simple" xlink:href="../277/32277.xml">
URL</link> where the Web site administrator may find out more information about the crawler. <link xlink:type="simple" xlink:href="../663/1466663.xml">
Spambots</link> and other malicious Web crawlers are unlikely to place identifying information in the user agent field, or they may mask their identity as a browser or other well-known crawler.</p>
<p>

It is important for web crawlers to identify themselves so Web site administrators can contact the owner if needed. In some cases, crawlers may be accidentally trapped in a <link xlink:type="simple" xlink:href="../163/3292163.xml">
crawler trap</link> or they may be overloading a web server with requests, and the owner needs to stop the crawler. Identification is also useful for administrators that are interested in knowing when they may expect their Web pages to be indexed by a particular <artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<engine wordnetid="103287733" confidence="0.8">
<motor wordnetid="103789946" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<machine wordnetid="103699975" confidence="0.8">
<link xlink:type="simple" xlink:href="../023/4059023.xml">
search engine</link></machine>
</device>
</motor>
</engine>
</instrumentality>
</artifact>
.</p>

</sec>
<sec>
<st>
 Examples of Web crawlers </st>
<p>

The following is a list of published crawler architectures for general-purpose crawlers (excluding focused web crawlers), with a brief description that includes the names given to the different components and outstanding features:</p>
<p>

<list>
<entry level="1" type="bullet">

 <b>RBSE</b> <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2221%22])">21</ref> was the first published web crawler. It was based on two programs: the first program, "spider" maintains a queue in a relational database, and the second program "mite", is a modified www <message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<representation wordnetid="105926676" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<link xlink:type="simple" xlink:href="../586/586.xml">
ASCII</link></rule>
</direction>
</representation>
</protocol>
</message>
 browser that downloads the pages from the Web.</entry>
<entry level="1" type="bullet">

 <b>WebCrawler</b> <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2210%22])">10</ref> was used to build the first publicly-available full-text index of a subset of the Web. It was based on lib-WWW to download pages, and another program to parse and order URLs for breadth-first exploration of the Web graph. It also included a real-time crawler that followed links based on the similarity of the anchor text with the provided query.</entry>
<entry level="1" type="bullet">

 <b>World Wide Web Worm</b> <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2222%22])">22</ref> was a crawler used to build a simple index of document titles and URLs. The index could be searched by using the <link xlink:type="simple" xlink:href="../642/46642.xml">
grep</link> <family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../642/31642.xml">
Unix</link></family>
 command.</entry>
<entry level="1" type="bullet">

 <b><company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../923/1092923.xml">
Google</link></company>
 Crawler</b> <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2219%22])">19</ref> is described in some detail, but the reference is only about an early version of its architecture, which was based in C++ and <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../862/23862.xml">
Python</link></programming_language>
. The crawler was integrated with the indexing process, because text parsing was done for full-text indexing and also for URL extraction. There is a URL server that sends lists of URLs to be fetched by several crawling processes. During parsing, the URLs found were passed to a URL server that checked if the URL have been previously seen. If not, the URL was added to the queue of the URL server.</entry>
<entry level="1" type="bullet">

 <b>CobWeb</b> (da Silva <it>et al.</it>, 1999) uses a central "scheduler" and a series of distributed "collectors". The collectors parse the downloaded web pages and send the discovered URLs to the scheduler, which in turn assign them to the collectors. The scheduler enforces a breadth-first search order with a politeness policy to avoid overloading web servers. The crawler is written in <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../939/23939.xml">
Perl</link></programming_language>
.</entry>
<entry level="1" type="bullet">

 <b>Mercator</b> (Heydon and Najork, 1999; Najork and Heydon, 2001) is a distributed, modular web crawler written in <message wordnetid="106598915" confidence="0.8">
<request wordnetid="106513366" confidence="0.8">
<link xlink:type="simple" xlink:href="../881/15881.xml">
Java</link></request>
</message>
. Its modularity arises from the usage of interchangeable "protocol modules" and "processing modules". Protocols modules are related to how to acquire the web pages (e.g.: by <link xlink:type="simple" xlink:href="../104/2701104.xml">
HTTP</link>), and processing modules are related to how to process web pages. The standard processing module just parses the pages and extract new URLs, but other processing modules can be used to index the text of the pages, or to gather statistics from the Web. </entry>
<entry level="1" type="bullet">

 <b><link xlink:type="simple" xlink:href="../995/3103995.xml">
WebFountain</link></b> <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%223%22])">3</ref> is a distributed, modular crawler similar to Mercator but written in C++. It features a "controller" machine that coordinates a series of "ant" machines. After repeatedly downloading pages, a change rate is inferred for each page and a non-linear programming method must be used to solve the equation system for maximizing freshness. The authors recommend to use this crawling order in the early stages of the crawl, and then switch to a uniform crawling order, in which all pages are being visited with the same frequency.</entry>
<entry level="1" type="bullet">

 <b><weblink xlink:type="simple" xlink:href="http://cis.poly.edu/polybot/">
PolyBot</weblink></b> <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2220%22])">20</ref> is a distributed crawler written in C++ and Python, which is composed of a "crawl manager", one or more "downloaders" and one or more "DNS resolvers". Collected URLs are added to a queue on disk, and processed later to search for seen URLs in batch mode. The politeness policy considers both third and second level domains (e.g.: www.example.com and www2.example.com are third level domains) because third level domains are usually hosted by the same Web server.</entry>
<entry level="1" type="bullet">

 <b><weblink xlink:type="simple" xlink:href="http://grid.ucy.ac.cy/WebRace/">
WebRACE</weblink></b> <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2223%22])">23</ref> is a crawling and caching module implemented in Java, and used as a part of a more generic system called eRACE. The system receives requests from users for downloading web pages, so the crawler acts in part as a smart proxy server. The system also handles requests for "subscriptions" to Web pages that must be monitored: when the pages change, they must be downloaded by the crawler and the subscriber must be notified. The most outstanding feature of WebRACE is that, while most crawlers start with a set of "seed" URLs, WebRACE is continuously receiving new starting URLs to crawl from.</entry>
<entry level="1" type="bullet">

 <b><weblink xlink:type="simple" xlink:href="http://law.dsi.unimi.it/index.php">
Ubicrawler</weblink></b> (Boldi <it>et al.</it>, 2004) is a distributed crawler written in Java, and it has no central process. It is composed of a number of identical "agents"; and the assignment function is calculated using <link xlink:type="simple" xlink:href="../041/2434041.xml">
consistent hashing</link> of the host names. There is zero overlap, meaning that no page is crawled twice, unless a crawling agent crashes (then, another agent must re-crawl the pages from the failing agent). The crawler is designed to achieve high scalability and to be tolerant to failures.</entry>
<entry level="1" type="bullet">

 <b>FAST Crawler</b> <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2224%22])">24</ref> is a distributed crawler, used by <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../908/928908.xml">
Fast Search &amp; Transfer</link></company>
, and a general description of its architecture is available.</entry>
</list>
</p>
<p>

In addition to the specific crawler architectures listed above, there are general crawler architectures published by Cho (Cho and Garcia-Molina, 2002) and Chakrabarti <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2225%22])">25</ref>.</p>

<ss1>
<st>
 Open-source crawlers </st>
<p>

<list>
<entry level="1" type="bullet">

 <b><physical_entity wordnetid="100001930" confidence="0.8">
<sycophant wordnetid="110684827" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<follower wordnetid="110099375" confidence="0.8">
<engine wordnetid="103287733" confidence="0.8">
<motor wordnetid="103789946" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<flatterer wordnetid="110095869" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<machine wordnetid="103699975" confidence="0.8">
<link xlink:type="simple" xlink:href="../490/2825490.xml">
DataparkSearch</link></machine>
</causal_agent>
</flatterer>
</device>
</motor>
</engine>
</follower>
</instrumentality>
</artifact>
</person>
</sycophant>
</physical_entity>
</b> is a crawler and search engine released under the <link xlink:type="simple" xlink:href="../683/18938683.xml">
GNU General Public License</link>.</entry>
<entry level="1" type="bullet">

 <b><physical_entity wordnetid="100001930" confidence="0.8">
<sycophant wordnetid="110684827" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<follower wordnetid="110099375" confidence="0.8">
<client wordnetid="109985075" confidence="0.8">
<leader wordnetid="109623038" confidence="0.8">
<administrator wordnetid="109770949" confidence="0.8">
<flatterer wordnetid="110095869" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<case wordnetid="109898892" confidence="0.8">
<head wordnetid="110162991" confidence="0.8">
<director wordnetid="110014939" confidence="0.8">
<link xlink:type="simple" xlink:href="../033/371033.xml">
GNU Wget</link></director>
</head>
</case>
</causal_agent>
</flatterer>
</administrator>
</leader>
</client>
</follower>
</person>
</sycophant>
</physical_entity>
</b> is a <link xlink:type="simple" xlink:href="../707/6707.xml">
command-line</link> operated crawler written in <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../021/6021.xml">
C</link></programming_language>
 and released under the <link xlink:type="simple" xlink:href="../683/18938683.xml">
GPL</link>. It is typically used to mirror web and FTP sites. </entry>
<entry level="1" type="bullet">

 <b><software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../427/5681427.xml">
Heritrix</link></software>
</b> is the <structure wordnetid="104341686" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<area wordnetid="102735688" confidence="0.8">
<facility wordnetid="103315023" confidence="0.8">
<library wordnetid="103660909" confidence="0.8">
<depository wordnetid="103177349" confidence="0.8">
<archive wordnetid="102735086" confidence="0.8">
<room wordnetid="104105893" confidence="0.8">
<link xlink:type="simple" xlink:href="../931/176931.xml">
Internet Archive</link></room>
</archive>
</depository>
</library>
</facility>
</area>
</artifact>
</structure>
's archival-quality crawler, designed for archiving periodic snapshots of a large portion of the Web. It was written in <message wordnetid="106598915" confidence="0.8">
<request wordnetid="106513366" confidence="0.8">
<link xlink:type="simple" xlink:href="../881/15881.xml">
Java</link></request>
</message>
. </entry>
<entry level="1" type="bullet">

  includes a web crawler in its indexing engine.</entry>
<entry level="1" type="bullet">

 <b><physical_entity wordnetid="100001930" confidence="0.8">
<application wordnetid="106570110" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<follower wordnetid="110099375" confidence="0.8">
<written_communication wordnetid="106349220" confidence="0.8">
<writing wordnetid="106359877" confidence="0.8">
<flatterer wordnetid="110095869" confidence="0.8">
<code wordnetid="106355894" confidence="0.8">
<software wordnetid="106566077" confidence="0.8">
<sycophant wordnetid="110684827" confidence="0.8">
<program wordnetid="106568978" confidence="0.8">
<browser wordnetid="106571301" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<coding_system wordnetid="106353757" confidence="0.8">
<link xlink:type="simple" xlink:href="../142/1379142.xml">
HTTrack</link></coding_system>
</causal_agent>
</browser>
</program>
</sycophant>
</software>
</code>
</flatterer>
</writing>
</written_communication>
</follower>
</person>
</application>
</physical_entity>
</b> uses a Web crawler to create a mirror of a web site for off-line viewing. It is written in <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../021/6021.xml">
C</link></programming_language>
 and released under the <link xlink:type="simple" xlink:href="../683/18938683.xml">
GPL</link>.</entry>
<entry level="1" type="bullet">

 <b><physical_entity wordnetid="100001930" confidence="0.8">
<sycophant wordnetid="110684827" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<follower wordnetid="110099375" confidence="0.8">
<flatterer wordnetid="110095869" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../809/16693809.xml">
ICDL Crawler</link></causal_agent>
</flatterer>
</follower>
</person>
</sycophant>
</physical_entity>
</b> is a <link xlink:type="simple" xlink:href="../193/81193.xml">
cross-platform</link> web crawler written in <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../038/72038.xml">
C++</link></programming_language>
 and intended to crawl websites based on <link>
Website Parse Templates</link> using computer's free <link xlink:type="simple" xlink:href="../218/5218.xml">
CPU</link> resources only.</entry>
<entry level="1" type="bullet">

 <b><weblink xlink:type="simple" xlink:href="http://j-spider.sourceforge.net/">
JSpider</weblink></b> is a highly configurable and customizable web spider engine released under the <link xlink:type="simple" xlink:href="../683/18938683.xml">
GPL</link>.</entry>
<entry level="1" type="bullet">

 <b><weblink xlink:type="simple" xlink:href="http://larbin.sourceforge.net/index-eng.html">
Larbin</weblink></b> by Sebastien Ailleret</entry>
<entry level="1" type="bullet">

 <b><weblink xlink:type="simple" xlink:href="http://sourceforge.net/projects/webtools4larbin/">
Webtools4larbin</weblink></b> by Andreas Beder</entry>
<entry level="1" type="bullet">

 <b><weblink xlink:type="simple" xlink:href="http://bithack.se/methabot/">
Methabot</weblink></b> is a speed-optimized web crawler and command line utility written in <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../021/6021.xml">
C</link></programming_language>
 and released under a 2-clause <link>
BSD License</link>. It features a wide configuration system, a module system and has support for targeted crawling through local filesystem, HTTP or FTP.</entry>
<entry level="1" type="bullet">

 <b><weblink xlink:type="simple" xlink:href="http://www.jaeksoft.com/websearch.html">
Jaeksoft WebSearch</weblink></b> is a web crawler and indexer build over <link xlink:type="simple" xlink:href="../923/522923.xml">
Apache Lucene</link>. It is released under the <link xlink:type="simple" xlink:href="../683/18938683.xml">
GPL v3</link> license.</entry>
<entry level="1" type="bullet">

 <b><structure wordnetid="104341686" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<area wordnetid="102735688" confidence="0.8">
<engine wordnetid="103287733" confidence="0.8">
<motor wordnetid="103789946" confidence="0.8">
<library wordnetid="103660909" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<machine wordnetid="103699975" confidence="0.8">
<room wordnetid="104105893" confidence="0.8">
<link xlink:type="simple" xlink:href="../847/398847.xml">
Nutch</link></room>
</machine>
</device>
</library>
</motor>
</engine>
</area>
</instrumentality>
</artifact>
</structure>
</b> is a crawler written in Java and released under an <link xlink:type="simple" xlink:href="../908/145908.xml">
Apache License</link>. It can be used in conjunction with the <structure wordnetid="104341686" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<area wordnetid="102735688" confidence="0.8">
<library wordnetid="103660909" confidence="0.8">
<room wordnetid="104105893" confidence="0.8">
<link xlink:type="simple" xlink:href="../923/522923.xml">
Lucene</link></room>
</library>
</area>
</artifact>
</structure>
 text indexing package.</entry>
<entry level="1" type="bullet">

 <b><link xlink:type="simple" xlink:href="../867/17161867.xml">
Pavuk</link></b> is a command line web mirror tool with optional X11 GUI crawler and released under the <link xlink:type="simple" xlink:href="../683/18938683.xml">
GPL</link>. It has bunch of advanced features compared to wget and httrack, eg. regular expression based filtering and file creation rules.</entry>
<entry level="1" type="bullet">

 <b><weblink xlink:type="simple" xlink:href="http://dbpubs.stanford.edu:8091/~testbed/doc2/WebBase/webbase-pages.html#Spider">
WebVac</weblink></b> is a crawler used by the <weblink xlink:type="simple" xlink:href="http://dbpubs.stanford.edu:8091/~testbed/doc2/WebBase/">
Stanford WebBase Project</weblink>.</entry>
<entry level="1" type="bullet">

 <b><weblink xlink:type="simple" xlink:href="http://www.cs.cmu.edu/~rcm/websphinx/">
WebSPHINX</weblink></b> (Miller and Bharat, 1998) is composed of a Java class library that implements multi-threaded web page retrieval and HTML parsing, and a graphical user interface to set the starting URLs, to extract the downloaded data and to implement a basic text-based search engine.</entry>
<entry level="1" type="bullet">

 <b><weblink xlink:type="simple" xlink:href="http://www.cwr.cl/projects/WIRE/">
WIRE - Web Information Retrieval Environment</weblink></b> <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2216%22])">16</ref> is a web crawler written in C++ and released under the <link xlink:type="simple" xlink:href="../683/18938683.xml">
GPL</link>, including several policies for scheduling the page downloads and a module for generating reports and statistics on the downloaded pages so it has been used for web characterization.</entry>
<entry level="1" type="bullet">

 <b><weblink xlink:type="simple" xlink:href="http://search.cpan.org/~marclang/ParallelUserAgent-2.57/lib/LWP/Parallel/RobotUA.pm">
LWP::RobotUA</weblink></b> (Langheinrich , 2004) is a <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../939/23939.xml">
Perl</link></programming_language>
 class for implementing well-behaved parallel web robots distributed under <weblink xlink:type="simple" xlink:href="http://dev.perl.org/licenses/">
Perl5's license</weblink>.</entry>
<entry level="1" type="bullet">

 <b><weblink xlink:type="simple" xlink:href="http://www.noviway.com/Code/Web-Crawler.aspx">
Web Crawler</weblink></b> Open source web crawler class for .NET (written in C#).</entry>
<entry level="1" type="bullet">

 <b><weblink xlink:type="simple" xlink:href="http://www.ucw.cz/holmes/">
Sherlock Holmes</weblink></b> Sherlock Holmes gathers and indexes textual data (text files, web pages, ...), both locally and over the network. Holmes is sponsored and commercially used by the Czech web portal <weblink xlink:type="simple" xlink:href="http://www.centrum.cz/">
Centrum</weblink>. It is also used by <web_site wordnetid="106359193" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../203/10189203.xml">
Onet.pl</link></web_site>
.</entry>
<entry level="1" type="bullet">

 <b><software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../033/2315033.xml">
YaCy</link></software>
</b>, a free distributed search engine, built on principles of peer-to-peer networks (licensed under GPL).</entry>
<entry level="1" type="bullet">

 <b><weblink xlink:type="simple" xlink:href="http://sourceforge.net/projects/ruya/">
Ruya</weblink></b> Ruya is an Open Source, high performance <algorithm wordnetid="105847438" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../026/97026.xml">
breadth-first</link></algorithm>
, level-based web crawler. It is used to crawl English and Japanese websites in a well-behaved manner. It is released under the <link xlink:type="simple" xlink:href="../683/18938683.xml">
GPL</link> and is written entirely in the <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../862/23862.xml">
Python</link></programming_language>
 language. A <b><weblink xlink:type="simple" xlink:href="http://ruya.sourceforge.net/ruya.SingleDomainDelayCrawler-class.html">
SingleDomainDelayCrawler</weblink></b> implementation obeys robots.txt with a crawl delay.</entry>
<entry level="1" type="bullet">

 <b><weblink xlink:type="simple" xlink:href="http://uicrawler.sourceforge.net/">
Universal Information Crawler</weblink></b> Fast developing web crawler. Crawls Saves and analyzes the data.</entry>
<entry level="1" type="bullet">

 <b><weblink xlink:type="simple" xlink:href="http://www.agentkernel.com/">
Agent Kernel</weblink></b> A Java framework for schedule, thread, and storage management when crawling.</entry>
<entry level="1" type="bullet">

 <b><weblink xlink:type="simple" xlink:href="http://www.perlspider.com/">
Spider News</weblink></b>, Information regarding building a spider in perl.</entry>
<entry level="1" type="bullet">

 <b><weblink xlink:type="simple" xlink:href="http://arachnode.net">
Arachnode.NET</weblink></b>, is an open source promiscuous Web crawler for downloading, indexing and storing Internet content including e-mail addresses, files, hyperlinks, images, and Web pages. Arachnode.net is written in <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../196/2356196.xml">
C#</link></programming_language>
 using <link xlink:type="simple" xlink:href="../994/13989994.xml">
SQL Server 2005</link> and is released under the <link xlink:type="simple" xlink:href="../683/18938683.xml">
GPL</link>.</entry>
<entry level="1" type="bullet">

 <b><weblink xlink:type="simple" xlink:href="http://dinejs.googlecode.com/">
dine</weblink></b> is a multithreaded <message wordnetid="106598915" confidence="0.8">
<request wordnetid="106513366" confidence="0.8">
<link xlink:type="simple" xlink:href="../881/15881.xml">
Java</link></request>
</message>
 HTTP client/crawler that can be programmed in <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../845/9845.xml">
JavaScript</link></programming_language>
 released under the <link xlink:type="simple" xlink:href="../073/13073.xml">
LGPL</link>.</entry>
<entry level="1" type="bullet">

 <b><weblink xlink:type="simple" xlink:href="http://spci.st.ewi.tudelft.nl/crawljax/">
Crawljax</weblink></b> is an <word wordnetid="106286395" confidence="0.8">
<part wordnetid="113809207" confidence="0.8">
<neologism wordnetid="106294441" confidence="0.8">
<language_unit wordnetid="106284225" confidence="0.8">
<link xlink:type="simple" xlink:href="../950/1610950.xml">
Ajax</link></language_unit>
</neologism>
</part>
</word>
 crawler based on a method which dynamically builds a `state-flow graph' modeling the various navigation paths and states within an Ajax application. Crawljax is written in Java and released under the <link>
BSD License</link>.</entry>
</list>
</p>

</ss1>
</sec>
<sec>
<st>
See also</st>

<p>

<list>
<entry level="1" type="bullet">

<event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../055/237055.xml">
Distributed web crawling</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</entry>
<entry level="1" type="bullet">

<physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<follower wordnetid="110099375" confidence="0.8">
<flatterer wordnetid="110095869" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<sycophant wordnetid="110684827" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<link xlink:type="simple" xlink:href="../799/11442799.xml">
Focused crawler</link></procedure>
</activity>
</psychological_feature>
</act>
</causal_agent>
</rule>
</event>
</sycophant>
</algorithm>
</flatterer>
</follower>
</person>
</physical_entity>
</entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../386/7602386.xml">
Search Engine Indexing</link> - the step after crawling</entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../663/1466663.xml">
Spambot</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../163/3292163.xml">
Spider trap</link></entry>
<entry level="1" type="bullet">

<work wordnetid="104599396" confidence="0.8">
<product wordnetid="104007894" confidence="0.8">
<creation wordnetid="103129123" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<book wordnetid="106410904" confidence="0.8">
<publication wordnetid="106589574" confidence="0.8">
<link xlink:type="simple" xlink:href="../522/1376522.xml">
Spidering Hacks</link></publication>
</book>
</artifact>
</creation>
</product>
</work>
 - an O'Reilly book focused on spider-like programming</entry>
<entry level="1" type="bullet">

<structure wordnetid="104341686" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<area wordnetid="102735688" confidence="0.8">
<facility wordnetid="103315023" confidence="0.8">
<library wordnetid="103660909" confidence="0.8">
<depository wordnetid="103177349" confidence="0.8">
<archive wordnetid="102735086" confidence="0.8">
<room wordnetid="104105893" confidence="0.8">
<link xlink:type="simple" xlink:href="../932/6014932.xml">
Web archiving</link></room>
</archive>
</depository>
</library>
</facility>
</area>
</artifact>
</structure>
</entry>
<entry level="1" type="bullet">

<format wordnetid="106636806" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../890/16863890.xml">
Website Parse Template</link></format>
</entry>
</list>
</p>

</sec>
<sec>
<st>
References</st>

<p>

<reflist>
<entry id="1">
See <weblink xlink:type="simple" xlink:href="http://wiki.foaf-project.org/Scutter">
definition of scutter on FOAF Project's wiki</weblink></entry>
<entry id="2">
  <cite style="font-style:normal">Kobayashi, M. and Takeda, K.&#32;(2000).&#32;"<weblink xlink:type="simple" xlink:href="http://doi.acm.org/10.1145/358923.358934">
Information retrieval on the web</weblink>". <it>ACM Computing Surveys</it>&#32;<b>32</b>&#32;(2): 144–173.&#32;ACM Press. <document wordnetid="106470073" confidence="0.8">
<written_communication wordnetid="106349220" confidence="0.8">
<writing wordnetid="106362953" confidence="0.8">
<link xlink:type="simple" xlink:href="../994/422994.xml">
doi</link></writing>
</written_communication>
</document>
:<weblink xlink:type="simple" xlink:href="http://dx.doi.org/10.1145%2F358923.358934">
10.1145/358923.358934</weblink>.</cite>&nbsp;</entry>
<entry id="3">
 <cite style="font-style:normal">Edwards, J., McCurley, K. S., and Tomlin, J. A.&#32;(2001).&#32;"<weblink xlink:type="simple" xlink:href="http://www10.org/cdrom/papers/210/index.html">
 An adaptive model for optimizing performance of an incremental web crawler</weblink>". <it>In Proceedings of the Tenth Conference on World Wide Web</it>: 106–113.&#32;Hong Kong:&#32;Elsevier Science. <document wordnetid="106470073" confidence="0.8">
<written_communication wordnetid="106349220" confidence="0.8">
<writing wordnetid="106362953" confidence="0.8">
<link xlink:type="simple" xlink:href="../994/422994.xml">
doi</link></writing>
</written_communication>
</document>
:<weblink xlink:type="simple" xlink:href="http://dx.doi.org/10.1145%2F371920.371960">
10.1145/371920.371960</weblink>.</cite>&nbsp;</entry>
<entry id="4">
Marc Najork and Janet L. Wiener. <weblink xlink:type="simple" xlink:href="http://www10.org/cdrom/papers/pdf/p208.pdf">
Breadth-first crawling yields high-quality pages</weblink>. In Proceedings of the Tenth Conference on World Wide Web, pages 114–118, Hong Kong, May 2001. Elsevier Science.</entry>
<entry id="5">
Baeza-Yates, R., Castillo, C., Marin, M. and Rodriguez, A. (2005). <weblink xlink:type="simple" xlink:href="http://www.dcc.uchile.cl/%7Eccastill/papers/baeza05_crawling_country_better_breadth_first_web_page_ordering.pdf">
Crawling a Country: Better Strategies than Breadth-First for Web Page Ordering</weblink>. In Proceedings of the Industrial and Practical Experience track of the 14th conference on World Wide Web, pages 864–872, Chiba, Japan. ACM Press.</entry>
<entry id="6">
Shervin Daneshpajouh, Mojtaba Mohammadi Nasiri, Mohammad Ghodsi, A Fast Community Based Algorithm for Generating Crawler Seeds Set, To be appear in proceeding of 4th International Conference on Web Information Systems and Technologies (<weblink xlink:type="simple" xlink:href="http://www.webist.org/">
WEBIST-2008</weblink>), Funchal, Portugal, May 2008.</entry>
<entry id="7">
Menczer, F. (1997). <weblink xlink:type="simple" xlink:href="http://informatics.indiana.edu/fil/Papers/ICML.ps">
ARACHNID: Adaptive Retrieval Agents Choosing Heuristic Neighborhoods for Information Discovery</weblink>. In D. Fisher, ed., Machine Learning: Proceedings of the 14th International Conference (ICML97). Morgan Kaufmann</entry>
<entry id="8">
Menczer, F. and Belew, R.K. (1998). <weblink xlink:type="simple" xlink:href="http://informatics.indiana.edu/fil/Papers/AA98.ps">
Adaptive Information Agents in Distributed Textual Environments</weblink>. In K. Sycara and M. Wooldridge (eds.) Proc. 2nd Intl. Conf. on Autonomous Agents (Agents '98). ACM Press</entry>
<entry id="9">
Chakrabarti, S., van den Berg, M., and Dom, B. (1999). <weblink xlink:type="simple" xlink:href="http://web.archive.org/web/20040317210216/http://www.fxpal.com/people/vdberg/pubs/www8/www1999f.pdf">
Focused crawling: a new approach to topic-specific web resource discovery</weblink>. Computer Networks, 31(11–16):1623–1640.</entry>
<entry id="10">
Pinkerton, B. (1994). <weblink xlink:type="simple" xlink:href="http://web.archive.org/web/20010904075500/http://archive.ncsa.uiuc.edu/SDG/IT94/Proceedings/Searching/pinkerton/WebCrawler.html">
Finding what people want: Experiences with the WebCrawler</weblink>. In Proceedings of the First World Wide Web Conference, Geneva, Switzerland.</entry>
<entry id="11">
Diligenti, M., Coetzee, F., Lawrence, S., Giles, C. L., and Gori, M. (2000). <weblink xlink:type="simple" xlink:href="http://nautilus.dii.unisi.it/pubblicazioni/files/conference/2000-Diligenti-VLDB.pdf">
Focused crawling using context graphs</weblink>. In Proceedings of 26th International Conference on Very Large Databases (VLDB), pages 527-534, Cairo, Egypt.</entry>
<entry id="12">
Ipeirotis, P., Ntoulas, A., Cho, J., Gravano, L. (2005) <weblink xlink:type="simple" xlink:href="http://pages.stern.nyu.edu/~panos/publications/icde2005.pdf">
Modeling and managing content changes in text databases</weblink>. In Proceedings of the 21st IEEE International Conference on Data Engineering, pages 606-617, April 2005, Tokyo.</entry>
<entry id="13">
Koster, M. (1995). Robots in the web: threat or treat ? ConneXions, 9(4).</entry>
<entry id="14">
Koster, M. (1996). <weblink xlink:type="simple" xlink:href="http://www.robotstxt.org/wc/exclusion.html">
A standard for robot exclusion</weblink>.</entry>
<entry id="15">
Koster, M. (1993). <weblink xlink:type="simple" xlink:href="http://www.robotstxt.org/wc/guidelines.html">
Guidelines for robots writers</weblink>.</entry>
<entry id="17">
Dill, S., Kumar, R., Mccurley, K. S., Rajagopalan, S., Sivakumar, D., and Tomkins, A. (2002). <weblink xlink:type="simple" xlink:href="http://www.mccurley.org/papers/fractal.pdf">
Self-similarity in the web</weblink>. ACM Trans. Inter. Tech., 2(3):205–223.</entry>
<entry id="16">
Baeza-Yates, R. and Castillo, C. (2002). <weblink xlink:type="simple" xlink:href="http://www.dcc.uchile.cl/~ccastill/papers/baeza02balancing.pdf">
Balancing volume, quality and freshness in web crawling</weblink>. In Soft Computing Systems – Design, Management and Applications, pages 565–572, Santiago, Chile. IOS Press Amsterdam.</entry>
<entry id="19">
Brin, S. and Page, L. (1998). <weblink xlink:type="simple" xlink:href="http://infolab.stanford.edu/~backrub/google.html">
The anatomy of a large-scale hypertextual Web search engine</weblink>. Computer Networks and ISDN Systems, 30(1-7):107–117.</entry>
<entry id="18">
"<weblink xlink:type="simple" xlink:href="http://www.scit.wlv.ac.uk/%7Ecm1993/papers/Web_Crawling_Ethics_preprint.doc">
Web crawling ethics revisited: Cost, privacy and denial of service</weblink>".&#32;<it>Journal of the American Society for Information Science and Technology</it>&#32;(2006).</entry>
<entry id="21">
Eichmann, D. (1994). <weblink xlink:type="simple" xlink:href="http://mingo.info-science.uiowa.edu/eichmann/www94/Spider.ps">
The RBSE spider: balancing effective search against Web load</weblink>. In Proceedings of the First World Wide Web Conference, Geneva, Switzerland.</entry>
<entry id="20">
Shkapenyuk, V. and Suel, T. (2002). <weblink xlink:type="simple" xlink:href="http://cis.poly.edu/tr/tr-cis-2001-03.pdf">
Design and implementation of a high performance distributed web crawler</weblink>. In Proceedings of the 18th International Conference on Data Engineering (ICDE), pages 357-368, San Jose, California. IEEE CS Press.</entry>
<entry id="23">
Zeinalipour-Yazti, D. and Dikaiakos, M. D. (2002). <weblink xlink:type="simple" xlink:href="http://www.cs.ucr.edu/~csyiazti/downloads/papers/ngits02/ngits02.pdf">
Design and implementation of a distributed crawler and filtering processor</weblink>. In Proceedings of the Fifth Next Generation Information Technologies and Systems (NGITS), volume 2382 of Lecture Notes in Computer Science, pages 58–74, Caesarea, Israel. Springer.</entry>
<entry id="22">
McBryan, O. A. (1994). GENVL and WWWW: Tools for taming the web. In Proceedings of the First World Wide Web Conference, Geneva, Switzerland.</entry>
<entry id="25">
Chakrabarti, S. (2003). <weblink xlink:type="simple" xlink:href="http://www.cs.berkeley.edu/~soumen/mining-the-web/">
Mining the Web</weblink>. Morgan Kaufmann Publishers. ISBN 1-55860-754-4</entry>
<entry id="24">
Risvik, K. M. and Michelsen, R. (2002). <weblink xlink:type="simple" xlink:href="http://citeseer.ist.psu.edu/rd/1549722%2C509701%2C1%2C0.25%2CDownload/http://citeseer.ist.psu.edu/cache/papers/cs/26004/http:zSzzSzwww.idi.ntnu.nozSz%7EalgkonzSzgenereltzSzse-dynamicweb1.pdf/risvik02search.pdf">
Search Engines and Web Dynamics</weblink>. Computer Networks, vol. 39, pp. 289–302, June 2002.</entry>
</reflist>
</p>
<p>

<list>
<entry level="1" type="bullet">

  <cite style="font-style:normal">Abiteboul, S., Preda, M., and Cobena, G.&#32;(2003).&#32;"<weblink xlink:type="simple" xlink:href="http://www2003.org/cdrom/papers/refereed/p007/p7-abiteboul.html">
Adaptive on-line page importance computation</weblink>". <it>In Proceedings of the twelfth international conference on World Wide Web</it>: 280–290.&#32;Budapest, Hungary:&#32;ACM Press. <document wordnetid="106470073" confidence="0.8">
<written_communication wordnetid="106349220" confidence="0.8">
<writing wordnetid="106362953" confidence="0.8">
<link xlink:type="simple" xlink:href="../994/422994.xml">
doi</link></writing>
</written_communication>
</document>
:<weblink xlink:type="simple" xlink:href="http://dx.doi.org/10.1145%2F775152.775192">
10.1145/775152.775192</weblink>.</cite>&nbsp;</entry>
<entry level="1" type="bullet">

Boldi, P., Codenotti, B., Santini, M., and Vigna, S. (2004a). <weblink xlink:type="simple" xlink:href="http://vigna.dsi.unimi.it/ftp/papers/UbiCrawler.pdf">
UbiCrawler: a scalable fully distributed Web crawler</weblink>. Software, Practice and Experience, 34(8):711–726.</entry>
<entry level="1" type="bullet">

Boldi, P., Santini, M., and Vigna, S. (2004b). <weblink xlink:type="simple" xlink:href="http://vigna.dsi.unimi.it/ftp/papers/ParadoxicalPageRank.pdf">
Do your worst to make the best: Paradoxical effects in pagerank incremental computations</weblink>. In Proceedings of the third Workshop on Web Graphs (WAW), volume 3243 of Lecture Notes in Computer Science, pages 168-180, Rome, Italy. Springer.</entry>
<entry level="1" type="bullet">

Burner, M. (1997). <weblink xlink:type="simple" xlink:href="http://www.webtechniques.com/archives/1997/05/burner/">
Crawling towards eternity – building an archive of the World Wide Web</weblink>. Web Techniques, 2(5).</entry>
<entry level="1" type="bullet">

Castillo, C. (2004). <weblink xlink:type="simple" xlink:href="http://chato.cl/research/crawling_thesis">
Effective Web Crawling</weblink>. PhD thesis, University of Chile.</entry>
<entry level="1" type="bullet">

  <cite style="font-style:normal">Cho, J., Garcia-Molina, H., and Page, L.&#32;(1998).&#32;"<weblink xlink:type="simple" xlink:href="http://dbpubs.stanford.edu/pub/1998-51">
Efficient crawling through URL ordering</weblink>". <it>In Proceedings of the seventh conference on World Wide Web</it>.</cite>&nbsp;</entry>
<entry level="1" type="bullet">

Cho, J. and Garcia-Molina, H. (2000). <weblink xlink:type="simple" xlink:href="http://www.cs.brown.edu/courses/cs227/2002/cache/Cho.pdf">
Synchronizing a database to improve freshness</weblink>. In Proceedings of ACM International Conference on Management of Data (SIGMOD), pages 117-128, Dallas, Texas, USA.</entry>
<entry level="1" type="bullet">

Cho, J. and Garcia-Molina, H. (2002). <weblink xlink:type="simple" xlink:href="http://portal.acm.org/citation.cfm?id=511464">
Parallel crawlers</weblink>. In Proceedings of the eleventh international conference on World Wide Web, pages 124–135, Honolulu, Hawaii, USA. ACM Press.</entry>
<entry level="1" type="bullet">

Cho, J. and Garcia-Molina, H. (2003). <weblink xlink:type="simple" xlink:href="http://portal.acm.org/citation.cfm?doid=857166.857170">
Estimating frequency of change</weblink>. ACM Transactions on Internet Technology, 3(3).</entry>
<entry level="1" type="bullet">

  <cite style="font-style:normal">Cothey, V.&#32;(2004).&#32;"<weblink xlink:type="simple" xlink:href="http://dx.doi.org/10.1002/asi.20078">
Web-crawling reliability</weblink>". <it>Journal of the American Society for Information Science and Technology</it>&#32;<b>55</b>&#32;(14). <document wordnetid="106470073" confidence="0.8">
<written_communication wordnetid="106349220" confidence="0.8">
<writing wordnetid="106362953" confidence="0.8">
<link xlink:type="simple" xlink:href="../994/422994.xml">
doi</link></writing>
</written_communication>
</document>
:<weblink xlink:type="simple" xlink:href="http://dx.doi.org/10.1002%2Fasi.20078+Web-crawling+reliability%5D">
10.1002/asi.20078 Web-crawling reliability]</weblink>.</cite>&nbsp;</entry>
<entry level="1" type="bullet">

Edward G. Coffman, Z. Liu, R. W. (1998). Optimal robot scheduling for Web search engines. Journal of Scheduling, 1(1):15–29.</entry>
<entry level="1" type="bullet">

Heydon, A. and Najork, M. (1999). <weblink xlink:type="simple" xlink:href="http://www.cindoc.csic.es/cybermetrics/pdf/68.pdf">
Mercator: A scalable, extensible Web crawler</weblink>. World Wide Web, 2(4):219–229.</entry>
<entry level="1" type="bullet">

Lawrence, S. and Giles, C. L. (2000). <weblink xlink:type="simple" xlink:href="http://www.nature.com/doifinder/10.1038/21987">
Accessibility of information on the web</weblink>. Intelligence, 11(1), 32–39.</entry>
<entry level="1" type="bullet">

Miller, R. and Bharat, K. (1998). <weblink xlink:type="simple" xlink:href="http://www.cs.cmu.edu/~rcm/papers/www7/www7.html">
 Sphinx: A framework for creating personal, site-specific web crawlers</weblink>. In Proceedings of the seventh conference on World Wide Web, Brisbane, Australia. Elsevier Science.</entry>
<entry level="1" type="bullet">

  <cite style="font-style:normal">Nelson, M. L. , Van de Sompel, H. , Liu, X., Harrison, T. L. and McFarland, N.&#32;(2005).&#32;"<weblink xlink:type="simple" xlink:href="http://arxiv.org/abs/cs/0503069">
 mod_oai: An Apache module for metadata harvesting</weblink>". <it>In Proceedings of the 9th European Conference on Research and Advanced Technology for Digital Libraries (ECDL 2005)</it>: 509.</cite>&nbsp;</entry>
<entry level="1" type="bullet">

  <cite style="font-style:normal">Pant, G., Srinivasan, P., Menczer, F.&#32;(2004). "<weblink xlink:type="simple" xlink:href="http://dollar.biz.uiowa.edu/~pant/Papers/crawling.pdf">
Crawling the Web</weblink>".&#32;<it>Web Dynamics: Adapting to Change in Content, Size, Topology and Use, edited by M. Levene and A. Poulovassilis</it>: 153-178.</cite>&nbsp;</entry>
<entry level="1" type="bullet">

da Silva, A. S., Veloso, E. A., Golgher, P. B., Ribeiro-Neto, B. A., Laender, A. H. F., and Ziviani, N. (1999). <weblink xlink:type="simple" xlink:href="http://www.dcc.fua.br/~alti/pubs/spire99_cow.ps.gz">
Cobweb – a crawler for the Brazilian web</weblink>. In Proceedings of String Processing and Information Retrieval (SPIRE), pages 184–191, Cancun, Mexico. IEEE CS Press.</entry>
<entry level="1" type="bullet">

 Yibei Ling and Jie Mi, An optimal trade-off between content freshness and refresh cost, Journal of applied probability, 2004, vol. 41, no3, pp. 721-734.</entry>
</list>
</p>


</sec>
</bdy>
</algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</sycophant>
</article>
