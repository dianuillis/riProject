<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 20:25:27[mciao0827] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<structure  confidence="0.8" wordnetid="104341686">
<artifact  confidence="0.8" wordnetid="100021939">
<instrumentality  confidence="0.8" wordnetid="103575240">
<device  confidence="0.8" wordnetid="103183080">
<depth  confidence="0.9511911446218017" wordnetid="105134547">
<header>
<title>Palette (computing)</title>
<id>3361242</id>
<revision>
<id>231695108</id>
<timestamp>2008-08-13T15:12:33Z</timestamp>
<contributor>
<username>Ciphers</username>
<id>7643502</id>
</contributor>
</revision>
<categories>
<category>Color depths</category>
<category>Computing output devices</category>
<category>Computer graphics data structures</category>
</categories>
</header>
<bdy>

<table style="text-align:center;" class="infobox" cellspacing="0">
<row>
<header style="background:#ccf;">
 <link xlink:type="simple" xlink:href="../448/331448.xml">
Pixel color depth</link></header>
</row>
<row>
<col>
 
<link xlink:type="simple" xlink:href="../923/97923.xml">
1-bit monochrome</link>
<link xlink:type="simple" xlink:href="../061/463061.xml">
8-bit grayscale</link><p>

<extent wordnetid="105123416" confidence="0.8">
<magnitude wordnetid="105090441" confidence="0.8">
<property wordnetid="104916342" confidence="0.8">
<depth wordnetid="105134547" confidence="0.8">
<link xlink:type="simple" xlink:href="../302/2130302.xml">
8-bit color</link></depth>
</property>
</magnitude>
</extent>

<extent wordnetid="105123416" confidence="0.8">
<magnitude wordnetid="105090441" confidence="0.8">
<property wordnetid="104916342" confidence="0.8">
<depth wordnetid="105134547" confidence="0.8">
<link xlink:type="simple" xlink:href="../868/80868.xml">
16-bit Highcolor</link></depth>
</property>
</magnitude>
</extent>

<extent wordnetid="105123416" confidence="0.8">
<magnitude wordnetid="105090441" confidence="0.8">
<property wordnetid="104916342" confidence="0.8">
<depth wordnetid="105134547" confidence="0.8">
<link xlink:type="simple" xlink:href="../682/294682.xml">
24-bit Truecolor</link></depth>
</property>
</magnitude>
</extent>

<extent wordnetid="105123416" confidence="0.8">
<magnitude wordnetid="105090441" confidence="0.8">
<property wordnetid="104916342" confidence="0.8">
<depth wordnetid="105134547" confidence="0.8">
<link xlink:type="simple" xlink:href="../251/9150251.xml">
30/36/48-bit Deep Color</link></depth>
</property>
</magnitude>
</extent>
</p>
</col>
</row>
<row>
<header>
Related</header>
</row>
<row>
<col>
 
<link xlink:type="simple" xlink:href="../989/25989.xml">
RGB color model</link>
<structure wordnetid="104341686" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<link xlink:type="simple" xlink:href="../310/3563310.xml">
Indexed color</link></device>
</instrumentality>
</artifact>
</structure>

<structure wordnetid="104341686" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<link xlink:type="simple" xlink:href="../242/3361242.xml">
Palette</link></device>
</instrumentality>
</artifact>
</structure>

<link xlink:type="simple" xlink:href="../621/286621.xml#xpointer(//*[./st=%22Web-safe+colors%22])">
Web-safe color</link></col>
</row>

</table>
<p>

In <link xlink:type="simple" xlink:href="../210/18567210.xml">
computer graphics</link>, a <b>palette</b> is either a given, finite set of <link xlink:type="simple" xlink:href="../921/5921.xml">
color</link>s for the management of <link xlink:type="simple" xlink:href="../726/503726.xml">
digital image</link>s (that is, a <b>color palette</b>), or a small on-screen graphical element for choosing from a limited set of choices, not necessarily colors (such as a <b>tools palette</b>).</p>
<p>

Depending on the context (an engineer's technical specification, an advertisement, a programmers' guide, an image file specification, a user's manual, etc.) the term <it>palette</it> and related terms such as <it>Web palette</it> and <it>RGB palette</it>, for example, can have somewhat different meanings.</p>

<sec>
<st>
Color palettes</st>

<p>

The following are some of the widely used meanings for <it>color palette</it> in computing.</p>
<p>

<list>
<entry level="1" type="bullet">

 The total number of colors that a given system is able to generate or manage; the term  <it>full palette</it> is often encountered in this sense. For example, <extent wordnetid="105123416" confidence="0.8">
<magnitude wordnetid="105090441" confidence="0.8">
<property wordnetid="104916342" confidence="0.8">
<depth wordnetid="105134547" confidence="0.8">
<link xlink:type="simple" xlink:href="../868/80868.xml">
Highcolor</link></depth>
</property>
</magnitude>
</extent>
 displays are said to have a <link xlink:type="simple" xlink:href="../460/15547460.xml#xpointer(//*[./st=%2216-bit+RGB%22])">
16-bit RGB palette</link>.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 The limited fixed color selection that a given display adapter can offer when its <link xlink:type="simple" xlink:href="../420/727420.xml">
hardware register</link>s are appropriately set (<it>fixed palette</it> selection). For example, the <substance wordnetid="100019613" confidence="0.8">
<standard wordnetid="107260623" confidence="0.8">
<paper wordnetid="114974264" confidence="0.8">
<card wordnetid="102962545" confidence="0.8">
<part wordnetid="113809207" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<material wordnetid="114580897" confidence="0.8">
<link xlink:type="simple" xlink:href="../231/474231.xml">
Color Graphics Adapter</link></material>
</system_of_measurement>
</part>
</card>
</paper>
</standard>
</substance>
 (CGA) can be set to show the so-called palette #1 or the palette #2 in color graphic mode: two combinations of <link xlink:type="simple" xlink:href="../989/15544989.xml#xpointer(//*[./st=%22CGA%22])">
4 fixed colors</link> each.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 The limited selection of colors that a given system is able to display simultaneously, generally picked from a wider <it>full</it> palette; <it>selected colors</it> or <it>picked colors</it> are also used. In this case, the color selection is always chosen by <link xlink:type="simple" xlink:href="../309/5309.xml">
software</link>, both by the user or by a program. For example, the standard <standard wordnetid="107260623" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../041/73041.xml">
VGA</link></system_of_measurement>
</standard>
 display adapter is said to provide a palette of <link xlink:type="simple" xlink:href="../655/15542655.xml#xpointer(//*[./st=%22MCGA+and+VGA%22])">
256 simultaneous colors</link> from a total of 262,144 different colors.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 The <link xlink:type="simple" xlink:href="../420/727420.xml">
hardware register</link>s of the display subsystem in which the selected colors' values are to be loaded in order to show them, also referred as the <it>hardware palette</it> or <it><link xlink:type="simple" xlink:href="../129/3212129.xml">
Color Look-Up Table</link></it> (CLUT). For example, the hardware registers of the <link xlink:type="simple" xlink:href="../980/1980.xml">
Commodore Amiga</link> are known both as their color palette and their CLUT, depending on sources.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 A given color selection officially standardized by some body or corporation; <it>default palette</it> or <it>system palette</it> are also used for this meaning. For example, the well known <link xlink:type="simple" xlink:href="../621/286621.xml">
Web colors</link> for use with Internet <link xlink:type="simple" xlink:href="../173/33173.xml">
browser</link>s, or the <link xlink:type="simple" xlink:href="../890/18890.xml">
Microsoft Windows</link> <link xlink:type="simple" xlink:href="../770/15546770.xml#xpointer(//*[./st=%22Microsoft+Windows+default+16-color+palette%22])">
default palette</link>.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 The limited color selection inside a given <link xlink:type="simple" xlink:href="../310/3563310.xml">
indexed color</link> <link xlink:type="simple" xlink:href="../981/2679981.xml">
image file</link> as <format wordnetid="106636806" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../702/12702.xml">
GIF</link></format>
, for example, although the expressions <it>color table</it> or <it>color map</it> are also generally used.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 The full list of the colors a given <link xlink:type="simple" xlink:href="../726/503726.xml">
digital image</link> has, even when the image does not employ <link xlink:type="simple" xlink:href="../310/3563310.xml">
indexed color</link> <link xlink:type="simple" xlink:href="../665/23665.xml">
pixel</link> encoding; <it>image palette</it> and <it>image colors</it> mean the same.</entry>
</list>
</p>

</sec>
<sec>
<st>
GUI palettes</st>
<p>

<image location="right" width="300px" src="AppleIIGSOS.png" type="thumb">
<caption>

An example of an on-screen color palette, as provided with the <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../157/290157.xml">
Apple GS/OS</link></O>
.
</caption>
</image>
</p>
<p>

<link xlink:type="simple" xlink:href="../293/12293.xml">
Graphical user interface</link> (GUI) systems use on-screen palettes, including:</p>
<p>

<list>
<entry level="1" type="bullet">

 An arrangement of a limited set of user or system colors that can be chosen. In such cases, the expression <it>color palette</it> or <it>user color palette</it> are common equivalents. This usage resembles a true <link xlink:type="simple" xlink:href="../756/194756.xml">
artist's palette</link>.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 A tool palette, a rectangular area, called a <link xlink:type="simple" xlink:href="../455/3466455.xml">
palette window</link>, of the application screen with <link xlink:type="simple" xlink:href="../178/947178.xml">
button</link>s, <link xlink:type="simple" xlink:href="../011/355011.xml">
icon</link>s or another <link xlink:type="simple" xlink:href="../293/12293.xml">
GUI</link> controls available for quick command or symbol access; if the user is able to place it anywhere by moving it through a <link xlink:type="simple" xlink:href="../056/7056.xml">
mouse</link> or similar pointing device, it is known as a <it>floating palette.</it> A palette for choosing colors can be also a floating palette.</entry>
</list>
</p>

</sec>
<sec>
<st>
Related terms and technologies</st>

<p>

<indent level="1">

<it>See also <structure wordnetid="104341686" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<link xlink:type="simple" xlink:href="../310/3563310.xml">
Indexed color</link></device>
</instrumentality>
</artifact>
</structure>
</it>
</indent>

The terms <it>color palette</it>, <it>indexed color</it>, and related terms have been used with various differences in meaning, as discussed below.</p>
<p>

The <link xlink:type="simple" xlink:href="../989/25989.xml">
RGB color model</link> is today the most usual method to produce and encode colors; but colors in palettes may or may not be reproduced through red-green-blue primaries, depending on a given display hardware. To express that a given palette usage is based in the RGB color model, the term <it>RGB palette</it> is commonly employed, within many of the contexts in which the term <it>palette</it> can be used (see the previous section). The RGB color model is usually assumed by default for palettes, if not otherwise noted.</p>
<p>

<structure wordnetid="104341686" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<link xlink:type="simple" xlink:href="../310/3563310.xml">
Indexed color</link></device>
</instrumentality>
</artifact>
</structure>
 is a technique to manage image colors in a limited fashion, in order to save <link xlink:type="simple" xlink:href="../847/25847.xml">
RAM</link> and video <link xlink:type="simple" xlink:href="../300/5300.xml">
memory</link> buffer space, file storage space, telecom <link xlink:type="simple" xlink:href="../827/15612827.xml">
bandwidth</link>, and to speed up display refresh and telecom transfers. Instead of storing and managing every primary color component of every <link xlink:type="simple" xlink:href="../665/23665.xml">
pixel</link>, the most representative colors, or the fixed hardware colors, are grouped into a limited size <it>palette</it>: an array of color elements, in which each element (a color) is indexed by its position. This way, the pixels contains not the full color components but merely their index into the <it>palette</it>; this is sometimes referred as <it>pseudocolor</it>.</p>
<p>

This technique saves a lot of memory/storage space and/or transmission time: if the full RGB color palette is <link xlink:type="simple" xlink:href="../682/294682.xml">
truecolor</link>, there are <link xlink:type="simple" xlink:href="../460/15547460.xml#xpointer(//*[./st=%2224-bit+RGB%22])">
16,777,216 different possible colors</link>, and each pixel needs <link xlink:type="simple" xlink:href="../348/2507348.xml">
24 bit</link>s, or 3 <link xlink:type="simple" xlink:href="../365/3365.xml">
byte</link>s. A typical 640×480 <link xlink:type="simple" xlink:href="../408/426408.xml">
VGA</link> resolution, truecolor uncompressed image needs 640×480×3&nbsp;=&nbsp;921,600 bytes (900 KiB). Limiting the image colors to 256, every pixel needs only <link xlink:type="simple" xlink:href="../148/45148.xml">
8 bit</link>s, 1 byte, so the example image now needs only 640×480×1&nbsp;=&nbsp;307,200 bytes (300 KiB), plus 256×3&nbsp;=&nbsp;768 additional bytes to store the palette map (assuming 24-bit RGB), approximately one third of the original size. Smaller palettes (4-bit 16 colors, 2-bit 4 colors) can pack the pixels even more (to 1/6 or 1/12), obviously at cost of color accuracy. While it is acceptable for little images (<link xlink:type="simple" xlink:href="../011/355011.xml">
icons</link>) or very simple graphics, to reproduce real-life images this loss of color availability becomes more of a problem. Some clever tricks, as <link xlink:type="simple" xlink:href="../732/4979732.xml">
color quantization</link>, <link xlink:type="simple" xlink:href="../507/113507.xml">
anti-aliasing</link>, and <link xlink:type="simple" xlink:href="../526/1243526.xml">
dithering</link> combined together can approximate indexed 256-color images to the original one.</p>
<p>

A <link xlink:type="simple" xlink:href="../237/14124237.xml">
palette entry</link> is one of the color items in a color palette (in hardware or in a file).</p>
<p>

Indexed color has been widely used in early <link xlink:type="simple" xlink:href="../137/18457137.xml">
personal computer</link>s and display adapters' hardware to reduce costs. Notable computer graphics systems extensively (or even exclusively) using pseudocolor palettes include <substance wordnetid="100019613" confidence="0.8">
<standard wordnetid="107260623" confidence="0.8">
<paper wordnetid="114974264" confidence="0.8">
<card wordnetid="102962545" confidence="0.8">
<part wordnetid="113809207" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<material wordnetid="114580897" confidence="0.8">
<link xlink:type="simple" xlink:href="../527/160527.xml">
EGA</link></material>
</system_of_measurement>
</part>
</card>
</paper>
</standard>
</substance>
 and <link xlink:type="simple" xlink:href="../041/73041.xml">
VGA</link> (for the <link xlink:type="simple" xlink:href="../803/49803.xml">
IBM PC compatible</link>s), the <link xlink:type="simple" xlink:href="../ury/22nd_century.xml">
Atari ST</link> and <link xlink:type="simple" xlink:href="../980/1980.xml">
Amiga</link>'s <link xlink:type="simple" xlink:href="../784/22784.xml">
OCS</link> and <link xlink:type="simple" xlink:href="../352/101352.xml">
AGA</link>.</p>
<p>

The same way, image file formats used to encapsulate this kind of images, as <format wordnetid="106636806" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../746/24746.xml">
PCX</link></format>
 and <format wordnetid="106636806" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../702/12702.xml">
GIF</link></format>
, which along with a header and the raw image data store the palette color maps as well, arose in the same period (circa the <link xlink:type="simple" xlink:href="../640/34640.xml">
1980</link>'s). Some of the more modern image file formats as <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<format wordnetid="106636806" confidence="0.8">
<link xlink:type="simple" xlink:href="../336/250336.xml">
BMP</link></format>
</information>
</message>
, <link xlink:type="simple" xlink:href="../478/145478.xml">
TIFF</link> and <format wordnetid="106636806" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../306/24306.xml">
PNG</link></format>
 also allow indexed color modes, generally up to 16 or 256 (four or eight bits per pixel). All these file formats commonly supports some <link xlink:type="simple" xlink:href="../469/46469.xml">
compression</link> scheme, enhancing their ability to store the indexed color images at smaller file sizes.</p>
<p>

A <link xlink:type="simple" xlink:href="../129/3212129.xml">
Color Look-up Table</link> (CLUT) is a hardware resource of the display subsystem, which can be used for different purposes. One is to contain the color values for a given palette in some indexed color graphic mode (lets say, 320×200 with 256 colors, often used for computer <link xlink:type="simple" xlink:href="../363/5363.xml">
videogame</link>s). Today, CLUTs are used mainly to perform <link xlink:type="simple" xlink:href="../466/68466.xml">
gamma</link> and <link xlink:type="simple" xlink:href="../164/7164.xml">
color temperature</link> calibrations by hardware. Although the term <it>color look-up table</it> was coined in display hardware design field (as the machines always come first), it has been ported to the software jargon as a near synonym of <it>palette</it> too; but in these cases, it can mean not only the <it>color map</it> of an indexed color image but also <it>any</it> intermediary <link xlink:type="simple" xlink:href="../457/356457.xml">
look-up table</link> which maps one colors into another, regardless of indexed or truecolor is used<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref>. In order to avoid confusion, the term <it>CLUT</it> is preferred for the color hardware registers and <it>palette</it> for the software color maps when both are employed in the same paper<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%222%22])">2</ref>.</p>
<p>

<extent wordnetid="105123416" confidence="0.8">
<magnitude wordnetid="105090441" confidence="0.8">
<property wordnetid="104916342" confidence="0.8">
<depth wordnetid="105134547" confidence="0.8">
<link xlink:type="simple" xlink:href="../061/463061.xml">
Grayscale</link></depth>
</property>
</magnitude>
</extent>
 images usually do not need palettes. The pixel values can be directly the gray level in a given range (0 to 15, 0 to 255), so image files that deal with grayscale images usually do not store a palette color map for this purpose. But when displayed with color devices, generally it is necessary to synthesize a <link xlink:type="simple" xlink:href="../770/15546770.xml#xpointer(//*[./st=%22Grayscale+palettes%22])">
grayscale color map</link> to manage the image properly (either by loading the color hardware registers/CLUT, or by converting the image to RGB in an RGB video memory). Some image file formats, such as <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<format wordnetid="106636806" confidence="0.8">
<link xlink:type="simple" xlink:href="../336/250336.xml">
BMP file format</link></format>
</information>
</message>
 implement grayscale by storing a grayscale palette made with full RGB values.</p>
<p>

<link xlink:type="simple" xlink:href="../448/331448.xml">
Color depth</link> denotes how many <link xlink:type="simple" xlink:href="../364/3364.xml">
bit</link>s are employed to store color information in the image pixels: the more the colors managed, the more the bits employed. The pixel's bit patterns can be interpreted as whole integer numbers (which is the case for indexed color images' indices) or by assigning some bits for color related management, as relative intensities for every primary red-green-blue in RGB truecolor images. Indexed color palette sizes often have up to 2 raised to some power entries, which easily match pixel's depth bit patterns: 22&nbsp;=&nbsp;4, 24&nbsp;=&nbsp;16 or 28&nbsp;=&nbsp;256 are the most common choices. <extent wordnetid="105123416" confidence="0.8">
<magnitude wordnetid="105090441" confidence="0.8">
<property wordnetid="104916342" confidence="0.8">
<depth wordnetid="105134547" confidence="0.8">
<link xlink:type="simple" xlink:href="../868/80868.xml">
Highcolor</link></depth>
</property>
</magnitude>
</extent>
 uses RGB full palettes either <link xlink:type="simple" xlink:href="../460/15547460.xml#xpointer(//*[./st=%2215-bit+RGB%22])">
15-bit</link>s and <link xlink:type="simple" xlink:href="../460/15547460.xml#xpointer(//*[./st=%2215-bit+RGB%22])">
16-bits depth</link>, while truecolor uses RGB full palettes of <link xlink:type="simple" xlink:href="../460/15547460.xml#xpointer(//*[./st=%2224-bit+RGB%22])">
24-bits depth</link> or greater.</p>

</sec>
<sec>
<st>
<it>Adaptive</it> versus <it>master</it> palettes</st>

<p>

When using <link xlink:type="simple" xlink:href="../310/3563310.xml">
indexed color</link> techniques, real life images are represented with better fidelity to the <link xlink:type="simple" xlink:href="../682/294682.xml">
truecolor</link> original one by using <link xlink:type="simple" xlink:href="../770/15546770.xml#xpointer(//*[./st=%22Adaptive+palettes%22])">
adaptive palette</link>s (sometimes spelled <it>adaptative palettes</it>), in which the colors are selected or <link xlink:type="simple" xlink:href="../732/4979732.xml">
quantized</link> through some algorithm directly from the original image (by picking the most frequent colors). This way, and with further <link xlink:type="simple" xlink:href="../526/1243526.xml">
dithering</link>, the indexed color image can nearly match the original.</p>
<p>

But this creates a heavy dependence between the image <link xlink:type="simple" xlink:href="../665/23665.xml">
pixel</link>s and its adaptive palette. Assuming a limited 8-bit depth graphic display, it is necessary to load a given image's adaptive palette into the color hardware registers previously to the load of the image surface in itself into the video <link xlink:type="simple" xlink:href="../963/149963.xml">
frame buffer</link>. So to see on the screen different images with different adaptive palettes, they must to be loaded one by one, as in a <link xlink:type="simple" xlink:href="../931/748931.xml">
slideshow</link>. This way, all works fine. Here are samples of four different indexed color images with color patches to show their respective (and largely incompatible) adaptive palettes:</p>
<p>

<indent level="1">

| style="border-style: none" border="0" cellpadding="4"
</indent>
|-
|| <image width="150px" src="IndexedColorSample_(Strawberries_picked).png">
<caption>

IndexedColorSample (Strawberries picked).png
</caption>
</image>

|| <image width="150px" src="IndexedColorSample_(Caerulea3_crop).png">
<caption>

IndexedColorSample (Caerulea3 crop).png
</caption>
</image>

|-
|| <image width="150px" src="IndexedColorSample_(Lapis.elephant.800pix.060203).png">
<caption>

IndexedColorSample (Lapis.elephant.800pix.060203).png
</caption>
</image>

|| <image width="150px" src="IndexedColorSample_(Lemon).png">
<caption>

IndexedColorSample (Lemon).png
</caption>
</image>

|}</p>
<p>

An application can, in turn, show many different <link xlink:type="simple" xlink:href="../353/18935353.xml">
image thumbnail</link>s in a mosaic on screen. It is obvious that the program cannot load all the adaptive palettes of every displayed image thumbnail at the same time in the hardware color registers. A solution is to use a unique, common <it><link xlink:type="simple" xlink:href="../770/15546770.xml#xpointer(//*[./st=%22RGB+arrangements%22])">
master palette</link></it> or <it>universal palette</it>, which can be used to display with reasonable accuracy any kind of image.</p>
<p>

This is done by selecting colors in such way that the master palette comprises a full <link xlink:type="simple" xlink:href="../506/159506.xml">
RGB color space</link> "in miniature", limiting the possible levels that the red, green and blue components may have. This kind of arrangement is sometimes referred as a <it>uniform palette</it><ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%223%22])">3</ref>. The normal human <link xlink:type="simple" xlink:href="../898/157898.xml">
eye</link> has sensibility to the three primary colors in different degrees: the more to the green, the less to the blue. So RGB arrangements can take advantage of this by assigning more levels for the green component and less to the blue.</p>
<p>

A master palette built this way can be filled with up to <link xlink:type="simple" xlink:href="../770/15546770.xml#xpointer(//*[./st=%228-8-4+levels+RGB%22])">
8R×8G×4B&nbsp;=&nbsp;256 colors</link>, but this does not leave space in the palette for reserved colors, color indices that the program could use for special purposes. It is more general to use only <link xlink:type="simple" xlink:href="../770/15546770.xml#xpointer(//*[./st=%226+level+RGB%22])">
6R×6G×6B&nbsp;=&nbsp;216</link> (as in the <link xlink:type="simple" xlink:href="../621/286621.xml">
Web colors</link> case), <link xlink:type="simple" xlink:href="../770/15546770.xml#xpointer(//*[./st=%226-8-5+levels+RGB%22])">
6R×8G×5B&nbsp;=&nbsp;240</link> or <link xlink:type="simple" xlink:href="../770/15546770.xml#xpointer(//*[./st=%226-7-6+levels+RGB%22])">
6R×7G×6B&nbsp;=&nbsp;252</link>, which leave room for some reserved colors.</p>
<p>

Then, when loading the mosaic of image thumbnails (or other heterogeneous images), the program simply maps every original indexed color pixel to its most approximated in the master palette (after dumping this into the hardware color registers), and writes the result in the video buffer. Here is a sample of a simple mosaic of the four image thumbnails using a <link xlink:type="simple" xlink:href="../770/15546770.xml#xpointer(//*[./st=%226-8-5+levels+RGB%22])">
master palette of 240 RGB</link> arranged colors plus 16 additional intermediate shades of gray; all images are put together without a significant loss of color accuracy:</p>
<p>

<indent level="1">

| style="border-style: none" border="0" cellpadding="4"
</indent>
|-
|| <image width="150px" src="IndexedColorSample_(Mosaic).png">
<caption>

IndexedColorSample (Mosaic).png
</caption>
</image>

|}</p>



</sec>
<sec>
<st>
<it>Transparent color</it> in palettes</st>

<p>

<indent level="1">

<it>See also <link xlink:type="simple" xlink:href="../961/491961.xml">
Transparency (graphic)</link></it>
</indent>

A single palette entry in an <link xlink:type="simple" xlink:href="../310/3563310.xml">
indexed color</link> image can be designated as a <it>transparent</it> color, in order to perform a simple <link xlink:type="simple" xlink:href="../043/6830043.xml">
video overlay</link>: superimposing a given image over a background in such way that some part of the overlapped image obscures the background and the remaining not. Superimposing film/TV titles and credits is a typical application of video overlay.</p>
<p>

In the image to be superimposed (indexed color is assumed), a given palette entry plays the role of the transparent color. Usually the index number 0, but other may be chosen if the overlay is performed by <link xlink:type="simple" xlink:href="../309/5309.xml">
software</link>. At design time, the transparent color palette entry is assigned to an arbitrary (usually distinctive) color. In the example below, a typical arrow <link xlink:type="simple" xlink:href="../830/2104830.xml">
cursor</link> for a <link xlink:type="simple" xlink:href="../598/24598.xml">
pointing device</link> is designed over an orange background, so here the orange areas denoted the transparent areas (left). At <platform wordnetid="103961939" confidence="0.8">
<structure wordnetid="104341686" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<surface wordnetid="104362025" confidence="0.8">
<area wordnetid="102735688" confidence="0.8">
<horizontal_surface wordnetid="103536348" confidence="0.8">
<library wordnetid="103660909" confidence="0.8">
<room wordnetid="104105893" confidence="0.8">
<link xlink:type="simple" xlink:href="../263/192263.xml">
run time</link></room>
</library>
</horizontal_surface>
</area>
</surface>
</artifact>
</structure>
</platform>
, the overlapped image is placed anywhere over the background image, and it is blended in such way that if the pixel color index is the transparent color, the background pixel is kept, otherwise it is replaced. The result is an image with irregular shapes perfectly placed over the background (right).</p>
<p>

<indent level="2">

| style="border-style: none" border="0" cellpadding="16"
</indent>
|-
| <image width="150px" src="Transparent_Color_Overlay.png">
<caption>

Transparent Color Overlay.png
</caption>
</image>

| <it>NOTE: this is merely an example. No actual use in a given operating system must be inferred.</it>
|}</p>
<p>

This technique is used for pointing devices' cursors, in typical 2-D videogames for characters, bullets and so on (the <structure wordnetid="104341686" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<link xlink:type="simple" xlink:href="../509/913509.xml">
sprite</link></artifact>
</structure>
s), video titling and other image mixing applications.</p>
<p>

Some early computers, as <link xlink:type="simple" xlink:href="../293/7293.xml">
Commodore 64</link>, <computer wordnetid="103082979" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../210/156210.xml">
MSX</link></computer>
 and <link xlink:type="simple" xlink:href="../980/1980.xml">
Amiga</link> supports sprites and/or <link xlink:type="simple" xlink:href="../005/163005.xml">
full screen video overlay</link> by hardware. In these cases, the transparent palette entry number is defined by the hardware, and it used to be the number 0.</p>
<p>

Some indexed color <link xlink:type="simple" xlink:href="../958/3576958.xml">
image file format</link>s as <format wordnetid="106636806" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../702/12702.xml">
GIF</link></format>
 and <format wordnetid="106636806" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../306/24306.xml">
PNG</link></format>
 natively supports the designation of a given palette entry as <it>transparent</it>, freely selectable among any of the palette entries used for a given image. The renderer (a <link xlink:type="simple" xlink:href="../173/33173.xml">
web browser</link>, for example) must to interpret it in order to achieve the desired effect when it places the image with transparent areas on screen.</p>
<p>

When dealing with <link xlink:type="simple" xlink:href="../682/294682.xml">
truecolor</link> images, some video mixing equipment can employ the RGB triplet (0,0,0) (no red, no green, no blue: the darkest shade of black, sometimes referred as <it>superblack</it> in this context) as the transparent color. At design time, it is replaced by the so-called <link xlink:type="simple" xlink:href="../953/46953.xml">
magic pink</link>. The same way, typical <link xlink:type="simple" xlink:href="../257/54257.xml">
desktop publishing</link> software can assume pure white, RGB triplet (255,255,255) from photos and illustrations to be excluded in order to let the text paragraphs <it>to invade</it> the image's <link xlink:type="simple" xlink:href="../300/12087300.xml">
bounding box</link> for irregular text arrangement around the image's subjects.</p>
<p>

<link xlink:type="simple" xlink:href="../248/35248.xml">
2-D painting program</link>s, like <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../796/321796.xml">
Microsoft Paint</link></software>
 and <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../622/264622.xml">
Deluxe Paint</link></software>
, can employ the user designated <it>background color</it> as the transparent color when performing <link xlink:type="simple" xlink:href="../115/157115.xml">
cut, copy, and paste</link> operations.</p>
<p>

Although related (due to they are used for the same purposes), <link xlink:type="simple" xlink:href="../313/468313.xml#xpointer(//*[./st=%22Image+masks%22])">
image bit mask</link>s and <link xlink:type="simple" xlink:href="../049/2049.xml">
alpha channel</link>s are techniques which not involve the use of palettes nor transparent color at all, but off-image added extra binary data layers.</p>

</sec>
<sec>
<st>
<it>System</it> and <it>logical</it> palettes under Microsoft Windows</st>

<p>

<link xlink:type="simple" xlink:href="../890/18890.xml">
Microsoft Windows</link> applications manage the palette of 4-bit or 8-bit indexed color display devices through specialized functions of the <link xlink:type="simple" xlink:href="../601/81601.xml">
Win32 API</link> (for <extent wordnetid="105123416" confidence="0.8">
<magnitude wordnetid="105090441" confidence="0.8">
<property wordnetid="104916342" confidence="0.8">
<depth wordnetid="105134547" confidence="0.8">
<link xlink:type="simple" xlink:href="../868/80868.xml">
Highcolor</link></depth>
</property>
</magnitude>
</extent>
 and <extent wordnetid="105123416" confidence="0.8">
<magnitude wordnetid="105090441" confidence="0.8">
<property wordnetid="104916342" confidence="0.8">
<depth wordnetid="105134547" confidence="0.8">
<link xlink:type="simple" xlink:href="../682/294682.xml">
Truecolor</link></depth>
</property>
</magnitude>
</extent>
 display modes, such functions lacks any interesting functionality). These APIs deals with the so-called <it>system palette</it> and with many <it>logical palettes</it>.</p>
<p>

The <it>system palette</it> is a copy in <link xlink:type="simple" xlink:href="../847/25847.xml">
RAM</link> of the color display's hardware registers, primarily a physical palette, and it is a unique, shared common resource of the system. At boot, it is loaded with the <link xlink:type="simple" xlink:href="../770/15546770.xml#xpointer(//*[./st=%22Microsoft+Windows+default+16-color+palette%22])">
default system palette</link> (mainly a <it>master palette</it> which works well enough with most programs).</p>
<p>

When a given application intends to output colorized graphics and/or images, it can set their own <it>logical palette</it>, that is, its own private selection of colors (up to 256). It is supposed that every graphic element that the application tries to show on screen employs the colors of its logical palette. Every program can manage freely one or more logical palettes without further expected interference (in advance).</p>
<p>

Before the output is effectively made, the program must <it>to realize</it> its logical palette: the system tries to match then the <it>logical</it> colors with <it>physical</it> ones. If an intended color is already present into the system palette, the system internally maps both the logical and the system palette indexes (due to they rarely coincide). If the intended color is not present yet, the system applies an internal algorithm to discard the least used color in the system palette (generally, some used by another window in the background) and substitutes it with the new color. Due to there are limited room for colors in the system palette, the algorithm tries also to remap similar colors together, and always by avoiding redundant colors.</p>
<p>

The final result depends on how many applications are working with on screen colors. The foreground window is always favoured, so windows at background may behave in different ways: from become corrupted to quickly redraw themselves. When the system palette changes, the system triggers a specific <paradigm wordnetid="113804375" confidence="0.8">
<linguistic_relation wordnetid="113797142" confidence="0.8">
<inflection wordnetid="113803782" confidence="0.8">
<grammatical_relation wordnetid="113796779" confidence="0.8">
<link xlink:type="simple" xlink:href="../599/62599.xml">
event</link></grammatical_relation>
</inflection>
</linguistic_relation>
</paradigm>
 to inform every application. When received, a window can quickly redraw itself using a single Win32 API function. But this must be doing explicitly in the program code; hence the fact that many programs lack in manage this event, and their windows become corrupt in this situation.</p>
<p>

An application can force the system palette to be loaded with specific colors and even in a specific order, <it>tricking</it> the system by telling they are color entries intended for <it>animation</it> (quick color changes of the colors in the physical palette at specific entries). The system cannot assume then that every hardware palette entry is free for their palette color managements, and those entries are excluded from its algorithm. The final result depend on the skills of the color forcing program and the behaviour of the other programs (the lasts exactly as in the regular case), and that of the operating system in itself.</p>

</sec>
<sec>
<st>
Notes</st>
<p>

<reflist>
<entry id="1">
http://palimpsest.stanford.edu/bytopic/imaging/std/tiff5.html The TIFF file format specification, revision 5.0 (compare "ColorMap
" and "Color Response Curves" sections)</entry>
<entry id="2">
http://www.cs.binghamton.edu/~reckert/class5b_01.PDF Computer Graphics, Prof. R. Eckert, Lect. #5, February 2001, Binghampton U., N.Y.</entry>
<entry id="3">
http://tex.imm.uran.ru/alchemy.pdf Handmade Software's <it>Image Alchemy</it> User's Manual.</entry>
</reflist>
</p>

</sec>
<sec>
<st>
References</st>
<p>

<list>
<entry level="1" type="bullet">

 Julio Sanchez and Maria P. Canton (2003). <weblink xlink:type="simple" xlink:href="http://books.google.com/books?id=gZ5SDTpMR-MC&amp;pg=PA756&amp;dq=palette+intitle:%22The+PC+Graphics+Handbook%22&amp;lr=&amp;as_brr=0&amp;ei=uaPHR7aKHqbutAOohely&amp;sig=4UrkgNS_n3TkvwC1DQ5x91wzcv4">
<it>The PC Graphics Handbook.''</it></weblink> CRC Press. ISBN 0849316782.</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://msdn2.microsoft.com/en-us/library/ms532638(VS.85).aspx">
Color palettes at Microsoft Developer Network (MSDN)</weblink></entry>
</list>
</p>

</sec>
<sec>
<st>
See also</st>
<p>

<list>
<entry level="1" type="bullet">

<structure wordnetid="104341686" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<link xlink:type="simple" xlink:href="../310/3563310.xml">
Indexed color</link></device>
</instrumentality>
</artifact>
</structure>
</entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../448/331448.xml">
Color depth</link></entry>
<entry level="1" type="bullet">

<structure wordnetid="104341686" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<link xlink:type="simple" xlink:href="../237/14124237.xml">
Palette entry</link></artifact>
</structure>
</entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../129/3212129.xml">
Color Look-Up Table</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../383/4828383.xml">
List of palettes</link></entry>
</list>
</p>


</sec>
</bdy>
</depth>
</device>
</instrumentality>
</artifact>
</structure>
</article>
