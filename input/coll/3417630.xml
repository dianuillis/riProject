<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 20:24:33[mciao0826] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<algorithm  confidence="0.9511911446218017" wordnetid="105847438">
<header>
<title>Damerau–Levenshtein distance</title>
<id>3417630</id>
<revision>
<id>239838883</id>
<timestamp>2008-09-20T19:20:45Z</timestamp>
<contributor>
<username>VolkovBot</username>
<id>3035831</id>
</contributor>
</revision>
<categories>
<category>Discrete mathematics</category>
<category>Algorithms on strings</category>
</categories>
</header>
<bdy>

In <link xlink:type="simple" xlink:href="../773/14773.xml">
information theory</link> and <link xlink:type="simple" xlink:href="../323/5323.xml">
computer science</link>, <b>Damerau–Levenshtein distance</b> is a "distance" (<link xlink:type="simple" xlink:href="../306/9809306.xml">
string metric</link>) between two <link xlink:type="simple" xlink:href="../701/27701.xml">
strings</link>, i.e., finite sequence of symbols, given by counting the minimum number of operations needed to transform one string into the other, where an operation is defined as an insertion, deletion, or substitution of a single character, or a <link xlink:type="simple" xlink:href="../896/924896.xml">
transposition</link> of two characters.  Damerau in his seminal paper<weblink xlink:type="simple" xlink:href="http://localhost:18088/wiki/index.php/Damerau%E2%80%93Levenshtein_distance#endnote_D64">
http://localhost:18088/wiki/index.php/Damerau%E2%80%93Levenshtein_distance#endnote_D64</weblink> not only distinguished these four edit operations but also stated that they correspond to more than 80% of all human misspellings. Damerau concentrated on single-character misspellings. <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../427/406427.xml">
Edit distance</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
 was introduced by Levenshtein,<weblink xlink:type="simple" xlink:href="http://localhost:18088/wiki/index.php/Damerau%E2%80%93Levenshtein_distance#endnote_L66">
http://localhost:18088/wiki/index.php/Damerau%E2%80%93Levenshtein_distance#endnote_L66</weblink> who generalized this concept with multiple edit operations, but did not include transpositions in the set of basic operations.<p>

While the original motivation was to measure distance between human misspellings to improve applications such as spell checkers, Damerau-Levenshtein distance has also seen uses in biology to measure the variation between DNA.</p>

<ss1>
<st>
 The algorithm </st>

<p>

Adding transpositions sounds simple, but in reality there is a serious complication.  Firstly, let us consider a direct extension of the formula used to calculate <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../418/406418.xml">
Levenshtein distance</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
.  Below is <link xlink:type="simple" xlink:href="../185/24185.xml">
pseudocode</link> for a function <it>DamerauLevenshteinDistance</it> that takes two strings, <it>str1</it> of length <it>lenStr1</it>, and <it>str2</it> of length <it>lenStr2</it>, and computes the Damerau-Levenshtein distance between them:</p>
<p>

<b>int</b> DamerauLevenshteinDistance(<b>char</b> str1[1..lenStr1], <b>char</b> str2[1..lenStr2])
<it>// d is a table with lenStr1+1 rows and lenStr2+1 columns</it>
<b>declare</b> <b>int</b> d[0..lenStr1, 0..lenStr2]
<it>// i and j are used to iterate over str1 and str2</it>
<b>declare</b> <b>int</b> i, j, cost</p>
<p>

<b>for</b> i <b>from</b> 0 <b>to</b> lenStr1
d[i, 0] := i
<b>for</b> j <b>from</b> 1 <b>to</b> lenStr2
d[0, j] := j</p>
<p>

<b>for</b> i <b>from</b> 1 <b>to</b> lenStr1
<b>for</b> j <b>from</b> 1 <b>to</b> lenStr2
<b>if</b> str1[i] = str2[j] <b>then</b> cost := 0
<b>else</b> cost := 1
d[i, j] := minimum(
d[i-1, j  ] + 1,     <it>// deletion</it>
d[i  , j-1] + 1,     <it>// insertion</it>
d[i-1, j-1] + cost   <it>// substitution</it>
)
<b>if</b>(i &amp;gt; 1 <b>and</b> j &amp;gt; 1 <b>and</b> str1[i] = str2[j-1] <b>and</b> str1[i-1] = str2[j]) <b>then</b>
d[i, j] := minimum(
d[i, j],
d[i-2, j-2] + cost   <it>// transposition</it>
)</p>

<p>

<b>return</b> d[lenStr1, lenStr2]</p>
<p>

Basically this is the algorithm to compute <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../418/406418.xml">
Levenshtein distance</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
 with one additional recurrence:</p>
<p>

<b>if</b>(i &amp;gt; 1 <b>and</b> j &amp;gt; 1 <b>and</b> str1[i] = str2[j-1] <b>and</b> str1[i-1] = str2[j]) <b>then</b>
d[i, j] := minimum(
d[i, j],
d[i-2, j-2] + cost   <it>// transposition</it>
)</p>
<p>

Let us calculate pair-wise distances between the strings <b>TO</b>, <b>OT</b> and <b>OST</b> using this algorithm. The distance between <b>TO</b> and <b>OT</b> is 1. The same for <b>OT</b> vs. <b>OST</b>.  But the distance between <b>TO</b> and <b>OST</b> is 3, even though the strings can be made equal using one deletion and one transposition. Clearly, the algorithm does not compute precisely the value we want.  Furthermore, the <link xlink:type="simple" xlink:href="../941/53941.xml">
triangle inequality</link> does not hold.</p>
<p>

In reality this algorithm calculates the cost of the so-called <link xlink:type="simple" xlink:href="../418/406418.xml">
optimal string alignment</link>, which does not always equal the <link xlink:type="simple" xlink:href="../427/406427.xml">
edit distance</link>. It is also easy to see that the cost of the <link xlink:type="simple" xlink:href="../418/406418.xml">
optimal string alignment</link> is the number of edit operations needed to make the strings equal under the condition that <b>no substring is edited more than once</b>.  We will also call this value a restricted edit distance. As noted by G. Navarro,<weblink xlink:type="simple" xlink:href="http://localhost:18088/wiki/index.php/Damerau%E2%80%93Levenshtein_distance#endnote_Nav01">
http://localhost:18088/wiki/index.php/Damerau%E2%80%93Levenshtein_distance#endnote_Nav01</weblink> in the general case, i.e. when a set of elementary edition operations includes substitutions of arbitrary length strings, unrestricted edit distance is hardly computable. However, the goal is achievable in the simpler case of Damerau–Levenshtein distance.  It is also possible (see<weblink xlink:type="simple" xlink:href="http://localhost:18088/wiki/index.php/Damerau%E2%80%93Levenshtein_distance#endnote_LW75">
http://localhost:18088/wiki/index.php/Damerau%E2%80%93Levenshtein_distance#endnote_LW75</weblink> for details) to compute unrestricted distance treating reversals of arbitrary, not <b>obligatory adjacent</b> characters as a single edit operation.</p>
<p>

To devise a proper algorithm to calculate unrestricted Damerau–Levenshtein distance note that there always exists an optimal sequence of edit operations, where once-transposed letters are never modified afterwards. Thus, we need to consider only two symmetric ways of modifying a substring more than once: (1) transpose letters and insert an arbitrary number of characters between them, or (2) delete a sequence of characters and transpose letters that become adjacent after deletion. The straightforward implementation of this idea gives an algorithm of cubic complexity: <math>O\left (M \cdot N \cdot \max(M, N) \right )</math>, where <it>M</it> and <it>N</it> are string lengths. Using the ideas of Lowrance and Wagner,<weblink xlink:type="simple" xlink:href="http://localhost:18088/wiki/index.php/Damerau%E2%80%93Levenshtein_distance#endnote_LW75">
http://localhost:18088/wiki/index.php/Damerau%E2%80%93Levenshtein_distance#endnote_LW75</weblink> this naive algorithm can be improved to be <math>O\left (M \cdot N \right)</math> in the worst case.</p>
<p>

It is interesting that the <link xlink:type="simple" xlink:href="../223/2242223.xml">
bitap algorithm</link> can be modified to process transposition. See the information retrieval section of<weblink xlink:type="simple" xlink:href="http://localhost:18088/wiki/index.php/Damerau%E2%80%93Levenshtein_distance#endnote_itman">
http://localhost:18088/wiki/index.php/Damerau%E2%80%93Levenshtein_distance#endnote_itman</weblink> for an example of such an adaptation.</p>

</ss1>
<sec>
<st>
 Algorithm discussion </st>

<p>

The above-described pseudo-code calculates only restricted edit distance.  Damerau–Levenshtein distance plays an important role in natural language processing. In natural languages, strings are short and the number of errors (misspellings) rarely exceeds 2.  In such circumstances, restricted and real edit distance differ very rarely.  That is why this limitation is not very important. However, one must remember that restricted edit distance does not always satisfy the <link xlink:type="simple" xlink:href="../941/53941.xml">
triangle inequality</link> and, thus, cannot be used with <link xlink:type="simple" xlink:href="../216/3417216.xml">
metric trees</link>. An extension of the edit distance algorithm, that <b>does satisfy</b> the <link xlink:type="simple" xlink:href="../941/53941.xml">
triangle inequality</link> is described in the paper <weblink xlink:type="simple" xlink:href="http://portal.acm.org/citation.cfm?id=363994">
 F.J. Damerau. A technique for computer detection and correction of spelling errors, Communications of the ACM, 1964</weblink>.</p>

<ss1>
<st>
 Application: DNA </st>

<p>

Since <link xlink:type="simple" xlink:href="../955/7955.xml">
DNA</link> frequently undergoes insertions, deletions, substitutions, and transpositions, and each of these operations occurs on approximately the same timescale, the Damerau-Levenshtein distance is an appropriate metric of the variation between two strands of DNA.
More common in DNA, protein, and other bioinformatics related alignment tasks is the use of closely related algorithms such as <link xlink:type="simple" xlink:href="../679/1004679.xml">
Needleman-Wunsch</link> or <link xlink:type="simple" xlink:href="../195/1606195.xml">
Smith-Waterman</link>.</p>

</ss1>
</sec>
<sec>
<st>
 See also </st>

<p>

<list>
<entry level="1" type="bullet">

 <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../418/406418.xml">
Levenshtein distance</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</entry>
<entry level="1" type="bullet">

 <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../881/308881.xml">
Fuzzy string searching</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../161/3345161.xml">
Levenshtein automata</link></entry>
<entry level="1" type="bullet">

 <link>
Ratcliff/Obershelp</link></entry>
</list>
</p>

</sec>
<sec>
<st>
 References </st>
<p>

<list>
<entry level="1" type="bullet">

  <cite id="endnote_D64" style="font-style: normal;">
<b>^</b></cite>&nbsp; <weblink xlink:type="simple" xlink:href="http://portal.acm.org/citation.cfm?id=363994">
F.J. Damerau. A technique for computer detection and correction of spelling errors, Communications of the ACM, 1964.</weblink></entry>
<entry level="1" type="bullet">

  <cite id="endnote_L66" style="font-style: normal;">
<b>^</b></cite>&nbsp; V.I. Levenshtein. Binary codes capable of correcting deletions, insertions, and reversals. Soviet Physics Doklady, 1966.</entry>
<entry level="1" type="bullet">

  <cite id="endnote_LW75" style="font-style: normal;">
<b>^</b></cite>&nbsp; <weblink xlink:type="simple" xlink:href="http://portal.acm.org/citation.cfm?id=321880">
R. Lowrance, R. Wagner. An Extension of the String-to-String Correction Problem, JACM, 1975.</weblink></entry>
<entry level="1" type="bullet">

  <cite id="endnote_Nav01" style="font-style: normal;">
<b>^</b></cite>&nbsp; <weblink xlink:type="simple" xlink:href="http://www.egeen.ee/u/vilo/edu/2002-03/Tekstialgoritmid_I/Articles/Approximate/Navarro_Review_on_Approximate_Matching_p31-navarro.pdf">
G. Navarro. A guided tour to approximate string matching. ACM Computing Surveys (CSUR)  archive  33(1), pp 31-88, 2001.</weblink></entry>
</list>
</p>

</sec>
<sec>
<st>
 External links </st>

<p>

<list>
<entry level="1" type="bullet">

  <cite id="endnote_itman" style="font-style: normal;">
<b>^</b></cite>&nbsp; <weblink xlink:type="simple" xlink:href="http://itman.narod.ru/english/ir/index.html">
Site devoted to fuzzy searching and information retrieval</weblink></entry>
<entry level="1" type="bullet">

 Project Dedupe http://sourceforge.net/projects/dedupe/ (abandoned project?)</entry>
</list>
</p>


</sec>
</bdy>
</algorithm>
</article>
