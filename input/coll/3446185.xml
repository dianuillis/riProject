<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 20:20:45[mciao0828] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<physical_entity  confidence="0.8" wordnetid="100001930">
<person  confidence="0.8" wordnetid="100007846">
<model  confidence="0.8" wordnetid="110324560">
<assistant  confidence="0.8" wordnetid="109815790">
<worker  confidence="0.8" wordnetid="109632518">
<causal_agent  confidence="0.8" wordnetid="100007347">
<header>
<title>Ring (computer security)</title>
<id>3446185</id>
<revision>
<id>241973204</id>
<timestamp>2008-09-30T09:23:53Z</timestamp>
<contributor>
<username>DJBullfish</username>
<id>1386421</id>
</contributor>
</revision>
<categories>
<category>Central processing unit</category>
<category>Operating system technology</category>
<category>Computer security models</category>
</categories>
</header>
<bdy>

"Ring 0" redirects here. For the Japanese horror prequel, see .
<image location="right" width="300px" src="Priv_rings.svg" type="thumb">
<caption>

Privilege rings for the <link xlink:type="simple" xlink:href="../198/34198.xml">
x86</link> available in <link xlink:type="simple" xlink:href="../596/167596.xml">
protected mode</link>
</caption>
</image>

In <link xlink:type="simple" xlink:href="../323/5323.xml">
computer science</link>, <b>hierarchical protection domains</b>,<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref><ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%222%22])">2</ref> often called <b>protection rings</b>, are a mechanism to protect data and functionality from faults (<link xlink:type="simple" xlink:href="../720/2573720.xml">
fault tolerance</link>) and malicious behaviour (<link xlink:type="simple" xlink:href="../398/7398.xml">
computer security</link>). This approach is diametrically opposite to that of <link xlink:type="simple" xlink:href="../717/539717.xml">
capability-based security</link>.<p>

Computer operating systems provide different levels of access to resources. A protection ring is one of two or more hierarchical <it>levels</it> or <it>layers</it> of <link xlink:type="simple" xlink:href="../860/1692860.xml">
privilege</link> within the architecture of a <link xlink:type="simple" xlink:href="../457/7878457.xml">
computer system</link>. This is generally hardware-enforced by some <link xlink:type="simple" xlink:href="../218/5218.xml">
CPU</link> <link xlink:type="simple" xlink:href="../509/6509.xml">
architecture</link>s that provide different <link xlink:type="simple" xlink:href="../954/3991954.xml">
CPU modes</link> at the <link xlink:type="simple" xlink:href="../155/41155.xml">
firmware</link> <link xlink:type="simple" xlink:href="../775/574775.xml">
level</link>. Rings are arranged in a hierarchy from most privileged (most trusted, usually numbered zero) to least privileged (least trusted, usually with the highest ring number). On most operating systems, Ring 0 is the level with the most privileges and interacts most directly with the physical hardware such as the CPU and memory.</p>
<p>

Special gates between rings are provided to allow an outer ring to access an inner ring's resources in a predefined manner, as opposed to allowing arbitrary usage. Correctly gating access between rings can improve security by preventing programs from one ring or privilege level from misusing resources intended for programs in another. For example, spyware running as a user program in Ring 1 should be prevented from turning on a web camera without informing the user, since hardware access should be a Ring 0 function reserved for <link xlink:type="simple" xlink:href="../101/9101.xml">
device drivers</link>. Programs such as web browsers running in higher numbered rings must request access to the network, a resource restricted to a lower numbered ring.</p>

<sec>
<st>
Implementations</st>

<p>

Hardware supported rings were among the more revolutionary concepts introduced by the <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../847/18847.xml">
Multics</link></O>
 operating system, a highly secure predecessor of today's <link xlink:type="simple" xlink:href="../642/31642.xml">
UNIX</link> family of operating systems. However, most general-purpose UNIX systems use only two rings, even if the hardware it runs on provides more <link xlink:type="simple" xlink:href="../954/3991954.xml">
CPU modes</link> than that.</p>
<p>

Many modern CPU architectures (including the popular <link xlink:type="simple" xlink:href="../617/14617.xml">
Intel</link> <link xlink:type="simple" xlink:href="../198/34198.xml">
x86</link> architecture) include some form of ring protection, although the <family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../438/33438.xml">
Windows NT</link></family>
 operating system, like Unix, does not fully exploit this feature. Its predecessor, <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../409/22409.xml">
OS/2</link></O>
, did to some extent, as it used three rings: ring 0 for kernel code and device drivers, ring 2 for privileged code (user programs with I/O access permissions), and ring 3 for unprivileged code (nearly all user programs).</p>
<p>

There has been a renewed interest in this design structure, with the proliferation of the <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../852/590852.xml">
Xen</link></software>
 <link xlink:type="simple" xlink:href="../216/1267216.xml">
VMM</link> software, <link xlink:type="simple" xlink:href="../911/5087911.xml">
ongoing discussion</link> on <link xlink:type="simple" xlink:href="../825/20825.xml">
monolithic</link>- vs <link xlink:type="simple" xlink:href="../023/20023.xml">
micro-kernel</link> (particularly in <work wordnetid="100575741" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<standard wordnetid="107260623" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<community wordnetid="108223802" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<message wordnetid="106598915" confidence="0.8">
<social_group wordnetid="107950920" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<gathering wordnetid="107975026" confidence="0.8">
<service wordnetid="100577525" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<link xlink:type="simple" xlink:href="../994/18588994.xml">
Usenet</link></activity>
</psychological_feature>
</group>
</act>
</service>
</gathering>
</rule>
</event>
</social_group>
</message>
</system_of_measurement>
</community>
</direction>
</standard>
</protocol>
</work>
 newsgroups and <link xlink:type="simple" xlink:href="../813/294813.xml">
Web forums</link>), Microsoft's <it>Ring-1</it> design structure as part of their <link xlink:type="simple" xlink:href="../524/59524.xml">
NGSCB</link> initiative and <link xlink:type="simple" xlink:href="../216/1267216.xml">
hypervisor</link>s embedded in <link xlink:type="simple" xlink:href="../155/41155.xml">
firmware</link> such as <link xlink:type="simple" xlink:href="../617/14617.xml">
Intel</link>'s <link>
Vanderpool</link> technology.</p>
<p>

The original Multics system had eight rings, but many modern systems have fewer. The hardware is aware of the current ring of the executing instruction <link xlink:type="simple" xlink:href="../303/45303.xml">
thread</link> at all times, thanks to special machine registers. In some systems, areas of virtual memory are also assigned ring numbers in hardware, and/or the most privileged ring is given special capabilities (such as real memory addressing that bypasses the <link xlink:type="simple" xlink:href="../354/32354.xml">
virtual-memory</link> hardware).</p>
<p>

The hardware severely restricts the ways in which control can be passed from one ring to another, and also enforces restrictions on the types of memory access that can be performed across rings. Typically there is a special <it>gate</it> or <it>call</it> instruction that transfers control in a secure way towards predefined entry points in lower-level (more trusted) rings; this functions as a supervisor call in many operating systems that use the ring architecture. The hardware restrictions are designed to limit opportunities for accidental or malicious breaches of security.</p>
<p>

Ring protection can be combined with processor modes (master/kernel/privileged mode versus slave/user/unprivileged mode) in some systems. Operating systems running on hardware supporting both may use both forms of protection or only one.</p>
<p>

Effective use of ring architecture requires close cooperation between hardware and the operating system. Operating systems designed to work on multiple hardware platforms may make only limited use of rings if they are not present on every supported platform. Often the security model is simplified to "kernel" and "user" even if hardware provides finer granularity through rings.</p>

</sec>
<sec>
<st>
Supervisor mode</st>

<p>

In computer terms <b>supervisor mode</b> (sometimes called kernel mode) is a hardware-mediated flag which can be changed by code running in system-level software. System-level tasks or threads will have this flag set while they are running, whereas user-space applications will not. This flag determines whether it would be possible to execute machine code operations such as modifying registers for various descriptor tables, or performing operations such as disabling interrupts. The idea of having two different modes to operate in comes from “with more control comes more responsibility” — a program in supervisor mode is trusted never to fail, since a failure may cause the whole computer system to crash.</p>
<p>

As summarized on <weblink xlink:type="simple" xlink:href="http://foldoc.org/index.cgi?query=supervisor+mode&amp;action=Search">
foldoc.org</weblink>, supervisor mode is “An execution mode on some processors which enables execution of all instructions, including privileged instructions. It may also give access to a different address space, to memory management hardware and to other peripherals. This is the mode in which the operating system usually runs.”</p>
<p>

In a monolithic <link xlink:type="simple" xlink:href="../394/50394.xml">
kernel</link>, the kernel runs in supervisor mode and the applications run in user mode. Other types of <link xlink:type="simple" xlink:href="../194/22194.xml">
operating system</link>s, like those with an <link xlink:type="simple" xlink:href="../757/95757.xml">
exokernel</link> or <link xlink:type="simple" xlink:href="../023/20023.xml">
microkernel</link> do not necessarily share this behavior.</p>
<p>

Some examples from the PC world:</p>
<p>

<indent level="1">

 <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../297/6097297.xml">
Linux</link></O>
 and <link xlink:type="simple" xlink:href="../890/18890.xml">
Windows</link> are two operating systems that use supervisor/user-mode. To perform specialized functions, user-mode code must perform a <link xlink:type="simple" xlink:href="../908/102908.xml">
system call</link> into kernel-space (running in supervisor mode) where trusted code in the operating system will perform the needed task.
</indent>

<indent level="1">

 <link xlink:type="simple" xlink:href="../146/8146.xml">
DOS</link>, other simple operating systems, and many embedded devices run in supervisor mode permanently, meaning that drivers can be written directly as user programs. 
</indent>

Most processors have at least two different modes. The <link xlink:type="simple" xlink:href="../198/34198.xml">
x86</link>-processors have four different modes divided into four different rings. Programs that run in Ring 0 can do <it>anything</it> with the system, and code that runs in Ring 3 should be able to fail at any time without impact to the rest of the computer system. Ring 1 and Ring 2 are rarely used, but could be configured with different levels of access.</p>
<p>

Switching from “user mode” to “kernel mode” is, in most existing systems, very expensive. It has been measured, on the basic request <link xlink:type="simple" xlink:href="../770/445770.xml">
getpid</link>, to cost 1000-1500 cycles on most machines. Of these just around 100 are for the actual switch (70 from user to kernel space, and 40 back), the rest is "kernel overhead".<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%223%22])">3</ref><ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%224%22])">4</ref> In the <link xlink:type="simple" xlink:href="../157/1623157.xml">
L3 microkernel</link> the minimization of this overhead reduced the overall cost to around 150 cycles.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%223%22])">3</ref></p>
<p>

<person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../463/472463.xml">
Maurice Wilkes</link></scientist>
</person>
 wrote:<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%225%22])">5</ref> ... it eventually became clear that the hierarchical protection that rings provided did not closely match the requirements of the system programmer and gave little or no improvement on the simple system of having two modes only. Rings of protection lent themselves to efficient implementation in hardware, but there was little else to be said for them. [...] The attractiveness of fine-grained protection remained, even after it was seen that rings of protection did not provide the answer... This again proved a blind alley... </p>
<p>

To gain performance and determinism, some systems place functions that would likely be viewed as application logic, rather than as device drivers, in kernel mode; security applications (<link xlink:type="simple" xlink:href="../684/40684.xml">
access control</link>, <link xlink:type="simple" xlink:href="../296/1362296.xml">
firewalls</link>, etc.) and operating system monitors are cited as examples. At least one embedded database management system, <link xlink:type="simple" xlink:href="../786/9621786.xml">
<it>e</it>X<it>treme</it>DB Kernel Mode</link>, has been developed specifically for kernel mode deployment, to provide a local database for kernel-based application functions, and to eliminate the <link xlink:type="simple" xlink:href="../904/6904.xml">
context switches</link> that would otherwise occur when kernel functions interact with a database system running in user mode.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%226%22])">6</ref></p>

</sec>
<sec>
<st>
Hypervisor mode</st>
<p>

Recent CPUs from Intel and AMD offer <link xlink:type="simple" xlink:href="../179/996179.xml">
x86 virtualization</link> instructions for a <link xlink:type="simple" xlink:href="../216/1267216.xml">
hypervisor</link> to control Ring 0 hardware access. Although they are mutually incompatible, both Intel's "Vanderpool" (or VT) and AMD's "Pacifica" (AMD-V) create a new "Ring -1" so that a guest operating system can run Ring 0 operations natively without affecting other guests or the host OS.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%227%22])">7</ref></p>

</sec>
<sec>
<st>
Interoperation between CPU and OS levels of abstraction</st>
<p>

Many CPU hardware architectures provide far more flexibility than is exploited by the <link xlink:type="simple" xlink:href="../194/22194.xml">
operating system</link>s that they normally run.  Proper use of complex CPU modes requires very close cooperation between the operating system and the CPU, and thus tends to tie the OS to the CPU architecture. When the OS and the CPU are specifically designed for each other, this is not a problem (although some hardware features may still be left unexploited), but when the OS is designed to be compatible with multiple, different CPU architectures, a large part of the CPU mode features may be ignored by the OS. For example, <family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../438/33438.xml">
Windows NT</link></family>
 was designed to be portable and many architectures at the time only supported user and kernel mode.</p>
<p>

<O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../847/18847.xml">
Multics</link></O>
 was an operating system designed specifically for a special CPU architecture (which in turn was designed specifically for Multics), and it took full advantage of the CPU modes available to it.  However, it was an exception to the rule. Today, this high degree of interoperation between the OS and the hardware is not often cost-effective, despite the potential advantages for security and stability.</p>
<p>

Ultimately, the purpose of distinct operating modes for the CPU is to provide hardware protection against accidental or deliberate corruption of the system environment (and corresponding breaches of system security) by software. Only "trusted" portions of system software are allowed to execute in the unrestricted environment of kernel mode, and only then when absolutely necessary. All other software executes in one or more user modes. If a processor generates a fault or exception condition in a user mode, in most cases system stability is unaffected; if a processor generates a fault or exception condition in kernel mode, most operating systems will halt the system with an unrecoverable error. When a hierarchy of modes exists (ring-base security), faults and exceptions at one privilege level may destabilize only the higher-numbered privilege levels. Thus, a fault in Ring 0 (the kernel mode with the highest privilege) will crash the entire system, but a fault in Ring 2 will only affect rings 3 and beyond and Ring 3 itself, at most.</p>
<p>

Transitions between modes are at the discretion of the executing <link xlink:type="simple" xlink:href="../303/45303.xml">
thread</link> when the transition is from a level of high privilege to one of low privilege (as from kernel to user modes), but transitions from lower to higher levels of privilege can take place only through secure, hardware-controlled "gates" that are traversed by executing special instructions or when external interrupts are received.</p>
<p>

<link xlink:type="simple" xlink:href="../023/20023.xml">
Microkernel</link> operating systems attempt to minimize the amount of code running in privileged mode, for purposes of <link xlink:type="simple" xlink:href="../398/7398.xml">
security</link> and <link xlink:type="simple" xlink:href="../721/235721.xml">
elegance</link>.</p>


</sec>
<sec>
<st>
 See also </st>
<p>

<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../908/102908.xml">
System call</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../596/167596.xml">
Protected mode</link> (x86-compatible CPUs of the 80286 series or later)</entry>
<entry level="1" type="bullet">

 <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../837/1525837.xml">
THE multiprogramming system</link></database>
</wordnet>
</lexical_database>
</electronic_database>
</information>
</message>
</entry>
<entry level="1" type="bullet">

 <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../847/18847.xml">
Multics</link></O>
</entry>
</list>
</p>

</sec>
<sec>
<st>
Further reading</st>

<p>

<list>
<entry level="1" type="bullet">

 David T. Rogers: <weblink xlink:type="simple" xlink:href="http://theses.nps.navy.mil/03Jun_Rogers_David.pdf">
<cite > A FRAMEWORK FOR DYNAMIC SUBVERSION</cite></weblink> Thesis, June 2003 (pdf)</entry>
<entry level="1" type="bullet">

 Glossary of <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../847/18847.xml">
Multics</link></O>
 <link xlink:type="simple" xlink:href="../571/1052571.xml">
acronyms</link> and terms: <weblink xlink:type="simple" xlink:href="ftp://ftp.stratus.com/vos/multics/tvv/mgr.html#ring">
 <cite >Ring</cite></weblink></entry>
<entry level="1" type="bullet">

 William J. Caelli: <weblink xlink:type="simple" xlink:href="http://cisse.info/history/CISSE%20J/2002/cael.pdf">
<cite >Relearning "Trusted Systems" in an Age of NIIP: Lessons from the Past for the Future.</cite></weblink> 2002 (pdf)</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.warpspeed.com.au/cgi-bin/inf2html.cmd?..\html\book\ddk\PDRREF.INF+5">
 <cite >Presentation Device Driver Reference for OS/2</cite></weblink> 5. Introduction to OS/2 Presentation Drivers</entry>
<entry level="1" type="bullet">

 Haruna R. Isa, William R. Shockley, Cynthia E. Irvine: <weblink xlink:type="simple" xlink:href="http://cisr.nps.navy.mil/downloads/99paper_multithread.pdf">
 <cite >A Multi-threading Architecture for Multilevel Secure Transaction Processing</cite></weblink> 1999 (pdf)</entry>
<entry level="1" type="bullet">

 Ivan Kelly: <weblink xlink:type="simple" xlink:href="http://minixonxen.skynet.ie">
 <cite >Report Porting MINIX to Xen</cite></weblink> 2006</entry>
<entry level="1" type="bullet">

 Paul Barham, Boris Dragovic, Keir Fraser, Steven Hand, Tim Harris, Alex Ho, Rolf Neugebauer, Ian Pratt, Andrew Warfield: <weblink xlink:type="simple" xlink:href="http://www.cl.cam.ac.uk/netos/papers/2003-xensosp.pdf">
 <cite >Xen and the Art of Virtualization</cite></weblink> 2003 (pdf)</entry>
<entry level="1" type="bullet">

 Marcus Peinado, Yuqun Chen, Paul England, and John Manferdelli: <weblink xlink:type="simple" xlink:href="http://research.microsoft.com/~yuqunc/papers/ngscb.pdf">
 <cite >NGSCB: A Trusted Open System</cite></weblink> (pdf)</entry>
<entry level="1" type="bullet">

 <link>
Michael D. Schroeder</link>, <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<engineer wordnetid="109615807" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<link xlink:type="simple" xlink:href="../760/974760.xml">
Jerome H. Saltzer</link></scientist>
</causal_agent>
</engineer>
</person>
</physical_entity>
: <weblink xlink:type="simple" xlink:href="ftp://ftp.digital.com/pub/Digital/SRC/publications/mds/protection.pdf">
 <cite >A Hardware Architecture for Implementing Protection Rings</cite></weblink> 1972 (pdf)</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://download.intel.com/design/PentiumII/manuals/24319202.pdf">
 <cite >Intel Architecture Software Developer's Manual Volume 3: System Programming</cite></weblink> (Order Number 243192) Chapter 4 Protection; section 4.5 Privilege levels. (pdf)</entry>
<entry level="1" type="bullet">

 Tzi-cker Chiueh, Ganesh Venkitachalam, Prashant Pradhan: <weblink xlink:type="simple" xlink:href="http://portal.acm.org/ft_gateway.cfm?id=319161&amp;type=pdf&amp;coll=portal&amp;dl=ACM&amp;CFID=15151515&amp;CFTOKEN=6184618">
 <cite >Integrating segmentation and paging protection for safe, efficient and transparent software extensions</cite></weblink> 1999 Chapter 3: Protection hardware features in Intel X86 architecture; section 3.1   Protection checks. (pdf)</entry>
<entry level="1" type="bullet">

 Takahiro Shinagawa, Kenji Kono, Takashi Masuda: <weblink xlink:type="simple" xlink:href="http://www.is.s.u-tokyo.ac.jp/tech-reports/TR00-02-a4.pdf">
 <cite >Exploiting Segmentation Mechanism for Protecting Against Malicious Mobile Code</cite></weblink> 2000 chapter 3 Implementation; section 3.2.1 Ring Protection (pdf)</entry>
<entry level="1" type="bullet">

Boebert, William Earl and R. Kain. <it>A Practical Alternative to Hierarchical Integrity Policies</it>. Proceedings of the 8th National Computer Security Conference, 1985.</entry>
<entry level="1" type="bullet">

Gorine, Andrei and Krivolapov, Alexander. <weblink xlink:type="simple" xlink:href="http://www.ddj.com/database/207401567">
Kernel Mode Databases: A DBMS technology for high-performance applications</weblink>, <it>Dr. Dobb's Journal</it>, May, 2008.</entry>
</list>
</p>



</sec>
<sec>
<st>
References</st>


<p>

<reflist>
<entry id="1">
Paul A. Karger, Andrew J. Herbert, <it><weblink xlink:type="simple" xlink:href="http://doi.ieeecomputersociety.org/10.1109/SP.1984.10001">
An Augmented Capability Architecture to Support Lattice Security and Traceability of Access</weblink></it>, sp, p. 2,  1984 IEEE Symposium on Security and Privacy,  1984</entry>
<entry id="2">
Walter Binder, <it><weblink xlink:type="simple" xlink:href="http://doi.ieeecomputersociety.org/10.1109/SAINT.2001.905166">
Design and Implementation of the J-SEAL2 Mobile Agent Kernel</weblink></it>, saint, p. 35,  2001 Symposium on Applications and the Internet (SAINT'01),  2001</entry>
<entry id="3">
<physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<computer_user wordnetid="109951274" confidence="0.8">
<programmer wordnetid="110481268" confidence="0.8">
<engineer wordnetid="109615807" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<research_worker wordnetid="110523076" confidence="0.8">
<link xlink:type="simple" xlink:href="../112/1623112.xml">
Jochen Liedtke</link></research_worker>
</scientist>
</causal_agent>
</engineer>
</programmer>
</computer_user>
</person>
</physical_entity>
. <it><weblink xlink:type="simple" xlink:href="http://i30www.ira.uka.de/research/publications/papers/index.php?lid=en&amp;docid=642">
On µ-Kernel Construction</weblink></it>, <it>Proc. 15th ACM Symposium on Operating System Principles (SOSP)</it>, December 1995</entry>
<entry id="4">
Ousterhout, J. K. 1990. <it>Why aren't operating systems getting faster as fast as hardware?</it> In Usenix Summer Conference, Anaheim, CA, pp. 247{256.</entry>
<entry id="5">
Maurice Wilkes <it><weblink xlink:type="simple" xlink:href="http://doi.acm.org/10.1145/198153.198154">
Operating systems in a changing world</weblink></it> ACM SIGOPS Operating Systems Review. Volume 28 ,  Issue 2  (April 1994). pp. 9 - 21 ISSN:0163-5980 <weblink xlink:type="simple" xlink:href="http://cat.inist.fr/?aModele=afficheN&amp;cpsidt=4146165">
http://cat.inist.fr/?aModele=afficheN&amp;cpsidt=4146165</weblink> <weblink xlink:type="simple" xlink:href="http://www.soe.ucsc.edu/~brucem/soft_ins/dissert.html">
quote from</weblink>.</entry>
<entry id="6">
Gorine, Andrei and Krivolapov, Alexander. <weblink xlink:type="simple" xlink:href="http://www.ddj.com/database/207401567">
 "Kernel Mode Databases: A DBMS Technology For High-Performance Applications"</weblink>, <it>Dr. Dobb's Journal</it>, May, 2008..</entry>
<entry id="7">
Dornan, Andy&#32;(2005-11-01).&#32;"<weblink xlink:type="simple" xlink:href="http://www.networkcomputing.com/showArticle.jhtml?articleID=172302134">
Intel VT vs. AMD Pacifica</weblink>".&#32;  CMP.&#32;Retrieved on <link>
2008-07-16</link>.</entry>
</reflist>
</p>


<p>

<table style=";" class="navbox" cellspacing="0">
<row>
<col style="padding:2px;">
<table style="width:100%;background:transparent;color:inherit;;" class="nowraplinks collapsible autocollapse " cellspacing="0">
<row>
<header colspan="2" style=";" class="navbox-title">
<link xlink:type="simple" xlink:href="../194/22194.xml">
Operating system</link></header>
</row>
<row style="height:2px;">

</row>
<row>
<col style=";;" class="navbox-group">
General</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<link xlink:type="simple" xlink:href="../395/55395.xml">
History</link>&nbsp;·  <record wordnetid="106647206" confidence="0.8">
<chronology wordnetid="106503224" confidence="0.8">
<indication wordnetid="106797169" confidence="0.8">
<evidence wordnetid="106643408" confidence="0.8">
<timeline wordnetid="106504965" confidence="0.8">
<written_record wordnetid="106502378" confidence="0.8">
<link xlink:type="simple" xlink:href="../968/247968.xml">
Timeline</link></written_record>
</timeline>
</evidence>
</indication>
</chronology>
</record>
&nbsp;·  <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../119/229119.xml">
Developement</link></database>
</wordnet>
</lexical_database>
</electronic_database>
</information>
</message>
&nbsp;·  <link xlink:type="simple" xlink:href="../531/981531.xml">
List</link></col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
<link xlink:type="simple" xlink:href="../394/50394.xml">
Kernel</link></col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-even">
<table style="width:100%;;;;" class="nowraplinks  navbox-subgroup" cellspacing="0">
<row>
<col style=";padding-left:0em;padding-right:0em;;" class="navbox-group">
General</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<link xlink:type="simple" xlink:href="../023/20023.xml">
Microkernel</link>&nbsp;·  <link xlink:type="simple" xlink:href="../023/20023.xml#xpointer(//*[./st=%22Nanokernel%22])">
Nanokernel</link></col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";padding-left:0em;padding-right:0em;;" class="navbox-group">
Types</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-even">
<link xlink:type="simple" xlink:href="../825/20825.xml">
monolithic</link>&nbsp;·  <plant_part wordnetid="113086908" confidence="0.8">
<natural_object wordnetid="100019128" confidence="0.8">
<kernel wordnetid="113137010" confidence="0.8">
<link xlink:type="simple" xlink:href="../041/4345041.xml">
hybrid</link></kernel>
</natural_object>
</plant_part>
&nbsp;·  <plant_part wordnetid="113086908" confidence="0.8">
<natural_object wordnetid="100019128" confidence="0.8">
<kernel wordnetid="113137010" confidence="0.8">
<link xlink:type="simple" xlink:href="../757/95757.xml">
exokernel</link></kernel>
</natural_object>
</plant_part>
</col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";padding-left:0em;padding-right:0em;;" class="navbox-group">
Components</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<link xlink:type="simple" xlink:href="../467/93467.xml">
Kernel space</link>&nbsp;·  <link xlink:type="simple" xlink:href="../658/371658.xml">
Loadable kernel module</link>&nbsp;·  <link xlink:type="simple" xlink:href="../101/9101.xml">
device driver</link>&nbsp;·  <link xlink:type="simple" xlink:href="../467/93467.xml">
User space</link>&nbsp;·  <link xlink:type="simple" xlink:href="../109/555109.xml">
Userland</link></col>
</row>
</table>
</col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
<link xlink:type="simple" xlink:href="../806/15395806.xml">
Process management</link></col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<link xlink:type="simple" xlink:href="../178/45178.xml">
Process</link>&nbsp;·  <link xlink:type="simple" xlink:href="../857/6857.xml">
Multiprogramming</link>&nbsp;·  <link xlink:type="simple" xlink:href="../289/15289.xml">
Interrupt</link>&nbsp;·  Modes: (<link xlink:type="simple" xlink:href="../596/167596.xml">
Protected mode</link>&nbsp;·  <link>
Supervisor mode</link>)&nbsp;·  <link xlink:type="simple" xlink:href="../857/6857.xml">
Computer multitasking</link>&nbsp;·  <link xlink:type="simple" xlink:href="../920/231920.xml">
Scheduling</link>&nbsp;·  <link xlink:type="simple" xlink:href="../904/6904.xml">
Context switch</link>&nbsp;·  <link xlink:type="simple" xlink:href="../857/6857.xml">
Cooperative multitasking</link>&nbsp;·  <link xlink:type="simple" xlink:href="../566/2204566.xml">
Preemptive multitasking</link>&nbsp;·  <link xlink:type="simple" xlink:href="../954/3991954.xml">
CPU modes</link>&nbsp;·  <link xlink:type="simple" xlink:href="../303/45303.xml">
Thread (computer science)</link></col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
Memory management</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-even">
<link xlink:type="simple" xlink:href="../373/515373.xml">
Memory protection</link>&nbsp;·  <link xlink:type="simple" xlink:href="../131/1323131.xml">
Segmentation</link>&nbsp;·  <link xlink:type="simple" xlink:href="../193/311193.xml">
Paging</link>&nbsp;·  <link xlink:type="simple" xlink:href="../112/177112.xml">
Memory management unit</link>&nbsp;·  <link xlink:type="simple" xlink:href="../803/28803.xml">
Segmentation fault</link>&nbsp;·  <link xlink:type="simple" xlink:href="../943/573943.xml">
General protection fault</link></col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
Examples</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../304/18933304.xml">
AmigaOS</link></O>
&nbsp;·  <link xlink:type="simple" xlink:href="../801/4801.xml">
BeOS</link>&nbsp;·  <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../409/22409.xml">
IBM OS/2</link></O>
&nbsp;·  <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../027/20027.xml">
MS-DOS</link></O>
&nbsp;·  <link xlink:type="simple" xlink:href="../890/18890.xml">
Windows</link>&nbsp;·  <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../297/6097297.xml">
Linux</link></O>
&nbsp;·  <link xlink:type="simple" xlink:href="../642/31642.xml">
UNIX</link>&nbsp;·  <link xlink:type="simple" xlink:href="../658/1178658.xml">
OpenSolaris</link>&nbsp;·  <link xlink:type="simple" xlink:href="../640/20640.xml">
Mac OS X</link>&nbsp;·   <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../889/360889.xml">
ReactOS</link></O>
&nbsp;·  <it><link xlink:type="simple" xlink:href="../916/71916.xml">
more…</link>''</it></col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
Miscellaneous concepts</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-even">
<link xlink:type="simple" xlink:href="../679/6885679.xml">
Boot loader</link>&nbsp;·  <standard wordnetid="107260623" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../253/432253.xml">
PXE</link></system_of_measurement>
</standard>
&nbsp;·  <link xlink:type="simple" xlink:href="../ury/24th_century.xml">
API</link>&nbsp;·  <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../131/351131.xml">
Virtual file system</link></instrumentality>
</artifact>
</system>
&nbsp;·  <link xlink:type="simple" xlink:href="../071/2550071.xml">
Virtual tape library</link>&nbsp;·  <link xlink:type="simple" xlink:href="../592/4122592.xml">
Computer network</link>&nbsp;·  <link xlink:type="simple" xlink:href="../293/12293.xml">
GUI</link>&nbsp;·  <link xlink:type="simple" xlink:href="../511/425511.xml">
HAL</link></col>
</row>
</table>
</col>
</row>
</table>
</p>



</sec>
</bdy>
</causal_agent>
</worker>
</assistant>
</model>
</person>
</physical_entity>
</article>
