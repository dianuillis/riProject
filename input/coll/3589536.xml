<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 20:32:50[mciao0826] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<event  confidence="0.8" wordnetid="100029378">
<rule  confidence="0.8" wordnetid="105846932">
<act  confidence="0.8" wordnetid="100030358">
<psychological_feature  confidence="0.8" wordnetid="100023100">
<procedure  confidence="0.8" wordnetid="101023820">
<activity  confidence="0.8" wordnetid="100407535">
<algorithm  confidence="0.8" wordnetid="105847438">
<header>
<title>Christofides algorithm</title>
<id>3589536</id>
<revision>
<id>243329048</id>
<timestamp>2008-10-06T01:50:15Z</timestamp>
<contributor>
<username>Lightbot</username>
<id>7178666</id>
</contributor>
</revision>
<categories>
<category>Approximation algorithms</category>
<category>Graph algorithms</category>
<category>Spanning tree</category>
</categories>
</header>
<bdy>

The goal of the <b>Christofides <link xlink:type="simple" xlink:href="../452/63452.xml">
heuristics</link> <link xlink:type="simple" xlink:href="../775/775.xml">
algorithm</link></b> is to find a solution to the instances of the <link xlink:type="simple" xlink:href="../248/31248.xml">
traveling salesman problem</link> that satisfy the <link xlink:type="simple" xlink:href="../941/53941.xml">
triangle inequality</link>.
Let <math>G=(V,w)</math> be an instance of TSP, i.e. <math>G</math> is a complete graph on the set <math>V</math> of vertices with weight function <math>w</math> assigning a nonnegative real weight to every edge of <math>G</math>.<p>

<link xlink:type="simple" xlink:href="../185/24185.xml">
Pseudo-code</link>: 
Step 1: Create the <link xlink:type="simple" xlink:href="../795/41795.xml">
minimum spanning tree</link> MST <math>T</math> of <math>G</math>.
Step 2: Denote <math>O</math> the set of vertices with odd degree in <math>T</math> and find a perfect matching1 <math>M</math> with minimal weight in the complete graph over the vertices from <math>O</math>.
Step 3: Combine the edges of <math>M</math> and <math>T</math> to form a multigraph <math>H</math>.
Step 4: Find an <link xlink:type="simple" xlink:href="../219/333219.xml">
Eulerian path</link> in <math>H</math> by skipping vertices already seen.</p>
<p>

1:  Perfect matching vertices: A subset of edges without common vertices, of a connected graph that touches all vertices exactly once.</p>

<sec>
<st>
 Cost of algorithm </st>

<p>

The solution produced by the algorithm is within 3/2 of an optimal solution.</p>
<p>

The proof is as follows:</p>
<p>

Denote <math>A</math> the edge set of the optimal solution of TSP for <math>G</math>. Since <math>(V,A)</math> is connected, it contains some spanning tree and thus <math>w(A)\ge w(T)</math>. Further denote <math>B</math> the edge set of the optimal solution of TSP for the complete graph over vertices from <math>O</math>. It follows that
<math>w(A)\ge w(B)</math>. We show that there is a perfect matching of vertices from <math>O</math> with weight under
<math>w(B)/2\le w(A)/2</math> and therefore we have the same upper bound for <math>M</math> (since <math>M</math> is the minimal perfect matching).
Since <math>O</math> must contain an even number of vertices, a perfect matching exists. Let us denote
<math>e_1,\ldots,e_{2k}</math> the (only) Eulerian path in <math>(O,B)</math>. Clearly both
<math>\{e_1,e_3,\ldots,e_{2k-1}\}</math> and
<math>\{e_2,e_4,\ldots,e_{2k}\}</math> are perfect matchings and the weight of at least one of them is
under <math>w(B)/2</math>.
Thus <math>w(M)+w(T)\le w(A)+w(A)/2</math> and from the triangle inequality follows that the above algorithm is 3/2-approximative.</p>


</sec>
<sec>
<st>
 References </st>

<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.nist.gov/dads/HTML/christofides.html">
NIST Christofides Algorithm Definition</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://ocw.mit.edu/NR/rdonlyres/Civil-and-Environmental-Engineering/1-203JFall-2004/66F3B435-07C9-465A-9A53-820E3E8943C0/0/nlec2.pdf">
Example of Christofides</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.cadmo.ethz.ch/education/lectures/SS07/graph_algo/sol06.pdf">
ETH Zurich - How to calculate the Christofides cost</weblink></entry>
<entry level="1" type="bullet">

 Nicos Christofides, Worst-case analysis of a new heuristic for the <link xlink:type="simple" xlink:href="../248/31248.xml">
travelling salesman problem</link>, Report 388, Graduate School of Industrial Administration, CMU, 1976.</entry>
</list>
</p>


</sec>
</bdy>
</algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</article>
