<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 20:30:30[mciao0825] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>Cut detection</title>
<id>3599801</id>
<revision>
<id>226233188</id>
<timestamp>2008-07-17T13:05:18Z</timestamp>
<contributor>
<username>Alphachimpbot</username>
<id>1671506</id>
</contributor>
</revision>
<categories>
<category>Video processing</category>
</categories>
</header>
<bdy>

<b>Cut detection</b> is a field of research of <link xlink:type="simple" xlink:href="../323/5323.xml">
computer science</link>. Its subject is the automated detection of <it>cuts</it> in <link xlink:type="simple" xlink:href="../733/8733.xml">
digital video</link>.
<sec>
<st>
 Use </st>
<p>

Cut detection is used to split up a film into basic scenes. Therefore, it is of great use in software for post-production of videos. It is also a fundamental part of automated indexing of huge video archives, where from each scene one representative picture is chosen to create a visual overview of the whole film. By processing such indexes a search engine can process search items like "show me all films where there's a scene with a lion in it." Generally speaking, cut detection can do nothing that a human editor couldn't do manually, but it saves a lot of time.</p>

</sec>
<sec>
<st>
 Basic technical terms </st>
<p>

<image location="left" width="150px" src="Hard_cut.jpg" type="thumb">
<caption>

A <b>hard cut</b>.
</caption>
</image>

<image location="right" width="150px" src="Dissolve.jpg" type="thumb">
<caption>

The <b>soft cut</b> <it>dissolve</it> blends one shot gradually into another with a transparency effect.
</caption>
</image>

In simple terms cut detection is about finding the positions in a video in that one scene is replaced by another one with different visual content. Technically speaking the following terms are used:</p>
<p>

A digital video consists of <b>frames</b> that are presented to the viewer's eye in rapid succession to create the impression of movement. "Digital" in this context means both that a single frame consists of <link xlink:type="simple" xlink:href="../665/23665.xml">
pixel</link>s and the data is present as <link xlink:type="simple" xlink:href="../702/920702.xml">
binary data</link>, such that it can be processed with a computer. Each frame within a digital video can be uniquely identified by its <b>frame index</b>, a serial number.</p>
<p>

A <b>shot</b> is a sequence of frames shot uninterruptedly by one camera. A <b>cut</b> is the blending, in some way, of one shot into another one. Cut detection distinguishes hard cuts from soft cuts. While a <b>hard cut</b> is a sudden transition from one shot to another, i. e. one frame belongs to the first shot, the next frame belongs to the second shot, a <b>soft cut</b> is a gradual transition between two shots, i. e. a sequence of frames that belongs to both, the first <it>and</it> the second shot. "Detecting a cut" means that the position of a cut is gained; more precisely a hard cut is gained as "hard cut between frame i and frame i+1", a soft cut as "soft cut from frame i to frame j".</p>
<p>

A cut that is detected correctly is called a <b>hit</b>, a cut that is there but was not detected is called a <b>missed hit</b> and a position in that the software assumes a cut, but where actually no cut is present, is called a <b>false hit</b>.</p>
<p>

<it>An introduction to film editing and an exhaustive list of shot transition techniques can be found at <link xlink:type="simple" xlink:href="../775/10775.xml">
film editing</link>.</it></p>

</sec>
<sec>
<st>
 Vastness of the problem </st>
<p>

Although cut detection appears to be a simple task for a human being, it is a non-trivial task for computers. Cut detection would be a trivial problem if each frame of a video was enriched with additional information about <it>when</it> and <it>by which camera</it> it was taken. Possibly no algorithm for cut detection will ever be able to detect all cuts with certainty, unless it is provided with powerful artificial intelligence.</p>
<p>

While most algorithms achieve good results with hard cuts, many fail with recognizing soft cuts. Hard cuts usually go together with sudden and extensive changes in the visual content while soft cuts feature slow and gradual changes. A human being can compensate this lack of visual diversity with understanding the meaning of a scene. While a computer assumes a black line wiping a shot away to be "just another regular object moving slowly through the on-going scene", a person understands that the scene ends and is replaced by a black screen.</p>

</sec>
<sec>
<st>
 Methods </st>
<p>

Each method for cut detection works on a two-phase-principle:
<list>
<entry level="1" type="number">

 <b>Scoring.</b> Each pair of consecutive frames of a digital video is given a certain score that represents the probability that between these two frames a cut is located.</entry>
<entry level="1" type="number">

 <b>Thresholding.</b> All pairs of frames are filtered with a certain threshold value: Each pair with a score higher than the threshold is considered a cut. </entry>
</list>
</p>
<p>

This principle is error prone. First, because even minor exceedings of the threshold value produce a hit, it must be ensured that phase one scatters values widely to maximize the average difference between the score for "cut" and "no cut". Second, the threshold must be chosen with care; usually useful values can be gained with statistical methods.
<image location="right" width="400px" src="Cut_Detection_en.png" type="thumb">
<caption>

Cut detection. (1) <b>Hit</b>: a detected hard cut. (2) <b>Missed hit</b>: a soft cut (<it>dissolve</it>), that was not detected. (3) <b>False Hit</b>: one single soft cut that is falsely interpreted as two different hard cuts.
</caption>
</image>
</p>

<ss1>
<st>
 Scoring </st>
<p>

Developing algorithms that produce valuable scorings is no easy task. Some of the most common are:
<list>
<entry level="1" type="bullet">

 <b><link xlink:type="simple" xlink:href="../879/12738879.xml">
Sum of absolute differences</link> (SAD).</b> This is both the most obvious and most simple algorithm of all: The two consecutive frames are compared <link xlink:type="simple" xlink:href="../665/23665.xml">
pixel</link> by pixel, summing up the <link xlink:type="simple" xlink:href="../991/991.xml">
absolute value</link>s of the differences of each two corresponding pixels. The result is a positive number that is used as the score. SAD reacts very sensitively to even minor changes within a scene: fast movements of the camera, explosions or the simple switching on of a light in a previously dark scene result in false hits. On the other hand, SAD hardly reacts to soft cuts at all. Yet, SAD is used often to produce a basic set of "possible hits" as it detects all visible hard cuts with utmost probability.</entry>
<entry level="1" type="bullet">

 <b>Histogram differences (HD).</b> Histogram differences is very similar to Sum of absolute differences. The difference is that HD computes the difference between the <link xlink:type="simple" xlink:href="../266/13266.xml">
histogram</link>s of two consecutive frames; a histogram is a table that contains for each color within a frame the number of pixels that are shaded in that color. HD is not as sensitive to minor changes within a scene as SAD and thus produces less false hits. One major problem of HD is that two images can have exactly the same histograms while the shown content differs extremely, e. g. a picture of the sea and a beach can have the same histogram as one of a corn field and the sky. HD offers no guarantee that it recognizes hard cuts.</entry>
<entry level="1" type="bullet">

 <b>Edge change ratio (ECR).</b> The ECR attempts to compare the actual content of two frames. It transforms both frames to <it>edge pictures</it>, i. e. it extracts the probable outlines of objects within the pictures (see <link xlink:type="simple" xlink:href="../680/331680.xml">
edge detection</link> for details). Afterwards it  compares these edge pictures using <link xlink:type="simple" xlink:href="../138/386138.xml">
dilatation</link> to compute a probability that the second frame contains the same objects as the first frame. The ECR is one of the best performing algorithms for scoring. It reacts very sensitively to hard cuts and can detect many soft cuts by nature. In its basic form even ECR cannot detect soft cuts such as <link xlink:type="simple" xlink:href="../364/8292364.xml">
wipe</link>s as it considers the fading-in objects as regular objects moving through the scene. Yet, ECR can be extended manually to recognize special forms of soft cuts.</entry>
</list>
</p>
<p>

Finally, a combination of two or more of these algorithms can improve the performance.</p>

</ss1>
</sec>
<sec>
<st>
 Cost </st>
<p>

All of the above algorithms complete in O(n) — that is to say they run in linear time — where <it>n</it> is the number of frames in the input video. The algorithms differ in a constant factor that is determined mostly by the <link xlink:type="simple" xlink:href="../184/1191184.xml">
image resolution</link> of the video.</p>

</sec>
<sec>
<st>
 Measures for quality </st>
<p>

Usually the following three measures are used to measure the quality of a cut detection algorithm:
<list>
<entry level="1" type="bullet">

 <b>Precision</b> is the probability, that an assumed cut in fact is cut:</entry>
</list>

<math>P = {C \over C + F}</math>
<list>
<entry level="1" type="bullet">

 <b>Recall</b> is the probability that an existing cut will be detected:</entry>
</list>

<math>V = {C \over C + M}</math>
<list>
<entry level="1" type="bullet">

 <b>F1</b> is a combined measure that results in high value if, and only if, both precision <it>and</it> recall result in high values:</entry>
</list>

<math>F1={2 * P * V \over P + V}</math>
The symbols stand for: <b>C</b>, the number of correctly detected cuts ("<b>c</b>orrect hits"), <b>M</b>, the number of not detected cuts ("<b>m</b>issed hits") and <b>F</b>, the number of falsely detected cuts ("<b>f</b>alse hits"). All of these measures are mathematical measures, i. e. they deliver values in between 0 and 1. The basic rule is: the higher the value, the better performs the algorithm.</p>

</sec>
<sec>
<st>
 Sample implementations </st>
<p>

A sample tool for Mac OS X that utilizes thresholding for shot detection 
is available from http://www.scene-detector.com</p>


</sec>
</bdy>
</article>
