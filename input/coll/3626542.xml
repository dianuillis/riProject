<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 20:31:48[mciao0825] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<event  confidence="0.8" wordnetid="100029378">
<rule  confidence="0.8" wordnetid="105846932">
<act  confidence="0.8" wordnetid="100030358">
<psychological_feature  confidence="0.8" wordnetid="100023100">
<procedure  confidence="0.8" wordnetid="101023820">
<activity  confidence="0.8" wordnetid="100407535">
<algorithm  confidence="0.8" wordnetid="105847438">
<header>
<title>Knuth&apos;s Algorithm X</title>
<id>3626542</id>
<revision>
<id>231409075</id>
<timestamp>2008-08-12T07:52:51Z</timestamp>
<contributor>
<username>Sunnan</username>
<id>616659</id>
</contributor>
</revision>
<categories>
<category>Search algorithms</category>
<category>Donald Knuth</category>
</categories>
</header>
<bdy>

<person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../095/8095.xml">
Donald Knuth</link></scientist>
</person>
's <b>Algorithm X</b> is a <link xlink:type="simple" xlink:href="../867/4044867.xml">
recursive</link>, <link>
nondeterministic</link>, <link xlink:type="simple" xlink:href="../034/97034.xml">
depth-first</link>, <link xlink:type="simple" xlink:href="../867/238867.xml">
backtracking</link> <link xlink:type="simple" xlink:href="../775/775.xml">
algorithm</link> that finds all solutions to the <link xlink:type="simple" xlink:href="../651/2828651.xml">
exact cover</link> problem represented by a matrix <it>A</it> consisting of 0s and 1s.
The goal is to select a subset of the rows so that the digit 1 appears in each column exactly once.<p>

Algorithm X functions as follows:</p>
<p>

<indent level="1">

| border="1" cellpadding="5" cellspacing="0"
</indent>
|
<list>
<entry level="1" type="number">

 If the matrix <it>A</it> is empty, the problem is solved; terminate successfully.</entry>
<entry level="1" type="number">

 Otherwise choose a column <it>c</it> (<link xlink:type="simple" xlink:href="../951/665951.xml">
deterministically</link>).</entry>
<entry level="1" type="number">

 Choose a row <it>r</it> such that <it>Ar</it>, <it>c</it> = 1 (<link xlink:type="simple" xlink:href="../957/665957.xml">
nondeterministically</link>).</entry>
<entry level="1" type="number">

 Include row <it>r</it> in the partial solution.</entry>
<entry level="1" type="number">

 For each column <it>j</it> such that <it>Ar</it>, <it>j</it> = 1,</entry>
<entry level="2" type="indent">

 for each row <it>i</it> such that <it>Ai</it>, <it>j</it> = 1,</entry>
<entry level="3" type="indent">

 delete row <it>i</it> from matrix <it>A</it>;</entry>
<entry level="2" type="indent">

 delete column <it>j</it> from matrix <it>A</it>.</entry>
<entry level="1" type="number">

 Repeat this algorithm recursively on the reduced matrix <it>A</it>.</entry>
</list>

|}</p>
<p>

The nondeterministic choice of <it>r</it> means that the algorithm essentially clones itself into independent subalgorithms; each subalgorithm inherits the current matrix <it>A</it>, but reduces it with respect to a different row <it>r</it>.
If column <it>c</it> is entirely zero, there are no subalgorithms and the process terminates unsuccessfully.</p>
<p>

The subalgorithms form a <link xlink:type="simple" xlink:href="../584/597584.xml">
search tree</link> in a natural way, with the original problem at the root and with level <it>k</it> containing each subalgorithm that corresponds to <it>k</it> chosen rows.
Backtracking is the process of traversing the tree in preorder, depth first.</p>
<p>

Any systematic rule for choosing column <it>c</it> in this procedure will find all solutions, but some rules work much better than others.
To reduce the number of iterations, <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../095/8095.xml">
Knuth</link></scientist>
</person>
 suggests that the column choosing algorithm select a column with the lowest number of 1s in it.</p>

<sec>
<st>
 Example </st>
<p>

For example, consider the exact cover problem specified by the universe <it>U</it> = {1, 2, 3, 4, 5, 6, 7} and the collection of sets <math>\mathcal{S}</math> = {<it>A</it>, <it>B</it>, <it>C</it>, <it>D</it>, <it>E</it>, <it>F</it>}, where:
<list>
<entry level="2" type="bullet">

 <it>A</it> = {1, 4, 7};</entry>
<entry level="2" type="bullet">

 <it>B</it> = {1, 4};</entry>
<entry level="2" type="bullet">

 <it>C</it> = {4, 5, 7};</entry>
<entry level="2" type="bullet">

 <it>D</it> = {3, 5, 6};</entry>
<entry level="2" type="bullet">

 <it>E</it> = {2, 3, 6, 7}; and</entry>
<entry level="2" type="bullet">

 <it>F</it> = {2, 7}.</entry>
</list>
</p>
<p>

This problem is represented by the matrix:</p>
<p>

<indent level="1">

| border="1" cellpadding="5" cellspacing="0"
</indent>
! !! 1 !! 2 !! 3 !! 4 !! 5 !! 6 !! 7
|-
! <it>A</it>
| 1 || 0 || 0 || 1 || 0 || 0 || 1
|-
! <it>B</it>
| 1 || 0 || 0 || 1 || 0 || 0 || 0
|-
! <it>C</it>
| 0 || 0 || 0 || 1 || 1 || 0 || 1
|-
! <it>D</it>
| 0 || 0 || 1 || 0 || 1 || 1 || 0
|-
! <it>E</it>
| 0 || 1 || 1 || 0 || 0 || 1 || 1
|-
! <it>F</it>
| 0 || 1 || 0 || 0 || 0 || 0 || 1
|}</p>
<p>

Algorithm X with Knuth's suggested heuristic for selecting columns solves this problem as follows:</p>
<p>

<b>Level 0</b></p>
<p>

Step 1—The matrix is not empty, so the algorithm proceeds.</p>
<p>

Step 2—The lowest number of 1s in any column is two. Column 1 is the first column with two 1s and thus is selected (deterministically):</p>
<p>

<indent level="1">

| border="1" cellpadding="5" cellspacing="0"
</indent>
! !! 1 !! 2 !! 3 !! 4 !! 5 !! 6 !! 7
|-
! <it>A</it>
| 1 || 0 || 0 || 1 || 0 || 0 || 1
|-
! <it>B</it>
| 1 || 0 || 0 || 1 || 0 || 0 || 0
|-
! <it>C</it>
| 0 || 0 || 0 || 1 || 1 || 0 || 1
|-
! <it>D</it>
| 0 || 0 || 1 || 0 || 1 || 1 || 0
|-
! <it>E</it>
| 0 || 1 || 1 || 0 || 0 || 1 || 1
|-
! <it>F</it>
| 0 || 1 || 0 || 0 || 0 || 0 || 1
|}</p>
<p>

Step 3—Rows <it>A</it> and <it>B</it> each have a 1 in column 1 and thus are selected (nondeterministically).</p>
<p>

The algorithm moves to the first branch at level 1…</p>
<p>

<indent level="1">

 <b>Level 1: Select Row <it>A</it></b>
</indent>

<indent level="1">

 Step 4—Row <it>A</it> is included in the partial solution.
</indent>

<indent level="1">

 Step 5—Row <it>A</it> has a 1 in columns 1, 4, and 7:
</indent>

<indent level="2">

| border="1" cellpadding="5" cellspacing="0"
</indent>
! !! 1 !! 2 !! 3 !! 4 !! 5 !! 6 !! 7
|-
! <it>A</it>
| 1 || 0 || 0 || 1 || 0 || 0 || 1
|-
! <it>B</it>
| 1 || 0 || 0 || 1 || 0 || 0 || 0
|-
! <it>C</it>
| 0 || 0 || 0 || 1 || 1 || 0 || 1
|-
! <it>D</it>
| 0 || 0 || 1 || 0 || 1 || 1 || 0
|-
! <it>E</it>
| 0 || 1 || 1 || 0 || 0 || 1 || 1
|-
! <it>F</it>
| 0 || 1 || 0 || 0 || 0 || 0 || 1
|}</p>
<p>

<indent level="1">

 Column 1 has a 1 in rows <it>A</it> and <it>B</it>; column 4 has a 1 in rows <it>A</it>, <it>B</it>, and <it>C</it>; and column 7 has a 1 in rows <it>A</it>, <it>C</it>, <it>E</it>, and <it>F</it>. Thus rows <it>A</it>, <it>B</it>, <it>C</it>, <it>E</it>, and <it>F</it> are to be removed and columns 1, 4 and 7 are to be removed:
</indent>

<indent level="2">

| border="1" cellpadding="5" cellspacing="0"
</indent>
! !! 1 !! 2 !! 3 !! 4 !! 5 !! 6 !! 7
|-
! <it>A</it>
| 1 || 0 || 0 || 1 || 0 || 0 || 1
|-
! <it>B</it>
| 1 || 0 || 0 || 1 || 0 || 0 || 0
|-
! <it>C</it>
| 0 || 0 || 0 || 1 || 1 || 0 || 1
|-
! <it>D</it>
| 0 || 0 || 1 || 0 || 1 || 1 || 0
|-
! <it>E</it>
| 0 || 1 || 1 || 0 || 0 || 1 || 1
|-
! <it>F</it>
| 0 || 1 || 0 || 0 || 0 || 0 || 1
|}</p>
<p>

<indent level="1">

 Row <it>D</it> remains and columns 2, 3, 5, and 6 remain: 
</indent>

<indent level="2">

| border="1" cellpadding="5" cellspacing="0"
</indent>
! !! 2 !! 3 !! 5 !! 6
|-
! <it>D</it>
| 0 || 1 || 1 || 1
|}</p>
<p>

<indent level="1">

 Step 1—The matrix is not empty, so the algorithm proceeds.
</indent>

<indent level="1">

 Step 2—The lowest number of 1s in any column is zero and column 2 is the first column with zero 1s:
</indent>

<indent level="2">

| border="1" cellpadding="5" cellspacing="0"
</indent>
! !! 2 !! 3 !! 5 !! 6
|-
! <it>D</it>
| 0 || 1 || 1 || 1
|}
<indent level="1">

 Thus this branch of the algorithm terminates unsuccessfully.
</indent>

<indent level="1">

 The algorithm moves to the next branch at level 1…
</indent>

<indent level="1">

 <b>Level 1: Select Row <it>B</it></b>
</indent>

<indent level="1">

 Step 4—Row <it>B</it> is included in the partial solution.
</indent>

<indent level="1">

 Row <it>B</it> has a 1 in columns 1 and 4:
</indent>

<indent level="2">

| border="1" cellpadding="5" cellspacing="0"
</indent>
! !! 1 !! 2 !! 3 !! 4 !! 5 !! 6 !! 7
|-
! <it>A</it>
| 1 || 0 || 0 || 1 || 0 || 0 || 1
|-
! <it>B</it>
| 1 || 0 || 0 || 1 || 0 || 0 || 0
|-
! <it>C</it>
| 0 || 0 || 0 || 1 || 1 || 0 || 1
|-
! <it>D</it>
| 0 || 0 || 1 || 0 || 1 || 1 || 0
|-
! <it>E</it>
| 0 || 1 || 1 || 0 || 0 || 1 || 1
|-
! <it>F</it>
| 0 || 1 || 0 || 0 || 0 || 0 || 1
|}</p>
<p>

<indent level="1">

 Column 1 has a 1 in rows <it>A</it> and <it>B</it>; and column 4 has a 1 in rows <it>A</it>, <it>B</it>, and <it>C</it>. Thus rows <it>A</it>, <it>B</it>, and <it>C</it> are to be removed and columns 1 and 4 are to be removed:
</indent>

<indent level="2">

| border="1" cellpadding="5" cellspacing="0"
</indent>
! !! 1 !! 2 !! 3 !! 4 !! 5 !! 6 !! 7
|-
! <it>A</it>
| 1 || 0 || 0 || 1 || 0 || 0 || 1
|-
! <it>B</it>
| 1 || 0 || 0 || 1 || 0 || 0 || 0
|-
! <it>C</it>
| 0 || 0 || 0 || 1 || 1 || 0 || 1
|-
! <it>D</it>
| 0 || 0 || 1 || 0 || 1 || 1 || 0
|-
! <it>E</it>
| 0 || 1 || 1 || 0 || 0 || 1 || 1
|-
! <it>F</it>
| 0 || 1 || 0 || 0 || 0 || 0 || 1
|}</p>
<p>

<indent level="1">

 Rows <it>D</it>, <it>E</it>, and <it>F</it> remain and columns 2, 3, 5, 6, and 7 remain: 
</indent>

<indent level="2">

| border="1" cellpadding="5" cellspacing="0"
</indent>
! !! 2 !! 3 !! 5 !! 6 !! 7
|-
! <it>D</it>
| 0 || 1 || 1 || 1 || 0
|-
! <it>E</it>
| 1 || 1 || 0 || 1 || 1
|-
! <it>F</it>
| 1 || 0 || 0 || 0 || 1
|}</p>
<p>

<indent level="1">

 Step 1—The matrix is not empty, so the algorithm proceeds.
</indent>

<indent level="1">

 Step 2—The lowest number of 1s in any column is one. Column 5 is the first column with one 1 and thus is selected (deterministically):
</indent>

<indent level="2">

| border="1" cellpadding="5" cellspacing="0"
</indent>
! !! 2 !! 3 !! 5 !! 6 !! 7
|-
! <it>D</it>
| 0 || 1 || 1 || 1 || 0
|-
! <it>E</it>
| 1 || 1 || 0 || 1 || 1
|-
! <it>F</it>
| 1 || 0 || 0 || 0 || 1
|}</p>
<p>

<indent level="1">

 Step 3—Row <it>D</it> has a 1 in column 5 and thus is selected (nondeterministically).
</indent>

<indent level="1">

 The algorithm moves to the first branch at level 2…
</indent>

<indent level="2">

 <b>Level 2: Select Row <it>D</it></b>
</indent>

<indent level="2">

 Step 4—Row <it>D</it> is included in the partial solution.
</indent>

<indent level="2">

 Step 5—Row <it>D</it> has a 1 in columns 3, 5, and 6:
</indent>

<indent level="3">

| border="1" cellpadding="5" cellspacing="0"
</indent>
! !! 2 !! 3 !! 5 !! 6 !! 7
|-
! <it>D</it>
| 0 || 1 || 1 || 1 || 0
|-
! <it>E</it>
| 1 || 1 || 0 || 1 || 1
|-
! <it>F</it>
| 1 || 0 || 0 || 0 || 1
|}</p>
<p>

<indent level="2">

 Column 3 has a 1 in rows <it>D</it> and <it>E</it>; column 5 has a 1 in row <it>D</it>; and column 6 has a 1 in rows <it>D</it> and <it>E</it>. Thus rows <it>D</it> and <it>E</it> are to be removed and columns 3, 5, and 6 are to be removed:
</indent>

<indent level="3">

| border="1" cellpadding="5" cellspacing="0"
</indent>
! !! 2 !! 3 !! 5 !! 6 !! 7
|-
! <it>D</it>
| 0 || 1 || 1 || 1 || 0
|-
! <it>E</it>
| 1 || 1 || 0 || 1 || 1
|-
! <it>F</it>
| 1 || 0 || 0 || 0 || 1
|}</p>
<p>

<indent level="2">

 Row <it>F</it> remains and columns 2 and 7 remain: 
</indent>

<indent level="3">

| border="1" cellpadding="5" cellspacing="0"
</indent>
! !! 2 !! 7
|-
! <it>F</it>
| 1 || 1
|}</p>
<p>

<indent level="2">

 Step 1—The matrix is not empty, so the algorithm proceeds.
</indent>

<indent level="2">

 Step 2—The lowest number of 1s in any column is one. Column 2 is the first column with one 1 and thus is selected (deterministically).
</indent>

<indent level="2">

 Row <it>F</it> has a 1 in column 2 and thus is selected (nondeterministically).
</indent>

<indent level="2">

 The algorithm moves to the first branch at level 3…
</indent>

<indent level="3">

 <b>Level 3: Select Row <it>F</it></b>
</indent>

<indent level="3">

 Step 4—Row <it>F</it> is included in the partial solution.
</indent>

<indent level="3">

 Row <it>F</it> has a 1 in columns 2 and 7:
</indent>

<indent level="4">

| border="1" cellpadding="5" cellspacing="0"
</indent>
! !! 2 !! 7
|-
! <it>F</it>
| 1 || 1
|}</p>
<p>

<indent level="3">

 Column 2 has a 1 in row <it>F</it>; and column 7 has a 1 in row <it>F</it>. Thus row <it>F</it> is is to removed and columns 2 and 7 are to be removed:
</indent>

<indent level="4">

| border="1" cellpadding="5" cellspacing="0"
</indent>
! !! 2 !! 7
|-
! <it>F</it>
| 1 || 1
|}</p>
<p>

<indent level="3">

 Step 1—The matrix is empty, thus this branch of the algorithm terminates successfully.
</indent>

<indent level="3">

 As rows <it>B</it>, <it>D</it>, and <it>F</it> are selected, the final solution is:
</indent>

<indent level="4">

| border="1" cellpadding="5" cellspacing="0"
</indent>
! !! 1 !! 2 !! 3 !! 4 !! 5 !! 6 !! 7
|-
! <it>B</it>
| 1 || 0 || 0 || 1 || 0 || 0 || 0
|-
! <it>D</it>
| 0 || 0 || 1 || 0 || 1 || 1 || 0
|-
! <it>F</it>
| 0 || 1 || 0 || 0 || 0 || 0 || 1
|}</p>
<p>

<indent level="3">

 In other words, the subcollection {<it>B</it>, <it>D</it>, <it>F</it>} is an exact cover, since every element is contained in exactly one of the sets <it>B</it> = {1, 4}, <it>D</it> = {3, 5, 6}, or <it>F</it> = {2, 7}.
</indent>

<indent level="3">

 There are no more selected rows at level 3, thus the algorithm moves to the next branch at level 2…
</indent>

<indent level="2">

 There are no more selected rows at level 2, thus the algorithm moves to the next branch at level 1…
</indent>

<indent level="1">

 There are no more selected rows at level 1, thus the algorithm moves to the next branch at level 0…
</indent>

There are no branches at level 0, thus the algorithm terminates.</p>
<p>

In summary, the algorithm determines there is only one exact cover: <math>\mathcal{S}^*</math> = {<it>B</it>, <it>D</it>, <it>F</it>}.</p>

</sec>
<sec>
<st>
 Implementations </st>
<p>

<event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../402/2736402.xml">
Dancing Links</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
, commonly known as DLX, is the technique suggested by <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../095/8095.xml">
Knuth</link></scientist>
</person>
 to efficiently implement his Algorithm X on a computer. Dancing Links implements the matrix using circular <link>
doubly-linked list</link>s of the 1s in the matrix. There is a list of 1s for each row and each column. Each 1 in the matrix has a link to the next 1 above, below, to the left, and to the right of itself.</p>

</sec>
<sec>
<st>
 See also </st>
<p>

<list>
<entry level="1" type="bullet">

 <condition wordnetid="113920835" confidence="0.8">
<state wordnetid="100024720" confidence="0.8">
<problem wordnetid="114410605" confidence="0.8">
<difficulty wordnetid="114408086" confidence="0.8">
<link xlink:type="simple" xlink:href="../651/2828651.xml">
Exact cover</link></difficulty>
</problem>
</state>
</condition>
</entry>
<entry level="1" type="bullet">

 <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../402/2736402.xml">
Dancing Links</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</entry>
</list>
</p>

</sec>
<sec>
<st>
 References </st>
<p>

<list>
<entry level="1" type="bullet">

 <cite id="CITEREFKnuth2000" style="font-style:normal"><link>
Knuth, Donald E.</link>&#32;(2000),&#32;"Dancing links", in&#32;Davies, Jim; Roscoe, Bill&#32;&amp; Woodcock, Jim,&#32;<it>Millennial Perspectives in Computer Science: Proceedings of the 1999 Oxford-Microsoft Symposium in Honour of Sir Tony Hoare</it>, Palgrave, pp. 187–214, <link xlink:type="simple" xlink:href="../751/38751.xml">
ar&amp;Chi;iv</link>:, ISBN 9780333922309</cite>&nbsp;.</entry>
</list>
</p>

</sec>
</bdy>
</algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</article>
