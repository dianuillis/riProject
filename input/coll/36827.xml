<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 15:38:21[mciao0825] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>Mutual exclusion</title>
<id>36827</id>
<revision>
<id>243073935</id>
<timestamp>2008-10-05T01:05:57Z</timestamp>
<contributor>
<username>Michael Slone</username>
<id>279360</id>
</contributor>
</revision>
<categories>
<category>Concurrency control</category>
</categories>
</header>
<bdy>

<b>Mutual exclusion</b> (often abbreviated to <b>mutex</b>) <link xlink:type="simple" xlink:href="../775/775.xml">
algorithm</link>s are used in <link xlink:type="simple" xlink:href="../605/2581605.xml">
concurrent programming</link> to avoid the simultaneous use of a common resource, such as a <link xlink:type="simple" xlink:href="../611/265611.xml">
global variable</link>, by pieces of computer code called <link xlink:type="simple" xlink:href="../312/638312.xml">
critical section</link>s. <p>

Examples of such resources are fine-grained <link xlink:type="simple" xlink:href="../991/2085991.xml">
flag</link>s, counters or <link xlink:type="simple" xlink:href="../265/25265.xml">
queue</link>s, used to communicate between code that runs concurrently, such as an application and its <link xlink:type="simple" xlink:href="../824/638824.xml">
interrupt handler</link>s.  The problem is acute because a <link xlink:type="simple" xlink:href="../303/45303.xml">
thread</link> can be stopped or started at any time.</p>
<p>

To illustrate: suppose a section of code is altering a piece of data over several program steps, when another thread, perhaps triggered by some unpredictable event, starts executing.  If this second thread reads from the same piece of data, the data, in the process of being overwritten, is in an inconsistent and unpredictable state. If the second thread tries overwriting that data, the ensuing state will probably be unrecoverable. These <link xlink:type="simple" xlink:href="../312/638312.xml">
critical section</link>s of code accessing shared data must therefore be protected, so that other processes which read from or write to the chunk of data are excluded from running.</p>
<p>

A <b>mutex</b> is also a common name for a program object that negotiates mutual exclusion among threads, also called a <link xlink:type="simple" xlink:href="../593/244593.xml">
lock</link>.</p>

<sec>
<st>
Enforcing Mutual Exclusion</st>

<p>

There exist both software and hardware solutions for enforcing mutual exclusion. The different solutions are presented below.</p>

<ss1>
<st>
Hardware solutions</st>

<p>

On a <link xlink:type="simple" xlink:href="../718/2782718.xml">
uniprocessor</link> system the common way to achieve mutual exclusion is to disable <link xlink:type="simple" xlink:href="../289/15289.xml">
interrupt</link>s for the smallest possible number of instructions that will prevent corruption of the shared data structure, the <link xlink:type="simple" xlink:href="../312/638312.xml">
critical section</link>.  This prevents interrupt code from running in the critical section.</p>
<p>

In a computer in which several processors share memory, an indivisible <link xlink:type="simple" xlink:href="../099/394099.xml">
test-and-set</link> of a <parlance wordnetid="107081177" confidence="0.8">
<formulation wordnetid="107069948" confidence="0.8">
<expressive_style wordnetid="107066659" confidence="0.8">
<link xlink:type="simple" xlink:href="../991/2085991.xml">
flag</link></expressive_style>
</formulation>
</parlance>
 is used in a tight loop to wait until the other processor clears the flag.  The test-and-set performs both operations without releasing the memory bus to another processor.  When the code leaves the critical section, it clears the flag.  This is called a "<link xlink:type="simple" xlink:href="../603/244603.xml">
spinlock</link>" or "<link xlink:type="simple" xlink:href="../489/671489.xml">
busy-wait</link>."</p>
<p>

Some computers have similar indivisible <link>
multiple-operation instructions</link>, e.g., <link xlink:type="simple" xlink:href="../224/632224.xml">
compare-and-swap</link>, for manipulating the <link xlink:type="simple" xlink:href="../167/18167.xml">
linked list</link>s used for event queues and other <link xlink:type="simple" xlink:href="../519/8519.xml">
data structure</link>s commonly used in <link xlink:type="simple" xlink:href="../194/22194.xml">
operating system</link>s.</p>

</ss1>
<ss1>
<st>
Software solutions</st>

<p>

Beside the hardware supported solution, some software solutions exist that use "<link xlink:type="simple" xlink:href="../489/671489.xml">
busy-wait</link>" to achieve the goal.
Examples of these include:
<list>
<entry level="1" type="bullet">

 <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../826/36826.xml">
Dekker's algorithm</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</instrumentality>
</artifact>
</system>
</entry>
<entry level="1" type="bullet">

 <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../891/331891.xml">
Peterson's algorithm</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</instrumentality>
</artifact>
</system>
</entry>
<entry level="1" type="bullet">

 <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../076/2176076.xml">
Lamport's bakery algorithm</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</instrumentality>
</artifact>
</system>
</entry>
<entry level="1" type="bullet">

 <link>
The black-white bakery algorithm</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../557/164557.xml">
Semaphores</link></entry>
<entry level="1" type="bullet">

 <idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<link xlink:type="simple" xlink:href="../789/1367789.xml">
Monitors</link></concept>
</idea>
</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../867/1324867.xml">
Message passing</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../238/1966238.xml">
Tuple space</link></entry>
</list>
</p>
<p>

Most classical mutual exclusion methods attempt to reduce <idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<link xlink:type="simple" xlink:href="../933/17933.xml">
latency</link></concept>
</idea>
 and busy-waits by using queuing and <link xlink:type="simple" xlink:href="../904/6904.xml">
context switch</link>es.</p>
<p>

Many forms of mutual exclusion have side-effects.  For example, classic <link xlink:type="simple" xlink:href="../557/164557.xml">
semaphores</link> permit <link xlink:type="simple" xlink:href="../181/105181.xml">
deadlock</link>s, in which one process gets a semaphore, another process gets a second semaphore, and then both wait forever for the other semaphore to be released.  Other common side-effects include <link xlink:type="simple" xlink:href="../591/501591.xml">
starvation</link>, in which a process never gets sufficient resources to run to completion, <link xlink:type="simple" xlink:href="../507/521507.xml">
priority inversion</link> in which a higher priority thread waits for a lower-priority thread, and "high latency" in which response to interrupts is not prompt.</p>
<p>

Much research is aimed at eliminating the above effects, such as by guaranteeing <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../867/554867.xml">
non-blocking progress</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
.  No perfect scheme is known.</p>

</ss1>
</sec>
<sec>
<st>
Further reading</st>

<p>

<list>
<entry level="1" type="bullet">

Michel Raynal: <it>Algorithms for Mutual Exclusion</it>, MIT Press, ISBN 0-262-18119-3</entry>
<entry level="1" type="bullet">

Sunil R. Das, Pradip K. Srimani: <it>Distributed Mutual Exclusion Algorithms</it>, IEEE Computer Society, ISBN 0-8186-3380-8</entry>
<entry level="1" type="bullet">

Thomas W. Christopher, George K. Thiruvathukal: <it>High-Performance Java Platform Computing</it>, Prentice Hall, ISBN 0-13-016164-0</entry>
<entry level="1" type="bullet">

Gadi Taubenfeld, <it>Synchronization Algorithms and Concurrent Programming</it>, Pearson/Prentice Hall, ISBN 0-13-197259-6</entry>
</list>
</p>

</sec>
<sec>
<st>
See also</st>
<p>

<list>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../356/217356.xml">
Concurrency control</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../648/312648.xml">
Mutually exclusive</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../557/164557.xml">
Semaphore</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../344/285344.xml">
Dining philosophers problem</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../016/1580016.xml">
Reentrant mutex</link></entry>
</list>
</p>

</sec>
<sec>
<st>
External links</st>
<p>

<list>
<entry level="1" type="bullet">

Article "<weblink xlink:type="simple" xlink:href="http://www-106.ibm.com/developerworks/library/l-posix2/">
Common threads: POSIX threads explained - The little things called mutexes</weblink>" by <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<computer_user wordnetid="109951274" confidence="0.8">
<programmer wordnetid="110481268" confidence="0.8">
<engineer wordnetid="109615807" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../709/436709.xml">
Daniel Robbins</link></causal_agent>
</engineer>
</programmer>
</computer_user>
</person>
</physical_entity>
</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://bardavid.com/mead/">
Mutual exclusion algorithm discovery</weblink></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.cs.adelaide.edu.au/users/esser/mutual.html">
Mutual Exclusion Petri Net</weblink></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.thinkingparallel.com/2006/09/09/mutual-exclusion-with-locks-an-introduction/">
Mutual Exclusion with Locks - an Introduction</weblink></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.thinkingparallel.com/2006/08/21/scoped-locking-vs-critical-in-openmp-a-personal-shootout/">
Mutual exclusion variants in OpenMP</weblink></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.faculty.idc.ac.il/gadi/Publications.htm">
The Black-White Bakery Algorithm</weblink></entry>
</list>
</p>


</sec>
</bdy>
</article>
