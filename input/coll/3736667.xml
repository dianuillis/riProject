<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 20:45:29[mciao0827] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<event  confidence="0.8" wordnetid="100029378">
<rule  confidence="0.8" wordnetid="105846932">
<act  confidence="0.8" wordnetid="100030358">
<psychological_feature  confidence="0.8" wordnetid="100023100">
<procedure  confidence="0.8" wordnetid="101023820">
<activity  confidence="0.8" wordnetid="100407535">
<algorithm  confidence="0.8" wordnetid="105847438">
<header>
<title>Karmarkar&apos;s algorithm</title>
<id>3736667</id>
<revision>
<id>233733242</id>
<timestamp>2008-08-23T13:45:10Z</timestamp>
<contributor>
<username>Edcolins</username>
<id>51336</id>
</contributor>
</revision>
<categories>
<category>Computer-related patent law</category>
<category>Optimization algorithms</category>
<category>Articles with example pseudocode</category>
<category>Wikipedia articles needing clarification</category>
</categories>
</header>
<bdy>

<b>Karmarkar's algorithm</b> is an algorithm introduced by <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<mathematician wordnetid="110301261" confidence="0.8">
<research_worker wordnetid="110523076" confidence="0.8">
<link xlink:type="simple" xlink:href="../259/1162259.xml">
Narendra Karmarkar</link></research_worker>
</mathematician>
</scientist>
</causal_agent>
</person>
</physical_entity>
 in <link xlink:type="simple" xlink:href="../578/34578.xml">
1984</link> for solving <link xlink:type="simple" xlink:href="../730/43730.xml">
linear programming</link> problems. It was the first reasonably efficient algorithm that solves these problems in <link xlink:type="simple" xlink:href="../576/44576.xml">
polynomial time</link>. The <link xlink:type="simple" xlink:href="../203/4331203.xml">
ellipsoid method</link> is also polynomial time but proved to be inefficient in practice. <p>

Where <math>n</math> is the number of variables and <math>L</math> is the number of bits of input to the algorithm, Karmarkar's algorithm requires <math>O(n^{3.5} L)</math> operations on <math>O(L)</math> digit numbers, as compared to <math>O(n^6 L)</math> such operations for the ellipsoid algorithm. The runtime of Karmarkar's algorithm is thus <math>O(n^{3.5} L^2 \ln L \ln \ln L)</math> using <link>
FFT-based multiplication</link> (see <link xlink:type="simple" xlink:href="../578/44578.xml">
Big O notation</link>).</p>
<p>

Karmarkar's algorithm falls within the class of <link xlink:type="simple" xlink:href="../862/1622862.xml">
interior point method</link>s: the current guess for the solution does not follow the boundary of the feasible set as in the <link xlink:type="simple" xlink:href="../458/349458.xml">
simplex method</link>, but it moves through the interior of the feasible region and reaches the optimal solution only asympotically.</p>

<sec>
<st>
 The Algorithm </st>
<p>

Consider a <link xlink:type="simple" xlink:href="../730/43730.xml">
Linear Programming</link> problem in matrix form:
<table>
<row>
<col colspan="2">
maximize <it>cTx''</it></col>
</row>
<row>
<col>
subject to</col>
<col>
<it>Ax</it> &amp;le; b.</col>
</row>
</table>

The algorithm determines the next feasible direction toward optimality and scales back by a factor 0 &amp;le; &amp;gamma; &amp;le; 1.</p>
<p>

Karmarkar's algorithm is rather complicated.  A simplified version, called the affine-scaling method, proposed and analyzed by others, can be described succinctly as follows.  Note that the affine-scaling algorithm, while efficient in practice, is not a polynomial time algorithm.</p>
<p>

<b>Algorithm</b> Affine-Scaling
Input:  A, b, c, <math>x^0</math>, <it>stopping criterion</it>, <math>\gamma</math>.</p>
<p>

<math> k \leftarrow 0 </math>
<b>do while</b> <it>stopping criterion</it> <b>not satisfied</b>
<math>v^k \leftarrow b-Ax^k</math>
<math>D_v \leftarrow \operatorname{diag}(v_1^k,\ldots,v_m^k)</math>
<math>h_x\leftarrow (A^TD_v^{-2}A)^{-1}c</math>
<math>h_v\leftarrow -Ah_x</math>
<b>if</b> <math>h_v \ge 0</math> <b>then</b>
<b>return</b> unbounded
<b>end if</b>
<math>\alpha \leftarrow \gamma\cdot \min\{-v_i^k/(h_v)_i \,\,|\,\, (h_v)_i\le 0,\, i=1,\ldots,m\}</math>
<math>x^{k+1}\leftarrow x^k + \alpha h_x</math>
<math>k\leftarrow k+1</math>
<b>end do</b></p>
<p>

<list>
<entry level="1" type="bullet">

"&amp;larr;" is a loose shorthand for "changes to".  For instance, "<it>largest</it> &amp;larr; <it>item</it>" means that the value of <it>largest</it> changes to the value of <it>item</it>.</entry>
<entry level="1" type="bullet">

"<b>return</b>" terminates the algorithm and outputs the value that follows.</entry>
</list>
</p>


</sec>
<sec>
<st>
 Example </st>
<p>

<image location="right" width="200px" src="karmarkar.png" type="thumb">
<caption>

Example solution
</caption>
</image>

Consider the linear program
<table>
<row>
<col>
maximize</col>

<col>
<math>x_1</math></col>
<col>
+</col>
<col>
<math>x_2</math></col>
</row>
<row>
<col>
subject to</col>

<col>
<math>2p x_1</math></col>
<col>
+</col>
<col>
<math>x_2</math></col>
<col>
<math>\leq</math> <math>p^2+1</math>, <math>p=0.0, 0.1, 0.2,\ldots, 0.9, 1.0.</math></col>
</row>
</table>

That is, there are 2 variables <math>x_1, x_2</math> and 11 constraints associated with varying values of <math>p</math>. This figure shows each iteration of the algorithm as red circle points. The constraints are shown as blue lines.</p>

</sec>
<sec>
<st>
 Patent controversy </st>

<p>

At the time he discovered the algorithm, Narendra Karmarkar was employed by <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../269/17555269.xml">
AT&amp;T</link></company>
 and they realized that his discovery could be of practical importance.  In April 1985, AT&amp;T promptly applied for a patent on Karmarkar's algorithm and that became more fuel for the ongoing controversy over the issue of <link xlink:type="simple" xlink:href="../266/76266.xml">
software patent</link>s.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref> It would seem 
&#91;&#93; that AT&amp;T applied for a patent on what amounted to a mathematical theorem.  Even before the patent was actually granted, it seemed that there was <link xlink:type="simple" xlink:href="../906/572906.xml">
prior art</link> that might have been applicable.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%222%22])">2</ref> Mathematicians who specialize in <link xlink:type="simple" xlink:href="../506/21506.xml">
numerical analysis</link> such as <link>
Philip Gill</link> and others showed that Karmarkar's algorithm is actually equivalent to a <link>
projected Newton barrier method</link> with a logarithmic <link xlink:type="simple" xlink:href="../647/3382647.xml">
barrier function</link>, if the parameters are chosen suitably.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%223%22])">3</ref> Such methods were widely used for <link xlink:type="simple" xlink:href="../709/679709.xml">
nonlinear programming</link> since the 1960s. In fact, one well-known book first published in 1968 described the technique specifically in the context of linear programming.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%224%22])">4</ref> Nevertheless, the patent was eventually granted as <weblink xlink:type="simple" xlink:href="http://patft.uspto.gov/netacgi/nph-Parser?patentnumber=4744026">
U.S. Patent 4,744,026</weblink><weblink xlink:type="simple" xlink:href="http://www.pat2pdf.org/pat2pdf/foo.pl?number=4744026">
&nbsp;</weblink>: "Methods and apparatus for efficient resource allocation" in May 1988.  The patent, however, proved to be of limited commercial value to AT&amp;T.  They built up the <link>
KORBX</link> system, an 8-processor <link>
Alliant</link> computer incorporating linear programming software using Karmarkar's algorithm, priced at US$8.9 million each, and unsurprisingly they only managed to sell two such systems.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%222%22])">2</ref> Opponents of software patents have further alleged that the patents ruined the positive interaction cycles that previously characterized the relationship between researchers in linear programming and industry, and specifically it isolated Karmarkar himself from the network of mathematical researchers in his field.
<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%225%22])">5</ref></p>
<p>

The patent itself expired in 2005, and the algorithm is presently in the public domain.</p>

</sec>
<sec>
<st>
 References </st>

<p>

<list>
<entry level="1" type="bullet">

 Ilan Adler, Narendra Karmarkar, Mauricio G.C. Resende and Geraldo Veiga (1989). "An Implementation of Karmarkar's Algorithm for Linear Programming".  <it>Mathematical Programming</it>, Vol 44, p. 297&ndash;335.</entry>
<entry level="1" type="bullet">

 Narendra Karmarkar (1984). "A New Polynomial Time Algorithm for Linear Programming", <it>Combinatorica</it>, Vol 4, nr. 4, p. 373&ndash;395.</entry>
</list>
</p>

<p>

<reflist>
<entry id="1">
Kolata, Gina&#32;(1989-03-12).&#32;"<weblink xlink:type="simple" xlink:href="http://query.nytimes.com/gst/fullpage.html?res=950DEFD61038F931A25750C0A96F948260">
IDEAS &amp; TRENDS; Mathematicians Are Troubled by Claims on Their Recipes</weblink>", <it><newspaper wordnetid="106267145" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../680/30680.xml">
The New York Times</link></newspaper>
</it>.&nbsp;</entry>
<entry id="2">
<weblink xlink:type="simple" xlink:href="http://www.cs.cmu.edu/afs/cs.cmu.edu/academic/class/15850c-s96/www/interiorpoint.txt">
Various posts by Matthew Saltzman, Clemson University</weblink></entry>
<entry id="3">
 <cite style="font-style:normal">Gill, Philip E.; Murray, Walter, Saunders, Michael A., Tomlin, J. A. and Wright, Margaret H.&#32;(1986).&#32;"<weblink xlink:type="simple" xlink:href="http://www.springerlink.com/content/2781h35w87600923/">
On projected Newton barrier methods for linear programming and an equivalence to Karmarkar’s projective method</weblink>". <it>Mathematical Programming</it>&#32;<b>36</b>&#32;(2): 183–209.</cite>&nbsp;</entry>
<entry id="4">
 <cite style="font-style:normal" class="book"><link>
Anthony V. Fiacco</link>;&#32;<link>
Garth P. McCormick</link>&#32;(1968). Nonlinear Programming: Sequential Unconstrained Minimization Techniques..&#32;New York:&#32;Wiley. ISBN 978-0-471-25810-0.</cite>&nbsp; Reprinted by <link xlink:type="simple" xlink:href="../886/26886.xml">
SIAM</link> in 1990 as ISBN 978-0-898712-54-4.
</entry>
<entry id="5">
"<weblink xlink:type="simple" xlink:href="http://eupat.ffii.org/papers/konno95/index.ja.html">
"今野浩: カーマーカー特許とソフトウェア -- 数学は 特許に なるか (Konno Hiroshi: The Kamarkar Patent and Software -- Has Mathematics Become Patentable?)"</weblink>".&#32;  <group wordnetid="100031264" confidence="0.8">
<link xlink:type="simple" xlink:href="../861/495861.xml">
FFII</link></group>
.&#32;Retrieved on <link>
2008-06-27</link>.</entry>
</reflist>
</p>


</sec>
</bdy>
</algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</article>
