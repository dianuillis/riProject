<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 20:45:28[mciao0825] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<event  confidence="0.8" wordnetid="100029378">
<rule  confidence="0.8" wordnetid="105846932">
<act  confidence="0.8" wordnetid="100030358">
<psychological_feature  confidence="0.8" wordnetid="100023100">
<procedure  confidence="0.8" wordnetid="101023820">
<activity  confidence="0.8" wordnetid="100407535">
<algorithm  confidence="0.8" wordnetid="105847438">
<header>
<title>Slab allocation</title>
<id>3926881</id>
<revision>
<id>233916752</id>
<timestamp>2008-08-24T11:44:25Z</timestamp>
<contributor>
<username>El Pantera</username>
<id>4609315</id>
</contributor>
</revision>
<categories>
<category>Memory management algorithms</category>
<category>Wikipedia articles needing rewrite</category>
</categories>
</header>
<bdy>

<table class="metadata plainlinks ambox ">
<row>
<col>

ambox-content" style=""</col>
</row>
<row>
<col class="mbox-image"><p>

<image width="40px" src="Crystal_Clear_app_kedit.svg">
<caption>

Notepad
</caption>
</image>
</p>
</col>
<col style="" class="mbox-text">
 <b>To comply with Wikipedia's , this article may need to be rewritten.</b>
Please help <weblink xlink:type="simple" xlink:href="http://localhost:18088/wiki/index.php?title=Slab_allocation&amp;action=edit">
improve this article</weblink>. The may contain suggestions.</col>
</row>
</table>


Slab allocation is a <link xlink:type="simple" xlink:href="../924/66924.xml">
memory management</link> algorithm that juxtaposes objects of the same type. A slab allocator will not fragment memory, but a segment of memory (known as a <it>slab</it>) may only store objects of a particular type, and free slots in a partially filled slab may not be used for another type unless all slots are freed and the slab is reassigned.
<sec>
<st>
 Implementation </st>
<p>

Understanding the slab allocation algorithm requires defining and explaining some terms:
<list>
<entry level="1" type="number">

 <b>Cache</b>: cache represents a small amount of very fast memory. Here we use cache as storage for <link xlink:type="simple" xlink:href="../665/169665.xml">
object</link>s such as <link xlink:type="simple" xlink:href="../557/164557.xml">
semaphore</link>s, <link xlink:type="simple" xlink:href="../178/45178.xml">
process</link> s, <link xlink:type="simple" xlink:href="../077/7077.xml">
file</link> objects etc. Every cache represents storage for only one type of object.</entry>
<entry level="1" type="number">

 <b>Slab</b>: slab represents a contiguous piece of memory, usually made of several physically contiguous pages. A cache consists of one or more slabs.</entry>
</list>
</p>
<p>

When a program sets up a cache, it allocates a number of objects to that cache. This number depends on the size of the associated slabs.</p>
<p>

Slabs may exist in one of the following states :
<list>
<entry level="1" type="number">

 <it>empty</it> - all objects on a slab marked as free</entry>
<entry level="1" type="number">

 <it>partial</it> - slab consists of both used and free objects</entry>
<entry level="1" type="number">

 <it>full</it> - all objects on a slab marked as used</entry>
</list>
</p>
<p>

Initially, the system marks each slab as "empty". When the process calls for a new kernel object, the system tries to find a free location for that object on a partial slab in a cache for that type of object. If no such location exists, the system allocates a new slab from contiguous physical pages and assigns it to a cache. The new object gets allocated from this slab, and its location becomes marked as "partial".</p>
<p>

The slab allocation algorithm has as its principal benefit that memory gets allocated in exactly the same size as requested, thus no internal memory fragmentation exists. The allocation takes place quickly, because the system builds the objects in advance and readily allocates them from a slab.</p>

</sec>
<sec>
<st>
Slabs</st>
<p>

A slab is the amount that a cache can grow or shrink by.  It represents one memory allocation to the cache from the machine, and whose size is customarily a multiple of the <link>
page size</link>.  A slab must contain a list of free buffers (or bufctls), as well as a list of the bufctls that have been allocated (in the case of a large slab size).</p>

<ss1>
<st>
Large Slabs</st>
<p>

These are for caches that store objects that are not less than 1/8 of the page size for a given machine.  The reason for the large slabs having a different layout from the small slabs is that it allows large slabs to pack better into page-size units, which helps with fragmentation.  The slab contains a list of bufctls, which are simply controllers for each buffer that can be allocated (a buffer is the memory that the user of a slab allocator would use).</p>

</ss1>
<ss1>
<st>
Small Slabs</st>
<p>

The small slabs contain objects that are less than 1/8 of the page size for a given machine.  These small slabs need to be optimized further from the logical layout, by avoiding using bufctls (which would be just as large as the data itself and cause memory usage to be much greater).  A small slab is exactly one page, and has a defined structure that allows bufctls to be avoided.  The last part of the page contains the 'slab header' which is the information needed to retain the slab.  Starting at the first address of that page, there are as many buffers as can be allocated without running into the slab header at the end of the page.</p>
<p>

Instead of using bufctls, we use the buffers themselves to retain the free list links.  This allows the small slab's bufctl to be bypassed.</p>

</ss1>
</sec>
<sec>
<st>
 Systems using slab allocation </st>

<p>

<list>
<entry level="1" type="number">

 <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../304/18933304.xml">
AmigaOS</link></O>
 (introduced in 4.0)</entry>
<entry level="1" type="number">

 <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../229/294229.xml">
DragonFly BSD</link></O>
 (introduced in release 1.0)</entry>
<entry level="1" type="number">

 <platform wordnetid="103961939" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<surface wordnetid="104362025" confidence="0.8">
<horizontal_surface wordnetid="103536348" confidence="0.8">
<link xlink:type="simple" xlink:href="../554/7580554.xml">
FreeBSD</link></horizontal_surface>
</surface>
</artifact>
</platform>
 (introduced in 5.0)</entry>
<entry level="1" type="number">

 <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../297/6097297.xml">
Linux</link></O>
 (introduced in kernel 2.2)</entry>
<entry level="1" type="number">

 <link xlink:type="simple" xlink:href="../495/21495.xml">
NetBSD</link> (introduced in 4.0)</entry>
<entry level="1" type="number">

 <link xlink:type="simple" xlink:href="../145/46145.xml">
Solaris</link> (introduced in 2.4)</entry>
</list>
</p>

</sec>
<sec>
<st>
See also</st>
<p>

<list>
<entry level="1" type="bullet">

 <unit_of_measurement wordnetid="113583724" confidence="0.8">
<definite_quantity wordnetid="113576101" confidence="0.8">
<link xlink:type="simple" xlink:href="../863/2349863.xml">
Slab (NCR)</link></definite_quantity>
</unit_of_measurement>
 - a similar but distinct meaning for NCR computers</entry>
<entry level="1" type="bullet">

 <link>
SLUB (computer science)</link></entry>
</list>
</p>

</sec>
<sec>
<st>
 Sources </st>

<p>

<list>
<entry level="1" type="bullet">

 <physical_entity wordnetid="100001930" confidence="0.8">
<peer wordnetid="109626238" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<colleague wordnetid="109935990" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<associate wordnetid="109816771" confidence="0.8">
<link xlink:type="simple" xlink:href="../106/4210106.xml">
Abraham Silberschatz</link></associate>
</scientist>
</causal_agent>
</colleague>
</person>
</peer>
</physical_entity>
 <it>et al</it>: <it>Operating system concepts</it>. Wiley: 2004. ISBN 0-471-69466-5 </entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../740/3198740.xml">
Jeff Bonwick</link>, <weblink xlink:type="simple" xlink:href="http://citeseer.ist.psu.edu/bonwick94slab.html">
The Slab Allocator: An Object-Caching Kernel Memory Allocator (1994)</weblink></entry>
</list>
</p>

</sec>
<sec>
<st>
External links</st>
<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.ibm.com/developerworks/linux/library/l-linux-slab-allocator/">
Anatomy of the Linux slab allocator</weblink> a developerWorks article by M. Tim Jones</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://lwn.net/Articles/229984/">
The SLUB allocator</weblink> comment about management of slabs in <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../510/18510.xml">
Linux</link></software>
 by two different allocators: SLUB allocator and SLAB allocator</entry>
</list>
</p>


</sec>
</bdy>
</algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</article>
