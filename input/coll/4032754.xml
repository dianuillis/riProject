<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 20:50:17[mciao0825] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<event  confidence="0.8" wordnetid="100029378">
<rule  confidence="0.8" wordnetid="105846932">
<act  confidence="0.8" wordnetid="100030358">
<psychological_feature  confidence="0.8" wordnetid="100023100">
<procedure  confidence="0.8" wordnetid="101023820">
<activity  confidence="0.8" wordnetid="100407535">
<algorithm  confidence="0.8" wordnetid="105847438">
<header>
<title>Huang&apos;s algorithm</title>
<id>4032754</id>
<revision>
<id>197006272</id>
<timestamp>2008-03-09T14:45:55Z</timestamp>
<contributor>
<username>Jonty303</username>
<id>851224</id>
</contributor>
</revision>
<categories>
<category>Termination algorithms</category>
</categories>
</header>
<bdy>

<b>Huang's algorithm</b> is an <link xlink:type="simple" xlink:href="../775/775.xml">
algorithm</link> for detecting <link xlink:type="simple" xlink:href="../658/6782658.xml">
termination</link> in a <link xlink:type="simple" xlink:href="../501/8501.xml">
distributed system</link>. The algorithm was proposed by <link>
Shing-Tsaan Huang</link> in <link xlink:type="simple" xlink:href="../847/34847.xml">
1989</link> in the <it><link>
Journal of Computers</link></it>.
<sec>
<st>
 Termination detection </st>
<p>

The basis of termination detection is in the concept of a distributed system process' state. At any time, a process in a distributed system is either in an active state or in an idle state. An active process may become idle at any time but an idle process may only become active again upon receiving a computational message. </p>
<p>

Termination occurs when all processes in the distributed system becomes idle and there are no computational messages in transit.</p>

</sec>
<sec>
<st>
 Algorithm </st>
<p>

Huang's algorithm can be described by the following:
<list>
<entry level="1" type="bullet">

 Initially all processes are idle.</entry>
<entry level="1" type="bullet">

 A distributed task is started by a process sending a computational message to another process. This initial process to send the message is the "controlling agent".</entry>
<entry level="2" type="bullet">

 The initial weight of the controlling agent is <math>w</math> (usually 1).</entry>
<entry level="1" type="bullet">

 The following rules are applied throughout the computation:</entry>
<entry level="2" type="bullet">

 A process sending a message splits its current weight between itself and the message.</entry>
<entry level="2" type="bullet">

 A process receiving a message adds the weight of the message to itself.</entry>
<entry level="2" type="bullet">

 Upon becoming idle, a process sends a message containing its entire weight back to the controlling agent.</entry>
<entry level="2" type="bullet">

 Termination occurs when the controlling agent has a weight of <math>w</math> and is in the idle state.</entry>
</list>
</p>
<p>

Some weaknesses to Huang's algorithm are that it is unable to detect termination if a message is lost in transit or if a process fails while in an active state.</p>

</sec>
<sec>
<st>
 See also </st>

<p>

<list>
<entry level="1" type="bullet">

 <link>
 Dijkstra-Scholten algorithm </link></entry>
</list>
</p>



</sec>
</bdy>
</algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</article>
