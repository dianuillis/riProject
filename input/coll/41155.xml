<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 15:39:51[mciao0825] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<system  confidence="0.9511911446218017" wordnetid="104377057">
<header>
<title>Firmware</title>
<id>41155</id>
<revision>
<id>243670053</id>
<timestamp>2008-10-07T15:26:55Z</timestamp>
<contributor>
<username>Gribeco</username>
<id>458672</id>
</contributor>
</revision>
<categories>
<category>Articles to be merged&amp;#32;since August 2008</category>
<category>Embedded systems</category>
<category>All articles to be merged</category>
<category>Firmware</category>
</categories>
</header>
<bdy>

<table class="metadata plainlinks ambox ">
<row>
<col>

ambox-move" style=""</col>
</row>
<row>
<col class="mbox-image"><p>

<image width="50px" src="Mergefrom.svg">
</image>
</p>
</col>
<col style="" class="mbox-text">
 It has been suggested that  be  into this article or section. ()</col>
</row>
</table>


<image location="right" width="150px" src="PIC18F8720.jpg" type="thumb">
<caption>

A microcontroller, like this PIC18F8720, is controlled by firmware stored inside in <link>
flash memory</link>. 
</caption>
</image>

In <link xlink:type="simple" xlink:href="../213/5213.xml">
computing</link>, <b>firmware</b> is a <link xlink:type="simple" xlink:href="../309/5309.xml">
computer program</link> that is <link xlink:type="simple" xlink:href="../078/52078.xml">
embedded</link> in a hardware device, for example a <link xlink:type="simple" xlink:href="../017/21017.xml">
microcontroller</link>. It can also be provided on <link xlink:type="simple" xlink:href="../595/50595.xml">
flash memory</link> or as a <link xlink:type="simple" xlink:href="../702/920702.xml">
binary image file</link> that can be uploaded onto existing hardware by a user.<p>

As its name suggests, firmware is somewhere between hardware and software. Like software, it is a computer program which is executed by a <link xlink:type="simple" xlink:href="../553/19553.xml">
microprocessor</link> or a <link xlink:type="simple" xlink:href="../017/21017.xml">
microcontroller</link>. But it is also tightly linked to a piece of hardware, and has little meaning outside of it.</p>

<sec>
<st>
 Origin</st>
<p>

The term "firmware" was originally used for <link xlink:type="simple" xlink:href="../999/19999.xml">
micro-program</link>s written for <link xlink:type="simple" xlink:href="../509/127509.xml">
microsequencer</link>s such as AMD29xx.
Later on, it was coined to indicate a functional replacement for hardware on low-cost microprocessors.</p>

</sec>
<sec>
<st>
 Evolved firmware uses </st>
<p>

Firmware has evolved to mean the programmable content of a hardware device, which can consist of <link xlink:type="simple" xlink:href="../683/20683.xml">
machine language</link> for a <link xlink:type="simple" xlink:href="../553/19553.xml">
microprocessor</link>, or configuration settings for a <arrangement wordnetid="107938773" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<array wordnetid="107939382" confidence="0.8">
<link xlink:type="simple" xlink:href="../845/147845.xml">
fixed-function device</link></array>
</group>
</arrangement>
 or <link xlink:type="simple" xlink:href="../215/73215.xml">
programmable logic device</link>. Many, though not all, devices have firmware that can be updated after manufacturing. This is usually done electronically in modern systems, however sometimes the <link xlink:type="simple" xlink:href="../300/5300.xml">
storage</link> medium containing the firmware, such as a socketed <link xlink:type="simple" xlink:href="../934/18934934.xml">
ROM</link>, must be replaced.</p>
<p>

Firmware may expose an externally accessible interface. For example, in some modem implementations the firmware is not directly accessible, but is part of a combination of hardware and firmware that responds to commands from the host system.</p>
<p>

Firmware has traditionally been stored in ROM; however cost and performance requirements have driven component vendors to adopt various replacements, including non-volatile media such as <link xlink:type="simple" xlink:href="../597/50597.xml">
EEPROM</link> and <link>
Flash</link>, or <link>
SRAM</link> solutions, such as the firmware loaded by an operating system device driver, as described below.</p>

</sec>
<sec>
<st>
 Firmware and device drivers </st>
<p>

Most devices attached to modern systems are special-purpose computers in their own right, running their own software. Some of these devices store that software ("firmware") in a ROM within the device itself. Over the years, however, manufacturers have found that loading the firmware from the host system is both cheaper and more flexible. As a result, much current hardware is unable to function in any useful way until the host computer has fed it the requisite firmware. This firmware load is handled by the <link xlink:type="simple" xlink:href="../101/9101.xml">
device driver</link>.</p>
<p>

Firmware in many devices can now be updated without the need for additional hardware, often through the use of vendor-provided software.</p>

</sec>
<sec>
<st>
 Firmware support challenges in PCs </st>
<p>

In some respects firmware is as much a software component of a working system as the operating system. However, unlike most modern operating systems, firmware rarely has a well evolved mechanism for updating itself to fix bugs and addressing functionality issues that are detected after the unit is shipped.</p>
<p>

The easiest firmware to update is typically the system boot-related firmware, such as the BIOS in PCs. Some devices, such as video adapters and modems, frequently rely on firmware that is loaded dynamically by the operating system device driver, and thus is updated through the operating system update mechanisms entirely transparent to the user.</p>
<p>

In contrast, storage device firmware is rarely updated with the same consistency as other parts of the system. Further, the mechanisms for detecting firmware versions and updating them are not standardized. As a result, these devices tend to have a significantly higher percentage of firmware-driven functionality issues, as compared to other parts of a modern computer system.</p>

</sec>
<sec>
<st>
 Examples </st>
<p>

Examples of firmware include:
<list>
<entry level="1" type="bullet">

 The <generic wordnetid="107899976" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../473/Form_4473.xml">
BIOS</link></generic>
 found in IBM-compatible Personal Computers;</entry>
<entry level="1" type="bullet">

 The <link>
platform code</link> found on <chip wordnetid="103020034" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<microprocessor wordnetid="103760310" confidence="0.8">
<conductor wordnetid="103088707" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<semiconductor_device wordnetid="104171831" confidence="0.8">
<link xlink:type="simple" xlink:href="../454/15454.xml">
Itanium</link></semiconductor_device>
</device>
</conductor>
</microprocessor>
</instrumentality>
</artifact>
</chip>
 systems, Intel-based <link xlink:type="simple" xlink:href="../640/20640.xml">
Mac OS X</link> machines, and many Intel desktop boards is <link xlink:type="simple" xlink:href="../065/866065.xml">
EFI</link> compliant firmware;</entry>
<entry level="1" type="bullet">

 <standard wordnetid="107260623" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../452/209452.xml">
Open Firmware</link></system_of_measurement>
</standard>
, used in computers from <company wordnetid="108058098" confidence="0.8">
<institution wordnetid="108053576" confidence="0.8">
<link xlink:type="simple" xlink:href="../980/26980.xml">
Sun Microsystems</link></institution>
</company>
 and <link xlink:type="simple" xlink:href="../856/856.xml">
Apple Computer</link>;</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../199/13057199.xml">
ARCS</link>, used in computers from <link xlink:type="simple" xlink:href="../013/28013.xml">
Silicon Graphics</link>;</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../185/2955185.xml">
RTAS</link> (Run-Time Abstraction Services), used in computers from <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../259/18622259.xml">
IBM</link></company>
;</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../333/73333.xml">
EPROM</link> chips used in the Eventide H-3000 series of digital music processors.</entry>
<entry level="1" type="bullet">

 The <link xlink:type="simple" xlink:href="../847/89847.xml">
iPod</link>'s control menus</entry>
<entry level="1" type="bullet">

 The <link>
Common Firmware Environment</link> (CFE)</entry>
<entry level="1" type="bullet">

 Timing and control systems for <link xlink:type="simple" xlink:href="../111/172111.xml">
Washing machine</link>s</entry>
<entry level="1" type="bullet">

 <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<merchandise wordnetid="103748886" confidence="0.8">
<commodity wordnetid="103076708" confidence="0.8">
<link xlink:type="simple" xlink:href="../398/187398.xml">
Cisco IOS</link></commodity>
</merchandise>
</instrumentality>
</artifact>
</system>
.</entry>
</list>
</p>

</sec>
<sec>
<st>
Firmware hacking</st>
<p>

Sometimes an unofficial new or modified version of firmware is created by third parties to provide new features or unlock hidden functionality. Examples include <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<player wordnetid="110439851" confidence="0.8">
<contestant wordnetid="109613191" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../783/1428783.xml">
Rockbox</link></causal_agent>
</contestant>
</player>
</person>
</physical_entity>
 for <link xlink:type="simple" xlink:href="../424/1247424.xml">
digital audio player</link>s, <link>
CHDK</link> for Canon digital cameras, and <link xlink:type="simple" xlink:href="../395/1845395.xml">
OpenWRT</link> for <link xlink:type="simple" xlink:href="../553/1702553.xml">
wireless router</link>s, as well as many <link xlink:type="simple" xlink:href="../667/1495667.xml">
homebrew</link> projects for gaming consoles. These can often unlock general purpose computing functionality in previously limited devices (e.g., running <event wordnetid="100029378" confidence="0.8">
<social_event wordnetid="107288639" confidence="0.8">
<contest wordnetid="107456188" confidence="0.8">
<game wordnetid="100456199" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<link xlink:type="simple" xlink:href="../521/8521.xml">
Doom</link></psychological_feature>
</game>
</contest>
</social_event>
</event>
 on <link xlink:type="simple" xlink:href="../847/89847.xml">
iPod</link>s). Most firmware hacks are <link xlink:type="simple" xlink:href="../635/10635.xml">
free</link> and <link xlink:type="simple" xlink:href="../758/18938758.xml">
open source</link> software as well.</p>
<p>

These hacks usually take advantage of the firmware update facility on many devices to install or run themselves. Some, however, must resort to <link xlink:type="simple" xlink:href="../875/9875.xml">
exploit</link>s in order to run, because the manufacturer has attempted to lock the hardware to stop it from running unlicensed code.</p>

</sec>
<sec>
<st>
 See also </st>

<p>

<list>
<entry level="1" type="bullet">

 <physical_entity wordnetid="100001930" confidence="0.8">
<system wordnetid="104377057" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<copycat wordnetid="109964411" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../647/599647.xml">
ROM image</link></causal_agent>
</instrumentality>
</artifact>
</copycat>
</person>
</system>
</physical_entity>
</entry>
<entry level="1" type="bullet">

 <generic wordnetid="107899976" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../473/Form_4473.xml">
BIOS</link></generic>
</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../246/1556246.xml">
LinuxBIOS</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../999/19999.xml">
Microcode</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../467/5540467.xml">
Binary blob</link></entry>
</list>
</p>

</sec>
<sec>
<st>
 References </st>

<p>


</p>



</sec>
</bdy>
</system>
</article>
