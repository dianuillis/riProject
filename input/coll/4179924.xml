<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 21:04:53[mciao0827] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<mathematical_relation  confidence="0.8" wordnetid="113783581">
<function  confidence="0.8" wordnetid="113783816">
<header>
<title>Crypt (Unix)</title>
<id>4179924</id>
<revision>
<id>243020136</id>
<timestamp>2008-10-04T20:00:16Z</timestamp>
<contributor>
<username>Iridescent</username>
<id>937705</id>
</contributor>
</revision>
<categories>
<category>Cryptographic hash functions</category>
<category>Unix software</category>
</categories>
</header>
<bdy>

In <family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../642/31642.xml">
Unix</link></family>
 computing, <b><it>crypt</it></b> is the name of both a commonly available <link xlink:type="simple" xlink:href="../254/904254.xml">
utility program</link> and a <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../021/6021.xml">
C programming</link></programming_language>
 function.  Though both are used for encrypting data, they are otherwise essentially unrelated.  To distinguish between the two, writers often refer to the utility program as <b><it>crypt(1)</it></b>, because it is documented in section 1 of the Unix <link xlink:type="simple" xlink:href="../332/85332.xml">
manual pages</link>, and refer to the C library function as <b><it>crypt(3)</it></b>, because its documentation is in manual section 3.
<sec>
<st>
 Command filter </st>

<p>

<it>crypt(1)</it> is a simple command to encrypt or decrypt data.  Usually this is used as a <link xlink:type="simple" xlink:href="../479/100479.xml">
filter</link> and it has traditionally been implemented using an <link xlink:type="simple" xlink:href="../775/775.xml">
algorithm</link> based on the <artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<machine wordnetid="103699975" confidence="0.8">
<link xlink:type="simple" xlink:href="../256/9256.xml">
Enigma machine</link></machine>
</device>
</instrumentality>
</artifact>
.  It is considered to be far too <link xlink:type="simple" xlink:href="../432/18934432.xml">
cryptographically</link> weak to provide any security against <link xlink:type="simple" xlink:href="../147/236147.xml">
brute force</link> attacks by modern, commodity <link xlink:type="simple" xlink:href="../137/18457137.xml">
personal computer</link>s.</p>
<p>

Some versions of Unix shipped with an even weaker version of the <it>crypt(1)</it> command in order to comply with contemporaneous laws and regulations which limited the exportation of cryptographic software (for example by classifying them as <link xlink:type="simple" xlink:href="../621/18940621.xml">
munition</link>s).  Some of these were simply implementations of the <cipher wordnetid="106254239" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../405/48405.xml">
Caesar cipher</link></cipher>
 (effectively no more secure than <message wordnetid="106253690" confidence="0.8">
<cipher wordnetid="106254239" confidence="0.8">
<link xlink:type="simple" xlink:href="../362/48362.xml">
ROT13</link></cipher>
</message>
 which is implemented as a Caesar cipher with a well known key).</p>

<ss1>
<st>
 <it>crypt(1)</it> under Linux </st>

<p>

<link xlink:type="simple" xlink:href="../212/18212.xml">
Linux distribution</link>s generally do not include a Unix compatible version of the <it>crypt</it> command.  This is largely due to a combination of three major factors:</p>
<p>

<list>
<entry level="1" type="number">

 <it>crypt</it> is relatively obscure and rarely used for e-mail attachments nor as a file format</entry>
<entry level="1" type="number">

 <it>crypt</it> is considered far too cryptographically weak to withstand brute force attacks by modern computing systems (Linux systems generally ship with <link xlink:type="simple" xlink:href="../809/38809.xml">
GNU Privacy Guard</link> which is considered to be reasonably secure by modern standards)</entry>
<entry level="1" type="number">

 During the early years of Linux development and adoption there was some concern that even as weak as the algorithm used by <it>crypt</it> was, that it might still run afoul of <link xlink:type="simple" xlink:href="../446/612446.xml">
ITAR</link>'s export controls; so mainstream distribution developers in the <body wordnetid="107965085" confidence="0.8">
<social_group wordnetid="107950920" confidence="0.8">
<political_orientation wordnetid="106212839" confidence="0.8">
<colony wordnetid="108374049" confidence="0.8">
<state wordnetid="108168978" confidence="0.8">
<political_unit wordnetid="108359949" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<democracy wordnetid="106217103" confidence="0.8">
<link xlink:type="simple" xlink:href="../750/3434750.xml">
United States</link></democracy>
</group>
</political_unit>
</state>
</colony>
</political_orientation>
</social_group>
</body>
 generally excluded it (and left their customers to fetch GnuPG/GPG or other strong cryptographic software from international sites, sometimes providing packages or scripts to automate that process).</entry>
</list>
</p>
<p>

The source code to the legacy version of the <it>crypt</it> command do not seem to be readily available and are apparently not included with the <weblink xlink:type="simple" xlink:href="http://heirloom.sourceforge.net/tools.html">
Heirloom Toolchest</weblink> release of original Unix source code.</p>
<p>

Enhanced <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../042/53042.xml">
symmetric encryption</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
 utilities are available for Linux (and should also portable to any other Unix-like system) including <link xlink:type="simple" xlink:href="../357/1921357.xml">
mcrypt</link> and <weblink xlink:type="simple" xlink:href="http://ccrypt.sourceforge.net/">
ccrypt</weblink><ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref>.  While these provide support for much more sophisticated and modern algorithms, they can be used to encrypt and decrypt files which are compatible with the traditional <it>crypt(1)</it> command by providing the correct command line options.</p>

</ss1>
<ss1>
<st>
 Breaking crypt(1) encryption </st>

<p>

Programs for breaking crypt(1) encryption are widely available. Bob Baldwin's Crypt Breaker's Workbench<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%222%22])">2</ref>, which was written in 1984-1985, is an interactive tool that provides successive plaintext guesses that must be corrected by the user. Peter Selinger's unixcrypt-breaker<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%223%22])">3</ref> uses a simple statistical model to guess plausible plaintexts, and does not require user interaction.</p>

</ss1>
</sec>
<sec>
<st>
 Library Function </st>

<p>

<it>crypt(3)</it> is the library function which is used to compute a <link>
password hash</link> that can be used to store user account passwords while keeping them relatively secure.  Technically the name is a misnomer since it is actually a <link xlink:type="simple" xlink:href="../526/439526.xml">
cryptographic hash function</link>.  The output of the function is not merely the hash: it is a text string which also <link xlink:type="simple" xlink:href="../108/41108.xml">
encode</link>s the salt and identifies the hash algorithm used.  This output forms the password record which may be stored in a plain text file.  By a tricky interface, the same function is used both to generate these hashes anew for storage and also to hash a proffered password with a recorded salt for comparison.</p>

<ss1>
<st>
Traditional DES-based scheme</st>

<p>

The traditional implementation uses a modified form of the <cipher wordnetid="106254239" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../978/7978.xml">
DES</link></cipher>
 algorithm.  The user's password is truncated to eight characters, and those are coerced down to only 7-bits each; this forms the 56-bit DES key.  That key is then used to encrypt an all-bits-zero block, and then the ciphertext is encrypted again with the same key, and so on for a total of 25 DES encryptions.  A 12-bit salt is used to perturb the encryption algorithm, so standard DES implementations can't be used to implement crypt().  The salt and the final ciphertext are encoded into a printable string in a form of <link xlink:type="simple" xlink:href="../241/215241.xml">
base64</link>.</p>
<p>

This is technically not encryption since the data (all bits zero) is not being kept secret; it's widely known to all in advance.  However, one of the properties of DES is that it's very resistant to key recovery even in the face of <link xlink:type="simple" xlink:href="../019/517019.xml">
known plaintext</link> situations.  It is theoretically possible that two different passwords could result in exactly the same hash.  Thus the password is never "decrypted": it is merely used to compute a result, and the matching results are presumed to be proof that the passwords were "the same."</p>
<p>

The advantages of this method have been that the password can be stored in plain text and copied among Unix systems without being exposed to the system administrators or other users. This portability has worked for over 30 years across many generations of computing architecture, and across many versions of Unix from many vendors.</p>

</ss1>
<ss1>
<st>
Modifications of the traditional scheme</st>

<p>

<it>crypt(3)</it> was originally chosen because DES was resistant to key recovery even in the face of "known plaintext" attacks, and because it was computationally expensive.  On the earliest Unix machines it took over a full second to compute a password hash.  This also made it reasonably resistant to <link xlink:type="simple" xlink:href="../785/53785.xml">
dictionary attack</link>s in that era.  At that time password hashes were commonly stored in an account file (<it>/etc/passwd</it>) which was readable to anyone on the system.  (This account file was also used to map user ID numbers into names, and user names into full names, etc).</p>
<p>

In the three decades since that time, computers have become vastly more powerful.  <link xlink:type="simple" xlink:href="../418/39418.xml">
Moore's Law</link> has generally held true, so the computer speed and capacity available for a given financial investment has doubled over 20 times since Unix was first written.  This has long since left the <it>crypt(3)</it> function vulnerable to dictionary attacks, and Unix and Unix-like systems such as <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../297/6097297.xml">
Linux</link></O>
 have used "shadow" files for a long time, migrating just the password hash values out of the account file (<it>/etc/passwd</it>) and into a file (conventionally named <it>/etc/shadow</it>) which can only be read by privileged processes.</p>
<p>

To increase the computational cost of password breaking, some Unix sites privately started increasing the number of encryption rounds on an ad hoc basis.  This had the side effect of making their crypt() incompatible with the standard crypt(): the hashes had the same textual form, but were now calculated using a different algorithm.  Some sites also took advantage of this incompatibility effect, by modifying the initial block from the standard all-bits-zero.  This did not increase the cost of hashing, but meant that precomputed hash dictionaries based on the standard crypt() could not be applied.</p>

</ss1>
<ss1>
<st>
BSDi extended DES-based scheme</st>

<p>

To gain greater cryptographic security and resistance to brute-force attacks, modern versions of Unix now have a variety of new password hash schemes implemented using the crypt() interface.  <link xlink:type="simple" xlink:href="../826/1096826.xml">
BSDi</link> modified the original DES-based scheme, extending the salt to 24 bits and making the number of rounds variable (up to 224-1).  The chosen number of rounds is encoded in the stored password hash, avoiding the incompatibility that occurred when sites modified the number of rounds used by the original scheme.  These hashes are identified by starting with <b>_</b>.</p>
<p>

The BSDi algorithm also supports longer passwords, using DES to fold the initial long password down to the eight bytes supported by the original algorithm.</p>

</ss1>
<ss1>
<st>
MD5-based scheme</st>

<p>

<physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<computer_user wordnetid="109951274" confidence="0.8">
<programmer wordnetid="110481268" confidence="0.8">
<engineer wordnetid="109615807" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../165/1828165.xml">
Poul-Henning Kamp</link></causal_agent>
</engineer>
</programmer>
</computer_user>
</person>
</physical_entity>
 designed a baroque and (at the time) computationally expensive algorithm based on the <function wordnetid="113783816" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../826/18826.xml">
MD5</link></function>
 message digest algorithm.  MD5 itself would provide good cryptographic strength for the password hash, but it is designed to be quite quick to calculate relative to the strength it provides.  The crypt() scheme is designed to be expensive to calculate, to slow down dictionary attacks.  The printable form of MD5 password hashes starts with <b>$1$</b>.</p>
<p>

This scheme allows users to have any length password, and they can use any characters supported by their platform (not just 7-bit ASCII).  (In practice many implementations limit the password length, but they generally support passwords far longer than any person would be willing to type.)  The salt is also an arbitrary string, limited only by character set considerations.</p>
<p>

First the passphrase and salt are hashed together, yielding an MD5 message digest.  Then a new digest is constructed, hashing together the passphrase, the salt, and the first digest, all in a rather complex form.  Then this digest is passed through a thousand iterations of a function which rehashes it together with the passphrase and salt in a manner that varies between rounds.  The output of the last of these rounds is the resulting passphrase hash.</p>
<p>

The fixed iteration count has caused this scheme to lose the computational expense that it once enjoyed.  Variable numbers of rounds are now favoured.</p>

</ss1>
<ss1>
<st>
Blowfish-based scheme</st>

<p>

<link>
Niels Provos</link> and <link>
David Mazieres</link> designed a crypt() scheme based on <cipher wordnetid="106254239" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../940/3940.xml">
Blowfish</link></cipher>
, and presented it at <link xlink:type="simple" xlink:href="../584/253584.xml">
USENIX</link> in <link xlink:type="simple" xlink:href="../553/34553.xml">
1999</link>.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%224%22])">4</ref> The printable form of these hashes starts with <b>$2$</b> or <b>$2a$</b>, depending on which variant of the algorithm is used.</p>
<p>

Blowfish is notable among block ciphers for its expensive key setup phase.  It starts off with subkeys in a standard state, then uses this state to perform a block encryption using part of the key, and uses the result of that encryption (really, a hashing) to replace some of the subkeys.  Then it uses this modified state to encrypt another part of the key, and uses the result to replace more of the subkeys.  It proceeds in this fashion, using a progressively modified state to hash the key and replace bits of state, until all subkeys have been set.</p>
<p>

Provos and Mazieres took advantage of this, and actually took it further.  They developed a new key setup algorithm for Blowfish, dubbing the resulting cipher "Eksblowfish" ("expensive key schedule Blowfish").  The key setup begins with a modified form of the standard Blowfish key setup, in which both the salt and password are used to set all subkeys.  Then there is a configurable number of rounds in which the standard Blowfish keying algorithm is applied, using alternately the salt and the password as the key, each round starting with the subkey state from the previous round.  This is not cryptographically significantly stronger than the standard Blowfish key schedule; it's just very slow.</p>
<p>

The number of rounds of keying is a power of two, which is an input to the algorithm.  The number is encoded in the textual hash.</p>

</ss1>
<ss1>
<st>
 SHA-based scheme </st>

<p>

As computers have gotten faster, the MD5-based scheme is not as computationally expensive as it once was. Although the Blowfish-based system has the option of adding rounds and thus remain a challenging password algorithm, it does not use a <link xlink:type="simple" xlink:href="../888/21888.xml">
NIST</link>-approved <link xlink:type="simple" xlink:href="../775/775.xml">
algorithm</link>. In light of these facts, Ulrich Drepper of <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../386/26386.xml">
Red Hat</link></company>
 led an effort to create a scheme based on the <mathematical_relation wordnetid="113783581" confidence="0.8">
<function wordnetid="113783816" confidence="0.8">
<link xlink:type="simple" xlink:href="../672/26672.xml">
SHA</link></function>
</mathematical_relation>
 hashing algorithm.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%225%22])">5</ref>. The printable form of these hashes starts with <b>$5$</b> or <b>$6$</b> depending on which SHA variant is used. Its design is similar to the MD5-based crypt, with a few notable differences:<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%225%22])">5</ref></p>
<p>

<list>
<entry level="1" type="bullet">

 It avoids adding constant data in a few steps.</entry>
<entry level="1" type="bullet">

 The MD5 algorithm would repeatedly add the first letter of the password; this step was changed significantly.</entry>
<entry level="1" type="bullet">

 Inspired by <company wordnetid="108058098" confidence="0.8">
<institution wordnetid="108053576" confidence="0.8">
<link xlink:type="simple" xlink:href="../980/26980.xml">
Sun's</link></institution>
</company>
 crypt() implementation, functionality to specify the number of rounds the main loop in the algorithm performs was added<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%226%22])">6</ref><ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%227%22])">7</ref></entry>
</list>
</p>
<p>

The specification and sample code have been released into the public domain.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%228%22])">8</ref></p>

</ss1>
<ss1>
<st>
 <it>crypt(3)</it> under Linux </st>

<p>

The <structure wordnetid="104341686" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<area wordnetid="102735688" confidence="0.8">
<library wordnetid="103660909" confidence="0.8">
<room wordnetid="104105893" confidence="0.8">
<link xlink:type="simple" xlink:href="../364/324364.xml">
GNU C Library</link></room>
</library>
</area>
</artifact>
</structure>
 used by almost all Linux distributions provides an implementation of the <it>crypt</it> function which can transparently manage both the traditional DES-based and MD5 hashing algorithms.</p>
<p>

= References =</p>
<p>

<reflist>
<entry id="1">
Peter Selinger: <weblink xlink:type="simple" xlink:href="http://ccrypt.sourceforge.net/">
ccrypt</weblink>. Retrieved July 27, 2008.</entry>
<entry id="2">
Bob Baldwin: <weblink xlink:type="simple" xlink:href="http://axion.physics.ubc.ca/cbw.html">
Crypt Breaker's Workbench</weblink>, written 1984-1985. Retrieved July 27, 2008.</entry>
<entry id="3">
Peter Selinger: <weblink xlink:type="simple" xlink:href="http://www.mathstat.dal.ca/~selinger/unixcrypt-breaker/">
unixcrypt-breaker</weblink>. Retrieved July 27, 2008.</entry>
<entry id="4">
 <cite style="font-style:normal">Provos, Niels; Mazières, David&#32;(1999).&#32;"<weblink xlink:type="simple" xlink:href="http://www.usenix.org/events/usenix99/provos/provos_html/node1.html">
A Future-Adaptable Password Scheme</weblink>". <it>Proceedings of 1999 USENIX Annual Technical Conference</it>: 81–92.</cite>&nbsp;</entry>
<entry id="5">
Drepper, Ulrich.&#32;"<weblink xlink:type="simple" xlink:href="http://people.redhat.com/drepper/sha-crypt.html">
Unix crypt with SHA-256/512</weblink>".</entry>
<entry id="6">
Sun Microsystems.&#32;"<weblink xlink:type="simple" xlink:href="http://docs.sun.com/app/docs/doc/816-5175/6mbba7evg">
crypt_sunmd5(5) man page</weblink>".&#32;Retrieved on <link>
2008-03-05</link>.</entry>
<entry id="7">
Muffett, Alec&#32;(2005-12-05).&#32;"<weblink xlink:type="simple" xlink:href="http://www.crypticide.com/dropsafe/article/1389">
OpenSolaris, Pluggable Crypt, and the SunMD5 Password Hash Algorithm</weblink>".&#32;Retrieved on <link>
2008-03-05</link>.</entry>
<entry id="8">
Drepper, Ulrich.&#32;"<weblink xlink:type="simple" xlink:href="http://people.redhat.com/drepper/SHA-crypt.txt">
Unix crypt using SHA-256 and SHA-512</weblink>".</entry>
</reflist>
</p>

<p>

<table style=";" class="navbox" cellspacing="0">
<row>
<col style="padding:2px;">
<table style="width:100%;background:transparent;color:inherit;;" class="nowraplinks  " cellspacing="0">
<row>
<col colspan="2" style="width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<table style="width:100%;;;;" class="nowraplinks  navbox-subgroup" cellspacing="0">
<row>
<col colspan="2" style="width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<table style="width:100%;;;;" class="nowraplinks  navbox-subgroup" cellspacing="0">
<row>
<header colspan="2" style=";background:#ccf;" class="navbox-title">
&nbsp;<physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<primitive wordnetid="109627462" confidence="0.8">
<link xlink:type="simple" xlink:href="../526/439526.xml">
Cryptographic hash function</link></primitive>
</causal_agent>
</person>
</physical_entity>
s and <link xlink:type="simple" xlink:href="../523/567523.xml">
Message authentication codes (MACs)</link></header>
</row>
<row style="height:2px;">

</row>
<row>
<col colspan="2" style="width:100%;padding:0px;;;" class="navbox-list navbox-odd"><p>

<b>Hash algorithms:</b> <link xlink:type="simple" xlink:href="../232/3080232.xml">
GOST</link>&nbsp;&#124; 
<mathematical_relation wordnetid="113783581" confidence="0.8">
<function wordnetid="113783816" confidence="0.8">
<link xlink:type="simple" xlink:href="../408/1063408.xml">
HAS-160</link></function>
</mathematical_relation>
&nbsp;&#124; 
<mathematical_relation wordnetid="113783581" confidence="0.8">
<function wordnetid="113783816" confidence="0.8">
<link xlink:type="simple" xlink:href="../362/1018362.xml">
HAVAL</link></function>
</mathematical_relation>
&nbsp;&#124; 
<mathematical_relation wordnetid="113783581" confidence="0.8">
<function wordnetid="113783816" confidence="0.8">
<link xlink:type="simple" xlink:href="../062/2642062.xml">
MDC-2</link></function>
</mathematical_relation>
&nbsp;&#124; 
<function wordnetid="113783816" confidence="0.9508927676800064">
<link>
MD2</link></function>
&nbsp;&#124; 
<function wordnetid="113783816" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../106/578106.xml">
MD4</link></function>
&nbsp;&#124; 
<function wordnetid="113783816" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../826/18826.xml">
MD5</link></function>
&nbsp;&#124; 
<mathematical_relation wordnetid="113783581" confidence="0.8">
<function wordnetid="113783816" confidence="0.8">
<link xlink:type="simple" xlink:href="../247/1002247.xml">
N-Hash</link></function>
</mathematical_relation>
&nbsp;&#124; 
<link>
RadioGatún</link>&nbsp;&#124; 
<mathematical_relation wordnetid="113783581" confidence="0.8">
<function wordnetid="113783816" confidence="0.8">
<link xlink:type="simple" xlink:href="../363/26363.xml">
RIPEMD</link></function>
</mathematical_relation>
&nbsp;&#124; 
<mathematical_relation wordnetid="113783581" confidence="0.8">
<function wordnetid="113783816" confidence="0.8">
<link xlink:type="simple" xlink:href="../672/26672.xml">
SHA family</link></function>
</mathematical_relation>
&nbsp;&#124; 
<mathematical_relation wordnetid="113783581" confidence="0.8">
<function wordnetid="113783816" confidence="0.8">
<link xlink:type="simple" xlink:href="../613/450613.xml">
Snefru</link></function>
</mathematical_relation>
&nbsp;&#124; 
<mathematical_relation wordnetid="113783581" confidence="0.8">
<function wordnetid="113783816" confidence="0.8">
<link xlink:type="simple" xlink:href="../596/511596.xml">
Tiger</link></function>
</mathematical_relation>
&nbsp;&#124; 
<mathematical_relation wordnetid="113783581" confidence="0.8">
<function wordnetid="113783816" confidence="0.8">
<link xlink:type="simple" xlink:href="../567/567567.xml">
WHIRLPOOL</link></function>
</mathematical_relation>
&nbsp;&#124; 
<mathematical_relation wordnetid="113783581" confidence="0.8">
<function wordnetid="113783816" confidence="0.8">
<link xlink:type="simple" xlink:href="../924/4179924.xml#xpointer(//*[./st=%22Library+Function%22])">
crypt(3) DES</link></function>
</mathematical_relation>
</p>
</col>
</row>
<row style="height:2px">

</row>
<row>
<col colspan="2" style="width:100%;padding:0px;;;" class="navbox-list navbox-even"><p>

<b>MAC algorithms:</b> <written_communication wordnetid="106349220" confidence="0.8">
<code wordnetid="106667317" confidence="0.8">
<link xlink:type="simple" xlink:href="../570/2845570.xml">
DAA</link></code>
</written_communication>
&nbsp;&#124; 
<written_communication wordnetid="106349220" confidence="0.8">
<code wordnetid="106667317" confidence="0.8">
<link xlink:type="simple" xlink:href="../574/2840574.xml">
CBC-MAC</link></code>
</written_communication>
&nbsp;&#124; 
<written_communication wordnetid="106349220" confidence="0.8">
<code wordnetid="106667317" confidence="0.8">
<link xlink:type="simple" xlink:href="../112/17112.xml">
HMAC</link></code>
</written_communication>
&nbsp;&#124; 
<written_communication wordnetid="106349220" confidence="0.8">
<code wordnetid="106667317" confidence="0.8">
<link xlink:type="simple" xlink:href="../548/567548.xml">
OMAC/CMAC</link></code>
</written_communication>
&nbsp;&#124; 
<written_communication wordnetid="106349220" confidence="0.8">
<code wordnetid="106667317" confidence="0.8">
<link xlink:type="simple" xlink:href="../910/8667910.xml">
PMAC</link></code>
</written_communication>
&nbsp;&#124; 
<written_communication wordnetid="106349220" confidence="0.8">
<code wordnetid="106667317" confidence="0.8">
<link xlink:type="simple" xlink:href="../331/2005331.xml">
UMAC</link></code>
</written_communication>
&nbsp;&#124; 
<written_communication wordnetid="106349220" confidence="0.8">
<code wordnetid="106667317" confidence="0.8">
<link xlink:type="simple" xlink:href="../690/2017690.xml">
Poly1305-AES</link></code>
</written_communication>
</p>
</col>
</row>
<row style="height:2px">

</row>
<row>
<col colspan="2" style="width:100%;padding:0px;;;" class="navbox-list navbox-odd"><p>

<b><link xlink:type="simple" xlink:href="../296/2244296.xml">
Authenticated encryption</link> modes:</b> <message wordnetid="106253690" confidence="0.8">
<cipher wordnetid="106254239" confidence="0.8">
<link xlink:type="simple" xlink:href="../043/2244043.xml">
CCM</link></cipher>
</message>
&nbsp;&#124; 
<message wordnetid="106253690" confidence="0.8">
<cipher wordnetid="106254239" confidence="0.8">
<link xlink:type="simple" xlink:href="../344/7475344.xml">
CWC</link></cipher>
</message>
&nbsp;&#124; 
<message wordnetid="106253690" confidence="0.8">
<cipher wordnetid="106254239" confidence="0.8">
<link xlink:type="simple" xlink:href="../161/4260161.xml">
EAX</link></cipher>
</message>
&nbsp;&#124; 
<region wordnetid="108630985" confidence="0.8">
<message wordnetid="106253690" confidence="0.8">
<field wordnetid="108569998" confidence="0.8">
<location wordnetid="100027167" confidence="0.8">
<tract wordnetid="108673395" confidence="0.8">
<geographical_area wordnetid="108574314" confidence="0.8">
<cipher wordnetid="106254239" confidence="0.8">
<link xlink:type="simple" xlink:href="../154/5898154.xml">
GCM</link></cipher>
</geographical_area>
</tract>
</location>
</field>
</message>
</region>
&nbsp;&#124; 
<message wordnetid="106253690" confidence="0.8">
<cipher wordnetid="106254239" confidence="0.8">
<link xlink:type="simple" xlink:href="../546/2233546.xml">
OCB</link></cipher>
</message>
</p>
</col>
</row>
<row style="height:2px">

</row>
<row>
<col colspan="2" style="width:100%;padding:0px;;;" class="navbox-list navbox-even"><p>

<b>Attacks:</b> <mathematical_relation wordnetid="113783581" confidence="0.8">
<operation wordnetid="100955060" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<attack wordnetid="100972621" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<function wordnetid="113783816" confidence="0.8">
<link xlink:type="simple" xlink:href="../344/45344.xml">
Hash collision</link></function>
</activity>
</psychological_feature>
</act>
</attack>
</event>
</operation>
</mathematical_relation>
&nbsp;&#124; 
<operation wordnetid="100955060" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<attack wordnetid="100972621" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<link xlink:type="simple" xlink:href="../369/189369.xml">
Birthday attack</link></activity>
</psychological_feature>
</act>
</attack>
</event>
</operation>
&nbsp;&#124; 
<operation wordnetid="100955060" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<attack wordnetid="100972621" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<link xlink:type="simple" xlink:href="../477/969477.xml">
Preimage attack</link></activity>
</psychological_feature>
</act>
</attack>
</event>
</operation>
&nbsp;&#124; 
<operation wordnetid="100955060" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<attack wordnetid="100972621" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../284/2403284.xml">
Rainbow table</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</attack>
</rule>
</event>
</operation>
&nbsp;&#124; 
<link xlink:type="simple" xlink:href="../678/667678.xml">
Side channel attack</link>&nbsp;&#124; 
<operation wordnetid="100955060" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<attack wordnetid="100972621" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<link xlink:type="simple" xlink:href="../784/53784.xml">
Brute force attack</link></activity>
</psychological_feature>
</act>
</attack>
</event>
</operation>
</p>
</col>
</row>
<row style="height:2px">

</row>
<row>
<col colspan="2" style="width:100%;padding:0px;;;" class="navbox-list navbox-odd"><p>

<b>Misc:</b> <link xlink:type="simple" xlink:href="../439/769439.xml">
Avalanche effect</link>&nbsp;&#124; 
<mathematical_relation wordnetid="113783581" confidence="0.8">
<operation wordnetid="100955060" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<attack wordnetid="100972621" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<function wordnetid="113783816" confidence="0.8">
<link xlink:type="simple" xlink:href="../344/45344.xml">
Hash collision</link></function>
</activity>
</psychological_feature>
</act>
</attack>
</event>
</operation>
</mathematical_relation>
&nbsp;&#124; 
<link>
Merkle-Damgård construction</link>&nbsp;&nbsp;
<b>Standardization:</b> <standard wordnetid="107260623" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../159/549159.xml">
CRYPTREC</link></system_of_measurement>
</standard>
&nbsp;&#124; 
<standard wordnetid="107260623" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../430/497430.xml">
NESSIE</link></system_of_measurement>
</standard>
</p>
</col>
</row>
</table>
</col>
</row>
</table>
</col>
</row>
<row style="height:2px">

</row>
<row>
<col colspan="2" style="width:100%;padding:0px;;;" class="navbox-list navbox-even">
<table style="width:100%;;;;" class="nowraplinks  navbox-subgroup" cellspacing="0">
<row>
<header colspan="2" style=";background:#ccf;" class="navbox-title">
&nbsp;<link xlink:type="simple" xlink:href="../432/18934432.xml">
Cryptography</link></header>
</row>
<row style="height:2px;">

</row>
<row>
<col colspan="2" style="width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<link xlink:type="simple" xlink:href="../066/520066.xml">
History of cryptography</link> | <link xlink:type="simple" xlink:href="../715/5715.xml">
Cryptanalysis</link> | 
Cryptography portal | <link xlink:type="simple" xlink:href="../585/449585.xml">
Topics in cryptography</link></col>
</row>
<row style="height:2px">

</row>
<row>
<col colspan="2" style="width:100%;padding:0px;;;" class="navbox-list navbox-even">
<event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../042/53042.xml">
Symmetric-key algorithm</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
 | <link xlink:type="simple" xlink:href="../594/4594.xml">
Block cipher</link> | <link xlink:type="simple" xlink:href="../007/49007.xml">
Stream cipher</link> | <link xlink:type="simple" xlink:href="../222/24222.xml">
Public-key cryptography</link> | <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<primitive wordnetid="109627462" confidence="0.8">
<link xlink:type="simple" xlink:href="../526/439526.xml">
Cryptographic hash function</link></primitive>
</causal_agent>
</person>
</physical_entity>
 | <link xlink:type="simple" xlink:href="../523/567523.xml">
Message authentication code</link> | <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../249/182249.xml">
Random numbers</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
 | <link xlink:type="simple" xlink:href="../733/28733.xml">
Steganography</link></col>
</row>
</table>
</col>
</row>
</table>
</col>
</row>
</table>
</p>


</ss1>
</sec>
</bdy>
</function>
</mathematical_relation>
</article>
