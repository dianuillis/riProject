<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 15:39:55[mciao0825] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<event  confidence="0.8" wordnetid="100029378">
<rule  confidence="0.8" wordnetid="105846932">
<act  confidence="0.8" wordnetid="100030358">
<psychological_feature  confidence="0.8" wordnetid="100023100">
<procedure  confidence="0.8" wordnetid="101023820">
<activity  confidence="0.8" wordnetid="100407535">
<algorithm  confidence="0.8" wordnetid="105847438">
<header>
<title>Nearest neighbour algorithm</title>
<id>41926</id>
<revision>
<id>239178811</id>
<timestamp>2008-09-18T03:08:27Z</timestamp>
<contributor>
<username>Jamelan</username>
<id>3529454</id>
</contributor>
</revision>
<categories>
<category>Graph algorithms</category>
</categories>
</header>
<bdy>

This article is about an approximation algorithm to solve the <link xlink:type="simple" xlink:href="../248/31248.xml">
travelling salesman problem</link>.&#32;&#32;For other uses, see <link xlink:type="simple" xlink:href="../823/1702823.xml">
nearest neighbor</link>.<p>

The <b>nearest neighbour algorithm</b> was one of the first <link xlink:type="simple" xlink:href="../775/775.xml">
algorithm</link>s used to determine a solution to the <link xlink:type="simple" xlink:href="../248/31248.xml">
travelling salesman problem</link>. It quickly yields a short tour, but usually not the optimal one.</p>
<p>

----------------------------------------------------------------
Below is the application of nearest neighbour algorithm on TSP</p>
<p>

These are the steps of the algorithm:
<list>
<entry level="1" type="number">

 stand on an arbitrary vertex as current vertex.</entry>
<entry level="1" type="number">

 find out the lightest edge connecting current vertex and an unvisited vertex V.</entry>
<entry level="1" type="number">

 set current vertex to V.</entry>
<entry level="1" type="number">

 mark V as visited.</entry>
<entry level="1" type="number">

 if all the vertices in domain are visited, then terminate.</entry>
<entry level="1" type="number">

 Go to step 2.</entry>
</list>
</p>
<p>

The sequence of the visited vertices is the output of the algorithm.</p>
<p>

The nearest neighbour algorithm is easy to implement and executes quickly, but it can sometimes miss shorter routes which are easily noticed with human insight, due to its "greedy" nature. As a general guide, if the last few stages of the tour are comparable in length to the first stages, then the tour is reasonable; if they are much greater, then it is likely that there are much better tours.  Another check is to use an algorithm such as the <link>
lower bound algorithm</link> to estimate if this tour is good enough.</p>
<p>

In the worst case, the algorithm results in a tour that is much longer than the optimal tour.  To be precise, for every constant <b>r</b> there is an instance of the traveling salesman problem such that the length of the tour length computed by the nearest neighbour algorithm is greater than <b>r</b> times the length of the optimal tour. Moreover, for each number of cities there is an assignment of distances between the cities for which the nearest neighbor heuristic produces the <b>unique worst possible tour</b><ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref>.</p>

<sec>
<st>
Notes</st>
<p>

<reflist>
<entry id="1">
G. Gutin, A. Yeo and A. Zverovich, 2002</entry>
</reflist>
</p>

</sec>
<sec>
<st>
See also</st>
<p>

<list>
<entry level="1" type="bullet">

 <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../388/1775388.xml">
K-nearest neighbor algorithm</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</entry>
</list>
</p>

</sec>
<sec>
<st>
References</st>

<p>

G. Gutin, A. Yeo and A. Zverovich, Traveling salesman should not be greedy: domination analysis of
greedy-type heuristics for the TSP.  Discrete Applied Mathematics 117 (2002), 81-86. </p>
<p>

J. Bang-Jensen, G. Gutin and A. Yeo, When the greedy
algorithm fails. Discrete Optimization  1 (2004), 121-127. </p>
<p>

G. Bendall and F. Margot,  Greedy Type Resistance of
Combinatorial Problems, Discrete Optimization 3 (2006), 288-298.</p>


</sec>
</bdy>
</algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</article>
