<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 21:07:39[mciao0827] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<machine  confidence="0.9511911446218017" wordnetid="103699975">
<header>
<title>Alice (programming language)</title>
<id>4245195</id>
<revision>
<id>243851778</id>
<timestamp>2008-10-08T09:35:55Z</timestamp>
<contributor>
<username>Tobias Bergemann</username>
<id>36029</id>
</contributor>
</revision>
<categories>
<category>ML programming language family</category>
<category>Virtual machines</category>
<category>Functional logic programming languages</category>
<category>Logic programming languages</category>
</categories>
</header>
<bdy>
<template>
<name>Infobox programming language</name>
<parameters>
<website>
<weblink xlink:type="simple" xlink:href="http://www.ps.uni-sb.de/alice/">
www.ps.uni-sb.de/alice/</weblink></website>
<paradigm>
<paradigm wordnetid="113804375" confidence="0.8">
<linguistic_relation wordnetid="113797142" confidence="0.8">
<inflection wordnetid="113803782" confidence="0.8">
<grammatical_relation wordnetid="113796779" confidence="0.8">
<link xlink:type="simple" xlink:href="../843/226843.xml">
Multi-paradigm</link></grammatical_relation>
</inflection>
</linguistic_relation>
</paradigm>
: <link xlink:type="simple" xlink:href="../847/197847.xml">
imperative</link>, <link xlink:type="simple" xlink:href="../933/10933.xml">
functional</link>, <link xlink:type="simple" xlink:href="../162/145162.xml">
distributed</link>, <link xlink:type="simple" xlink:href="../162/145162.xml">
concurrent</link></paradigm>
<latest_release_version>
1.4</latest_release_version>
<designer>
Saarland University</designer>
<latest_release_date>
<time_off wordnetid="115118453" confidence="0.8">
<fundamental_quantity wordnetid="113575869" confidence="0.8">
<time_period wordnetid="115113229" confidence="0.8">
<vacation wordnetid="115137890" confidence="0.8">
<leisure wordnetid="115137676" confidence="0.8">
<link xlink:type="simple" xlink:href="../350/19350.xml">
May 3</link></leisure>
</vacation>
</time_period>
</fundamental_quantity>
</time_off>
 <link xlink:type="simple" xlink:href="../165/36165.xml">
2007</link></latest_release_date>
<influenced_by>
<link xlink:type="simple" xlink:href="../607/20607.xml">
ML</link>, <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../916/256916.xml">
Oz</link></programming_language>
</influenced_by>
<name>
Alice</name>
<typing>
<link xlink:type="simple" xlink:href="../585/919585.xml">
strong</link>, <link>
static</link>, <link xlink:type="simple" xlink:href="../690/279690.xml">
inferred</link></typing>
<year>
<link xlink:type="simple" xlink:href="../548/34548.xml">
2000</link></year>
<operating_system>
<platform wordnetid="103961939" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<surface wordnetid="104362025" confidence="0.8">
<horizontal_surface wordnetid="103536348" confidence="0.8">
<link xlink:type="simple" xlink:href="../193/81193.xml">
Cross-platform</link></horizontal_surface>
</surface>
</artifact>
</platform>
</operating_system>
</parameters>
</template>


For other uses, see <link xlink:type="simple" xlink:href="../077/400077.xml">
Alice</link>.
For the object-oriented programming system from Carnegie-Mellon University, see <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../612/3475612.xml">
Alice (software)</link></software>
.<p>

<b>Alice</b> is a <link xlink:type="simple" xlink:href="../933/10933.xml">
functional programming language</link> designed by the <weblink xlink:type="simple" xlink:href="http://ps.uni-sb.de/">
Programming Systems Lab</weblink> at <university wordnetid="108286163" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../930/3459930.xml">
Saarland University</link></university>
. It is a <link xlink:type="simple" xlink:href="../744/948744.xml">
dialect</link> of <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../337/100337.xml">
Standard ML</link></programming_language>
, augmented with support for <link xlink:type="simple" xlink:href="../155/18155.xml">
lazy evaluation</link>, <link xlink:type="simple" xlink:href="../467/928467.xml">
concurrency</link> (<link xlink:type="simple" xlink:href="../303/45303.xml">
multithreading</link> and <link xlink:type="simple" xlink:href="../501/8501.xml">
distributed computing</link> via <link xlink:type="simple" xlink:href="../346/26346.xml">
remote procedure call</link>s) and <link xlink:type="simple" xlink:href="../899/189899.xml">
constraint programming</link>.</p>
<p>

The Alice implementation from Saarland University uses the SEAM (Simple Extensible Abstract Machine) <link xlink:type="simple" xlink:href="../353/32353.xml">
virtual machine</link>. It is <link xlink:type="simple" xlink:href="../635/10635.xml">
free software</link>, and features <link xlink:type="simple" xlink:href="../632/220632.xml">
just-in-time compilation</link> to <link xlink:type="simple" xlink:href="../997/89997.xml">
bytecode</link> as well as <link xlink:type="simple" xlink:href="../683/20683.xml">
native code</link> for the <link xlink:type="simple" xlink:href="../198/34198.xml">
x86 architecture</link>.</p>
<p>

Early versions of Alice ran on the <link xlink:type="simple" xlink:href="../556/2317556.xml">
Mozart/Oz</link> VM, allowing interfacing between Alice and <link xlink:type="simple" xlink:href="../916/256916.xml">
Oz</link> code.</p>
<p>

Alice's remote procedure calling depends on the virtual machine, because it may actually send code to be computed from one computer to another.</p>

<sec>
<st>
Example</st>
<p>

Alice extends Standard ML with several primitives for lazy evaluation and concurrency. For example, threads may be created using the spawn <link xlink:type="simple" xlink:href="../138/17138.xml">
keyword</link>. Consider the naive algorithm for computing the <link xlink:type="simple" xlink:href="../918/10918.xml#xpointer(//*[./st=%22Computation%22])">
Fibonacci numbers</link>:</p>
<p>

fun fib 0 = 0
| fib 1 = 1
| fib n = fib(n-1) + fib(n-2);</p>
<p>

For large values of <it>n</it>, fib <it>n</it> will take a long time to compute. This computation can be performed in a separate thread by</p>
<p>

val x = spawn fib n;</p>
<p>

The variable x is now bound to a so-called "<link xlink:type="simple" xlink:href="../507/2203507.xml">
future</link>". When an operation requires the actual value of x, it blocks until the thread is done with the computation. To exploit parallelism one could even define fib as follows:
fun fib 0 = 0
| fib 1 = 1
| fib n = spawn fib(n-1) + fib(n-2);</p>


</sec>
<sec>
<st>
 See also </st>
<p>

<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../556/2317556.xml">
Mozart Programming System</link></entry>
<entry level="1" type="bullet">

 <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../337/100337.xml">
Standard ML</link></programming_language>
</entry>
</list>
</p>

</sec>
<sec>
<st>
 External links </st>
<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.ps.uni-sb.de/alice/">
Alice homepage</weblink></entry>
</list>
</p>


</sec>
</bdy>
</machine>
</article>
