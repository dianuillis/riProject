<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 21:14:04[mciao0827] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>Process states</title>
<id>4387260</id>
<revision>
<id>239725820</id>
<timestamp>2008-09-20T04:11:14Z</timestamp>
<contributor>
<username>Radagast83</username>
<id>668752</id>
</contributor>
</revision>
<categories>
<category>Process (computing)</category>
</categories>
</header>
<bdy>

In a <link xlink:type="simple" xlink:href="../857/6857.xml">
multitasking</link> <link xlink:type="simple" xlink:href="../457/7878457.xml">
computer</link> system, <link xlink:type="simple" xlink:href="../178/45178.xml">
processes</link> may occupy a variety of <link xlink:type="simple" xlink:href="../512/285512.xml">
states</link>.  These distinct states may not actually be recognized as such by the <link xlink:type="simple" xlink:href="../194/22194.xml">
operating system</link> <link xlink:type="simple" xlink:href="../394/50394.xml">
kernel</link>, however they are a useful abstraction for the understanding of processes.<p>

<image location="right" width="400px" src="Process_states.svg" type="thumb">
<caption>

The various process states, displayed in a <link xlink:type="simple" xlink:href="../337/187337.xml">
state diagram</link>, with arrows indicating possible transitions between states - as can be seen, some processes are stored in main memory, and some are stored in secondary (virtual) memory.
</caption>
</image>
</p>

<sec>
<st>
Primary process states</st>

<p>

The following typical process states are possible on computer systems of all kinds.  In most of these states, processes are "stored" on <link>
main memory</link>.</p>

<ss1>
<st>
Created</st>
<p>

(Also called <b>new</b>.) When a process is first created, it occupies the "created" or "new" state.  In this state, the process awaits admission to the "ready" state.  This admission will be approved or delayed by a long-term, or admission, <link xlink:type="simple" xlink:href="../851/4941851.xml">
scheduler</link>.  Typically in most <link xlink:type="simple" xlink:href="../742/52742.xml">
desktop</link> computer systems, this admission will be approved automatically, however for <link xlink:type="simple" xlink:href="../130/2728130.xml">
real time</link> operating systems this admission may be delayed.  In a real time system, admitting too many processes to the "ready" state may lead to oversaturation and <link xlink:type="simple" xlink:href="../954/40954.xml">
overcontention</link> for the systems resources, leading to an inability to meet process deadlines.process means the program that is currently running,or that part of program currently used by processor.</p>

</ss1>
<ss1>
<st>
Ready</st>
<p>

(Also called <b>waiting</b>' or <b>runnable</b>.) A "ready" or "waiting" process has been loaded into <link>
main memory</link> and is awaiting execution on a <link xlink:type="simple" xlink:href="../218/5218.xml">
CPU</link> (to be <link xlink:type="simple" xlink:href="../904/6904.xml">
context switched</link> onto the CPU by the dispatcher, or short-term scheduler).  There may be many "ready" processes at any one point of the systems execution - for example, in a one processor system, only one process can be executing at any one time, and all other "concurrently executing" processes will be waiting for execution.</p>
<p>

A <it>ready queue</it> is used in <link xlink:type="simple" xlink:href="../920/231920.xml">
computer scheduling</link>.  Modern computers are capable of running many different programs or processes at the same time.  However, the <link xlink:type="simple" xlink:href="../218/5218.xml">
CPU</link> is only capable of handling one process at a time.  Processes that are ready for the CPU are kept in a <link xlink:type="simple" xlink:href="../265/25265.xml">
queue</link> for "ready" processes.  Other processes that are waiting for an event to occur, such as loading information from a hard drive or waiting on an internet connection, are not in the ready queue.</p>

</ss1>
<ss1>
<st>
Running</st>
<p>

(Also called <b>active</b> or <b>executing</b>.) A "running", "executing" or "active" process is a process which is currently executing on a CPU.  From this state the process may exceed its allocated time slice and be context switched out and back to "ready" by the operating system, it may indicate that it has finished and be terminated or it may block on some needed resource (such as an input / output resource) and be moved to a "blocked" state.</p>

</ss1>
<ss1>
<st>
Blocked</st>
<p>

(Also called <b><link xlink:type="simple" xlink:href="../995/9812995.xml">
sleeping</link></b>.) Should a process "block" on a resource (such as a <link xlink:type="simple" xlink:href="../077/7077.xml">
file</link>, a <link xlink:type="simple" xlink:href="../557/164557.xml">
semaphore</link> or a <link xlink:type="simple" xlink:href="../310/5310.xml">
device</link>), it will be removed from the CPU (as a blocked process cannot continue execution) and will be in the blocked state.  The process will remain "blocked" until its resource becomes available, which can unfortunately lead to <link xlink:type="simple" xlink:href="../181/105181.xml">
deadlock</link>.  From the blocked state, the operating system may notify the process of the availability of the resource it is blocking on (the operating system itself may be alerted to the resource availability by an <link xlink:type="simple" xlink:href="../289/15289.xml">
interrupt</link>).  Once the operating system is aware that a process is no longer blocking, the process is again "ready" and can from there be dispatched to its "running" state, and from there the process may make use of its newly available resource.</p>

</ss1>
<ss1>
<st>
Terminated</st>
<p>

A process may be <link xlink:type="simple" xlink:href="../754/6539754.xml">
terminated</link>, either from the "running" state by completing its execution or by explicitly being killed.  In either of these cases, the process moves to the "terminated" state. If a process is not removed from memory after entering this state, this state may also be called <b><link xlink:type="simple" xlink:href="../498/34498.xml">
zombie</link></b>.</p>

</ss1>
</sec>
<sec>
<st>
Additional process states</st>

<p>

Two additional states are available for processes in systems that support <link xlink:type="simple" xlink:href="../354/32354.xml">
virtual memory</link>.  In both of these states, processes are "stored" on secondary memory (typically a <link xlink:type="simple" xlink:href="../777/13777.xml">
hard disk</link>).</p>

<ss1>
<st>
Swapped out and waiting</st>
<p>

(Also called <b>suspended and waiting</b>.) In systems that support virtual memory, a process may be swapped out, that is removed from main memory and placed in virtual memory by the mid-term scheduler.  From here the process may be swapped back into the waiting state.</p>

</ss1>
<ss1>
<st>
Swapped out and blocked</st>
<p>

(Also called <b>suspended and blocked</b>.) Processes that are blocked may also be swapped out.  In this event the process is both swapped out and blocked, and may be swapped back in again under the same circumstances as a swapped out and waiting process (although in this case, the process will move to the blocked state, and may still be waiting for a resource to become available).</p>

</ss1>
</sec>
<sec>
<st>
See also</st>
<p>

<list>
<entry level="1" type="bullet">

<link>
Blocking_(computing)</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../747/445747.xml">
Child process</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../467/928467.xml">
Concurrency</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../904/6904.xml">
Context switch</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../857/6857.xml">
Multitasking</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../931/853931.xml">
Orphan process</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../178/45178.xml">
Process</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../920/231920.xml">
Scheduling</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../191/1655191.xml">
Task</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../303/45303.xml">
Thread</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../293/4249293.xml">
Uninterruptible sleep</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../354/32354.xml">
Virtual memory</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../498/34498.xml">
Zombie process</link></entry>
</list>
</p>

</sec>
<sec>
<st>
References</st>

<p>

<list>
<entry level="1" type="bullet">

  <cite style="font-style:normal" class="book">Stallings, William&#32;(2005). Operating Systems: internals and design principles (5th edition).&#32;Prentice Hall. ISBN 0-13-127837-1.</cite>&nbsp;</entry>
<entry level="1" type="indent">

Particularly chapter 3, section 3.2, "process states", including figure 3.9 "process state transition with suspend states"</entry>
</list>
</p>


</sec>
</bdy>
</article>
