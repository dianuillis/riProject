<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 21:10:04[mciao0826] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<software  confidence="0.9508927676800064" wordnetid="106566077">
<interpreter  confidence="0.9511911446218017" wordnetid="110212501">
<compiler  confidence="0.9511911446218017" wordnetid="109946957">
<execution  confidence="0.9511911446218017" wordnetid="101127379">
<header>
<title>Chicken (Scheme implementation)</title>
<id>4397102</id>
<revision>
<id>239372428</id>
<timestamp>2008-09-18T20:39:57Z</timestamp>
<contributor>
<username>Cydebot</username>
<id>1215485</id>
</contributor>
</revision>
<categories>
<category>Scheme compilers</category>
<category>Scheme interpreters</category>
<category>Scheme implementations</category>
</categories>
</header>
<bdy>
<template>
<name>Infobox Software</name>
<parameters>
<genre>
<link xlink:type="simple" xlink:href="../015/23015.xml">
Programming language</link></genre>
<standard>
R5RS (mostly), R6RS (Î±)</standard>
<website>
<weblink xlink:type="simple" xlink:href="http://www.call-with-current-continuation.org/">
call-with-current-continuation.org</weblink></website>
<latest_release_version>
3.3.0</latest_release_version>
<developer>
Felix Winkelmann</developer>
<name>
Chicken Scheme</name>
<latest_release_date>
2008-06-28; 292 days ago</latest_release_date>
<license>
<link>
BSD License</link></license>
<operating_system>
<platform wordnetid="103961939" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<surface wordnetid="104362025" confidence="0.8">
<horizontal_surface wordnetid="103536348" confidence="0.8">
<link xlink:type="simple" xlink:href="../193/81193.xml">
Cross-platform</link></horizontal_surface>
</surface>
</artifact>
</platform>
</operating_system>
</parameters>
</template>

<p>

<b>Chicken</b> is a <link xlink:type="simple" xlink:href="../739/5739.xml">
compiler</link> and <link xlink:type="simple" xlink:href="../868/59868.xml">
interpreter</link> for the <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../119/28119.xml">
Scheme programming language</link></programming_language>
 that compiles Scheme code to standard <link xlink:type="simple" xlink:href="../021/6021.xml">
C</link>. It is mostly <link xlink:type="simple" xlink:href="../119/28119.xml">
R5RS</link> compliant and offers many extensions to the standard. Chicken is <link xlink:type="simple" xlink:href="../635/10635.xml">
free software</link> available under the <link xlink:type="simple" xlink:href="../111/18933111.xml">
BSD license</link>.</p>

<sec>
<st>
Design</st>
<p>

Like many Scheme compilers, Chicken uses standard C as an <link xlink:type="simple" xlink:href="../537/1209537.xml">
intermediate language</link>.  A Scheme program is translated into C by the Chicken compiler, and then a C compiler translates the C program into machine code for the target architecture, producing an executable program.  The universal availability of C makes it ideal for this purpose.</p>
<p>

Chicken's design was inspired by a <link xlink:type="simple" xlink:href="../337/18948337.xml">
1994</link> paper by <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<research_worker wordnetid="110523076" confidence="0.8">
<link xlink:type="simple" xlink:href="../643/2203643.xml">
Henry Baker</link></research_worker>
</scientist>
</causal_agent>
</person>
</physical_entity>
 that outlined an innovative strategy for Scheme compilation into C. A scheme program is compiled into C <link xlink:type="simple" xlink:href="../988/40988.xml">
functions</link>. These C functions never reach the <it>return</it> <link xlink:type="simple" xlink:href="../656/938656.xml">
statement</link>; instead, they  call a new <link xlink:type="simple" xlink:href="../189/505189.xml">
continuation</link> when complete. These continuations are C functions themselves and are passed on as extra arguments to other C functions. They are calculated by the compiler.</p>
<p>

So far, this is the essence of <link xlink:type="simple" xlink:href="../852/749852.xml">
continuation-passing style</link>. Baker's novel idea is to   use the C <link xlink:type="simple" xlink:href="../105/1718105.xml">
stack</link> for the Scheme heap. Hence, normal C stack operations such as automatic variable creation, variable-sized array allocation, and so on can be used. When the stack fills up (that is, the stack pointer reaches the top of the stack), a <link xlink:type="simple" xlink:href="../734/6734.xml">
garbage collection</link> can be initiated.  The design used is a <link xlink:type="simple" xlink:href="../941/4422941.xml">
copying garbage collector</link> originally devised by C.J. Cheney, which copies all live continuations and other live objects to the heap.  Despite this, the C code does not copy C stack frames, only Scheme objects, so it does not require knowledge of the C implementation.</p>
<p>

In full, the Scheme heap consists of the C stack as the <it>nursery</it> together with the two heaps required by the generational garbage collector. This approach gives the speed of the C stack for many operations, and it allows the use of continuations as simple calls to C functions. Further, Baker's solution guarantees <link xlink:type="simple" xlink:href="../503/3469503.xml">
asymptotic</link> tail recursive behavior, as required by the Scheme language standard. The implementation in the Chicken scheme compiler is even asymptotically <it>safe for space</it>.</p>

</sec>
<sec>
<st>
Limitations and deviations from the standard</st>

<p>

Chicken Scheme is mostly R5RS-compliant. The basic distribution offers only part of the <link xlink:type="simple" xlink:href="../485/711485.xml">
numerical tower</link> and Lisp-macros instead of <language wordnetid="106282651" confidence="0.8">
<link xlink:type="simple" xlink:href="../314/373314.xml">
hygienic macros</link></language>
. The missing features can be installed as extensions (see below).</p>
<p>

There is currently a maximum of 126 arguments to a procedure. On common platforms, up to 1000 arguments are supported.</p>

</sec>
<sec>
<st>
Add-on software</st>
<p>

Chicken has a large repository of additional libraries and programs called "<weblink xlink:type="simple" xlink:href="http://www.call-with-current-continuation.org/eggs">
eggs</weblink>".  This eggs system is quite similar to <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../386/2866386.xml">
RubyGems</link></software>
.  It too does <it>not</it> integrate with the packaging system of the user's operating system.  <link xlink:type="simple" xlink:href="../490/531490.xml">
SWIG</link> also supports Chicken.</p>

</sec>
<sec>
<st>
See also</st>
<p>

<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../742/30742.xml">
Tail recursion</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../941/4422941.xml">
Cheney's algorithm</link></entry>
<entry level="1" type="bullet">

 <music wordnetid="107020895" confidence="0.8">
<song wordnetid="107048000" confidence="0.8">
<auditory_communication wordnetid="107109019" confidence="0.8">
<musical_composition wordnetid="107037465" confidence="0.8">
<link xlink:type="simple" xlink:href="../277/532277.xml">
M.T.A.</link></musical_composition>
</auditory_communication>
</song>
</music>
</entry>
<entry level="1" type="bullet">

 <link>
Adamantix</link>, a security-oriented Linux distribution which uses Chicken as its extension language</entry>
</list>
</p>

</sec>
<sec>
<st>
References</st>
<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://home.pipeline.com/~hbaker1/CheneyMTA.html">
CONS Should Not CONS Its Arguments, Part II: Cheney on the M.T.A.</weblink>, the paper that inspired Chicken's design</entry>
<entry level="1" type="bullet">

 Cheney, C.J. "A Nonrecursive List Compacting Algorithm". CACM 13,11 (Nov. 1970),677-678.</entry>
</list>
</p>

</sec>
<sec>
<st>
External links</st>
<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.call-with-current-continuation.org/">
Chicken Scheme website</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://chicken.wiki.br">
The Chicken Wiki</weblink></entry>
</list>
</p>

</sec>
</bdy>
</execution>
</compiler>
</interpreter>
</software>
</article>
