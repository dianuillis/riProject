<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 21:12:21[mciao0826] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<accomplishment  confidence="0.8" wordnetid="100035189">
<event  confidence="0.8" wordnetid="100029378">
<action  confidence="0.8" wordnetid="100037396">
<act  confidence="0.8" wordnetid="100030358">
<psychological_feature  confidence="0.8" wordnetid="100023100">
<feat  confidence="0.8" wordnetid="100036762">
<header>
<title>Session hijacking</title>
<id>4456726</id>
<revision>
<id>242690117</id>
<timestamp>2008-10-03T06:47:20Z</timestamp>
<contributor>
<username>Jantichy</username>
<id>7994272</id>
</contributor>
</revision>
<categories>
<category> Web security exploits</category>
<category> Computer network security</category>
<category> Security exploits</category>
</categories>
</header>
<bdy>

The term <b>session hijacking</b> refers to the exploitation of a valid <message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<link xlink:type="simple" xlink:href="../452/865452.xml">
computer session</link></rule>
</direction>
</protocol>
</message>
 - sometimes also called a <it>session key</it> - to gain unauthorized access to information or services in a computer system. In particular, it is used to refer to the theft of a <link xlink:type="simple" xlink:href="../333/425333.xml">
magic cookie</link> used to authenticate a user to a remote server. It has particular relevance to <link xlink:type="simple" xlink:href="../187/460187.xml">
web developers</link>, as the <text wordnetid="106387980" confidence="0.8">
<know-how wordnetid="105616786" confidence="0.8">
<line wordnetid="107012534" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<heading wordnetid="106343971" confidence="0.8">
<link xlink:type="simple" xlink:href="../415/5068415.xml">
HTTP cookies</link></heading>
</method>
</line>
</know-how>
</text>
 used to maintain a session on many web sites can be easily stolen by an attacker using an intermediary computer or with access to the saved cookies on the victim's computer (see <text wordnetid="106387980" confidence="0.8">
<know-how wordnetid="105616786" confidence="0.8">
<line wordnetid="107012534" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<heading wordnetid="106343971" confidence="0.8">
<link>
HTTP cookie theft</link></heading>
</method>
</line>
</know-how>
</text>
).
<sec>
<st>
Analysis</st>

<p>

Many web sites allow users to create and manage their own accounts, logging in using a username and password (which may or may not be encrypted during transit) or other authentication method. In order that the user does not have to re-enter their username and password on every page to maintain their session, many web sites use session <text wordnetid="106387980" confidence="0.8">
<know-how wordnetid="105616786" confidence="0.8">
<line wordnetid="107012534" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<heading wordnetid="106343971" confidence="0.8">
<link xlink:type="simple" xlink:href="../415/5068415.xml">
cookies</link></heading>
</method>
</line>
</know-how>
</text>
: a <link xlink:type="simple" xlink:href="../741/3011741.xml">
token</link> of information issued by the server and returned by the user's web browser to confirm its identity.</p>
<p>

If an attacker is able to steal this cookie, they can make requests themselves as if they were the genuine user, gaining access to privileged information or changing data. If this cookie is a persistent cookie, then the impersonation can continue for a considerable period of time.  Of course, session hijacking is not limited to the web; any <link xlink:type="simple" xlink:href="../770/630770.xml">
protocol</link> in which state is maintained using a <link>
key</link> passed between two parties is vulnerable, especially if it's not encrypted.</p>
<p>

Use of a <know-how wordnetid="105616786" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<link xlink:type="simple" xlink:href="../363/293363.xml">
SecurID</link></method>
</know-how>
 card, or other token based secondary <link xlink:type="simple" xlink:href="../967/47967.xml">
authentication</link> is useless as protection against hijacking, as the attacker can simply wait until after the user authenticates, then hijack the session.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref></p>

</sec>
<sec>
<st>
Methods</st>

<p>

There are four main methods used to perpetrate a session hijack. These are:</p>
<p>

<list>
<entry level="1" type="bullet">

 <b><accomplishment wordnetid="100035189" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<action wordnetid="100037396" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<feat wordnetid="100036762" confidence="0.8">
<link xlink:type="simple" xlink:href="../708/3764708.xml">
Session fixation</link></feat>
</psychological_feature>
</act>
</action>
</event>
</accomplishment>
</b>, where the attacker sets a user's session id to one known to him, for example by sending the user an email with a link that contains a particular session id. The attacker now only has to wait until the user logs in.</entry>
<entry level="1" type="bullet">

 <b>Session sidejacking</b>, where the attacker uses <link xlink:type="simple" xlink:href="../114/59114.xml">
packet sniffing</link> to read network traffic between two parties to steal the session <link xlink:type="simple" xlink:href="../415/5068415.xml">
cookie</link>.  Many web sites use <link>
SSL</link> encryption for <know-how wordnetid="105616786" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<link xlink:type="simple" xlink:href="../372/9878372.xml">
login</link></method>
</know-how>
 pages to prevent attackers from seeing the password, but do not use encryption for the rest of the site once <link xlink:type="simple" xlink:href="../967/47967.xml">
authenticate</link>d.  This allows attackers that can read the network traffic to intercept all the data that is submitted to the <link xlink:type="simple" xlink:href="../455/33455.xml">
server</link> or web pages viewed by the client.  Since this data includes the session <text wordnetid="106387980" confidence="0.8">
<know-how wordnetid="105616786" confidence="0.8">
<line wordnetid="107012534" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<heading wordnetid="106343971" confidence="0.8">
<link xlink:type="simple" xlink:href="../415/5068415.xml">
cookie</link></heading>
</method>
</line>
</know-how>
</text>
, it allows him to impersonate the victim, even if the password itself is not compromised.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%222%22])">2</ref>  Unsecured Wi-Fi <link xlink:type="simple" xlink:href="../994/13994.xml">
hotspots</link> are particularly vulnerable, as anyone sharing the network will generally be able to read most of the web traffic between other nodes and the <link xlink:type="simple" xlink:href="../397/192397.xml">
access point</link>.</entry>
<entry level="1" type="bullet">

 Alternatively, an attacker with physical access can simply attempt to steal the <link xlink:type="simple" xlink:href="../941/63941.xml">
session key</link> by, for example, obtaining the file or memory contents of the appropriate part of either the user's computer or the server.</entry>
<entry level="1" type="bullet">

 <b><accomplishment wordnetid="100035189" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<action wordnetid="100037396" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<feat wordnetid="100036762" confidence="0.8">
<link xlink:type="simple" xlink:href="../154/241154.xml">
Cross-site scripting</link></feat>
</psychological_feature>
</act>
</action>
</event>
</accomplishment>
</b>, where the attacker tricks the user's computer into running code which is treated as trustworthy because it appears to belong to the server, allowing the attacker to obtain a copy of the cookie or perform other operations.</entry>
</list>
</p>

</sec>
<sec>
<st>
Prevention</st>

<p>

Methods to prevent session hijacking include:</p>
<p>

<list>
<entry level="1" type="bullet">

 Use of a long random number or string as the <link xlink:type="simple" xlink:href="../941/63941.xml">
session key</link>. This reduces the risk that an attacker could simply guess a valid session key through trial and error or brute force attacks.</entry>
<entry level="1" type="bullet">

 Regenerating the session id after a successful login. This prevents <accomplishment wordnetid="100035189" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<action wordnetid="100037396" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<feat wordnetid="100036762" confidence="0.8">
<link>
session fixation</link></feat>
</psychological_feature>
</act>
</action>
</event>
</accomplishment>
 because the attacker does not know the session id of the user after he has logged in.</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../294/10294.xml">
Encryption</link> of the data passed between the parties; in particular the session key. This technique is widely relied-upon by web-based banks and other e-commerce services, because it completely prevents sniffing-style attacks. However, it could still be possible to perform some other kind of session hijack.</entry>
<entry level="1" type="bullet">

 Some services make secondary checks against the identity of the user. For example, a web server could check with each request made that the IP address of the user matched the one last used during that session. This does not prevent attacks by somebody who shares the same IP address, however, and could be frustrating for users whose IP address is liable to change during a browsing session.</entry>
<entry level="1" type="bullet">

 Alternatively, some services will change the value of the cookie with each and every request. This dramatically reduces the window in which an attacker can operate and makes it easy to identify whether an attack has taken place, but can cause other technical problems (for example, preventing the back button from working properly, on the web).</entry>
</list>
</p>

</sec>
<sec>
<st>
See also</st>
<p>

<list>
<entry level="1" type="bullet">

<link>
HTTP Cookie</link></entry>
<entry level="1" type="bullet">

<accomplishment wordnetid="100035189" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<action wordnetid="100037396" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<feat wordnetid="100036762" confidence="0.8">
<link xlink:type="simple" xlink:href="../682/1201682.xml">
Cross-site request forgery</link></feat>
</psychological_feature>
</act>
</action>
</event>
</accomplishment>
</entry>
</list>
</p>

</sec>
<sec>
<st>
References</st>

<p>

<reflist>
<entry id="1">
Dave Dittrich, <weblink xlink:type="simple" xlink:href="http://staff.washington.edu/dittrich/talks/qsm-sec/script.html">
<it>Anatomy of a Hijack''</it></weblink>, University of Washington.</entry>
<entry id="2">
"<weblink xlink:type="simple" xlink:href="http://news.bbc.co.uk/2/hi/technology/6929258.stm">
Warning of webmail wi-fi hijack</weblink>".&#32;  <statement wordnetid="106722453" confidence="0.8">
<message wordnetid="106598915" confidence="0.8">
<announcement wordnetid="106746580" confidence="0.8">
<program wordnetid="106748466" confidence="0.8">
<link xlink:type="simple" xlink:href="../893/1139893.xml">
BBC News</link></program>
</announcement>
</message>
</statement>
&#32;(August 3, 2007).</entry>
</reflist>
</p>



</sec>
</bdy>
</feat>
</psychological_feature>
</act>
</action>
</event>
</accomplishment>
</article>
