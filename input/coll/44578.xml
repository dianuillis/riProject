<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 15:42:23[mciao0826] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>Big O notation</title>
<id>44578</id>
<revision>
<id>244446647</id>
<timestamp>2008-10-10T21:09:24Z</timestamp>
<contributor>
<username>David Eppstein</username>
<id>2051880</id>
</contributor>
</revision>
<categories>
<category>Computational complexity theory</category>
<category>Asymptotic analysis</category>
<category>Mathematical notation</category>
<category>Mathematical analysis</category>
</categories>
</header>
<bdy>

This article is about the mathematical notation.&#32;&#32;For other uses, see <link xlink:type="simple" xlink:href="../073/4073.xml">
Big O</link>.&#32;&#32;
In mathematics, <b>big O notation</b> (so called because it uses the symbol <it>O</it>) describes the <link xlink:type="simple" xlink:href="../995/641995.xml">
limiting behavior</link> of a <link xlink:type="simple" xlink:href="../427/185427.xml">
function</link> for very small or very large arguments, usually in terms of simpler functions. It is also called  <b>Big Oh notation</b>, <b>Landau notation</b>, <b>Bachmann-Landau notation</b>, and <b>asymptotic notation</b>. There are also other symbols <it>o</it>, Ω, ω, and <it>Θ</it> for related bounds.<p>

Although developed as a part of pure mathematics, it is now frequently also used in <link xlink:type="simple" xlink:href="../543/7543.xml">
computational complexity theory</link> to describe how the size of the input data affects an <link xlink:type="simple" xlink:href="../775/775.xml">
algorithm</link>'s usage of <link xlink:type="simple" xlink:href="../222/4628222.xml">
computational resource</link>s (usually running time or memory). Big O notation is also used in many other scientific and mathematical fields to provide similar estimates.</p>

<sec>
<st>
History</st>
<p>

The notation was first introduced by number theorist <link xlink:type="simple" xlink:href="../951/641951.xml">
Paul Bachmann</link> in 1894, in the second volume of his book <it>Analytische Zahlentheorie</it> ("<link xlink:type="simple" xlink:href="../513/251513.xml">
analytic number theory</link>"), the first volume of which (not yet containing big O notation) was published in 1892.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref>  The notation was popularized in the work of another German number theorist <scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../230/222230.xml">
Edmund Landau</link></scientist>
; hence it is sometimes called a Landau symbol. The big-O, standing for "order of", was originally a capital <link xlink:type="simple" xlink:href="../738/166738.xml">
omicron</link>; today the identical-looking Latin capital letter <it><link xlink:type="simple" xlink:href="../314/22314.xml">
O</link></it> is also used, but never the digit <link xlink:type="simple" xlink:href="../513/34513.xml">
zero</link>.</p>

</sec>
<sec>
<st>
 Formal definition </st>
<p>

Suppose <math>f(x)</math> and <math>g(x)</math> are two functions defined on some subset of the <link xlink:type="simple" xlink:href="../491/19725491.xml">
real number</link>s. We say</p>
<p>

<image width="400px" src="Yorick215.svg" type="thumb">
<caption>

Theory of <it>O</it>-Notation: <it>f</it> is in the order of <it>g</it> (i.e. <math>f(x) = O(g(x))</math>) if and only if there exists a positive real number <it>M</it> and a real number <math>x_0</math> such that for all <it>x</it>,<math>|f(x)|\le  M\cdot g(x)</math>, wherever <math>x &amp;gt; x_0</math>
</caption>
</image>
</p>
<p>

<indent level="1">

<math>f(x)=O(g(x))\mbox{ as }x\to\infty</math>
</indent>
<link xlink:type="simple" xlink:href="../922/14922.xml">
if and only if</link> there exists a positive real number <it>M</it> and a real number <math>x_0</math> such that <math>|f(x)| \le \; M |g(x)|</math> for <math>x&amp;gt;x_0.</math></p>
<p>

The notation can also be used to describe the behavior of <it>f</it> near some real number <it>a</it>: we say
<indent level="1">

<math>f(x)=O(g(x))\mbox{ as }x\to a</math>
</indent>
if and only if
<indent level="1">

<math>\exists \;\delta &amp;gt;0,\exists \; M&amp;gt;0\mbox{ such that }|f(x)| \le \; M |g(x)|\mbox{ for }|x - a| &amp;lt; \delta.</math>
</indent>

If <math>g(x)</math> is non-zero for values of <it>x</it> sufficiently close to <it>a</it>, both of these definitions can be unified using the <link>
limit superior</link>:
<indent level="1">

<math>f(x)=O(g(x))\mbox{ as }x \to a</math>
</indent>
if and only if
<indent level="1">

<math>\limsup_{x\to a} \left|\frac{f(x)}{g(x)}\right| &amp;lt; \infty.</math>
</indent>
</p>


</sec>
<sec>
<st>
 Usage </st>
<p>

Big O notation has two main areas of application. In <link xlink:type="simple" xlink:href="../831/18831.xml">
mathematics</link>, it is commonly used to describe how closely a finite <link xlink:type="simple" xlink:href="../287/15287.xml">
series</link> approximates a given function, especially in the case of a truncated <mathematical_relation wordnetid="113783581" confidence="0.8">
<function wordnetid="113783816" confidence="0.8">
<link xlink:type="simple" xlink:href="../448/30448.xml">
Taylor series</link></function>
</mathematical_relation>
 or <link xlink:type="simple" xlink:href="../090/642090.xml">
asymptotic expansion</link>. In <link xlink:type="simple" xlink:href="../323/5323.xml">
computer science</link>, it is useful in the <link xlink:type="simple" xlink:href="../ury/23rd_century.xml">
analysis of algorithms</link>. In both of the applications, the function <it>g</it>(<it>x</it>) appearing within the <it>O</it>(...) is typically chosen to be as simple as possible, omitting constant factors and lower order terms.</p>
<p>

There are two formally close, but noticeably different, usages of this notation: <link xlink:type="simple" xlink:href="../455/15455.xml">
infinite</link> asymptotics and <link xlink:type="simple" xlink:href="../990/160990.xml">
infinitesimal</link> asymptotics. This distinction is only in application and not in principle, however&mdash;the formal definition for the "big O" is the same for both cases, only with different limits for the function argument.</p>

<ss1>
<st>
Infinite asymptotics</st>
<p>

Big O notation is useful when <link xlink:type="simple" xlink:href="../ury/23rd_century.xml">
analyzing algorithms</link> for efficiency.  For example, the time (or the number of steps) it takes to complete a problem of size <it>n</it> might be found to be <it>T</it>(<it>n</it>) = 4<it>n</it>² − 2<it>n</it> + 2.</p>
<p>

As <it>n</it> grows large, the <it>n</it>² <link xlink:type="simple" xlink:href="../665/668665.xml">
term</link> will come to dominate, so that all other terms can be neglected &mdash; for instance when <it>n</it> = 500, the term 4<it>n</it>² is 1000 times as large as the 2<it>n</it> term. Ignoring the latter would have negligible effect on the expression's value for most purposes.</p>
<p>

Further, the <link xlink:type="simple" xlink:href="../203/51203.xml">
coefficient</link>s become irrelevant as well if we compare to any other order of expression, such as an expression containing a term n³ or n².  Even if <it>T</it>(<it>n</it>) = 1,000,000<it>n</it>², if <it>U</it>(<it>n</it>) = <it>n</it>³, the latter will always exceed the former once <it>n</it> grows larger than 1,000,000 (<it>T</it>(1,000,000) = 1,000,000³ = <it>U</it>(1,000,000)). Additionally, the number of steps depends on the details of the machine model on which the algorithm runs, but different types of machines typically vary by only a constant factor in the number of steps needed to execute an algorithm.</p>
<p>

So the big O notation captures what remains: we write either 
<indent level="1">

<math>T(n)= O(n^2)</math> 
</indent>
or 
<indent level="1">

<math>T(n)\in O(n^2)</math>
</indent>

(read as "big o of n squared") and say that the algorithm has <it>order of n²</it> time complexity.</p>
<p>

Note that "=" is not meant to express "is equal to" in its normal mathematical sense, but rather a more colloquial "is", so the second expression may be more accurate (see ["[[#Equals sign]]"] discussion below).</p>

</ss1>
<ss1>
<st>
Infinitesimal asymptotics</st>
<p>

Big O can also be used to describe the error term in an approximation to a mathematical function. For example, 
<indent level="1">

<math>e^x=1+x+\frac{x^2}{2!}+O(x^3)\qquad\hbox{as}\ x\to 0</math>
</indent>
expresses the fact that the error, the difference <math>e^x - \left(1 + x +\frac{x^2}{2!}\right)</math>, is smaller in <link xlink:type="simple" xlink:href="../991/991.xml">
absolute value</link> than some constant times <math>\left|x^3\right|</math> when <math>x</math> is close enough to 0.</p>

</ss1>
<ss1>
<st>
Example</st>
<p>

Take the <link xlink:type="simple" xlink:href="../000/23000.xml">
polynomial</link>s:</p>
<p>

<indent level="1">

<math> f(x) = 6x^4 -2x^3 +5 \,</math> 
</indent>
:<math> g(x) = x^4.  \,</math></p>
<p>

We say <it>f</it>(<it>x</it>) has order O(<it>g</it>(<it>x</it>)) or O(<it>x</it>4) (as <math> x\to\infty </math>) </p>
<p>

From the definition of order</p>
<p>

<indent level="1">

<math>|f(x)| \le \; M |g(x)|\mbox{ for }x&amp;gt;x_0.</math>
</indent>

Proof:
<indent level="1">

for all <math>x &amp;gt; 1</math> (we take <math>x_0 = 1</math>):
</indent>
:<math> |6x^4 - 2x^3 + 5| \le 6x^4 + 2x^3 + 5 \,</math>
<indent level="1">

<math> |6x^4 - 2x^3 + 5| \le 6x^4 + 2x^4 + 5x^4 \,</math>
</indent>
:<math> |6x^4 - 2x^3 + 5| \le 13x^4 \,</math>
<indent level="1">

<math> |6x^4 - 2x^3 + 5| \le 13 \,|x^4 |. \,</math> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  where M = 13 in this example
</indent>

</p>
</ss1>
</sec>
<sec>
<st>
 Matters of notation </st>

<ss1>
<st>
Equals sign</st>
<p>

The statement "<math>f(x)</math> is <math>O(g(x))</math>" as defined above is usually written as <math>f(x) =O(g(x))</math>. This is a slight <link xlink:type="simple" xlink:href="../066/1698066.xml">
abuse of notation</link>; equality of two functions is not asserted, and it cannot be since the property of being <math>O(g(x))</math> is not symmetric:</p>
<p>

<indent level="1">

<math>O(x)=O(x^2)\mbox{ but }O(x^2)\ne O(x)</math>.
</indent>

There is also a second reason why that notation is not precise. The symbol <it>f</it>(<it>x</it>) means the value of the function <it>f</it> for the argument <it>x</it>. Hence the symbol of the function is <it>f</it> and not <it>f</it>(<it>x</it>).</p>
<p>

For these reasons, some authors prefer <link xlink:type="simple" xlink:href="../687/2804687.xml">
set notation</link> and write <math>f \in O(g)</math>, thinking of <math>O(g)</math> as the set of all functions dominated by <it>g</it>.</p>

</ss1>
<ss1>
<st>
Other arithmetic operators</st>
<p>

Big O notation can also be used in conjunction with other arithmetic operators in more complicated equations.   For example, <it>h</it>(<it>x</it>) + <it>O</it>(<it>f</it>(<it>x</it>)) denotes the collection of functions having the growth of <it>h</it>(<it>x</it>) plus a part whose growth is limited to that of <it>f</it>(<it>x</it>). Thus,
<indent level="1">

<math>g(x) = h(x) + O(f(x))\,</math>
</indent>
expresses the same as
<indent level="1">

<math>g(x) - h(x) \in O(f(x))\,.</math>
</indent>

</p>
<ss2>
<st>
Example</st>
<p>

Suppose an algorithm is being developed to operate on a set of <it>n</it> elements. Its developers are interested in finding a function <it>T</it>(<it>n</it>)  that will express how long the algorithm will take to run (in some arbitrary measurement of time) in terms of the number of elements in the input set. The algorithm works by first calling a subroutine to operate on the elements in the set (e.g. sort them) and then doing its own operation on the set. The subroutine has a known time complexity of <math>O(n^2)</math>, and after the subroutine runs the algorithm must take an additional <math>55n^3+2n+10</math> time before it terminates.  Thus the overall time complexity of the algorithm can be expressed as</p>
<p>

<indent level="1">

<math>T(n)=O(n^2)+55n^3+2n+10</math>
</indent>

This can perhaps be most easily read by replacing <math>O(n^2)</math> with "some function that grows asymptotically slower than <math>n^2</math>". Again, this usage disregards some of the formal meaning of the "=" and "+" symbols, but it does allow one to use the big O notation as a kind of convenient placeholder.</p>

</ss2>
</ss1>
<ss1>
<st>
Declaration of variables</st>
<p>

Another anomaly of the notation, although less exceptional, is that it does not make explicit which variable is the function argument, which may need to be inferred from the context if several variables are involved. The following two right-hand side big O notations have dramatically different meanings:
<indent level="1">

<math>f(m) = O(m^n)\,,</math>
</indent>
:<math>g(n)\,\, = O(m^n)\,.</math>
The first case states that <it>f</it>(<it>m</it>) exhibits polynomial growth, while the second, assuming <it>m</it> &amp;gt; 1, states that <it>g</it>(<it>n</it>) exhibits exponential growth. So as to avoid all possible confusion, some authors use the notation
<indent level="1">

<math>g \in O(f)\,,</math>
</indent>
meaning the same as what is denoted by others as
<indent level="1">

<math>g(x) \in O(f(x))\,.</math>
</indent>

</p>
</ss1>
<ss1>
<st>
Complex usages</st>
<p>

In more complex usage, O( ) can appear in different places in an equation, even several times on each side. For example, the following are true for <math>n\to\infty</math>
<indent level="1">

<math>(n+1)^2 = n^2 + O(n)</math>
</indent>
:<math>(n+O(n^{1/2}))(n + O(\log\,n))^2 = n^3 + O(n^{5/2})</math>
<indent level="1">

<math>n^{O(1)} = O(e^n)</math>
</indent>
The meaning of such statements is as follows: for <it>any</it> functions which satisfy each O( ) on the left side, there are <it>some</it> functions satisfying each O( ) on the right side, such that substituting all these functions into the equation makes the two sides equal. For example, the third equation above means: "For any function <it>f</it>(<it>n</it>)=O(1), there is some function <it>g</it>(<it>n</it>)=O(<it>en</it>) such that <it>nf</it>(<it>n</it>)=<it>g</it>(<it>n</it>)." In terms of the "set notation" above, the meaning is that the class of functions represented by the left side is a subset of the class of functions represented by the right side.</p>

</ss1>
</sec>
<sec>
<st>
 Orders of common functions </st>
<p>

Here is a list of classes of functions that are commonly encountered when analyzing algorithms. All of these are as <it>n</it> increases to infinity. The slower-growing functions are listed first. <it>c</it> is an arbitrary constant.</p>
<p>

<table class="wikitable">
<header>
Notation</header>
<header>
Name</header>
<header>
Example</header>
<row>
<col>
<math>O\left(1\right)</math></col>
<col>
 <link xlink:type="simple" xlink:href="../453/12860453.xml">
constant</link></col>
<col>
 Determining if a number is even or odd; using a constant-size <link xlink:type="simple" xlink:href="../457/356457.xml">
lookup table</link> or <link xlink:type="simple" xlink:href="../833/13833.xml">
hash table</link></col>
</row>
<row>
<col>
<math>O\left(\alpha(n)\right)</math></col>
<col>
 <mathematical_relation wordnetid="113783581" confidence="0.8">
<function wordnetid="113783816" confidence="0.8">
<link xlink:type="simple" xlink:href="../ury/30th_century.xml">
 inverse Ackermann</link></function>
</mathematical_relation>
</col>
<col>
 <link xlink:type="simple" xlink:href="../683/236683.xml">
Amortized time</link> per operation using a <link xlink:type="simple" xlink:href="../551/1037551.xml">
disjoint set</link></col>
</row>
<row>
<col>
<math>O\left(\log^* n\right)</math></col>
<col>
 <link xlink:type="simple" xlink:href="../048/1038048.xml">
iterated logarithm</link>ic</col>
<col>
 The find algorithm of <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../443/299443.xml">
Hopcroft</link></scientist>
</person>
 and <peer wordnetid="109626238" confidence="0.8">
<physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<honoree wordnetid="110183757" confidence="0.8">
<intellectual wordnetid="109621545" confidence="0.8">
<colleague wordnetid="109935990" confidence="0.8">
<acquirer wordnetid="109764201" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<recipient wordnetid="109627906" confidence="0.8">
<associate wordnetid="109816771" confidence="0.8">
<laureate wordnetid="110249011" confidence="0.8">
<alumnus wordnetid="109786338" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scholar wordnetid="110557854" confidence="0.8">
<link xlink:type="simple" xlink:href="../318/1702318.xml">
Ullman</link></scholar>
</causal_agent>
</alumnus>
</laureate>
</associate>
</recipient>
</scientist>
</acquirer>
</colleague>
</intellectual>
</honoree>
</person>
</physical_entity>
</peer>
on a disjoint set</col>
</row>
<row>
<col>
<math>O\left(\log \log n\right)</math></col>
<col>
double logarithmic</col>
<col>
 Amortized time per operation using a bounded <link xlink:type="simple" xlink:href="../485/24485.xml">
priority queue</link><ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%222%22])">2</ref></col>
</row>
<row>
<col>
<math>O\left(\log n\right)</math></col>
<col>
 <link xlink:type="simple" xlink:href="../860/17860.xml">
logarithm</link>ic</col>
<col>
 Finding an item in a sorted array with a <algorithm wordnetid="105847438" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../266/4266.xml">
binary search</link></algorithm>
</col>
</row>
<row>
<col>
<math>O\left(\left(\log n\right)^c\right)</math></col>
<col>
 <link xlink:type="simple" xlink:href="../957/445957.xml">
polylogarithmic</link></col>
<col>
 Deciding if <it>n</it> is prime with the <process wordnetid="105701363" confidence="0.8">
<institute wordnetid="108407330" confidence="0.8">
<inquiry wordnetid="105797597" confidence="0.8">
<thinking wordnetid="105770926" confidence="0.8">
<association wordnetid="108049401" confidence="0.8">
<problem_solving wordnetid="105796750" confidence="0.8">
<experiment wordnetid="105798043" confidence="0.8">
<trial wordnetid="105799212" confidence="0.8">
<higher_cognitive_process wordnetid="105770664" confidence="0.8">
<link xlink:type="simple" xlink:href="../847/405847.xml">
AKS primality test</link></higher_cognitive_process>
</trial>
</experiment>
</problem_solving>
</association>
</thinking>
</inquiry>
</institute>
</process>
</col>
</row>
<row>
<col>
<math>O\left({n^c}\right), 0&amp;lt;c&amp;lt;1</math></col>
<col>
fractional power</col>
<col>
 Searching in a <link xlink:type="simple" xlink:href="../725/1676725.xml">
kd-tree</link></col>
</row>
<row>
<col>
<math>O\left(n\right)</math></col>
<col>
 <link xlink:type="simple" xlink:href="../111/152111.xml">
linear</link></col>
<col>
Finding an item in an unsorted list; adding two <it>n</it>-digit numbers</col>
</row>
<row>
<col>
<math>O\left(n\log n\right)</math> = <math>O\left(\log n!\right)</math></col>
<col>
 <link xlink:type="simple" xlink:href="../768/239768.xml">
linearithmic</link>, loglinear, or quasilinear</col>
<col>
 Performing a <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../512/11512.xml">
Fast Fourier transform</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
; <link xlink:type="simple" xlink:href="../995/13995.xml">
heapsort</link> or <link xlink:type="simple" xlink:href="../039/20039.xml">
merge sort</link></col>
</row>
<row>
<col>
<math>O\left({n^2}\right)</math></col>
<col>
 <link xlink:type="simple" xlink:href="../240/187240.xml">
quadratic</link></col>
<col>
 Multiplying two <it>n</it>-digit numbers by a simple algorithm; adding two <it>n×n</it> matrices; <link xlink:type="simple" xlink:href="../255/4255.xml">
bubble sort</link> or <link xlink:type="simple" xlink:href="../205/15205.xml">
insertion sort</link></col>
</row>
<row>
<col>
<math>O\left({n^3}\right)</math></col>
<col>
 <link xlink:type="simple" xlink:href="../709/243709.xml">
cubic</link></col>
<col>
 Multiplying two <it>n×n</it> matrices by simple algorithm; finding the shortest path on a weighted digraph with the <link xlink:type="simple" xlink:href="../401/230401.xml">
Floyd-Warshall algorithm</link></col>
</row>
<row>
<col>
<math>O\left({n^c}\right), c&amp;gt;1</math></col>
<col>
 <link xlink:type="simple" xlink:href="../000/23000.xml">
polynomial</link>or algebraic</col>
<col>
 <model wordnetid="105890249" confidence="0.8">
<idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<hypothesis wordnetid="105888929" confidence="0.8">
<link xlink:type="simple" xlink:href="../555/567555.xml">
Tree-adjoining grammar</link></hypothesis>
</concept>
</idea>
</model>
 parsing; maximum <link xlink:type="simple" xlink:href="../797/581797.xml">
matching</link> for <link xlink:type="simple" xlink:href="../431/244431.xml">
bipartite graph</link>s</col>
</row>
<row>
<col>
<math>L_n[\alpha,c], 0 &amp;lt; \alpha &amp;lt; 1=</math><math>e^{(c+o(1)) (\ln n)^\alpha (\ln \ln n)^{1-\alpha}}</math></col>
<col>
 <link xlink:type="simple" xlink:href="../119/2811119.xml">
L-notation</link></col>
<col>
 Factoring a number using the <link xlink:type="simple" xlink:href="../132/589132.xml">
special</link> or <link xlink:type="simple" xlink:href="../734/152734.xml">
general number field sieve</link></col>
</row>
<row>
<col>
<math>O\left({c^n}\right)</math></col>
<col>
 <link xlink:type="simple" xlink:href="../678/9678.xml">
exponential</link> or <link xlink:type="simple" xlink:href="../935/808935.xml">
geometric</link></col>
<col>
 Finding the (exact) solution to the <link xlink:type="simple" xlink:href="../248/31248.xml">
traveling salesman problem</link> using <link xlink:type="simple" xlink:href="../297/125297.xml">
dynamic programming</link>; determining if two logical statements are equivalent using <link xlink:type="simple" xlink:href="../147/236147.xml">
brute force</link></col>
</row>
<row>
<col>
<math>O\left(n!\right)</math> =  <math>O\left({n^n}\right)</math></col>
<col>
 <link xlink:type="simple" xlink:href="../606/10606.xml">
factorial</link>or combinatorial or "n to the n"</col>
<col>
 Solving the <link xlink:type="simple" xlink:href="../248/31248.xml">
traveling salesman problem</link> via <link xlink:type="simple" xlink:href="../127/103127.xml">
brute-force search</link>; finding the <link xlink:type="simple" xlink:href="../468/8468.xml">
determinant</link> with <link xlink:type="simple" xlink:href="../553/3506553.xml">
expansion by minors</link>. The form <math>O\left({n^n}\right)</math> is often used instead of <math>O\left(n!\right)</math> to derive simpler formulas for asymptotic complexity.</col>
</row>
<row>
<col>
<math>c_1^{O(c^n)}</math></col>
<col>
 <link xlink:type="simple" xlink:href="../166/8541166.xml">
double exponential</link></col>
<col>
 Deciding the truth of a given statement in <process wordnetid="105701363" confidence="0.8">
<thinking wordnetid="105770926" confidence="0.8">
<explanation wordnetid="105793000" confidence="0.8">
<theory wordnetid="105989479" confidence="0.8">
<higher_cognitive_process wordnetid="105770664" confidence="0.8">
<link xlink:type="simple" xlink:href="../756/23756.xml">
Presburger arithmetic</link></higher_cognitive_process>
</theory>
</explanation>
</thinking>
</process>
</col>
</row>
</table>
</p>
<p>

Not as common, but even larger growth is possible, such as the single-valued version of the <mathematical_relation wordnetid="113783581" confidence="0.8">
<function wordnetid="113783816" confidence="0.8">
<link xlink:type="simple" xlink:href="../ury/30th_century.xml">
Ackermann function</link></function>
</mathematical_relation>
, A(<it>n</it>,<it>n</it>).</p>
<p>

For any <it>k&amp;gt;0</it> and <it>c&amp;gt;0</it>, <it>O(nc(log n)k)</it> is subset of <it>O(n(c+a))</it> for any <it>a&amp;gt;0</it>. So <it>O(nc(log n)k)</it> may be considered as polynomial with some bigger order.</p>

</sec>
<sec>
<st>
Properties</st>

<p>

If a function <it>f</it>(<it>n</it>) can be written as a finite sum of other functions, then the fastest growing one determines the order of
<it>f</it>(<it>n</it>). For example
<indent level="1">

<math>f(n) = 9 \log n + 5 (\log n)^3 + 3n^2 + 2n^3 \in O(n^3)\,\!.</math> 
</indent>

In particular, if a function may be bounded by a polynomial in <it>n</it>, then as <it>n</it> tends to <it>infinity</it>, one may disregard <it>lower-order</it> terms of the polynomial.</p>
<p>

<math>O(n^c)</math> and <math>O(c^n)</math> are very different. The latter grows much, much faster, no matter how big the constant <it>c</it> is (as long as it is greater than one). A function that grows faster than any power of <it>n</it> is called <it>superpolynomial</it>.  One that grows more slowly than any exponential function of the form <math>c^n</math> is called <it>subexponential</it>. An algorithm can require time that is both superpolynomial and subexponential; examples of this include the fastest known algorithms for <link xlink:type="simple" xlink:href="../491/15491.xml">
integer factorization</link>.</p>
<p>

<math>O(\log n)</math> is exactly the same as <math>O(\log(n^c))</math>. The logarithms differ only by a constant factor, (since
<math>\log(n^c)=c \log n</math>) and thus the big O notation ignores that. Similarly, logs with different constant bases are equivalent. Exponentials with different bases, on the other hand, are not of the same order. For example, <math>2^n</math> and <math>3^n</math> are <b>not</b> of the same order.</p>
<p>

Changing units may or may not affect the order of the resulting algorithm. Changing units is equivalent to multiplying the appropriate variable by a constant wherever it appears. For example, if an algorithm runs in the order of n2, replacing n by cn means the algorithm runs in the order of <math>c^2n^2</math>, and the big O notation ignores the constant <math>c^2</math>. This can be written as <math> c^2n^2 \in O(n^2) </math>. If, however, an algorithm runs in the order of <math>2^n</math>, replacing n with cn gives <math>2^{cn} = (2^c)^n</math>. This is not equivalent to <math>2^n</math> (unless, of course, c=1).</p>
<p>

Changing of variable may affect the order of the resulting algorithm. For example, if an algorithm runs on the order of <it>O(n)</it> when <it>n</it> is the number of <it>digits</it> of the input number, then it has order <it>O(log n)</it> when <it>n</it> is the input number itself.</p>

<ss1>
<st>
Product</st>
<p>

<indent level="1">

<math> f_1 \in O(g_1)\ \wedge\                              
  f_2\in O(g_2)\, \implies f_1  f_2\in O(g_1  g_2)\,</math>
</indent>

<indent level="1">

<math>f\cdot O(g) \in O(f g)</math>
</indent>

</p>
</ss1>
<ss1>
<st>
Sum</st>
<p>

<indent level="1">

<math> f_1 \in O(g_1)\ \wedge\                              
  f_2\in O(g_2)\, \implies f_1 + f_2\in O(g_1 + g_2)\,</math>
</indent>
::This implies <math>f_1 \in O(g) \land f_2 \in O(g) \implies f_1+f_2 \in O(g) </math>, which means that <math>O(g)</math> is a <link xlink:type="simple" xlink:href="../266/3558266.xml">
convex cone</link>.</p>
<p>

<indent level="1">

If <it>f</it> and <it>g</it> are positive functions, <math>f + O(g) \in O(f + g)</math>
</indent>

</p>
</ss1>
<ss1>
<st>
Multiplication by a constant</st>
<p>

<indent level="1">

Let <it>k</it> be a constant. Then:
</indent>

<indent level="1">

<math>O(k g) = O(g)</math>
</indent>

<indent level="1">

<math>f\in O(g) \Rightarrow kf\in O(g) </math>
</indent>

</p>
</ss1>
</sec>
<sec>
<st>
 Related asymptotic notations </st>
<p>

Big <it>O</it> is the most commonly used asymptotic notation for comparing functions, although in many cases Big <it>O</it> may be replaced with Big Theta <it>Θ</it> for asymptotically tighter bounds (<link xlink:type="simple" xlink:href="../758/166758.xml">
Theta</link>, see below).  Here, we define some related notations in terms of Big <it>O</it>, progressing up to the family of Bachmann-Landau notations to which Big <it>O</it> notation belongs.</p>

<ss1>
<st>
 Little-o notation </st>
<p>

The relation <math>f(x) \in  o(g(x))</math> is read as "<math>f(x)</math> is little-o of <math>g(x)</math>". Intuitively, it means that <math>g(x)</math> grows much faster than <math>f(x)</math>.   It assumes that <it>f</it> and <it>g</it> are both functions of one variable.   Formally, it states that the <link xlink:type="simple" xlink:href="../401/19616401.xml">
limit</link> of <math>f(x)/g(x)</math> is zero, as <it>x</it> approaches infinity. For algebraically defined functions <math>f(x)</math> and <math>g(x)</math>, <math>\lim_{x \to \infty}f(x)/g(x)</math> is generally found using <link>
L'Hôpital's rule</link>.</p>
<p>

For example,</p>
<p>

<list>
<entry level="1" type="bullet">

 <math>2x  \in o(x^2) \,\!</math></entry>
<entry level="1" type="bullet">

 <math>2x^2 \not \in  o(x^2)</math></entry>
<entry level="1" type="bullet">

 <math>1/x \in o(1)</math></entry>
</list>
</p>
<p>

Little-o  notation is common in mathematics but rarer in computer science. In computer science the variable (and function value) is most often a natural number. In math, the variable and function values are often  real numbers. The following properties can be useful:</p>
<p>

<list>
<entry level="1" type="bullet">

 <math>o(f) + o(f) \subseteq o(f)</math></entry>
<entry level="1" type="bullet">

 <math>o(f)o(g) \subseteq o(fg)</math></entry>
<entry level="1" type="bullet">

 <math>o(o(f)) \subseteq o(f)</math></entry>
<entry level="1" type="bullet">

 <math>o(f) \subset O(f)</math> (and thus the above properties apply with most combinations of o and O).</entry>
</list>
</p>
<p>

As with big O notation, the statement "<math>f(x)</math> is <math>o(g(x))</math>" is usually written as <math> f(x) = o(g(x))</math>, which is a slight abuse of notation.</p>

</ss1>
<ss1>
<st>
 The family of Bachmann-Landau notations </st>
<p>

<table class="wikitable">
<header>
Notation</header>
<header width="100pt">
Name</header>
<header width="190pt">
Intuition</header>
<header>
As <math> n \to \infty</math>, eventually...</header>
<header>
Definition</header>
<row>
<col>
<math>f(n) \in O(g(n))</math></col>
<col width="100pt">
Big Omicron; Big O; Big Oh</col>
<col width="190pt">
<math>f</math> is bounded above by <math>g</math> (up to constant factor) asymptotically</col>
<col>
<math>f(n)  \leq  g(n)\cdot k</math></col>
<col>
<math>\exists (k&amp;gt;0), n_0 : \forall(n&amp;gt;n_0) \; |f(n)| \leq |g(n)\cdot k| </math>  or  <math>  \exists (k&amp;gt;0), n_0 : \forall(n&amp;gt;n_0) \; f(n) \leq g(n)\cdot k</math></col>
</row>
<row>
<col>
<math>f(n) \in \Omega(g(n))</math></col>
<col width="100pt">
Big Omega</col>
<col width="190pt">
<math>f</math> is bounded below by <math>g</math> (up to constant factor) asymptotically</col>
<col>
<math>f(n)  \geq  g(n)\cdot k</math></col>
<col>
<math>\exists (k&amp;gt;0), n_0 : \forall (n&amp;gt;n_0) \; |g(n)\cdot k| \leq |f(n)|</math></col>
</row>
<row>
<col>
<math>f(n) \in \Theta(g(n))</math></col>
<col width="100pt">
Big Theta</col>
<col width="190pt">
<math>f</math> is bounded both above and below by <math>g</math> asymptotically</col>
<col>
<math>g(n)\cdot k_1 \leq f(n) \leq g(n)\cdot k_2</math></col>
<col>
<math>\exists (k_1,k_2&amp;gt;0), n_0 : \forall (n&amp;gt;n_0) \; |g(n)\cdot k_1| &amp;lt; |f(n)| &amp;lt; |g(n)\cdot k_2| </math></col>
</row>
<row>
<col>
<math>f(n) \in o(g(n))</math></col>
<col width="100pt">
Small Omicron; Small O; Small Oh</col>
<col width="190pt">
<math>f</math> is dominated by <math>g</math> asymptotically</col>
<col>
<math>f(n) &amp;lt; g(n)\cdot k</math></col>
<col>
<math>\forall (k&amp;gt;0),\exists n_0 : \forall(n&amp;gt;n_0) \; |f(n)| &amp;lt; |g(n)\cdot k|</math></col>
</row>
<row>
<col>
<math>f(n) \in \omega(g(n))</math></col>
<col width="100pt">
Small Omega</col>
<col width="190pt">
<math>f</math> dominates <math>g</math> asymptotically</col>
<col>
<math>f(n) &amp;gt; g(n)\cdot k</math></col>
<col>
<math>\forall (k&amp;gt;0),\exists n_0 : \forall(n&amp;gt;n_0) \; |g(n)\cdot k| &amp;lt; |f(n)|</math></col>
</row>
<row>
<col>
<math>f(n)</math> ~ <math>g(n)</math></col>
<col width="100pt">
on the order of</col>
<col width="190pt">
<math>f</math> is equal to <math>g</math> asymptotically</col>
<col>
<math>f(n)</math> ~ <math>g(n)\cdot k</math></col>
<col>
<math>\lim_{n \to \infty} \frac{f(n)}{g(n)} = k</math></col>
</row>
</table>
</p>
<p>

Bachmann-Landau notation was designed around several <link xlink:type="simple" xlink:href="../411/40411.xml">
mnemonic</link>s, as shown in the <it>As <math> n \to \infty</math>, eventually...</it> column above and in the bullets below. To conceptually access these mnemonics, "omicron" can be read "o-<it>micro</it>n" and "omega" can be read "o-<it>mega</it>". Also, the lower-case versus capitalization of the Greek letters in Bachmann-Landau notation is mnemonic.
<list>
<entry level="1" type="bullet">

 the <it>o-</it>'micro<b>n mnemonic<it>: The o-</it></b><b>micro<it>n reading of <math>f(n) \in O(g(n))</math> and of <math>f(n) \in o(g(n))</math>  can be thought of as "O-</it></b><b>smaller than<it>" and "o-</it></b><b>smaller than<it>", respectively.  This </it></b><b>micro<it>/smaller mnemonic refers to: for sufficiently large input parameter(s), <math>f</math> grows at a rate that may henceforth be </it></b><it>less</it>' than <math>cg</math> regarding <math>g \in O(f)</math> or <math>g \in o(f)</math>.</entry>
<entry level="1" type="bullet">

 the <it>o-</it>'mega<b> mnemonic<it>: The o-</it></b><b>mega<it> reading of <math>f(n) \in \Omega(g(n))</math> and of <math>f(n) \in \omega(g(n))</math> can be thought of as "O-</it></b><b>larger than<it>" and "o-</it></b><b>larger than<it>", respectively.  This </it></b><b>mega<it>/larger mnemonic refers to: for sufficiently large input parameter(s), <math>f</math> grows at a rate that may henceforth be </it></b><it>greater</it>' than <math>cg</math> regarding <math>g \in \Omega(f)</math> or <math>g \in \omega(f)</math>.</entry>
<entry level="1" type="bullet">

 the <b><it>upper</it></b><it>-case mnemonic</it>: This mnemonic reminds us when to use the upper-case Greek letters in <math>f(n) \in O(g(n))</math> and <math>f(n) \in \Omega(g(n))</math>:  for sufficiently large input parameter(s), <math>f</math> grows at a rate that may henceforth be <b>equal</b> to <math>cg</math> regarding <math>g \in O(f)</math>.</entry>
<entry level="1" type="bullet">

 the <b><it>lower</it></b><it>-case mnemonic</it>: This mnemonic reminds us when to use the lower-case Greek letters in <math>f(n) \in o(g(n))</math> and <math>f(n) \in \omega(g(n))</math>:  for sufficiently large input parameter(s), <math>f</math> grows at a rate that is henceforth <b>inequal</b> to <math>cg</math> regarding <math>g \in O(f)</math>.</entry>
</list>
</p>
<p>

Aside from Big <it>O</it> notation, the Big Theta <it>Θ</it> and Big Omega <it>Ω</it> notations are the two most often used in computer science; the Small Omega ω notation is rarely used in computer science.</p>
<p>

Informally, especially in computer science, the Big <it>O</it> notation often is permitted to be somewhat abused to describe an asymptotic tight bound where using Big Theta <it>Θ</it> notation might be more factually appropriate in a given context. For example, when considering a function <math>T(n) = 73n^3 + 22n^2 + 58</math>, all of the following are generally acceptable, but tightnesses of bound (i.e., bullets 2 and 3 below) are usually strongly preferred over laxness of bound (i.e., bullet 1 below).</p>
<p>

<list>
<entry level="1" type="number">

<math>T(n) = O(n^{100})</math>, which is identical to <math>T(n) \in O(n^{100})</math></entry>
<entry level="1" type="number">

<math>T(n) = O(n^3)</math>, which is identical to <math>T(n) \in O(n^3) </math></entry>
<entry level="1" type="number">

<math>T(n) = \Theta (n^3)</math>, which is identical to <math>T(n) \in \Theta (n^3) </math></entry>
</list>
</p>
<p>

The equivalent English statements are respectively:</p>
<p>

<list>
<entry level="1" type="number">

<math>T(n)</math> grows asymptotically as fast or more slowly than <math>n^{100}</math></entry>
<entry level="1" type="number">

<math>T(n)</math> grows asymptotically as fast or more slowly than <math>n^3</math></entry>
<entry level="1" type="number">

<math>T(n)</math> grows asymptotically as fast as <math>n^3</math></entry>
</list>
</p>
<p>

So while all three statements are true, progressively more information is contained in each. In some fields, however, the Big O notation (bullets number 2 in the lists above) would be used more commonly than the Big Theta notation (bullets number 3 in the lists above) because functions that grow more slowly are more desirable. For example, if <math>T(n)</math> represents the running time of a newly developed algorithm for input size <math>n</math>, the inventors and users of the algorithm might be more inclined to put an upper asymptotic bound on how long it will take to run without making an explicit statement about the lower asymptotic bound.</p>

</ss1>
<ss1>
<st>
 Extensions to the Bachmann-Landau notations </st>
<p>

Another notation sometimes used in computer science is Õ (read <it>soft-O</it>).  <math>f(n) = \tilde{O} (g(n))</math> is shorthand
for <math>f(n) = O(g(n) \log^kg(n))</math> for some <it>k</it>. Essentially, it is Big O notation, ignoring logarithmic factors because the growth-rate effects of some other super-logarithmic function indicate a growth-rate explosion for large-sized input parameters that is more important to predicting bad run-time performance than the finer-point effects contributed by the logarithmic-growth factor(s). This notation is often used to obviate the "nitpicking" within growth-rates that are stated as too tightly bounded for the matters at hand (since <math>\log^kn</math> is always <math>o(n^\epsilon)</math> for any constant <math>k</math> and any <math>\epsilon&amp;gt;0</math>).</p>
<p>

The <link xlink:type="simple" xlink:href="../119/2811119.xml">
L</link> notation, defined as</p>
<p>

<indent level="1">

<math>L_n[\alpha,c]=O\left(e^{(c+o(1))(\ln n)^\alpha(\ln\ln n)^{1-\alpha}}\right)</math>,
</indent>

is convenient for functions that are between polynomial and exponential.</p>

</ss1>
</sec>
<sec>
<st>
 Multiple variables </st>
<p>

Big O (and little o, and Ω...) can also be used with multiple variables. </p>
<p>

To define Big O formally for multiple variables, suppose <math>f(\vec{x})</math> and <math>g(\vec{x})</math> are two functions defined on some subset of <math>\mathbb{R}^n</math>. We say</p>
<p>

<indent level="1">

<math>f(\vec{x})\mbox{ is }O(g(\vec{x}))\mbox{ as }\vec{x}\to\infty</math>
</indent>
<link xlink:type="simple" xlink:href="../922/14922.xml">
if and only if</link>
<indent level="1">

<math>\exists \;C,\exists \;M&amp;gt;0\mbox{ such that } |f(\vec{x})| \le \; M |g(\vec{x})|\mbox{ for all }\vec{x} \mbox{ with } x_i&amp;gt;C \mbox{ for all }i.</math>
</indent>

For example, the statement</p>
<p>

<indent level="1">

<math>f(n,m) = n^2 + m^3 + \hbox{O}(n+m) \mbox{ as } n,m\to\infty</math>
</indent>

asserts that there exist constants <it>C</it> and <it>M</it> such that
<indent level="1">

<math>\forall n, m&amp;gt;M: |g(n,m)| \le C(n+m).</math>
</indent>
where <it>g</it>(<it>n</it>,<it>m</it>) is defined by
<indent level="1">

<math>\displaystyle f(n,m) = n^2 + m^3 + g(n,m).</math>
</indent>

Note that this definition allows all of the coordinates of <math>\vec{x}</math> to increase to infinity. In particular, the statement</p>
<p>

<indent level="1">

<math>f(n,m) = \hbox{O}(n^m) \mbox{ as } n,m\to\infty</math>
</indent>

(i.e. <math>\exists C \exists M \forall n \forall m...</math>) is quite different from</p>
<p>

<indent level="1">

<math>\forall m: f(n,m) = \hbox{O}(n^m) \mbox{ as } n\to\infty</math>
</indent>
(i.e. <math>\forall m \exists C \exists M \forall n...</math>).</p>

</sec>
<sec>
<st>
Graph theory</st>
<p>

It is often useful to bound the running time of <link xlink:type="simple" xlink:href="../806/325806.xml">
graph</link> algorithms. Unlike most other computational problems, for a graph <it>G</it> = (<it>V</it>, <it>E</it>) there are two relevant parameters describing the size of the input: the number |<it>V</it>| of vertices in the graph and the number |<it>E</it>| of edges in the graph. Inside <link xlink:type="simple" xlink:href="../107/3107.xml">
asymptot</link>ic notation (and only there), it is common to use the symbols <it>V</it> and <it>E</it>, when someone really means |<it>V</it>| and |<it>E</it>|. We adopt this convention here to simplify asymptotic functions and make them easily readable. The symbols <it>V</it> and <it>E</it> are never used inside asymptotic notation with their literal meaning, so this abuse of notation does not risk ambiguity. For example <math>O(E + V \log V)</math> means <math>O((E,V) \mapsto |E| + |V|\cdot\log|V|)</math> for a suitable metric of graphs.  Another common convention—referring to the values |<it>V</it>| and |<it>E</it>| by the names <it>n</it> and <it>m</it>, respectively—sidesteps this ambiguity.</p>

</sec>
<sec>
<st>
Generalizations and related usages</st>
<p>

The generalization to functions taking values in any <link xlink:type="simple" xlink:href="../538/21538.xml">
normed vector space</link> is straightforward (replacing absolute values by norms), where <it>f</it> and <it>g</it> need not take their values in the same space. A generalization to functions <it>g</it> taking values in any <link xlink:type="simple" xlink:href="../315/42315.xml">
topological group</link> is also possible.</p>
<p>

The "limiting process" <it>x→xo</it> can also be generalized by introducing an arbitrary <link>
filter base</link>, i.e. to directed <link xlink:type="simple" xlink:href="../170/22170.xml">
net</link>s <it>f</it> and <it>g</it>.</p>
<p>

The <it>o</it> notation can be used to define <link xlink:type="simple" xlink:href="../921/7921.xml">
derivative</link>s and <link xlink:type="simple" xlink:href="../921/7921.xml">
differentiability</link> in quite general spaces, and also (asymptotical) equivalence of functions,
<indent level="1">

<math> f\sim g \iff (f-g) \in o(g) </math>
</indent>
which is an <link xlink:type="simple" xlink:href="../259/9259.xml">
equivalence relation</link> and a more restrictive notion than the relationship "<it>f</it> is <it>Θ</it>(<it>g</it>)" from above. (It reduces to <math>\lim f/g = 1</math> if <it>f</it> and <it>g</it> are positive real valued functions.)  For example, 2<it>x</it> is <it>Θ</it>(<it>x</it>), but 2<it>x</it>&nbsp;&amp;minus;&nbsp;<it>x</it> is not <it>o</it>(<it>x</it>).</p>

</sec>
<sec>
<st>
See also</st>


<p>

<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../090/642090.xml">
Asymptotic expansion</link>: Approximation of functions generalizing Taylor's formula</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../619/3287619.xml">
Asymptotically optimal</link>: A phrase frequently used to describe an algorithm that has an upper bound asymptotically within a constant of a lower bound for the problem</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../369/1934369.xml">
Hardy notation</link>: A different asymptotic notation</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../837/44837.xml">
Limit superior and limit inferior</link>: An explanation of some of the limit notation used in this article</entry>
<entry level="1" type="bullet">

 <statement wordnetid="106722453" confidence="0.8">
<message wordnetid="106598915" confidence="0.8">
<theorem wordnetid="106752293" confidence="0.8">
<proposition wordnetid="106750804" confidence="0.8">
<link xlink:type="simple" xlink:href="../361/4081361.xml">
Nachbin's theorem</link></proposition>
</theorem>
</message>
</statement>
: A precise way of bounding <link xlink:type="simple" xlink:href="../759/5759.xml">
complex analytic</link> functions so that the domain of convergence of <link xlink:type="simple" xlink:href="../912/430912.xml">
integral transform</link>s can be stated</entry>
</list>
</p>

</sec>
<sec>
<st>
 References </st>

<p>

<reflist>
<entry id="1">
<link xlink:type="simple" xlink:href="../004/10011004.xml">
Nicholas J. Higham</link>, <it>Handbook of writing for the mathematical sciences</it>, SIAM. ISBN 0898714206, p. 25</entry>
<entry id="2">
Kurt Mehlhorn and Stefan Naher, "Bounded ordered dictionaries in O(log log N) time and O(n) space", Information Processing Letters (1990).</entry>
</reflist>
</p>

</sec>
<sec>
<st>
 Further reading </st>
<p>

<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../951/641951.xml">
Paul Bachmann</link>. <it>Die Analytische Zahlentheorie. Zahlentheorie</it>. pt. 2 Leipzig: B. G. Teubner, 1894.</entry>
<entry level="1" type="bullet">

 <scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../230/222230.xml">
Edmund Landau</link></scientist>
. <it>Handbuch der Lehre von der Verteilung der Primzahlen</it>. 2 vols. Leipzig: B. G. Teubner, 1909.</entry>
<entry level="1" type="bullet">

 <scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../599/87599.xml">
G. H. Hardy</link></scientist>
. <it>Orders of Infinity: The 'Infinitärcalcül' of Paul du Bois-Reymond</it>, 1910.</entry>
<entry level="1" type="bullet">

 <link>
Marian Slodicka</link> (Slodde vo de maten) &amp; Sandy Van Wontergem. <it>Mathematical Analysis I</it>. University of Ghent, 2004.</entry>
<entry level="1" type="bullet">

 <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../095/8095.xml">
Donald Knuth</link></scientist>
</person>
. <it><weblink xlink:type="simple" xlink:href="http://doi.acm.org/10.1145/1008328.1008329">
Big Omicron and big Omega and big Theta</weblink></it>, ACM SIGACT News, Volume 8, Issue 2, 1976.</entry>
<entry level="1" type="bullet">

 <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../095/8095.xml">
Donald Knuth</link></scientist>
</person>
. <it>The Art of Computer Programming</it>, Volume 1: <it>Fundamental Algorithms</it>, Third Edition. Addison-Wesley, 1997. ISBN 0-201-89683-4. Section 1.2.11: Asymptotic Representations, pp.107&ndash;123.</entry>
<entry level="1" type="bullet">

 <scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../475/4108475.xml">
Thomas H. Cormen</link></scientist>
, <scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../884/1400884.xml">
Charles E. Leiserson</link></scientist>
, <link xlink:type="simple" xlink:href="../057/68057.xml">
Ronald L. Rivest</link>, and <scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../993/3489993.xml">
Clifford Stein</link></scientist>
. <it><work wordnetid="104599396" confidence="0.8">
<product wordnetid="104007894" confidence="0.8">
<creation wordnetid="103129123" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<book wordnetid="106410904" confidence="0.8">
<publication wordnetid="106589574" confidence="0.8">
<link xlink:type="simple" xlink:href="../226/3499226.xml">
Introduction to Algorithms</link></publication>
</book>
</artifact>
</creation>
</product>
</work>
</it>, Second Edition. MIT Press and McGraw-Hill, 2001. ISBN 0-262-03293-7. Section 3.1: Asymptotic notation, pp.41–50.</entry>
<entry level="1" type="bullet">

  <cite style="font-style:normal" class="book"><physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<mathematician wordnetid="110301261" confidence="0.8">
<link xlink:type="simple" xlink:href="../015/3644015.xml">
Michael Sipser</link></mathematician>
</scientist>
</causal_agent>
</person>
</physical_entity>
&#32;(1997). Introduction to the Theory of Computation.&#32;PWS Publishing. ISBN 0-534-94728-X.</cite>&nbsp; Pages 226–228 of section 7.1: Measuring complexity.</entry>
<entry level="1" type="bullet">

 Jeremy Avigad, Kevin Donnelly. <it><weblink xlink:type="simple" xlink:href="http://www.andrew.cmu.edu/~avigad/Papers/bigo.pdf">
Formalizing O notation in Isabelle/HOL</weblink>''</it></entry>
<entry level="1" type="bullet">

 Paul E. Black,  <weblink xlink:type="simple" xlink:href="http://www.nist.gov/dads/HTML/bigOnotation.html">
"big-O notation"</weblink>, in <it>Dictionary of Algorithms and Data Structures</it> [online], Paul E. Black, ed., U.S. National Institute of Standards and Technology. 11 March 2005. Retrieved December 16, 2006.</entry>
<entry level="1" type="bullet">

 Paul E. Black, <weblink xlink:type="simple" xlink:href="http://www.nist.gov/dads/HTML/littleOnotation.html">
"little-o notation"</weblink>, in <it>Dictionary of Algorithms and Data Structures</it> [online], Paul E. Black, ed., U.S. National Institute of Standards and Technology. 17 December 2004. Retrieved December 16, 2006.</entry>
<entry level="1" type="bullet">

 Paul E. Black, <weblink xlink:type="simple" xlink:href="http://www.nist.gov/dads/HTML/omegaCapital.html">
"Ω"</weblink>, in <it>Dictionary of Algorithms and Data Structures</it> [online], Paul E. Black, ed., U.S. National Institute of Standards and Technology. 17 December 2004. Retrieved December 16, 2006.</entry>
<entry level="1" type="bullet">

 Paul E. Black, <weblink xlink:type="simple" xlink:href="http://www.nist.gov/dads/HTML/omega.html">
"ω"</weblink>, in <it>Dictionary of Algorithms and Data Structures</it> [online], Paul E. Black, ed., U.S. National Institute of Standards and Technology. 29 November 2004. Retrieved December 16, 2006.</entry>
<entry level="1" type="bullet">

 Paul E. Black, <weblink xlink:type="simple" xlink:href="http://www.nist.gov/dads/HTML/theta.html">
"Θ"</weblink>, in <it>Dictionary of Algorithms and Data Structures</it> [online], Paul E. Black, ed., U.S. National Institute of Standards and Technology. 17 December 2004. Retrieved December 16, 2006.</entry>
</list>
</p>

</sec>
<sec>
<st>
 External links </st>
<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.soe.ucsc.edu/classes/cmps102/Spring04/TantaloAsymp.pdf">
Introduction to Asymptotic Notations</weblink></entry>
</list>
</p>


</sec>
</bdy>
</article>
