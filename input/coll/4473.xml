<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 15:22:33[mciao0827] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<generic  confidence="0.9508927676800064" wordnetid="107899976">
<stevedore  confidence="0.9511911446218017" wordnetid="110655169">
<header>
<title>BIOS</title>
<id>4473</id>
<revision>
<id>244420265</id>
<timestamp>2008-10-10T18:41:35Z</timestamp>
<contributor>
<username>Ohconfucius</username>
<id>736651</id>
</contributor>
</revision>
<categories>
<category>Boot loaders</category>
<category>BIOS</category>
</categories>
</header>
<bdy>
<template>
<name>Infobox Computer Hardware Generic</name>
<parameters>

<image width="150px" src="AwardBIOS_CMOS_Setup_Utility.png">
<caption>

Phoenix AwardBIOS CMOS (<link xlink:type="simple" xlink:href="../629/780629.xml">
non-volatile memory</link>) Setup utility on a standard PC
</caption>
</image>
<class-name>
Stored on</class-name>
<manuf2>
<company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../669/4248669.xml">
Insyde Software</link></company>
</manuf2>
<manuf1>
<company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../819/1265819.xml">
American Megatrends</link></company>
</manuf1>
<class1>
<link xlink:type="simple" xlink:href="../716/49716.xml">
PROM</link></class1>
<class2>
<link xlink:type="simple" xlink:href="../333/73333.xml">
EPROM</link></class2>
<name>
BIOS:</name>
<class3>
<link xlink:type="simple" xlink:href="../595/50595.xml">
Flash memory</link></class3>
<manuf4>
<generic wordnetid="107899976" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../473/Form_4473.xml#xpointer(//*[./st=%22The+BIOS+business%22])">
Others</link></generic>
</manuf4>
<manuf3>
<company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../470/3031470.xml">
Phoenix Technologies</link></company>
</manuf3>
</parameters>
</template>


For other uses, see <link xlink:type="simple" xlink:href="../426/692426.xml">
Bios</link>. 

<p>

In <link xlink:type="simple" xlink:href="../213/5213.xml">
computing</link>, the <b>BIOS</b> (pronounced ) is an <link xlink:type="simple" xlink:href="../571/1052571.xml">
acronym</link> that stands for the Basic Input/Output System.</p>
<p>

BIOS in part refers to the <link xlink:type="simple" xlink:href="../155/41155.xml">
firmware code</link> run by a <link xlink:type="simple" xlink:href="../137/18457137.xml">
PC</link> when first powered on, which is a type of <link xlink:type="simple" xlink:href="../909/40909.xml">
boot loader</link>. The primary function of the BIOS is to identify and initialize system component hardware (such as the video display card, <link xlink:type="simple" xlink:href="../777/13777.xml">
hard disk</link>, and <link xlink:type="simple" xlink:href="../891/10891.xml">
floppy disk</link>) and some other hardware devices. This is to prepare the machine into a known low capability state, so other <link xlink:type="simple" xlink:href="../309/5309.xml">
software programs</link> stored on various media can be loaded, executed, and given control of the PC.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref> This process is known as booting, or booting up, which is short for <link xlink:type="simple" xlink:href="../679/6885679.xml">
bootstrapping</link>. Among other classes of computers, the generic terms <it><link xlink:type="simple" xlink:href="../764/149764.xml">
boot monitor</link></it>, <it><link xlink:type="simple" xlink:href="../909/40909.xml">
boot loader</link></it> or <it><link xlink:type="simple" xlink:href="../909/40909.xml">
boot ROM</link></it> were commonly used. Some Sun and Macintosh PowerPC computers used  <standard wordnetid="107260623" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../452/209452.xml">
Open Firmware</link></system_of_measurement>
</standard>
 for this purpose. There are a few alternatives for Legacy BIOS in the x86 world: <link xlink:type="simple" xlink:href="../065/866065.xml">
Extensible Firmware Interface</link>, <standard wordnetid="107260623" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../452/209452.xml">
Open Firmware</link></system_of_measurement>
</standard>
 (used on the <computer wordnetid="103082979" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<machine wordnetid="103699975" confidence="0.8">
<link xlink:type="simple" xlink:href="../236/11778236.xml">
OLPC XO-1</link></machine>
</device>
</instrumentality>
</artifact>
</computer>
) and <link xlink:type="simple" xlink:href="../246/1556246.xml">
coreboot</link>.</p>
<p>

The BIOSes of <link xlink:type="simple" xlink:href="../032/15032.xml">
IBM PC</link> class machines can also be said to be a coded program embedded on a chip that recognizes and controls various devices that make up <link xlink:type="simple" xlink:href="../198/34198.xml">
x86</link> personal computers, and provides a small library of basic Input/Output functions that can be called to operate and control the peripherals such as the keyboard, primitive (800 x 600) display functions and so forth. Computers designed to run <link xlink:type="simple" xlink:href="../458/75458.xml">
Windows ME</link> or <version wordnetid="107173585" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../941/33941.xml">
Windows 2000</link></version>
, or later, supersede this basic monitor functionality by taking over direct control of the <link xlink:type="simple" xlink:href="../859/3877859.xml">
interrupt table</link> and replacing the monitor routines with faster and more robust low-level modules that, unlike the BIOS function set, are <link xlink:type="simple" xlink:href="../851/154851.xml">
re-entrant</link>. Various BIOS functions in ROM were left in control in earlier Windows versions, and the BIOS only comes into play today in the alternate shell <link xlink:type="simple" xlink:href="../072/1256072.xml">
Cmd.exe</link>, or if the machine is booted into a legacy <link xlink:type="simple" xlink:href="../146/8146.xml">
DOS</link> version.</p>
<p>

The term first appeared in the <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../146/45146.xml">
CP/M</link></O>
 operating system, describing the part of CP/M loaded during boot time that interfaced directly with the <link xlink:type="simple" xlink:href="../310/5310.xml">
hardware</link> (CP/M machines usually had a simple boot loader in <link xlink:type="simple" xlink:href="../934/18934934.xml">
ROM</link>, and nothing else). Most versions of <link xlink:type="simple" xlink:href="../146/8146.xml">
DOS</link> have a file called "<link xlink:type="simple" xlink:href="../071/1444071.xml">
IBMBIO.COM</link>" or "<link xlink:type="simple" xlink:href="../067/1444067.xml">
IO.SYS</link>" that is analogous to the CP/M disk BIOS.</p>
<p>

The term is incorrectly known as <it>Binary Input/Output System</it>, <it>Basic Integrated Operating System</it> and occasionally <it>Built In Operating System</it>.</p>

<sec>
<st>
The BIOS Chip and BIOS Recovery</st>

<p>

<table style="background:transparent; float:right; margin:0 0 .25 .25; ; ">
<row>
<col>
<table align="right" class="wikitable">
<row style="background-color: #efefcc">
<col>
Boot Block</col>
</row>
<row style="background-color: #cccccc">
<col>
DMI Block</col>
</row>
<row style="background-color: #acaccc">
<col>
Main Block</col>
</row>
</table>
</col>
</row>
<row>
<col>
<image width="150px" src="Phoenix_bios.jpg" type="thumb">
<caption>

ROM with BIOS
</caption>
</image>
</col>
</row>
</table>

Prior to the early 1990s, BIOSes were stored in <link xlink:type="simple" xlink:href="../934/18934934.xml">
ROM</link> or <link xlink:type="simple" xlink:href="../716/49716.xml">
PROM</link> chips, which could not be altered by users. As its complexity and need for updates grew, and re-programmable parts became more available, BIOS firmware was most commonly stored on <link xlink:type="simple" xlink:href="../597/50597.xml">
EEPROM</link> or <link xlink:type="simple" xlink:href="../595/50595.xml">
flash memory</link> devices. According to Robert Braver, the president of the BIOS manufacturer Micro Firmware, <b>Flash BIOS</b> chips became common around 1995 because the electrically erasable PROM (EEPROM) chips are cheaper and easier to program than standard erasable PROM (EPROM) chips. PROM chips may be erased by prolonged exposure to ultraviolet light, which accessed the chip via the window. Chip manufacturers use PROM blasters to reprogram EPROM chips. EEPROM chips come with the additional feature of allowing a BIOS reprogramming via higher-than-normal amounts of voltage.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%222%22])">2</ref> BIOS versions are upgraded to take advantage of newer versions of hardware and to correct bugs in previous revisions of BIOSes.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%223%22])">3</ref></p>
<p>

The first flash chips attached to the <link xlink:type="simple" xlink:href="../029/15029.xml">
ISA bus</link>. Starting in 1997, the BIOS flash moved to the <link xlink:type="simple" xlink:href="../886/1918886.xml">
LPC</link> bus, a functional replacement for ISA, following a new standard implementation known as "firmware hub" (FWH). Most BIOS revisions created in 1995 and nearly all BIOS revisions in 1997 supported <link xlink:type="simple" xlink:href="../256/18589256.xml">
the year 2000</link>.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%224%22])">4</ref> In 2006, the first systems supporting a <link xlink:type="simple" xlink:href="../476/340476.xml">
Serial Peripheral Interface</link> (SPI) appeared, and the BIOS flash moved again.</p>
<p>

EEPROM chips are advantageous because they can be easily updated by the user; hardware manufacturers frequently issue BIOS updates to upgrade their products, improve compatibility and remove <invertebrate wordnetid="101905661" confidence="0.8">
<arthropod wordnetid="101767661" confidence="0.8">
<bug wordnetid="102236355" confidence="0.8">
<insect wordnetid="102159955" confidence="0.8">
<animal wordnetid="100015388" confidence="0.8">
<link xlink:type="simple" xlink:href="../085/37085.xml">
bugs</link></animal>
</insect>
</bug>
</arthropod>
</invertebrate>
. However, this advantage had the risk that an improperly executed or aborted BIOS update could render the computer or device unusable. To avoid these situations, more recent BIOSes use a "boot block"; a portion of the BIOS which runs first and must be updated separately. This code verifies if the rest of the BIOS is intact (using <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../790/13790.xml">
hash</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
 <link xlink:type="simple" xlink:href="../538/7538.xml">
checksum</link>s or other methods) before transferring control to it. If the boot block detects any corruption in the main BIOS, it will typically warn the user that a recovery process must be initiated by booting from <link xlink:type="simple" xlink:href="../100/347100.xml">
removable media</link> (floppy, CD or USB memory) so the user can try <link>
flashing the BIOS</link> again. Some <link xlink:type="simple" xlink:href="../945/19945.xml">
motherboard</link>s have a <it>backup</it> BIOS (sometimes referred to as DualBIOS boards) to recover from BIOS corruptions. In 2007, <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../972/1410972.xml">
Gigabyte</link></company>
 began offering motherboards with a QuadBIOS recovery feature.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%225%22])">5</ref> </p>
<p>

There was at least one virus named <link xlink:type="simple" xlink:href="../669/312669.xml">
CIH</link> (also known as "Chernobyl Virus") which was able to erase Flash ROM BIOS content, rendering computer systems unusable. Affected systems often can't be fixed on their own since they're no longer able to boot. In such scenario Flash ROM IC should be ejected from motherboard and reprogrammed somewhere else. Mass damage from <link xlink:type="simple" xlink:href="../669/312669.xml">
CIH</link> virus has been possible because of most motherboards in the ages of CIH "popularity" used same chip set, Intel TX and most common operating systems like <version wordnetid="107173585" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../064/34064.xml">
Windows 95</link></version>
 allowed direct hardware access to all programs. Modern systems are not vulnerable to <link xlink:type="simple" xlink:href="../669/312669.xml">
CIH</link> because of numerous and different chip sets used (which are incompatible with Intel TX chip set), another Flash ROM IC types, there is also extra protections from accidental BIOS rewrites and either boot blocks which are protected from accidental overwrite even more or dual BIOS used so in case of crash, second BIOS getting used. Also all modern operating systems like <version wordnetid="107173585" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../879/33879.xml">
Windows XP</link></version>
, <version wordnetid="107173585" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../648/2289648.xml">
Windows Vista</link></version>
, <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../297/6097297.xml">
Linux</link></O>
 just do not allow direct hardware access to usual non-privileged programs. So, as of year 2008 <link xlink:type="simple" xlink:href="../669/312669.xml">
CIH</link> became almost harmless and at very most just bothers users by infecting executable files without being able to cause any real harm and only toggling numerous virus alerts from antivirus software.</p>
<p>

The size of the BIOS, and the capacities of the ROM, EEPROM and other media it may be stored on, has increased over time as new features have been added to the code; BIOS versions now exist with sizes up to 8 megabytes. Some modern motherboards are including even bigger NAND <link xlink:type="simple" xlink:href="../595/50595.xml">
Flash ROM</link> ICs on board which are capable of storing whole compact operating system distribution like some <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../297/6097297.xml">
Linux</link></O>
 distributions. For example, some recent ASUS motherboards including <link xlink:type="simple" xlink:href="../776/13621776.xml">
SplashTop</link> Linux embedded into their NAND <link xlink:type="simple" xlink:href="../595/50595.xml">
Flash ROM</link> ICs.</p>

</sec>
<sec>
<st>
Firmware on adapter cards</st>
<p>

A computer system can contain several BIOS firmware chips. The motherboard BIOS typically contains code to access fundamental hardware components such as the keyboard, <link xlink:type="simple" xlink:href="../891/10891.xml">
floppy drive</link>s, ATA (IDE) hard disk controllers, <bus wordnetid="102924116" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../073/32073.xml">
USB</link></bus>
 human interface devices, and storage devices. In addition, plug-in adapter cards such as <link xlink:type="simple" xlink:href="../313/28313.xml">
SCSI</link>, <link xlink:type="simple" xlink:href="../695/54695.xml">
RAID</link>, <link xlink:type="simple" xlink:href="../613/243613.xml">
Network interface card</link>s, and video boards often include their own BIOS, complementing or replacing the system BIOS code for the given component.</p>
<p>

In some devices that can be used by add-in adapters and actually directly integrated on the motherboard, the add-in ROM may also be stored as separate code on the main BIOS flash chip. It may then be possible to upgrade this "add-in" BIOS (sometimes called an <link xlink:type="simple" xlink:href="../857/1766857.xml">
option ROM</link>) separately from the main BIOS code.</p>
<p>

Add-in cards usually only require such an add-in BIOS if they: 
<list>
<entry level="1" type="bullet">

 Need to be used prior to the time that the operating system loads (e.g. they may be used as part of the process which loads (<link xlink:type="simple" xlink:href="../909/40909.xml">
bootstraps</link>) the operating system), and:</entry>
<entry level="1" type="bullet">

 Are not sufficiently simple, or generic in operation to be handled by the main BIOS directly</entry>
</list>
</p>
<p>

<link xlink:type="simple" xlink:href="../137/18457137.xml">
PC</link> <link xlink:type="simple" xlink:href="../194/22194.xml">
operating system</link>s such as <link xlink:type="simple" xlink:href="../146/8146.xml">
DOS</link>, including all DOS-based versions of MS Windows, as well as bootloaders, may continue to make use of the BIOS to handle input and output. However, other modern operating systems will interact with hardware devices directly by using their own <link xlink:type="simple" xlink:href="../101/9101.xml">
device driver</link>s to directly access the hardware. Occasionally these add-in BIOSs are still called by these operating systems, in order to carry out specific tasks such as preliminary device initialization.</p>
<p>

To find these memory mapped expansion ROMs during the boot process, PC BIOS implementations scan real memory from 0xC0000 to 0xF0000 on 2 <link xlink:type="simple" xlink:href="../967/146967.xml">
kibi</link>byte boundaries looking for the ROM <it>signature</it> bytes of 55h followed by AAh (0xAA55). For a valid expansion ROM, its signature is immediately followed by a single byte indicating the number of 512-byte blocks it occupies in real memory. The BIOS then jumps to the offset located immediately after this size byte; at which point the expansion ROM code takes over, using the BIOS services to register <link xlink:type="simple" xlink:href="../036/1303036.xml">
interrupt vector</link>s for use by post-boot applications and provide a user configuration interface, or display diagnostic information.</p>
<p>

There are many methods and utilities for dumping the contents of various motherboard BIOS and expansion ROMs. Under a Microsoft OS, <link xlink:type="simple" xlink:href="../934/5334934.xml">
DEBUG</link> can be used to examine 64 KiB segments of memory and save the contents to a file. For UNIX systems the <link xlink:type="simple" xlink:href="../682/548682.xml">
dd</link> command can be used by a user with root privileges: "dd if=/dev/mem bs=1k skip=768 count=256 2&amp;gt;/dev/null | strings -n 8".</p>

</sec>
<sec>
<st>
The BIOS boot specification</st>
<p>

If the expansion ROM wishes to change the way the system boots (such as from a network device or a SCSI adapter for which the BIOS has no driver code), it can use the <it>BIOS Boot Specification</it> (BBS) <link xlink:type="simple" xlink:href="../ury/24th_century.xml">
API</link> to register its ability to do so. Once the expansion ROMs have registered using the BBS APIs, the user can select among the available boot options from within the BIOSes user interface. This is why most BBS compliant PC BIOS implementations will not allow the user to enter the BIOS's user interface until the expansion ROMs have finished executing and registering themselves with the BBS API.
BIOS is a coded.</p>

</sec>
<sec>
<st>
Development of the role of the BIOS</st>
<p>

Some <link xlink:type="simple" xlink:href="../194/22194.xml">
operating system</link>s, for example <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../027/20027.xml">
MS-DOS</link></O>
, rely on the BIOS to carry out most input/output tasks within the PC.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%226%22])">6</ref> A variety of technical reasons makes it inefficient for some recent operating systems written for <link xlink:type="simple" xlink:href="../733/80733.xml">
32-bit</link> CPUs such as <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../297/6097297.xml">
Linux</link></O>
 and <link xlink:type="simple" xlink:href="../890/18890.xml">
Microsoft Windows</link> to invoke the BIOS directly. Larger, more powerful, servers and workstations using <link xlink:type="simple" xlink:href="../281/24281.xml">
PowerPC</link> or <link xlink:type="simple" xlink:href="../954/36954.xml">
SPARC</link> CPUs by several manufacturers developed a platform-independent <standard wordnetid="107260623" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../452/209452.xml">
Open Firmware</link></system_of_measurement>
</standard>
 (IEEE-1275), based on the <link xlink:type="simple" xlink:href="../012/11012.xml">
Forth</link> programming language. It is included with Sun's SPARC computers, IBM's <link xlink:type="simple" xlink:href="../116/5854116.xml">
RS/6000</link> line, and other PowerPC <link xlink:type="simple" xlink:href="../433/861433.xml">
CHRP</link> motherboards. Later x86-based personal computer operating systems, like Windows NT, use their own, native drivers which also makes it much easier to extend support to new hardware, while the BIOS still relies on a legacy 16-bit runtime interface. As such, the BIOS was relegated to <link xlink:type="simple" xlink:href="../679/6885679.xml">
bootstrapping</link>, at which point the operating system's own drivers can take control of the hardware.  </p>
<p>

There was a similar transition for the Apple Macintosh, where the system software originally relied heavily on the <link xlink:type="simple" xlink:href="../398/861398.xml">
ToolBox</link>—a set of drivers and other useful routines stored in ROM based on Motorola's 680x0 CPUs. These Apple ROMs were replaced by Open Firmware in the <link xlink:type="simple" xlink:href="../281/24281.xml">
PowerPC</link> <link xlink:type="simple" xlink:href="../979/19006979.xml">
Macintosh</link>, then <link xlink:type="simple" xlink:href="../065/866065.xml">
EFI</link> in Intel Macintosh computers.</p>
<p>

Later BIOS took on more complex functions, by way of interfaces such as <link xlink:type="simple" xlink:href="../697/2432697.xml">
ACPI</link>; these functions include <link xlink:type="simple" xlink:href="../703/273703.xml">
power management</link>, <link xlink:type="simple" xlink:href="../587/287587.xml">
hot swapping</link> and thermal management. However BIOS limitations (16-bit processor mode, only 1 MiB addressable space, PC AT hardware dependencies, etc.) were seen as clearly unacceptable for the newer computer platforms. <link xlink:type="simple" xlink:href="../065/866065.xml">
Extensible Firmware Interface</link> (EFI) is a specification which replaces the runtime interface of the legacy BIOS. Initially written for the Itanium architecture, EFI is now available for <link xlink:type="simple" xlink:href="../198/34198.xml">
x86</link> and <link xlink:type="simple" xlink:href="../374/244374.xml">
x86-64</link> platforms; the specification development is driven by <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../258/2312258.xml">
The Unified EFI Forum</link></company>
, an industry <link xlink:type="simple" xlink:href="../060/318060.xml">
Special Interest Group</link>.  </p>
<p>

Linux has supported EFI via the <link xlink:type="simple" xlink:href="../296/4011296.xml">
elilo</link> boot loader. The Open Source community increased their effort to develop a replacement for proprietary BIOSes and their future incarnations with an open sourced counterpart through the <link xlink:type="simple" xlink:href="../246/1556246.xml">
coreboot</link> and <link xlink:type="simple" xlink:href="../153/5259153.xml">
OpenBIOS</link>/<standard wordnetid="107260623" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../452/209452.xml">
Open Firmware</link></system_of_measurement>
</standard>
 projects. <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../ury/24th_century.xml">
AMD</link></company>
 provided product specifications for some chipsets, and <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../923/1092923.xml">
Google</link></company>
 is sponsoring the project. <generic wordnetid="107899976" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../945/19945.xml">
Motherboard</link></generic>
 manufacturer <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../935/1977935.xml">
Tyan</link></company>
 offers <link xlink:type="simple" xlink:href="../246/1556246.xml">
coreboot</link> next to the standard BIOS with their <chip wordnetid="103020034" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<microprocessor wordnetid="103760310" confidence="0.8">
<conductor wordnetid="103088707" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<semiconductor_device wordnetid="104171831" confidence="0.8">
<link xlink:type="simple" xlink:href="../237/165237.xml">
Opteron</link></semiconductor_device>
</device>
</conductor>
</microprocessor>
</instrumentality>
</artifact>
</chip>
 line of motherboards. <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../245/941245.xml">
MSI</link></company>
 and <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../972/1410972.xml">
Gigabyte</link></company>
 have followed suit with the MSI K9ND MS-9282 and MSI K9SD MS-9185 resp. the M57SLI-S4 models.</p>

</sec>
<sec>
<st>
The BIOS business</st>
<p>

The vast majority of PC motherboard suppliers license a BIOS "core" and toolkit from a commercial third-party, known as an "independent BIOS vendor" or IBV. The motherboard manufacturer then customizes this BIOS to suit its own hardware. For this reason, updated BIOSes are normally obtained directly from the motherboard manufacturer.</p>
<p>

Major BIOS vendors include <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../819/1265819.xml">
American Megatrends</link></company>
 (AMI), General Software, <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../669/4248669.xml">
Insyde Software</link></company>
, and <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../470/3031470.xml">
Phoenix Technologies</link></company>
 (which bought <link xlink:type="simple" xlink:href="../706/17779706.xml">
Award Software International</link> in 1998).</p>

</sec>
<sec>
<st>
See also</st>
<p>

<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../697/2432697.xml">
Advanced Configuration and Power Interface</link> (ACPI)</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../270/1363270.xml">
ARCS</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../909/40909.xml#xpointer(//*[./st=%22BIOS+boot+devices%22])">
BIOS boot devices</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../095/1260095.xml">
BIOS interrupt call</link>s</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../246/1556246.xml">
coreboot</link>, a project whose aim is to create a <link xlink:type="simple" xlink:href="../635/10635.xml">
free</link> replacement for the BIOS</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../065/866065.xml">
Extensible Firmware Interface</link> (EFI)</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../155/41155.xml">
Firmware</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../458/1698458.xml">
Input/Output Base Address</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../928/2117928.xml">
Nonvolatile BIOS memory</link></entry>
<entry level="1" type="bullet">

 <standard wordnetid="107260623" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../452/209452.xml">
Open Firmware</link></system_of_measurement>
</standard>
</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../425/1699425.xml">
Power-On Self Test</link> (POST)</entry>
</list>
</p>

<ss1>
<st>
References</st>

<p>

<list>
<entry level="1" type="bullet">

  <cite style="font-style:normal" class="book">&#32;(Revised March 1983) IBM Personal Computer Technical Reference manual, First Edition,,&#32;IBM Corporation.</cite>&nbsp;</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://computer.howstuffworks.com/bios.htm/printable">
<it>How BIOS Works''</it></weblink> - <it><web_site wordnetid="106359193" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../125/479125.xml">
HowStuffWorks</link></web_site>
''</it></entry>
</list>
</p>


</ss1>
<ss1>
<st>
Footnotes</st>

<p>

<reflist>
<entry id="1">
<weblink xlink:type="simple" xlink:href="http://computer.howstuffworks.com/bios1.htm">
HowStuffWorks: What BIOS Does</weblink>.</entry>
<entry id="2">
"<weblink xlink:type="simple" xlink:href="http://www.smartcomputing.com/editorial/article.asp?article=articles%2F1997%2Fjun97%2F060997%2F060997.asp">
Decoding RAM &amp; ROM </weblink>." <it><link xlink:type="simple" xlink:href="../296/7128296.xml">
Smart Computing</link></it>. June 1997. Volume 8, Issue 6.</entry>
<entry id="3">
"<weblink xlink:type="simple" xlink:href="http://www.smartcomputing.com/editorial/article.asp?article=articles%2F1996%2Fmar96%2F96n0324%2F96n0324.asp">
Upgrading Your Flash BIOS For Plug And Play</weblink>." <it><link xlink:type="simple" xlink:href="../296/7128296.xml">
Smart Computing</link></it>. March 1996. Volume 7, Issue 3.</entry>
<entry id="4">
"<weblink xlink:type="simple" xlink:href="http://www.smartcomputing.com/editorial/article.asp?article=articles/archive/g0704/41u6/41u6.asp&amp;guid=">
Time To Check BIOS</weblink>." <it><link xlink:type="simple" xlink:href="../296/7128296.xml">
Smart Computing</link></it>. April 1999. Volume 7, Issue 4.</entry>
<entry id="5">
"Quad BIOS is a unique GIGABYTE feature that includes DualBIOS and Xpress BIOS Rescue Technology. This combination delivers a safety assurance mechanism that sports a total of 4 copies of BIOS distributed between the Flash ROM, hard-disk and driver CD." <weblink xlink:type="simple" xlink:href="http://www.gigabyte-usa.com/News/Company/News_List.aspx?NewsID=1323">
Gigabyte Corporate News, January 15, 2007</weblink>.</entry>
<entry id="6">
http://www.smartcomputing.com/editorial/article.asp?article=articles%2F1994%2Fjuly94%2Fpcn0713%2Fpcn0713.asp</entry>
</reflist>
</p>


</ss1>
</sec>
</bdy>
</stevedore>
</generic>
</article>
