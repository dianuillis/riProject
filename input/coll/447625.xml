<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 17:04:52[mciao0827] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>Ray casting</title>
<id>447625</id>
<revision>
<id>244077844</id>
<timestamp>2008-10-09T06:30:00Z</timestamp>
<contributor>
<username>SchuminWeb</username>
<id>231595</id>
</contributor>
</revision>
<categories>
<category>3D computer graphics</category>
</categories>
</header>
<bdy>

<b>Ray casting</b> is the use of ray-surface intersection tests to solve a variety of problems in computer graphics. The term was first used in computer graphics in a 1982 paper by Scott Roth to describe a method for rendering <link xlink:type="simple" xlink:href="../499/386499.xml">
CSG</link> models.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref>
<sec>
<st>
Usage</st>
<p>

Ray casting can refer to
<list>
<entry level="1" type="bullet">

 the general problem of determining the first object intersected by a ray,<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%222%22])">2</ref></entry>
<entry level="1" type="bullet">

 a technique for <link xlink:type="simple" xlink:href="../796/469796.xml">
hidden surface removal</link> based on finding the first intersection of a ray cast from the eye through each pixel of an image,</entry>
<entry level="1" type="bullet">

 a non-recursive variant of <link xlink:type="simple" xlink:href="../193/17884193.xml">
ray tracing</link> that only casts primary rays, or</entry>
<entry level="1" type="bullet">

 a direct <link xlink:type="simple" xlink:href="../016/698016.xml">
volume rendering</link> method, also called <link xlink:type="simple" xlink:href="../691/3840691.xml">
volume ray casting</link>.</entry>
</list>
</p>
<p>

Although "ray casting" and "ray tracing" were often used interchangeably in early computer graphics literature<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%223%22])">3</ref>, 
more recent usage tries to distinguish the two.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%224%22])">4</ref></p>

</sec>
<sec>
<st>
Concept</st>

<p>

Ray casting is not a synonym for <link xlink:type="simple" xlink:href="../193/17884193.xml">
ray tracing</link>, but can be thought of as an abridged, and significantly faster, version of the ray tracing algorithm.  Both are <link xlink:type="simple" xlink:href="../099/19717099.xml">
image order</link> algorithms used in <link xlink:type="simple" xlink:href="../210/18567210.xml">
computer graphics</link> to <link xlink:type="simple" xlink:href="../604/6604.xml">
render</link> three dimensional scenes to two dimensional screens by following <organ wordnetid="105297523" confidence="0.8">
<sense_organ wordnetid="105299178" confidence="0.8">
<part wordnetid="109385911" confidence="0.8">
<eye wordnetid="105311054" confidence="0.8">
<body_part wordnetid="105220461" confidence="0.8">
<link xlink:type="simple" xlink:href="../761/3364761.xml">
rays</link></body_part>
</eye>
</part>
</sense_organ>
</organ>
 of <link xlink:type="simple" xlink:href="../939/17939.xml">
light</link> from the <link xlink:type="simple" xlink:href="../849/243849.xml">
eye</link> of the observer to a light source. Ray casting does not compute the new tangents a ray of light might take after intersecting a surface on its way from the eye to the source of light. This eliminates the possibility of accurately rendering <organ wordnetid="105297523" confidence="0.8">
<sense_organ wordnetid="105299178" confidence="0.8">
<part wordnetid="109385911" confidence="0.8">
<eye wordnetid="105311054" confidence="0.8">
<body_part wordnetid="105220461" confidence="0.8">
<link xlink:type="simple" xlink:href="../267/521267.xml">
reflections</link></body_part>
</eye>
</part>
</sense_organ>
</organ>
, <link xlink:type="simple" xlink:href="../948/25948.xml">
refractions</link>, or the natural fall off of <link xlink:type="simple" xlink:href="../296/217296.xml">
shadows</link> -- however all of these elements can be faked to a degree, by creative use of <link xlink:type="simple" xlink:href="../903/146903.xml">
texture</link> maps or other methods.  The high speed of calculation made ray casting a handy method for the rendering in early real-time 3D video games.</p>
<p>

In nature, a light source emits a ray of light which travels, eventually, to a surface that interrupts its progress.  One can think of this "ray" as a stream of <link xlink:type="simple" xlink:href="../535/23535.xml">
photon</link>s travelling along the same path.  At this point, any combination of three things might happen with this light ray:  <link xlink:type="simple" xlink:href="../005/1384005.xml">
absorption</link>, reflection, and refraction.  The surface may reflect all or part of the light ray, in one or more directions.  It might also absorb part of the light ray, resulting in a loss of intensity of the reflected and/or refracted light.  If the surface has any <link xlink:type="simple" xlink:href="../077/351077.xml">
transparent</link> or <link xlink:type="simple" xlink:href="../077/351077.xml">
translucent</link> properties, it refracts a portion of the light beam into itself in a different direction while absorbing some (or all) of the <link xlink:type="simple" xlink:href="../464/41464.xml">
spectrum</link> (and possibly altering the color).  Between absorption, reflection, and refraction, all of the incoming light must be accounted for, and no more.  A surface cannot, for instance, reflect 66% of an incoming light ray, and refract 50%, since the two would add up to be 116%. From here, the reflected and/or refracted rays may strike other surfaces, where their absorptive, refractive, and reflective properties are again calculated based on the incoming rays.  Some of these rays travel in such a way that they hit our eye, causing us to see the scene and so contribute to the final rendered image.  Attempting to simulate this real-world process of tracing light rays using a computer can be considered extremely wasteful, as only a minuscule fraction of the rays in a scene would actually reach the eye.</p>
<p>

The first ray casting (versus ray tracing) algorithm used for rendering was presented by <link>
Arthur Appel</link> in 1968.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%225%22])">5</ref> The idea behind ray casting is to shoot rays from the eye, one per pixel, and find the closest object blocking the path of that ray -  think of an image as a screen-door, with each square in the screen being a pixel.  This is then the object the eye normally sees through that pixel.  Using the material properties and the effect of the lights in the scene, this algorithm can determine the shading of this object.  The simplifying assumption is made that if a surface faces a light, the light will reach that surface and not be blocked or in shadow.  The shading of the surface is computed using traditional 3D computer graphics shading models.  One important advantage ray casting offered over older <link xlink:type="simple" xlink:href="../029/47029.xml">
scanline algorithms</link> is its ability to easily deal with non-planar surfaces and solids, such as <link xlink:type="simple" xlink:href="../427/782427.xml">
cone</link>s and <link xlink:type="simple" xlink:href="../859/27859.xml">
sphere</link>s. If a mathematical surface can be intersected by a ray, it can be rendered using ray casting. Elaborate objects can be created by using <link xlink:type="simple" xlink:href="../579/457579.xml">
solid modelling</link> techniques and easily rendered.</p>
<p>

Ray casting for producing computer graphics was first used by scientists at <company wordnetid="108058098" confidence="0.8">
<institution wordnetid="108053576" confidence="0.8">
<link xlink:type="simple" xlink:href="../564/3292564.xml">
Mathematical Applications Group, Inc.</link></institution>
</company>
, (MAGI) of <village wordnetid="108672738" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../557/127557.xml">
Elmsford, New York</link></village>
, <region wordnetid="108630985" confidence="0.8">
<administrative_district wordnetid="108491826" confidence="0.8">
<location wordnetid="100027167" confidence="0.8">
<district wordnetid="108552138" confidence="0.8">
<country wordnetid="108544813" confidence="0.8">
<link xlink:type="simple" xlink:href="../131/8210131.xml">
New York</link></country>
</district>
</location>
</administrative_district>
</region>
. In 1966 the company was created to perform <link xlink:type="simple" xlink:href="../749/621749.xml">
radiation exposure</link> calculations for the <agency wordnetid="108337324" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../897/7279897.xml">
Department of Defense</link></agency>
. MAGI's software calculated not only how the <link xlink:type="simple" xlink:href="../290/18616290.xml">
gamma rays</link> bounced off surfaces (ray casting for radiation had been done since the 1940s), but also how they penetrated and refracted within.  These studies helped the government to determine certain military applications; constructing military vehicles that would protect troops from radiation, designing re-entry vehicles for space exploration.  Under the direction of Dr. Philip Mittelman, the scientists developed a method of generating images using the same basic software. In 1972 MAGI became a commercial animation studio.  This studio used ray casting to generate 3-D computer animation for television commercials, <link xlink:type="simple" xlink:href="../768/1398768.xml">
educational film</link>s, and eventually feature films -- they created much of the animation in the film <it><link xlink:type="simple" xlink:href="../757/312757.xml">
Tron</link></it> using ray casting exclusively.  MAGI went out of business in 1985.</p>

</sec>
<sec>
<st>
Ray casting in computer games</st>

<ss1>
<st>
Wolfenstein 3-D</st>
<p>

The world in <link xlink:type="simple" xlink:href="../430/33430.xml">
Wolfenstein 3-D</link> is built from a square based grid of uniform height walls meeting solid coloured floors and ceilings. In order to draw the world, a single ray is traced for every column of screen <link xlink:type="simple" xlink:href="../665/23665.xml">
pixel</link>s and a vertical slice of wall <link xlink:type="simple" xlink:href="../903/146903.xml">
texture</link> is selected and scaled according to where in the world the ray hits a wall and how far it travels before doing so.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%226%22])">6</ref></p>
<p>

The purpose of the grid based levels is twofold - ray to wall collisions can be found more quickly since the potential hits become more predictable and memory overhead is reduced. However, encoding wide-open areas takes extra space.</p>

</ss1>
<ss1>
<st>
<it>Comanche</it> series</st>
<p>

The so-called "<link xlink:type="simple" xlink:href="../573/222573.xml">
Voxel</link> Space" engine developed by <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../284/1174284.xml">
NovaLogic</link></company>
 for the <event wordnetid="100029378" confidence="0.8">
<social_event wordnetid="107288639" confidence="0.8">
<contest wordnetid="107456188" confidence="0.8">
<game wordnetid="100456199" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<link xlink:type="simple" xlink:href="../824/1100824.xml">
<it>Comanche</it> games</link></psychological_feature>
</game>
</contest>
</social_event>
</event>
 traces a ray through each column of screen pixels and tests each ray against points in a <link xlink:type="simple" xlink:href="../612/3371612.xml">
heightmap</link>. Then it transforms each element of the heightmap into a column of pixels, determines which are visible (that is, have not been covered up by pixels that have been drawn in front), and draws them with the corresponding color from the texture map.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%227%22])">7</ref></p>

</ss1>
<ss1>
<st>
Build engine</st>
<p>

The <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../569/613569.xml">
Build engine</link></software>
's raycasting method has been described by its creator, Ken Silverman:</p>
<p>

This is how Build works: It starts by looking at the front-facing walls in the current sector. It then renders walls 1 at a time, starting with the first unoccluded wall it finds on the list. (There is always at least 1 unoccluded wall). I do hidden surface removal by remembering the highest and lowest points that have been drawn so far to each column. Ceilings and floors fill the gaps between these old high and low points and the tops and bottoms of the new wall. If a wall is a <link xlink:type="simple" xlink:href="../608/2646608.xml">
portal</link>, I add the walls of the sector behind it to the list of walls left to consider. Rendering ends when either the wall list is empty, or all columns are filled.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%228%22])">8</ref></p>


</ss1>
</sec>
<sec>
<st>
 External links </st>
<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://pixellove.eu/wega/">
Raycasting-Java-Applet by Peter Paulis</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://wiioperasdk.com/wall.html">
Raycasting demonstration in JavaScript using a canvas</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://leftech.com/raycaster.htm">
Raycasting demonstration in a web browser</weblink></entry>
</list>
</p>

</sec>
<sec>
<st>
References</st>

<p>

<reflist>
<entry id="1">
 <cite id="CITEREFRoth1982" style="font-style:normal">Roth, Scott D.&#32;(February 1982),&#32;"Ray Casting for Modeling Solids",&#32;<it>Computer Graphics and Image Processing</it>&#32;<b>18</b>:  109-144</cite>&nbsp;</entry>
<entry id="2">
   <cite id="CITEREFWoopSchmittlerSlusallek" style="font-style:normal">Woop, Sven; Schmittler, Jörg&#32;&amp;&#32;Slusallek, Philipp,&#32;"RPU: A Programmable Ray Processing Unit for Realtime Ray Tracing",&#32;<it>SIGGRAPH 2005</it>, <document wordnetid="106470073" confidence="0.8">
<written_communication wordnetid="106349220" confidence="0.8">
<writing wordnetid="106362953" confidence="0.8">
<link xlink:type="simple" xlink:href="../994/422994.xml">
doi</link></writing>
</written_communication>
</document>
:<weblink xlink:type="simple" xlink:href="http://dx.doi.org/10.1145%2F1073204.1073211">
10.1145/1073204.1073211</weblink></cite>&nbsp;</entry>
<entry id="3">
 <cite id="CITEREFFoleyvan_DamFeinerHughes1995" style="font-style:normal"><link>
Foley, James D.</link>; <link>
van Dam, Andries</link>; Feiner, Steven K.&#32;&amp;&#32;Hughes, John F.&#32;(1995),&#32;<it>Computer Graphis: Principles and Practice</it>, Addison-Wesley, pp. 701, ISBN 0-201-84840-6</cite>&nbsp;</entry>
<entry id="4">
For example,  <cite id="CITEREFBoulos" style="font-style:normal">Boulos, Solomon,&#32;"Notes on efficient ray tracing",&#32;<it>SIGGRAPH 2005 Courses</it>, <document wordnetid="106470073" confidence="0.8">
<written_communication wordnetid="106349220" confidence="0.8">
<writing wordnetid="106362953" confidence="0.8">
<link xlink:type="simple" xlink:href="../994/422994.xml">
doi</link></writing>
</written_communication>
</document>
:<weblink xlink:type="simple" xlink:href="http://dx.doi.org/10.1145%2F1198555.1198749">
10.1145/1198555.1198749</weblink></cite>&nbsp;</entry>
<entry id="5">
<weblink xlink:type="simple" xlink:href="http://nccastaff.bournemouth.ac.uk/jmacey/CGF/slides/RayTracing4up.pdf">
"Ray-tracing and other Rendering Approaches"</weblink> (PDF), lecture notes, MSc Computer Animation and Visual Effects, Jon Macey, <link xlink:type="simple" xlink:href="../396/703396.xml">
University of Bournemouth</link></entry>
<entry id="6">
<weblink xlink:type="simple" xlink:href="http://www.permadi.com/tutorial/raycast/">
Wolfenstein-style ray casting tutorial</weblink> by F. Permadi</entry>
<entry id="7">
<link xlink:type="simple" xlink:href="../728/566728.xml">
Andre LaMothe</link>. <it>Black Art of 3D Game Programming.</it> ISBN and page numbers needed.</entry>
<entry id="8">
<weblink xlink:type="simple" xlink:href="http://www.jonof.id.au/forum/index.php?topic=1184.msg7012#msg7012">
Ken Silverman's post on the topic</weblink></entry>
</reflist>
</p>


</sec>
</bdy>
</article>
