<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 15:42:03[mciao0828] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>Process (computing)</title>
<id>45178</id>
<revision>
<id>243538200</id>
<timestamp>2008-10-06T23:05:29Z</timestamp>
<contributor>
<username>Jhuk77</username>
<id>8020168</id>
</contributor>
</revision>
<categories>
<category>Concurrent computing</category>
<category>Articles to be expanded since February 2007</category>
<category>Process (computing)</category>
<category>All articles to be expanded</category>
<category>Operating system technology</category>
</categories>
</header>
<bdy>

In computing, a <b>process</b> is an <link xlink:type="simple" xlink:href="../665/169665.xml">
instance</link> of a <link xlink:type="simple" xlink:href="../783/5783.xml">
computer program</link> that is being sequentially executed<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref> by a computer system that has the ability to run several computer programs <link xlink:type="simple" xlink:href="../467/928467.xml">
concurrently</link>.<p>

A computer program itself is just a passive collection of instructions, while a process is the actual execution of those instructions. Several processes may be associated with the same program; for example, opening up several windows of the same program often means more than one process is being executed. In the computing world, processes are <it>formally</it> defined by the operating system(s)(OS) running them and so may differ in detail from one OS to another.</p>
<p>

A single computer <link>
processor</link> executes one or more (multiple) instructions at a time (per clock cycle), one after the other (this is a simplification; for the full story, see <link xlink:type="simple" xlink:href="../702/51702.xml">
superscalar CPU architecture</link>). To allow users to run several programs at once (e.g., so that processor time is not wasted waiting for input from a resource), single-processor <link xlink:type="simple" xlink:href="../457/7878457.xml">
computer system</link>s can perform <link xlink:type="simple" xlink:href="../958/30958.xml">
time-sharing</link>. Time-sharing allows processes to <link xlink:type="simple" xlink:href="../904/6904.xml">
switch</link> between being executed and waiting (to continue) to be executed. In most cases this is done very rapidly, providing the illusion that several processes are executing 'at once'. (This is known as <link xlink:type="simple" xlink:href="../467/928467.xml">
concurrency</link> or <link xlink:type="simple" xlink:href="../857/6857.xml">
multiprogramming</link>.) Using <link xlink:type="simple" xlink:href="../020/64020.xml">
more than one physical processor</link> on a computer, permits <b>true</b> simultaneous execution of more than one stream of instructions from different processes, but time-sharing is still typically used to allow more than one process to run at a time. (Concurrency is the term generally used to refer to several independent processes sharing a single processor; <link xlink:type="simple" xlink:href="../757/28757.xml">
simultaneity</link> is used to refer to several processes, each with their own processor.) Different processes may share the same set of instructions in memory (to save storage), but this is not known to any one process. Each <link xlink:type="simple" xlink:href="../851/154851.xml">
execution of the same set of instructions</link> is known as an <it>instance</it>â€” a completely separate <link xlink:type="simple" xlink:href="../665/169665.xml">
instantiation</link> of the program. </p>
<p>

For security and reliability reasons most modern <link xlink:type="simple" xlink:href="../194/22194.xml">
operating system</link>s prevent direct <link xlink:type="simple" xlink:href="../106/152106.xml">
communication</link> between 'independent' processes, providing strictly mediated and controlled inter-process communication functionality. </p>

<sec>
<st>
Sub-processes and multithreading </st>

<p>

<indent level="1">

<it>Main article: <link xlink:type="simple" xlink:href="../303/45303.xml">
Thread (computer science)</link></it>
</indent>

A process may split itself into multiple 'daughter' sub-processes or <link xlink:type="simple" xlink:href="../303/45303.xml">
thread</link>s that execute in parallel, running different instructions on much of the same resources and data (or, as noted, the same instructions on logically different resources and data). </p>
<p>

Multithreading is useful when various 'events' are occurring in an unpredictable order, and should be processed in another order than they occur, for example based on response time constraints. Multithreading makes it possible for the processing of one event to be temporarily interrupted by an event of higher priority. Multithreading may result in more efficient CPU time utilization, since the CPU may switch to low-priority tasks while waiting for other events to occur. </p>
<p>

For example, a <link xlink:type="simple" xlink:href="../236/33236.xml">
word processor</link> could perform a spell check as the user types, without "freezing" the application - a high-priority thread could handle user input and update the display, while a low-priority background process runs the time-consuming spell checking utility. This results in that the entered text is shown immediately on the screen, while spelling mistakes are indicated or corrected after a longer time.</p>
<p>

Multithreading allows a <link xlink:type="simple" xlink:href="../116/42116.xml">
server</link>, such as a <link xlink:type="simple" xlink:href="../455/33455.xml">
web server</link>, to serve requests from several users concurrently. Thus, we can avoid that requests are left unheard if the server is busy with processing a request. One simple solution to that problem is one thread that puts every incoming request in a queue, and a second thread that processes the requests one by one in a first-come first-served manner. However, if the processing time is very long for some requests (such as large file requests or requests from users with slow network access <link xlink:type="simple" xlink:href="../290/272290.xml">
data rate</link>), this approach would result in long response time also for requests that do not require long processing time, since they may have to wait in queue. One thread per request would reduce the response time substantially for many users and may reduce the CPU idle time and increase the utilization of CPU and network capacity. In case the communication protocol between the client and server is a <link xlink:type="simple" xlink:href="../452/865452.xml">
communication session</link> involving a sequence of several messages and responses in each direction (which is the case in the <link xlink:type="simple" xlink:href="../538/30538.xml">
TCP</link> <link xlink:type="simple" xlink:href="../838/538838.xml">
transport protocol</link> used in for web browsing), creating one thread per communication session would reduce the complexity of the program substantially, since each thread is an <link xlink:type="simple" xlink:href="../665/169665.xml">
instance</link> with its own state and variables.</p>
<p>

In a similar fashion, multi-threading would make it possible for a <link xlink:type="simple" xlink:href="../970/667970.xml">
client</link> such as a web browser to communicate efficiently with several servers concurrently. </p>
<p>

A process that has only one thread is referred to as a <it>single-threaded</it> process, while a process with multiple threads is referred to as a <it>multi-threaded</it> process.  Multi-threaded processes have the advantage over multi-process systems that they can perform several tasks concurrently without the extra overhead needed to create a new process and handle synchronised communication between these processes. However, single-threaded processes have the advantage of even lower overhead.  </p>



</sec>
<sec>
<st>
Representation</st>
<p>

In general, a computer system process consists of (or is said to 'own') the following resources:
<list>
<entry level="1" type="bullet">

 An <it>image</it> of the executable <link xlink:type="simple" xlink:href="../683/20683.xml">
machine code</link> associated with a program.</entry>
<entry level="1" type="bullet">

 Memory (typically some region of <link xlink:type="simple" xlink:href="../354/32354.xml">
virtual memory</link>); which includes the executable code, process-specific data (input and output), a <link xlink:type="simple" xlink:href="../105/1718105.xml">
call stack</link> (to keep track of active <link xlink:type="simple" xlink:href="../988/40988.xml">
subroutines</link> and/or other events), and a <link xlink:type="simple" xlink:href="../117/547117.xml">
heap</link> to hold intermediate computation data generated during run time.</entry>
<entry level="1" type="bullet">

 Operating system descriptors of resources that are allocated to the process, such as <link xlink:type="simple" xlink:href="../077/7077.xml">
file</link> descriptors (<family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../642/31642.xml">
Unix</link></family>
 terminology) or <idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<category wordnetid="105838765" confidence="0.8">
<type wordnetid="105840188" confidence="0.8">
<kind wordnetid="105839024" confidence="0.8">
<link xlink:type="simple" xlink:href="../669/11493669.xml">
handles</link></kind>
</type>
</category>
</concept>
</idea>
 (<link xlink:type="simple" xlink:href="../890/18890.xml">
Windows</link>), and data sources and sinks.</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../398/7398.xml">
Security</link> attributes, such as the process owner and the process' set of permissions (allowable operations).</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../218/5218.xml">
Processor</link> state (<link xlink:type="simple" xlink:href="../340/4794340.xml">
context</link>), such as the content of <link xlink:type="simple" xlink:href="../432/486432.xml">
registers</link>, physical memory addressing, etc. The <it>state</it> is typically stored in computer registers when the process is executing, and in memory otherwise.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%222%22])">2</ref></entry>
</list>
</p>
<p>

The operating system holds most of this information about active processes in data structures called <link xlink:type="simple" xlink:href="../662/801662.xml">
process control block</link>s (PCB).</p>
<p>

Any subset of resources, but typically at least the processor state, may be associated with each of the process' <link xlink:type="simple" xlink:href="../303/45303.xml">
threads</link> in operating systems that support threads or 'daughter' processes.</p>
<p>

The operating system keeps its processes separated and allocates the resources they need so that they are less likely to interfere with each other and cause system failures (e.g., <link xlink:type="simple" xlink:href="../181/105181.xml">
deadlock</link> or <link xlink:type="simple" xlink:href="../891/665891.xml">
thrashing</link>).  The operating system may also provide mechanisms for <link xlink:type="simple" xlink:href="../106/152106.xml">
inter-process communication</link> to enable processes to interact in safe and predictable ways.</p>
<p>

<table class="metadata plainlinks ambox ">
<row>
<col>

ambox-notice" style=""</col>
</row>
<row>
<col class="mbox-image"><p>

<image width="36px" src="Wiki_letter_w.svg">
</image>
</p>
</col>
<col style="" class="mbox-text">
 <b>Please help <weblink xlink:type="simple" xlink:href="http://localhost:18088/wiki/index.php?title=Process_%28computing%29&amp;action=edit">
improve this section</weblink> by expanding it.</b> Further information might be found on the  or at . 
<it>(February 2007)''</it></col>
</row>
</table>

</p>

</sec>
<sec>
<st>
 Process management in multitasking operating systems </st>

<p>

<indent level="1">

<it>Main article: <link xlink:type="simple" xlink:href="../806/15395806.xml">
Process management (computing)</link></it>
</indent>

A <link xlink:type="simple" xlink:href="../857/6857.xml">
multitasking</link><b>*</b> <link xlink:type="simple" xlink:href="../194/22194.xml">
operating system</link> may just switch between processes to give the appearance of many processes <link xlink:type="simple" xlink:href="../206/418206.xml">
executing</link> <link xlink:type="simple" xlink:href="../467/928467.xml">
concurrently</link> or simultaneously, though in fact only one process can be executing at any one time on a single-core <link xlink:type="simple" xlink:href="../218/5218.xml">
CPU</link> (unless using multi-threading or other similar technology).<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%223%22])">3</ref></p>
<p>

It is usual to associate a single process with a main program, and 'daughter' ('child') processes with any spin-off, parallel processes, which behave like <link xlink:type="simple" xlink:href="../011/163011.xml">
asynchronous</link> subroutines. A process is said to <it>own</it> resources, of which an <it>image</it> of its program (in memory) is one such resource. (Note, however, that in multiprocessing systems, <it>many</it> processes may run off of, or share, the same <link xlink:type="simple" xlink:href="../851/154851.xml">
reentrant</link> program at the same location in memoryâ€” but each process is said to own its own <it>image</it> of the program.)</p>
<p>

Processes are often called <it>tasks</it> in <link xlink:type="simple" xlink:href="../630/46630.xml">
embedded</link> operating systems. The sense of 'process' (or task) is 'something that takes up time', as opposed to 'memory', which is 'something that takes up space'. (Historically, the terms 'task' and 'process' were used interchangeably, but the term 'task' seems to be dropping from the computer lexicon.)</p>
<p>

The above description applies to both processes managed by an operating system, and processes as defined by <link xlink:type="simple" xlink:href="../240/853240.xml">
process calculi</link>.</p>
<p>

If a process requests something for which it must wait, it will be blocked. When the process is in the <link xlink:type="simple" xlink:href="../260/4387260.xml">
Blocked State</link>, it is eligible for swapping to disk, but this is transparent in a <link xlink:type="simple" xlink:href="../354/32354.xml">
virtual memory</link> system, where blocks of memory values may be really on disk and not in <link>
main memory</link> at any time. Note that even <it>unused</it> portions of active processes/tasks (executing programs) are eligible for swapping to disk.  <it>All parts of an executing program and its data do not have to be in physical memory for the associated process to be active.</it></p>
<p>

______________________________</p>
<p>

<b>*</b>Tasks and processes refer essentially to the same entity. And, although they have somewhat different terminological histories, they have come to be used as synonyms.  Today, the term process is generally preferred over task, <it>except</it> when referring to 'multitasking', since the alternative term, 'multiprocessing', is too easy to confuse with multiprocessor (which is a computer with two or more CPUs). </p>

<ss1>
<st>
Process states</st>

<p>

<indent level="1">

<it>Main article: <link xlink:type="simple" xlink:href="../260/4387260.xml">
Process states</link></it>
</indent>
<image location="right" width="300px" src="Process_states.svg" type="thumb">
<caption>

The various process states, displayed in a <link xlink:type="simple" xlink:href="../337/187337.xml">
state diagram</link>, with arrows indicating possible transitions between states.
</caption>
</image>

Processes go through various <link xlink:type="simple" xlink:href="../260/4387260.xml">
process states</link> which determine how the process is handled by the <link xlink:type="simple" xlink:href="../394/50394.xml">
operating system kernel</link>.  The specific implementations of these states vary in different operating systems, and the names of these states are not standardised, but the general high-level functionality is the same.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%222%22])">2</ref></p>
<p>

When a process is created, it needs to wait for the <link xlink:type="simple" xlink:href="../920/231920.xml">
process scheduler</link> (of the operating system) to set its status to "waiting" and load it into <link>
main memory</link> from <link xlink:type="simple" xlink:href="../248/88248.xml">
secondary storage</link> device (such as a <link xlink:type="simple" xlink:href="../777/13777.xml">
hard disk</link> or a <recording wordnetid="104063868" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<sound_recording wordnetid="104262678" confidence="0.8">
<memory_device wordnetid="103744840" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<phonograph_record wordnetid="103924069" confidence="0.8">
<medium wordnetid="106254669" confidence="0.8">
<link xlink:type="simple" xlink:href="../902/18959902.xml">
CD-ROM</link></medium>
</phonograph_record>
</device>
</memory_device>
</sound_recording>
</instrumentality>
</artifact>
</recording>
).  Once the process has been assigned to a process<it>or</it> by a short-term <link xlink:type="simple" xlink:href="../920/231920.xml">
scheduler</link>, a <link xlink:type="simple" xlink:href="../904/6904.xml">
context switch</link> is performed (loading the process into the process<it>or</it>) and the process state is set to "running" - where the process<it>or</it> executes its instructions.  If a process needs to wait for a resource (such as waiting for user input, or waiting for a file to become available), it is moved into the "blocked" state until it no longer needs to wait - then it is moved back into the "waiting" state.  Once the process finishes execution, or is terminated by the operating system, it is moved to the "terminated" state where it waits to be removed from main memory.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%222%22])">2</ref><ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%224%22])">4</ref></p>

</ss1>
</sec>
<sec>
<st>
Inter-process communication</st>

<p>

<indent level="1">

<it>Main article: <link xlink:type="simple" xlink:href="../106/152106.xml">
Inter-process communication</link></it>
</indent>
Processes can communicate with each other via Inter-process communication (IPC).  This is possible for both processes running on the same machine and on different machines. The subject is a difficult one to discuss concisely, because it differs considerably from one operating system (OS) to another.  However, a useful way to approach it is to consider the general mechanisms used in one form or another by most OS and to recognize that any given OS will only employ some subset of that universe.</p>
<p>

<table class="metadata plainlinks ambox ">
<row>
<col>

ambox-notice" style=""</col>
</row>
<row>
<col class="mbox-image"><p>

<image width="36px" src="Wiki_letter_w.svg">
</image>
</p>
</col>
<col style="" class="mbox-text">
 <b>Please help <weblink xlink:type="simple" xlink:href="http://localhost:18088/wiki/index.php?title=Process_%28computing%29&amp;action=edit">
improve this section</weblink> by expanding it
with: February 2007.</b> Further information might be found on the  or at . <it>(February 2007)''</it></col>
</row>
</table>

</p>

</sec>
<sec>
<st>
 History </st>

<p>

<indent level="1">

<it>See also: <link xlink:type="simple" xlink:href="../395/55395.xml">
History of operating systems</link></it>
</indent>
By the early 60s computer control software had evolved from Monitor control software, e.g., <link xlink:type="simple" xlink:href="../891/1680891.xml">
IBSYS</link>, to Executive control software, making it possible to do <link xlink:type="simple" xlink:href="../857/6857.xml">
multiprogramming</link>. Multiprogramming is a rudimentary form of <link xlink:type="simple" xlink:href="../020/64020.xml">
multiprocessing</link> in which several programs are run "at the same time" (i.e., <link xlink:type="simple" xlink:href="../467/928467.xml">
concurrently</link>) on a single uniprocessor. That is, several programs are allowed to share the CPU- a scarce resource. Since there was only one processor, there was no true simultaneous execution of different programs. Instead, the later computer 'monitor-type' control software (known by then also as 'Executive' systems), and early "operating systems," typically allowed execution of part of one program until it was halted by some missing resource (e.g., input), or until some slow operation (e.g., output) had completed.  At that point, a second (or nth) program was started or restarted. To the user it appeared that all programs were executing "at the same time" (hence the term, <it>concurrent</it>).</p>
<p>

Shortly thereafter, the notion of a 'program' was expanded to the notion of an 'executing program and its context,' i.e., the concept of a process was born.  This became necessary with the invention of <link xlink:type="simple" xlink:href="../851/154851.xml">
re-entrant code</link>. <link xlink:type="simple" xlink:href="../303/45303.xml">
Thread</link>s came somewhat later.  However, with the advent of <link xlink:type="simple" xlink:href="../958/30958.xml">
time-sharing</link>; <link xlink:type="simple" xlink:href="../592/4122592.xml">
computer networks</link>; multiple-CPU, <link xlink:type="simple" xlink:href="../653/825653.xml">
shared memory</link> computers; etc., the old "multiprogramming" gave way to true <link xlink:type="simple" xlink:href="../857/6857.xml">
multitasking</link>, multiprocessing and, later,  <link xlink:type="simple" xlink:href="../679/10520679.xml">
multithreading</link>.</p>

</sec>
<sec>
<st>
 See also </st>

<p>

<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../747/445747.xml">
Child process</link></entry>
<entry level="1" type="bullet">

 <standard wordnetid="107260623" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../754/6539754.xml">
Exit</link></system_of_measurement>
</standard>
</entry>
<entry level="1" type="bullet">

 <standard wordnetid="107260623" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../507/301507.xml">
Fork</link></system_of_measurement>
</standard>
</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../931/853931.xml">
Orphan process</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../750/445750.xml">
Parent process</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../179/5275179.xml">
Process group</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../260/4387260.xml">
Process states</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../191/1655191.xml">
Task</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../303/45303.xml">
Thread</link></entry>
<entry level="1" type="bullet">

 <standard wordnetid="107260623" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../918/9780918.xml">
Wait</link></system_of_measurement>
</standard>
</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../498/34498.xml">
Zombie process</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../806/15395806.xml">
Process management (computing)</link></entry>
</list>
</p>

</sec>
<sec>
<st>
Notes</st>
<p>

<reflist>
<entry id="1">
Knott 1974, p.8</entry>
<entry id="2">
 <cite id="Reference-SILBERSCHATZ-2004" style="font-style:normal" class="book"><physical_entity wordnetid="100001930" confidence="0.8">
<peer wordnetid="109626238" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<colleague wordnetid="109935990" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<associate wordnetid="109816771" confidence="0.8">
<link xlink:type="simple" xlink:href="../106/4210106.xml">
SILBERSCHATZ, Abraham</link></associate>
</scientist>
</causal_agent>
</colleague>
</person>
</peer>
</physical_entity>
;&#32;CAGNE, Greg, GALVIN, Peter Baer&#32;(2004).&#32;"Chapter 4", Operating system concepts with Java, Sixth Edition,&#32;<link xlink:type="simple" xlink:href="../930/537930.xml">
John Wiley &amp; Sons, Inc.</link>. ISBN 0-471-48905-0.</cite>&nbsp;</entry>
<entry id="3">
Some modern CPUs combine two or more independent processors and can execute several processes simultaneously - see <link xlink:type="simple" xlink:href="../207/3503207.xml">
Multi-core</link> for more information.  Another technique called <link xlink:type="simple" xlink:href="../021/315021.xml">
simultaneous multithreading</link> (used in <link xlink:type="simple" xlink:href="../617/14617.xml">
Intel</link>'s <link xlink:type="simple" xlink:href="../443/151443.xml">
Hyper-threading</link> technology) can simulate simultaneous execution of multiple processes or threads.</entry>
<entry id="4">
 <cite style="font-style:normal" class="book">Stallings, William&#32;(2005). Operating Systems: internals and design principles (5th edition).&#32;Prentice Hall. ISBN 0-13-127837-1.</cite>&nbsp;
<indent level="1">

Particularly chapter 3, section 3.2, "process states", including figure 3.9 "process state transition with suspend states"</indent>
</entry>
</reflist>

</p>
</sec>
<sec>
<st>
References</st>
<p>

<list>
<entry level="1" type="bullet">

Gary D. Knott (1974) <it><weblink xlink:type="simple" xlink:href="http://doi.acm.org/10.1145/775280.775282">
A proposal for certain process management and intercommunication primitives</weblink></it> ACM SIGOPS Operating Systems Review. Volume 8 ,  Issue 4  (October 1974). pp. 7 - 44 </entry>
</list>
</p>

</sec>
<sec>
<st>
 External links </st>
<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://whatisprocess.com/">
WhatIsProcess.com</weblink> - Your guide to the inside.</entry>
</list>
</p>

<p>

<table style=";" class="navbox" cellspacing="0">
<row>
<col style="padding:2px;">
<table style="width:100%;background:transparent;color:inherit;;" class="nowraplinks collapsible autocollapse " cellspacing="0">
<row>
<header colspan="2" style=";" class="navbox-title">
<link xlink:type="simple" xlink:href="../162/145162.xml">
Parallel computing</link>topics</header>
</row>
<row style="height:2px;">

</row>
<row>
<col style=";;" class="navbox-group">
General</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<condition wordnetid="113920835" confidence="0.8">
<state wordnetid="100024720" confidence="0.8">
<problem wordnetid="114410605" confidence="0.8">
<difficulty wordnetid="114408086" confidence="0.8">
<link xlink:type="simple" xlink:href="../527/832527.xml">
High-performance computing</link></difficulty>
</problem>
</state>
</condition>
</col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
Parallelism</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-even">
<link xlink:type="simple" xlink:href="../148/14229148.xml">
Bit-level parallelism</link>&nbsp;Â·  <link xlink:type="simple" xlink:href="../960/245960.xml">
Instruction level parallelism</link>&nbsp;Â·  <link xlink:type="simple" xlink:href="../420/9467420.xml">
Data parallelism</link>&nbsp;Â·  <link xlink:type="simple" xlink:href="../070/9468070.xml">
Task parallelism</link></col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
Threads</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<link xlink:type="simple" xlink:href="../877/313877.xml">
Superthreading</link>&nbsp;Â·  <link xlink:type="simple" xlink:href="../443/151443.xml">
Hyperthreading</link></col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
Theory</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-even">
<link xlink:type="simple" xlink:href="../612/1448612.xml">
Speedup</link>&nbsp;Â·  <idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<rule wordnetid="105846054" confidence="0.8">
<link xlink:type="simple" xlink:href="../ury/24th_century.xml">
Amdahl's law</link></rule>
</concept>
</idea>
&nbsp;Â·  <class wordnetid="107997703" confidence="0.8">
<collection wordnetid="107951464" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<link xlink:type="simple" xlink:href="../349/222349.xml">
Flynn's taxonomy</link></group>
</collection>
</class>
 (<link xlink:type="simple" xlink:href="../630/1103630.xml">
SISD</link>&nbsp;&amp;bull;  <link xlink:type="simple" xlink:href="../359/55359.xml">
SIMD</link>&nbsp;&amp;bull;  <link xlink:type="simple" xlink:href="../666/991666.xml">
MISD</link>&nbsp;&amp;bull;  <link xlink:type="simple" xlink:href="../139/157139.xml">
MIMD</link>)&nbsp;Â·  <link xlink:type="simple" xlink:href="../721/3505721.xml">
Cost efficiency</link>&nbsp;Â·  <idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<rule wordnetid="105846054" confidence="0.8">
<link xlink:type="simple" xlink:href="../252/4243252.xml">
Gustafson's law</link></rule>
</concept>
</idea>
&nbsp;Â·  <link xlink:type="simple" xlink:href="../042/9453042.xml">
Karp-Flatt metric</link>&nbsp;Â·  <link xlink:type="simple" xlink:href="../068/15167068.xml">
Parallel slowdown</link></col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
Elements</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<link xlink:type="simple" xlink:href="../178/45178.xml">
Process</link>&nbsp;Â·  <link xlink:type="simple" xlink:href="../303/45303.xml">
Thread</link>&nbsp;Â·  <link xlink:type="simple" xlink:href="../712/5533712.xml">
Fiber</link>&nbsp;Â·  <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<model wordnetid="110324560" confidence="0.8">
<assistant wordnetid="109815790" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../675/956675.xml">
Parallel Random Access Machine</link></causal_agent>
</worker>
</assistant>
</model>
</person>
</physical_entity>
</col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
Coordination</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-even">
<link xlink:type="simple" xlink:href="../020/64020.xml">
Multiprocessing</link>&nbsp;Â·  <link xlink:type="simple" xlink:href="../679/10520679.xml">
Multithreading</link>&nbsp;Â·  <link xlink:type="simple" xlink:href="../857/6857.xml">
Multitasking</link>&nbsp;Â·  <link xlink:type="simple" xlink:href="../818/399818.xml">
Memory coherency</link>&nbsp;Â·  <link xlink:type="simple" xlink:href="../865/176865.xml">
Cache coherency</link>&nbsp;Â·  <link xlink:type="simple" xlink:href="../263/4736263.xml">
Barrier</link>&nbsp;Â·  <link xlink:type="simple" xlink:href="../017/4726017.xml">
Synchronization</link>&nbsp;Â·  <link xlink:type="simple" xlink:href="../501/8501.xml">
Distributed computing</link>&nbsp;Â·  <link xlink:type="simple" xlink:href="../373/49373.xml">
Grid computing</link></col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
<link xlink:type="simple" xlink:href="../311/5311.xml">
Programming</link></col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<paradigm wordnetid="113804375" confidence="0.8">
<linguistic_relation wordnetid="113797142" confidence="0.8">
<inflection wordnetid="113803782" confidence="0.8">
<grammatical_relation wordnetid="113796779" confidence="0.8">
<link xlink:type="simple" xlink:href="../375/2242375.xml">
Programming model</link></grammatical_relation>
</inflection>
</linguistic_relation>
</paradigm>
&nbsp;Â·  <link xlink:type="simple" xlink:href="../888/3453888.xml">
Implicit parallelism</link>&nbsp;Â·  <link xlink:type="simple" xlink:href="../332/3095332.xml">
Explicit parallelism</link></col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
<link xlink:type="simple" xlink:href="../310/5310.xml">
Hardware</link></col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-even">
<link xlink:type="simple" xlink:href="../896/18949896.xml">
Computer cluster</link>&nbsp;Â·  <link xlink:type="simple" xlink:href="../542/66542.xml">
Beowulf</link>&nbsp;Â·  <link xlink:type="simple" xlink:href="../318/50318.xml">
Symmetric multiprocessing</link>&nbsp;Â·  <link xlink:type="simple" xlink:href="../643/40643.xml">
Non-Uniform Memory Access</link>&nbsp;Â·  <link xlink:type="simple" xlink:href="../307/910307.xml">
Cache only memory architecture</link>&nbsp;Â·  <link xlink:type="simple" xlink:href="../506/2576506.xml">
Asymmetric multiprocessing</link>&nbsp;Â·  <link xlink:type="simple" xlink:href="../021/315021.xml">
Simultaneous multithreading</link>&nbsp;Â·  <link xlink:type="simple" xlink:href="../653/825653.xml">
Shared memory</link>&nbsp;Â·  <link xlink:type="simple" xlink:href="../887/234887.xml">
Distributed memory</link>&nbsp;Â·  <link xlink:type="simple" xlink:href="../049/584049.xml">
Massive parallel processing</link>&nbsp;Â·  <link xlink:type="simple" xlink:href="../702/51702.xml">
Superscalar processing</link>&nbsp;Â·  <link xlink:type="simple" xlink:href="../205/58205.xml">
Vector processing</link>&nbsp;Â·  <link xlink:type="simple" xlink:href="../153/37153.xml">
Supercomputer</link>&nbsp;Â·  <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<model wordnetid="110324560" confidence="0.8">
<assistant wordnetid="109815790" confidence="0.8">
<paradigm wordnetid="113804375" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<linguistic_relation wordnetid="113797142" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<inflection wordnetid="113803782" confidence="0.8">
<grammatical_relation wordnetid="113796779" confidence="0.8">
<link xlink:type="simple" xlink:href="../727/2786727.xml">
Stream processing</link></grammatical_relation>
</inflection>
</causal_agent>
</linguistic_relation>
</worker>
</paradigm>
</assistant>
</model>
</person>
</physical_entity>
&nbsp;Â·  <substance wordnetid="100019613" confidence="0.8">
<paper wordnetid="114974264" confidence="0.8">
<card wordnetid="102962545" confidence="0.8">
<part wordnetid="113809207" confidence="0.8">
<material wordnetid="114580897" confidence="0.8">
<link xlink:type="simple" xlink:href="../939/1268939.xml">
GPGPU</link></material>
</part>
</card>
</paper>
</substance>
</col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
<link xlink:type="simple" xlink:href="../309/5309.xml">
Software</link></col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<link xlink:type="simple" xlink:href="../843/399843.xml">
Distributed shared memory</link> &nbsp;Â·  <link xlink:type="simple" xlink:href="../765/416765.xml">
Application checkpointing</link>&nbsp;Â·  <link xlink:type="simple" xlink:href="../129/2738129.xml">
Warewulf</link></col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
<link xlink:type="simple" xlink:href="../ury/24th_century.xml">
API</link>s</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-even">
<standard wordnetid="107260623" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../671/634671.xml">
POSIX Threads</link></system_of_measurement>
</standard>
&nbsp;Â·  <link xlink:type="simple" xlink:href="../842/381842.xml">
OpenMP</link>&nbsp;Â·  <link xlink:type="simple" xlink:href="../466/221466.xml">
Message Passing Interface (MPI)</link>&nbsp;Â·  <link xlink:type="simple" xlink:href="../616/1057616.xml">
UPC</link>&nbsp;Â·  <link xlink:type="simple" xlink:href="../077/11625077.xml">
Intel Threading Building Blocks</link>&nbsp;Â·  <structure wordnetid="104341686" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<area wordnetid="102735688" confidence="0.8">
<library wordnetid="103660909" confidence="0.8">
<room wordnetid="104105893" confidence="0.8">
<link xlink:type="simple" xlink:href="../324/711324.xml#xpointer(//*[./st=%22Multithreading+=E2=80=93+Boost.Thread%22])">
Boost.Thread</link></room>
</library>
</area>
</artifact>
</structure>
</col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
Problems</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../712/1738712.xml">
Embarrassingly parallel</link></instrumentality>
</artifact>
</system>
&nbsp;Â·  <condition wordnetid="113920835" confidence="0.8">
<state wordnetid="100024720" confidence="0.8">
<problem wordnetid="114410605" confidence="0.8">
<difficulty wordnetid="114408086" confidence="0.8">
<link xlink:type="simple" xlink:href="../754/439754.xml">
Grand Challenge</link></difficulty>
</problem>
</state>
</condition>
&nbsp;Â·  <plant_part wordnetid="113086908" confidence="0.8">
<natural_object wordnetid="100019128" confidence="0.8">
<kernel wordnetid="113137010" confidence="0.8">
<link xlink:type="simple" xlink:href="../798/12332798.xml">
Software lockout</link></kernel>
</natural_object>
</plant_part>
</col>
</row>
</table>
</col>
</row>
</table>
</p>

<p>

<table style=";" class="navbox" cellspacing="0">
<row>
<col style="padding:2px;">
<table style="width:100%;background:transparent;color:inherit;;" class="nowraplinks collapsible autocollapse " cellspacing="0">
<row>
<header colspan="2" style=";" class="navbox-title">
<link xlink:type="simple" xlink:href="../194/22194.xml">
Operating system</link></header>
</row>
<row style="height:2px;">

</row>
<row>
<col style=";;" class="navbox-group">
General</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<link xlink:type="simple" xlink:href="../395/55395.xml">
History</link>&nbsp;Â·  <record wordnetid="106647206" confidence="0.8">
<chronology wordnetid="106503224" confidence="0.8">
<indication wordnetid="106797169" confidence="0.8">
<evidence wordnetid="106643408" confidence="0.8">
<timeline wordnetid="106504965" confidence="0.8">
<written_record wordnetid="106502378" confidence="0.8">
<link xlink:type="simple" xlink:href="../968/247968.xml">
Timeline</link></written_record>
</timeline>
</evidence>
</indication>
</chronology>
</record>
&nbsp;Â·  <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../119/229119.xml">
Developement</link></database>
</wordnet>
</lexical_database>
</electronic_database>
</information>
</message>
&nbsp;Â·  <link xlink:type="simple" xlink:href="../531/981531.xml">
List</link></col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
<link xlink:type="simple" xlink:href="../394/50394.xml">
Kernel</link></col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-even">
<table style="width:100%;;;;" class="nowraplinks  navbox-subgroup" cellspacing="0">
<row>
<col style=";padding-left:0em;padding-right:0em;;" class="navbox-group">
General</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<link xlink:type="simple" xlink:href="../023/20023.xml">
Microkernel</link>&nbsp;Â·  <link xlink:type="simple" xlink:href="../023/20023.xml#xpointer(//*[./st=%22Nanokernel%22])">
Nanokernel</link></col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";padding-left:0em;padding-right:0em;;" class="navbox-group">
Types</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-even">
<link xlink:type="simple" xlink:href="../825/20825.xml">
monolithic</link>&nbsp;Â·  <plant_part wordnetid="113086908" confidence="0.8">
<natural_object wordnetid="100019128" confidence="0.8">
<kernel wordnetid="113137010" confidence="0.8">
<link xlink:type="simple" xlink:href="../041/4345041.xml">
hybrid</link></kernel>
</natural_object>
</plant_part>
&nbsp;Â·  <plant_part wordnetid="113086908" confidence="0.8">
<natural_object wordnetid="100019128" confidence="0.8">
<kernel wordnetid="113137010" confidence="0.8">
<link xlink:type="simple" xlink:href="../757/95757.xml">
exokernel</link></kernel>
</natural_object>
</plant_part>
</col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";padding-left:0em;padding-right:0em;;" class="navbox-group">
Components</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<link xlink:type="simple" xlink:href="../467/93467.xml">
Kernel space</link>&nbsp;Â·  <link xlink:type="simple" xlink:href="../658/371658.xml">
Loadable kernel module</link>&nbsp;Â·  <link xlink:type="simple" xlink:href="../101/9101.xml">
device driver</link>&nbsp;Â·  <link xlink:type="simple" xlink:href="../467/93467.xml">
User space</link>&nbsp;Â·  <link xlink:type="simple" xlink:href="../109/555109.xml">
Userland</link></col>
</row>
</table>
</col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
<link xlink:type="simple" xlink:href="../806/15395806.xml">
Process management</link></col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<link xlink:type="simple" xlink:href="../178/45178.xml">
Process</link>&nbsp;Â·  <link xlink:type="simple" xlink:href="../857/6857.xml">
Multiprogramming</link>&nbsp;Â·  <link xlink:type="simple" xlink:href="../289/15289.xml">
Interrupt</link>&nbsp;Â·  Modes: (<link xlink:type="simple" xlink:href="../596/167596.xml">
Protected mode</link>&nbsp;Â·  <link>
Supervisor mode</link>)&nbsp;Â·  <link xlink:type="simple" xlink:href="../857/6857.xml">
Computer multitasking</link>&nbsp;Â·  <link xlink:type="simple" xlink:href="../920/231920.xml">
Scheduling</link>&nbsp;Â·  <link xlink:type="simple" xlink:href="../904/6904.xml">
Context switch</link>&nbsp;Â·  <link xlink:type="simple" xlink:href="../857/6857.xml">
Cooperative multitasking</link>&nbsp;Â·  <link xlink:type="simple" xlink:href="../566/2204566.xml">
Preemptive multitasking</link>&nbsp;Â·  <link xlink:type="simple" xlink:href="../954/3991954.xml">
CPU modes</link>&nbsp;Â·  <link xlink:type="simple" xlink:href="../303/45303.xml">
Thread (computer science)</link></col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
Memory management</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-even">
<link xlink:type="simple" xlink:href="../373/515373.xml">
Memory protection</link>&nbsp;Â·  <link xlink:type="simple" xlink:href="../131/1323131.xml">
Segmentation</link>&nbsp;Â·  <link xlink:type="simple" xlink:href="../193/311193.xml">
Paging</link>&nbsp;Â·  <link xlink:type="simple" xlink:href="../112/177112.xml">
Memory management unit</link>&nbsp;Â·  <link xlink:type="simple" xlink:href="../803/28803.xml">
Segmentation fault</link>&nbsp;Â·  <link xlink:type="simple" xlink:href="../943/573943.xml">
General protection fault</link></col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
Examples</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../304/18933304.xml">
AmigaOS</link></O>
&nbsp;Â·  <link xlink:type="simple" xlink:href="../801/4801.xml">
BeOS</link>&nbsp;Â·  <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../409/22409.xml">
IBM OS/2</link></O>
&nbsp;Â·  <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../027/20027.xml">
MS-DOS</link></O>
&nbsp;Â·  <link xlink:type="simple" xlink:href="../890/18890.xml">
Windows</link>&nbsp;Â·  <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../297/6097297.xml">
Linux</link></O>
&nbsp;Â·  <link xlink:type="simple" xlink:href="../642/31642.xml">
UNIX</link>&nbsp;Â·  <link xlink:type="simple" xlink:href="../658/1178658.xml">
OpenSolaris</link>&nbsp;Â·  <link xlink:type="simple" xlink:href="../640/20640.xml">
Mac OS X</link>&nbsp;Â·   <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../889/360889.xml">
ReactOS</link></O>
&nbsp;Â·  <it><link xlink:type="simple" xlink:href="../916/71916.xml">
moreâ€¦</link>''</it></col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
Miscellaneous concepts</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-even">
<link xlink:type="simple" xlink:href="../679/6885679.xml">
Boot loader</link>&nbsp;Â·  <standard wordnetid="107260623" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../253/432253.xml">
PXE</link></system_of_measurement>
</standard>
&nbsp;Â·  <link xlink:type="simple" xlink:href="../ury/24th_century.xml">
API</link>&nbsp;Â·  <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../131/351131.xml">
Virtual file system</link></instrumentality>
</artifact>
</system>
&nbsp;Â·  <link xlink:type="simple" xlink:href="../071/2550071.xml">
Virtual tape library</link>&nbsp;Â·  <link xlink:type="simple" xlink:href="../592/4122592.xml">
Computer network</link>&nbsp;Â·  <link xlink:type="simple" xlink:href="../293/12293.xml">
GUI</link>&nbsp;Â·  <link xlink:type="simple" xlink:href="../511/425511.xml">
HAL</link></col>
</row>
</table>
</col>
</row>
</table>
</p>



</sec>
</bdy>
</article>
