<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 15:42:03[mciao0828] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>Thread (computer science)</title>
<id>45303</id>
<revision>
<id>244123156</id>
<timestamp>2008-10-09T13:17:48Z</timestamp>
<contributor>
<username>STBot</username>
<id>2206974</id>
</contributor>
</revision>
<categories>
<category>Threads</category>
<category>Concurrent computing</category>
<category>Operating system technology</category>
</categories>
</header>
<bdy>

For the form of code consisting entirely of <link xlink:type="simple" xlink:href="../988/40988.xml">
subroutine</link> calls, see <link xlink:type="simple" xlink:href="../767/47767.xml">
Threaded code</link>.<p>

<image width="150px" src="Multithreaded_process.svg" type="thumb">
<caption>

A process with two threads of execution.
</caption>
</image>
</p>
<p>

A <b>thread</b> in <link xlink:type="simple" xlink:href="../323/5323.xml">
computer science</link> is short for a <it>thread of execution</it>. Threads are a way for a <link xlink:type="simple" xlink:href="../783/5783.xml">
program</link> to split itself into two or more simultaneously (or pseudo-simultaneously) running <link xlink:type="simple" xlink:href="../191/1655191.xml">
task</link>s (see also: <standard wordnetid="107260623" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../507/301507.xml">
fork</link></system_of_measurement>
</standard>
). Threads and <link xlink:type="simple" xlink:href="../178/45178.xml">
process</link>es differ from one <link xlink:type="simple" xlink:href="../194/22194.xml">
operating system</link> to another but, in general, a thread is contained inside a process and different threads in the same process share some resources while different <link xlink:type="simple" xlink:href="../178/45178.xml">
process</link>es do not.</p>
<p>

On a single processor, <b>Multithreading</b> generally occurs by <link xlink:type="simple" xlink:href="../796/41796.xml">
time-division multiplexing</link> ("time slicing") in very much the same way as the parallel execution of multiple tasks (<link xlink:type="simple" xlink:href="../857/6857.xml">
computer multitasking</link>): the <link xlink:type="simple" xlink:href="../218/5218.xml">
processor</link> switches between different threads. This <link xlink:type="simple" xlink:href="../904/6904.xml">
context switch</link>ing can happen so fast as to give the illusion of simultaneity to an end user. On a <link xlink:type="simple" xlink:href="../020/64020.xml">
multiprocessor</link> or <link xlink:type="simple" xlink:href="../207/3503207.xml">
multi-core</link> system, threading can be achieved via <link xlink:type="simple" xlink:href="../020/64020.xml">
multiprocessing</link>, wherein different threads and processes can run literally simultaneously on different processors or cores.</p>
<p>

Many modern <link xlink:type="simple" xlink:href="../194/22194.xml">
operating system</link>s directly support both time-sliced and multiprocessor threading with a process <link xlink:type="simple" xlink:href="../920/231920.xml">
scheduler</link>. The operating system <link xlink:type="simple" xlink:href="../394/50394.xml">
kernel</link> allows programmers to manipulate threads via the <link xlink:type="simple" xlink:href="../908/102908.xml">
system call</link> interface. Some implementations are called a <it>kernel thread</it>, whereas a <it><link xlink:type="simple" xlink:href="../797/2951797.xml">
lightweight process</link></it> (LWP) is a specific type of <it>kernel thread</it> that shares the same state and information.</p>
<p>

Absent that, programs can still implement threading by using timers, signals, or other methods to interrupt their own execution and hence perform a sort of ad hoc time-slicing.  These are sometimes called <it>user-space threads</it>.</p>

<sec>
<st>
Threads compared with processes</st>
<p>

Thread is distinguished from traditional <link xlink:type="simple" xlink:href="../857/6857.xml">
multitasking</link> <link>
operating system processes</link> in that processes:
<list>
<entry level="1" type="bullet">

are typically independent,</entry>
<entry level="1" type="bullet">

carry considerable <link xlink:type="simple" xlink:href="../512/285512.xml">
state</link> information,</entry>
<entry level="1" type="bullet">

have separate <link xlink:type="simple" xlink:href="../144/507144.xml">
address space</link>s, and</entry>
<entry level="1" type="bullet">

interact only through system-provided <link xlink:type="simple" xlink:href="../106/152106.xml">
inter-process communication</link> mechanisms.</entry>
</list>

Multiple threads, on the other hand, typically share the state information of a  process, and share <link xlink:type="simple" xlink:href="../300/5300.xml">
memory</link> and other <link xlink:type="simple" xlink:href="../365/1728365.xml">
resource</link>s directly. <link xlink:type="simple" xlink:href="../904/6904.xml">
Context switching</link> between threads in the same process is typically faster than context switching between processes. Systems like <family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../438/33438.xml">
Windows NT</link></family>
 and <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../409/22409.xml">
OS/2</link></O>
 are said to have "cheap" threads and "expensive" processes;  in other operating systems there is not so great a difference.  </p>
<p>

Multithreading is a popular programming and execution model that allows multiple threads to exist within the context of a single process, sharing the process' resources but able to execute independently. The threaded programming model provides developers with a useful abstraction of concurrent execution. However, perhaps the most interesting application of the technology is when it is applied to a <it>single</it> process to enable <it>parallel execution</it> on a <it>multiprocessor</it> system.</p>
<p>

This advantage of a multithreaded program allows it to operate faster on <link xlink:type="simple" xlink:href="../457/7878457.xml">
computer system</link>s that have multiple <link xlink:type="simple" xlink:href="../218/5218.xml">
CPUs</link>, CPUs with multiple cores, or across a <link xlink:type="simple" xlink:href="../896/18949896.xml">
cluster</link> of machines. This is because the threads of the program naturally lend themselves to truly <link xlink:type="simple" xlink:href="../467/928467.xml">
concurrent</link> <link xlink:type="simple" xlink:href="../206/418206.xml">
execution</link>. In such a case, the <link xlink:type="simple" xlink:href="../716/23716.xml">
programmer</link> needs to be careful to avoid <link xlink:type="simple" xlink:href="../661/98661.xml">
race condition</link>s, and other non-intuitive behaviors. In order for data to be correctly manipulated, threads will often need to <link xlink:type="simple" xlink:href="../579/235579.xml">
rendezvous</link> in time in order to process the data in the correct order. Threads may also require <link xlink:type="simple" xlink:href="../560/2114560.xml">
atomic</link> operations (often implemented using <link xlink:type="simple" xlink:href="../557/164557.xml">
semaphore</link>s) in order to prevent common data from being simultaneously modified, or read while in the process of being modified. Careless use of such primitives can lead to <link xlink:type="simple" xlink:href="../181/105181.xml">
deadlock</link>s.</p>
<p>

Operating systems schedule threads in one of two ways.  <it>Preemptive multithreading</it> is generally considered the superior approach, as it allows the operating system to determine when a <link xlink:type="simple" xlink:href="../904/6904.xml">
context switch</link> should occur.  <it>Cooperative multithreading</it>, on the other hand, relies on the threads themselves to relinquish control once they are at a stopping point. This can create problems if a thread is waiting for a resource to become available. The disadvantage to preemptive multithreading is that the system may make a context switch at an inappropriate time, causing <link xlink:type="simple" xlink:href="../507/521507.xml">
priority inversion</link> or other bad effects which may be avoided by cooperative multithreading.</p>
<p>

Traditional mainstream computing hardware did not have much support for multithreading as switching between threads was generally already quicker than full process <link xlink:type="simple" xlink:href="../904/6904.xml">
context switch</link>es. Processors in <link xlink:type="simple" xlink:href="../630/46630.xml">
embedded systems</link>, which have higher requirements for real-time behaviors, might support multithreading by decreasing the thread switch time, perhaps by allocating a dedicated register file for each thread instead of saving/restoring a common register file. In the late 1990s, the idea of executing instructions from multiple threads simultaneously has become known as <link xlink:type="simple" xlink:href="../021/315021.xml">
simultaneous multithreading</link>. This feature was introduced in <link xlink:type="simple" xlink:href="../617/14617.xml">
Intel</link>'s <chip wordnetid="103020034" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<microprocessor wordnetid="103760310" confidence="0.8">
<conductor wordnetid="103088707" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<semiconductor_device wordnetid="104171831" confidence="0.8">
<link xlink:type="simple" xlink:href="../228/165228.xml">
Pentium 4</link></semiconductor_device>
</device>
</conductor>
</microprocessor>
</instrumentality>
</artifact>
</chip>
 processor, with the name <it><link xlink:type="simple" xlink:href="../443/151443.xml">
Hyper-threading</link></it>.</p>

</sec>
<sec>
<st>
Processes, threads, and fibers</st>

<p>

<indent level="1">

<it>Main articles: <link xlink:type="simple" xlink:href="../178/45178.xml">
Process (computing)</link>&#32;and&#32;<link xlink:type="simple" xlink:href="../712/5533712.xml">
Fiber (computer science)</link></it>
</indent>

A <it>process</it> is the "heaviest" unit of kernel scheduling. Processes own <link xlink:type="simple" xlink:href="../365/1728365.xml">
resources</link> allocated by the operating system. Resources include memory, <idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<category wordnetid="105838765" confidence="0.8">
<type wordnetid="105840188" confidence="0.8">
<kind wordnetid="105839024" confidence="0.8">
<link xlink:type="simple" xlink:href="../669/11493669.xml">
file handles</link></kind>
</type>
</category>
</concept>
</idea>
, sockets, device handles, and windows. Processes do not share address spaces or file resources except through explicit methods such as inheriting file handles or shared memory segments, or mapping the same file in a shared way. Processes are typically preemptively multitasked. However, Windows 3.1 and older versions of Mac OS used cooperative or non-preemptive multitasking.</p>
<p>

A <it>thread</it> is the "lightest" unit of kernel scheduling. At least one thread exists within each process. If multiple threads can exist within a process, then they share the same memory and file resources. Threads are preemptively multitasked if the operating system's process <link xlink:type="simple" xlink:href="../920/231920.xml">
scheduler</link> is preemptive. Threads do not own resources except for a <link xlink:type="simple" xlink:href="../105/1718105.xml">
stack</link>, a copy of the <link xlink:type="simple" xlink:href="../432/486432.xml">
registers</link> including the <link xlink:type="simple" xlink:href="../944/59944.xml">
program counter</link>, and <link xlink:type="simple" xlink:href="../638/1649638.xml">
thread-local storage</link> (if any).</p>
<p>

In some situations, there is a distinction between "kernel threads" and "user threads" – the former are managed and scheduled by the kernel, whereas the latter are managed and scheduled in <link xlink:type="simple" xlink:href="../467/93467.xml">
userspace</link>. In this article, the term "thread" is used to refer to kernel threads, whereas "fiber" is used to refer to user threads. Fibers are <link xlink:type="simple" xlink:href="../857/6857.xml">
cooperatively scheduled</link>: a running fiber must explicitly "yield" to allow another fiber to run. A fiber can be scheduled to run in any thread in the same process.</p>

<ss1>
<st>
Thread and fiber issues</st>

<ss2>
<st>
Concurrency and data structures</st>
<p>

Threads in the same process share the same address space.  This allows concurrently-running code to <link xlink:type="simple" xlink:href="../449/1425449.xml">
couple</link> tightly and conveniently exchange data without the overhead or complexity of an <link xlink:type="simple" xlink:href="../106/152106.xml">
IPC</link>.  When shared between threads, however, even simple data structures become prone to <link xlink:type="simple" xlink:href="../661/98661.xml">
race hazards</link> if they require more than one CPU instruction to update: two threads may end up attempting to update the data structure at the same time and find it unexpectedly changing underfoot.  Bugs caused by race hazards can be very difficult to reproduce and isolate.</p>
<p>

To prevent this, threading APIs offer synchronization primitives such as <link xlink:type="simple" xlink:href="../827/36827.xml">
mutexes</link> to <link xlink:type="simple" xlink:href="../593/244593.xml">
lock</link> data structures against concurrent access.  On uniprocessor systems, a thread running into a locked mutex must sleep and hence trigger a context switch.  On multi-processor systems, the thread may instead poll the mutex in a <link xlink:type="simple" xlink:href="../603/244603.xml">
spinlock</link>.  Both of these may sap performance and force processors in <link xlink:type="simple" xlink:href="../318/50318.xml">
SMP</link> systems to contend for the memory bus, especially if the <link xlink:type="simple" xlink:href="../684/792684.xml">
granularity</link> of the locking is fine.</p>

</ss2>
<ss2>
<st>
I/O and scheduling</st>
<p>

Many fiber implementations are entirely in <link xlink:type="simple" xlink:href="../467/93467.xml">
userspace</link>.  As a result, context switching between fibers within the same process is extremely efficient because it does not require any interaction with the kernel at all: a context switch can be performed by locally saving the CPU registers used by the currently executing fiber and then loading the registers required by the fiber to be executed. Since scheduling occurs in userspace, the scheduling policy can be more easily tailored to the requirements of the program's workload.</p>
<p>

However, the use of blocking system calls in fibers can be problematic. If a fiber performs a system call that blocks, the other fibers in the process are unable to run until the system call returns. A typical example of this problem is when performing I/O: most programs are written to perform I/O synchronously. When an I/O operation is initiated, a system call is made, and does not return until the I/O operation has been completed. In the intervening period, the entire process is "blocked" by the kernel and cannot run, which starves other fibers in the same process from executing.</p>
<p>

A common solution to this problem is providing an I/O API that implements a synchronous interface by using non-blocking I/O internally, and scheduling another fiber while the I/O operation is in progress. Similar solutions can be provided for other blocking system calls. Alternatively, the program can be written to avoid the use of synchronous I/O or other blocking system calls.</p>
<p>

Win32 supplies a fiber API<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref>. SunOS 4.x implemented "<link xlink:type="simple" xlink:href="../797/2951797.xml">
light-weight processes</link>" or LWPs as fibers known as <link xlink:type="simple" xlink:href="../649/7639649.xml">
green threads</link>. <link xlink:type="simple" xlink:href="../495/21495.xml">
NetBSD</link> 2.x+, and <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../229/294229.xml">
DragonFly BSD</link></O>
 implement LWPs as threads as well (1:1 model). <link>
SunOS 5.2</link> through <link>
SunOS 5.8</link> as well as NetBSD 2 to NetBSD 4 implemented a two level model, multiplexing one or more user level fibers on each kernel thread (M:N model).  <link>
SunOS 5.9</link> and later, as well as NetBSD 5 eliminated fiber support, returning to a 1:1 model. <weblink xlink:type="simple" xlink:href="http://www.sun.com/software/whitepapers/solaris9/multithread.pdf">
http://www.sun.com/software/whitepapers/solaris9/multithread.pdf</weblink></p>
<p>

The use of kernel threads simplifies user code by moving some of the most complex aspects of threading into the kernel.  The program doesn't need to schedule threads or explicitly yield the processor.  User code can be written in a familiar procedural style, including calls to blocking APIs, without starving other threads.  However, kernel threading on uniprocessor systems may force a context switch between threads at any time, and thus expose race hazards and concurrency bugs that would otherwise lie latent.  On SMP systems, this is further exacerbated because kernel threads may actually execute concurrently on separate processors.shh</p>

</ss2>
</ss1>
</sec>
<sec>
<st>
 Models </st>

<ss1>
<st>
 1:1 </st>
<p>

1:1 threads created by the user are in 1-1 correspondence with schedulable entities in the kernel. This is the simplest possible threading implementation. On <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../297/6097297.xml">
Linux</link></O>
, the <structure wordnetid="104341686" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<area wordnetid="102735688" confidence="0.8">
<library wordnetid="103660909" confidence="0.8">
<room wordnetid="104105893" confidence="0.8">
<link xlink:type="simple" xlink:href="../364/324364.xml">
usual C library</link></room>
</library>
</area>
</artifact>
</structure>
 implements this approach (via the <standard wordnetid="107260623" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../432/463432.xml">
NPTL</link></system_of_measurement>
</standard>
).
</p>
</ss1>
<ss1>
<st>
 N:M </st>
<p>

N:M maps some N number of application threads onto some M number of kernel entities, or "virtual processors". This is a compromise between kernel-level ("1:1") and user-level ("N:1") threading. In general, "N:M" threading systems are more complex to implement than either kernel or user threads, because both changes to kernel and user-space code are required. In the m×n implementation, the threading library is responsible for scheduling user threads on the available schedulable entities; this makes context switching of threads very fast, as it avoids system calls. However, this increases complexity and the likelihood of priority inversion, as well as suboptimal scheduling without extensive (and expensive) coordination between the userland scheduler and the kernel scheduler.
</p>
</ss1>
<ss1>
<st>
 N:1 </st>
<p>

An N:1 model implies that all application-level threads map on to a single kernel-level scheduled entity; as the kernel has no knowledge of the application threads, they are effectively fibers. With this approach, context switching can be done very fast and, in addition, it can be implemented even on simple kernels which do not support threading. One of the major drawbacks however is that it cannot benefit from the hardware acceleration on <link xlink:type="simple" xlink:href="../679/10520679.xml">
multi-threaded</link> processors or <link xlink:type="simple" xlink:href="../020/64020.xml">
multi-processor</link> computers: there is never more than one thread being scheduled at the same time.</p>

</ss1>
</sec>
<sec>
<st>
Implementations</st>
<p>

There are many different and incompatible implementations of threading. These include both kernel-level and user-level implementations.</p>
<p>

Note that fibers can be implemented without operating system support, although some operating systems or libraries provide explicit support for them. For example, Microsoft Windows (Windows NT 3.51 SP3 and later) support a fiber API for applications that want to gain performance improvements by managing scheduling themselves, instead of relying on the kernel scheduler (which may not be tuned for the application). Microsoft SQL Server 2000's user mode scheduler, running in fiber mode, is an example of doing this.</p>

<ss1>
<st>
User-level implementation examples</st>
<p>

<list>
<entry level="1" type="bullet">

 <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../681/6174681.xml">
GNU Portable Threads</link></software>
</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../162/4106162.xml">
FSU Pthreads</link></entry>
<entry level="1" type="bullet">

 <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../856/856.xml">
Apple Inc.</link></company>
's <link>
Thread Manager</link></entry>
<entry level="1" type="bullet">

 <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../882/10097882.xml">
REALbasic</link></software>
 (includes an API for cooperative threading)</entry>
<entry level="1" type="bullet">

 <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../483/1239483.xml">
Netscape Portable Runtime</link></software>
 (includes a user-space fibers implementation)</entry>
</list>
</p>

</ss1>
<ss1>
<st>
Hybrid implementation examples</st>
<p>

<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../561/4710561.xml">
Scheduler activations</link> used by the NetBSD native POSIX threads library implementation (an N:M model as opposed to a 1:1 kernel or userspace implementation model)</entry>
<entry level="1" type="bullet">

 Marcel from the <link xlink:type="simple" xlink:href="../629/4705629.xml">
PM2</link> project.</entry>
</list>
</p>

</ss1>
</sec>
<sec>
<st>
See also</st>
<p>

<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../463/1594463.xml">
Win32 Thread Information Block</link></entry>
<entry level="1" type="bullet">

 Hardware: <link xlink:type="simple" xlink:href="../679/10520679.xml">
Multithreading (computer hardware)</link>, <link xlink:type="simple" xlink:href="../207/3503207.xml">
Multi-core (computing)</link>, <link xlink:type="simple" xlink:href="../021/315021.xml">
Simultaneous multithreading</link></entry>
<entry level="1" type="bullet">

 Theory: <link xlink:type="simple" xlink:href="../370/247370.xml">
Communicating sequential processes</link>, <link xlink:type="simple" xlink:href="../857/6857.xml">
Computer multitasking</link>, <link xlink:type="simple" xlink:href="../867/1324867.xml">
Message passing</link></entry>
<entry level="1" type="bullet">

 Problems: <link xlink:type="simple" xlink:href="../634/45634.xml">
Thread safety</link>, <system wordnetid="104377057" confidence="0.8">
<invertebrate wordnetid="101905661" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<arthropod wordnetid="101767661" confidence="0.8">
<bug wordnetid="102236355" confidence="0.8">
<insect wordnetid="102159955" confidence="0.8">
<animal wordnetid="100015388" confidence="0.8">
<link xlink:type="simple" xlink:href="../507/521507.xml">
Priority inversion</link></animal>
</insect>
</bug>
</arthropod>
</instrumentality>
</artifact>
</invertebrate>
</system>
</entry>
<entry level="1" type="bullet">

 Techniques: <link xlink:type="simple" xlink:href="../187/2853187.xml">
Protothreads</link>, <structure wordnetid="105726345" confidence="0.8">
<form wordnetid="105930736" confidence="0.8">
<link xlink:type="simple" xlink:href="../016/764016.xml">
Thread pool pattern</link></form>
</structure>
, <link xlink:type="simple" xlink:href="../864/554864.xml">
Lock-free and wait-free algorithms</link></entry>
</list>
</p>

</sec>
<sec>
<st>
References</st>

<p>

<reflist>
<entry id="1">
<weblink xlink:type="simple" xlink:href="http://msdn.microsoft.com/en-us/library/ms682402(VS.85).aspx">
CreateFiber, <it>MSDN''</it></weblink></entry>
</reflist>

<list>
<entry level="1" type="bullet">

David R. Butenhof: <it>Programming with POSIX Threads</it>, Addison-Wesley, ISBN 0-201-63392-2</entry>
<entry level="1" type="bullet">

Bradford Nichols, Dick Buttlar, Jacqueline Proulx Farell: <it>Pthreads Programming</it>, O'Reilly &amp; Associates, ISBN 1-56592-115-1</entry>
<entry level="1" type="bullet">

Charles J. Northrup: <it>Programming with UNIX Threads</it>, John Wiley &amp; Sons, ISBN 0-471-13751-0</entry>
<entry level="1" type="bullet">

Mark Walmsley: <it>Multi-Threaded Programming in C++</it>, Springer, ISBN 1-85233-146-1</entry>
<entry level="1" type="bullet">

Paul Hyde: <it>Java Thread Programming</it>, Sams, ISBN 0-672-31585-8</entry>
<entry level="1" type="bullet">

Bill Lewis: <it>Threads Primer: A Guide to Multithreaded Programming</it>, Prentice Hall, ISBN 0-13-443698-9</entry>
<entry level="1" type="bullet">

Steve Kleiman, Devang Shah, Bart Smaalders: <it>Programming With Threads</it>, SunSoft Press, ISBN 0-13-172389-8</entry>
<entry level="1" type="bullet">

Pat Villani: <it>Advanced WIN32 Programming: Files, Threads, and Process Synchronization</it>, Harpercollins Publishers, ISBN 0-87930-563-0</entry>
<entry level="1" type="bullet">

Jim Beveridge, Robert Wiener: <it>Multithreading Applications in Win32</it>, Addison-Wesley, ISBN 0-201-44234-5</entry>
<entry level="1" type="bullet">

Thuan Q. Pham, Pankaj K. Garg: <it>Multithreaded Programming with Windows NT</it>,  Prentice Hall, ISBN 0-13-120643-5</entry>
<entry level="1" type="bullet">

Len Dorfman, Marc J. Neuberger: <it>Effective Multithreading in OS/2</it>, McGraw-Hill Osborne Media, ISBN 0-07-017841-0</entry>
<entry level="1" type="bullet">

<physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<academician wordnetid="109759069" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<adult wordnetid="109605289" confidence="0.8">
<professional wordnetid="110480253" confidence="0.8">
<educator wordnetid="110045713" confidence="0.8">
<link xlink:type="simple" xlink:href="../251/1194251.xml">
Alan Burns</link></educator>
</professional>
</adult>
</scientist>
</academician>
</causal_agent>
</person>
</physical_entity>
, <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<link xlink:type="simple" xlink:href="../160/1896160.xml">
Andy Wellings</link></scientist>
</causal_agent>
</person>
</physical_entity>
: <it>Concurrency in ADA</it>, Cambridge University Press, ISBN 0-521-62911-X</entry>
<entry level="1" type="bullet">

Uresh Vahalia: <it>Unix Internals: the New Frontiers</it>, Prentice Hall, ISBN 0-13-101908-2</entry>
<entry level="1" type="bullet">

Alan L. Dennis:  <it>.Net Multithreading </it>, Manning Publications Company, ISBN 1-930110-54-5</entry>
<entry level="1" type="bullet">

<physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<employee wordnetid="110053808" confidence="0.8">
<link xlink:type="simple" xlink:href="../353/13867353.xml">
Tobin Titus</link></employee>
</causal_agent>
</worker>
</person>
</physical_entity>
, Fabio Claudio Ferracchiati, Srinivasa Sivakumar, Tejaswi Redkar, Sandra Gopikrishna: <it>C# Threading Handbook</it>, Peer Information Inc, ISBN 1-86100-829-5</entry>
<entry level="1" type="bullet">

<physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<employee wordnetid="110053808" confidence="0.8">
<link xlink:type="simple" xlink:href="../353/13867353.xml">
Tobin Titus</link></employee>
</causal_agent>
</worker>
</person>
</physical_entity>
, Fabio Claudio Ferracchiati, Srinivasa Sivakumar, Tejaswi Redkar, Sandra Gopikrishna: <it>Visual Basic .Net Threading Handbook</it>, Wrox Press Inc, ISBN 1-86100-713-2</entry>
</list>
</p>

</sec>
<sec>
<st>
External links</st>
<p>

<list>
<entry level="1" type="bullet">

Article "<weblink xlink:type="simple" xlink:href="http://today.java.net/pub/a/today/2008/01/31/query-by-slice-parallel-execute-join-thread-pool-pattern.html">
Query by Slice, Parallel Execute, and Join: A Thread Pool Pattern in Java</weblink>" by <link>
Binildas C. A.</link></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://arstechnica.com/paedia/h/hyperthreading/hyperthreading-1.html">
Ars Technica article about multithreading, etc</weblink></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.serpentine.com/~bos/threads-faq/">
Answers to frequently asked questions for comp.programming.threads</weblink></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.kegel.com/c10k.html">
The C10K problem</weblink></entry>
<entry level="1" type="bullet">

Article "<weblink xlink:type="simple" xlink:href="http://gotw.ca/publications/concurrency-ddj.htm">
The Free Lunch Is Over: A Fundamental Turn Toward Concurrency in Software</weblink>" by <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<computer_user wordnetid="109951274" confidence="0.8">
<programmer wordnetid="110481268" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<engineer wordnetid="109615807" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<employee wordnetid="110053808" confidence="0.8">
<link xlink:type="simple" xlink:href="../319/1451319.xml">
Herb Sutter</link></employee>
</causal_agent>
</engineer>
</worker>
</programmer>
</computer_user>
</person>
</physical_entity>
</entry>
<entry level="1" type="bullet">

Article "<weblink xlink:type="simple" xlink:href="http://www.computer.org/portal/site/computer/index.jsp?pageID=computer_level1_article&amp;TheCat=1005&amp;path=computer/homepage/0506&amp;file=cover.xml&amp;xsl=article.xsl">
The Problem with Threads</weblink>" by <link xlink:type="simple" xlink:href="../414/4221414.xml">
Edward Lee</link></entry>
<entry level="1" type="bullet">

Article "<weblink xlink:type="simple" xlink:href="http://www.codingwithoutcomments.com/2008/09/21/when-is-multi-threading-not-a-good-idea/">
When is Multi-Threading a bad idea?</weblink>" by <link>
Chris Reath</link></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.ibm.com/developerworks/library/l-posix1.html">
POSIX threads explained</weblink> by <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<computer_user wordnetid="109951274" confidence="0.8">
<programmer wordnetid="110481268" confidence="0.8">
<engineer wordnetid="109615807" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../709/436709.xml">
Daniel Robbins</link></causal_agent>
</engineer>
</programmer>
</computer_user>
</person>
</physical_entity>
</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.sun.com/software/whitepapers/solaris9/multithread.pdf">
Multithreading in the Solaris Operating Environment</weblink></entry>
</list>
</p>
<p>

<table style=";" class="navbox" cellspacing="0">
<row>
<col style="padding:2px;">
<table style="width:100%;background:transparent;color:inherit;;" class="nowraplinks collapsible autocollapse " cellspacing="0">
<row>
<header colspan="2" style=";" class="navbox-title">
<link xlink:type="simple" xlink:href="../162/145162.xml">
Parallel computing</link>topics</header>
</row>
<row style="height:2px;">

</row>
<row>
<col style=";;" class="navbox-group">
General</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<condition wordnetid="113920835" confidence="0.8">
<state wordnetid="100024720" confidence="0.8">
<problem wordnetid="114410605" confidence="0.8">
<difficulty wordnetid="114408086" confidence="0.8">
<link xlink:type="simple" xlink:href="../527/832527.xml">
High-performance computing</link></difficulty>
</problem>
</state>
</condition>
</col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
Parallelism</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-even">
<link xlink:type="simple" xlink:href="../148/14229148.xml">
Bit-level parallelism</link>&nbsp;·  <link xlink:type="simple" xlink:href="../960/245960.xml">
Instruction level parallelism</link>&nbsp;·  <link xlink:type="simple" xlink:href="../420/9467420.xml">
Data parallelism</link>&nbsp;·  <link xlink:type="simple" xlink:href="../070/9468070.xml">
Task parallelism</link></col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
Threads</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<link xlink:type="simple" xlink:href="../877/313877.xml">
Superthreading</link>&nbsp;·  <link xlink:type="simple" xlink:href="../443/151443.xml">
Hyperthreading</link></col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
Theory</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-even">
<link xlink:type="simple" xlink:href="../612/1448612.xml">
Speedup</link>&nbsp;·  <idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<rule wordnetid="105846054" confidence="0.8">
<link xlink:type="simple" xlink:href="../ury/24th_century.xml">
Amdahl's law</link></rule>
</concept>
</idea>
&nbsp;·  <class wordnetid="107997703" confidence="0.8">
<collection wordnetid="107951464" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<link xlink:type="simple" xlink:href="../349/222349.xml">
Flynn's taxonomy</link></group>
</collection>
</class>
 (<link xlink:type="simple" xlink:href="../630/1103630.xml">
SISD</link>&nbsp;&amp;bull;  <link xlink:type="simple" xlink:href="../359/55359.xml">
SIMD</link>&nbsp;&amp;bull;  <link xlink:type="simple" xlink:href="../666/991666.xml">
MISD</link>&nbsp;&amp;bull;  <link xlink:type="simple" xlink:href="../139/157139.xml">
MIMD</link>)&nbsp;·  <link xlink:type="simple" xlink:href="../721/3505721.xml">
Cost efficiency</link>&nbsp;·  <idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<rule wordnetid="105846054" confidence="0.8">
<link xlink:type="simple" xlink:href="../252/4243252.xml">
Gustafson's law</link></rule>
</concept>
</idea>
&nbsp;·  <link xlink:type="simple" xlink:href="../042/9453042.xml">
Karp-Flatt metric</link>&nbsp;·  <link xlink:type="simple" xlink:href="../068/15167068.xml">
Parallel slowdown</link></col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
Elements</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<link xlink:type="simple" xlink:href="../178/45178.xml">
Process</link>&nbsp;·  <link xlink:type="simple" xlink:href="../303/45303.xml">
Thread</link>&nbsp;·  <link xlink:type="simple" xlink:href="../712/5533712.xml">
Fiber</link>&nbsp;·  <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<model wordnetid="110324560" confidence="0.8">
<assistant wordnetid="109815790" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../675/956675.xml">
Parallel Random Access Machine</link></causal_agent>
</worker>
</assistant>
</model>
</person>
</physical_entity>
</col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
Coordination</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-even">
<link xlink:type="simple" xlink:href="../020/64020.xml">
Multiprocessing</link>&nbsp;·  <link xlink:type="simple" xlink:href="../679/10520679.xml">
Multithreading</link>&nbsp;·  <link xlink:type="simple" xlink:href="../857/6857.xml">
Multitasking</link>&nbsp;·  <link xlink:type="simple" xlink:href="../818/399818.xml">
Memory coherency</link>&nbsp;·  <link xlink:type="simple" xlink:href="../865/176865.xml">
Cache coherency</link>&nbsp;·  <link xlink:type="simple" xlink:href="../263/4736263.xml">
Barrier</link>&nbsp;·  <link xlink:type="simple" xlink:href="../017/4726017.xml">
Synchronization</link>&nbsp;·  <link xlink:type="simple" xlink:href="../501/8501.xml">
Distributed computing</link>&nbsp;·  <link xlink:type="simple" xlink:href="../373/49373.xml">
Grid computing</link></col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
<link xlink:type="simple" xlink:href="../311/5311.xml">
Programming</link></col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<paradigm wordnetid="113804375" confidence="0.8">
<linguistic_relation wordnetid="113797142" confidence="0.8">
<inflection wordnetid="113803782" confidence="0.8">
<grammatical_relation wordnetid="113796779" confidence="0.8">
<link xlink:type="simple" xlink:href="../375/2242375.xml">
Programming model</link></grammatical_relation>
</inflection>
</linguistic_relation>
</paradigm>
&nbsp;·  <link xlink:type="simple" xlink:href="../888/3453888.xml">
Implicit parallelism</link>&nbsp;·  <link xlink:type="simple" xlink:href="../332/3095332.xml">
Explicit parallelism</link></col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
<link xlink:type="simple" xlink:href="../310/5310.xml">
Hardware</link></col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-even">
<link xlink:type="simple" xlink:href="../896/18949896.xml">
Computer cluster</link>&nbsp;·  <link xlink:type="simple" xlink:href="../542/66542.xml">
Beowulf</link>&nbsp;·  <link xlink:type="simple" xlink:href="../318/50318.xml">
Symmetric multiprocessing</link>&nbsp;·  <link xlink:type="simple" xlink:href="../643/40643.xml">
Non-Uniform Memory Access</link>&nbsp;·  <link xlink:type="simple" xlink:href="../307/910307.xml">
Cache only memory architecture</link>&nbsp;·  <link xlink:type="simple" xlink:href="../506/2576506.xml">
Asymmetric multiprocessing</link>&nbsp;·  <link xlink:type="simple" xlink:href="../021/315021.xml">
Simultaneous multithreading</link>&nbsp;·  <link xlink:type="simple" xlink:href="../653/825653.xml">
Shared memory</link>&nbsp;·  <link xlink:type="simple" xlink:href="../887/234887.xml">
Distributed memory</link>&nbsp;·  <link xlink:type="simple" xlink:href="../049/584049.xml">
Massive parallel processing</link>&nbsp;·  <link xlink:type="simple" xlink:href="../702/51702.xml">
Superscalar processing</link>&nbsp;·  <link xlink:type="simple" xlink:href="../205/58205.xml">
Vector processing</link>&nbsp;·  <link xlink:type="simple" xlink:href="../153/37153.xml">
Supercomputer</link>&nbsp;·  <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<model wordnetid="110324560" confidence="0.8">
<assistant wordnetid="109815790" confidence="0.8">
<paradigm wordnetid="113804375" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<linguistic_relation wordnetid="113797142" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<inflection wordnetid="113803782" confidence="0.8">
<grammatical_relation wordnetid="113796779" confidence="0.8">
<link xlink:type="simple" xlink:href="../727/2786727.xml">
Stream processing</link></grammatical_relation>
</inflection>
</causal_agent>
</linguistic_relation>
</worker>
</paradigm>
</assistant>
</model>
</person>
</physical_entity>
&nbsp;·  <substance wordnetid="100019613" confidence="0.8">
<paper wordnetid="114974264" confidence="0.8">
<card wordnetid="102962545" confidence="0.8">
<part wordnetid="113809207" confidence="0.8">
<material wordnetid="114580897" confidence="0.8">
<link xlink:type="simple" xlink:href="../939/1268939.xml">
GPGPU</link></material>
</part>
</card>
</paper>
</substance>
</col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
<link xlink:type="simple" xlink:href="../309/5309.xml">
Software</link></col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<link xlink:type="simple" xlink:href="../843/399843.xml">
Distributed shared memory</link> &nbsp;·  <link xlink:type="simple" xlink:href="../765/416765.xml">
Application checkpointing</link>&nbsp;·  <link xlink:type="simple" xlink:href="../129/2738129.xml">
Warewulf</link></col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
<link xlink:type="simple" xlink:href="../ury/24th_century.xml">
API</link>s</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-even">
<standard wordnetid="107260623" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../671/634671.xml">
POSIX Threads</link></system_of_measurement>
</standard>
&nbsp;·  <link xlink:type="simple" xlink:href="../842/381842.xml">
OpenMP</link>&nbsp;·  <link xlink:type="simple" xlink:href="../466/221466.xml">
Message Passing Interface (MPI)</link>&nbsp;·  <link xlink:type="simple" xlink:href="../616/1057616.xml">
UPC</link>&nbsp;·  <link xlink:type="simple" xlink:href="../077/11625077.xml">
Intel Threading Building Blocks</link>&nbsp;·  <structure wordnetid="104341686" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<area wordnetid="102735688" confidence="0.8">
<library wordnetid="103660909" confidence="0.8">
<room wordnetid="104105893" confidence="0.8">
<link xlink:type="simple" xlink:href="../324/711324.xml#xpointer(//*[./st=%22Multithreading+=E2=80=93+Boost.Thread%22])">
Boost.Thread</link></room>
</library>
</area>
</artifact>
</structure>
</col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
Problems</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../712/1738712.xml">
Embarrassingly parallel</link></instrumentality>
</artifact>
</system>
&nbsp;·  <condition wordnetid="113920835" confidence="0.8">
<state wordnetid="100024720" confidence="0.8">
<problem wordnetid="114410605" confidence="0.8">
<difficulty wordnetid="114408086" confidence="0.8">
<link xlink:type="simple" xlink:href="../754/439754.xml">
Grand Challenge</link></difficulty>
</problem>
</state>
</condition>
&nbsp;·  <plant_part wordnetid="113086908" confidence="0.8">
<natural_object wordnetid="100019128" confidence="0.8">
<kernel wordnetid="113137010" confidence="0.8">
<link xlink:type="simple" xlink:href="../798/12332798.xml">
Software lockout</link></kernel>
</natural_object>
</plant_part>
</col>
</row>
</table>
</col>
</row>
</table>
</p>



</sec>
</bdy>
</article>
