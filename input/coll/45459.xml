<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 15:43:13[mciao0826] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>Control flow</title>
<id>45459</id>
<revision>
<id>235522239</id>
<timestamp>2008-09-01T04:41:33Z</timestamp>
<contributor>
<username>La Pianista</username>
<id>5877666</id>
</contributor>
</revision>
<categories>
<category>Control flow</category>
<category>Articles with example Ada code</category>
</categories>
</header>
<bdy>

Not to be confused with <link xlink:type="simple" xlink:href="../428/1619428.xml">
flow control</link>.
In <link xlink:type="simple" xlink:href="../323/5323.xml">
computer science</link> <b>control flow</b> (or alternatively, flow of control) refers to the order in which the individual <link xlink:type="simple" xlink:href="../656/938656.xml">
statements</link>, <link xlink:type="simple" xlink:href="../801/3149801.xml">
instructions</link> or <link xlink:type="simple" xlink:href="../988/40988.xml">
function call</link>s of an <link xlink:type="simple" xlink:href="../847/197847.xml">
imperative</link> or <link xlink:type="simple" xlink:href="../933/10933.xml">
functional</link> <link xlink:type="simple" xlink:href="../783/5783.xml">
program</link> are <link xlink:type="simple" xlink:href="../206/418206.xml">
executed</link> or evaluated.<p>

Within an imperative <link xlink:type="simple" xlink:href="../015/23015.xml">
programming language</link>, a <b>control flow statement</b> is a statement whose execution results in a decision being made as to which of two or more control flows should be followed. For <link xlink:type="simple" xlink:href="../289/319289.xml">
non-strict</link> functional languages, functions and language constructs exist to achieve the same ends, but they are not necessarily called control flow statements.</p>
<p>

The kinds of control flow statements supported by different languages vary, but can be categorized by their effect:</p>
<p>

<list>
<entry level="1" type="bullet">

 continuation at a different statement (<link xlink:type="simple" xlink:href="../210/1013210.xml">
jump</link>),</entry>
<entry level="1" type="bullet">

 executing a set of statements only if some condition is met (choice),</entry>
<entry level="1" type="bullet">

 executing a set of statements zero or more times, until some condition is met (loop),</entry>
<entry level="1" type="bullet">

 executing a set of distant statements, after which the flow of control may possibly return (<link xlink:type="simple" xlink:href="../988/40988.xml">
subroutine</link>s, <link xlink:type="simple" xlink:href="../800/243800.xml">
coroutine</link>s, and <link xlink:type="simple" xlink:href="../189/505189.xml">
continuation</link>s),</entry>
<entry level="1" type="bullet">

 stopping the program, preventing any further execution (halt).</entry>
</list>
</p>
<p>

<link xlink:type="simple" xlink:href="../289/15289.xml">
Interrupt</link>s and <link xlink:type="simple" xlink:href="../602/938602.xml">
signals</link> are low-level mechanisms that can alter the flow of control in a way similar to a subroutine, but usually occur as a response to some external stimulus or event rather than execution of a control flow statement. <paradigm wordnetid="113804375" confidence="0.8">
<linguistic_relation wordnetid="113797142" confidence="0.8">
<inflection wordnetid="113803782" confidence="0.8">
<grammatical_relation wordnetid="113796779" confidence="0.8">
<link xlink:type="simple" xlink:href="../647/217647.xml">
Self-modifying code</link></grammatical_relation>
</inflection>
</linguistic_relation>
</paradigm>
 can also be used to affect control flow through its <link xlink:type="simple" xlink:href="../519/29519.xml">
side effects</link>, but usually does not involve an explicit control flow statement (an exception being the ALTER verb in <link xlink:type="simple" xlink:href="../799/6799.xml">
COBOL</link>).</p>
<p>

At the level of <link xlink:type="simple" xlink:href="../683/20683.xml">
machine</link> or <link xlink:type="simple" xlink:href="../368/1368.xml">
assembly language</link>, control flow instructions usually work by altering the <link xlink:type="simple" xlink:href="../944/59944.xml">
program counter</link>.  For some <link xlink:type="simple" xlink:href="../218/5218.xml">
CPUs</link> the only control flow instructions available are conditional or unconditional <idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<link xlink:type="simple" xlink:href="../210/1013210.xml">
branch</link></concept>
</idea>
es (sometimes called jumps).</p>

<sec>
<st>
 Primitives </st>

<ss1>
<st>
 Labels </st>

<p>

<indent level="1">

<it>Main article: <message wordnetid="106598915" confidence="0.8">
<subject wordnetid="106599788" confidence="0.8">
<link xlink:type="simple" xlink:href="../573/14124573.xml">
Label (programming language)</link></subject>
</message>
</it>
</indent>
A <message wordnetid="106598915" confidence="0.8">
<subject wordnetid="106599788" confidence="0.8">
<link xlink:type="simple" xlink:href="../573/14124573.xml">
label</link></subject>
</message>
 is an explicit name or number assigned to a fixed position within the <link xlink:type="simple" xlink:href="../661/27661.xml">
source code</link>, and which may be referenced by control flow statements appearing elsewhere in the source code.  Other than marking a position within the source code a label has no effect.</p>
<p>

<link xlink:type="simple" xlink:href="../536/585536.xml">
Line number</link>s are a kind of label used in some languages (e.g. <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../168/11168.xml">
Fortran</link></programming_language>
 and <link xlink:type="simple" xlink:href="../015/4015.xml">
BASIC</link>), which are <link xlink:type="simple" xlink:href="../346/176346.xml">
whole number</link>s placed at the beginning of each line of text within the source code.  Languages which use line numbers often impose the constraint that the line numbers must increase in value in each subsequent line, but may not require that they be consecutive.  For example, in BASIC:</p>

<p>

10 LET X = 3
20 PRINT X</p>

<p>

In other languages such as <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../021/6021.xml">
C</link></programming_language>
 and <link xlink:type="simple" xlink:href="../242/1242.xml">
Ada</link> a label is an <link xlink:type="simple" xlink:href="../250/41250.xml">
identifier</link>, usually appearing at the beginning of a line and immediately followed by a colon.  For example, in C:</p>

<p>

Success: printf ("The operation was successful.\n");</p>

<p>

The <link xlink:type="simple" xlink:href="../453/1453.xml">
Algol 60</link> language allowed both whole numbers and identifiers as labels
(both attached by colons to the following statement), but few if any other variants
of Algol allowed whole numbers.</p>

</ss1>
<ss1>
<st>
 Goto </st>

<p>

<indent level="1">

<it>Main article: <link xlink:type="simple" xlink:href="../853/197853.xml">
GOTO</link></it>
</indent>

The <b>goto</b> statement (a combination of the English words  and , and pronounced accordingly) is the most basic form of unconditional transfer of control.</p>
<p>

Although the <link xlink:type="simple" xlink:href="../995/2633995.xml">
keyword</link> may either be in upper or lower case depending on the language, it is usually written as:
<b>goto</b> <it>label</it>
The effect of a goto statement is to cause the next statement to be executed to always be the statement appearing immediately after (or at) the indicated label.</p>
<p>

Goto statements have been <link xlink:type="simple" xlink:href="../368/895368.xml">
considered harmful</link> by many computer scientists, notably <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../018/10018.xml">
Dijkstra</link></scientist>
</person>
.</p>

</ss1>
<ss1>
<st>
 Subroutines </st>


<p>

<indent level="1">

<it>Main article: <link xlink:type="simple" xlink:href="../988/40988.xml">
Subroutine</link></it>
</indent>

The terminology for <link xlink:type="simple" xlink:href="../988/40988.xml">
subroutine</link>s varies; they may alternatively be known as routines, procedures, functions (especially if they return results) or methods (especially if they belong to <link xlink:type="simple" xlink:href="../392/7392.xml">
classes</link> or <link xlink:type="simple" xlink:href="../181/3647181.xml">
type class</link>es).</p>
<p>

In the 1950's, computer memories were very small by current standards
so subroutines were used primarily to reduce program size;
a piece of code was written once and then used many times
from various other places in the program.</p>
<p>

Nowadays, subroutines are more frequently used to help make a program more structured,
e.g. by isolating some particular algorithm or hiding some particular data access method.
If many programmers are working on a single program,
subroutines are one kind of <link xlink:type="simple" xlink:href="../133/939133.xml">
modularity</link> that can help split up the work.</p>

</ss1>
</sec>
<sec>
<st>
 Minimal structured control flow </st>

<p>

(See also <statement wordnetid="106722453" confidence="0.8">
<message wordnetid="106598915" confidence="0.8">
<theorem wordnetid="106752293" confidence="0.8">
<paradigm wordnetid="113804375" confidence="0.8">
<linguistic_relation wordnetid="113797142" confidence="0.8">
<proposition wordnetid="106750804" confidence="0.8">
<inflection wordnetid="113803782" confidence="0.8">
<grammatical_relation wordnetid="113796779" confidence="0.8">
<link xlink:type="simple" xlink:href="../138/1482138.xml">
Structured program theorem</link></grammatical_relation>
</inflection>
</proposition>
</linguistic_relation>
</paradigm>
</theorem>
</message>
</statement>
.)
In May 1966, Böhm and Jacopini published an article in Communications of the ACM
which showed that any program with <b>goto</b>s could be transformed into a goto-free form
involving only choice (IF THEN ELSE) and loops (WHILE condition DO xxx),
possibly with duplicated code and/or the addition of Boolean variables (true/false flags).
Later authors have shown that choice can be replaced by loops (and yet more Boolean variables).</p>
<p>

The fact that such minimalism is possible does not necessarily mean that it is desirable;
after all, computers theoretically only need 
<physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<model wordnetid="110324560" confidence="0.8">
<assistant wordnetid="109815790" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../713/151713.xml">
one machine instruction</link></causal_agent>
</worker>
</assistant>
</model>
</person>
</physical_entity>

(subtract one number from another and branch if the result is negative),
but practical computers have dozens or even hundreds of machine instructions.</p>
<p>

What Böhm and Jacopini's article showed was that all programs could be goto-free.
Other research showed that control structures with one entry and one exit were
much easier to understand than any other form,
primarily because they could be used anywhere as a statement
without disrupting the control flow. In other words, they were <it>composable</it>. (Later developments, such as <link xlink:type="simple" xlink:href="../289/319289.xml">
non-strict programming language</link>s - and more recently, composable <link xlink:type="simple" xlink:href="../707/1478707.xml">
software transactions</link> - have continued this line of thought, making components of programs even more freely composable.)</p>

</sec>
<sec>
<st>
 Control structures in practice </st>

<p>

Most programming languages with control structures have an initial keyword which indicates the type of control structure involved. Languages then divide as to whether or not control structures have a final keyword.</p>
<p>

<list>
<entry level="1" type="bullet">

 No final keyword: <link xlink:type="simple" xlink:href="../453/1453.xml">
Algol 60</link>, <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../021/6021.xml">
C</link></programming_language>
, <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../038/72038.xml">
C++</link></programming_language>
, <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../630/13630.xml">
Haskell</link></programming_language>
, <message wordnetid="106598915" confidence="0.8">
<request wordnetid="106513366" confidence="0.8">
<link xlink:type="simple" xlink:href="../881/15881.xml">
Java</link></request>
</message>
, <link xlink:type="simple" xlink:href="../773/23773.xml">
Pascal</link>, <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../939/23939.xml">
Perl</link></programming_language>
, <physical_entity wordnetid="100001930" confidence="0.8">
<communicator wordnetid="109610660" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<compiler wordnetid="109946957" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<language wordnetid="106282651" confidence="0.8">
<writer wordnetid="110794014" confidence="0.8">
<link xlink:type="simple" xlink:href="../131/24131.xml">
PHP</link></writer>
</language>
</causal_agent>
</compiler>
</person>
</communicator>
</physical_entity>
, <link xlink:type="simple" xlink:href="../708/23708.xml">
PL/I</link>, <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../862/23862.xml">
Python</link></programming_language>
, <software wordnetid="106566077" confidence="0.9508927676800064">
<programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../871/14465871.xml">
PowerShell</link></programming_language>
</software>
. Such languages need some way of grouping statements together:</entry>
<entry level="2" type="bullet">

 Algol 60 and Pascal : begin ... end</entry>
<entry level="2" type="bullet">

 C, C++, Java, Perl, PHP, and PowerShell: <link xlink:type="simple" xlink:href="../103/560103.xml">
curly brackets</link> { ... }</entry>
<entry level="2" type="bullet">

 PL/1: DO ... END</entry>
<entry level="2" type="bullet">

 Python: uses indentation level (see <message wordnetid="106598915" confidence="0.8">
<subject wordnetid="106599788" confidence="0.8">
<link xlink:type="simple" xlink:href="../595/605595.xml">
Off-side rule</link></subject>
</message>
)</entry>
<entry level="2" type="bullet">

 Haskell: either indentation level or curly brackets can be used, and they can be freely mixed</entry>
<entry level="1" type="bullet">

 Final keyword: <link xlink:type="simple" xlink:href="../242/1242.xml">
Ada</link>, <link xlink:type="simple" xlink:href="../880/692880.xml">
Algol 68</link>, <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../259/81259.xml">
Modula-2</link></programming_language>
, <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../168/11168.xml">
Fortran 77</link></programming_language>
, <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../382/6097382.xml">
Visual Basic</link></programming_language>
. The forms of the final keyword vary:</entry>
<entry level="2" type="bullet">

 Ada: final keyword is end + <it>space</it> + initial keyword e.g. if ... end if, loop ... end loop</entry>
<entry level="2" type="bullet">

 Algol 68: initial keyword spelled backwards e.g. if ... fi, case ... esac</entry>
<entry level="2" type="bullet">

 Fortran 77: final keyword is end + initial keyword e.g. IF ... ENDIF, DO ... ENDDO</entry>
<entry level="2" type="bullet">

 Modula-2: same final keyword end for everything</entry>
<entry level="2" type="bullet">

 Visual Basic: every control structure has its own keyword. If ... End If; For ... Next; Do ... Loop</entry>
</list>
</p>

</sec>
<sec>
<st>
 Choice </st>


<p>

<indent level="1">

<it>Main article: <idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<link xlink:type="simple" xlink:href="../839/462839.xml">
Conditional (programming)</link></concept>
</idea>
</it>
</indent>

</p>
</sec>
<sec>
<st>
 Loops </st>

<p>

A loop is a sequence of statements which is specified once but which may be carried out several times in succession.
The code "inside" the loop (the <it>body</it> of the loop, shown below as <it>xxx</it>) is obeyed a specified number of times,
or once for each of a collection of items, or until some condition is met.</p>
<p>

In some languages, such as <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../119/28119.xml">
Scheme</link></programming_language>
, loops are often expressed using <link xlink:type="simple" xlink:href="../742/30742.xml">
tail recursion</link> rather than explicit looping constructs.</p>

<ss1>
<st>
 Count-controlled loops </st>


<p>

<indent level="1">

<it>Main article: <link xlink:type="simple" xlink:href="../924/468924.xml">
For loop</link></it>
</indent>

Most programming languages have constructions for repeating a loop a certain number of times.
Note that if N is less than 1 in these examples
then the language may specify that the body is skipped completely, or that the body is executed just once with N = 1.
In most cases counting can go downwards instead of upwards
and step sizes other than 1 can be used.</p>
<p>

FOR I = 1 TO N            <b>for</b> I := 1 <b>to</b> N <b>do</b> <b>begin</b>
xxx                       xxx
NEXT I                    <b>end</b>;</p>
<p>

DO I = 1,N                <b>for</b> ( I=1; I=N; ++I ) {
xxx                       xxx
END DO                    }</p>

<p>

<indent level="1">

<it>See also: <link xlink:type="simple" xlink:href="../224/1039224.xml">
Loop counter</link></it>
</indent>

In many programming languages, only integers can be reliably used in a count-controlled loop. Floating-point numbers are represented imprecisely due to hardware constraints, so a loop such as
<b>for</b> X := 0.1 <b>step</b> 0.1 <b>to</b> 1.0 <b>do</b>
might be repeated 9 or 10 times, depending on rounding errors and/or the hardware and/or the compiler version. Furthermore, if the increment of X occurs by repeated addition, accumulated rounding errors may mean that the value of X in each iteration can differ quite significantly from the expected sequence 0.1, 0.2, 0.3, ..., 1.0.</p>

</ss1>
<ss1>
<st>
 Condition-controlled loops </st>


<p>

<indent level="1">

<it>Main article: <link xlink:type="simple" xlink:href="../915/468915.xml">
While loop</link></it>
</indent>

Again, most programming languages have constructions
for repeating a loop until some condition changes.
Note that some variations place the test at the start of the loop,
while others have the test at the end of the loop.
In the former case the body may be skipped completely,
while in the latter case the body is always obeyed at least once.</p>
<p>

DO WHILE (test)           <b>repeat</b> 
xxx                       xxx 
LOOP                      <b>until</b> test;</p>
<p>

<b>while</b> (test) {            <b>do</b>
xxx                       xxx
}                         <b>while</b> (test);</p>
<p>

See also <link xlink:type="simple" xlink:href="../612/863612.xml">
Do while loop</link>.</p>

</ss1>
<ss1>
<st>
 Collection-controlled loops </st>

<p>

<indent level="1">

<it>Main article: <link xlink:type="simple" xlink:href="../068/623068.xml">
Foreach</link></it>
</indent>
A few programming languages (e.g. <link xlink:type="simple" xlink:href="../242/1242.xml">
Ada</link>, <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../319/28319.xml">
Smalltalk</link></programming_language>
, <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../939/23939.xml">
Perl</link></programming_language>
, <message wordnetid="106598915" confidence="0.8">
<request wordnetid="106513366" confidence="0.8">
<link xlink:type="simple" xlink:href="../881/15881.xml">
Java</link></request>
</message>
, <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../196/2356196.xml">
C#</link></programming_language>
, <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../382/6097382.xml">
Visual Basic</link></programming_language>
) have special constructs which allow implicitly looping through all elements of an array, or all members of a set or collection.</p>
<p>

someCollection <b>do</b>: [:eachElement |xxx].</p>
<p>

<b>foreach</b> someArray { xxx }</p>
<p>

Collection coll; <b>for</b> (String s : coll) {}</p>
<p>

<b>foreach</b> (<b>string</b> s <b>in</b> myStringCollection) { xxx }</p>
<p>

$someCollection | ForEach-Object { $_ }</p>

</ss1>
<ss1>
<st>
 General iteration </st>
<p>

General iteration constructs such as C's <b>for</b> statement and <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../068/6068.xml">
Common Lisp</link></programming_language>
's <b>do</b> form can be used to express any of the above sorts of loops, as well as others -- such as looping over a number of collections in parallel. Where a more specific looping construct can be used, it is usually preferred over the general iteration construct, since it often makes the purpose of the expression more clear.</p>

</ss1>
<ss1>
<st>
 <parlance wordnetid="107081177" confidence="0.8">
<invertebrate wordnetid="101905661" confidence="0.8">
<arthropod wordnetid="101767661" confidence="0.8">
<formulation wordnetid="107069948" confidence="0.8">
<bug wordnetid="102236355" confidence="0.8">
<insect wordnetid="102159955" confidence="0.8">
<expressive_style wordnetid="107066659" confidence="0.8">
<animal wordnetid="100015388" confidence="0.8">
<link xlink:type="simple" xlink:href="../273/45273.xml">
Infinite loop</link></animal>
</expressive_style>
</insect>
</bug>
</formulation>
</arthropod>
</invertebrate>
</parlance>
s </st>
<p>

Sometimes it is desirable for a program to loop forever, or until an exceptional condition such as an error arises. For instance, an event-driven program may be intended to loop forever handling events as they occur, only stopping when the process is killed by the operator.</p>
<p>

More often, an infinite loop is due to a programming error in a condition-controlled loop, wherein the loop condition is never changed within the loop.</p>

</ss1>
<ss1>
<st>
 Continuation with next iteration </st>

<p>

Sometimes within the body of a loop there is a desire to skip the remainder of the loop body and continue with the next iteration of the loop.  Some languages provide a statement such as <b>continue</b> or <b>skip</b> which will do this.  The effect is to prematurely terminate the innermost loop body and then resume as normal with the next iteration.  If the iteration is the last one in the loop, the effect is to terminate the entire loop early.</p>

</ss1>
<ss1>
<st>
 Early exit from loops </st>

<p>

When using a count-controlled loop to search through a table, it might be desirable to stop searching as soon as the required item is found. Some programming languages provide a statement such as <b>break</b> or <b>exit</b>, whose effect is to terminate the current loop immediately and transfer control to the statement immediately following that loop. Things can get a bit messy if searching a multi-dimensional table using nested loops (see Missing Control Structures below).</p>
<p>

The following example is done in <link xlink:type="simple" xlink:href="../242/1242.xml">
Ada</link> which supports both <it><link xlink:type="simple" xlink:href="../459/45459.xml#xpointer(//*[./st=%22Early+exit+from+loops%22])">
early exit from loops</link></it> and <it><link xlink:type="simple" xlink:href="../459/45459.xml#xpointer(//*[./st=%22Loop+with+test+in+the+middle%22])">
loops with test in the middle</link></it>. Both features are very similar and comparing both code snippets will show the difference: <it>early exit</it> needs to be combined with an <b>if</b> statement while a <it>condition in the middle</it> is a self contained construct.</p>

<p>

with Ada.Text IO;
with Ada.Integer Text IO;</p>
<p>

procedure Print_Squares is 
X : Integer;
begin
Read_Data : loop
Ada.Integer Text IO.Get(X);
exit Read_Data when X = 0;
Ada.Text IO.Put (X * X);
Ada.Text IO.New_Line;
end loop Read_Data;
end Print_Squares;</p>

<p>

<programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../862/23862.xml">
Python</link></programming_language>
 supports conditional execution of code depending on whether a loop was exited early (with a break statement) or not by using a else-clause with the loop.  For example,</p>

<p>

for n in set_of_numbers:
if isprime(n):
print "Set contains a prime number"
break
else:
print "Set did not contain any prime numbers"</p>

<p>

Note that the else clause in the above example is attached to the for statement, and not the inner if statement.  Both Python's for and while loops support such an else clause, which is executed only if early exit of the loop did not occur.</p>

</ss1>
<ss1>
<st>
 Loop system cross reference table </st>

<p>

<table class="wikitable">
<header rowspan="2">
<link xlink:type="simple" xlink:href="../015/23015.xml">
Programming language</link></header>
<header colspan="3">
conditional</header>
<header colspan="4">
loop</header>
<header rowspan="2">
early exit</header>
<header rowspan="2">
continuation</header>
<row>
<header>
begin</header>
<header>
middle</header>
<header>
end</header>
<header>
count</header>
<header>
collection</header>
<header>
general</header>
<header>
 infinite <link xlink:type="simple" xlink:href="#xpointer(//cite[@id=%22endnote_loop_infinitea%22])">
[1]</link></header>
</row>
<row>
<col>
 <link xlink:type="simple" xlink:href="../242/1242.xml">
Ada</link></col>
<col style="background:#90ff90; color:black;" class="table-yes">
Yes</col>
<col style="background:#90ff90; color:black;" class="table-yes">
Yes</col>
<col style="background:#90ff90; color:black;" class="table-yes">
Yes</col>
<col style="background:#90ff90; color:black;" class="table-yes">
Yes</col>
<col style="background: #ffffdd; color: black;" class="table-partial">
arrays</col>
<col style="background:#ff9090; color:black;" class="table-no">
No</col>
<col style="background:#90ff90; color:black;" class="table-yes">
Yes</col>
<col style="background:#90ff90; color:black;" class="table-yes">
deep nested</col>
<col style="background:#ff9090; color:black;" class="table-no">
No</col>
</row>
<row>
<col>
 <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../021/6021.xml">
C</link></programming_language>
</col>
<col style="background:#90ff90; color:black;" class="table-yes">
Yes</col>
<col style="background:#ff9090; color:black;" class="table-no">
No</col>
<col style="background:#90ff90; color:black;" class="table-yes">
Yes</col>
<col style="background:#ff9090; color:black;" class="table-no">
 No <link xlink:type="simple" xlink:href="#xpointer(//cite[@id=%22endnote_loop_fora%22])">
[2]</link></col>
<col style="background:#ff9090; color:black;" class="table-no">
No</col>
<col style="background:#90ff90; color:black;" class="table-yes">
Yes</col>
<col style="background:#ff9090; color:black;" class="table-no">
No</col>
<col style="background: #ffffdd; color: black;" class="table-partial">
 deep nested <link xlink:type="simple" xlink:href="#xpointer(//cite[@id=%22endnote_deep_break_ca%22])">
[3]</link></col>
<col style="background:#90ff90; color:black;" class="table-yes">
Yes</col>
</row>
<row>
<col>
 <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../038/72038.xml">
C++</link></programming_language>
</col>
<col style="background:#90ff90; color:black;" class="table-yes">
Yes</col>
<col style="background:#ff9090; color:black;" class="table-no">
No</col>
<col style="background:#90ff90; color:black;" class="table-yes">
Yes</col>
<col style="background:#ff9090; color:black;" class="table-no">
 No <link xlink:type="simple" xlink:href="#xpointer(//cite[@id=%22endnote_loop_forb%22])">
[2]</link></col>
<col style="background:#ff9090; color:black;" class="table-no">
No</col>
<col style="background:#90ff90; color:black;" class="table-yes">
Yes</col>
<col style="background:#ff9090; color:black;" class="table-no">
No</col>
<col style="background: #ffffdd; color: black;" class="table-partial">
 deep nested <link xlink:type="simple" xlink:href="#xpointer(//cite[@id=%22endnote_deep_break_cb%22])">
[3]</link></col>
<col style="background:#90ff90; color:black;" class="table-yes">
Yes</col>
</row>
<row>
<col>
 <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../196/2356196.xml">
C#</link></programming_language>
</col>
<col style="background:#90ff90; color:black;" class="table-yes">
Yes</col>
<col style="background:#ff9090; color:black;" class="table-no">
No</col>
<col style="background:#90ff90; color:black;" class="table-yes">
Yes</col>
<col style="background:#ff9090; color:black;" class="table-no">
 No <link xlink:type="simple" xlink:href="#xpointer(//cite[@id=%22endnote_loop_forc%22])">
[2]</link></col>
<col style="background:#90ff90; color:black;" class="table-yes">
Yes</col>
<col style="background:#90ff90; color:black;" class="table-yes">
Yes</col>
<col style="background:#ff9090; color:black;" class="table-no">
No</col>
<col style="background: #ffffdd; color: black;" class="table-partial">
 deep nested <link xlink:type="simple" xlink:href="#xpointer(//cite[@id=%22endnote_deep_break_cc%22])">
[3]</link></col>
<col style="background:#90ff90; color:black;" class="table-yes">
Yes</col>
</row>
<row>
<col>
 <link>
FORTRAN 77</link></col>
<col style="background:#90ff90; color:black;" class="table-yes">
Yes</col>
<col style="background:#ff9090; color:black;" class="table-no">
No</col>
<col style="background:#ff9090; color:black;" class="table-no">
No</col>
<col style="background:#90ff90; color:black;" class="table-yes">
Yes</col>
<col style="background:#ff9090; color:black;" class="table-no">
No</col>
<col style="background:#ff9090; color:black;" class="table-no">
No</col>
<col style="background:#ff9090; color:black;" class="table-no">
No</col>
<col style="background: #ffffdd; color: black;" class="table-partial">
one level</col>
<col style="background:#90ff90; color:black;" class="table-yes">
Yes</col>
</row>
<row>
<col>
 <link>
Fortran 90</link></col>
<col style="background:#90ff90; color:black;" class="table-yes">
Yes</col>
<col style="background:#ff9090; color:black;" class="table-no">
No</col>
<col style="background:#ff9090; color:black;" class="table-no">
No</col>
<col style="background:#90ff90; color:black;" class="table-yes">
Yes</col>
<col style="background:#ff9090; color:black;" class="table-no">
No</col>
<col style="background:#ff9090; color:black;" class="table-no">
No</col>
<col style="background:#90ff90; color:black;" class="table-yes">
Yes</col>
<col style="background:#90ff90; color:black;" class="table-yes">
deep nested</col>
<col style="background:#90ff90; color:black;" class="table-yes">
Yes</col>
</row>
<row>
<col>
 <message wordnetid="106598915" confidence="0.8">
<request wordnetid="106513366" confidence="0.8">
<link xlink:type="simple" xlink:href="../881/15881.xml">
Java</link></request>
</message>
</col>
<col style="background:#90ff90; color:black;" class="table-yes">
Yes</col>
<col style="background:#ff9090; color:black;" class="table-no">
No</col>
<col style="background:#90ff90; color:black;" class="table-yes">
Yes</col>
<col style="background:#ff9090; color:black;" class="table-no">
 No <link xlink:type="simple" xlink:href="#xpointer(//cite[@id=%22endnote_loop_ford%22])">
[2]</link></col>
<col style="background:#90ff90; color:black;" class="table-yes">
Yes</col>
<col style="background:#90ff90; color:black;" class="table-yes">
Yes</col>
<col style="background:#ff9090; color:black;" class="table-no">
No</col>
<col style="background:#90ff90; color:black;" class="table-yes">
deep nested</col>
<col style="background:#90ff90; color:black;" class="table-yes">
Yes</col>
</row>
<row>
<col>
 <physical_entity wordnetid="100001930" confidence="0.8">
<communicator wordnetid="109610660" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<compiler wordnetid="109946957" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<language wordnetid="106282651" confidence="0.8">
<writer wordnetid="110794014" confidence="0.8">
<link xlink:type="simple" xlink:href="../131/24131.xml">
PHP</link></writer>
</language>
</causal_agent>
</compiler>
</person>
</communicator>
</physical_entity>
</col>
<col style="background:#90ff90; color:black;" class="table-yes">
Yes</col>
<col style="background:#ff9090; color:black;" class="table-no">
No</col>
<col style="background:#90ff90; color:black;" class="table-yes">
Yes</col>
<col style="background:#ff9090; color:black;" class="table-no">
 No <link xlink:type="simple" xlink:href="#xpointer(//cite[@id=%22endnote_loop_fore%22])">
[2]</link></col>
<col style="background:#90ff90; color:black;" class="table-yes">
 Yes <link xlink:type="simple" xlink:href="#xpointer(//cite[@id=%22endnote_loop_phpforeacha%22])">
[4]</link></col>
<col style="background:#90ff90; color:black;" class="table-yes">
Yes</col>
<col style="background:#ff9090; color:black;" class="table-no">
No</col>
<col style="background:#90ff90; color:black;" class="table-yes">
deep nested</col>
<col style="background:#90ff90; color:black;" class="table-yes">
Yes</col>
</row>
<row>
<col>
 <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../862/23862.xml">
Python</link></programming_language>
</col>
<col style="background:#90ff90; color:black;" class="table-yes">
Yes</col>
<col style="background:#ff9090; color:black;" class="table-no">
No</col>
<col style="background:#ff9090; color:black;" class="table-no">
No</col>
<col style="background:#ff9090; color:black;" class="table-no">
 No <link xlink:type="simple" xlink:href="#xpointer(//cite[@id=%22endnote_loop_rangea%22])">
[5]</link></col>
<col style="background:#90ff90; color:black;" class="table-yes">
Yes</col>
<col style="background:#ff9090; color:black;" class="table-no">
No</col>
<col style="background:#ff9090; color:black;" class="table-no">
No</col>
<col style="background: #ffffdd; color: black;" class="table-partial">
 deep nested <link xlink:type="simple" xlink:href="#xpointer(//cite[@id=%22endnote_deep_break_pythona%22])">
[6]</link></col>
<col style="background:#90ff90; color:black;" class="table-yes">
Yes</col>
</row>
<row>
<col>
 <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../996/208996.xml">
Visual Basic .NET</link></programming_language>
</col>
<col style="background:#90ff90; color:black;" class="table-yes">
Yes</col>
<col style="background:#ff9090; color:black;" class="table-no">
No</col>
<col style="background:#90ff90; color:black;" class="table-yes">
Yes</col>
<col style="background:#90ff90; color:black;" class="table-yes">
Yes</col>
<col style="background:#90ff90; color:black;" class="table-yes">
Yes</col>
<col style="background:#ff9090; color:black;" class="table-no">
No</col>
<col style="background:#90ff90; color:black;" class="table-yes">
Yes</col>
<col style="background: #ffffdd; color: black;" class="table-partial">
one level</col>
<col style="background:#90ff90; color:black;" class="table-yes">
Yes</col>
</row>
<row>
<col>
 <software wordnetid="106566077" confidence="0.9508927676800064">
<programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../871/14465871.xml">
Windows PowerShell</link></programming_language>
</software>
</col>
<col style="background:#90ff90; color:black;" class="table-yes">
Yes</col>
<col style="background:#ff9090; color:black;" class="table-no">
No</col>
<col style="background:#90ff90; color:black;" class="table-yes">
Yes</col>
<col style="background:#ff9090; color:black;" class="table-no">
 No <link xlink:type="simple" xlink:href="#xpointer(//cite[@id=%22endnote_loop_forf%22])">
[2]</link></col>
<col style="background:#90ff90; color:black;" class="table-yes">
Yes</col>
<col style="background:#90ff90; color:black;" class="table-yes">
Yes</col>
<col style="background:#ff9090; color:black;" class="table-no">
No</col>
<col>
<b><it>?</it></b></col>
<col style="background:#90ff90; color:black;" class="table-yes">
Yes</col>
</row>
</table>

<list>
<entry level="1" type="number">

  <cite id="endnote_loop_infinitea">
<b>a</b></cite>&nbsp; while (true) does not count as an infinite loop for this purpose, because it is not a dedicated language structure.</entry>
<entry level="1" type="number">

  <cite id="endnote_loop_fora">
<b>a</b></cite>&nbsp; <cite id="endnote_loop_forb">
<b>b</b></cite>&nbsp; <cite id="endnote_loop_forc">
<b>c</b></cite>&nbsp; <cite id="endnote_loop_ford">
<b>d</b></cite>&nbsp; <cite id="endnote_loop_fore">
<b>e</b></cite>&nbsp; <cite id="endnote_loop_forf">
<b>f</b></cite>&nbsp; C's for (<it>init</it>; <it>condition</it>; <it>loop</it>) loop is a general loop construct, not specifically a counting one, although it is often used for that.</entry>
<entry level="1" type="number">

  <cite id="endnote_deep_break_ca">
<b>a</b></cite>&nbsp; <cite id="endnote_deep_break_cb">
<b>b</b></cite>&nbsp; <cite id="endnote_deep_break_cc">
<b>c</b></cite>&nbsp; Deep breaks may be accomplished in C, C++ and C# through the use of labels and gotos.</entry>
<entry level="1" type="number">

  <cite id="endnote_loop_phpforeacha">
<b>a</b></cite>&nbsp; Iteration over objects was <weblink xlink:type="simple" xlink:href="http://www.php.net/manual/en/language.oop5.iterations.php">
added</weblink> in PHP 5.</entry>
<entry level="1" type="number">

  <cite id="endnote_loop_rangea">
<b>a</b></cite>&nbsp; A counting loop can be simulated by iterating over an incrementing list or generator, like range or xrange.</entry>
<entry level="1" type="number">

  <cite id="endnote_deep_break_pythona">
<b>a</b></cite>&nbsp; Deep breaks may be accomplished in Python through the use of exception handling.</entry>
</list>
</p>

</ss1>
</sec>
<sec>
<st>
 Structured non-local control flow </st>

<p>

Many programming languages, particularly those which favor more dynamic styles of programming, offer constructs for <b>non-local control flow</b>. These cause the flow of execution to jump out of a given context and resume at some predeclared point. <it><abnormality wordnetid="114501726" confidence="0.8">
<condition wordnetid="113920835" confidence="0.8">
<state wordnetid="100024720" confidence="0.8">
<physical_condition wordnetid="114034177" confidence="0.8">
<anomaly wordnetid="114505821" confidence="0.8">
<link xlink:type="simple" xlink:href="../231/59231.xml">
Exceptions</link></anomaly>
</physical_condition>
</state>
</condition>
</abnormality>
</it>, <it><link xlink:type="simple" xlink:href="../563/1284563.xml">
condition</link>s</it>, and <it><link xlink:type="simple" xlink:href="../189/505189.xml">
continuation</link>s</it> are three common sorts of non-local control constructs.</p>

<ss1>
<st>
 Conditions </st>

<p>

<link xlink:type="simple" xlink:href="../708/23708.xml">
PL/I</link> has some 22 standard conditions (e.g. ZERODIVIDE SUBSCRIPTRANGE ENDFILE) which can be RAISEd and which can be intercepted by: ON <it>condition</it> action; Programmers can also define and use their own named conditions.</p>
<p>

Like the <it>unstructured if</it> only one statement can be specified so in many cases a GOTO is needed to decide where flow of control should resume.</p>
<p>

Unfortunately, some implementations had a substantial overhead in both space and time (especially SUBSCRIPTRANGE), so many programmers tried to avoid using conditions.</p>
<p>

Common Syntax examples:</p>
<p>

<b>ON</b> <it>condition</it> <b>GOTO</b> <it>label</it></p>

</ss1>
<ss1>
<st>
 Exceptions </st>


<p>

<indent level="1">

<it>Main article: <abnormality wordnetid="114501726" confidence="0.8">
<condition wordnetid="113920835" confidence="0.8">
<state wordnetid="100024720" confidence="0.8">
<physical_condition wordnetid="114034177" confidence="0.8">
<anomaly wordnetid="114505821" confidence="0.8">
<link xlink:type="simple" xlink:href="../231/59231.xml">
Exception handling</link></anomaly>
</physical_condition>
</state>
</condition>
</abnormality>
</it>
</indent>

Modern languages have a structured construct for exception handling which does not rely on the use of GOTO:</p>

<p>

try {
xxx1                                  // Somewhere in here
xxx2                                  //     use: <b>throw</b> someValue;
xxx3
} catch (someClass &amp; someId) {            // catch value of someClass
actionForSomeClass 
} catch (someType &amp; anotherId) {          // catch value of someType
actionForSomeType
} catch (...) {                           // catch anything not already caught
actionForAnythingElse
}</p>

<p>

Any number and variety of <b>catch</b> clauses can be used above. In D, Java, C#, and Python a <b>finally</b> clause can be added to the <b>try</b> construct. No matter how control leaves the <b>try</b> the code inside the <b>finally</b> clause is guaranteed to execute. This is useful when writing code that must relinquish an expensive resource (such as an opened file or a database connection) when finished processing:</p>

<p>

FileStream stm = null;                    // C# example
try {
stm = new FileStream ("logfile.txt", FileMode. Create);
return ProcessStuff(stm);             // may throw an exception
} finally {
if (stm != null)
stm. Close();
}</p>

<p>

Since this pattern is fairly common, C# has a special syntax:</p>

<p>

using (FileStream stm = new FileStream ("logfile.txt", FileMode. Create)) {
return ProcessStuff(stm);             // may throw an exception
}</p>

<p>

Upon leaving the <b>using</b>-block, the compiler guarantees that the <b>stm</b> object is released.</p>
<p>

All these languages define standard exceptions and the circumstances under which they are thrown.
Users can throw exceptions of their own (in fact C++ and Python allow users to throw and catch almost any type).</p>
<p>

If there is no <b>catch</b> matching a particular <b>throw</b>, then control percolates back through subroutine calls and/or nested blocks until a matching <b>catch</b> is found or until the end of the main program is reached, at which point the program is forcibly stopped with a suitable error message.</p>
<p>

The <language wordnetid="106282651" confidence="0.8">
<link xlink:type="simple" xlink:href="../392/88392.xml">
AppleScript</link></language>
 <link xlink:type="simple" xlink:href="../524/29524.xml">
scripting programming language</link> provides several pieces of information to a "try" block:</p>

<p>

try
set myNumber to myNumber / 0</p>
<p>

on error e  number n  from f  to t  partial result pr</p>
<p>

if ( e = "Can't divide by zero" ) then display dialog "You idiot!"</p>
<p>

end try</p>


</ss1>
<ss1>
<st>
Continuations</st>


<p>

<indent level="1">

<it>Main article: <link xlink:type="simple" xlink:href="../189/505189.xml">
Continuation</link></it>
</indent>

</p>
</ss1>
<ss1>
<st>
 Non-local control flow cross reference </st>

<p>

<table class="wikitable">
<header>
 <link xlink:type="simple" xlink:href="../015/23015.xml">
Programming language</link></header>
<header>
conditions</header>
<header>
exceptions</header>
<row>
<col>
 <link xlink:type="simple" xlink:href="../242/1242.xml">
Ada</link></col>
<col style="background:#ff9090; color:black;" class="table-no">
No</col>
<col style="background:#90ff90; color:black;" class="table-yes">
Yes</col>
</row>
<row>
<col>
 <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../021/6021.xml">
C</link></programming_language>
</col>
<col style="background:#ff9090; color:black;" class="table-no">
No</col>
<col style="background:#ff9090; color:black;" class="table-no">
No</col>
</row>
<row>
<col>
 <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../038/72038.xml">
C++</link></programming_language>
</col>
<col style="background:#ff9090; color:black;" class="table-no">
No</col>
<col style="background:#90ff90; color:black;" class="table-yes">
Yes</col>
</row>
<row>
<col>
 <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../196/2356196.xml">
C#</link></programming_language>
</col>
<col style="background:#ff9090; color:black;" class="table-no">
No</col>
<col style="background:#90ff90; color:black;" class="table-yes">
Yes</col>
</row>
<row>
<col>
 <link xlink:type="simple" xlink:href="../881/243881.xml">
D</link></col>
<col style="background:#ff9090; color:black;" class="table-no">
No</col>
<col style="background:#90ff90; color:black;" class="table-yes">
Yes</col>
</row>
<row>
<col>
 <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../630/13630.xml">
Haskell</link></programming_language>
</col>
<col style="background:#ff9090; color:black;" class="table-no">
No</col>
<col style="background:#90ff90; color:black;" class="table-yes">
Yes</col>
</row>
<row>
<col>
 <message wordnetid="106598915" confidence="0.8">
<request wordnetid="106513366" confidence="0.8">
<link xlink:type="simple" xlink:href="../881/15881.xml">
Java</link></request>
</message>
</col>
<col style="background:#ff9090; color:black;" class="table-no">
No</col>
<col style="background:#90ff90; color:black;" class="table-yes">
Yes</col>
</row>
<row>
<col>
 <link xlink:type="simple" xlink:href="../802/22802.xml">
Objective C</link></col>
<col style="background:#ff9090; color:black;" class="table-no">
No</col>
<col style="background:#90ff90; color:black;" class="table-yes">
Yes</col>
</row>
<row>
<col>
 <physical_entity wordnetid="100001930" confidence="0.8">
<communicator wordnetid="109610660" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<compiler wordnetid="109946957" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<language wordnetid="106282651" confidence="0.8">
<writer wordnetid="110794014" confidence="0.8">
<link xlink:type="simple" xlink:href="../131/24131.xml">
PHP</link></writer>
</language>
</causal_agent>
</compiler>
</person>
</communicator>
</physical_entity>
</col>
<col style="background:#ff9090; color:black;" class="table-no">
No</col>
<col style="background:#90ff90; color:black;" class="table-yes">
Yes</col>
</row>
<row>
<col>
 <link xlink:type="simple" xlink:href="../708/23708.xml">
PL/1</link></col>
<col style="background:#90ff90; color:black;" class="table-yes">
Yes</col>
<col style="background:#ff9090; color:black;" class="table-no">
No</col>
</row>
<row>
<col>
 <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../862/23862.xml">
Python</link></programming_language>
</col>
<col style="background:#ff9090; color:black;" class="table-no">
No</col>
<col style="background:#90ff90; color:black;" class="table-yes">
Yes</col>
</row>
<row>
<col>
 <link xlink:type="simple" xlink:href="../768/25768.xml">
Ruby</link></col>
<col style="background:#ff9090; color:black;" class="table-no">
No</col>
<col style="background:#90ff90; color:black;" class="table-yes">
Yes</col>
</row>
<row>
<col>
 <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../996/208996.xml">
Visual Basic .NET</link></programming_language>
</col>
<col style="background:#90ff90; color:black;" class="table-yes">
Yes</col>
<col style="background:#90ff90; color:black;" class="table-yes">
Yes</col>
</row>
<row>
<col>
 <software wordnetid="106566077" confidence="0.9508927676800064">
<programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../871/14465871.xml">
Windows PowerShell</link></programming_language>
</software>
</col>
<col style="background:#ff9090; color:black;" class="table-no">
No</col>
<col style="background:#90ff90; color:black;" class="table-yes">
Yes</col>
</row>
</table>
</p>

</ss1>
</sec>
<sec>
<st>
 Proposed control structures </st>
<p>

In a spoof <work wordnetid="104599396" confidence="0.8">
<product wordnetid="104007894" confidence="0.8">
<magazine wordnetid="106595351" confidence="0.8">
<print_media wordnetid="106263609" confidence="0.8">
<creation wordnetid="103129123" confidence="0.8">
<press wordnetid="106263369" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<medium wordnetid="106254669" confidence="0.8">
<publication wordnetid="106589574" confidence="0.8">
<link xlink:type="simple" xlink:href="../440/658440.xml">
Datamation</link></publication>
</medium>
</instrumentality>
</artifact>
</press>
</creation>
</print_media>
</magazine>
</product>
</work>
 <weblink xlink:type="simple" xlink:href="http://www.fortran.com/fortran/come_from.html">
article</weblink> (December 1973),
R. Lawrence Clark suggested that the GOTO statement
could be replaced by the <link xlink:type="simple" xlink:href="../284/994284.xml">
COMEFROM</link> statement,
and provides some entertaining examples.
This was actually implemented in the <link xlink:type="simple" xlink:href="../075/15075.xml">
INTERCAL programming language</link>,
a language designed to make programs as obscure as possible.</p>
<p>

In his 1974 article "Structured Programming with go to Statements", <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../095/8095.xml">
Donald Knuth</link></scientist>
</person>
 identified two situations which were not covered
by the control structures listed above, and gave examples of control structures which could handle these situations. Despite their utility, these constructions have not yet found their way into mainstream programming languages.</p>

<ss1>
<st>
 Loop with test in the middle </st>

<p>

This was proposed by <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../188/64188.xml">
Dahl</link></scientist>
</person>
 in 1972.</p>
<p>

<b>loop</b>                           <b>loop</b>
xxx1                           read(char);
<b>while</b> test;                    <b>while</b> <b>not</b> atEndOfFile;
xxx2                           write(char);
<b>repeat</b>;                        <b>repeat</b>;</p>
<p>

If <it>xxx1</it> is omitted we get a loop with the test at the top.
If <it>xxx2</it> is omitted we get a loop with the test at the bottom.
If <b>while</b> is omitted we get an infinite loop.
Hence this single construction can replace several constructions in most programming languages.
A possible variant is to allow more than one <b>while</b> test; within the loop,
but the use of <b>exitwhen</b> (see next section) appears to cover this case better.</p>
<p>

As the example on the right shows (copying a file one character at a time),
there are simple situations where this is exactly the right construction to use
in order to avoid duplicated code and/or repeated tests.</p>
<p>

In <link xlink:type="simple" xlink:href="../242/1242.xml">
Ada</link>, the above loop construct (<b>loop</b>-<b>while</b>-<b>repeat</b>) can be represented using a standard infinite loop (<b>loop</b> - <b>end loop</b>) that has an <b>exit when</b> clause in the middle (not to be confused with the <b>exitwhen</b> statement in the following section).</p>

<p>

with Ada.Text_IO;
with Ada.Integer_Text_IO;</p>
<p>

procedure Print_Squares is 
X : Integer;
begin
Read_Data : loop
Ada.Integer_Text_IO.Get(X);
exit Read_Data when X = 0;
Ada.Text IO.Put (X * X);
Ada.Text IO.New_Line;
end loop Read_Data;
end Print_Squares;</p>

<p>

Naming a loop (Like <it>Read_Data</it> in our example) is optional but allows to leave the outer loop of several nested loops.</p>

</ss1>
<ss1>
<st>
 Multiple early exit/exit from nested loops </st>
<p>

This was proposed by <link>
Zahn</link> in 1974. A modified version is presented here.
<b>exitwhen</b> EventA <b>or</b> EventB <b>or</b> EventC;
xxx
<b>exits</b>
EventA: actionA
EventB: actionB
EventC: actionC
<b>endexit</b>;</p>
<p>

<b>exitwhen</b> is used to specify the events which may occur within <it>xxx</it>,
their occurrence is indicated by using the name of the event as a statement.
When some event does occur, the relevant action is carried out,
and then control passes just after <b>endexit</b>.
This construction provides a very clear separation between
determining that some situation applies, and the action to be taken for that situation.</p>
<p>

<b>exitwhen</b> is conceptually similar to the <b>try</b>/<b>catch</b> construct in C++,
but is likely to be much more efficient
since there is no percolation across subroutine calls and no transfer of arbitrary values.
Also, the compiler can check that all specified events do actually occur
and have associated actions.</p>
<p>

The following simple example involves searching
a two-dimensional table for a particular item.</p>
<p>

<b>exitwhen</b> found <b>or</b> missing;
<b>for</b> I := 1 <b>to</b> N <b>do</b>
<b>for</b> J := 1 <b>to</b> M <b>do</b>
<b>if</b> table[I,J] = target <b>then</b> found;
missing;
<b>exits</b>
found:   print ("item is in table");
missing: print ("item is not in table");
<b>endexit</b>;</p>

</ss1>
</sec>
<sec>
<st>
 See also </st>
<p>

<list>
<entry level="1" type="bullet">

 <idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<link xlink:type="simple" xlink:href="../210/1013210.xml">
Branch (computer science)</link></concept>
</idea>
</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../653/43653.xml">
Control flow graph</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../800/243800.xml">
Coroutine</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../906/1014906.xml">
Cyclomatic complexity</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../453/527453.xml">
Flowchart</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../853/197853.xml">
GOTO</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../023/4378023.xml">
Main loop</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../407/25407.xml">
Recursion</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../732/28732.xml">
Spaghetti code</link></entry>
<entry level="1" type="bullet">

 <paradigm wordnetid="113804375" confidence="0.8">
<linguistic_relation wordnetid="113797142" confidence="0.8">
<inflection wordnetid="113803782" confidence="0.8">
<grammatical_relation wordnetid="113796779" confidence="0.8">
<link xlink:type="simple" xlink:href="../695/27695.xml">
Structured programming</link></grammatical_relation>
</inflection>
</linguistic_relation>
</paradigm>
</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../988/40988.xml">
Subroutine</link></entry>
</list>
</p>

</sec>
<sec>
<st>
 References </st>
<p>

<list>
<entry level="1" type="bullet">

 Dahl &amp; Dijkstra &amp; Hoare, "Structured Programming" Academic Press, 1972.</entry>
<entry level="1" type="bullet">

 Knuth, Donald E. "Structured Programming with go to Statements" <link>
ACM Computing Surveys</link> 6(4):261-301, December 1974.</entry>
<entry level="1" type="bullet">

 Böhm, Jacopini. Flow diagrams, "Turing Machines and Languages with only Two Formation Rules" <link xlink:type="simple" xlink:href="../161/291161.xml">
Comm. ACM</link>, 9(5):366-371, May 1966.</entry>
<entry level="1" type="bullet">

 Hoare, C. A. R. "Partition: Algorithm 63," "Quicksort: Algorithm 64," and "Find: Algorithm 65." Comm. ACM 4, 321-322, 1961.</entry>
<entry level="1" type="bullet">

 Zahn, C. T. "A control statement for natural top-down structured programming" presented at Symposium on Programming Languages, Paris, 1974.</entry>
</list>
</p>

</sec>
<sec>
<st>
 External links </st>
<p>

<list>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://beginner-java-tutorial.com/java-control-statements.html">
Java Control Statements</weblink></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.acm.org/classics/oct95/">
Go To Statement Considered Harmful</weblink></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.fortran.com/fortran/come_from.html">
A Linguistic Contribution of GOTO-less Programming</weblink></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://pplab.snu.ac.kr/courses/adv_pl05/papers/p261-knuth.pdf">
Structured Programming with Go To Statements</weblink><message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<language wordnetid="106282651" confidence="0.8">
<format wordnetid="106636806" confidence="0.8">
<link xlink:type="simple" xlink:href="../077/24077.xml">
PDF</link></format>
</language>
</information>
</message>
&nbsp;(2.88&nbsp;<link xlink:type="simple" xlink:href="../727/60727.xml">
MiB</link>)</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.bitsavers.org/pdf/ibm/704/24-6661-2_704_Manual_1955.pdf">
IBM 704 Manual</weblink><message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<language wordnetid="106282651" confidence="0.8">
<format wordnetid="106636806" confidence="0.8">
<link xlink:type="simple" xlink:href="../077/24077.xml">
PDF</link></format>
</language>
</information>
</message>
&nbsp;(31.4&nbsp;<link xlink:type="simple" xlink:href="../727/60727.xml">
MiB</link>)</entry>
</list>
</p>


</sec>
</bdy>
</article>
