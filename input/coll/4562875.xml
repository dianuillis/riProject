<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 21:10:47[mciao0828] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>Motion planning</title>
<id>4562875</id>
<revision>
<id>244266045</id>
<timestamp>2008-10-10T00:50:23Z</timestamp>
<contributor>
<username>Simeon</username>
<id>1189543</id>
</contributor>
</revision>
<categories>
<category>Robotics</category>
<category>Theoretical computer science</category>
</categories>
</header>
<bdy>

<b>Motion planning</b> (a.k.a., the "navigation problem", the "piano mover's problem") is a term used in <link xlink:type="simple" xlink:href="../673/46673.xml">
robotics</link> for the process of detailing a task into atomic motions.<p>

For example, consider navigating a <link xlink:type="simple" xlink:href="../074/3808074.xml">
mobile robot</link> inside a building to a distant waypoint.  It should execute this task while avoiding walls and not falling down stairs.  A motion planning algorithm would take a description of these tasks as input, and produce the speed and turning commands sent to the robot's wheels.  Motion planning algorithms might address robots with a larger number of joints (e.g., industrial manipulators), more complex tasks (e.g. manipulation of objects), different constraints (e.g., a car that can only drive forward), and uncertainty (e.g. imperfect models of the environment or robot).</p>
<p>

Motion planning has several robotics applications, such as <conveyance wordnetid="103100490" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<vehicle wordnetid="104524313" confidence="0.8">
<link>
autonomy</link></vehicle>
</instrumentality>
</artifact>
</conveyance>
, <link xlink:type="simple" xlink:href="../354/173354.xml">
automation</link>, and robot design in <link xlink:type="simple" xlink:href="../315/37315.xml">
CAD</link> software, as well as applications in other fields, such as animating digital characters, architectural design, robotic surgery, and the study of biological molecules.</p>


<sec>
<st>
Concepts</st>

<p>

A basic motion planning problem is to produce a continuous motion that connects a start configuration S and a goal configuration G, while avoiding collision with known obstacles.  The robot and obstacle geometry is described in a 2D or 3D <it>workspace</it>, while the motion is represented as a path in (possibly higher-dimensional) <link xlink:type="simple" xlink:href="../596/473596.xml">
configuration space</link>.</p>

<ss1>
<st>
Configuration Space</st>
<p>

A configuration describes the pose of the robot, and the <link xlink:type="simple" xlink:href="../596/473596.xml">
configuration space</link> C is the set of all possible configurations.  For example:
<list>
<entry level="1" type="bullet">

 If the robot is a single point (zero-sized) translating in a 2-dimensional plane (the workspace), C is a plane, and a configuration can be represented using two parameters (x, y).</entry>
<entry level="1" type="bullet">

 If the robot is a 2D shape that can can translate and rotate, the workspace is still 2-dimensional.   However, C is the special Euclidean group <b>SE</b>(2) = <b>R</b>2 <math>\times</math> <b>SO</b>(2) (where <b>SO</b>(2) is the special <form wordnetid="106290637" confidence="0.8">
<word wordnetid="106286395" confidence="0.8">
<spatial_property wordnetid="105062748" confidence="0.8">
<property wordnetid="104916342" confidence="0.8">
<symmetry wordnetid="105064827" confidence="0.8">
<part wordnetid="113809207" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<language_unit wordnetid="106284225" confidence="0.8">
<link>
orthogonal group</link></language_unit>
</group>
</part>
</symmetry>
</property>
</spatial_property>
</word>
</form>
 of 2D rotations), and a configuration can be represented using 3 parameters (x, y, θ).</entry>
<entry level="1" type="bullet">

 If the robot is solid 3D shape that can translate and rotate, the workspace is 3-dimensional, but C is the special Euclidean group <b>SE(3)</b> = <b>R</b>3 <math>\times</math> <b>SO</b>(3), and a configuration requires 6 parameters: (x, y, z) for translation, and <spatial_property wordnetid="105062748" confidence="0.8">
<property wordnetid="104916342" confidence="0.8">
<symmetry wordnetid="105064827" confidence="0.8">
<link>
Euler angles</link></symmetry>
</property>
</spatial_property>
 (α, β, γ). </entry>
<entry level="1" type="bullet">

 If the robot is a fixed-base manipulator with N revolute joints (and no closed-loops), C is N-dimensional.</entry>
</list>
</p>

</ss1>
<ss1>
<st>
Free Space</st>
<p>

The set of configurations that avoids collision with obstacles is called the free space Cfree.  The complement of Cfree in C is called the obstacle or forbidden region.</p>
<p>

Often, it is prohibitively difficult to explicitly compute the shape of Cfree.  However, testing whether a given configuration is in Cfree is efficient.  First, <link xlink:type="simple" xlink:href="../813/9249813.xml">
forward kinematics</link> determine the position of the robot's geometry, and <artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<engine wordnetid="103287733" confidence="0.8">
<motor wordnetid="103789946" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<machine wordnetid="103699975" confidence="0.8">
<link>
collision detection</link></machine>
</device>
</motor>
</engine>
</instrumentality>
</artifact>
 tests if the robot's geometry collides with the environment's geometry.</p>

</ss1>
</sec>
<sec>
<st>
Algorithms</st>

<p>

Low-dimensional problems can be solved with grid-based algorithms that overlay a grid on top of configuration space, or geometric algorithms that compute the shape and connectivity of Cfree. </p>
<p>

Exact motion planning for high-dimensional systems under complex constraints is computationally <link>
intractable</link>.  Potential-field algorithms are efficient, but fall prey to local minima.  Sampling-based algorithms avoid the problem of local minima, and solve many problems quite quickly.
They are unable to determine that no path exists, but they have a probability of failure that decreases to zero as more time is spent.</p>
<p>

Sampling-based algorithms are currently considered state-of-the-art for motion planning in high-dimensional spaces, and have been applied to problems which have dozens or even hundreds of dimensions (robotic manipulators, biological molecules, animated digital characters, and legged robots).</p>

<ss1>
<st>
Grid-Based Search</st>
<p>

Grid-based approaches overlay a grid on configuration space, and assume each configuration is identified with a grid point.  At each grid point, the robot is allowed to move to adjacent grid points as long as the line between them is completely contained within Cfree (this is tested with collision detection).  This discretizes the set of actions, and <link>
search algorithms</link> (like A*) are used to find a path from the start to the goal.</p>
<p>

These approaches require setting a grid resolution.  Search is faster with coarser grids, but the algorithm will fail to find paths through narrow portions of Cfree.  Furthermore, the number of points on the grid grows exponentially in the configuration space dimension, which make them inappropriate for high-dimensional problems.</p>

</ss1>
<ss1>
<st>
Geometric Algorithms</st>

<p>

Point robots among polygonal obstacles
<list>
<entry level="1" type="bullet">

 Visibility graph</entry>
<entry level="1" type="bullet">

 Cell decomposition</entry>
</list>
</p>
<p>

Translating objects among obstacles
<list>
<entry level="1" type="bullet">

 Minkowski sum</entry>
</list>
</p>

</ss1>
<ss1>
<st>
Potential Fields</st>

<p>

One approach is to treat the robot's configuration as a point in a potential field that combines attraction to the goal, and repulsion from obstacles.  The resulting trajectory is output as the path.  This approach has advantages in that the trajectory is produced with little computation.  However, they easily become trapped in <link xlink:type="simple" xlink:href="../420/298420.xml">
local minima</link> of the potential field, and fail to find a path.</p>


</ss1>
<ss1>
<st>
Sampling-Based Algorithms</st>

<p>

Sampling-based algorithms represent the configuration space with a roadmap of sampled configurations.
A basic algorithm samples N configurations in C, and retains those in Cfree to use as <it>milestones</it>.  A roadmap is then constructed that connects two milestones P and Q if the line segment PQ is completely in Cfree.  Again, collision detection is used to test inclusion in Cfree.  To find a path that connects S and G, they are added to the roadmap.  If a path in the roadmap links S and G , the planner succeeds, and returns that path.  If not, the reason is not definitive: either there is no path in Cfree, or the planner did not sample enough milestones.</p>
<p>

These algorithms work well for high-dimensional configuration spaces, because unlike combinatorial algorithms, their running time is not (explicitly) exponentially dependent on the dimension of C.  They are also (generally) substantially easier to implement.  They are probabilistically complete, meaning the probability that they will produce a solution approaches 1 as more time is spent.  However, they cannot determine if no solution exists.</p>
<p>

Given basic <it>visibility</it> conditions on Cfree, it has been proven that as the number of configurations N grows higher, the probability that the above algorithm finds a solution approaches 1 exponentially <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref>.  Visibility is not explicitly dependent on the dimension of C; it is possible to have a high-dimensional space with "good" visibility or a low dimensional space with "poor" visibility.  The experimental success of sample-based methods suggests that most commonly seen spaces have good visibility.</p>
<p>

There are many variants of this basic scheme:
<list>
<entry level="1" type="bullet">

 It is typically much faster to only test segments between nearby pairs of milestones, rather than all pairs.</entry>
<entry level="1" type="bullet">

 Nonuniform sampling distributions attempt to place more milestones in areas that improve the connectivity of the roadmap.</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../601/478601.xml">
Quasirandom</link> samples typically produce a better covering of configuration space than <link xlink:type="simple" xlink:href="../210/23210.xml">
pseudorandom</link> ones, though some recent work argues that the effect of the source of randomness is minimal compared to the effect of the sampling distribution.</entry>
<entry level="1" type="bullet">

 If only one or a few planning queries are needed, it is not always necessary to construct a roadmap of the entire space.  Tree-growing variants are typically faster for this case (single-query planning).  Roadmaps are still useful if many queries are to be made on the same space (multi-query planning)</entry>
</list>
</p>

</ss1>
</sec>
<sec>
<st>
Completeness and Performance</st>
<p>

A motion planner is said to be <link xlink:type="simple" xlink:href="../054/56054.xml">
complete</link> if the planner always produces a feasible path, when one exists.  Most complete algorithms are geometry-based. The performance of a complete planner is assessed by its <link xlink:type="simple" xlink:href="../543/7543.xml">
computational complexity</link>.</p>
<p>

<it>Resolution completeness</it> is the property that the planner is guaranteed to find a path if the resolution of an underlying grid is fine enough.  Most resolution complete planners are grid-based.  The computational complexity of resolution complete planners is dependent on the number of points in the underlying grid, which is O(1/hd), where h is the resolution (the length of one side of a grid cell) and d is the configuration space dimension.</p>
<p>

<it>Probabilistic completeness</it> is the property that as more “work” is performed, the probability that the planner fails to find a path, if one exists, asymptotically approaches zero.  Several sample-based methods are probabilistically complete.  The performance of a probabilistically complete planner is measured by the rate of convergence.</p>
<p>

<it>Incomplete</it> planners do not always produce a feasible path when one exists.  Sometimes incomplete planners do work well in practice.</p>

</sec>
<sec>
<st>
Problem Variants</st>

<p>

Many algorithms have been developed to handle variants of this basic problem.</p>

<ss1>
<st>
Differential Constraints</st>

<p>

<difference wordnetid="104748836" confidence="0.8">
<link xlink:type="simple" xlink:href="../149/1425149.xml">
Holonomic</link></difference>

<list>
<entry level="1" type="bullet">

 Cars that can  drive forward and reverse</entry>
<entry level="1" type="bullet">

 Manipulator arms (with dynamics)</entry>
</list>
</p>
<p>

<link xlink:type="simple" xlink:href="../248/554248.xml">
Nonholonomic</link>
<list>
<entry level="1" type="bullet">

 Cars that can only drive forward</entry>
<entry level="1" type="bullet">

 Unicycles</entry>
<entry level="1" type="bullet">

 Planes</entry>
<entry level="1" type="bullet">

 Acceleration bounded systems</entry>
<entry level="1" type="bullet">

 Moving obstacles (time can't go backward)</entry>
<entry level="1" type="bullet">

 Bevel-tip steerable needle</entry>
</list>
</p>

</ss1>
<ss1>
<st>
Optimality Constraints</st>


</ss1>
<ss1>
<st>
Hybrid Systems</st>

<p>

<link xlink:type="simple" xlink:href="../719/564719.xml">
Hybrid systems</link> are those that mix discrete and continuous behavior.  Examples of such systems are:
<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../673/46673.xml">
Robotic manipulation</link></entry>
<entry level="1" type="bullet">

 <link>
Mechanical assembly</link></entry>
<entry level="1" type="bullet">

 Legged robot locomotion</entry>
<entry level="1" type="bullet">

 <link>
Reconfigurable robots</link></entry>
</list>
</p>

</ss1>
<ss1>
<st>
Uncertainty</st>

<p>

<list>
<entry level="1" type="bullet">

 Motion uncertainty</entry>
<entry level="1" type="bullet">

 Missing information</entry>
<entry level="1" type="bullet">

 Active sensing</entry>
<entry level="1" type="bullet">

 Sensorless planning</entry>
</list>
</p>

</ss1>
</sec>
<sec>
<st>
Applications</st>
<p>

<list>
<entry level="1" type="bullet">

 <link>
Robot navigation</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../354/173354.xml">
Automation</link></entry>
<entry level="1" type="bullet">

 The <link xlink:type="simple" xlink:href="../926/245926.xml">
driverless car</link></entry>
<entry level="1" type="bullet">

 <automaton wordnetid="102761392" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<mechanism wordnetid="103738472" confidence="0.8">
<link xlink:type="simple" xlink:href="../669/2629669.xml">
Robotic surgery</link></mechanism>
</device>
</instrumentality>
</artifact>
</automaton>
</entry>
<entry level="1" type="bullet">

 <technique wordnetid="105665146" confidence="0.8">
<know-how wordnetid="105616786" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<link>
Digital character animation</link></method>
</know-how>
</technique>
</entry>
<entry level="1" type="bullet">

 <link>
protein folding</link></entry>
<entry level="1" type="bullet">

 Safety and accessibility in <link>
computer-aided architectural design</link></entry>
</list>
</p>

</sec>
<sec>
<st>
References</st>

<p>

<reflist>
<entry id="1">
 <cite id="CITEREFHsuLatombeMotwani1997" style="font-style:normal">Hsu, D; Latombe, J.C.&#32;&amp;&#32;Motwani&#32;(1997),&#32;"Path Planning in Expansive Configuration Spaces",&#32;<it>Proc. IEEE Int. Conf. on Robotics and Automation</it></cite>&nbsp;</entry>
</reflist>

<list>
<entry level="1" type="bullet">

<it>Robot Motion Planning</it>, Jean-Claude Latombe, 1991, Kluwer Academic Publishers</entry>
<entry level="1" type="bullet">

<it>Planning Algorithms</it>, Steven M. LaValle,2006, Cambridge University Press, ISBN 0-521-86205-1.  Available online at http://planning.cs.uiuc.edu/</entry>
<entry level="1" type="bullet">

 <it>Principles of Robot Motion: Theory, Algorithms, and Implementation</it>, H. Choset,  W. Burgard, S. Hutchinson, G. Kantor, L. E. Kavraki, K. Lynch, and S. Thrun, MIT Press, April 2005.</entry>
<entry level="1" type="bullet">

  <cite style="font-style:normal" class="book"><link>
Mark de Berg</link>, <link>
Marc van Kreveld</link>, <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<research_worker wordnetid="110523076" confidence="0.8">
<link xlink:type="simple" xlink:href="../516/1177516.xml">
Mark Overmars</link></research_worker>
</scientist>
</causal_agent>
</person>
</physical_entity>
, and <link>
Otfried Schwarzkopf</link>&#32;(2000). Computational Geometry, 2nd revised edition,&#32;<link xlink:type="simple" xlink:href="../949/1418949.xml">
Springer-Verlag</link>. ISBN 3-540-65620-0.</cite>&nbsp; Chapter 13: Robot Motion Planning: pp.267&ndash;290.</entry>
</list>
</p>

</sec>
<sec>
<st>
External links</st>
<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.researchchannel.org/prog/displayevent.aspx?rID=2132&amp;fID=567">
Jean-Claude Latombe talks about his work with robots and motion planning, 5 April 2000</weblink></entry>
<entry level="1" type="bullet">

"Motion Strategy Library", http://msl.cs.uiuc.edu/msl/</entry>
<entry level="1" type="bullet">

"Motion Planning Kit", http://ai.stanford.edu/~mitul/mpk</entry>
</list>


</p>

</sec>
</bdy>
</article>
