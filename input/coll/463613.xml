<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 17:09:21[mciao0828] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<information  confidence="0.8" wordnetid="105816287">
<file  confidence="0.9511911446218017" wordnetid="106508816">
<datum  confidence="0.8" wordnetid="105816622">
<header>
<title>Configuration file</title>
<id>463613</id>
<revision>
<id>241742572</id>
<timestamp>2008-09-29T10:43:26Z</timestamp>
<contributor>
<username>SteveLoughran</username>
<id>293997</id>
</contributor>
</revision>
<categories>
<category>Configuration files</category>
</categories>
</header>
<bdy>

<image width="400px" src="Gnu_grub_config_file.png" type="thumb">
<caption>

A configuration file for <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<laborer wordnetid="110241300" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<workman wordnetid="110791221" confidence="0.8">
<stevedore wordnetid="110655169" confidence="0.8">
<employee wordnetid="110053808" confidence="0.8">
<link xlink:type="simple" xlink:href="../817/287817.xml">
GNU GRUB</link></employee>
</stevedore>
</workman>
</causal_agent>
</laborer>
</worker>
</person>
</physical_entity>
 being modified with <link xlink:type="simple" xlink:href="../281/224281.xml">
gedit</link>. This file contains a list of <link xlink:type="simple" xlink:href="../194/22194.xml">
Operating System</link>s, which <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<laborer wordnetid="110241300" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<workman wordnetid="110791221" confidence="0.8">
<stevedore wordnetid="110655169" confidence="0.8">
<employee wordnetid="110053808" confidence="0.8">
<link xlink:type="simple" xlink:href="../817/287817.xml">
GNU GRUB</link></employee>
</stevedore>
</workman>
</causal_agent>
</laborer>
</worker>
</person>
</physical_entity>
 reads and presents to the user as a menu.
</caption>
</image>
<p>

In <link xlink:type="simple" xlink:href="../213/5213.xml">
computing</link>, <b>configuration <link xlink:type="simple" xlink:href="../077/7077.xml">
file</link>s</b>, or <b>config files</b>, are used to configure the initial settings for some <link xlink:type="simple" xlink:href="../783/5783.xml">
computer program</link>s. They are used for user <link xlink:type="simple" xlink:href="../746/454746.xml">
applications</link>, <generic wordnetid="107899976" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../116/42116.xml">
server processes</link></generic>
 and <link xlink:type="simple" xlink:href="../194/22194.xml">
operating system</link> settings. The files are often written in <message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<representation wordnetid="105926676" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<link xlink:type="simple" xlink:href="../586/586.xml">
ASCII</link></rule>
</direction>
</representation>
</protocol>
</message>
 (rarely <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<format wordnetid="106636806" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../188/32188.xml">
UTF-8</link></database>
</wordnet>
</format>
</lexical_database>
</electronic_database>
</information>
</message>
) and line-oriented, with lines terminated by a <link xlink:type="simple" xlink:href="../775/238775.xml">
newline</link> or <link xlink:type="simple" xlink:href="../770/238770.xml">
carriage return</link>/<link xlink:type="simple" xlink:href="../775/238775.xml">
line feed</link> pair, depending on the operating system. They may be considered a simple <link xlink:type="simple" xlink:href="../973/573973.xml">
database</link>. Some files are created and modified using an ASCII editor. Others are created and modified as a side-effect of changing settings in a <link xlink:type="simple" xlink:href="../293/12293.xml">
graphical user interface</link> (GUI) program. The formats of configuration files are often poorly <link xlink:type="simple" xlink:href="../430/164430.xml">
documented</link>.</p>
<p>

Some applications provide tools to create, modify, and verify the <link xlink:type="simple" xlink:href="../860/26860.xml">
syntax</link> of their configuration files. For server processes and operating system settings, the only documentation may be the source code. Some configuration files are partially described by <link xlink:type="simple" xlink:href="../332/85332.xml">
man</link> or help pages.</p>
<p>

Some computer programs only read the configuration files at <link xlink:type="simple" xlink:href="../843/667843.xml">
startup</link>. Others periodically check the configuration files for changes. Some can be told to re-read the configuration files and apply the changes to the current process, or indeed to read arbitrary files as a configuration file. There are no standards or strong conventions.</p>
<p>

Recently, <format wordnetid="106636806" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../138/34138.xml">
XML</link></format>
 and <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<format wordnetid="106636806" confidence="0.8">
<link xlink:type="simple" xlink:href="../530/326530.xml">
YAML</link></format>
</information>
</message>
 have become popular as configuration file formats. They have the advantages of having well-defined syntaxes, and tools to validate and verify the syntax of the files that are created in those formats.</p>

<sec>
<st>
UNIX</st>
<p>

Among the <family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../642/31642.xml">
Unix</link></family>
 variants, there are hundreds of configuration file formats. Each application or service may have a unique format. Historically, <family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../642/31642.xml">
Unix</link></family>
 operating system settings were often modified only by editing configuration files. Some formats allow entries to be disabled by <link xlink:type="simple" xlink:href="../237/5187237.xml">
prepending a special comment character</link>. <family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../642/31642.xml">
Unix</link></family>
 user applications often create a file or directory in the home directory of the user upon startup. To hide the file or directory from casual listing of the contents of the home directory, the name of the file or directory is prepended with a <link xlink:type="simple" xlink:href="../216/49216.xml">
period</link>, giving rise to the nickname "dotfile" or "dot file". Server processes often use configuration files stored in <link xlink:type="simple" xlink:href="../790/287790.xml">
/etc</link>, but they may also use their installation directory, the root directory, or a location defined by the system administrator.</p>
<p>

Configuration files also did more than just modify settings, they often (in the form of an "rc file") ran a set of commands upon startup (ex. a shell rc file might instruct the shell to change directories, run certain programs, delete or create files - many things which did not involve modifying variables in the shell itself and so were not in the shell's dotfiles); according to the <work wordnetid="104599396" confidence="0.8">
<product wordnetid="104007894" confidence="0.8">
<creation wordnetid="103129123" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<oeuvre wordnetid="103841417" confidence="0.8">
<book wordnetid="106410904" confidence="0.8">
<end_product wordnetid="103287178" confidence="0.8">
<publication wordnetid="106589574" confidence="0.8">
<link xlink:type="simple" xlink:href="../054/16054.xml">
Jargon File</link></publication>
</end_product>
</book>
</oeuvre>
</artifact>
</creation>
</product>
</work>
, this convention is borrowed from "runcom files" on the <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../141/254141.xml">
CTSS</link></O>
 operating system.<weblink xlink:type="simple" xlink:href="http://www.catb.org/jargon/html/R/rc-file.html">
http://www.catb.org/jargon/html/R/rc-file.html</weblink> This functionality can and has been extended for programs written in <link xlink:type="simple" xlink:href="../089/15089.xml">
interpreted language</link>s such that the configuration file is actually another program rewriting or extending or customizing the original program; <skilled_worker wordnetid="110605985" confidence="0.8">
<physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<editor wordnetid="110044879" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../234/18933234.xml">
Emacs</link></causal_agent>
</worker>
</editor>
</person>
</physical_entity>
</skilled_worker>
 is the most prominent such example.</p>
<p>

On <link xlink:type="simple" xlink:href="../642/31642.xml">
UNIX</link> variants dot files are 'hidden' from listing by default, On Mac OS X these files are sometimes called "<link xlink:type="simple" xlink:href="../202/5842202.xml">
hidden file</link>s" although other mechanisms exist on Mac OS X to hide a file from view in various tools. The <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../959/445959.xml">
Explorer</link></software>
 interface of <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../001/19001.xml">
Microsoft</link></company>
 <version wordnetid="107173585" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../879/33879.xml">
Windows XP</link></version>
 does not allow you to rename a file with an initial '.' though it does allow access to such files, and Windows' Notepad program does allow files to be saved with such names.</p>
<p>

<company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../259/18622259.xml">
IBM</link></company>
's <link xlink:type="simple" xlink:href="../ury/22nd_century.xml">
AIX</link> uses an Object Data Manager (ODM) database to store some system settings,
some of which need to be available at boot time.</p>

</sec>
<sec>
<st>
Microsoft DOS</st>
<p>

Primarily relied upon two files called <record wordnetid="106647206" confidence="0.8">
<file wordnetid="106508816" confidence="0.8">
<indication wordnetid="106797169" confidence="0.8">
<evidence wordnetid="106643408" confidence="0.8">
<link xlink:type="simple" xlink:href="../401/639401.xml">
CONFIG.SYS</link></evidence>
</indication>
</file>
</record>
 and <record wordnetid="106647206" confidence="0.8">
<file wordnetid="106508816" confidence="0.8">
<indication wordnetid="106797169" confidence="0.8">
<evidence wordnetid="106643408" confidence="0.8">
<link xlink:type="simple" xlink:href="../412/719412.xml">
AUTOEXEC.BAT</link></evidence>
</indication>
</file>
</record>
. These were retained up to Windows 98SE, but were not strictly required to run Windows applications.</p>

</sec>
<sec>
<st>
Microsoft Windows</st>
<p>

Within the <link xlink:type="simple" xlink:href="../890/18890.xml">
Microsoft Windows</link> family of operating systems and their attendant applications, the situation is similar. <version wordnetid="107173585" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../719/167719.xml">
Windows 3.0</link></version>
 had an API for <link xlink:type="simple" xlink:href="../172/1908172.xml">
INI files</link> (from "initialization"), but that format is <link xlink:type="simple" xlink:href="../410/192410.xml">
deprecated</link> and many modern Windows programs forgo configuration files to use only the <record wordnetid="106647206" confidence="0.8">
<idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<component wordnetid="105868954" confidence="0.8">
<file wordnetid="106508816" confidence="0.8">
<indication wordnetid="106797169" confidence="0.8">
<evidence wordnetid="106643408" confidence="0.8">
<part wordnetid="105867413" confidence="0.8">
<link xlink:type="simple" xlink:href="../933/1164933.xml">
Windows Registry</link></part>
</evidence>
</indication>
</file>
</component>
</concept>
</idea>
</record>
 to store information.</p>

</sec>
<sec>
<st>
IBM OS/2</st>
<p>

IBM's <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../409/22409.xml">
OS/2</link></O>
 uses a binary format also named INI but it is different from the Windows versions.
It contains a <link xlink:type="simple" xlink:href="../382/208382.xml">
list</link> of lists of untyped key-value pairs.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref>
There are two files for system-wide settings, OS2.INI and OS2SYS.INI.
Application developers can choose whether to use them or create a specific file for their applications.</p>

</sec>
<sec>
<st>
Configuration Languages</st>
<p>

Many language specifications have been created specifically to describe and <link xlink:type="simple" xlink:href="../555/28555.xml">
retain</link> configurations.  These are frequently not <link xlink:type="simple" xlink:href="../621/30621.xml">
Turing complete</link> (nor need to be, by definition).  A notable exception is <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<machine wordnetid="103699975" confidence="0.8">
<link xlink:type="simple" xlink:href="../150/46150.xml">
Lua</link></machine>
</device>
</instrumentality>
</artifact>
</system>
, which started out specifically as a configuration language for use in other programs.  It evolved into a complete programming language, but retains a phrasing that allows configuration descriptions to be read directly into a native, stateful, tabulated set of variable-key pairings accessible to other programs (via a library), as well as allowing (self or external) invocation of commands to augment configuration activities.</p>
<p>

The class includes all <link xlink:type="simple" xlink:href="../910/18910.xml">
markup languages</link>.  The trend in the increase of XML and YAML (among other formats) for use as configuration file formats is at least partially attributable to the increase in popularity of <link xlink:type="simple" xlink:href="../758/18938758.xml">
Open source</link> and <platform wordnetid="103961939" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<surface wordnetid="104362025" confidence="0.8">
<horizontal_surface wordnetid="103536348" confidence="0.8">
<link xlink:type="simple" xlink:href="../193/81193.xml">
Platform neutral</link></horizontal_surface>
</surface>
</artifact>
</platform>
 software applications and libraries. Moreover, the <link xlink:type="simple" xlink:href="../448/14171448.xml">
specification</link>s describing these formats are routinely made available to the public, thus increasing the availability of <link xlink:type="simple" xlink:href="../015/310015.xml">
parser</link>s and <link xlink:type="simple" xlink:href="../218/757218.xml">
emitter</link>s across programming languages.</p>

</sec>
<sec>
<st>
References</st>
<p>

<reflist>
<entry id="1">
<it><weblink xlink:type="simple" xlink:href="http://www.os2voice.org/VNL/past_issues/VNL0904H/vnewsf4.htm">
The OS/2 INI Files</weblink></it> by James J. Weinkam.</entry>
</reflist>
</p>

</sec>
<sec>
<st>
External links</st>
<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://dotfiles.com">
dotfiles.com</weblink> – a site for users to share configuration files for <family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../642/31642.xml">
Unix</link></family>
 applications and utilities</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://dotfiles.org">
dotfiles.org</weblink> – community for sharing dotfiles</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://libprf1.tigris.org/">
libprf1</weblink> - alpha cross-platform, multi-language support for accessing the Preferences Registry Format (PRF) 1.0 configuration files</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.libelektra.org/">
www.libelektra.org</weblink>- Elektra provides a universal and secure framework to store configuration parameters in a hierarchical key-value pair mechanism, instead of each program using its own text configuration files</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.gnome.org/projects/gconf/">
gconf</weblink> - GConf is a system for storing application preferences. It is intended for user preferences; not configuration of something like Apache, or arbitrary data storage</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://augeas.net">
Augeas</weblink> - a configuration editing tool and API. Parses existing configuration files into a tree, that can be modified through its public API and saved back into those files.</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://netbsd.gw.com/cgi-bin/man-cgi/man?rc.conf+5+NetBSD-current">
rc.conf</weblink> - BSD system startup configuration file</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.hyperrealm.com/libconfig/libconfig.html">
libconfig</weblink> - Libconfig (LGPL) is a simple library for parsing structured configuration files, with a file format that is more compact and more readable than XML. And unlike XML, it is type-aware, so it is not necessary to do string parsing in application code. The library includes bindings for both the C and C++ languages.</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://getpot.sourceforge.net">
GetPot</weblink> GetPot (LPGL) (note not LGPL!) is a sophisticated command line and input file parsing library, contained in a header file. Provided for C++, Java, Python, and Ruby.</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.boost.org/doc/html/program_options.html">
Boost.Program_options</weblink> -  Boost.Program_options, part of the <weblink xlink:type="simple" xlink:href="http://www.boost.org">
Boost</weblink> library, is a C++ library for reading (name,value) pairs from the command line, a config file, or environment variables.</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.gnu.org/software/autogen/autoopts.html">
AutoOpts</weblink> - AutoOpts is a tool for command line and configuration file parsing from C programs. It is part of the <weblink xlink:type="simple" xlink:href="http://www.gnu.org/software/autogen/index.html">
AutoGen</weblink> suite.</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://search.cpan.org/search?query=config+loader&amp;mode=module">
Config::Loader</weblink>  - a Perl module which merges the files in a configuration directory tree into a single hash.  Can read <format wordnetid="106636806" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../138/34138.xml">
XML</link></format>
,  <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<format wordnetid="106636806" confidence="0.8">
<link xlink:type="simple" xlink:href="../530/326530.xml">
YAML</link></format>
</information>
</message>
, <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<format wordnetid="106636806" confidence="0.8">
<link xlink:type="simple" xlink:href="../082/1575082.xml">
JSON</link></format>
</information>
</message>
, <message wordnetid="106598915" confidence="0.8">
<record wordnetid="106647206" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<file wordnetid="106508816" confidence="0.8">
<indication wordnetid="106797169" confidence="0.8">
<evidence wordnetid="106643408" confidence="0.8">
<format wordnetid="106636806" confidence="0.8">
<link xlink:type="simple" xlink:href="../172/1908172.xml">
INI</link></format>
</evidence>
</indication>
</file>
</information>
</record>
</message>
, or <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../581/2581.xml">
Apache</link></software>
 configuration file formats. It also allows the overriding of configuration settings locally for working in a development environment.</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://search.cpan.org/search?query=App%3A%3AOptions&amp;mode=module">
App::Options</weblink>  - a Perl module that combines command line options, environment vars, and option file values (for program configuration) into a Perl Hash. Allows hierarchical file configuration for larger applications.</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://search.cpan.org/search?query=Config%3A%3AHierarchical&amp;mode=module">
Config::Hierarchical</weblink>  - a Perl module implementing a configuration variable container. The container has multiple categories with priority order. A full history of the variables manipulation is accessible.</entry>
</list>
</p>




</sec>
</bdy>
</datum>
</file>
</information>
</article>
