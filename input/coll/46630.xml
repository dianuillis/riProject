<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 15:42:27[mciao0828] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<system  confidence="0.9511911446218017" wordnetid="104377057">
<header>
<title>Embedded system</title>
<id>46630</id>
<revision>
<id>243653952</id>
<timestamp>2008-10-07T13:58:29Z</timestamp>
<contributor>
<username>Lightmouse</username>
<id>4469495</id>
</contributor>
</revision>
<categories>
<category>Articles lacking in-text citations</category>
<category>Embedded systems</category>
</categories>
</header>
<bdy>

<table class="metadata plainlinks ambox ">
<row>
<col>

ambox-style" style=""</col>
</row>
<row>
<col class="mbox-image"><p>

<image width="50px" src="Text_document_with_red_question_mark.svg">
</image>
</p>
</col>
<col style="" class="mbox-text">
 This article or section includes a  or , but its sources remain unclear because it has <b>insufficient  .</b>
You can  this article by introducing more precise citations . <it>(July 2008)''</it></col>
</row>
</table>


<image width="300px" src="ADSL_modem_router_internals_labeled.jpg" type="thumb">
<caption>

A <link xlink:type="simple" xlink:href="../748/25748.xml">
router</link>, an example of an embedded system. Labelled parts include a <link xlink:type="simple" xlink:href="../553/19553.xml">
microprocessor</link> (4), <link xlink:type="simple" xlink:href="../847/25847.xml">
RAM</link> (6), and <link xlink:type="simple" xlink:href="../595/50595.xml">
flash memory</link> (7).
</caption>
</image>
<p>

An <b>embedded system</b> is a special-purpose <link xlink:type="simple" xlink:href="../457/7878457.xml">
computer</link> system designed to perform one or a few dedicated functions,<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref> often with <link xlink:type="simple" xlink:href="../767/25767.xml">
real-time computing</link> constraints.  It is usually <it>embedded</it> as part of a complete device including hardware and mechanical parts. In contrast, a general-purpose computer, such as a <link xlink:type="simple" xlink:href="../137/18457137.xml">
personal computer</link>, can do many different tasks depending on programming. Embedded systems control many of the common devices in use today.</p>
<p>

Since the embedded system is dedicated to specific tasks, design engineers can optimize it, reducing the size and cost of the product, or increasing the reliability and performance.  Some embedded systems are mass-produced, benefiting from <link xlink:type="simple" xlink:href="../517/10517.xml">
economies of scale</link>.</p>
<p>

Physically, embedded systems range from portable devices such as digital watches and <link xlink:type="simple" xlink:href="../424/1247424.xml">
MP3 player</link>s, to large stationary installations like <link xlink:type="simple" xlink:href="../395/163395.xml">
traffic light</link>s, factory controllers, or the systems controlling <link xlink:type="simple" xlink:href="../347/207347.xml">
nuclear power plant</link>s. Complexity varies from low, with a single <link xlink:type="simple" xlink:href="../017/21017.xml">
microcontroller</link> chip, to very high with multiple units, peripherals and networks mounted inside a large chassis or enclosure.</p>
<p>

In general, "embedded system" is not an exactly defined term, as many systems have some element of programmability. For example, <link xlink:type="simple" xlink:href="../879/662879.xml">
Handheld computer</link>s share some elements with embedded systems &mdash; such as the operating systems and microprocessors which power them &mdash; but are not truly embedded systems, because they allow different applications to be loaded and peripherals to be connected. </p>

<sec>
<st>
 Examples of embedded systems </st>

<p>

<image width="250px" src="Alix.1C_board_with_AMD_Geode_LX_800_(PC_Engines).jpg" type="thumb">
<caption>

PC Engines' ALIX.1C <link xlink:type="simple" xlink:href="../914/455914.xml">
Mini-ITX</link> embedded board with <chip wordnetid="103020034" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<microprocessor wordnetid="103760310" confidence="0.8">
<conductor wordnetid="103088707" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<semiconductor_device wordnetid="104171831" confidence="0.8">
<link xlink:type="simple" xlink:href="../137/1186137.xml">
AMD Geode</link></semiconductor_device>
</device>
</conductor>
</microprocessor>
</instrumentality>
</artifact>
</chip>
 LX 800 together with <link xlink:type="simple" xlink:href="../534/298534.xml">
Compact Flash</link>, <link>
miniPCI</link> and PCI slots, 44-pin <link xlink:type="simple" xlink:href="../778/2778.xml">
IDE</link> interface and 256MB RAM
</caption>
</image>

<image width="250px" src="RouterBoard_112_with_U.FL-RSMA_pigtail_and_R52_miniPCI_Wi-Fi_card.jpg" type="thumb">
<caption>

An <link xlink:type="simple" xlink:href="../630/46630.xml">
embedded</link> RouterBoard 112 with <link xlink:type="simple" xlink:href="../712/10284712.xml">
U.FL</link>-<connection wordnetid="103091374" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../681/735681.xml">
RSMA</link></instrumentality>
</artifact>
</connection>
 pigtail and R52 <link>
miniPCI</link> <link xlink:type="simple" xlink:href="../973/63973.xml">
Wi-Fi</link> card widely used by <link xlink:type="simple" xlink:href="../868/185868.xml">
wireless</link> <link xlink:type="simple" xlink:href="../539/14539.xml">
Internet</link> service providers (<link xlink:type="simple" xlink:href="../293/377293.xml">
WISP</link>s) in the <country wordnetid="108544813" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../321/5321.xml">
Czech Republic</link></country>
.
</caption>
</image>
</p>
<p>

Embedded systems span all aspects of modern life and there are many examples of their use.</p>
<p>

Telecommunications systems employ numerous embedded systems from <link xlink:type="simple" xlink:href="../603/59603.xml">
telephone switch</link>es for the network to <link xlink:type="simple" xlink:href="../137/19644137.xml">
mobile phone</link>s at the end-user.
Computer networking uses dedicated <link xlink:type="simple" xlink:href="../748/25748.xml">
router</link>s and <link xlink:type="simple" xlink:href="../410/642410.xml">
network bridge</link>s to route data.</p>
<p>

<link xlink:type="simple" xlink:href="../768/189768.xml">
Consumer electronics</link> include <link xlink:type="simple" xlink:href="../304/23304.xml">
personal digital assistant</link>s (PDAs), <link xlink:type="simple" xlink:href="../424/1247424.xml">
mp3 player</link>s, mobile phones, <link xlink:type="simple" xlink:href="../629/32629.xml">
videogame console</link>s, <link xlink:type="simple" xlink:href="../797/52797.xml">
digital camera</link>s, <link xlink:type="simple" xlink:href="../809/172809.xml">
DVD player</link>s, <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../866/11866.xml">
GPS</link></instrumentality>
</artifact>
</system>
 receivers, and <link xlink:type="simple" xlink:href="../272/5272.xml">
printer</link>s.
Many household appliances, such as <link xlink:type="simple" xlink:href="../017/58017.xml">
microwave oven</link>s, <link xlink:type="simple" xlink:href="../111/172111.xml">
washing machine</link>s and <link xlink:type="simple" xlink:href="../036/81036.xml">
dishwashers</link>, are including embedded systems to provide flexibility, efficiency and features.
Advanced <link xlink:type="simple" xlink:href="../169/57169.xml">
HVAC</link> systems use networked <link xlink:type="simple" xlink:href="../822/265822.xml">
thermostat</link>s to more accurately and efficiently control temperature that can change by time of day and <link xlink:type="simple" xlink:href="../919/28919.xml">
season</link>.
<link xlink:type="simple" xlink:href="../978/184978.xml">
Home automation</link> uses wired- and wireless-networking that can be used to control lights, climate, security, audio/visual, etc., all of which use embedded devices for sensing and controlling.</p>
<p>

Transportation systems from flight to automobiles increasingly use embedded systems.
New airplanes contain advanced <link xlink:type="simple" xlink:href="../039/2039.xml">
avionics</link> such as <link xlink:type="simple" xlink:href="../148/201148.xml">
inertial guidance system</link>s and <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../866/11866.xml">
GPS</link></instrumentality>
</artifact>
</system>
 receivers that also have considerable safety requirements.
Various electric motors &mdash; <link xlink:type="simple" xlink:href="../787/707787.xml">
brushless DC motor</link>s, <link xlink:type="simple" xlink:href="../075/251075.xml">
induction motor</link>s and <link xlink:type="simple" xlink:href="../697/759697.xml">
DC motor</link>s &mdash; are using electric/electronic <link xlink:type="simple" xlink:href="../104/638104.xml">
motor controller</link>s.
<link xlink:type="simple" xlink:href="../345/13673345.xml">
Automobile</link>s, <link xlink:type="simple" xlink:href="../350/279350.xml">
electric vehicle</link>s. and <link xlink:type="simple" xlink:href="../736/157736.xml">
hybrid vehicle</link>s are increasingly using embedded systems to maximize efficiency and reduce pollution.
Other automotive safety systems such as <link xlink:type="simple" xlink:href="../587/59587.xml">
anti-lock braking system</link> (ABS), <link xlink:type="simple" xlink:href="../943/420943.xml">
Electronic Stability Control</link> (ESC/ESP), and automatic <link xlink:type="simple" xlink:href="../649/444649.xml">
four-wheel drive</link>.</p>
<p>

<link xlink:type="simple" xlink:href="../668/335668.xml">
Medical equipment</link> is continuing to advance with more embedded systems for <link xlink:type="simple" xlink:href="../081/2250081.xml">
vital signs</link> monitoring, <link xlink:type="simple" xlink:href="../714/28714.xml">
electronic stethoscope</link>s for amplifying sounds, and various <link xlink:type="simple" xlink:href="../714/234714.xml">
medical imaging</link> (<link xlink:type="simple" xlink:href="../032/24032.xml">
PET</link>, <link xlink:type="simple" xlink:href="../499/291499.xml">
SPECT</link>, <link xlink:type="simple" xlink:href="../982/50982.xml">
CT</link>, <link xlink:type="simple" xlink:href="../446/19446.xml">
MRI</link>) for non-invasive internal inspections.</p>
<p>

<image width="250px" src="GolemDustPenny_small.jpg">
</image>
</p>
<p>

In addition to commonly described embedded systems based on small computers, a new class of miniature wireless devices called <link xlink:type="simple" xlink:href="../367/669367.xml">
motes</link> are quickly gaining popularity as the field of wireless sensor networking rises.  Wireless sensor networking, <link>
WSN</link>, makes use of miniturization made possible by advanced IC design to couple full wireless subsystems to sophisticated sensor, enabling people and companies to measure a myriad of things in the physical world and act on this information through IT monitoring and control systems.  These motes are completely self contained, and will typically run off a battery source for many years before the batteries need to be changed or charged.</p>

</sec>
<sec>
<st>
 History </st>
<p>

In the earliest years of computers in the 1930-40s, computers were sometimes dedicated to a single task, but were far too large and expensive for most kinds of tasks performed by embedded computers of today. Over time however, the concept of <link xlink:type="simple" xlink:href="../992/24992.xml">
programmable controllers</link> evolved from traditional <link xlink:type="simple" xlink:href="../439/2047439.xml">
electromechanical</link> sequencers, via solid state devices, to the use of computer technology.</p>

<p>

One of the first recognizably modern embedded systems was the <computer wordnetid="103082979" confidence="0.8">
<system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<machine wordnetid="103699975" confidence="0.8">
<link xlink:type="simple" xlink:href="../887/188887.xml">
Apollo Guidance Computer</link></machine>
</device>
</instrumentality>
</artifact>
</system>
</computer>
, developed by <scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../955/449955.xml">
Charles Stark Draper</link></scientist>
 at the MIT Instrumentation Laboratory. At the project's inception, the Apollo guidance computer was considered the riskiest item in the Apollo project as it employed the then newly developed monolithic integrated circuits to reduce the size and weight. An early mass-produced embedded system was the Autonetics D-17 guidance computer for the <link xlink:type="simple" xlink:href="../365/49365.xml">
Minuteman missile</link>, released in 1961.  It was built from <link xlink:type="simple" xlink:href="../011/30011.xml">
transistor</link> <link xlink:type="simple" xlink:href="../068/39068.xml">
logic</link> and had a <link xlink:type="simple" xlink:href="../777/13777.xml">
hard disk</link> for main memory. When the Minuteman II went into production in 1966, the D-17 was replaced with a new computer that was the first high-volume use of integrated circuits.  This program alone reduced prices on quad <link xlink:type="simple" xlink:href="../388/29388.xml#xpointer(//*[./st=%22NAND+gate%22])">
nand gate ICs</link> from $1000/each to $3/each, permitting their use in commercial products.</p>
<p>

Since these early applications in the 1960s, embedded systems have come down in price and there has been a dramatic rise in processing power and functionality. The first <link xlink:type="simple" xlink:href="../553/19553.xml">
microprocessor</link> for example, the <chip wordnetid="103020034" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<microprocessor wordnetid="103760310" confidence="0.8">
<conductor wordnetid="103088707" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<semiconductor_device wordnetid="104171831" confidence="0.8">
<link xlink:type="simple" xlink:href="../393/102393.xml">
Intel 4004</link></semiconductor_device>
</device>
</conductor>
</microprocessor>
</instrumentality>
</artifact>
</chip>
, was designed for <link xlink:type="simple" xlink:href="../593/7593.xml">
calculator</link>s and other small systems but still required many external memory and support chips. In 1978 National Engineering Manufacturers Association released a "standard" for programmable microcontrollers, including almost any computer-based controllers, such as single board computers, numerical, and event-based controllers.</p>
<p>

As the cost of microprocessors and microcontrollers fell it became feasible to replace expensive knob-based <link xlink:type="simple" xlink:href="../281/1665281.xml">
analog</link> components such as <link xlink:type="simple" xlink:href="../084/76084.xml">
potentiometer</link>s and <link xlink:type="simple" xlink:href="../117/2549117.xml">
variable capacitor</link>s with up/down buttons or knobs read out by a microprocessor even in some consumer products. By the mid-1980s, most of the common previously external system components had been integrated into the same chip as the processor and this modern form of the <link xlink:type="simple" xlink:href="../017/21017.xml">
microcontroller</link> allowed an even more widespread use, which by the end of the decade were the norm rather than the exception for almost all electronics devices.</p>
<p>

The integration of microcontrollers has further increased the applications for which embedded systems are used into areas where traditionally a computer would not have been considered. A general purpose and comparatively low-cost microcontroller may often be programmed to fulfill the same role as a large number of separate components. Although in this context an embedded system is usually more complex than a traditional solution, most of the complexity is contained within the microcontroller itself. Very few additional components may be needed and most of the design effort is in the software. The intangible nature of software makes it much easier to prototype and test new revisions compared with the design and construction of a new circuit not using an embedded processor.</p>

</sec>
<sec>
<st>
Characteristics</st>
<p>

<image width="150px" src="Soekris_net4801_board.jpg" type="thumb">
</image>
</p>
<p>

<list>
<entry level="1" type="number">

 Embedded systems are designed to do some specific task, rather than be a general-purpose computer for multiple tasks. Some also have <link xlink:type="simple" xlink:href="../767/25767.xml">
real-time</link> performance constraints that must be met, for reasons such as safety and usability; others may have low or no performance requirements, allowing the system hardware to be simplified to reduce costs.     </entry>
<entry level="1" type="number">

 Embedded systems are not always standalone devices. Many embedded systems consist of small, computerized parts within a larger device that serves a more general purpose. For example, the <stringed_instrument wordnetid="104338517" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<guitar wordnetid="103467517" confidence="0.8">
<musical_instrument wordnetid="103800933" confidence="0.8">
<link xlink:type="simple" xlink:href="../711/14240711.xml">
Gibson Robot Guitar</link></musical_instrument>
</guitar>
</device>
</instrumentality>
</artifact>
</stringed_instrument>
 features an embedded system for tuning the strings, but the overall purpose of the Robot Guitar is, of course, to play music.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%222%22])">2</ref> Similarly, an embedded system in an <link xlink:type="simple" xlink:href="../345/13673345.xml">
automobile</link> provides a specific function as a subsystem of the car itself.</entry>
<entry level="1" type="number">

 The program instructions written for embedded systems are referred to as <link xlink:type="simple" xlink:href="../155/41155.xml">
firmware</link>, and are stored in read-only memory or <link xlink:type="simple" xlink:href="../595/50595.xml">
Flash memory</link> chips. They run with limited computer hardware resources: little memory, small or non-existent keyboard and/or screen.  </entry>
</list>
</p>

<ss1>
<st>
 User interfaces </st>

<p>

Embedded systems range from no user interface at all &mdash; dedicated only to one task &mdash; to complex <link>
graphical user interfaces</link> that resemble modern computer desktop operating systems.</p>

</ss1>
<ss1>
<st>
Simple systems</st>

<p>

Simple embedded devices use buttons, <link xlink:type="simple" xlink:href="../290/18290.xml">
LED</link>s, and small character- or digit-only displays, often with a simple <link xlink:type="simple" xlink:href="../283/406283.xml">
menu system</link>.</p>

</ss1>
<ss1>
<st>
In more complex systems</st>
<p>

A full graphical screen, with <link xlink:type="simple" xlink:href="../206/667206.xml">
touch</link> sensing or screen-edge buttons provides flexibility while minimising space used: the meaning of the buttons can change with the screen, and selection involves the natural behavior of pointing at what's desired. </p>
<p>

Handheld systems often have a screen with a "joystick button" for a pointing device.</p>
<p>

The rise of the <invention wordnetid="105633385" confidence="0.8">
<link xlink:type="simple" xlink:href="../139/33139.xml">
World Wide Web</link></invention>
 has given embedded designers another quite different option: providing a web page interface over a network connection.  This avoids the cost of a sophisticated display, yet provides complex input and display capabilities when needed, on another computer. This is successful for remote, permanently installed equipment such as Pan-Tilt-Zoom cameras and network routers.</p>

</ss1>
<ss1>
<st>
CPU platforms</st>

<p>

Embedded processors can be broken into two broad categories: ordinary microprocessors (μP) and microcontrollers (μC), which have many more peripherals on chip, reducing cost and size. Contrasting to the personal computer and server markets, a fairly large number of basic <link xlink:type="simple" xlink:href="../597/7597.xml">
CPU architecture</link>s are used; there are <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<model wordnetid="110324560" confidence="0.8">
<assistant wordnetid="109815790" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../091/478091.xml">
Von Neumann</link></causal_agent>
</worker>
</assistant>
</model>
</person>
</physical_entity>
 as well as various degrees of <link xlink:type="simple" xlink:href="../019/58019.xml">
Harvard architecture</link>s, <link xlink:type="simple" xlink:href="../672/3963672.xml">
RISC</link> as well as non-RISC and <link xlink:type="simple" xlink:href="../706/51706.xml">
VLIW</link>; word lengths vary from 4-bit to 64-bits and beyond (mainly in <link xlink:type="simple" xlink:href="../505/154505.xml">
DSP</link> processors) although the most typical remain 8/16-bit. Most architectures come in a large number of different variants and shapes, many of which are also manufactured by several different companies.</p>
<p>

A long but still not exhaustive list of common architectures are: <link xlink:type="simple" xlink:href="../605/1818605.xml">
65816</link>, <link xlink:type="simple" xlink:href="../594/1818594.xml">
65C02</link>, <link xlink:type="simple" xlink:href="../594/7994594.xml">
68HC08</link>, <link xlink:type="simple" xlink:href="../327/20327.xml">
68HC11</link>, <link xlink:type="simple" xlink:href="../826/64826.xml">
68k</link>, <link xlink:type="simple" xlink:href="../225/60225.xml">
8051</link>, <chip wordnetid="103020034" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<microprocessor wordnetid="103760310" confidence="0.8">
<conductor wordnetid="103088707" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<semiconductor_device wordnetid="104171831" confidence="0.8">
<link xlink:type="simple" xlink:href="../558/60558.xml">
ARM</link></semiconductor_device>
</device>
</conductor>
</microprocessor>
</instrumentality>
</artifact>
</chip>
, <link xlink:type="simple" xlink:href="../290/100290.xml">
AVR</link>, <link xlink:type="simple" xlink:href="../294/4103294.xml">
AVR32</link>, <enterprise wordnetid="108056231" confidence="0.8">
<processor wordnetid="108065937" confidence="0.8">
<business wordnetid="108061042" confidence="0.8">
<link xlink:type="simple" xlink:href="../678/1085678.xml">
Blackfin</link></business>
</processor>
</enterprise>
, <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../745/15023745.xml">
C167</link></instrumentality>
</artifact>
</system>
, <link xlink:type="simple" xlink:href="../745/730745.xml">
Coldfire</link>, <link xlink:type="simple" xlink:href="../025/1058025.xml">
COP8</link>, <link xlink:type="simple" xlink:href="../382/1445382.xml">
eZ8</link>, <link xlink:type="simple" xlink:href="../258/1210258.xml">
eZ80</link>, <link xlink:type="simple" xlink:href="../986/2882986.xml">
FR-V</link>, <link xlink:type="simple" xlink:href="../763/179763.xml">
H8</link>, <link xlink:type="simple" xlink:href="../691/13070691.xml">
HT48</link>, <link>
M16C</link>, <link>
M32C</link>, <link xlink:type="simple" xlink:href="../170/20170.xml">
MIPS</link>, <link xlink:type="simple" xlink:href="../382/218382.xml">
MSP430</link>, <link xlink:type="simple" xlink:href="../588/184588.xml">
PIC</link>, <link xlink:type="simple" xlink:href="../281/24281.xml">
PowerPC</link>, <link>
R8C</link>, <enterprise wordnetid="108056231" confidence="0.8">
<processor wordnetid="108065937" confidence="0.8">
<business wordnetid="108061042" confidence="0.8">
<link xlink:type="simple" xlink:href="../845/1082845.xml">
SHARC</link></business>
</processor>
</enterprise>
, <link xlink:type="simple" xlink:href="../510/1928510.xml">
ST6</link>, <link xlink:type="simple" xlink:href="../225/102225.xml">
SuperH</link>, <link xlink:type="simple" xlink:href="../964/9150964.xml">
TLCS-47</link>, <link xlink:type="simple" xlink:href="../964/9150964.xml">
TLCS-870</link>, <link xlink:type="simple" xlink:href="../964/9150964.xml">
TLCS-900</link>, <link xlink:type="simple" xlink:href="../564/2822564.xml">
Tricore</link>, <link xlink:type="simple" xlink:href="../694/2875694.xml">
V850</link>, <link xlink:type="simple" xlink:href="../198/34198.xml">
x86</link>, <link xlink:type="simple" xlink:href="../193/1311193.xml">
XE8000</link>, <link>
Z80</link>, etc.</p>

<ss2>
<st>
Ready made computer boards</st>
<p>

<system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../233/1781233.xml">
PC/104</link></instrumentality>
</artifact>
</system>
 and PC/104+ are examples of available <it>ready made</it> computer boards intended for small, low-volume embedded and ruggedized systems. These often use <link xlink:type="simple" xlink:href="../146/8146.xml">
DOS</link>, <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../297/6097297.xml">
Linux</link></O>
, <link xlink:type="simple" xlink:href="../495/21495.xml">
NetBSD</link>, or an embedded <link xlink:type="simple" xlink:href="../123/26123.xml">
real-time operating system</link> such as <link xlink:type="simple" xlink:href="../138/1350138.xml">
MicroC/OS-II</link>, <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../184/65184.xml">
QNX</link></O>
 or <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../105/157105.xml">
VxWorks</link></O>
.</p>
<p>

In certain applications,  where small size is not a primary concern, the components used may be compatible with those used in general purpose computers.  Boards such as the VIA <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../264/946264.xml">
EPIA</link></instrumentality>
</artifact>
</system>
 range help to bridge the gap by being PC-compatible but highly integrated, physically smaller or have other attributes making them attractive to embedded engineers.  The advantage of this approach is that low-cost commodity components may be used along with the same software development tools used for general software development.  Systems built in this way are still regarded as embedded since they are integrated into larger devices and fulfill a single role.  Examples of devices that may adopt this approach are <link xlink:type="simple" xlink:href="../628/46628.xml">
ATMs</link> and <link xlink:type="simple" xlink:href="../381/961381.xml">
arcade machines</link>.</p>

</ss2>
<ss2>
<st>
ASIC and FPGA solutions</st>
<p>

A common configuration for very-high-volume embedded systems is the <link xlink:type="simple" xlink:href="../563/100563.xml">
system on a chip</link> (SoC), an <link xlink:type="simple" xlink:href="../845/147845.xml">
application-specific integrated circuit</link> (ASIC), for which the CPU core was purchased and added as part of the chip design.  A related scheme is to use a <link xlink:type="simple" xlink:href="../969/10969.xml">
field-programmable gate array</link> (FPGA), and program it with all the logic, including the CPU.</p>

</ss2>
</ss1>
<ss1>
<st>
Peripherals</st>
<p>

Embedded Systems talk with the outside world via <link xlink:type="simple" xlink:href="../ago/Austin=2C_C$hicago.xml">
peripheral</link>s, such as:
<list>
<entry level="1" type="bullet">

Serial Communication Interfaces (SCI): <link xlink:type="simple" xlink:href="../023/26023.xml">
RS-232</link>, <link xlink:type="simple" xlink:href="../376/335376.xml">
RS-422</link>, <link xlink:type="simple" xlink:href="../248/1179248.xml">
RS-485</link> etc</entry>
<entry level="1" type="bullet">

Synchronous Serial Communication Interface: <link xlink:type="simple" xlink:href="../174/137174.xml">
I2C</link>, <conveyance wordnetid="103100490" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<bus wordnetid="102924116" confidence="0.8">
<public_transport wordnetid="104019101" confidence="0.8">
<link xlink:type="simple" xlink:href="../476/340476.xml">
SPI</link></public_transport>
</bus>
</instrumentality>
</artifact>
</conveyance>
, SSC and ESSI</entry>
<entry level="1" type="bullet">

<bus wordnetid="102924116" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../073/32073.xml">
Universal Serial Bus</link></bus>
 (USB)</entry>
<entry level="1" type="bullet">

Networks: <link xlink:type="simple" xlink:href="../499/9499.xml">
Ethernet</link>, <link xlink:type="simple" xlink:href="../284/231284.xml">
Controller Area Network</link>, <link xlink:type="simple" xlink:href="../133/518133.xml">
LonWorks</link>, etc</entry>
<entry level="1" type="bullet">

Timers: <link xlink:type="simple" xlink:href="../548/41548.xml">
PLL</link>(s), Capture/Compare and <link xlink:type="simple" xlink:href="../083/10958083.xml">
Time Processing Unit</link>s</entry>
<entry level="1" type="bullet">

Discrete IO: aka <link xlink:type="simple" xlink:href="../568/1531568.xml">
General Purpose Input/Output</link> (GPIO)</entry>
<entry level="1" type="bullet">

Analog to Digital/Digital to Analog (ADC/DAC)</entry>
<entry level="1" type="bullet">

Debugging: <link xlink:type="simple" xlink:href="../112/638112.xml">
JTAG</link>, ISP, ICSP, BDM Port, ...</entry>
</list>
</p>

</ss1>
<ss1>
<st>
Tools</st>

<p>

As for other software, embedded system designers use <link xlink:type="simple" xlink:href="../739/5739.xml">
compiler</link>s, <link xlink:type="simple" xlink:href="../368/1368.xml#xpointer(//*[./st=%22Assembler%22])">
assembler</link>s, and <link xlink:type="simple" xlink:href="../485/50485.xml">
debugger</link>s to develop embedded system software. However, they may also use some more specific tools:</p>
<p>

<list>
<entry level="1" type="bullet">

 In circuit debuggers or emulators (see next section).</entry>
<entry level="1" type="bullet">

 Utilities to add a checksum or <link xlink:type="simple" xlink:href="../838/38838.xml">
CRC</link> to a program, so the embedded system can check if the program is valid.</entry>
<entry level="1" type="bullet">

 For systems using <link xlink:type="simple" xlink:href="../TN$$/HT$C$_T$yT$N$.xml">
digital signal processing</link>, developers may use a math workbench such as <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../563/153563.xml">
Scilab</link></software>
 / <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../496/10320496.xml">
Scicos</link></software>
, <software wordnetid="106566077" confidence="0.9508927676800064">
<programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../412/20412.xml">
MATLAB</link></programming_language>
</software>
 / <link xlink:type="simple" xlink:href="../695/562695.xml">
Simulink</link>, <link xlink:type="simple" xlink:href="../437/1730437.xml">
MathCad</link>, or <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../024/49024.xml">
Mathematica</link></software>
 to simulate the mathematics.  They might also use libraries for both the host and target which eliminates developing DSP routines as done in <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../928/12578928.xml">
DSPnano RTOS</link></O>
 and <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../404/7611404.xml">
Unison Operating System</link></O>
.</entry>
<entry level="1" type="bullet">

 Custom compilers and linkers may be used to improve optimisation for the particular hardware.</entry>
<entry level="1" type="bullet">

 An embedded system may have its own special language or design tool, or add enhancements to an existing language such as <link xlink:type="simple" xlink:href="../012/11012.xml">
Forth</link> or <artifact wordnetid="100021939" confidence="0.8">
<merchandise wordnetid="103748886" confidence="0.8">
<commodity wordnetid="103076708" confidence="0.8">
<link xlink:type="simple" xlink:href="../313/890313.xml">
Basic</link></commodity>
</merchandise>
</artifact>
.</entry>
<entry level="1" type="bullet">

 Another alternative is to add a <link xlink:type="simple" xlink:href="../123/26123.xml">
Real-time operating system</link> or <link xlink:type="simple" xlink:href="../359/230359.xml">
Embedded operating system</link>, which may have DSP capabilities like <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../928/12578928.xml">
DSPnano RTOS</link></O>
.</entry>
</list>
</p>
<p>

Software tools can come from several sources:
<list>
<entry level="1" type="bullet">

 Software companies that specialize in the embedded market</entry>
<entry level="1" type="bullet">

 Ported from the <link xlink:type="simple" xlink:href="../875/11875.xml">
GNU</link> software development tools </entry>
<entry level="1" type="bullet">

 Sometimes, development tools for a personal computer can be used if the embedded processor is a close relative to a common PC processor</entry>
</list>
</p>
<p>

As the complexity of embedded systems grows, higher level tools and operating systems are migrating into machinery where it makes sense.  For example, <link xlink:type="simple" xlink:href="../137/19644137.xml">
cellphone</link>s, <link xlink:type="simple" xlink:href="../304/23304.xml">
personal digital assistant</link>s and other consumer computers often need significant software that is purchased or provided by a person other than the manufacturer of the electronics.  In these systems, an open programming environment such as <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../297/6097297.xml">
Linux</link></O>
, <link xlink:type="simple" xlink:href="../495/21495.xml">
NetBSD</link>, <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../580/22580.xml">
OSGi</link></software>
 or <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../516/1763516.xml">
Embedded Java</link></instrumentality>
</artifact>
</system>
 is required so that the third-party software provider can sell to a large market.</p>

</ss1>
<ss1>
<st>
Debugging</st>

<p>

Embedded <link xlink:type="simple" xlink:href="../395/323395.xml">
Debugging</link> may be performed at different levels, depending on the facilities available. From simplest to most sophisticated they can be roughly grouped into the following areas:
<list>
<entry level="1" type="bullet">

 Interactive resident debugging, using the simple shell provided by the embedded operating system (e.g. Forth and Basic)</entry>
<entry level="1" type="bullet">

 External debugging using logging or serial port output to trace operation using either a monitor in flash or using a debug server like the <link xlink:type="simple" xlink:href="../300/12579300.xml">
Remedy Debugger</link> which even works for heterogeneous <link xlink:type="simple" xlink:href="../743/1259743.xml">
multicore</link> systems. </entry>
<entry level="1" type="bullet">

 An in-circuit debugger (ICD), a hardware device that connects to the microprocessor via a <link xlink:type="simple" xlink:href="../112/638112.xml">
JTAG</link> or NEXUS interface. This allows the operation of the microprocessor to be controlled externally, but is typically restricted to specific debugging capabilities in the processor.</entry>
<entry level="1" type="bullet">

 An <link xlink:type="simple" xlink:href="../590/291590.xml">
in-circuit emulator</link> replaces the microprocessor with a simulated equivalent, providing full control over all aspects of the microprocessor. </entry>
<entry level="1" type="bullet">

 A complete <link xlink:type="simple" xlink:href="../937/18943937.xml">
emulator</link> provides a simulation of all aspects of the hardware, allowing all of it to be controlled and modified, and allowing debugging on a normal PC.</entry>
</list>
</p>
<p>

Unless restricted to external debugging, the programmer can typically load and run software through the tools, view the code running in the processor, and start or stop its operation. The view of the code may be as <link xlink:type="simple" xlink:href="../368/1368.xml">
assembly code</link> or <link xlink:type="simple" xlink:href="../661/27661.xml">
source-code</link>.</p>
<p>

Because an embedded system is often composed of a wide variety of elements, the debugging strategy may vary. For instance, debugging a software- (and microprocessor-) centric embedded system is different from debugging an embedded system where most of the processing is performed by peripherals (DSP, FPGA, co-processor).
An increasing number of embedded systems today use more than one single processor core. A common problem with multi-core development is the proper synchronization of software execution. In such a case, the embedded system design may wish to check the data traffic on the busses between the processor cores, which requires very low-level debugging, at signal/bus level, with a <link xlink:type="simple" xlink:href="../613/40613.xml">
logic analyzer</link>, for instance.</p>

</ss1>
<ss1>
<st>
Reliability</st>

<p>

Embedded systems often reside in machines that are expected to run continuously for years without errors, and in some cases recover by themselves if an error occurs.  Therefore the software is usually developed and tested more carefully than that for personal computers, and unreliable mechanical moving parts such as disk drives, switches or buttons are avoided. </p>
<p>

Specific reliability issues may include:
<list>
<entry level="1" type="number">

The system cannot safely be shut down for repair, or it is too inaccessible to repair. Examples include space systems, undersea cables, navigational beacons, bore-hole systems, and automobiles.</entry>
<entry level="1" type="number">

The system must be kept running for safety reasons. "Limp modes" are less tolerable. Often backups are selected by an operator. Examples include aircraft navigation, reactor control systems, safety-critical chemical factory controls, train signals, engines on single-engine aircraft.</entry>
<entry level="1" type="number">

The system will lose large amounts of money when shut down: Telephone switches, factory controls, bridge and elevator controls, funds transfer and market making, automated sales and service.</entry>
</list>
</p>
<p>

A variety of techniques are used, sometimes in combination, to recover from errors -- both software bugs such as memory leaks, and also <link xlink:type="simple" xlink:href="../599/1155599.xml">
soft error</link>s in the hardware:</p>
<p>

<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../179/862179.xml">
watchdog timer</link> that resets the computer unless the software periodically notifies the watchdog</entry>
<entry level="1" type="bullet">

 subsystems with redundant spares that can be switched over to</entry>
<entry level="1" type="bullet">

 software "limp modes" that provide partial function</entry>
<entry level="1" type="bullet">

 <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../565/8008565.xml">
Immunity Aware Programming</link></instrumentality>
</artifact>
</system>
</entry>
</list>
</p>

</ss1>
<ss1>
<st>
High vs Low Volume</st>
<p>

For high volume systems such as <link xlink:type="simple" xlink:href="../424/1247424.xml">
portable music players</link> or <link xlink:type="simple" xlink:href="../137/19644137.xml">
mobile phone</link>s, minimizing cost is usually the primary design consideration. Engineers typically select hardware that is just “good enough” to implement the necessary functions. </p>
<p>

For low-volume or prototype embedded systems, general purpose computers may be adapted by limiting the programs or by replacing the operating system with a <link xlink:type="simple" xlink:href="../123/26123.xml">
real-time operating system</link>.</p>

</ss1>
</sec>
<sec>
<st>
 Embedded software architectures </st>

<p>

There are several different types of software architecture in common use.</p>

<ss1>
<st>
 Simple control loop </st>

<p>

In this design, the software simply has a loop.  The loop calls subroutines, each of which manages a part of the hardware or software.</p>

</ss1>
<ss1>
<st>
 Interrupt controlled system </st>

<p>

Some embedded systems are predominantly interrupt controlled. This means that tasks performed by the system are triggered by different kinds of events. An interrupt could be generated for example by a timer in a predefined frequency, or by a serial port controller receiving a byte.</p>
<p>

These kinds of systems are used if event handlers need low latency and the event handlers are short and simple.</p>
<p>

Usually these kinds of systems run a simple task in a main loop also, but this task is not very sensitive to unexpected delays. </p>
<p>

Sometimes the interrupt handler will add longer tasks to a queue structure. Later, after the interrupt handler has finished, these tasks are executed by the main loop. This method brings the system close to a multitasking kernel with discrete processes.</p>

</ss1>
<ss1>
<st>
 Cooperative multitasking </st>
<p>

A <link xlink:type="simple" xlink:href="../270/5614270.xml">
nonpreemptive multitasking</link> system is very similar to the simple control loop scheme, except that the loop is hidden in an <link xlink:type="simple" xlink:href="../ury/24th_century.xml">
API</link>.  The programmer defines a series of tasks, and each task gets its own environment to "run" in.  Then, when a task is idle, it calls an idle routine (usually called "pause", "wait", "yield", "nop" (Stands for no operation), etc.).</p>
<p>

The advantages and disadvantages are very similar to the control loop, except that adding new software is easier, by simply writing a new task, or adding to the queue-interpreter.</p>

</ss1>
<ss1>
<st>
 Preemptive multitasking or multi-threading </st>
<p>

In this type of system, a low-level piece of code switches between tasks or threads based on a timer (connected to an interrupt). This is the level at which the system is generally considered to have an "operating system" kernel. Depending on how much functionality is required, it introduces more or less of the complexities of managing multiple tasks running conceptually in parallel.</p>
<p>

As any code can potentially damage the data of another task (except in larger systems using an MMU) programs must be carefully designed and tested, and access to shared data must be controlled by some synchronization strategy, such as <link xlink:type="simple" xlink:href="../709/429709.xml">
message queue</link>s, <link xlink:type="simple" xlink:href="../557/164557.xml">
semaphores</link> or a  <link xlink:type="simple" xlink:href="../867/554867.xml">
non-blocking synchronization</link> scheme.</p>
<p>

Because of these complexities, it is common for organizations to buy a <link xlink:type="simple" xlink:href="../123/26123.xml">
real-time operating system</link>, allowing the application programmers to concentrate on device functionality rather than operating system services, at least for large systems; smaller systems often cannot afford the overhead associated with a <it>generic</it> real time system, due to limitations regarding memory size, performance, and/or battery life.</p>

</ss1>
<ss1>
<st>
 Microkernels and exokernels </st>
<p>

A <link xlink:type="simple" xlink:href="../023/20023.xml">
microkernel</link> is a logical step up from a real-time OS.  The usual arrangement is that the operating system kernel allocates memory and switches the CPU to different threads of execution.  User mode processes implement major functions such as file systems, network interfaces, etc.</p>
<p>

In general, microkernels succeed when the task switching and intertask communication is fast, and fail when they are slow.</p>
<p>

<plant_part wordnetid="113086908" confidence="0.8">
<natural_object wordnetid="100019128" confidence="0.8">
<kernel wordnetid="113137010" confidence="0.8">
<link xlink:type="simple" xlink:href="../757/95757.xml">
Exokernel</link></kernel>
</natural_object>
</plant_part>
s communicate efficiently by normal subroutine calls.  The hardware, and all the software in the system are available to, and extensible by application programmers.</p>

</ss1>
<ss1>
<st>
 Monolithic kernels </st>
<p>

In this case, a relatively large kernel with sophisticated capabilities is adapted to suit an embedded environment. This gives programmers an environment similar to a desktop operating system like <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../297/6097297.xml">
Linux</link></O>
 or <link xlink:type="simple" xlink:href="../890/18890.xml">
Microsoft Windows</link>, and is therefore very productive for development; on the downside, it requires considerably more hardware resources, is often more expensive, and because of the complexity of these kernels can be less predictable and reliable.</p>
<p>

Common examples of embedded monolithic kernels are <link xlink:type="simple" xlink:href="../204/1146204.xml">
Embedded Linux</link> and <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../360/230360.xml">
Windows CE</link></O>
.</p>
<p>

Despite the increased cost in hardware, this type of embedded system is increasing in popularity, especially on the more powerful embedded devices such as <link xlink:type="simple" xlink:href="../748/25748.xml">
Wireless Routers</link> and <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../706/1445706.xml">
GPS Navigation Systems</link></instrumentality>
</artifact>
</system>
. Here are some of the reasons:</p>
<p>

<list>
<entry level="1" type="bullet">

 Ports to common embedded chip sets are available. </entry>
<entry level="1" type="bullet">

 They permit re-use of publicly available code for <link xlink:type="simple" xlink:href="../101/9101.xml">
Device Drivers</link>, <link xlink:type="simple" xlink:href="../455/33455.xml">
Web Servers</link>, <link xlink:type="simple" xlink:href="../296/1362296.xml">
Firewalls</link>, and other code.</entry>
<entry level="1" type="bullet">

 Development systems can start out with broad feature-sets, and then the distribution can be configured to exclude unneeded functionality, and save the expense of the memory that it would consume.</entry>
<entry level="1" type="bullet">

 Many engineers believe that running application code in user mode is more reliable, easier to debug and that therefore the development process is easier and the code more portable.</entry>
<entry level="1" type="bullet">

 Many embedded systems lack the tight real time requirements of a control system. A system such as Embedded Linux has fast enough response for many applications.</entry>
<entry level="1" type="bullet">

 Features requiring faster response than can be guaranteed can often be placed in <arrangement wordnetid="107938773" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<array wordnetid="107939382" confidence="0.8">
<link xlink:type="simple" xlink:href="../215/73215.xml">
hardware</link></array>
</group>
</arrangement>
.</entry>
<entry level="1" type="bullet">

 Many RTOS systems have a per-unit cost.  When used on a product that is or will become a commodity, that cost is significant.</entry>
</list>
</p>

</ss1>
<ss1>
<st>
 Exotic custom operating systems </st>
<p>

A small fraction of embedded systems require safe, timely, reliable or efficient behavior unobtainable with the one of the above architectures. In this case an organization builds a system to suit.
In some cases, the system may be partitioned into a "mechanism controller" using special techniques, and a "display controller" with a conventional operating system.  A communication system passes data between the two.</p>

</ss1>
<ss1>
<st>
 Additional software components </st>
<p>

In addition to the core operating system, many embedded systems have additional upper-layer software components. These components consists of networking protocol stacks like TCP/IP, FTP, HTTP, and HTTPS, and also included storage capabilities like FAT and Flash memory management systems. If the embedded devices has audio and video capabilities, then the appropriate drivers and codecs will be present in the system. In the case of the monolithic kernels, many of these software layers are included. In the RTOS category, the availability of the additional software components depends upon the commercial offering.</p>

</ss1>
</sec>
<sec>
<st>
 See also </st>

<p>

<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../514/7165514.xml">
Communications server</link> 	</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../020/44020.xml">
DSP</link>  </entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../111/570111.xml">
Electronic Control Unit</link>  </entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../359/230359.xml">
Embedded operating system</link>s</entry>
<entry level="1" type="bullet">

 <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../447/638447.xml">
Embedded software</link></instrumentality>
</artifact>
</system>
</entry>
<entry level="1" type="bullet">

 <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../512/11891512.xml">
System on module</link></instrumentality>
</artifact>
</system>
</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../563/100563.xml">
System on a chip</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../155/41155.xml">
Firmware</link> 	 </entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../822/655822.xml">
Information appliance</link> 	 </entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../553/19553.xml">
Microprocessor</link> 	 </entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../015/23015.xml">
Programming language</link>s 	 </entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../123/26123.xml">
Real-time operating system</link> 	 </entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../010/27010.xml">
Software engineering</link> 	 </entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../871/31871.xml">
Ubiquitous computing</link></entry>
</list>
</p>


</sec>
<sec>
<st>
References</st>

<p>

<reflist>
<entry id="1">
<link xlink:type="simple" xlink:href="../281/10822281.xml">
Michael Barr</link>.&#32;"<weblink xlink:type="simple" xlink:href="http://www.netrino.com/Embedded-Systems/Glossary">
Embedded Systems Glossary</weblink>".&#32;<it>Netrino Technical Library</it>.&#32;Retrieved on <link>
2007-04-21</link>.</entry>
<entry id="2">
<weblink xlink:type="simple" xlink:href="http://www.embedded.com/underthehood/207401418">
Embedded.com - Under the Hood: Robot Guitar embeds autotuning</weblink></entry>
</reflist>
</p>

</sec>
<sec>
<st>
 Further reading </st>
<p>

<list>
<entry level="1" type="bullet">

John Catsoulis, <weblink xlink:type="simple" xlink:href="http://www.oreilly.com/catalog/dbhardware2/">
Designing Embedded Hardware</weblink>, O'Reilly, May 2005, ISBN 0-596-00755-8.</entry>
<entry level="1" type="bullet">

 Anoop MS, <weblink xlink:type="simple" xlink:href="http://www.infosecwriters.com/text_resources/pdf/Anoopms_Embedded_Systems.pdf">
Security needs in embedded systems</weblink>, Tata Elxsi, India, May 2008.</entry>
</list>
</p>

</sec>
<sec>
<st>
External links</st>


<p>

<image location="none" width="50px" src="Wikiversity-logo.svg">
<caption>

Wikiversity
</caption>
</image>

At <work wordnetid="100575741" confidence="0.8">
<social_group wordnetid="107950920" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<gathering wordnetid="107975026" confidence="0.8">
<community wordnetid="108223802" confidence="0.8">
<undertaking wordnetid="100795720" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<link xlink:type="simple" xlink:href="../479/1354479.xml">
Wikiversity</link></activity>
</psychological_feature>
</act>
</group>
</undertaking>
</community>
</gathering>
</event>
</social_group>
</work>
, you can learn about: </p>

<p>

<list>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.esi.nl/">
The Embedded Systems Institute</weblink></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.FreeRTOS.org/implementation/">
How a real time operating system works</weblink></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://electronicdesign.com/subject/embedded">
Embedded in Electronic Design</weblink></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.embedded.com">
Home of the <it>Embedded Systems Programming</it> magazine</weblink></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://embeddedsystemnews.com">
Embedded System News</weblink></entry>
</list>
</p>

<p>

<table style=";" class="navbox" cellspacing="0">
<row>
<col style="padding:2px;">
<table style="width:100%;background:transparent;color:inherit;;" class="nowraplinks collapsible autocollapse " cellspacing="0">
<row>
<header colspan="3" style=";" class="navbox-title">
<link xlink:type="simple" xlink:href="../244/3866244.xml">
Computer sizes</link></header>
</row>
<row style="height:2px;">

</row>
<row>
<col style=";padding:0.35em 1.0em; line-height:1.1em;;" class="navbox-group">
Larger</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;padding:0.25em 0; line-height:1.4em;" class="navbox-list navbox-odd">
<link xlink:type="simple" xlink:href="../153/37153.xml">
Super</link>&nbsp;·  <class wordnetid="107997703" confidence="0.8">
<collection wordnetid="107951464" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<link xlink:type="simple" xlink:href="../585/927585.xml">
Minisuper</link></group>
</collection>
</class>
&nbsp;·  <link xlink:type="simple" xlink:href="../266/20266.xml">
Mainframe</link>&nbsp;·  <link xlink:type="simple" xlink:href="../272/20272.xml">
Mini</link>&nbsp;·  <class wordnetid="107997703" confidence="0.8">
<collection wordnetid="107951464" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<link xlink:type="simple" xlink:href="../808/194808.xml">
Supermini</link></group>
</collection>
</class>
&nbsp;·  <generic wordnetid="107899976" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../116/42116.xml">
Server</link></generic>
</col>
<col style="width:0%;padding:0px 0px 0px 2px;" rowspan="7">
<image width="60px" src="Cray_2_Arts_et_Metiers_dsc03940.jpg">
<caption>

Cray-2
</caption>
</image>

<image width="60px" src="SE_P910i.jpg">
<caption>

Sony Ericson P910i "smartphone"
</caption>
</image>
</col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";padding:0.35em 1.0em; line-height:1.1em;;" class="navbox-group">
<link xlink:type="simple" xlink:href="../144/48144.xml">
Micro</link></col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;padding:0.25em 0; line-height:1.4em;" class="navbox-list navbox-even">
<link xlink:type="simple" xlink:href="../137/18457137.xml">
Personal</link>&nbsp;·  <link xlink:type="simple" xlink:href="../181/68181.xml">
Workstation</link>&nbsp;·  <link xlink:type="simple" xlink:href="../950/13950.xml">
Home</link>&nbsp;·  <link xlink:type="simple" xlink:href="../742/52742.xml">
Desktop</link>&nbsp;·  <link xlink:type="simple" xlink:href="../556/2236556.xml">
SFF</link></col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";padding:0.35em 1.0em; line-height:1.1em;;" class="navbox-group">
<class wordnetid="107997703" confidence="0.8">
<collection wordnetid="107951464" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<link xlink:type="simple" xlink:href="../187/657187.xml">
Mobile</link></group>
</collection>
</class>
</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<table style="width:100%;;;;" class="nowraplinks  navbox-subgroup" cellspacing="0">
<row>
<col colspan="2" style="width:100%;padding:0px;padding:0.15em 0; line-height:1.4em;;;" class="navbox-list navbox-odd">
<class wordnetid="107997703" confidence="0.8">
<collection wordnetid="107951464" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<link xlink:type="simple" xlink:href="../191/3118191.xml">
Cart</link></group>
</collection>
</class>
&nbsp;/ <link xlink:type="simple" xlink:href="../851/250851.xml">
Portable</link>&nbsp;/  <link xlink:type="simple" xlink:href="../714/179714.xml">
Desktop replacement computer</link>&nbsp;·  <link xlink:type="simple" xlink:href="../584/198584.xml">
Laptop</link>&nbsp;·  <link xlink:type="simple" xlink:href="../883/3854883.xml">
Subnotebook</link> (<link xlink:type="simple" xlink:href="../860/867860.xml">
Netbook</link>)&nbsp;·  <class wordnetid="107997703" confidence="0.8">
<collection wordnetid="107951464" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<link xlink:type="simple" xlink:href="../924/152924.xml">
Tablet</link></group>
</collection>
</class>
 (<link xlink:type="simple" xlink:href="../851/4185851.xml">
Ultra-Mobile PC</link>)&nbsp;·  <computer wordnetid="103082979" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<machine wordnetid="103699975" confidence="0.8">
<link xlink:type="simple" xlink:href="../880/772880.xml">
Portable</link></machine>
</device>
</instrumentality>
</artifact>
</computer>
&nbsp;/  <computer wordnetid="103082979" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<machine wordnetid="103699975" confidence="0.8">
<link xlink:type="simple" xlink:href="../919/405919.xml">
Mobile data terminal</link></machine>
</device>
</instrumentality>
</artifact>
</computer>
&nbsp;·  <computer wordnetid="103082979" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<machine wordnetid="103699975" confidence="0.8">
<link xlink:type="simple" xlink:href="../410/1971410.xml">
Electronic organizer</link></machine>
</device>
</instrumentality>
</artifact>
</computer>
&nbsp;·  <link xlink:type="simple" xlink:href="../661/1149661.xml">
E-book reader</link>&nbsp;·  <link xlink:type="simple" xlink:href="../482/1487482.xml">
Pocket computer</link>&nbsp;·  <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../199/14199.xml">
Handheld game console</link></instrumentality>
</artifact>
</system>
&nbsp;·  <link xlink:type="simple" xlink:href="../109/33109.xml">
Wearable computer</link></col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";padding-left:0em;padding-right:0em;font-weight:normal;;" class="navbox-group">
<link xlink:type="simple" xlink:href="../304/23304.xml">
PDA</link>s&nbsp;/ <link xlink:type="simple" xlink:href="../822/655822.xml">
IA</link>s</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;padding:0.15em 0; line-height:1.4em;;;" class="navbox-list navbox-even">
<computer wordnetid="103082979" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<machine wordnetid="103699975" confidence="0.8">
<link xlink:type="simple" xlink:href="../889/1807889.xml">
Handheld PC</link></machine>
</device>
</instrumentality>
</artifact>
</computer>
&nbsp;·  <link xlink:type="simple" xlink:href="../170/69170.xml">
Pocket PC</link>&nbsp;·  <link xlink:type="simple" xlink:href="../079/167079.xml">
Smartphone</link>&nbsp;·  <link xlink:type="simple" xlink:href="../380/11884380.xml">
PDA phone</link>&nbsp;·  <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<player wordnetid="110439851" confidence="0.8">
<contestant wordnetid="109613191" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../437/1560437.xml">
PMP</link></causal_agent>
</contestant>
</player>
</person>
</physical_entity>
s&nbsp;·  <link xlink:type="simple" xlink:href="../424/1247424.xml">
DAP</link>s&nbsp;· <link xlink:type="simple" xlink:href="../955/10757955.xml">
Mobile Internet Devices</link></col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";padding-left:0em;padding-right:0em;font-weight:normal;;" class="navbox-group">
<link xlink:type="simple" xlink:href="../593/7593.xml">
Calculator</link>s</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;padding:0.15em 0; line-height:1.4em;;;" class="navbox-list navbox-odd">
<physical_entity wordnetid="100001930" confidence="0.8">
<expert wordnetid="109617867" confidence="0.8">
<system wordnetid="104377057" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<calculator wordnetid="109887034" confidence="0.8">
<link xlink:type="simple" xlink:href="../004/335004.xml">
Graphing</link></calculator>
</causal_agent>
</instrumentality>
</artifact>
</person>
</system>
</expert>
</physical_entity>
</col>
</row>
</table>
</col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";padding:0.35em 1.0em; line-height:1.1em;;" class="navbox-group">
Other</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;padding:0.25em 0; line-height:1.4em;" class="navbox-list navbox-even">
<link xlink:type="simple" xlink:href="../424/194424.xml">
Single-board computer</link>&nbsp;·  <link xlink:type="simple" xlink:href="../662/1076662.xml">
Wireless sensor network</link>&nbsp;·  <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../017/21017.xml">
Microcontroller</link></instrumentality>
</artifact>
</system>
&nbsp;·  <substance wordnetid="100019613" confidence="0.8">
<part wordnetid="113809207" confidence="0.8">
<material wordnetid="114580897" confidence="0.8">
<link xlink:type="simple" xlink:href="../367/669367.xml">
Smartdust</link></material>
</part>
</substance>
&nbsp;·  <class wordnetid="107997703" confidence="0.8">
<collection wordnetid="107951464" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<link xlink:type="simple" xlink:href="../959/6241959.xml">
Nanocomputer</link></group>
</collection>
</class>
</col>
</row>
</table>
</col>
</row>
</table>
</p>



</sec>
</bdy>
</system>
</article>
