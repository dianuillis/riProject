<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 21:21:30[mciao0826] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<artifact  confidence="0.8" wordnetid="100021939">
<instrumentality  confidence="0.8" wordnetid="103575240">
<device  confidence="0.8" wordnetid="103183080">
<machine  confidence="0.8" wordnetid="103699975">
<header>
<title>Hardware-assisted virtualization</title>
<id>4697927</id>
<revision>
<id>240148195</id>
<timestamp>2008-09-22T03:08:16Z</timestamp>
<contributor>
<username>Spea201</username>
<id>1233599</id>
</contributor>
</revision>
<categories>
<category>Virtual machines</category>
<category>Virtualization software</category>
</categories>
</header>
<bdy>

<indent level="1">

<it>Main article: <link xlink:type="simple" xlink:href="../356/18311356.xml">
virtualization</link></it>
</indent>
<p>

<b>Hardware-assisted virtualization</b> is a <link xlink:type="simple" xlink:href="../356/18311356.xml">
virtualization</link> approach that enables efficient <link xlink:type="simple" xlink:href="../596/8273596.xml">
full virtualization</link> using help from hardware capabilities, primarily from the host processors. Full virtualization is used to simulate a complete hardware environment, or <link xlink:type="simple" xlink:href="../353/32353.xml">
virtual machine</link>, in which an unmodified guest <link xlink:type="simple" xlink:href="../194/22194.xml">
operating system</link> (using the same <link xlink:type="simple" xlink:href="../772/47772.xml">
instruction set</link> as the host machine) executes in complete isolation. Hardware-assisted virtualization was first implemented on the <platform wordnetid="103961939" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<surface wordnetid="104362025" confidence="0.8">
<horizontal_surface wordnetid="103536348" confidence="0.8">
<link xlink:type="simple" xlink:href="../785/59785.xml">
IBM System/370</link></horizontal_surface>
</surface>
</artifact>
</platform>
<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref>, and was recently (2007) added to <link xlink:type="simple" xlink:href="../198/34198.xml">
x86</link> processors (<link>
Intel VT</link> or <link xlink:type="simple" xlink:href="../179/996179.xml">
AMD-V</link>).</p>
<p>

Hardware-assisted virtualization is also known as <b>accelerated virtualization</b>; <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../852/590852.xml">
Xen</link></software>
 calls it <b>hardware virtual machine</b> (<b>HVM</b>), <company wordnetid="108058098" confidence="0.8">
<institution wordnetid="108053576" confidence="0.8">
<link xlink:type="simple" xlink:href="../242/8890242.xml">
Virtual Iron</link></institution>
</company>
 calls it <b>native virtualization</b>.</p>

<sec>
<st>
 History </st>

<p>

<indent level="1">

<it>See also: <link xlink:type="simple" xlink:href="../890/6967890.xml">
Timeline of virtualization development</link></it>
</indent>

Hardware-assisted virtualization was first introduced on the <platform wordnetid="103961939" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<surface wordnetid="104362025" confidence="0.8">
<horizontal_surface wordnetid="103536348" confidence="0.8">
<link xlink:type="simple" xlink:href="../785/59785.xml">
IBM System/370</link></horizontal_surface>
</surface>
</artifact>
</platform>
 in 1972, for use with <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../018/315018.xml">
VM/370</link></O>
, the first virtual machine operating system. Virtualization was eclipsed in the late 1970s, with the advent of <link xlink:type="simple" xlink:href="../272/20272.xml">
minicomputer</link>s that allowed for efficient timesharing, and later with the commoditization of <link xlink:type="simple" xlink:href="../144/48144.xml">
microcomputer</link>s.</p>
<p>

The proliferation of x86 servers rekindled interest in virtualization. The primary driver was the potential for server consolidation: virtualization allowed a single server to replace multiple underutilized dedicated servers.</p>
<p>

However, the <link xlink:type="simple" xlink:href="../198/34198.xml">
x86</link> architecture did not meet the <link xlink:type="simple" xlink:href="../085/957085.xml">
Popek and Goldberg virtualization requirements</link> to achieve “classical virtualization″:
<list>
<entry level="1" type="bullet">

 equivalence: a program running under the <link xlink:type="simple" xlink:href="../216/1267216.xml">
VMM</link> should exhibit a behavior essentially identical to that demonstrated when running on an equivalent machine directly;</entry>
<entry level="1" type="bullet">

 resource control (also called safety): the VMM must be in complete control of the virtualized resources;</entry>
<entry level="1" type="bullet">

 efficiency: a statistically dominant fraction of machine instructions must be executed without VMM intervention. </entry>
</list>

This made it difficult to implement a virtual machine monitor for this type of processor. Specific limitations included the inability to <link xlink:type="simple" xlink:href="../447/7380447.xml">
trap</link> on some <link xlink:type="simple" xlink:href="../860/1692860.xml">
privileged</link> instructions.</p>
<p>

To compensate for  these architectural limitations, virtualization of the x86 architecture has been accomplished through two methods: full virtualization or paravirtualization.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%222%22])">2</ref> Both create the illusion of physical hardware to achieve the goal of operating system independence from the hardware but present some trade-offs in performance and complexity.</p>
<p>

<it><link xlink:type="simple" xlink:href="../546/1441546.xml">
Paravirtualization</link></it> has primarily been used for university research - <link xlink:type="simple" xlink:href="../247/207247.xml">
Denali</link> or <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../852/590852.xml">
Xen</link></software>
. The research projects employ this technique to run modified versions of operating systems, for which source code is readily available (such as Linux and FreeBSD).  A paravirtualized virtual machine provides a special API requiring substantial OS modifications.  The best known commercial implementations of paravirtualization are modified Linux kernels from <link xlink:type="simple" xlink:href="../852/590852.xml">
XenSource</link> and GNU/Linux distributors.</p>
<p>

<it><artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<machine wordnetid="103699975" confidence="0.8">
<link xlink:type="simple" xlink:href="../596/8273596.xml">
Full virtualization</link></machine>
</device>
</instrumentality>
</artifact>
</it> was implemented in first-generation x86 VMMs. It relies on <link xlink:type="simple" xlink:href="../708/218708.xml">
binary translation</link> to trap and virtualize the execution of certain sensitive, non-virtualizable instructions. With this approach, critical instructions are discovered (statically or dynamically at run-time) and replaced with traps into the VMM to be emulated in software. Binary translation can incur a large performance overhead in comparison to a virtual machine running on natively virtualized architectures such as the IBM System/370.  <link xlink:type="simple" xlink:href="../260/8934260.xml">
VirtualBox</link> and <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../250/8175250.xml">
VMware Workstation</link></software>
 (for 32-bit guests only), as well as <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../015/312015.xml">
Microsoft Virtual PC</link></software>
, are well-known commercial implementations of full virtualization.</p>
<p>

With hardware-assisted virtualization, the VMM can efficiently virtualize the entire x86 instruction set by handling these sensitive instructions using a classic trap-and-emulate model in hardware, as opposed to software.</p>
<p>

<link xlink:type="simple" xlink:href="../617/14617.xml">
Intel</link> and <link xlink:type="simple" xlink:href="../ury/24th_century.xml">
AMD</link> came with distinct implementations of hardware-assisted x86 virtualization, <link>
Intel VT</link> and <link xlink:type="simple" xlink:href="../179/996179.xml">
AMD-V</link>, respectively. On the <chip wordnetid="103020034" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<microprocessor wordnetid="103760310" confidence="0.8">
<conductor wordnetid="103088707" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<semiconductor_device wordnetid="104171831" confidence="0.8">
<link xlink:type="simple" xlink:href="../454/15454.xml">
Itanium</link></semiconductor_device>
</device>
</conductor>
</microprocessor>
</instrumentality>
</artifact>
</chip>
 architecture, hardware-assisted virtualization is known as VT-i.</p>
<p>

Well-known implementations of hardware-assisted x86 virtualization include <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../250/8175250.xml">
VMware Workstation</link></software>
 (for 64-bit guests only), <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../852/590852.xml">
Xen</link></software>
 3.x (including derivatives like <company wordnetid="108058098" confidence="0.8">
<institution wordnetid="108053576" confidence="0.8">
<link xlink:type="simple" xlink:href="../242/8890242.xml">
Virtual Iron</link></institution>
</company>
), <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../133/8412133.xml">
Linux KVM</link></software>
 and <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../001/19001.xml">
Microsoft</link></company>
 <idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<component wordnetid="105868954" confidence="0.8">
<part wordnetid="105867413" confidence="0.8">
<link xlink:type="simple" xlink:href="../084/11168084.xml">
Hyper-V</link></part>
</component>
</concept>
</idea>
.</p>

</sec>
<sec>
<st>
 Hardware-Assisted Virtualization on the IBM System/370 </st>

</sec>
<sec>
<st>
 x86 Hardware-Assisted Virtualization </st>

</sec>
<sec>
<st>
 Pros </st>
<p>

Hardware-assisted virtualization reduces the maintenance overhead of paravirtualization as it restricts (ideally, eliminates) the amount of changes needed in the guest operating system.  It is also considerably easier to obtain better performance.  A practical benefit of hardware-assisted virtualization that has been cited by VMware engineers<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%223%22])">3</ref> and Virtual Iron.</p>

</sec>
<sec>
<st>
 Cons </st>
<p>

Hardware-assisted virtualization requires hardware support, which has only recently (2007) become available on x86 processors.</p>
<p>

A “pure” hardware-assisted virtualization approach, using entirely unmodified guest operating systems, involves many VM traps, and thus high CPU overheads; this limits scalability and the efficiency of server consolidation.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%224%22])">4</ref> This performance hit can be mitigated by the use of paravirtualized drivers; the combination has been called “hybrid virtualization”<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%225%22])">5</ref>.</p>

</sec>
<sec>
<st>
See also</st>
<p>

<list>
<entry level="1" type="bullet">

 Further refinements of hardware-assisted virtualization are possible using an <link xlink:type="simple" xlink:href="../181/5313181.xml">
IOMMU</link>; this allows native-speed access to dedicated hardware from a guest operating system, including <link xlink:type="simple" xlink:href="../717/57717.xml">
DMA</link>-capable hardware</entry>
<entry level="1" type="bullet">

 Other virtualization techniques include <link xlink:type="simple" xlink:href="../340/2770340.xml">
operating system-level virtualization</link>, as practiced by <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../664/2143664.xml">
Parallels Virtuozzo Containers</link></software>
, and <link xlink:type="simple" xlink:href="../251/5299251.xml">
application virtualization</link>.</entry>
<entry level="1" type="bullet">

 <link>
Nanokernel</link></entry>
</list>
</p>

</sec>
<sec>
<st>
References</st>

<p>

<reflist>
<entry id="1">
Fisher-Ogden, page 2</entry>
<entry id="2">
Chris Barclay, <it>New approach to virtualizing x86s</it>, <work wordnetid="104599396" confidence="0.8">
<product wordnetid="104007894" confidence="0.8">
<magazine wordnetid="106595351" confidence="0.8">
<print_media wordnetid="106263609" confidence="0.8">
<creation wordnetid="103129123" confidence="0.8">
<press wordnetid="106263369" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<medium wordnetid="106254669" confidence="0.8">
<publication wordnetid="106589574" confidence="0.8">
<link xlink:type="simple" xlink:href="../633/5563633.xml">
Network World</link></publication>
</medium>
</instrumentality>
</artifact>
</press>
</creation>
</print_media>
</magazine>
</product>
</work>
, 10/20/2006</entry>
<entry id="3">
See http://x86vmm.blogspot.com/2005/12/graphics-and-io-virtualization.html</entry>
<entry id="4">
See http://www.valinux.co.jp/documents/tech/presentlib/2007/2007xenconf/Intel.pdf</entry>
<entry id="5">
Jun Nakajima and Asit K. Mallick, <it>Hybrid-Virtualization—Enhanced Virtualization for Linux</it>, in <it>Proceedings of the Linux Symposium</it>, Ottawa, June 2007, http://ols.108.redhat.com/2007/Reprints/nakajima-Reprint.pdf</entry>
</reflist>
</p>

</sec>
<sec>
<st>
Bibliography</st>

<p>

<list>
<entry level="1" type="bullet">

 John Fisher-Ogden (<link>
UCSD</link>), <it>Hardware Support for Efficient Virtualization</it>, <weblink xlink:type="simple" xlink:href="http://www.cse.ucsd.edu/~jfisherogden/hardwareVirt.pdf">
online copy</weblink></entry>
</list>
</p>

</sec>
<sec>
<st>
External links</st>
<p>

<list>
<entry level="1" type="definition">

General links</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://x86virtualization.com/">
General current information about x86 Virtualization</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://x86virtualization.com/">
Virtualization reference information</weblink></entry>
</list>
</p>

</sec>
</bdy>
</machine>
</device>
</instrumentality>
</artifact>
</article>
