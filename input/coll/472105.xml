<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 17:08:20[mciao0826] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<system  confidence="0.8" wordnetid="104377057">
<artifact  confidence="0.8" wordnetid="100021939">
<instrumentality  confidence="0.8" wordnetid="103575240">
<header>
<title>Large file support</title>
<id>472105</id>
<revision>
<id>209060158</id>
<timestamp>2008-04-29T19:14:36Z</timestamp>
<contributor>
<username>Chowbok</username>
<id>54304</id>
</contributor>
</revision>
<categories>
<category>Computer file systems</category>
</categories>
</header>
<bdy>

<b>Large file support</b>, often abbreviated to <b>LFS</b>, is the term frequently applied to the ability to create files larger than 2 <link xlink:type="simple" xlink:href="../000/147000.xml">
GiB</link> on 32-bit <link xlink:type="simple" xlink:href="../194/22194.xml">
operating system</link>s.
<sec>
<st>
 Rationale </st>
<p>

Traditionally, many operating systems and their underlying <link xlink:type="simple" xlink:href="../280/1010280.xml">
file system</link> implementations used <link xlink:type="simple" xlink:href="../733/80733.xml">
32-bit</link> <link xlink:type="simple" xlink:href="../563/14563.xml">
integer</link>s to represent <link xlink:type="simple" xlink:href="../077/7077.xml">
file</link> sizes and positions.  Consequently no file could be larger than 232 bytes (4 GiB).  The problem was exacerbated by treating the sizes as <link xlink:type="simple" xlink:href="../616/154616.xml">
signed</link> numbers, which further lowered the limit to 231 bytes (2 GiB).  Files larger than 2 GiB, too large for 32-bit operating systems to handle, came to be known as <it>large files</it>.</p>
<p>

While the 2 GiB limit was quite acceptable at a time when <link xlink:type="simple" xlink:href="../777/13777.xml">
hard disk</link>s were smaller, the general increase in storage capacity combined with increased server and desktop file usage, especially for <link xlink:type="simple" xlink:href="../377/8377.xml">
database</link> and <link xlink:type="simple" xlink:href="../420/20420.xml">
multimedia</link> files, led to intense pressure for OS vendors to remove the limitation.</p>
<p>

In 1996, multiple vendors responded by forming an industry initiative known as the <b>Large File Summit</b> (thus "LFS" can be considered to stand for either "Large file support" or "Large File Summit"), tasked to define a standardized way to switch to <link xlink:type="simple" xlink:href="../285/148285.xml">
64-bit</link> numbers to represent file sizes. (Merely ensuring the sizes were treated as <link xlink:type="simple" xlink:href="../200/1609200.xml">
unsigned</link> numbers would only up the limit from 2 GiB to 4 GiB, which would have been only a stopgap measure given the explosive growth in data storage.)  It is worth noting that 64-bit operating systems such as <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../275/38275.xml">
Tru64 UNIX</link></O>
 never had a 32-bit limit to begin with, and hence needed no additional "large file support".</p>
<p>

This switch caused deployment issues and required design choices the consequences of which can still be seen:
<list>
<entry level="1" type="bullet">

 The change to 64-bit file sizes frequently required incompatible changes to file system layout, which meant that large file support sometimes necessitated a file system change.  For example, <link xlink:type="simple" xlink:href="../890/18890.xml">
Microsoft Windows</link>' <link xlink:type="simple" xlink:href="../045/53045.xml">
FAT32</link> file system does not support files larger than 4 GiB; one has to use <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../184/39184.xml">
NTFS</link></instrumentality>
</artifact>
</system>
 instead.</entry>
<entry level="1" type="bullet">

 To support binary <link xlink:type="simple" xlink:href="../459/4459.xml">
compatibility</link> with old <artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<furnishing wordnetid="103405265" confidence="0.8">
<table wordnetid="104379243" confidence="0.8">
<furniture wordnetid="103405725" confidence="0.8">
<console_table wordnetid="103092883" confidence="0.8">
<link xlink:type="simple" xlink:href="../746/454746.xml">
applications</link></console_table>
</furniture>
</table>
</furnishing>
</instrumentality>
</artifact>
, operating system <link xlink:type="simple" xlink:href="../ury/24th_century.xml">
interfaces</link> had to retain their use of 32-bit file sizes and new interfaces had to be designed specifically for large file support.</entry>
<entry level="1" type="bullet">

 To support writing <link xlink:type="simple" xlink:href="../804/214804.xml">
portable</link> code that makes use of LFS where possible, <link xlink:type="simple" xlink:href="../378/324378.xml">
C standard library</link> authors devised mechanisms that, depending on <language wordnetid="106282651" confidence="0.8">
<link xlink:type="simple" xlink:href="../835/231835.xml">
preprocessor</link></language>
 constants, transparently redefined the functions to the 64-bit large file aware ones.</entry>
<entry level="1" type="bullet">

 Many old interfaces, especially <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../021/6021.xml">
C</link></programming_language>
-based ones, explicitly specified argument types in a way that did not allow straightforward nor transparent transition to 64-bit types.  For example, the C functions <link xlink:type="simple" xlink:href="../937/4352937.xml">
fseek</link> and ftell operate on file positions of type long int, which is typically 32 bits wide on 32-bit architecture, and cannot be made larger without sacrificing backward compatibility.  (This was resolved by introducing new functions fseeko and ftello. On Windows machines, under Visual C++, functions _lseeki64 and _telli64 are used.)</entry>
<entry level="1" type="bullet">

 The above efforts notwithstanding, all applications had to be <link xlink:type="simple" xlink:href="../932/40932.xml">
recompiled</link> to make them LFS-aware.  The resulting <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../392/217392.xml">
binaries</link></instrumentality>
</artifact>
</system>
 were typically not runnable on older releases of the same operating system.  This was, and to some extent still remains, a problem for some application vendors.</entry>
</list>
</p>
<p>

As a result of the aforementioned transition issues, many present-day applications still do not support large files.</p>

</sec>
<sec>
<st>
External links</st>
<p>

<list>
<entry level="1" type="bullet">

 &#32;(August 14, 1996).&#32;"<it><weblink xlink:type="simple" xlink:href="http://opengroup.org/platform/lfs.html">
Adding Large File Support to the Single UNIX Specification</weblink></it>". &#32;X/Open Base Working Group.&#32;Retrieved on <link>
2006-09-10</link>.</entry>
<entry level="1" type="bullet">

 Andreas Jaeger&#32;(Feb 15 2005).&#32;"<it><weblink xlink:type="simple" xlink:href="http://www.suse.de/~aj/linux_lfs.html">
Large File Support in Linux</weblink></it>". &#32;SuSE GmbH (now Novell, Inc.).&#32;Retrieved on <link>
2006-09-10</link>.</entry>
<entry level="1" type="bullet">

 Solaris OS group&#32;(March 1996).&#32;"<it><weblink xlink:type="simple" xlink:href="http://www.sun.com/software/whitepapers/wp-largefiles/largefiles.pdf">
Large Files in Solaris: A White Paper</weblink></it>". &#32;Sun Microsystems, Inc..&#32;Retrieved on <link>
2006-09-10</link>.</entry>
</list>
</p>

</sec>
</bdy>
</instrumentality>
</artifact>
</system>
</article>
