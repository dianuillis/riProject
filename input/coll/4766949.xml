<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 21:17:59[mciao0828] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<event  confidence="0.8" wordnetid="100029378">
<rule  confidence="0.8" wordnetid="105846932">
<act  confidence="0.8" wordnetid="100030358">
<psychological_feature  confidence="0.8" wordnetid="100023100">
<procedure  confidence="0.8" wordnetid="101023820">
<activity  confidence="0.8" wordnetid="100407535">
<algorithm  confidence="0.8" wordnetid="105847438">
<header>
<title>Verhoeff algorithm</title>
<id>4766949</id>
<revision>
<id>241099558</id>
<timestamp>2008-09-26T10:44:48Z</timestamp>
<contributor>
<username>HumphUK</username>
<id>5251114</id>
</contributor>
</revision>
<categories>
<category>Modular arithmetic</category>
<category>Error detection and correction</category>
<category>Checksum algorithms</category>
</categories>
</header>
<bdy>

The <b>Verhoeff algorithm</b>, a <link xlink:type="simple" xlink:href="../538/7538.xml">
checksum</link> formula for <link xlink:type="simple" xlink:href="../375/10375.xml">
error detection</link> first published in <link xlink:type="simple" xlink:href="../610/34610.xml">
1969</link>, was developed by Dutch mathematician <link>
Jacobus Verhoeff</link> (born <link xlink:type="simple" xlink:href="../939/34939.xml">
1927</link>).  Like the more widely known <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../440/582440.xml">
Luhn algorithm</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
, it works with strings of <link xlink:type="simple" xlink:href="../214/8214.xml">
decimal</link> digits of any length.  It does a better job than the Luhn algorithm, though, in that it will detect <it>all</it> "transposition" errors (switching of two adjacent digits), as well as catching many other types of errors that pass the Luhn formula undetected.<p>

Verhoeff devised his algorithm using the properties of D5 (the <link xlink:type="simple" xlink:href="../267/100267.xml">
dihedral group</link> of order 10) — a non-commutative system of operations on ten elements, corresponding to the results of rotating or  reflecting (flipping) a regular pentagon.  In practice, however, the scheme would normally be implemented using precomputed lookup tables.</p>

<sec>
<st>
 Tables </st>
<p>

The Verhoeff algorithm can be implemented using three tables:
a multiplication table <it>d</it>, a permutation table <it>p</it>, and an inverse table <it>inv</it>.</p>
<p>

The first table, d, is based on multiplication in the dihedral group D5.</p>

<p>

<table cellpadding="5" border="1" cellspacing="0">
<row align="center" valign="middle">
<header bgcolor="#ffffcc">
d(j,k)</header>
<header colspan="11" bgcolor="#ffffcc">
k</header>
</row>
<row align="center" valign="middle">
<header rowspan="11" bgcolor="#ffffcc">
j</header>
<header bgcolor="#ffffcc">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</header>
<header bgcolor="#ffffcc">
&nbsp;&nbsp;0&nbsp;&nbsp;</header>
<header bgcolor="#ffffcc">
&nbsp;&nbsp;1&nbsp;&nbsp;</header>
<header bgcolor="#ffffcc">
&nbsp;&nbsp;2&nbsp;&nbsp;</header>
<header bgcolor="#ffffcc">
&nbsp;&nbsp;3&nbsp;&nbsp;</header>
<header bgcolor="#ffffcc">
&nbsp;&nbsp;4&nbsp;&nbsp;</header>
<header bgcolor="#ffffcc">
&nbsp;&nbsp;5&nbsp;&nbsp;</header>
<header bgcolor="#ffffcc">
&nbsp;&nbsp;6&nbsp;&nbsp;</header>
<header bgcolor="#ffffcc">
&nbsp;&nbsp;7&nbsp;&nbsp;</header>
<header bgcolor="#ffffcc">
&nbsp;&nbsp;8&nbsp;&nbsp;</header>
<header bgcolor="#ffffcc">
&nbsp;&nbsp;9&nbsp;&nbsp;</header>
</row>
<row align="center" valign="bottom">
<header bgcolor="#ffffcc">
0</header>
<col>
0</col>
<col>
1</col>
<col>
2</col>
<col>
3</col>
<col>
4</col>
<col>
5</col>
<col>
6</col>
<col>
7</col>
<col>
8</col>
<col>
9</col>
</row>
<row align="center" valign="bottom">
<header bgcolor="#ffffcc">
1</header>
<col>
1</col>
<col>
2</col>
<col>
3</col>
<col>
4</col>
<col>
0</col>
<col>
6</col>
<col>
7</col>
<col>
8</col>
<col>
9</col>
<col>
5</col>
</row>
<row align="center" valign="bottom">
<header bgcolor="#ffffcc">
2</header>
<col>
2</col>
<col>
3</col>
<col>
4</col>
<col>
0</col>
<col>
1</col>
<col>
7</col>
<col>
8</col>
<col>
9</col>
<col>
5</col>
<col>
6</col>
</row>
<row align="center" valign="bottom">
<header bgcolor="#ffffcc">
3</header>
<col>
3</col>
<col>
4</col>
<col>
0</col>
<col>
1</col>
<col>
2</col>
<col>
8</col>
<col>
9</col>
<col>
5</col>
<col>
6</col>
<col>
7</col>
</row>
<row align="center" valign="bottom">
<header bgcolor="#ffffcc">
4</header>
<col>
4</col>
<col>
0</col>
<col>
1</col>
<col>
2</col>
<col>
3</col>
<col>
9</col>
<col>
5</col>
<col>
6</col>
<col>
7</col>
<col>
8</col>
</row>
<row align="center" valign="bottom">
<header bgcolor="#ffffcc">
5</header>
<col>
5</col>
<col>
9</col>
<col>
8</col>
<col>
7</col>
<col>
6</col>
<col>
0</col>
<col>
4</col>
<col>
3</col>
<col>
2</col>
<col>
1</col>
</row>
<row align="center" valign="bottom">
<header bgcolor="#ffffcc">
6</header>
<col>
6</col>
<col>
5</col>
<col>
9</col>
<col>
8</col>
<col>
7</col>
<col>
1</col>
<col>
0</col>
<col>
4</col>
<col>
3</col>
<col>
2</col>
</row>
<row align="center" valign="bottom">
<header bgcolor="#ffffcc">
7</header>
<col>
7</col>
<col>
6</col>
<col>
5</col>
<col>
9</col>
<col>
8</col>
<col>
2</col>
<col>
1</col>
<col>
0</col>
<col>
4</col>
<col>
3</col>
</row>
<row align="center" valign="bottom">
<header bgcolor="#ffffcc">
8</header>
<col>
8</col>
<col>
7</col>
<col>
6</col>
<col>
5</col>
<col>
9</col>
<col>
3</col>
<col>
2</col>
<col>
1</col>
<col>
0</col>
<col>
4</col>
</row>
<row align="center" valign="bottom">
<header bgcolor="#ffffcc">
9</header>
<col>
9</col>
<col>
8</col>
<col>
7</col>
<col>
6</col>
<col>
5</col>
<col>
4</col>
<col>
3</col>
<col>
2</col>
<col>
1</col>
<col>
0</col>
</row>
</table>
</p>


<p>

The second table, p, applies a permutation to each digit based on its position in the number.  The positions of the digits are counted from right to left, starting with zero.  The permutation repeats after eight rows (the row for <it>pos=8</it> is identical to the row for <it>pos=0,</it> etc.).</p>

<p>

<table cellpadding="5" border="1" cellspacing="0">
<row align="center" valign="middle">
<header bgcolor="#ffffcc">
p(pos,num)</header>
<header colspan="11" bgcolor="#ffffcc">
num</header>
</row>
<row align="center" valign="middle">
<header rowspan="11" bgcolor="#ffffcc">
pos</header>
<header bgcolor="#ffffcc">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</header>
<header bgcolor="#ffffcc">
&nbsp;&nbsp;0&nbsp;&nbsp;</header>
<header bgcolor="#ffffcc">
&nbsp;&nbsp;1&nbsp;&nbsp;</header>
<header bgcolor="#ffffcc">
&nbsp;&nbsp;2&nbsp;&nbsp;</header>
<header bgcolor="#ffffcc">
&nbsp;&nbsp;3&nbsp;&nbsp;</header>
<header bgcolor="#ffffcc">
&nbsp;&nbsp;4&nbsp;&nbsp;</header>
<header bgcolor="#ffffcc">
&nbsp;&nbsp;5&nbsp;&nbsp;</header>
<header bgcolor="#ffffcc">
&nbsp;&nbsp;6&nbsp;&nbsp;</header>
<header bgcolor="#ffffcc">
&nbsp;&nbsp;7&nbsp;&nbsp;</header>
<header bgcolor="#ffffcc">
&nbsp;&nbsp;8&nbsp;&nbsp;</header>
<header bgcolor="#ffffcc">
&nbsp;&nbsp;9&nbsp;&nbsp;</header>
</row>
<row align="center" valign="bottom">
<header bgcolor="#ffffcc">
0</header>
<col>
0</col>
<col>
1</col>
<col>
2</col>
<col>
3</col>
<col>
4</col>
<col>
5</col>
<col>
6</col>
<col>
7</col>
<col>
8</col>
<col>
9</col>
</row>
<row align="center" valign="bottom">
<header bgcolor="#ffffcc">
1</header>
<col>
1</col>
<col>
5</col>
<col>
7</col>
<col>
6</col>
<col>
2</col>
<col>
8</col>
<col>
3</col>
<col>
0</col>
<col>
9</col>
<col>
4</col>
</row>
<row align="center" valign="bottom">
<header bgcolor="#ffffcc">
2</header>
<col>
5</col>
<col>
8</col>
<col>
0</col>
<col>
3</col>
<col>
7</col>
<col>
9</col>
<col>
6</col>
<col>
1</col>
<col>
4</col>
<col>
2</col>
</row>
<row align="center" valign="bottom">
<header bgcolor="#ffffcc">
3</header>
<col>
8</col>
<col>
9</col>
<col>
1</col>
<col>
6</col>
<col>
0</col>
<col>
4</col>
<col>
3</col>
<col>
5</col>
<col>
2</col>
<col>
7</col>
</row>
<row align="center" valign="bottom">
<header bgcolor="#ffffcc">
4</header>
<col>
9</col>
<col>
4</col>
<col>
5</col>
<col>
3</col>
<col>
1</col>
<col>
2</col>
<col>
6</col>
<col>
8</col>
<col>
7</col>
<col>
0</col>
</row>
<row align="center" valign="bottom">
<header bgcolor="#ffffcc">
5</header>
<col>
4</col>
<col>
2</col>
<col>
8</col>
<col>
6</col>
<col>
5</col>
<col>
7</col>
<col>
3</col>
<col>
9</col>
<col>
0</col>
<col>
1</col>
</row>
<row align="center" valign="bottom">
<header bgcolor="#ffffcc">
6</header>
<col>
2</col>
<col>
7</col>
<col>
9</col>
<col>
3</col>
<col>
8</col>
<col>
0</col>
<col>
6</col>
<col>
4</col>
<col>
1</col>
<col>
5</col>
</row>
<row align="center" valign="bottom">
<header bgcolor="#ffffcc">
7</header>
<col>
7</col>
<col>
0</col>
<col>
4</col>
<col>
6</col>
<col>
9</col>
<col>
1</col>
<col>
3</col>
<col>
2</col>
<col>
5</col>
<col>
8</col>
</row>
</table>
</p>


<p>

The third table, inv, represents the multiplicative inverse of a digit in the dihedral group D5:  in other words, for any <it>j</it>, the <it>inv</it> table shows the value <it>k</it> such that <it>d(j,k)</it> = 0.</p>

<p>

<table cellpadding="5" border="1" cellspacing="0">
<row align="center" valign="middle">
<header bgcolor="#ffffcc">
j</header>
<header bgcolor="#ffffcc">
&nbsp;&nbsp;0&nbsp;&nbsp;</header>
<header bgcolor="#ffffcc">
&nbsp;&nbsp;1&nbsp;&nbsp;</header>
<header bgcolor="#ffffcc">
&nbsp;&nbsp;2&nbsp;&nbsp;</header>
<header bgcolor="#ffffcc">
&nbsp;&nbsp;3&nbsp;&nbsp;</header>
<header bgcolor="#ffffcc">
&nbsp;&nbsp;4&nbsp;&nbsp;</header>
<header bgcolor="#ffffcc">
&nbsp;&nbsp;5&nbsp;&nbsp;</header>
<header bgcolor="#ffffcc">
&nbsp;&nbsp;6&nbsp;&nbsp;</header>
<header bgcolor="#ffffcc">
&nbsp;&nbsp;7&nbsp;&nbsp;</header>
<header bgcolor="#ffffcc">
&nbsp;&nbsp;8&nbsp;&nbsp;</header>
<header bgcolor="#ffffcc">
&nbsp;&nbsp;9&nbsp;&nbsp;</header>
</row>
<row align="center" valign="bottom">
<header bgcolor="#ffffcc">
inv(j)</header>
<col>
0</col>
<col>
4</col>
<col>
3</col>
<col>
2</col>
<col>
1</col>
<col>
5</col>
<col>
6</col>
<col>
7</col>
<col>
8</col>
<col>
9</col>
</row>
</table>
</p>


</sec>
<sec>
<st>
 Algorithm </st>
<p>

Using the above tables, the following procedure will perform the Verhoeff checksum calculation on a number.</p>
<p>

<list>
<entry level="1" type="number">

 Create an array <it>n</it> out of the individual digits of the number, taken from right to left (rightmost digit is <it>n0,</it> etc.).</entry>
<entry level="1" type="number">

 Initialize the checksum <it>c</it> to zero.</entry>
<entry level="1" type="number">

 For each index <it>i</it> of the array <it>n,</it> starting at zero, replace <it>c</it> with <it>d(c, p(i, ni)).''</it></entry>
</list>
</p>
<p>

The original number has a valid check digit if and only if <it>c = 0.</it>
If the original number ends in a zero (i.e., <it>n0 = 0</it>), then <it>inv(c)</it> is the proper value to use as the check digit in place of the final zero.</p>

</sec>
<sec>
<st>
 Example </st>
<p>

Validate the checksum for the number <b>1428570</b>.</p>
<p>

The first step is to break up the number into an array n = [0,7,5,8,2,4,1], in which the digits are listed in reverse order (right to left).  Then, the other values in the formula are computed in sequence.  Since the final value of c is zero, the check digit is valid.</p>

<p>

<table cellpadding="5" border="1" cellspacing="0">
<row align="center" valign="middle">
<header bgcolor="#ffffcc">
&nbsp;&nbsp;
i&nbsp;&nbsp;</header>
<header bgcolor="#ffffcc">
&nbsp;&nbsp;
ni&nbsp;&nbsp;</header>
<header bgcolor="#ffffcc">
&nbsp;&nbsp;
p(i,ni)&nbsp;&nbsp;</header>
<header bgcolor="#ffffcc">
previous
c</header>
<header bgcolor="#ffffcc">
new 
c =d(c,p(i,ni))</header>
</row>
<row align="center" valign="middle">
<col>
0</col>
<col>
0</col>
<col>
0</col>
<col>
0</col>
<col>
0</col>
</row>
<row align="center" valign="middle">
<col>
1</col>
<col>
7</col>
<col>
0</col>
<col>
0</col>
<col>
0</col>
</row>
<row align="center" valign="middle">
<col>
2</col>
<col>
5</col>
<col>
9</col>
<col>
0</col>
<col>
9</col>
</row>
<row align="center" valign="middle">
<col>
3</col>
<col>
8</col>
<col>
2</col>
<col>
9</col>
<col>
7</col>
</row>
<row align="center" valign="middle">
<col>
4</col>
<col>
2</col>
<col>
5</col>
<col>
7</col>
<col>
2</col>
</row>
<row align="center" valign="middle">
<col>
5</col>
<col>
4</col>
<col>
5</col>
<col>
2</col>
<col>
7</col>
</row>
<row align="center" valign="middle">
<col>
6</col>
<col>
1</col>
<col>
7</col>
<col>
7</col>
<header bgcolor="#ffffcc">
0</header>
</row>
</table>
</p>


</sec>
<sec>
<st>
Strengths and weaknesses</st>
<p>

The Verhoeff algorithm will detect <it>all</it> occurrences of the following common transcription errors in a number:</p>
<p>

<list>
<entry level="1" type="bullet">

 Replacement of a single digit by a different digit (<it>a</it> → <it>b</it>).</entry>
<entry level="1" type="bullet">

 Transposition (switching) of two adjacent digits (<it>ab</it> → <it>ba</it>).</entry>
</list>
</p>
<p>

Additionally, the Verhoeff algorithm detects most (but not all) occurrences of the following less common errors:
<list>
<entry level="1" type="bullet">

 Twin errors (<it>aa</it> → <it>bb</it>).</entry>
<entry level="1" type="bullet">

 Jump twin errors (<it>aca</it> → <it>bcb</it>).</entry>
<entry level="1" type="bullet">

 Jump transpositions (<it>abc</it> → <it>cba</it>).</entry>
<entry level="1" type="bullet">

 Phonetic errors (<it>a0</it> &amp;harr; <it>1a</it>; e.g.; "sixty" &amp;harr; "sixteen").</entry>
</list>
</p>
<p>

The main weakness of the Verhoeff algorithm is its complexity.  Unlike the Luhn algorithm, the calculations required for a Verhoeff check digit cannot readily be performed by hand from memory.  The involved nature of the Verhoeff check might especially be seen as a drawback <it>if</it> the client applications within a system need to explicitly report that an invalid ID has failed the check digit test (as opposed to an ID simply not being found in the system's database).  If it is sufficient for a client to look up each ID in a master database and report malformed values as "not found," then only the piece of the system that issues new ID's needs to know how to do the Verhoeff calculations, and the complexity issue is mitigated.</p>

</sec>
<sec>
<st>
 References </st>

<p>

<list>
<entry level="1" type="bullet">

 Verhoeff, J. “Error Detecting Decimal Codes”, Mathematical Centre Tract 29, The Mathematical Centre, Amsterdam, 1969.</entry>
</list>
</p>

</sec>
<sec>
<st>
External links</st>
<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.cs.utsa.edu/~wagner/laws/verhoeff.html">
Detailed description</weblink> of the Verhoeff algorithm</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.augustana.ab.ca/~mohrj/algorithms/checkdigit.html">
A description</weblink> using lookup tables</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.unsw.adfa.edu.au/admin/finance/guides/numeric_departments.pdf">
Another description</weblink> using lookup tables</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://search.cpan.org/~jpeterson/Algorithm-Verhoeff-0.3/lib/Algorithm/Verhoeff.pm">
Verhoeff implementation in Perl</weblink> (from <link xlink:type="simple" xlink:href="../h$at/Internet_R$elay_C$hat.xml">
CPAN</link>)</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://en.dahnielson.com/2006/09/verhoeff.html">
Verhoeff implementation in PHP</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.briandunning.com/cf/616">
Verhoeff implementation in FileMaker Pro</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://modp.com/release/checkdigits/">
Verhoeff and others, implementation in Java, JavaScript</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.stens.ca/kb/VerhoeffCheck">
Verhoeff implementation in MS SQL Server Transact SQL</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.ams.org/featurecolumn/archive/verhoeff.html">
Biographical sketch</weblink> of Jacobus Verhoeff</entry>
</list>
</p>

</sec>
</bdy>
</algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</article>
