<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 17:09:12[mciao0826] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<operation  confidence="0.8" wordnetid="100955060">
<event  confidence="0.8" wordnetid="100029378">
<attack  confidence="0.8" wordnetid="100972621">
<act  confidence="0.8" wordnetid="100030358">
<psychological_feature  confidence="0.8" wordnetid="100023100">
<activity  confidence="0.8" wordnetid="100407535">
<header>
<title>Timing attack</title>
<id>481813</id>
<revision>
<id>241917536</id>
<timestamp>2008-09-30T02:07:17Z</timestamp>
<contributor>
<username>Kbdankbot</username>
<id>6505923</id>
</contributor>
</revision>
<categories>
<category>All articles needing style editing</category>
<category>Wikipedia articles needing style editing from July 2008</category>
<category>Cryptographic attacks</category>
</categories>
</header>
<bdy>

In <link xlink:type="simple" xlink:href="../432/18934432.xml">
cryptography</link>, a <b>timing attack</b> is a <link xlink:type="simple" xlink:href="../678/667678.xml">
side channel attack</link> in which the attacker attempts to compromise a <link xlink:type="simple" xlink:href="../383/506383.xml">
cryptosystem</link> by analyzing the time taken to execute cryptographic algorithms. The attack exploits the fact that every operation in a computer takes time to execute. <p>

Information can leak from a system through measurement of the time it takes to respond to certain queries. How much such information can help an attacker depends on many variables: crypto system design, the CPU running the system, the algorithms used, assorted implementation details, timing attack countermeasures, the accuracy of the timing measurements, etc. </p>
<p>

Timing attacks are often overlooked in the design phase because they are so dependent on the implementation.</p>

<sec>
<st>
 The idea behind the attack </st>

<p>

A timing attack is an example of an attack that exploits the <link xlink:type="simple" xlink:href="../704/407704.xml">
implementation</link> of an <link xlink:type="simple" xlink:href="../775/775.xml">
algorithm</link> rather than the algorithm itself. The same algorithm can always be reimplemented in a way that leaks little or no information to a timing attack: consider an implementation in which every call to a subroutine always returns in exactly x seconds, where x is the maximum time it ever takes to execute the routine. In such an implementation, timing gives an attacker no useful information; it also has the adverse effect of slower response times on average.</p>
<p>

The practicality of the attack implies several things:
<list>
<entry level="1" type="bullet">

 It is algorithm-independent. Notice that the theoretical security of such algorithms remains â€” it is mainly the need for a high-speed implementation of a particular algorithm, that introduces such vulnerabilities.</entry>
<entry level="1" type="bullet">

 Finding timing information is more routine. While finding cryptographic errors in a <link xlink:type="simple" xlink:href="../985/4928985.xml">
crypto-primitive</link> such as the <cipher wordnetid="106254239" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../978/7978.xml">
DES</link></cipher>
 may require deeper knowledge of mathematics, timing is relatively easy. And measuring <link xlink:type="simple" xlink:href="../032/8059032.xml">
response time</link> for a specific query might give away relatively large amounts of information.</entry>
</list>
</p>

</sec>
<sec>
<st>
 A detailed example </st>

<p>

<table class="metadata plainlinks ambox ">
<row>
<col>

ambox-style" style=""</col>
</row>
<row>
<col class="mbox-image"><p>

<image width="40x40px" src="Ambox_style.png">
</image>
</p>
</col>
<col style="" class="mbox-text">
 <b>The  or style of this article or section may not be appropriate for Wikipedia.</b>
Specific concerns may be found on the . See Wikipedia's for suggestions. <it>(July 2008)''</it></col>
</row>
</table>


A timing attack exists for versions of <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../819/438819.xml">
OpenSSL</link></software>
 prior to 0.9.6c.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref> The attack was based on the following idea: in the <link xlink:type="simple" xlink:href="../813/187813.xml">
SSL</link> protocol, a <link xlink:type="simple" xlink:href="../523/567523.xml">
message authentication code</link> (MAC) lies at the end of a message before encryption. If the message is to be encrypted with a <link xlink:type="simple" xlink:href="../594/4594.xml">
block cipher</link> in <link xlink:type="simple" xlink:href="../202/160202.xml">
cipher block chaining</link> (CBC) mode, then <link xlink:type="simple" xlink:href="../505/592505.xml">
padding</link> must be added to the end of all messages after the MAC. This padding is special, in that it is stereotyped: if 2 bytes are added then "1,1", if three then "2,2,2", etc. The entire message, including the MAC and the padding, is then encrypted and sent. The receiver decrypts the message, checks that the padding is correct (i.e. it is 0 or 1,1 or 2,2,2 etc.), and <it>if correct, computes the MAC</it> checking it against the transmitted MAC. If the padding is incorrect, the protocol immediately exits with an error, without computing the (almost certainly incorrect) MAC.</p>
<p>

The vulnerability lies in the padding: if the message can be intercepted, the attacker tries to guess the padding, rewrites part of the message, and then sends the message to the intended receiver. If the padding is incorrect the MAC will not be computed at all. Because computing the MAC is a relatively time-consuming operation, it is possible to measure the time it takes to respond and know whether the MAC was computed and whether we guessed the padding correctly.</p>
<p>

For this timing attack to work, <link xlink:type="simple" xlink:href="../202/160202.xml">
cipher block chaining</link> (CBC) must be used.  This mode has the property that if a ciphertext bit is toggled before decryption, the plaintext of the block it appears in is completely corrupted, but the corresponding bit in the following plaintext block is correspondingly toggled.  In this way we can blindly change the next block's bits. However, as we will see, this blindness is removed by the timing information, and we can gain 1 bit of information with every accurate measurement.</p>
<p>

Guessing the padding value is relatively simple, so let's say that the end of the message is at the moment ciphertext bytes <math>x_{1},x_{2},x_{3}...x_{7},x_{8}</math> and we know that the pad is one byte long, i.e. decrypt(<math>x_{8}</math>)= 0. The previous block's ciphertext bytes are similarly <math>y_{1},y_{2},..y_{8}</math>. Cracking <math>x_{7}</math> is not hard at all. Just increase decrypt(<math>x_{8}</math>) from 0 to 1, which is done by <math>y_{8}=y_{8}</math> xor 0 xor 1, then send the message. If the other party computes a MAC on the message, we know the original padding guess was correct, and more importantly, we know that decrypt(<math>x_{7}</math>)=1 since the end of the decrypted message has the correct padding string.  If the other party does not compute the MAC, we know that decrypt(<math>x_{7}</math>) is not 1, so we can try a different guess for the plaintext of <math>y(7)</math>.  For example, let's do <math>y_{7}=y_{7}</math> xor 28. If the other party computes the MAC, we know that decrypt(<math>x_{7}</math>)=1 xor 28. If it does not accept it, continue to try with different xor values.</p>
<p>

Using this we can work backward through the trailing bytes of a message that is the same and is sent regularly, such as a password. And the attack can be extended. Consider the secure IMAP protocol. The session is typically initiated several times a day, and the user would typically not suspect anything is amiss if we interrupt one of its connections and guessed at one byte of his password, say, twice a day. The only clue the user might see will be an obscure error message (ie, the MAC will not be OK, the SSL session will need to be restarted, which gives an error message in the email client such as <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<client wordnetid="109985075" confidence="0.8">
<leader wordnetid="109623038" confidence="0.8">
<administrator wordnetid="109770949" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<case wordnetid="109898892" confidence="0.8">
<head wordnetid="110162991" confidence="0.8">
<director wordnetid="110014939" confidence="0.8">
<link xlink:type="simple" xlink:href="../271/176271.xml">
Outlook</link></director>
</head>
</case>
</causal_agent>
</administrator>
</leader>
</client>
</person>
</physical_entity>
 or <physical_entity wordnetid="100001930" confidence="0.8">
<collector wordnetid="109936620" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<client wordnetid="109985075" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<case wordnetid="109898892" confidence="0.8">
<link xlink:type="simple" xlink:href="../547/228547.xml">
Thunderbird</link></case>
</causal_agent>
</client>
</person>
</collector>
</physical_entity>
). Since the allowed alphabet for passwords on most systems is not more than 40 characters, 20 guesses will, on average, give us one letter of the password. If the password is 10 letters long this is 200 guesses. In 3 months the user's password would be known. In other applications, in which SSL connections are made by machines and on a regular basis, this time may be reduced to minutes, as repeated errors will not come to the notice of a person until system log files are analyzed. Since this is often not done, the burst of errors generated is likely to go unnoticed.</p>

</sec>
<sec>
<st>
 Other examples </st>

<p>

The execution time for the <link xlink:type="simple" xlink:href="../237/10237.xml">
square-and-multiply algorithm</link> used in <link xlink:type="simple" xlink:href="../032/903032.xml">
modular exponentiation</link> depends linearly on the number of '1' bits in the key. While the number of '1' bits alone is not nearly enough information to make finding the key trivially easy, repeated executions with the same key and different inputs can be used to perform statistical correlation analysis of timing information to recover the key completely, even by a passive attacker. Observed timing measurements often include noise (from such sources as network latency, or disk drive access differences from access to access, and the <link xlink:type="simple" xlink:href="../375/10375.xml">
error correction</link> techniques used to recover from transmission errors). Nevertheless, timing attacks are practical against a number of encryption algorithms, including <link xlink:type="simple" xlink:href="../385/25385.xml">
RSA</link>, <link xlink:type="simple" xlink:href="../458/59458.xml">
ElGamal</link>, and the <link xlink:type="simple" xlink:href="../470/59470.xml">
Digital Signature Algorithm</link>.</p>
<p>

In 2003, <scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../723/7278723.xml">
Boneh</link></scientist>
 and <link xlink:type="simple" xlink:href="../675/19177675.xml">
Brumley</link> demonstrated a practical network-based timing attack on <link xlink:type="simple" xlink:href="../813/187813.xml">
SSL</link>-enabled web servers, based on a different vulnerability having to do with the use of RSA with <link>
Chinese Remainder Theorem</link> optimizations.  The actual network distance was small in their experiments, but the attack successfully recovered a server private key in a matter of hours.  This demonstration led to the widespread deployment and use of <link xlink:type="simple" xlink:href="../067/490067.xml">
blinding</link> techniques in SSL implementations.  In this context, blinding is intended to remove correlations between key and encryption time.</p>
<p>

Some versions of <family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../642/31642.xml">
Unix</link></family>
 use a relatively expensive implementation of the <it>crypt</it> library function for hashing an 8-character password into an 11-character string.  On older hardware, this computation took a deliberately and measurably long time: as much as two or three seconds in some cases.  The <it>login</it> program in early versions of Unix executed the crypt function only when the login name was correct, which leaked information through timing that the login name itself was valid, even though the password was incorrect. Later versions of Unix fixed this leak by always executing the crypt function to avoid revealing the improper login name.</p>
<p>

Two otherwise securely isolated processes running on a single system with either <link xlink:type="simple" xlink:href="../181/849181.xml">
cache memory</link> or <link xlink:type="simple" xlink:href="../354/32354.xml">
virtual memory</link> can communicate by deliberately causing <link xlink:type="simple" xlink:href="../143/1157143.xml">
page fault</link>s and/or <link>
cache miss</link>es in one process, then monitoring the resulting changes in access times from the other.  Likewise, if an application is trusted, but its paging/cacheing is affected by branching logic, it may be possible for a second application to determine the values of the data compared to the branch condition by monitoring access time changes; in extreme examples, this can allow recovery of cryptographic key bits.  (See Percival, Colin, <weblink xlink:type="simple" xlink:href="http://www.daemonology.net/papers/htt.pdf">
Cache Missing for Fun and Profit</weblink>, 2005; Bernstein, Daniel J., <weblink xlink:type="simple" xlink:href="http://cr.yp.to/antiforgery/cachetiming-20050414.pdf">
Cache-timing attacks on AES</weblink>, 2005.)</p>

</sec>
<sec>
<st>
 Notes </st>

<p>

Timing attacks are easier to mount if the adversary knows the internals of the hardware implementation, and even more so, the crypto system in use. Since cryptographic security should never depend on the obscurity of either (see <link xlink:type="simple" xlink:href="../087/29087.xml">
security through obscurity</link>, specifically both Shannon's Maxim and <link xlink:type="simple" xlink:href="../064/53064.xml">
Kerchoff's Law</link>), resistance to timing attacks should not either. If nothing else, an exemplar can be purchased and reverse engineered. Timing attacks and other side-channel attacks may also be useful in identifying, or possibly reverse-engineering, a cryptographic algorithm used by some device.</p>

</sec>
<sec>
<st>
References</st>

<p>

<reflist>
<entry id="1">
http://www.openssl.org/news/secadv_20030219.txt</entry>
</reflist>
</p>
<p>

<list>
<entry level="1" type="bullet">

 Paul C. Kocher: Timing Attacks on Implementations of <link>
Diffie-Hellman</link>, <link xlink:type="simple" xlink:href="../385/25385.xml">
RSA</link>, <link xlink:type="simple" xlink:href="../470/59470.xml">
DSS</link>, and Other Systems. CRYPTO 1996: 104&ndash;113 (<weblink xlink:type="simple" xlink:href="http://www.cryptography.com/timingattack/paper.html">
pdf file</weblink>)</entry>
<entry level="1" type="bullet">

 David Brumley and Dan Boneh: Remote timing attacks are practical. USENIX Security Symposium, August 2003. <weblink xlink:type="simple" xlink:href="http://www.cs.cmu.edu/~dbrumley/pubs/openssltiming.pdf">
pdf file</weblink></entry>
<entry level="1" type="bullet">

 Colin Percival: Cache Missing for Fun and Profit, <link xlink:type="simple" xlink:href="../675/19675.xml">
May 13</link>, <link xlink:type="simple" xlink:href="../984/35984.xml">
2005</link> (<weblink xlink:type="simple" xlink:href="http://www.daemonology.net/papers/htt.pdf">
pdf file</weblink>)</entry>
<entry level="1" type="bullet">

  <cite style="font-style:normal"><scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../414/11532414.xml">
Lipton, Richard</link></scientist>
; Naughton, Jeffrey F.&#32;(March 1993).&#32;"<weblink xlink:type="simple" xlink:href="http://www.springerlink.com/content/m45w74398002p462/">
Clocked adversaries for hashing</weblink>". <it>Algorithmica</it>&#32;<b>9</b>&#32;(3): 239-252. Retrieved on <link>
2008-09-02</link>.</cite>&nbsp;</entry>
</list>
</p>

</sec>
<sec>
<st>
External links</st>
<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.hbarel.com/publications/Introduction_To_Side_Channel_Attacks.pdf">
Introduction to Side Channel Attacks</weblink> (pdf file)</entry>
</list>
</p>


</sec>
</bdy>
</activity>
</psychological_feature>
</act>
</attack>
</event>
</operation>
</article>
