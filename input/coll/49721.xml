<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 15:43:30[mciao0828] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>Core dump</title>
<id>49721</id>
<revision>
<id>238338517</id>
<timestamp>2008-09-14T11:04:59Z</timestamp>
<contributor>
<username>DanishWolf</username>
<id>3366407</id>
</contributor>
</revision>
<categories>
<category>Computer errors</category>
<category>Debugging</category>
</categories>
</header>
<bdy>

<image location="right" width="150px" src="Magnetic_core.jpg" type="thumb">
<caption>

A core dump earns its name from an old memory technology using tiny magnetic cores, shown here greatly magnified.
</caption>
</image>

A <b>core dump</b> is the recorded state of the working <link xlink:type="simple" xlink:href="../300/5300.xml">
memory</link> of a <link xlink:type="simple" xlink:href="../783/5783.xml">
computer program</link> at a specific time, generally when the program has terminated abnormally (<link xlink:type="simple" xlink:href="../631/279631.xml">
crash</link>ed).<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref>  In practice, other key pieces of <link xlink:type="simple" xlink:href="../904/6904.xml">
program state</link> are usually dumped at the same time, including the <link xlink:type="simple" xlink:href="../432/486432.xml">
processor register</link>s, which may include the program counter and stack pointer, memory management information, and other processor and operating system flags and information.  The name comes from the once-standard <link>
core memory</link> technology.  Core dumps are often used to diagnose or <link xlink:type="simple" xlink:href="../395/323395.xml">
debug</link> errors in computer programs.<p>

On many operating systems, a <link xlink:type="simple" xlink:href="../324/2638324.xml">
fatal error</link> in a program automatically triggers a core dump, and by extension the phrase "to dump core" has come to mean, in many cases, any fatal error, regardless of whether a record of the program memory is created.</p>
<p>

The term is used in jargon to indicate any circumstance where large amounts of unedited data are deposited for further examination.</p>

<sec>
<st>
Background</st>
<p>

Before the advent of <link xlink:type="simple" xlink:href="../773/147773.xml">
disk operating system</link>s and the ability to record large data files, core dumps were paper printouts of the contents of memory, typically arranged in columns of <link xlink:type="simple" xlink:href="../330/22330.xml">
octal</link> or <link xlink:type="simple" xlink:href="../263/13263.xml">
hexadecimal</link> numbers (the latter was sometimes called a "<link xlink:type="simple" xlink:href="../281/1548281.xml">
hex dump</link>"), together with interpretations of various encodings such as machine language instructions, text strings, or decimal or floating-point numbers.  In more recent operating systems, a "core dump" is a <link xlink:type="simple" xlink:href="../077/7077.xml">
file</link> containing the memory image of a particular <link xlink:type="simple" xlink:href="../178/45178.xml">
process</link>, or the memory images of parts of the <link xlink:type="simple" xlink:href="../144/507144.xml">
address space</link> of that process, along with other information such as the values of <link xlink:type="simple" xlink:href="../432/486432.xml">
processor register</link>s. These files can be viewed in a readable text format similar to the older paper printouts as well using the proper tools such as <link xlink:type="simple" xlink:href="../255/4464255.xml">
objdump</link>.</p>

</sec>
<sec>
<st>
Causes of core dumps</st>

<p>

In <link xlink:type="simple" xlink:href="../842/189842.xml">
high-level programming language</link>s, compilers usually generate programs with correct underlying instructions, and errors more frequently arise from more complex logical errors such as accesses to non-existent memory.  In practice, these are often buffer overflows, where a programmer allocates too little memory for incoming or computed data, or access to <link>
null pointer</link>s, a common coding error when an unassigned memory reference variable is accessed. Manual dumps may be caused by kill -3 or gcore <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%222%22])">2</ref>. kill -3  dumps a thread dump.</p>

</sec>
<sec>
<st>
Uses of core dumps</st>
<p>

Core dumps are a useful debugging aid in several situations.  On early standalone or <link xlink:type="simple" xlink:href="../285/37285.xml">
batch-processing</link> systems, core dumps allowed a user to debug a program without monopolizing the (very expensive) computing facility for debugging.  Besides, a printout was more convenient than debugging using switches and lights.  On shared computers, whether time-sharing, batch processing, or server systems, core dumps allow off-line debugging of the <link xlink:type="simple" xlink:href="../194/22194.xml">
operating system</link>, so that the system can be back in operation immediately.  Core dumps allow a user to save a crash for later or off-site analysis, or comparison with other crashes.  For <link xlink:type="simple" xlink:href="../630/46630.xml">
embedded computers</link>, it may be impractical to support debugging on the computer itself, so a dump can be taken for analysis on a different computer.  Some operating systems (such as early versions of <family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../642/31642.xml">
Unix</link></family>
) did not support attaching <link xlink:type="simple" xlink:href="../485/50485.xml">
debugger</link>s to running processes, so core dumps were necessary to run a debugger on a process's memory contents.  Core dumps can be used to capture data freed during <link xlink:type="simple" xlink:href="../117/547117.xml">
dynamic memory allocation</link> and may thus be used to retrieve information from a program that has exited or been closed. In the absence of an interactive debugger, the core dump may be used by an assiduous programmer to determine the error from direct examination.</p>
<p>

A core dump represents the complete contents of the dumped regions of the address space of the dumped process.  Depending on the operating system, the dump may contain few or no data structures to aid interpretation of the memory regions.  In these systems, successful interpretation requires that the program or user trying to interpret the dump understands the structure of the program's memory use.</p>
<p>

A debugger can use a <link xlink:type="simple" xlink:href="../294/475294.xml">
symbol table</link> (if there is one) to help the programmer interpret dumps, identifying variables symbolically and displaying source code; if the symbol table is not available, less interpretation of the dump is possible, but there might still be enough possible to determine the cause of the problem.  There are also special-purpose tools called <link xlink:type="simple" xlink:href="../515/6532515.xml">
dump analyzer</link>s to analyze dumps. One popular tool that is available on almost all operating systems is the GNU Binutils' <link xlink:type="simple" xlink:href="../255/4464255.xml">
objdump</link>.</p>
<p>

On modern <family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../815/31815.xml">
Unix-like</link></family>
 operating systems, core dump files can be read using the GNU Binutils <structure wordnetid="104341686" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<area wordnetid="102735688" confidence="0.8">
<library wordnetid="103660909" confidence="0.8">
<room wordnetid="104105893" confidence="0.8">
<link xlink:type="simple" xlink:href="../343/337343.xml">
Binary File Descriptor library</link></room>
</library>
</area>
</artifact>
</structure>
 (BFD), and the <link xlink:type="simple" xlink:href="../052/13052.xml">
GNU Debugger</link> (gdb) and objdump that use this library.  This library will supply the raw data for a given address in a memory region from a core dump; it does not know anything about variables or data structures in that memory region, so the application using the library to read the core dump will have to determine the addresses of variables and determine the layout of data structures itself, for example by using the symbol table for the program it's debugging.</p>
<p>

Core dumps can be used to save the context (state) of a process at a given state for returning to it later. Highly available systems can be made by transferring core between processors, sometimes via coredump files themselves.</p>

</sec>
<sec>
<st>
Format of core dump files</st>

<p>

In older and simpler operating systems, a process' address space was contiguous, so a core dump file was simply a binary file with the sequence of bytes or words.  In modern operating systems, a process address space may have gaps, and share pages with other processes or files, so more elaborate representations are used; they may also include other information about the state of the program at the time of the dump.</p>
<p>

In <family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../815/31815.xml">
Unix-like</link></family>
 systems, core dumps generally use the standard <link xlink:type="simple" xlink:href="../392/217392.xml">
executable</link> image <link xlink:type="simple" xlink:href="../600/18933600.xml">
format</link>: <link xlink:type="simple" xlink:href="../358/2885358.xml">
a.out</link> in older <family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../642/31642.xml">
Unix</link></family>
es, <link xlink:type="simple" xlink:href="../914/9914.xml">
ELF</link> in modern <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../297/6097297.xml">
Linux</link></O>
, <link xlink:type="simple" xlink:href="../445/598445.xml">
System V</link>, <link xlink:type="simple" xlink:href="../145/46145.xml">
Solaris</link>, and <link xlink:type="simple" xlink:href="../807/1223807.xml">
BSD</link> systems, <format wordnetid="106636806" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../222/694222.xml">
Mach-O</link></format>
 in <link xlink:type="simple" xlink:href="../640/20640.xml">
Mac OS X</link>, <it>etc.</it></p>

</sec>
<sec>
<st>
References</st>
<p>

<reflist>
<entry id="1">
<weblink xlink:type="simple" xlink:href="http://docs.sun.com/app/docs/doc/816-5174/core-4?a=view">
core(4)</weblink>&#58;&nbsp;Process core file&nbsp;–&nbsp;<message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../145/46145.xml">
Solaris 10</link></database>
</wordnet>
</lexical_database>
</electronic_database>
</information>
</message>
 Reference <link xlink:type="simple" xlink:href="../332/85332.xml">
Manual</link> Collection, <company wordnetid="108058098" confidence="0.8">
<institution wordnetid="108053576" confidence="0.8">
<link xlink:type="simple" xlink:href="../980/26980.xml">
Sun Microsystems</link></institution>
</company>
 Documentation</entry>
<entry id="2">
<weblink xlink:type="simple" xlink:href="http://docs.sun.com/app/docs/doc/816-5165/gcore-1?a=view">
gcore(1)</weblink>&#58;&nbsp;Get core images of running processes&nbsp;–&nbsp;<message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../145/46145.xml">
Solaris 10</link></database>
</wordnet>
</lexical_database>
</electronic_database>
</information>
</message>
 Reference <link xlink:type="simple" xlink:href="../332/85332.xml">
Manual</link> Collection, <company wordnetid="108058098" confidence="0.8">
<institution wordnetid="108053576" confidence="0.8">
<link xlink:type="simple" xlink:href="../980/26980.xml">
Sun Microsystems</link></institution>
</company>
 Documentation</entry>
</reflist>
</p>

</sec>
<sec>
<st>
See also</st>
<p>

<list>
<entry level="1" type="bullet">

<physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<copycat wordnetid="109964411" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../262/4027262.xml">
Savestate</link></causal_agent>
</copycat>
</person>
</physical_entity>
</entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../239/1295239.xml">
Brain dump</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../029/78029.xml">
Magnetic core memory</link></entry>
</list>
</p>

</sec>
<sec>
<st>
External links</st>
<p>

<list>
<entry level="1" type="bullet">

Article "<weblink xlink:type="simple" xlink:href="http://linuxfocus.berlios.de/English/July2004/article343.shtml">
Why does this not work!? How to find and fix faults in Linux applications</weblink>" by <link>
Guido Socher</link></entry>
<entry level="1" type="bullet">

Article "<weblink xlink:type="simple" xlink:href="http://www.ffnn.nl/pages/articles/linux/gdb-gnu-debugger-intro.php">
GDB, GNU Debugger Intro</weblink>" by <link>
Frank Schoep</link></entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

"Setting the core dump name schema" "<weblink xlink:type="simple" xlink:href="http://www.linuxhowtos.org/Tips%20and%20Tricks/coredump.htm?ref=news.rdf">
http://www.linuxhowtos.org/Tips%20and%20Tricks/coredump.htm?ref=news.rdf</weblink>"</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

Wikibook "" for a reference to <link xlink:type="simple" xlink:href="../057/511057.xml">
cshell's</link> "limit coredumpsize $BLOCKS|unlimited" and <link xlink:type="simple" xlink:href="../547/4547.xml">
bash's</link> "ulimit -c $BLOCKS|unlimited", </entry>
<entry level="1" type="bullet">

Wikibook "" for some more references to gnu tools.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://code.google.com/p/google-coredumper/">
CoreDumper</weblink> -- BSD-licensed library for making core dumps</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.pvv.ntnu.no/~steinl/vitser/core.html">
Core Dumped Blues</weblink> A 1980 song lamenting <link xlink:type="simple" xlink:href="../803/28803.xml">
Segmentation violation</link>s and the resulting core dumps by Greg Boyd <weblink xlink:type="simple" xlink:href="http://209.85.135.104/search?q=cache:vCCmwvT2DiAJ:www.apogeonline.com/2005/libri/88-503-2379-4/ebook/Coding101.pdf+%22core+dumped+blues%22&amp;hl=en&amp;ct=clnk&amp;cd=167">
http://209.85.135.104/search?q=cache:vCCmwvT2DiAJ:www.apogeonline.com/2005/libri/88-503-2379-4/ebook/Coding101.pdf+%22core+dumped+blues%22&amp;hl=en&amp;ct=clnk&amp;cd=167</weblink></entry>
</list>
</p>
<p>

Descriptions for the file format:
<list>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://docs.sun.com/app/docs/doc/816-0219/6m6njqb72?a=view">
Solaris</weblink></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://docs.hp.com/en/B2355-60127/core.4.html">
HP-UX</weblink></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.unet.univie.ac.at/aix/files/aixfiles/core.htm">
AIX</weblink></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.daemon-systems.org/man/core.5.html">
NetBSD</weblink></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.freebsd.org/cgi/man.cgi?query=core&amp;apropos=0&amp;sektion=5&amp;manpath=FreeBSD+8-current&amp;format=html">
FreeBSD</weblink></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.openbsd.org/cgi-bin/man.cgi?query=core&amp;apropos=0&amp;sektion=0&amp;manpath=OpenBSD+Current&amp;arch=i386&amp;format=html">
OpenBSD</weblink></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://developer.apple.com/documentation/Darwin/Reference/Manpages/man5/core.5.html">
Mac OS X</weblink></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://msdn2.microsoft.com/en-us/library/ms680378(VS.85).aspx">
Windows equivalent of core dump</weblink></entry>
</list>
</p>



</sec>
</bdy>
</article>
