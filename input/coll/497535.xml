<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 17:10:57[mciao0827] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>Turbo code</title>
<id>497535</id>
<revision>
<id>243681364</id>
<timestamp>2008-10-07T16:23:27Z</timestamp>
<contributor>
<username>Verdy p</username>
<id>1300969</id>
</contributor>
</revision>
<categories>
<category>Error detection and correction</category>
</categories>
</header>
<bdy>

In <link xlink:type="simple" xlink:href="../531/9531.xml">
electrical engineering</link> and <link xlink:type="simple" xlink:href="../301/1616301.xml">
digital communications</link>, <b>turbo codes</b> (originally in French <it>Turbocodes</it>) are a class of  high-performance <link>
error correction codes</link> developed in 1993 which are finding use in <link xlink:type="simple" xlink:href="../521/5192521.xml">
deep space</link> <link xlink:type="simple" xlink:href="../683/27683.xml">
satellite</link> <link xlink:type="simple" xlink:href="../322/30322.xml">
communications</link> and other applications where designers seek to achieve maximal information transfer over a limited-bandwidth communication link in the presence of data-corrupting noise.
<sec>
<st>
 Advantages </st>
<p>

Of all practical error correction methods known to date, turbo codes and <link xlink:type="simple" xlink:href="../393/516393.xml">
low-density parity-check code</link>s (LDPCs) come closest to approaching the <link xlink:type="simple" xlink:href="../289/3474289.xml">
Shannon limit</link>, the theoretical limit of maximum information transfer rate over a noisy channel. </p>
<p>

Turbo codes make it possible to increase data rate without increasing the power of a transmission, or they can be used to decrease the amount of power used to transmit at a certain data rate. Their main drawbacks are the relatively high decoding complexity and relatively high <link xlink:type="simple" xlink:href="../933/17933.xml">
latency</link>, which make them unsuitable for some applications.
For satellite use, this is not of great concern, since the transmission distance itself introduces latency due to the finite <link xlink:type="simple" xlink:href="../736/28736.xml">
speed of light</link>.</p>
<p>

Prior to Turbo codes, because practical implementations of LDPCs had not been developed, the most widespread technique that approached the Shannon limit combined <link xlink:type="simple" xlink:href="../600/45600.xml">
Reed-Solomon error correction</link> <link xlink:type="simple" xlink:href="../659/1134659.xml">
block code</link>s with <link xlink:type="simple" xlink:href="../015/228015.xml">
Viterbi-decoded</link> short constraint length <link xlink:type="simple" xlink:href="../962/40962.xml">
convolutional code</link>s, also known as RSV codes.</p>

<p>

<image location="left" width="600px" src="NASA_ECC_Codes-imperfection.png" type="thumb">
<caption>

NASA's Deep Space Missions ECC Codes (code imperfectness)
</caption>
</image>
</p>


</sec>
<sec>
<st>
 Disadvantages </st>
<p>

The Complexity of these algorithms and the fact that these algorithms have encumbering <link xlink:type="simple" xlink:href="../266/76266.xml">
software patent</link>s were considered as detractors of implementing these algorithms in a system. Today, many modern systems use turbo codes.</p>

</sec>
<sec>
<st>
 History </st>
<p>

The method was introduced by <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<theorist wordnetid="110706812" confidence="0.8">
<intellectual wordnetid="109621545" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../835/517835.xml">
Berrou</link></causal_agent>
</intellectual>
</theorist>
</person>
</physical_entity>
, <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<theorist wordnetid="110706812" confidence="0.8">
<intellectual wordnetid="109621545" confidence="0.8">
<engineer wordnetid="109615807" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../836/517836.xml">
Glavieux</link></causal_agent>
</engineer>
</intellectual>
</theorist>
</person>
</physical_entity>
, and <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<theorist wordnetid="110706812" confidence="0.8">
<intellectual wordnetid="109621545" confidence="0.8">
<engineer wordnetid="109615807" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../659/1188659.xml">
Thitimajshima</link></causal_agent>
</engineer>
</intellectual>
</theorist>
</person>
</physical_entity>
 (from <link>
ENST Bretagne</link>, France) in their <link xlink:type="simple" xlink:href="../598/34598.xml">
1993</link> paper: "<it>Near Shannon Limit Error-correcting Coding and Decoding: Turbo-codes</it>" published in the Proceedings of IEEE International Communications Conference <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref>. In a later paper, Berrou gave credit to the "intuition"of "G. Battail, J. Hagenauer and P. Hoeher, who, in the late 80s, highlighted the interest of probabilistic processing.".  He adds "R. Gallager and M. Tanner had already imagined coding and decoding techniques whose general principles are closely related," although the necessary calculations were impractical at that time. <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%222%22])">2</ref></p>

</sec>
<sec>
<st>
The encoder</st>
<p>

The encoder sends three sub-blocks of bits.  The first sub-block is the <it>m</it>-bit block of payload data.  The second sub-block is <it>n/2</it> parity bits for the payload data, computed using a recursive systematic <link xlink:type="simple" xlink:href="../962/40962.xml">
convolutional code</link> (RSC code).  The third sub-block is <it>n/2</it> parity bits for a known <link xlink:type="simple" xlink:href="../027/44027.xml">
permutation</link> of the payload data, again computed using an RSC convolutional code.  That is, two redundant but different sub-blocks of parity bits for the sent payload. The complete block has <it>m+n</it> bits of data with a code rate of <it>m/(m+n)</it>. The <link xlink:type="simple" xlink:href="../027/44027.xml">
permutation</link> of the payload data is carried out
by a device called <link xlink:type="simple" xlink:href="../495/177495.xml">
interleaver</link>.</p>
<p>

Hardware-wise, turbo-code encoder consists of two identical RSC coders, С1 and C2, as depicted on the figure, which are connected to each other using a concatenation scheme, called <it>parallel concatenation</it>:</p>
<p>

<image width="150px" src="turbo_encoder.svg">
<caption>

turbo encoder.svg
</caption>
</image>
</p>
<p>

On the figure, <it>M</it> is a memory register. Delay line and interleaver force input bits dk to appear in different sequences.
At first iteration, the input sequence <it>d</it>k appears at both outputs of the encoder, <it>x</it>k and<it> y</it>1k or <it>y</it>2k due to the encoder's systematic character. If the encoders <it>C</it>1 and <it>C</it>2 are used respectively in <it>n</it>1 and <it>n</it>2 iterations, their rates are respectively equal to</p>
<p>

<math>~R_1=\frac{n_1+n_2}{2n_1+n_2}</math>,
<math>~R_2=\frac{n_1+n_2}{2n_2+n_1}</math>.</p>

</sec>
<sec>
<st>
The decoder</st>

<p>

The decoder is built in the similar way as the above encoder - two elementary decoders are interconnected to each other, but in serial way, not parallel. The <it>DEC</it>1 decoder operates on lower speed (i.e. <it>R</it>1), thus, it is intended for the <it>C</it>1 encoder, and <it>DEC</it>2 is for <it>C</it>2 correspondingly. <it>DEC</it>1 yields a <link>
soft decision</link> which causes <it>L</it>1 delay. The same delay is caused by the delay line in the encoder. The <it>DEC</it>2's operation causes <it>L</it>2 delay.</p>
<p>

<image width="150px" src="turbo_decoder.svg">
<caption>

turbo decoder.svg
</caption>
</image>
</p>
<p>

An interleaver installed between two decoders is used here to scatter error bursts coming from <it>DEC</it>1 output. <it>DI</it> block is a demultiplexing and insertion module. It works as a switch, redirecting input bits to <it>DEC</it>1 at one moment and to <it>DEC</it>2 at another. In OFF state, it feeds both<it> y</it>1k and <it>y</it>2k inputs with padding bits (zeros).</p>
<p>

Consider a memoryless <link xlink:type="simple" xlink:href="../097/202097.xml">
AWGN</link> channel and assume that at <it>k</it>-th iteration, the decoder receives a couple of random variables:</p>
<p>

<math>~x_k=(2d_k-1)+a_k</math>,
<math>~y_k=2(Y_k-1)+b_k</math></p>
<p>

where <it>a</it>k and <it>b</it>k are independent noise components having the same variance σ2. <it>Y</it>k is a <it>k</it>-th bit from <it>y</it>k encoder output.</p>
<p>

Redundant information is demultiplexed and sent through <it>DI</it> to <it>DEC</it>1 (when <it>y</it>k=<it>y</it>1k) and to <it>DEC</it>2 (when <it>y</it>k=<it>y</it>2k).</p>
<p>

<it>DEC</it>1 yields a soft decision, i.e.: </p>
<p>

<math>\Lambda(d_k)=\log\frac{p(d_k=1)}{p(d_k=0)}</math></p>
<p>

and delivers it to <it>DEC</it>2. Λ(<it>d</it>k) is called the <it>logarithm of likelihood ratio</it> (LLR). <it>p</it>(dk=<it>i</it>), i=0,1 is <it>a posteriori probability</it> (APP) of the <it>d</it>k data bit which shows the probability of interpreting a received <it>d</it>k bit as <it>i</it>. Taking <it>LLR</it> into account, <it>DEC</it>2 yields a hard decision, i.e. a decoded bit.</p>
<p>

It's well known that a <link xlink:type="simple" xlink:href="../015/228015.xml">
Viterbi algorithm</link> is unable to calculate APP, thus it cannot be used in <it>DEC</it>1. Instead of that, modified <link xlink:type="simple" xlink:href="../521/8846521.xml">
BCJR algorithm</link> is used. For <it>DEC</it>2, <link xlink:type="simple" xlink:href="../015/228015.xml">
Viterbi algorithm</link> is an appropriate one.</p>
<p>

However, the depicted structure is not optimal, because <it>DEC</it>1 uses only a fraction of available redundant information. In order to improve the structure, a feedback loop is often used (dotted line on the figure).</p>

</sec>
<sec>
<st>
Soft decision approach</st>
<p>

The decoder front-end produces an integer for each bit in the data stream. This integer is a measure of how likely it is that the bit is a 0 or 1 and is also called <it>soft bit</it>. The integer could be drawn from the range [-127, 127], where:</p>
<p>

<list>
<entry level="1" type="bullet">

 -127 means "certainly 0"</entry>
<entry level="1" type="bullet">

 -100 means "very likely 0"</entry>
<entry level="1" type="bullet">

 0 means "it could be either 0 or 1"</entry>
<entry level="1" type="bullet">

 100 means "very likely 1"</entry>
<entry level="1" type="bullet">

 127 means "certainly 1"</entry>
<entry level="1" type="bullet">

 etc</entry>
</list>
</p>
<p>

This introduces a probabilistic aspect to the data-stream from the front end, but it conveys more information about each bit than just 0 or 1.</p>
<p>

For example, for each bit, the front end of a traditional wireless-receiver has to decide if an internal analog voltage is above or below a given threshold voltage level.  For a turbo-code decoder, the front end would provide an integer measure of how far the internal voltage is from the given threshold.</p>
<p>

To decode the <it>m+n</it>-bit block of data, the decoder front-end creates a block of likelihood measures, with one likelihood measure for each bit in the data stream.  There are two parallel decoders, one for each of the <it>n/2</it>-bit parity sub-blocks.  Both decoders use the sub-block of <it>m</it> likelihoods for the payload data.  The decoder working on the second parity sub-block knows the permutation that the coder used for this sub-block.</p>

</sec>
<sec>
<st>
Solving hypotheses to find bits</st>
<p>

The key innovation of turbo codes is how they use the likelihood data to reconcile differences between the two decoders.  Each of the two convolutional decoders generates a hypothesis (with derived likelihoods) for the pattern of <it>m</it> bits in the payload sub-block.  The hypothesis bit-patterns are compared, and if they differ, the decoders exchange the derived likelihoods they have for each bit in the hypotheses.  Each decoder incorporates the derived likelihood estimates from the other decoder to generate a new hypothesis for the bits in the payload.  Then they compare these new hypotheses.  This iterative process continues until the two decoders come up with the same hypothesis for the <it>m</it>-bit pattern of the payload, typically in 15 to 18 cycles.</p>
<p>

An analogy can be drawn between this process and that of solving cross-reference puzzles like <link xlink:type="simple" xlink:href="../760/69760.xml">
crossword</link> or <link xlink:type="simple" xlink:href="../807/1365807.xml">
sudoku</link>.  Consider a partially-completed, possibly garbled crossword puzzle.  Two puzzle solvers (decoders) are trying to solve it:  one possessing only the "down" clues (parity bits), and the other possessing only the "across" clues.  To start, both solvers guess the answers (hypotheses) to their own clues, noting down how confident they are in each letter (payload bit).  Then, they compare notes, by exchanging answers and confidence ratings with each other, noticing where and how they differ.  Based on this new knowledge, they both come up with updated answers and confidence ratings, repeating the whole process until they converge to the same solution.</p>

</sec>
<sec>
<st>
 Practical applications using Turbo Codes </st>

<p>

Telecommunications:
<list>
<entry level="1" type="bullet">

 Turbo codes are used extensively in <standard wordnetid="107260623" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../450/282450.xml">
3G</link></system_of_measurement>
</standard>
 mobile telephony standards.</entry>
<entry level="1" type="bullet">

 <artifact wordnetid="100021939" confidence="0.8">
<facility wordnetid="103315023" confidence="0.8">
<station wordnetid="104306080" confidence="0.8">
<link xlink:type="simple" xlink:href="../084/3667084.xml">
MediaFLO</link></station>
</facility>
</artifact>
, terrestrial mobile television system from <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../913/256913.xml">
Qualcomm</link></company>
</entry>
<entry level="1" type="bullet">

 New <agency wordnetid="108337324" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../568/18426568.xml">
NASA</link></agency>
 missions such as <spaceflight wordnetid="100313502" confidence="0.8">
<change wordnetid="100191142" confidence="0.8">
<problem_solving wordnetid="105796750" confidence="0.8">
<journey wordnetid="100306426" confidence="0.8">
<travel wordnetid="100295701" confidence="0.8">
<probe wordnetid="105800611" confidence="0.8">
<process wordnetid="105701363" confidence="0.8">
<inquiry wordnetid="105797597" confidence="0.8">
<voyage wordnetid="100312553" confidence="0.8">
<thinking wordnetid="105770926" confidence="0.8">
<mission wordnetid="108403225" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<action wordnetid="100037396" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<motion wordnetid="100279835" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<nongovernmental_organization wordnetid="108009834" confidence="0.8">
<higher_cognitive_process wordnetid="105770664" confidence="0.8">
<link xlink:type="simple" xlink:href="../326/453326.xml">
Mars Reconnaissance Orbiter</link></higher_cognitive_process>
</nongovernmental_organization>
</psychological_feature>
</motion>
</act>
</action>
</event>
</mission>
</thinking>
</voyage>
</inquiry>
</process>
</probe>
</travel>
</journey>
</problem_solving>
</change>
</spaceflight>
 now use Turbo Codes, as an alternative to RS-<link xlink:type="simple" xlink:href="../015/1653015.xml">
Viterbi</link> codes.</entry>
<entry level="1" type="bullet">

 Turbo coding such as Block Turbo Coding and Convolutional Turbo Coding are used in <system wordnetid="108435388" confidence="0.8">
<standard wordnetid="107260623" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<network wordnetid="108434259" confidence="0.8">
<link xlink:type="simple" xlink:href="../672/955672.xml">
IEEE 802.16</link></network>
</system_of_measurement>
</group>
</standard>
</system>
, a wireless metropolitan network standard.</entry>
</list>
</p>

</sec>
<sec>
<st>
Bayesian formulation</st>

<p>

From an <link xlink:type="simple" xlink:href="../164/1164.xml">
artificial intelligence</link> viewpoint, turbo codes can be considered as an instance of loopy <link xlink:type="simple" xlink:href="../010/800010.xml">
belief propagation</link> in <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<model wordnetid="110324560" confidence="0.8">
<assistant wordnetid="109815790" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../996/203996.xml">
Bayesian network</link></causal_agent>
</worker>
</assistant>
</model>
</person>
</physical_entity>
s.</p>

</sec>
<sec>
<st>
See also</st>

<p>

<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../962/40962.xml">
Convolutional code</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../015/228015.xml">
Viterbi algorithm</link></entry>
<entry level="1" type="bullet">

 <link>
Soft decision</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../495/177495.xml">
Interleaver</link></entry>
</list>
</p>

</sec>
<sec>
<st>
References</st>
<p>

<reflist>
<entry id="1">
<weblink xlink:type="simple" xlink:href="http://www-elec.enst-bretagne.fr/equipe/berrou/Near%20Shannon%20Limit%20Error.pdf">
Near Shannon Limit error-correcting coding and decoding: Turbo-codes</weblink></entry>
<entry id="2">
<weblink xlink:type="simple" xlink:href="http://www-elec.enst-bretagne.fr/equipe/berrou/com_mag_berrou.pdf">
Ten-year-old Turbo Codes are Entering Service, Claude Berrou, ENST Bretagne</weblink></entry>
</reflist>
</p>

</sec>
<sec>
<st>
External links</st>
<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.csee.wvu.edu/~mvalenti/documents/valenti01.pdf">
"The UMTS Turbo Code and an Efficient Decoder Implementation Suitable for Software-Defined Radios"</weblink> (<it>International Journal of Wireless Information Networks</it>)</entry>
<entry level="1" type="bullet">

  <cite style="font-style:normal">Dana Mackenzie&#32;(2005).&#32;"Take it to the limit". <it>New Scientist</it>&#32;<b>187</b>&#32;(2507): 38&ndash;41. <symbol wordnetid="106806469" confidence="0.8">
<standard wordnetid="107260623" confidence="0.8">
<signal wordnetid="106791372" confidence="0.8">
<identifier wordnetid="107270601" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../930/234930.xml">
ISSN</link></system_of_measurement>
</identifier>
</signal>
</standard>
</symbol>
 <weblink xlink:type="simple" xlink:href="http://worldcat.org/issn/0262-4079">
0262-4079</weblink>.</cite>&nbsp; (<weblink xlink:type="simple" xlink:href="http://www.newscientist.com/article.ns?id=mg18725071.400">
preview</weblink>, <weblink xlink:type="simple" xlink:href="http://geilenkotten.homeunix.org/TC_NS_09072005.pdf">
copy</weblink>)</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.sciencenews.org/articles/20051105/bob8.asp">
"Pushing the Limit"</weblink>, a <it><link xlink:type="simple" xlink:href="../647/1068647.xml">
Science News</link></it> feature about the development and genesis of turbo codes</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.iterativesolutions.com/Matlab.htm">
Coded Modulation Library</weblink>, an open source library for simulating turbo codes in <software wordnetid="106566077" confidence="0.9508927676800064">
<programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../412/20412.xml">
matlab</link></programming_language>
</software>
</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.ifp.uiuc.edu/~singer/journalpapers/tuchler_2002a.pdf">
"Turbo Equalization: Principles and New Results"</weblink>, an <it><work wordnetid="104599396" confidence="0.8">
<product wordnetid="104007894" confidence="0.8">
<creation wordnetid="103129123" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<periodical wordnetid="106593296" confidence="0.8">
<publication wordnetid="106589574" confidence="0.8">
<link xlink:type="simple" xlink:href="../417/12953417.xml">
IEEE Transactions on Communications</link></publication>
</periodical>
</artifact>
</creation>
</product>
</work>
</it> article about using convolutional codes jointly with channel equalization.</entry>
</list>
</p>


</sec>
</bdy>
</article>
