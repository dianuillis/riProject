<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 21:31:11[mciao0826] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>Color quantization</title>
<id>4979732</id>
<revision>
<id>236330065</id>
<timestamp>2008-09-04T22:19:47Z</timestamp>
<contributor>
<username>CountingPine</username>
<id>1949034</id>
</contributor>
</revision>
<categories>
<category>Image processing</category>
</categories>
</header>
<bdy>

<table style="float:right">
<row>
<col>
<image width="150px" src="Dithering_example_undithered.png" type="frame">
<caption>

An example image in 24-bit RGB color
</caption>
</image>
</col>
</row>
<row>
<col>
<image width="150px" src="Dithering_example_undithered_16color_palette.png" type="frame">
<caption>

The same image reduced to a palette of 16 colors specifically chosen to best represent the image; the selected palette is shown by the squares above
</caption>
</image>
</col>
</row>

</table>

In <link xlink:type="simple" xlink:href="../210/18567210.xml">
computer graphics</link>, <b>color quantization</b> or <b>color image quantization</b> is a process that reduces the number of distinct colors used in an image, usually with the intention that the new image should be as visually similar as possible to the original image. Computer algorithms to perform color quantization on bitmaps have been studied since the 1970s. Color quantization is critical for displaying images with many colors on devices that can only display a limited number of colors, usually due to memory limitations, and enables efficient compression of certain types of images.<p>

The name "color quantization" is primarily used in computer graphics research literature; in applications, terms such as <it>optimized palette generation</it>, <it>optimal palette generation</it>, or <it>decreasing color depth</it> are used. Some of these are misleading, as the palettes generated by standard algorithms are not necessarily the best possible.</p>

<sec>
<st>
 Algorithms </st>

<p>

Most standard techniques treat color quantization as a problem of clustering points in three-dimensional space, where the points represent colors found in the original image and the three axes represent the three color channels. Almost any three-dimensional <link xlink:type="simple" xlink:href="../675/669675.xml">
clustering algorithm</link> can be applied to color quantization, and vice versa. After the clusters are located, typically the points in each cluster are averaged to obtain the representative color that all colors in that cluster are mapped to. The three color channels are usually <link xlink:type="simple" xlink:href="../989/25989.xml">
red, green, and blue</link>, but another popular choice is the <link xlink:type="simple" xlink:href="../159/365159.xml">
Lab color space</link>, in which <link xlink:type="simple" xlink:href="../932/53932.xml">
Euclidean distance</link> is more consistent with perceptual difference.</p>
<p>

The most popular algorithm by far for color quantization, invented by Paul Heckbert in 1980, is the <link xlink:type="simple" xlink:href="../083/18514083.xml">
median cut</link> algorithm. Many variations on this scheme are in use. Before this time, most color quantization was done using the <it>population algorithm</it> or <it>population method</it>, which essentially constructs a histogram of equal-sized ranges and assigns colors to the ranges containing the most points. A more modern popular method is clustering using <link xlink:type="simple" xlink:href="../699/675699.xml">
octree</link>s, first conceived by Gervautz and Purgathofer and improved by <link xlink:type="simple" xlink:href="../154/34154.xml">
Xerox PARC</link> researcher <link>
Dan Bloomberg</link>.</p>
<p>

<table>
<row>
<col>
<image location="left" width="150px" src="Rosa_Gold_Glow_2_small_noblue.png" type="frame">
<caption>

A small photograph that has had its blue channel removed. This means all of its pixel colors lie in a two-dimensional plane in the color cube.
</caption>
</image>
</col>
<col>
<image location="left" width="300px" src="Rosa_Gold_Glow_2_small_noblue_color_space.png" type="thumb">
<caption>

The color space of the photograph to the left, along with a 16-color optimized palette produced by Photoshop. The Voronoi regions of each palette entry are shown.
</caption>
</image>
</col>
</row>
</table>
</p>
<p>

If the palette is fixed, as is often the case in real-time color quantization systems such as those used in operating systems, color quantization is usually done using the "straight-line distance" or "nearest color" algorithm, which simply takes each color in the original image and finds the closest palette entry, where distance is determined by the distance between the two corresponding points in three-dimensional space. In other words, if the colors are <math>(r_1, g_1, b_1)</math> and <math>(r_2, g_2, b_2)</math>, we want to minimize the <link xlink:type="simple" xlink:href="../932/53932.xml">
Euclidean distance</link>:</p>
<p>

<indent level="1">

<math>\sqrt{(r_1-r_2)^2 + (g_1-g_2)^2 + (b_1-b_2)^2}.</math>
</indent>

This effectively decomposes the color cube into a <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../668/177668.xml">
Voronoi diagram</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
, where the palette entries are the points and a cell contains all colors mapping to a single palette entry. There are efficient algorithms from <link xlink:type="simple" xlink:href="../927/176927.xml">
computational geometry</link> for computing Voronoi diagrams and determining which region a given point falls in; in practice, indexed palettes are so small that these are usually overkill.</p>
<p>

Color quantization is frequently combined with <link xlink:type="simple" xlink:href="../526/1243526.xml">
dither</link>ing, which can eliminate unpleasant artifacts such as banding that appear when quantizing smooth gradients and give the appearance of a larger number of colors. Some modern schemes for color quantization attempt to combine palette selection with dithering in one stage, rather than perform them independently.</p>
<p>

A number of other much less frequently used methods have been invented that use entirely different approaches. The Local K-means algorithm, conceived by Oleg Verevka in 1995, is designed for use in windowing systems where a core set of "reserved colors" is fixed for use by the system and many images with different color schemes might be displayed simultaneously. It is a post-clustering scheme that makes an initial guess at the palette and then iteratively refines it.</p>
<p>

The high quality but slow <it>NeuQuant</it> algorithm reduces images to 256 colors by training a <link xlink:type="simple" xlink:href="../996/76996.xml">
Kohonen neural network</link> "which self-organises through learning to match the distribution of colours in an input image. Taking the position in RGB-space of each neuron gives a high-quality colour map in which adjacent colours are similar." <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref> It is particularly advantageous for images with gradients.</p>
<p>

Finally, one of the most promising new methods is <it>spatial color quantization</it>, conceived by Puzicha, Held, Ketterer, Buhmann, and Fellner of the <university wordnetid="108286163" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../061/89061.xml">
University of Bonn</link></university>
, which combines dithering with palette generation and a simplified model of human perception to produce visually impressive results even for very small numbers of colors. It does not treat palette selection strictly as a clustering problem, in that the colors of nearby pixels in the original image also affect the color of a pixel. See <weblink xlink:type="simple" xlink:href="http://www.moonflare.com/code/scolorq/#sampleimages">
sample images</weblink>.</p>

</sec>
<sec>
<st>
 History and applications </st>

<p>

In the early days of PCs, it was common for video adapters to support only 2, 4, 16, or (eventually) 256 colors due to video memory limitations; they preferred to dedicate the video memory to having more pixels (higher resolution) rather than more colors. Color quantization helped to justify this tradeoff by making it possible to display many high color images in 16- and 256-color modes with limited visual degradation. The <link xlink:type="simple" xlink:href="../890/18890.xml">
Windows operating system</link> and many other operating systems automatically perform quantization and dithering when viewing high color images in a 256 color video mode, which was important when video devices limited to 256 color modes were dominant. Modern computers can now display millions of colors at once, far more than can be distinguished by the human eye, limiting this application primarily to mobile devices and legacy hardware.</p>
<p>

Nowadays, color quantization is mainly used in <link xlink:type="simple" xlink:href="../702/12702.xml">
GIF</link> and <format wordnetid="106636806" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../306/24306.xml">
PNG</link></format>
 images. GIF, for a long time the most popular lossless and animated bitmap format on the <invention wordnetid="105633385" confidence="0.8">
<link xlink:type="simple" xlink:href="../139/33139.xml">
World Wide Web</link></invention>
, only supports up to 256 colors, necessitating quantization for many images. Some early web browsers constrained images to use a specific palette known as the <link xlink:type="simple" xlink:href="../621/286621.xml">
web colors</link>, leading to severe degradation in quality compared to optimized palettes. PNG images support 24-bit color, but can often be made much smaller in filesize without much visual degradation by application of color quantization, since PNG files use fewer bits per pixel for palettized images.</p>
<p>

The infinite number of colors available through the lens of a camera is impossible to display on a computer screen; thus converting any photograph to a digital representation necessarily involves some quantization. In practice, 24-bit color is sufficiently rich to represent almost all colors perceivable by humans with sufficiently small error as to be visually identical.</p>
<p>

With the few colors available on early computers, different quantization algorithms produced very different-looking output images. As a result, a lot of time was spent on writing sophisticated algorithms to be more lifelike. </p>
<p>

In his PhD about color quantization, Andreas Schrader from the University of Siegen, Germany developed an evolutionary algorithm using natural selection of an artificial population consisting of color tables. This algorithm outperformed all
known algorithms at the time of writing in 1998 <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%222%22])">2</ref>.</p>


<ss1>
<st>
 Editor support </st>

<p>

Many <link xlink:type="simple" xlink:href="../564/44564.xml">
bitmap graphics editor</link>s contain built-in support for color quantization, and will automatically perform it when converting an image with many colors to an image format with less colors. Most of these implementations allow you to set exactly how many colors you want to use. Examples of such support include:</p>
<p>

<list>
<entry level="1" type="bullet">

 Photoshop's <it>Mode→Indexed Color</it> function, which supplies a number of quantization algorithms ranging from the fixed Windows system and Web palettes to the proprietary Local and Global algorithms for generating palettes suited to a particular image or images.</entry>
<entry level="1" type="bullet">

 Paint Shop Pro, in its <it>Colors→Decrease Color Depth</it> dialog, supplies three standard color quantization algorithms: median cut, octree, and the fixed standard "web safe" palette.</entry>
<entry level="1" type="bullet">

 The GIMP's <it>Generate Optimal Palette with 256 Colours</it> option, known to use the median cut algorithm. There has been some discussion in the developer community of adding support for spatial color quantization.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%223%22])">3</ref></entry>
</list>
</p>
<p>

Color quantization is also used to create <link xlink:type="simple" xlink:href="../173/1134173.xml">
posterization</link> effects, although the aim of posterization is to achieve color minimization within the same color space.</p>
<p>

Some <link xlink:type="simple" xlink:href="../565/44565.xml">
vector graphics editor</link>s also utilize color quantization, especially for <link>
raster-to-vector</link> techniques that create tracings of bitmap images with the help of <link xlink:type="simple" xlink:href="../680/331680.xml">
edge detection</link>.</p>
<p>

<list>
<entry level="1" type="bullet">

 Inkscape's <it>Path→Trace Bitmap: Multiple Scans: Color</it> function uses octree quantization to create color traces.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%224%22])">4</ref></entry>
</list>
</p>

</ss1>
</sec>
<sec>
<st>
 See also </st>

<p>

<list>
<entry level="1" type="bullet">

 <structure wordnetid="104341686" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<link xlink:type="simple" xlink:href="../310/3563310.xml">
Indexed color</link></device>
</instrumentality>
</artifact>
</structure>
</entry>
<entry level="1" type="bullet">

 <structure wordnetid="104341686" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<link xlink:type="simple" xlink:href="../242/3361242.xml">
Palette (computing)</link></device>
</instrumentality>
</artifact>
</structure>
</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../770/15546770.xml">
List of software palettes</link> — <link xlink:type="simple" xlink:href="../770/15546770.xml#xpointer(//*[./st=%22Adaptive+palettes%22])">
Adaptive palettes</link> section.</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../526/1243526.xml">
Dithering</link></entry>
<entry level="1" type="bullet">

 <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../012/1092012.xml">
Quantization (image processing)</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</entry>
</list>
</p>

</sec>
<sec>
<st>
 References </st>

<p>

<list>
<entry level="1" type="bullet">

 Paul S. Heckbert. <weblink xlink:type="simple" xlink:href="http://web.archive.org/web/20050606233131/http://citeseer.ist.psu.edu/heckbert80color.html">
Color Image Quantization for Frame Buffer Display</weblink>. ACM SIGGRAPH '82 Proceedings. First publication of the median cut algorithm.</entry>
<entry level="1" type="bullet">

 Dan Bloomberg. <weblink xlink:type="simple" xlink:href="http://www.leptonica.com/papers/colorquant.pdf">
Color quantization using octrees</weblink>. Leptonica.</entry>
<entry level="1" type="bullet">

 Oleg Verevka. <weblink xlink:type="simple" xlink:href="http://citeseer.ist.psu.edu/100440.html">
Color Image Quantization in Windows Systems with Local K-means Algorithm</weblink>. <it>Proceedings of the Western Computer Graphics Symposium '95.''</it></entry>
<entry level="1" type="bullet">

 J. Puzicha, M. Held, J. Ketterer, J. M. Buhmann, and D. Fellner. <weblink xlink:type="simple" xlink:href="http://www-dbv.cs.uni-bonn.de/abstracts/puzicha.TR98-1.html">
On Spatial Quantization of Color Images</weblink>. (<weblink xlink:type="simple" xlink:href="http://www-dbv.cs.uni-bonn.de/postscript/puzicha.TR98-1.ps.gz">
full text .ps.gz</weblink>) Technical Report IAI-TR-98-1, University of Bonn. 1998.</entry>
<entry level="1" type="bullet">

 B. Freisleben, and A. Schrader. Color Quantization with a Hybrid Genetic Algorithm. Proceedings of the Sixth IEE International Conference on Image Processing and its Applications, Dublin, Irland, July 14-17, 1997, pp. 89-93.</entry>
</list>
</p>

<p>

<reflist>
<entry id="1">
http://members.ozemail.com.au/~dekker/NEUQUANT.HTML</entry>
<entry id="2">
http://www.andreas-schrader.de/research-colorquant.html</entry>
<entry id="3">
http://lists.xcf.berkeley.edu/lists/gimp-user/2000-April/001024.html, http://lists.xcf.berkeley.edu/lists/gimp-developer/2000-April/012205.html</entry>
<entry id="4">
Bah, Tavmjong&#32;(2007-07-23).&#32;"<weblink xlink:type="simple" xlink:href="http://tavmjong.free.fr/INKSCAPE/MANUAL/html/Trace-Multi.html">
Inkscape » Tracing Bitmaps » Multiple Scans</weblink>".&#32;Retrieved on <link>
2008-02-23</link>.</entry>
</reflist>
</p>


</sec>
</bdy>
</article>
