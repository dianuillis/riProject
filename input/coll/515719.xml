<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 17:12:51[mciao0827] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>Subquadratic time</title>
<id>515719</id>
<revision>
<id>234239843</id>
<timestamp>2008-08-25T23:45:28Z</timestamp>
<contributor>
<username>Pol098</username>
<id>169132</id>
</contributor>
</revision>
<categories>
<category>Analysis of algorithms</category>
</categories>
</header>
<bdy>

In <link xlink:type="simple" xlink:href="../213/5213.xml">
computing</link> an <link xlink:type="simple" xlink:href="../775/775.xml">
algorithm</link> is said to run in <b>subquadratic time</b> if its running time <math>f(n)</math> is less then <math>o(n^2)</math>.  <p>

For example, most na√Øve <link xlink:type="simple" xlink:href="../442/28442.xml">
sorting algorithm</link>s are quadratic (e.g., <link xlink:type="simple" xlink:href="../205/15205.xml">
insertion sort</link>), but more advanced algorithms can be found that are subquadratic (e.g., <link xlink:type="simple" xlink:href="../039/20039.xml">
merge sort</link>).  No general-purpose sorts run in <link xlink:type="simple" xlink:href="../258/754258.xml">
linear time</link>, but the change from quadratic to the common <math>O(n\ln n)</math> is of great practical importance.</p>
<p>

Since <link xlink:type="simple" xlink:href="../578/44578.xml">
Big O notation</link> essentially captures how well an algorithm scales, subquadratic algorithms scale to higher problem sizes much better than algorithms of quadratic or higher complexity.  For example, say we have two algorithms (call them A and B) which compute a function <math>f(n)</math>.  Algorithm A computes <math>f</math> in <math>10n \log_2(n) + 3n + 4</math> steps, rounded up, (making it an <math>O(n \log (n))</math> algorithm, and algorithm B comptutes it in <math>n^2 + 2n + 1</math> steps, making it a quadratic (<math>O(n^2)</math>) algorithm.</p>
<p>

In this case, algorithm B outperforms algorithm A for all integer values of <math>n &amp;lt; 61</math>.  On the other hand, for <math>n=100</math>, the quadratic algorithm is doing <math>46%</math> more work than the <math>O(n \log (n))</math> algorithm, and the difference becomes even more dramatic for higher values of <math>n</math>.  By the time <math>n=1000</math>, the quadratic algorithm is doing almost <math>10</math> times the work of the subquadratic algorithm.</p>

<p>

See also: <link xlink:type="simple" xlink:href="../578/44578.xml">
Big O notation</link></p>


</bdy>
</article>
