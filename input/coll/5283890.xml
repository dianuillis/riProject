<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 21:39:19[mciao0825] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<event  confidence="0.8" wordnetid="100029378">
<rule  confidence="0.8" wordnetid="105846932">
<act  confidence="0.8" wordnetid="100030358">
<psychological_feature  confidence="0.8" wordnetid="100023100">
<procedure  confidence="0.8" wordnetid="101023820">
<activity  confidence="0.8" wordnetid="100407535">
<algorithm  confidence="0.8" wordnetid="105847438">
<header>
<title>Split-radix FFT algorithm</title>
<id>5283890</id>
<revision>
<id>141207231</id>
<timestamp>2007-06-28T17:23:47Z</timestamp>
<contributor>
<username>Rjwilmsi</username>
<id>203434</id>
</contributor>
</revision>
<categories>
<category>FFT algorithms</category>
</categories>
</header>
<bdy>

The <b>split-radix FFT</b> is a <link xlink:type="simple" xlink:href="../512/11512.xml">
fast Fourier transform</link> (FFT) algorithm for computing the <link xlink:type="simple" xlink:href="../811/8811.xml">
discrete Fourier transform</link> (DFT), and was first described in an obscure paper by <link>
R. Yavne</link> (1968) and subsequently rediscovered simultaneously by various authors in 1984. (The name "split radix" was coined by two of these reinventors, <link>
P. Duhamel</link> and <link>
H. Hollmann</link>.)  In particular, split radix is a variant of the <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../702/352702.xml">
Cooley-Tukey FFT algorithm</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
 that uses a blend of radices 2 and 4: it <link xlink:type="simple" xlink:href="../407/25407.xml">
recursively</link> expresses a DFT of length <it>N</it> in terms of one smaller DFT of length <it>N</it>/2 and two smaller DFTs of length <it>N</it>/4.<p>

The split-radix FFT, along with its variations, long had the distinction of achieving the lowest published arithmetic operation count (total exact number of required <link xlink:type="simple" xlink:href="../491/19725491.xml">
real</link> additions and multiplications) to compute a DFT of <link xlink:type="simple" xlink:href="../948/376948.xml">
power-of-two</link> sizes <it>N</it>.  The arithmetic count of the original split-radix algorithm was improved upon in 2004 (with the initial gains made in unpublished work by J. Van Buskirk via hand optimization for <it>N</it>=64 <weblink xlink:type="simple" xlink:href="http://groups.google.com/group/comp.dsp/msg/9e002292accb8a8b">
http://groups.google.com/group/comp.dsp/msg/9e002292accb8a8b</weblink> <weblink xlink:type="simple" xlink:href="http://home.comcast.net/~kmbtib/">
http://home.comcast.net/~kmbtib/</weblink>), but it turns out that one can still achieve the new lowest count by a modification of split radix (Johnson and Frigo, 2007). Although the number of arithmetic operations is not the sole factor (or even necessarily the dominant factor) in determining the time required to compute a DFT on a <link xlink:type="simple" xlink:href="../457/7878457.xml">
computer</link>, the question of the minimum possible count is of longstanding theoretical interest.  (No tight lower bound on the operation count has currently been proven.)</p>
<p>

The split-radix algorithm can only be applied when <it>N</it> is a multiple of 4, but since it breaks a DFT into smaller DFTs it can be combined with any other FFT algorithm as desired.</p>

<sec>
<st>
Split-radix decomposition</st>

<p>

Recall that the DFT is defined by the formula:
<indent level="1">

<math> X_k =  \sum_{n=0}^{N-1} x_n \omega_N^{nk} </math>
</indent>
where <math>k</math> is an integer ranging from <math>0</math> to <math>N-1</math> and <math>\omega_N</math> denotes the primitive <link xlink:type="simple" xlink:href="../950/171950.xml">
root of unity</link>:
<indent level="1">

<math>\omega_N = e^{-\frac{2\pi i}{N}},</math>
</indent>
and thus <math>\omega_N^N = 1</math>.</p>
<p>

The split-radix algorithm works by expressing this summation in terms of three smaller summations.  (Here, we give the "decimation in time" version of the split-radix FFT; the dual decimation in frequency version is essentially just the reverse of these steps.)</p>
<p>

First, a summation over the <link xlink:type="simple" xlink:href="../135/143135.xml">
even</link> indices <math>x_{2n_2}</math>.  Second, a summation over the odd indices broken into two pieces: <math>x_{4n_4+1}</math> and <math>x_{4n_4+3}</math>, according to whether the index is 1 or 3 <link xlink:type="simple" xlink:href="../428/1352428.xml">
modulo</link> 4.  Here, <math>n_m</math> denotes an index that runs from 0 to <math>N/m-1</math>.  The resulting summations look like:</p>
<p>

<indent level="1">

<math> X_k =  \sum_{n_2=0}^{N/2-1} x_{2n_2} \omega_{N/2}^{n_2 k} 
+ \omega_N^k \sum_{n_4=0}^{N/4-1} x_{4n_4+1} \omega_{N/4}^{n_4 k}
+ \omega_N^{3k} \sum_{n_4=0}^{N/4-1} x_{4n_4+3} \omega_{N/4}^{n_4 k}
</math>
</indent>

where we have used the fact that <math>\omega_N^{m n k} = \omega_{N/m}^{n k}</math>.  These three sums correspond to <it>portions</it> of <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../702/352702.xml#xpointer(//*[./st=%22The+radix-2+DIT+case%22])">
radix-2</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
 (size <it>N</it>/2) and radix-4 (size <it>N</it>/4) Cooley-Tukey steps, respectively.  (The underlying idea is that the even-index subtransform of radix-2 has no multiplicative factor in front of it, so it should be left as-is, while the odd-index subtransform of radix-2 benefits by combining a second recursive subdivision.)</p>
<p>

These smaller summations are now exactly DFTs of length <it>N</it>/2 and <it>N</it>/4, which can be performed recursively and then recombined.</p>
<p>

More specifically, let <math>U_k</math> denote the result of the DFT of length <it>N</it>/2 (for <math>k = 0,\ldots,N/2-1</math>), and let <math>Z_k</math> and <math>Z'_k</math> denote the results of the DFTs of length <it>N</it>/4 (for <math>k = 0,\ldots,N/4-1</math>).  Then the output <math>X_k</math> is simply:
<indent level="1">

<math>X_k = U_k + \omega_N^k Z_k + \omega_N^{3k} Z'_k</math>.
</indent>

This, however, performs unnecessary calculations, since <math>k \geq N/4</math> turn out to share many calculations with <math>k &amp;lt; N/4</math>.  In particular, if we add <it>N</it>/4 to <it>k</it>, the size-<it>N</it>/4 DFTs are not changed (because they are periodic in <it>k</it>), while the size-<it>N</it>/2 DFT is unchanged if we add <it>N</it>/2 to <it>k</it>. So, the only things that change are the <math>\omega_N^k</math> and <math>\omega_N^{3k}</math> terms, known as <link xlink:type="simple" xlink:href="../398/2707398.xml">
twiddle factor</link>s.  Here, we use the identities:
<indent level="1">

<math>\omega_N^{k+N/4} = -i \omega_N^k</math>
</indent>
:<math>\omega_N^{3(k+N/4)} = i \omega_N^{3k}</math>
to finally arrive at:
<indent level="1">

<math>X_k = U_k + \left( \omega_N^k Z_k + \omega_N^{3k} Z'_k \right),</math>
</indent>
:<math>X_{k+N/2} = U_k - \left( \omega_N^k Z_k + \omega_N^{3k} Z'_k \right),</math>
<indent level="1">

<math>X_{k+N/4} = U_{k+N/4} - i \left( \omega_N^k Z_k - \omega_N^{3k} Z'_k \right),</math>
</indent>
:<math>X_{k+3N/4} = U_{k+N/4} + i \left( \omega_N^k Z_k - \omega_N^{3k} Z'_k \right),</math>
which gives all of the outputs <math>X_k</math> if we let <math>k</math> range from <math>0</math> to <math>N/4-1</math> in the above four expressions.</p>
<p>

Notice that these expressions are arranged so that we need to combine the various DFT outputs by pairs of additions and subtractions, which are known as <link xlink:type="simple" xlink:href="../212/2707212.xml">
butterflies</link>.  In order to obtain the minimal operation count for this algorithm, one needs to take into account special cases for <math>k = 0</math> (where the twiddle factors are unity) and for <math>k = N/8</math> (where the twiddle factors are <math>(\pm 1 - i)/\sqrt{2}</math> and can be multiplied more quickly).  Multiplications by <math>\pm 1</math> and <math>\pm i</math> are ordinarily counted as free (all negations can be absorbed by converting additions into subtractions or vice versa).</p>
<p>

This decomposition is performed recursively when <it>N</it> is a power of two.  The base cases of the recursion are <it>N</it>=1, where the DFT is just a copy <math>X_0 = x_0</math>, and <it>N</it>=2, where the DFT is an addition <math>X_0 = x_0 + x_1</math> and a subtraction <math>X_1 = x_0 - x_1</math>.</p>
<p>

These considerations result in a count: <math>4 N \log_2 N - 6N + 8</math> real additions and multiplications, for <it>N</it> a power of two greater than 1.</p>

</sec>
<sec>
<st>
References</st>
<p>

<list>
<entry level="1" type="bullet">

 R. Yavne, "An economical method for calculating the discrete Fourier transform," in <it>Proc. AFIPS Fall Joint Computer Conf.</it> <b>33</b>, 115–125 (1968).</entry>
<entry level="1" type="bullet">

 P. Duhamel and H. Hollmann, "Split-radix FFT algorithm," <it>Electron. Lett.</it> <b>20</b> (1), 14–16 (1984).</entry>
<entry level="1" type="bullet">

 M. Vetterli and H. J. Nussbaumer, "Simple FFT and DCT algorithms with reduced number of operations," <it>Signal Processing</it> <b>6</b> (4), 267–278 (1984).</entry>
<entry level="1" type="bullet">

 J. B. Martens, "Recursive cyclotomic factorization—a new algorithm for calculating the discrete Fourier transform," <it>IEEE Trans. Acoust., Speech, Signal Processing</it> <b>32</b> (4), 750–761 (1984).</entry>
<entry level="1" type="bullet">

 P. Duhamel and M. Vetterli, "Fast Fourier transforms: a tutorial review and a state of the art," <it>Signal Processing</it> <b>19</b>, 259&ndash;299 (1990).</entry>
<entry level="1" type="bullet">

 S. G. Johnson and M. Frigo, "<weblink xlink:type="simple" xlink:href="http://www.fftw.org/newsplit.pdf">
A modified split-radix FFT with fewer arithmetic operations</weblink>," <it>IEEE Trans. Signal Processing</it> <b>55</b> (1), 111–119 (2007).</entry>
<entry level="1" type="bullet">

 Douglas L. Jones, "<weblink xlink:type="simple" xlink:href="http://cnx.org/content/m12031/latest/">
Split-radix FFT algorithms</weblink>," <it><weblink xlink:type="simple" xlink:href="http://cnx.org/">
Connexions</weblink></it> web site (Nov. 2, 2006).</entry>
</list>
</p>

</sec>
</bdy>
</algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</article>
