<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 17:15:45[mciao0826] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>Las Vegas algorithm</title>
<id>537519</id>
<revision>
<id>221175488</id>
<timestamp>2008-06-23T10:54:14Z</timestamp>
<contributor>
<username>TubularWorld</username>
<id>4759276</id>
</contributor>
</revision>
<categories>
<category>Randomness</category>
<category>Algorithms</category>
</categories>
</header>
<bdy>

In <link xlink:type="simple" xlink:href="../213/5213.xml">
computing</link>, a <b>Las Vegas algorithm</b> is a <link xlink:type="simple" xlink:href="../383/495383.xml">
randomized algorithm</link> that never gives <link xlink:type="simple" xlink:href="../339/357339.xml">
incorrect</link> results; that is, it always produces the correct result or it informs about the failure.  In other words, a <village wordnetid="108672738" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../737/47737.xml">
Las Vegas</link></village>
 algorithm does not gamble with the verity of the result --- it only gambles with the resources used for the computation. A simple example is randomized <link xlink:type="simple" xlink:href="../249/3268249.xml">
quicksort</link>, where the pivot is chosen randomly, but the result is always sorted. The usual definition of a Las Vegas algorithm includes the restriction that the <it>expected</it> run time always be finite, when the expectation is carried out over the space of random information, or entropy, used in the algorithm.  <p>

The <link xlink:type="simple" xlink:href="../426/502426.xml">
complexity class</link> of <link xlink:type="simple" xlink:href="../336/8336.xml">
decision problem</link>s that have Las Vegas algorithms with <link xlink:type="simple" xlink:href="../653/9653.xml">
expected</link> polynomial runtime is <b><class wordnetid="107997703" confidence="0.8">
<collection wordnetid="107951464" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<link xlink:type="simple" xlink:href="../772/54772.xml">
ZPP</link></group>
</collection>
</class>
</b>.</p>
<p>

It turns out that</p>
<p>

<indent level="1">

<math>\textrm{ZPP} = \textrm{RP} \cap \,co\,\textrm{-RP}, \,\!</math>
</indent>

which is intimately connected with the way Las Vegas algorithms are sometimes constructed.  Namely the class <b><class wordnetid="107997703" confidence="0.8">
<collection wordnetid="107951464" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<link xlink:type="simple" xlink:href="../771/54771.xml">
RP</link></group>
</collection>
</class>
</b> consists of all decision problems for which a randomized polynomial-time algorithm exists that always answers correctly when the correct answer is "no", but is allowed to be wrong with a certain probability bounded away from one when the answer is "yes".  When such an algorithm exists for both a problem and its complement (with the answers "yes" and "no" swapped), the two algorithms can be run simultaneously and repeatedly:  a few steps of each, taking turns, until one of them returns a definitive answer.  This is the standard way to construct a Las Vegas algorithm that runs in expected polynomial time.  Note that in general there is no worst case upper bound on the run time of a Las Vegas algorithm.</p>
<p>

Las Vegas algorithms can be contrasted with <technique wordnetid="105665146" confidence="0.8">
<know-how wordnetid="105616786" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<link xlink:type="simple" xlink:href="../098/56098.xml">
Monte Carlo algorithms</link></method>
</know-how>
</technique>
, in which the resources used are bounded but the answer is not guaranteed to be correct 100% of the time.</p>

<sec>
<st>
 See also </st>
<p>

<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../523/19196523.xml">
Randomness</link></entry>
<entry level="1" type="bullet">

 <technique wordnetid="105665146" confidence="0.8">
<know-how wordnetid="105616786" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<link xlink:type="simple" xlink:href="../098/56098.xml">
Monte Carlo method</link></method>
</know-how>
</technique>
</entry>
</list>
</p>

</sec>
<sec>
<st>
 External links </st>
<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.datastructures.info/the-las-vegas-algorithmmethod/">
Example code of Miller-Rabin primality test using the Las Vegas method, C++</weblink></entry>
</list>
</p>

</sec>
<sec>
<st>
References</st>
<p>
 
<list>
<entry level="1" type="bullet">

Algorithms and Theory of Computation Handbook, CRC Press LLC, 1999, "Las Vegas algorithm", in Dictionary of Algorithms and Data Structures [online], Paul E. Black, ed., U.S. National Institute of Standards and Technology. 17 July 2006. (accessed TODAY) Available from: <weblink xlink:type="simple" xlink:href="http://www.nist.gov/dads/HTML/lasVegas.html">
http://www.nist.gov/dads/HTML/lasVegas.html</weblink></entry>
</list>
</p>


</sec>
</bdy>
</article>
