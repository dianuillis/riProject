<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 17:18:05[mciao0828] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<physical_entity  confidence="0.8" wordnetid="100001930">
<person  confidence="0.8" wordnetid="100007846">
<model  confidence="0.8" wordnetid="110324560">
<assistant  confidence="0.8" wordnetid="109815790">
<worker  confidence="0.8" wordnetid="109632518">
<causal_agent  confidence="0.8" wordnetid="100007347">
<header>
<title>Capability-based security</title>
<id>539717</id>
<revision>
<id>243112791</id>
<timestamp>2008-10-05T05:44:05Z</timestamp>
<contributor>
<username>Bjweeks</username>
<id>321557</id>
</contributor>
</revision>
<categories>
<category>Computer security models</category>
</categories>
</header>
<bdy>

<p>

<b>Capability-based security</b> is a concept in the design of <link xlink:type="simple" xlink:href="../398/7398.xml">
secure computing</link> systems. A <b>capability</b> (known in some systems as a <b>key</b>) is a communicable, unforgeable token of authority. It refers to a value that <link xlink:type="simple" xlink:href="../292/229292.xml">
references</link> an <link xlink:type="simple" xlink:href="../665/169665.xml">
object</link> along with an associated set of <link xlink:type="simple" xlink:href="../272/3906272.xml">
access rights</link>. A <link xlink:type="simple" xlink:href="../990/16301990.xml">
user</link> <link xlink:type="simple" xlink:href="../783/5783.xml">
program</link> on a capability-based <link xlink:type="simple" xlink:href="../194/22194.xml">
operating system</link> must use a capability to access an object. Capability-based security refers to the principle of designing user programs such that they directly share capabilities with each other according to the <link xlink:type="simple" xlink:href="../226/1695226.xml">
principle of least privilege</link>, and to the operating system infrastructure necessary to make such transactions efficient and secure.</p>
<p>

Although most operating systems implement a facility which resembles capabilities, they typically do not provide enough support to allow for the exchange of capabilities among possibly mutually untrusting entities to be the primary means of granting and distributing access rights throughout the system. A capability-based system, in contrast, is designed with that goal in mind.</p>
<p>

Capabilities as discussed on this page should not be confused with POSIX 1e/2c "Capabilities". The latter are coarse-grained privileges that cannot be transferred between processes.</p>

<sec>
<st>
Capabilities and capability-based security</st>
<p>

Capabilities achieve their objective of improving system security by being used in place of forgeable <link xlink:type="simple" xlink:href="../292/229292.xml">
references</link>. A forgeable reference (for example, a <link xlink:type="simple" xlink:href="../357/403357.xml">
path name</link>) identifies an object, but does not specify which access rights are appropriate for that object and the user program which holds that reference. Consequently, any attempt to access the referenced object must be validated by the operating system, typically via the use of an <link xlink:type="simple" xlink:href="../589/61589.xml">
access control list</link> (ACL). Instead, in a system with capabilities, the mere fact that a user program possesses that capability entitles it to use the referenced object in accordance with the rights that are specified by that capability. In theory, a system with capabilities removes the need for any access control list or similar mechanism by giving all entities all and only the capabilities they will actually need.</p>
<p>

A capability is typically implemented as a <link xlink:type="simple" xlink:href="../860/1692860.xml">
privileged</link> <link xlink:type="simple" xlink:href="../519/8519.xml">
data structure</link> that consists of a section that specifies access rights, and a section that uniquely identifies the object to be accessed. In practice, it is used much like a <link xlink:type="simple" xlink:href="../754/608754.xml">
file descriptor</link> in a traditional operating system, but to access every object on the system. Capabilities are typically stored by the operating system in a list, with some mechanism in place to prevent the program from directly modifying the contents of the capability (so as to forge access rights or change the object it points to). Some systems have also been based on <link xlink:type="simple" xlink:href="../454/8803454.xml">
capability-based addressing</link> (hardware support for capabilities), such as <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../744/401744.xml">
Plessey System 250</link></instrumentality>
</artifact>
</system>
.</p>
<p>

Programs possessing capabilities can perform functions on them, such as passing them on to other programs, converting them to a less-privileged version, or deleting them. The operating system must ensure that only specific operations can occur to the capabilities in the system, in order to maintain the integrity of the security policy.</p>

</sec>
<sec>
<st>
Introduction to capability-based security</st>
<p>

<it>(The following introduction assumes some basic knowledge of <family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../642/31642.xml">
Unix</link></family>
 systems.)</it></p>
<p>

A <link xlink:type="simple" xlink:href="../717/539717.xml">
capability</link> is defined to be a protected <link xlink:type="simple" xlink:href="../665/169665.xml">
object</link> reference which, by virtue of its possession by a user process, grants that process the capability (hence the name) to interact with an object in certain ways. Those ways might include reading data associated with an object, modifying the object, executing the data in the object as a process, and other conceivable access rights. The capability logically consists of a reference that uniquely identifies a particular object and a set of one or more of these rights.</p>
<p>

Suppose that, in a user process's memory space, there exists the following string:</p>
<p>

/etc/passwd</p>
<p>

Although this identifies a unique object on the system, it does not specify access rights and hence is not a capability. Suppose there is instead the following two values:</p>
<p>

/etc/passwd
O_RDWR</p>
<p>

This identifies an object along with a set of access rights. It, however, is still not a capability because the user process's <it>possession</it> of these values says nothing about whether that access would actually be legitimate.</p>
<p>

Now suppose that the user program successfully executes the following statement:</p>
<p>

int fd = open("/etc/passwd", O_RDWR);</p>
<p>

The variable <b>fd</b> now contains the index of a file descriptor in the process's file descriptor table. This file descriptor <it>is</it> a capability. Its existence in the process's file descriptor table is sufficient to know that the process does indeed have legitimate access to the object. A key feature of this arrangement is that the file descriptor table is in <link xlink:type="simple" xlink:href="../394/50394.xml">
kernel memory</link> and cannot be directly manipulated by the user program.</p>

</sec>
<sec>
<st>
Sharing of capabilities between processes</st>
<p>

In traditional operating systems, programs often communicate with each other and with storage using references like those in the first two examples. Path names are often passed as command-line parameters, sent via sockets, and stored on disk. These references are not capabilities, and must be validated before they can be used. In these systems, a central question is "on whose <it>authority</it> is a given reference to be evaluated?" This becomes a critical issue especially for processes which must act on behalf of two different authority-bearing entities. They become susceptible to a programming error known as the <link xlink:type="simple" xlink:href="../076/207076.xml">
Confused deputy problem</link>, very frequently resulting in a <link xlink:type="simple" xlink:href="../827/1129827.xml">
security hole</link>.</p>
<p>

In a capability-based system, the capabilities themselves are passed between processes and storage using a mechanism that is known by the operating system to maintain the integrity of those capabilities.</p>
<p>

Although many operating systems implement facilities very similar to capabilities through the use of <link xlink:type="simple" xlink:href="../754/608754.xml">
file descriptor</link>s or <link xlink:type="simple" xlink:href="../754/608754.xml">
file handle</link>s &mdash; for example, in <family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../642/31642.xml">
UNIX</link></family>
, file descriptors can be discarded (closed), inherited by child processes, and even sent to other processes via <link xlink:type="simple" xlink:href="../686/335686.xml">
socket</link>s &mdash; there are several obstacles that prevent all of the benefits of a <link xlink:type="simple" xlink:href="../454/8803454.xml">
capability-based addressing</link> system from being realized in a traditional operating system environment. Chief among these obstacles is the fact that entities which might hold capabilities (such as <link xlink:type="simple" xlink:href="../178/45178.xml">
processes</link> and <link xlink:type="simple" xlink:href="../077/7077.xml">
file</link>s) cannot be made <link xlink:type="simple" xlink:href="../550/6025550.xml">
persistent</link> in such a way that maintains the integrity of the secure information that a capability represents. The operating system cannot trust a user program to read back a capability and not tamper with the object reference or the access rights. Consequently, when a program wishes to regain access to an object that is referenced on disk, the operating system must have some way of validating that access request, and an access control list or similar mechanism is mandated.</p>
<p>

One novel approach to solving this problem involves the use of an <link xlink:type="simple" xlink:href="../550/6025550.xml">
orthogonally persistent</link> operating system. (This was realised in the Flex machine. See <link xlink:type="simple" xlink:href="../699/376699.xml">
Ten15</link>). In such a system, there is no need for entities to be discarded and their capabilities be invalidated, and hence require an ACL-like mechanism to restore those capabilities at a later time. The operating system maintains the integrity and security of the capabilities contained within all storage, both volatile and nonvolatile, at all times; in part by performing all <link xlink:type="simple" xlink:href="../555/28555.xml">
serialization</link> tasks by itself, rather than requiring user programs to do so, as is the case in most operating systems. Because user programs are relieved of this responsibility, there is no need to trust them to reproduce only legal capabilities, nor to validate requests for access using an <link xlink:type="simple" xlink:href="../684/40684.xml">
access control</link> mechanism.</p>

</sec>
<sec>
<st>
POSIX Capabilities</st>
<p>

POSIX draft 1003.1e specifies concept of permissions called “capabilities”. However POSIX capabilities differ from capabilities in this article — POSIX capability is not associated to any object: Process having CAP_NET_BIND_SERVICE capability can listen on any TCP port under 1024.</p>

</sec>
<sec>
<st>
Research and commercial systems</st>
<p>

<list>
<entry level="1" type="bullet">

 <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../009/1202009.xml">
KeyKOS</link></database>
</wordnet>
</lexical_database>
</electronic_database>
</information>
</message>
</entry>
<entry level="2" type="bullet">

 EROS - The <link xlink:type="simple" xlink:href="../077/353077.xml">
Extremely Reliable Operating System</link> - KeyKOS successor</entry>
<entry level="3" type="bullet">

 <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../126/4578126.xml">
CapROS</link></O>
 - EROS successor, project to further develop EROS code base for commercial use</entry>
<entry level="3" type="bullet">

 <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../689/3654689.xml">
Coyotos</link></database>
</wordnet>
</lexical_database>
</electronic_database>
</information>
</message>
 - EROS successor, for research</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../909/11586909.xml">
kaneton</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../448/1626448.xml">
Cambridge CAP computer</link></entry>
<entry level="1" type="bullet">

 <university wordnetid="108286163" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../093/48093.xml">
Carnegie Mellon University</link></university>
 <link xlink:type="simple" xlink:href="../135/1547135.xml">
C.mmp</link> with <link xlink:type="simple" xlink:href="../272/11405272.xml">
Hydra (operating system)</link></entry>
<entry level="1" type="bullet">

 <university wordnetid="108286163" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../093/48093.xml">
Carnegie Mellon University</link></university>
 CM* with StarOS</entry>
<entry level="1" type="bullet">

 IBM <link xlink:type="simple" xlink:href="../646/294646.xml">
System/38</link> and <link xlink:type="simple" xlink:href="../769/39769.xml">
AS/400</link></entry>
<entry level="1" type="bullet">

 <artifact wordnetid="100021939" confidence="0.8">
<merchandise wordnetid="103748886" confidence="0.8">
<commodity wordnetid="103076708" confidence="0.8">
<link xlink:type="simple" xlink:href="../163/474163.xml">
Intel iAPX 432</link></commodity>
</merchandise>
</artifact>
</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../744/401744.xml">
Plessey System 250</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../446/72446.xml">
Symbian</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../748/376748.xml">
Flex</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../763/95763.xml">
L4 microkernel</link> - Open Kernel Labs - OKL4 and NICTA - seL4</entry>
<entry level="1" type="bullet">

 <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../784/440784.xml">
Amoeba distributed operating system</link></database>
</wordnet>
</lexical_database>
</electronic_database>
</information>
</message>
</entry>
</list>
</p>



</sec>
<sec>
<st>
References</st>
<p>

<list>
<entry level="1" type="bullet">

 Levy, Henry M., <it>*<weblink xlink:type="simple" xlink:href="http://portal.acm.org/citation.cfm?id=538134&amp;dl=ACM&amp;coll=&amp;CFID=15151515&amp;CFTOKEN=6184618">
Capability-Based Computer Systems</weblink></it>, Digital Equipment Corporation 1984. ISBN 0-932376-22-3. An electronic version is available <weblink xlink:type="simple" xlink:href="http://www.cs.washington.edu/homes/levy/capabook/">
here</weblink>.</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.eros-os.org/">
The EROS Project</weblink></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../046/1377046.xml">
E</link>, a programming language based around capability security (<weblink xlink:type="simple" xlink:href="http://www.erights.org/">
ERights.org</weblink>)</entry>
<entry level="1" type="bullet">

 Mark S. Miller, Ka-Ping Yee, Jonathan Shapiro. <it>Capability Myths Demolished</it>, Technical Report SRL2003-02, Systems Research Laboratory, Johns Hopkins University. <weblink xlink:type="simple" xlink:href="http://srl.cs.jhu.edu/pubs/SRL2003-02.pdf">
Available online.</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.cs.washington.edu/homes/levy/capabook/Chapter5.pdf">
The Cambridge CAP Computer</weblink>, Levy, 1988</entry>
</list>

not currently used:
<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../454/8803454.xml">
Capability-based addressing</link>:  <cite style="font-style:normal">Theodore A. Linden&#32;(December 1976).&#32;"<weblink xlink:type="simple" xlink:href="http://portal.acm.org/citation.cfm?id=356682&amp;coll=&amp;dl=ACM&amp;CFID=15151515&amp;CFTOKEN=6184618">
Operating System Structures to Support Security and Reliable Software</weblink>". <it>ACM Computing Surveys (CSUR)</it>&#32;<b>8</b>&#32;(4): 409-445. ISSN 0360-0300 }.</cite>&nbsp;</entry>
<entry level="1" type="bullet">

 Li Gong, <it><weblink xlink:type="simple" xlink:href="http://doi.ieeecomputersociety.org/10.1109/SECPRI.1989.36277">
A Secure Identity-Based Capability System</weblink></it>, sp, p. 56, 1989 IEEE Symposium on Security and Privacy, 1989</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://portal.acm.org/citation.cfm?id=361070&amp;dl=ACM&amp;coll=&amp;CFID=15151515&amp;CFTOKEN=6184618">
Capability-based addressing</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://portal.acm.org/citation.cfm?id=850709&amp;dl=ACM&amp;coll=&amp;CFID=15151515&amp;CFTOKEN=6184618">
A hardware implementation of capability-based addressing</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://portal.acm.org/citation.cfm?id=850701&amp;coll=&amp;dl=ACM&amp;CFID=15151515&amp;CFTOKEN=6184618">
An implementation of capabilities on the PDP-11/45</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://portal.acm.org/citation.cfm?id=801885&amp;dl=ACM&amp;coll=&amp;CFID=15151515&amp;CFTOKEN=6184618">
IBM System/38 support for capability-based addressing</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://portal.acm.org/citation.cfm?id=319163&amp;dl=ACM&amp;coll=&amp;CFID=15151515&amp;CFTOKEN=6184618">
EROS: a fast capability system</weblink></entry>
</list>

POSIX "capabilities" in Linux:
<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.friedhoff.org/posixfilecaps.html">
POSIX Capabilities &amp; Files</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.ibm.com/developerworks/library/l-posixcap.html">
POSIX file capabilities: Parceling the power of root</weblink></entry>
</list>
</p>

</sec>
<sec>
<st>
External links</st>
<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.eros-os.org/mailman/listinfo/cap-talk">
The cap-talk mailing list</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.eros-os.org/pipermail/cap-talk/2003-March/001133.html">
Reviews of 'Capability Myths Demolished'</weblink> Some criticism of the reference above.</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.eros-os.org/essays/capintro.html">
What is a Capability?</weblink>: an informal introduction to capabilities.</entry>
<entry level="1" type="bullet">

 Rick Smith <weblink xlink:type="simple" xlink:href="http://infosecuritymag.techtarget.com/articles/february00/covera.shtml">
interviews</weblink> <link>
Jonathan Shapiro</link>, designer of <link xlink:type="simple" xlink:href="../077/353077.xml">
EROS</link>, in <link xlink:type="simple" xlink:href="../548/34548.xml">
2000</link>.</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.cap-lore.com/CapTheory/index.html">
Capability Theory by Sound Bytes</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.nabble.com/On-the-Spread-of-the-Capability-Approach-t2037962.html">
History of the Capability Approach</weblink></entry>
</list>
</p>


</sec>
</bdy>
</causal_agent>
</worker>
</assistant>
</model>
</person>
</physical_entity>
</article>
