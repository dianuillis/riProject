<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 15:45:39[mciao0826] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<automaton  confidence="0.9511911446218017" wordnetid="109825519">
<header>
<title>Cellular automaton</title>
<id>54342</id>
<revision>
<id>244587612</id>
<timestamp>2008-10-11T16:07:30Z</timestamp>
<contributor>
<username>David Eppstein</username>
<id>2051880</id>
</contributor>
</revision>
<categories>
<category>Cellular automata</category>
</categories>
</header>
<bdy>

A <b>cellular automaton</b> (plural: <b>cellular automata</b>) is a <link xlink:type="simple" xlink:href="../492/8492.xml">
discrete</link> model studied in <link xlink:type="simple" xlink:href="../136/442136.xml">
computability theory</link>, <link xlink:type="simple" xlink:href="../831/18831.xml">
mathematics</link>, <link xlink:type="simple" xlink:href="../278/1693278.xml">
theoretical biology</link> and microstructure modeling.  It consists of a regular grid of <it>cells</it>, each in one of a finite number of <it><physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<model wordnetid="110324560" confidence="0.8">
<assistant wordnetid="109815790" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../512/285512.xml">
states</link></causal_agent>
</worker>
</assistant>
</model>
</person>
</physical_entity>
</it>.  The grid can be in any finite number of dimensions.  Time is also <link xlink:type="simple" xlink:href="../137/305137.xml">
discrete</link>, and the state of a cell at time <it>t</it> is a function of the states of a finite number of cells (called its <it>neighborhood</it>) at time <it>t</it>&nbsp;&amp;minus;&nbsp;1. These neighbors are a selection of cells relative to the specified cell, and do not change (though the cell itself may be in its neighborhood, it is not usually considered a neighbor). Every cell has the same rule for updating, based on the values in this neighbourhood. Each time the rules are applied to the whole grid a new <it>generation</it> is created.
<sec>
<st>
Overview</st>
<p>

One way to simulate a two-dimensional cellular automaton is with an infinite sheet of <link xlink:type="simple" xlink:href="../606/293606.xml">
graph paper</link> along with a set of rules for the cells to follow. Each square is called a "cell" and each cell has two possible states, black and white. The "neighbors" of a cell are the 8 squares touching it. For such a cell and its neighbors, there are 512 (= 29) possible patterns. For each of the 512 possible patterns, the rule table would state whether the center cell will be black or white on the next time interval. <idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<rule wordnetid="105846054" confidence="0.8">
<link xlink:type="simple" xlink:href="../035/37035.xml">
Conway's Game of Life</link></rule>
</concept>
</idea>
 is a popular version of this model.</p>
<p>

It is usually assumed that every cell in the universe starts in the same state, except for a finite number of cells in other states, often called a <it>configuration</it>.  More generally, it is sometimes assumed that the universe starts out covered with a periodic pattern, and only a finite number of cells violate that pattern.  The latter assumption is common in one-dimensional cellular automata.</p>
<p>

<image location="right" width="200px" src="Torus.png" type="thumb">
<caption>

A <link xlink:type="simple" xlink:href="../800/74800.xml">
torus</link>, a toroidal shape.
</caption>
</image>

Cellular automata are often simulated on a finite grid rather than an infinite one.  In two dimensions, the universe would be a rectangle instead of an infinite plane.  The obvious problem with finite grids is how to handle the cells on the edges. How they are handled will affect the values of all the cells in the grid. One possible method is to allow the values in those cells to remain constant. Another method is to define neighbourhoods differently for these cells. One could say that they have fewer neighbours, but then one would also have to define new rules for the cells located on the edges. These cells are usually handled with a <it>toroidal</it> arrangement: when one goes off the top, one comes in at the corresponding position on the bottom, and when one goes off the left, one comes in on the right. (This essentially simulates an infinite <link xlink:type="simple" xlink:href="../728/821728.xml">
periodic</link> tiling, and in the field of <link xlink:type="simple" xlink:href="../564/52564.xml">
Partial Differential Equations</link> is sometimes referred to as <it>periodic</it> boundary conditions.) This can be visualized as taping the left and right edges of the rectangle to form a tube, then taping the top and bottom edges of the tube to form a <link xlink:type="simple" xlink:href="../800/74800.xml">
torus</link> (doughnut shape).  Universes of other <link xlink:type="simple" xlink:href="../778/898778.xml">
dimensions</link> are handled similarly. This is done in order to solve boundary problems with neighborhoods. For example, in a 1-dimensional cellular automaton like the examples below, the neighborhood of a cell <it>xit</it>&mdash;where <it>t</it> is the time step (vertical), and <it>i</it> is the index (horizontal) in one generation&mdash;is {<it>xi</it>&amp;minus;1<it>t</it>&amp;minus;1, <it>xit</it>&amp;minus;1, <it>xi</it>+1<it>t</it>&amp;minus;1}. There will obviously be problems when a neighbourhood on a left border references its upper left cell, which is not in the cellular space, as part of its neighborhood.</p>

</sec>
<sec>
<st>
History</st>
<p>

<link>
Stanis≈Çaw Ulam</link>, while working at the <site wordnetid="108651247" confidence="0.8">
<region wordnetid="108630985" confidence="0.8">
<position wordnetid="108621598" confidence="0.8">
<center wordnetid="108523483" confidence="0.8">
<point wordnetid="108620061" confidence="0.8">
<landmark wordnetid="108624891" confidence="0.8">
<area wordnetid="108497294" confidence="0.8">
<location wordnetid="100027167" confidence="0.8">
<tract wordnetid="108673395" confidence="0.8">
<geographical_area wordnetid="108574314" confidence="0.8">
<link xlink:type="simple" xlink:href="../145/38145.xml">
Los Alamos National Laboratory</link></geographical_area>
</tract>
</location>
</area>
</landmark>
</point>
</center>
</position>
</region>
</site>
 in the 1940s, studied the growth of crystals, using a simple <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<model wordnetid="110324560" confidence="0.8">
<assistant wordnetid="109815790" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../472/291472.xml">
lattice network</link></causal_agent>
</worker>
</assistant>
</model>
</person>
</physical_entity>
 as his model. At the same time, <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../942/15942.xml">
John von Neumann</link></scientist>
</person>
, Ulam's colleague at Los Alamos, was working on the problem of <link xlink:type="simple" xlink:href="../549/29549.xml">
self-replicating system</link>s. Von Neumann's initial design was founded upon the notion of one robot building another robot.  This design is known as the kinematic model. As he developed this design, von Neumann came to realize the great difficulty of building a self-replicating robot, and of the great cost in providing the robot with a "sea of parts" from which to build its replicant. Ulam suggested that von Neumann develop his design around a mathematical abstraction, such as the one Ulam used to study <link xlink:type="simple" xlink:href="../507/3053507.xml">
crystal growth</link>. Thus was born the first system of cellular automata. Like Ulam's lattice network, <link xlink:type="simple" xlink:href="../009/2234009.xml">
von Neumann's cellular automata</link> are two-dimensional, with his self-replicator implemented algorithmically. The result was a <structure wordnetid="105726345" confidence="0.8">
<form wordnetid="105930736" confidence="0.8">
<link xlink:type="simple" xlink:href="../086/8597086.xml">
universal copier and constructor</link></form>
</structure>
 working within a CA with a small neighborhood (only those cells that touch are neighbors; for von Neumann's cellular automata, only <link xlink:type="simple" xlink:href="../221/102221.xml">
orthogonal</link> cells), and with 29 states per cell. Von Neumann gave an existence proof that a particular pattern would make endless copies of itself within the given cellular universe. This design is known as the <link xlink:type="simple" xlink:href="../671/321671.xml">
tessellation</link> model, and is called a von Neumann <structure wordnetid="105726345" confidence="0.8">
<form wordnetid="105930736" confidence="0.8">
<link xlink:type="simple" xlink:href="../086/8597086.xml">
universal constructor</link></form>
</structure>
.</p>
<p>

In the 1970s a two-state, two-dimensional cellular automaton named <idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<rule wordnetid="105846054" confidence="0.8">
<link xlink:type="simple" xlink:href="../035/37035.xml">
Game of Life</link></rule>
</concept>
</idea>
 became very widely known, particularly among the early computing community. Invented by <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../807/15807.xml">
John Conway</link></scientist>
</person>
, and popularized by <person wordnetid="100007846" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../435/20435.xml">
Martin Gardner</link></person>
 in a <it><periodical wordnetid="106593296" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../507/29507.xml">
Scientific American</link></periodical>
</it> article, its rules are as follows: If a black cell has 2 or 3 black neighbors, it stays black. If a black cell has less than 2 or more than 3 black neighbors it becomes white. If a white cell has 3 black neighbors, it becomes black.  Despite its simplicity, the system achieves an impressive diversity of behavior, fluctuating between apparent randomness and order. One of the most apparent features of the Game of Life is the frequent occurrence of <it>gliders</it>, arrangements of cells that essentially move themselves across the grid. It is possible to arrange the automaton so that the gliders interact to perform computations, and after much effort it has been shown that the Game of Life can emulate a universal <invention wordnetid="105633385" confidence="0.8">
<know-how wordnetid="105616786" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<link xlink:type="simple" xlink:href="../403/30403.xml">
Turing machine</link></method>
</know-how>
</invention>
. 
Possibly because it was viewed as a largely recreational topic, little follow-up work was done outside of investigating the particularities of the Game of Life and a few related rules.</p>
<p>

In 1969, however, German computer pioneer <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../810/16810.xml">
Konrad Zuse</link></scientist>
</person>
 published his book <it><work wordnetid="104599396" confidence="0.8">
<product wordnetid="104007894" confidence="0.8">
<creation wordnetid="103129123" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<book wordnetid="106410904" confidence="0.8">
<publication wordnetid="106589574" confidence="0.8">
<link xlink:type="simple" xlink:href="../779/842779.xml">
Calculating Space</link></publication>
</book>
</artifact>
</creation>
</product>
</work>
</it>, proposing that the physical laws of the universe are discrete by nature, and that the entire universe is just the output of a deterministic computation on a giant cellular automaton. This was the first book on what today is called <link xlink:type="simple" xlink:href="../493/405493.xml">
digital physics</link>. </p>
<p>

In 1983 <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../469/52469.xml">
Stephen Wolfram</link></scientist>
</person>
 published the first of a series of papers systematically investigating a very basic but essentially unknown class of cellular automata, which he terms <it>elementary cellular automata</it> (see below). The unexpected complexity of the behavior of these simple rules led Wolfram to suspect that complexity in nature may be due to similar mechanisms.  Additionally, during this period Wolfram formulated the concepts of intrinsic randomness and computational irreducibility, and suggested that <link xlink:type="simple" xlink:href="../028/491028.xml">
rule 110</link> may be <link xlink:type="simple" xlink:href="../621/30621.xml">
universal</link>&mdash;a fact proved later with the help of Wolfram's research assistant <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<mathematician wordnetid="110301261" confidence="0.8">
<link xlink:type="simple" xlink:href="../310/145310.xml">
Matthew Cook</link></mathematician>
</scientist>
</causal_agent>
</person>
</physical_entity>
 in the 1990s.</p>
<p>

Wolfram left academia in the mid-late 1980s to create <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../024/49024.xml">
Mathematica</link></software>
, which he then used to extend his earlier results to a broad range of other simple, abstract systems. In 2002 he published his results in the 1280-page text <it><link>
A New Kind of Science</link></it>, which extensively argued that the discoveries about cellular automata are not isolated facts but are robust and have significance for all disciplines of science.  Despite much confusion in the press and academia, the book did not argue for a fundamental theory of physics based on cellular automata, and although it did describe a few specific physical models based on cellular automata, it also provided models based on qualitatively different abstract systems.</p>
<p>

In his 2005 book, <weblink xlink:type="simple" xlink:href="http://www.rudyrucker.com/lifebox/">
The Lifebox, The Seashell and The Soul</weblink>, <person wordnetid="100007846" confidence="0.9508927676800064">
<writer wordnetid="110794014" confidence="0.9173553029164789">
<link xlink:type="simple" xlink:href="../812/254812.xml">
Rudy Rucker</link></writer>
</person>
 expanded upon Wolfram's theories toward a theory of <weblink xlink:type="simple" xlink:href="http://zenbullets.com/blog/?p=72">
Universal Automatism</weblink>. This used cellular automata as a model to explain how simple rules can generate complex results.</p>

</sec>
<sec>
<st>
Simplest</st>
<p>

The simplest nontrivial CA would be one-dimensional, with two possible states per cell, and a cell's neighbors defined to be the adjacent cells on either side of it.  A cell and its two neighbors form a neighborhood of 3 cells, so there are 2¬≥=8 possible patterns for a neighborhood.  There are then 28=256 possible rules.  These 256 CAs are generally referred to using <link xlink:type="simple" xlink:href="../330/4853330.xml">
Wolfram notation</link>, a standard naming convention invented by Wolfram.  The name of a CA is the decimal number which, in <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../686/238686.xml">
binary</link></instrumentality>
</artifact>
</system>
, gives the rule table, with the eight possible neighborhoods listed in reverse counting order.  For example, below are tables defining the "<link xlink:type="simple" xlink:href="../443/3796443.xml">
rule 30 CA</link>" and the "<link xlink:type="simple" xlink:href="../028/491028.xml">
rule 110 CA</link>" (in binary, 30 and 110 are written 11110 and 1101110, respectively) and graphical representations of them starting from a 1 in the center of each image: </p>

<p>

<image width="150px" src="CA_rule30s.png">
<caption>

CA rule30s.png
</caption>
</image>

<b>Rule 30 cellular automaton</b></p>
<p>

<table border="1">
<row>
<col>
current pattern</col>
<col>
111</col>
<col>
110</col>
<col>
101</col>
<col>
100</col>
<col>
011</col>
<col>
010</col>
<col>
001</col>
<col>
000</col>
</row>
<row>
<col>
new state for center cell</col>
<col align="center">
0</col>
<col align="center">
0</col>
<col align="center">
0</col>
<col align="center">
1</col>
<col align="center">
1</col>
<col align="center">
1</col>
<col align="center">
1</col>
<col align="center">
0</col>
</row>
</table>
</p>

<p>

<image width="150px" src="CA_rule110s.png">
<caption>

CA rule110s.png
</caption>
</image>

<b>Rule 110 cellular automaton</b></p>
<p>

<table border="1">
<row>
<col>
current pattern</col>
<col>
111</col>
<col>
110</col>
<col>
101</col>
<col>
100</col>
<col>
011</col>
<col>
010</col>
<col>
001</col>
<col>
000</col>
</row>
<row>
<col>
new state for center cell</col>
<col align="center">
0</col>
<col align="center">
1</col>
<col align="center">
1</col>
<col align="center">
0</col>
<col align="center">
1</col>
<col align="center">
1</col>
<col align="center">
1</col>
<col align="center">
0</col>
</row>
</table>
</p>


<p>

A table completely defines a CA rule.  For example, the rule 30 table says that if three adjacent cells in the CA currently have the pattern 100 (left cell is on, middle and right cells are off), then the middle cell will become 1 (on) on the next time step.  The rule 110 CA says the opposite for that particular case.</p>
<p>

A number of papers have analyzed and compared these 256 CAs, either individually or <weblink xlink:type="simple" xlink:href="http://alexwg.org/JCellAuto2007.pdf">
collectively</weblink>.  The rule 30 and rule 110 CAs are particularly interesting.  </p>
<p>

Rule 30 generates apparent randomness despite the lack of anything that could reasonably be considered random input. Wolfram proposed using its center column as a <link xlink:type="simple" xlink:href="../524/45524.xml">
pseudorandom number generator</link> (PRNG); it passes many standard tests for randomness, and Wolfram uses this rule in the Mathematica product for creating random integers. (In particular, in the 1990s a cryptography survey book claimed that rule 30 was equivalent to a <link xlink:type="simple" xlink:href="../992/58992.xml">
linear feedback shift register</link> (LFSR), but in fact the claim was about rule 90.) Although Rule 30 produces randomness on many input patterns, there are also an infinite number of input patterns that result in repeating patterns. The trivial example of such a pattern is the input pattern only consisting of zeros. A less trivial example, found by <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<mathematician wordnetid="110301261" confidence="0.8">
<link xlink:type="simple" xlink:href="../310/145310.xml">
Matthew Cook</link></mathematician>
</scientist>
</causal_agent>
</person>
</physical_entity>
, is any input pattern consisting of infinite repetitions of the pattern '00001000111000', with repetitions optionally being separated by six ones.</p>
<p>

Rule 110, like the Game of Life, exhibits what Wolfram calls <it>class IV</it> behavior, which is neither completely random nor completely repetitive. Localized structures appear and interact in various complicated-looking ways. In the course of the development of <it><link>
A New Kind of Science</link></it>, as a research assistant to Stephen Wolfram back in 1994, Matthew Cook proved that some of these structures were rich enough to support universality. This result is interesting because rule 110 is an extremely simple one-dimensional system, and one which is difficult to engineer to perform specific behavior.  This result therefore provides significant support for Wolfram's view that class IV systems are inherently likely to be universal. Cook presented his proof at a <institute wordnetid="108407330" confidence="0.8">
<association wordnetid="108049401" confidence="0.8">
<link xlink:type="simple" xlink:href="../751/511751.xml">
Santa Fe Institute</link></association>
</institute>
 conference on Cellular Automata in 1998, but Wolfram blocked the proof from being included in the conference proceedings, as Wolfram did not want the proof to be announced before the publication of <it>A New Kind of Science</it>.  In 2004, Cook's proof was finally published in Wolfram's journal <weblink xlink:type="simple" xlink:href="http://www.complex-systems.com">
Complex Systems</weblink> (Vol. 15, No. 1), over ten years after Cook came up with it. Rule 110 has been the basis over which some of the smallest universal Turing machines have been built, inspired on the breakthrough concepts that the development of the proof of rule 110 universality produced.</p>

</sec>
<sec>
<st>
Reversible</st>
<p>

A CA is said to be <it>reversible</it> if for every current configuration of the CA there is exactly one past configuration (<link xlink:type="simple" xlink:href="../311/579311.xml">
preimage</link>). If one thinks of a CA as a function mapping configurations to configurations, reversibility implies that this function is <link xlink:type="simple" xlink:href="../942/3942.xml">
bijective</link>.</p>
<p>

For one dimensional CA there are known algorithms for finding <link xlink:type="simple" xlink:href="../311/579311.xml">
preimage</link>s, and any 1D rule can be proved either reversible or irreversible. For CA of two or more dimensions it has been proved that the reversibility is <link xlink:type="simple" xlink:href="../795/54795.xml">
undecidable</link> for arbitrary rules. The proof by <link xlink:type="simple" xlink:href="../366/5009366.xml">
Jarkko Kari</link> is related to the tiling problem by <link xlink:type="simple" xlink:href="../798/65798.xml">
Wang tile</link>s.</p>
<p>

Reversible CA are often used to simulate such physical phenomena as gas and fluid dynamics, since they obey the laws of <link xlink:type="simple" xlink:href="../952/29952.xml">
thermodynamics</link>. Such CA have rules specially constructed to be reversible. Such systems have been studied by <link xlink:type="simple" xlink:href="../067/1600067.xml">
Tommaso Toffoli</link>, Norman Margolus and others.</p>
<p>

For finite CAs that are not reversible, there must exist patterns for which there are no previous states. These patterns are called <it><structure wordnetid="105726345" confidence="0.8">
<form wordnetid="105930736" confidence="0.8">
<link xlink:type="simple" xlink:href="../206/1144206.xml">
Garden of Eden pattern</link></form>
</structure>
s</it>. In other words, no pattern exists which will develop into a Garden of Eden pattern.</p>
<p>

Several techniques can be used to explicitly construct reversible CA with known inverses. Two common ones are the <link xlink:type="simple" xlink:href="../485/2399485.xml">
second order technique</link> and the <link xlink:type="simple" xlink:href="../633/2399633.xml">
partitioning technique</link>, both of which involve modifying the definition of a CA in some way. Although such automata do not strictly satisfy the definition given above, it can be shown that they can be emulated by conventional CAs with sufficiently large neighborhoods and numbers of states, and can therefore be considered a subset of conventional CA.</p>
<p>

Another technique due to K. Morita and M. Harao<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref> consists in partitioning each cell into a finite number of parts, each part being devoted to some neighbor. The evolution proceeds by exchanging the corresponding parts between neighbors and  then applying on each cell a purely local transformation <math>F</math> depending only on the state of the cell (and not on the states of its neighbors). With such a construction scheme, the cellular automaton is guarantied to be reversible if the local transformation <math>F</math> is itself a <link xlink:type="simple" xlink:href="../942/3942.xml">
bijection</link>.</p>

</sec>
<sec>
<st>
Totalistic</st>
<p>

A special class of CAs are <it>totalistic</it> CAs. The state of each cell in a totalistic CA is represented by a number (usually an integer value drawn from a finite set), and the value of a cell at time <it>t</it> depends only on the <it>sum</it> of the values of the cells in its neighborhood (possibly including the cell itself) at time <it>t</it>&amp;minus;1.  If the state of the cell at time <it>t</it> does depend on its own state at time <it>t</it>&amp;minus;1 then the CA is properly called <it>outer totalistic</it>, although the distinction is not always made.  <idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<rule wordnetid="105846054" confidence="0.8">
<link xlink:type="simple" xlink:href="../035/37035.xml">
Conway's Game of Life</link></rule>
</concept>
</idea>
 is an example of an outer totalistic CA with cell values 0 and 1.</p>
<p>

A notation exists to describe rulesets of two-state totalistic CAs consisting of an initial indicating the neighbourhood of each cell and sums following the letters S (for survival) and B (for birth) for which those changes occur. In this notation Conway's Game of Life is M:S23/B3. This notation has been extended for non-totalistic CAs, where a letter or letters follow each sum indicating what patterns of neighbours cause survival or birth events.</p>

</sec>
<sec>
<st>
 Evolving cellular automata using genetic algorithms  </st>

<p>

Recently there has been a keen interest in building decentralized systems, be it <link>
sensor networks</link> or more sophisticated micro level structures designed at network level and aimed at decentralized information processing. The idea of emergent computation came from the need of using distributed system to do information processing at the global level<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%222%22])">2</ref>. Although, it is still an area in infancy but some people have started taking the idea seriously. <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<link xlink:type="simple" xlink:href="../681/4559681.xml">
Melanie Mitchell</link></scientist>
</causal_agent>
</person>
</physical_entity>
 who is the Professor of computer science at <university wordnetid="108286163" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../577/225577.xml">
Portland State University</link></university>
 and also the <institute wordnetid="108407330" confidence="0.8">
<association wordnetid="108049401" confidence="0.8">
<link xlink:type="simple" xlink:href="../751/511751.xml">
Santa Fe Institute</link></association>
</institute>
 [External professor]<weblink xlink:type="simple" xlink:href="http://www.santafe.edu/research/topics-information-processing-computation.php#4">
http://www.santafe.edu/research/topics-information-processing-computation.php#4</weblink> has been working on the idea of using self evolving cellular arrays to study emergent computation and distributed information processing<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%222%22])">2</ref>. Mitchell and colleagues at SFI are working on evolutionary computation to program cellular arrays for performing computations<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%223%22])">3</ref>. Computation in decentralized systems is very different from classical systems where the information is processed at some central location depending on the system‚Äôs state. In decentralized system, the information processing occurs in form of global and local pattern dynamics.      </p>
<p>

The inspiration for such an approach comes from complex natural systems like [insect colonies]<weblink xlink:type="simple" xlink:href="http://en.wikipedia.org/wiki/Social_insects">
http://en.wikipedia.org/wiki/Social_insects</weblink>, <link xlink:type="simple" xlink:href="../944/21944.xml">
nervous system</link> and <link xlink:type="simple" xlink:href="../262/692262.xml">
economic systems</link><ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%223%22])">3</ref>. The focus of the research is to know that how computation occurs in an evolving decentralized system. In order to model some of the features of these systems and to see how they give rise to emergent computation, Mitchell and collaborators at the SFI have applied <link xlink:type="simple" xlink:href="../254/40254.xml">
Genetic Algorithms</link> to evolve patterns in <link xlink:type="simple" xlink:href="../342/54342.xml">
cellular automata</link>. In their results they were able to show that the GA discovered rules that gave rise to sophisticated emergent computational strategies<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%224%22])">4</ref>. Mitchell‚Äôs group used a single dimensional binary (each cell can have 2 states) array where each cell has 2 neighbors. The array can be thought of as a circle where the first and last cells in the array are neighbors to each other. The evolution of the array was tracked through the number of ones and zeros after each iteration. The results were plotted in form of space time diagrams which showed clearly that how the network evolved and what sort of emergent computation was visible. One thing in which the researchers were interested was to know the competing regions with regards to the density of ones or zeros.        </p>
<p>

The beauty of complex systems occurring in nature is that actions of simple components with local information and communication give rise to coordination global information processing. Although, it is not yet known that how such systems give rise to computation over global scale but models of the form of <link xlink:type="simple" xlink:href="../342/54342.xml">
cellular automata</link> may uncover a lot of hidden features of such systems. The motivation for such an approach comes from the need of understanding natural systems and also to engineer decentralized artificial systems which can give rise to emergent computation.    </p>
<p>

Mitchell‚Äôs group showed three levels of information processing occurring during iterations in evolving cellular automata. The first type was the storage and transmission of information due to particles (cell) interactions. The second level comprised of the geometric subroutines that implemented intermediate-scale computations for example the size competition between regions of low and high density. The third level is the global computation over entire lattices (emergent computation at the global scale)<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%224%22])">4</ref>. </p>
<p>

The type of results produced by Mitchell‚Äôs group is interesting in the sense that a very simple single dimensional array of cellular automata produced results showing coordination over global scale which fits to the idea of emergent computation.      </p>
<p>

Future work in the area may include more sophisticated models using cellular automata of higher dimensions which can be used to model complex natural systems. Apart from emergent computation, various other aspects of complex natural systems are also studied using cellular automata which include communication and interaction in [insect societies]<weblink xlink:type="simple" xlink:href="http://en.wikipedia.org/wiki/Social_insects">
http://en.wikipedia.org/wiki/Social_insects</weblink>, <link xlink:type="simple" xlink:href="../238/106238.xml">
cognition</link> and other naturally occurring systems.</p>

</sec>
<sec>
<st>
Cryptography use</st>
<p>

<idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<rule wordnetid="105846054" confidence="0.8">
<link xlink:type="simple" xlink:href="../443/3796443.xml">
Rule 30</link></rule>
</concept>
</idea>
 was originally suggested as a possible <link xlink:type="simple" xlink:href="../594/4594.xml">
Block cipher</link> for use in <link xlink:type="simple" xlink:href="../432/18934432.xml">
cryptography</link> (See <link>
CA-1.1</link>). </p>
<p>

Cellular automata have been proposed for <link>
public key cryptography</link>.  The <link xlink:type="simple" xlink:href="../890/363890.xml">
one way function</link> is the evolution of a finite CA whose inverse is believed to be hard to find.  Given the rule, anyone can easily calculate future states, but it appears to be very difficult to calculate previous states.  However, the designer of the rule can create it in such a way as to be able to easily invert it.  Therefore, it is apparently a <link xlink:type="simple" xlink:href="../753/206753.xml">
trapdoor function</link>, and can be used as a public-key cryptosystem.  The security of such systems is not currently known.</p>

</sec>
<sec>
<st>
Related automata</st>

<p>

There are many possible generalizations of the CA concept.</p>
<p>

One way is by using something other than a rectangular (cubic, <it>etc.</it>) grid.  For example, if a plane is <link xlink:type="simple" xlink:href="../858/2863858.xml">
tiled with equilateral triangles</link>, those triangles could be used as cells.</p>
<p>

Also, rules can be probabilistic rather than deterministic.  A probabilistic rule gives, for each pattern at time <it>t</it>, the probabilities that the central cell will transition to each possible state at time <it>t</it>+1.  Sometimes a simpler rule is used; for example: "The rule is the Game of Life, but on each time step there is a 0.001% probability that each cell will transition to the opposite color."</p>
<p>

The neighborhood or rules could change over time or space. For example, initially the new state of a cell could be determined by the horizontally adjacent cells, but for the next generation the vertical cells would be used.</p>
<p>

The grid can be finite, so that patterns can "fall off" the edge of the universe.</p>
<p>

In CA, the new state of a cell is not affected by the new state of other cells. This could be changed so that, for instance, a 2 by 2 block of cells can be determined by itself and the cells adjacent to itself.</p>
<p>

There are <it><link xlink:type="simple" xlink:href="../722/1373722.xml">
continuous automata</link></it>. These are like totalistic CA, but instead of the rule and states being discrete (<it>e.g.</it> a table, using states {0,1,2}), continuous functions are used, and the states become continuous (usually values in <link xlink:type="simple" xlink:href="../324/49324.xml">
[0,1]</link>). The state of a location is a finite number of real numbers. Certain CA can yield diffusion in liquid patterns in this way.</p>
<p>

<link xlink:type="simple" xlink:href="../605/7555605.xml">
Continuous spatial automata</link> have a continuum of locations. The state of a location is a finite number of real numbers. Time is also continuous, and the state evolves according to differential equations.  One important example is <link xlink:type="simple" xlink:href="../379/8635379.xml">
reaction-diffusion</link> textures, differential equations proposed by <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../208/1208.xml">
Alan Turing</link></scientist>
</person>
 to explain how chemical reactions could create the stripes on <link xlink:type="simple" xlink:href="../460/34460.xml">
zebra</link>s and spots on leopards.  When these are approximated by CA, such CAs often yield similar patterns. MacLennan <weblink xlink:type="simple" xlink:href="http://www.cs.utk.edu/~mclennan/contin-comp.html">
http://www.cs.utk.edu/~mclennan/contin-comp.html</weblink> considers continuous spatial automata as a model of computation.</p>
<p>

There are known examples of continuous spatial automata which exhibit propagating phenomena analogous to gliders in the Game of Life.</p>

</sec>
<sec>
<st>
Natural biotic types</st>
<p>

<image location="left" width="250px" src="Textile_cone.JPG" type="thumb">
<caption>

<it>Conus textile</it> exhibits a cellular automaton pattern on its shell
</caption>
</image>

Some living things use naturally occurring cellular automata in their functioning.</p>
<p>

Patterns of some <link xlink:type="simple" xlink:href="../849/80849.xml">
seashell</link>s, like the ones in <it><animal wordnetid="100015388" confidence="0.8">
<link xlink:type="simple" xlink:href="../041/194041.xml">
Conus</link></animal>
</it> and <it><link>
Cymbiola</link></it> genus, are generated by natural CA. The <link xlink:type="simple" xlink:href="../598/49598.xml">
pigment</link> cells reside in a narrow band along the shell's lip. Each cell <link xlink:type="simple" xlink:href="../001/534001.xml">
secretes</link> pigments according to the activating and inhibiting activity of its neighbour pigment cells, obeying a natural version of a mathematical rule. The cell band leaves the colored pattern on the shell as it grows slowly. For example, the widespread species <it><link xlink:type="simple" xlink:href="../558/15304558.xml">
Conus textile</link></it> bears a pattern resembling the Rule 30 CA described above.</p>
<p>

Plants regulate their intake and loss of gases via a CA mechanism. Each <link xlink:type="simple" xlink:href="../746/85746.xml">
stoma</link> on the leaf acts as a cell.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%225%22])">5</ref></p>
<p>

<link>
Neural networks</link> can be used as cellular automata, too. The complex moving wave patterns on the skin of <link xlink:type="simple" xlink:href="../726/42726.xml">
cephalopod</link>s are a good display of corresponding activation patterns in the animals' brain.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%226%22])">6</ref></p>


</sec>
<sec>
<st>
Chemical types</st>
<p>

The <link xlink:type="simple" xlink:href="../262/186262.xml">
Belousov-Zhabotinsky reaction</link> is a spatio-temporal chemical oscillator which can be simulated by means of a cellular automaton. In the 1950s <link>
A. M. Zhabotinsky</link> (extending the work of <link xlink:type="simple" xlink:href="../422/334422.xml">
B. P. Belousov</link>) discovered that when a thin, homogenous layer of a mixture of malonic acid, acidified bromate and a ceric salt were mixed together and left undisturbed, fascinating geometric patterns such as concentric circles and spirals propagate across the medium.  In the "Computer Recreations" section of the August 1988 issue of <periodical wordnetid="106593296" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../507/29507.xml">
Scientific American</link></periodical>
 Professor <link xlink:type="simple" xlink:href="../840/256840.xml">
A. K. Dewdney</link> presented a cellular automaton whose behavior closely resembles the Belousov-Zhabotinsky reaction. Whether the Belousov-Zhabotinsky reaction actually occurs as the result of a cellular automaton at the molecular level is not yet known. So far, no naturally occurring chemical cellular automata have been observed. All such reactions are done in laboratory settings.</p>

</sec>
<sec>
<st>
Computer processors</st>
<p>

CA processors are a physical, not <link xlink:type="simple" xlink:href="../309/5309.xml">
software</link> only, implementation of CA concepts, which can process information computationally. Processing elements are arranged in a regular grid of identical cells. The grid is usually a square tiling, or <link xlink:type="simple" xlink:href="../671/321671.xml">
tessellation</link>, of two or three dimensions; other tilings are possible, but not yet used. Cell states are determined only by interactions with the small number of adjoining cells. Cells interact, communicate, directly only with adjoining, adjacent, neighbor cells. No means exists to communicate directly with cells farther away. Cell interaction can be via electric charge, magnetism, vibration (<link xlink:type="simple" xlink:href="../754/85754.xml">
phonons</link> at quantum scales), or any other physically useful means. This can be done in several ways so no wires are needed between any elements.</p>
<p>

This is very unlike processors used in most computers today, <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<model wordnetid="110324560" confidence="0.8">
<assistant wordnetid="109815790" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../091/478091.xml">
von Neumann designs</link></causal_agent>
</worker>
</assistant>
</model>
</person>
</physical_entity>
, which are divided into sections with elements that can communicate with distant elements, over wires.</p>

</sec>
<sec>
<st>
Error correction coding</st>
<p>

CA have been applied to design error correction codes in the paper "Design of CAECC - Cellular Automata Based Error Correcting Code", by   	
D. Roy Chowdhury, S. Basu , I. Sen Gupta , P. Pal Chaudhuri. The paper defines a new scheme of building SEC-DED codes using CA, and 
also reports a fast hardware decoder for the code.</p>

</sec>
<sec>
<st>
See also</st>

<ss1>
<st>
Specific CA rules</st>

<p>

<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../225/1977225.xml">
Codd cellular automata</link></entry>
<entry level="1" type="bullet">

 <idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<rule wordnetid="105846054" confidence="0.8">
<link xlink:type="simple" xlink:href="../035/37035.xml">
Conway's Game of Life</link></rule>
</concept>
</idea>
</entry>
<entry level="1" type="bullet">

 <physical_entity wordnetid="100001930" confidence="0.8">
<automaton wordnetid="109825519" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<anomaly wordnetid="109606527" confidence="0.8">
<link xlink:type="simple" xlink:href="../481/852481.xml">
Life-like cellular automata</link></anomaly>
</causal_agent>
</person>
</automaton>
</physical_entity>
</entry>
<entry level="1" type="bullet">

 <idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<rule wordnetid="105846054" confidence="0.8">
<link xlink:type="simple" xlink:href="../582/5496582.xml">
Cyclic cellular automaton</link></rule>
</concept>
</idea>
</entry>
<entry level="1" type="bullet">

 <idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<rule wordnetid="105846054" confidence="0.8">
<link xlink:type="simple" xlink:href="../016/105016.xml">
Langton's ant</link></rule>
</concept>
</idea>
</entry>
<entry level="1" type="bullet">

 <idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<rule wordnetid="105846054" confidence="0.8">
<link xlink:type="simple" xlink:href="../261/2082261.xml">
Wireworld</link></rule>
</concept>
</idea>
</entry>
<entry level="1" type="bullet">

 <idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<rule wordnetid="105846054" confidence="0.8">
<link xlink:type="simple" xlink:href="../443/3796443.xml">
Rule 30</link></rule>
</concept>
</idea>
</entry>
<entry level="1" type="bullet">

 <idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<rule wordnetid="105846054" confidence="0.8">
<link xlink:type="simple" xlink:href="../028/491028.xml">
Rule 110</link></rule>
</concept>
</idea>
</entry>
<entry level="1" type="bullet">

 <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<model wordnetid="110324560" confidence="0.8">
<idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<assistant wordnetid="109815790" confidence="0.8">
<rule wordnetid="105846054" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../933/11063933.xml">
Rule 184</link></causal_agent>
</worker>
</rule>
</assistant>
</concept>
</idea>
</model>
</person>
</physical_entity>
</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../009/2234009.xml">
von Neumann cellular automata</link></entry>
</list>
</p>


</ss1>
<ss1>
<st>
Self-replication in cellular automata</st>
<p>

<list>
<entry level="1" type="bullet">

 <link>
Byl's loop</link></entry>
<entry level="1" type="bullet">

 <physical_entity wordnetid="100001930" confidence="0.8">
<automaton wordnetid="109825519" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<anomaly wordnetid="109606527" confidence="0.8">
<link xlink:type="simple" xlink:href="../439/7035439.xml">
Chou-Reggia loop</link></anomaly>
</causal_agent>
</person>
</automaton>
</physical_entity>
</entry>
<entry level="1" type="bullet">

 <idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<rule wordnetid="105846054" confidence="0.8">
<link xlink:type="simple" xlink:href="../225/1977225.xml">
Codd's cellular automaton</link></rule>
</concept>
</idea>
</entry>
<entry level="1" type="bullet">

 <physical_entity wordnetid="100001930" confidence="0.8">
<automaton wordnetid="109825519" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<anomaly wordnetid="109606527" confidence="0.8">
<link xlink:type="simple" xlink:href="../101/6998101.xml">
Langton's loops</link></anomaly>
</causal_agent>
</person>
</automaton>
</physical_entity>
</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../242/6998242.xml">
SDSR loop</link></entry>
<entry level="1" type="bullet">

 von Neumann's <link xlink:type="simple" xlink:href="../424/3851424.xml">
Universal constructor</link></entry>
<entry level="1" type="bullet">

 <physical_entity wordnetid="100001930" confidence="0.8">
<automaton wordnetid="109825519" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<anomaly wordnetid="109606527" confidence="0.8">
<link xlink:type="simple" xlink:href="../595/9064595.xml">
Asynchronous cellular automaton</link></anomaly>
</causal_agent>
</person>
</automaton>
</physical_entity>
</entry>
</list>
</p>

</ss1>
<ss1>
<st>
Problems solved by cellular automata</st>
<p>

<list>
<entry level="1" type="bullet">

 <physical_entity wordnetid="100001930" confidence="0.8">
<automaton wordnetid="109825519" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<anomaly wordnetid="109606527" confidence="0.8">
<link xlink:type="simple" xlink:href="../995/10388995.xml">
Majority problem</link></anomaly>
</causal_agent>
</person>
</automaton>
</physical_entity>
</entry>
<entry level="1" type="bullet">

 <physical_entity wordnetid="100001930" confidence="0.8">
<automaton wordnetid="109825519" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<anomaly wordnetid="109606527" confidence="0.8">
<link xlink:type="simple" xlink:href="../677/7247677.xml">
Firing squad synchronization problem</link></anomaly>
</causal_agent>
</person>
</automaton>
</physical_entity>
</entry>
</list>
</p>

</ss1>
<ss1>
<st>
Related topics</st>
<p>

<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../356/103356.xml">
Automata theory</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../076/523076.xml">
Excitable medium</link></entry>
<entry level="1" type="bullet">

 <event wordnetid="100029378" confidence="0.8">
<social_event wordnetid="107288639" confidence="0.8">
<contest wordnetid="107456188" confidence="0.8">
<game wordnetid="100456199" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<link xlink:type="simple" xlink:href="../997/1771997.xml">
The Ooze</link></psychological_feature>
</game>
</contest>
</social_event>
</event>
</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../691/9072691.xml">
Spatial Decision Support System</link> - Mentions cellular automata based models of land use dynamics which allow urban and regional planners to test intervention strategies.</entry>
<entry level="1" type="bullet">

 <it><work wordnetid="104599396" confidence="0.8">
<product wordnetid="104007894" confidence="0.8">
<creation wordnetid="103129123" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<book wordnetid="106410904" confidence="0.8">
<publication wordnetid="106589574" confidence="0.8">
<link xlink:type="simple" xlink:href="../070/93070.xml">
A New Kind of Science</link></publication>
</book>
</artifact>
</creation>
</product>
</work>
</it>, book by <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../469/52469.xml">
Stephen Wolfram</link></scientist>
</person>
</entry>
<entry level="1" type="bullet">

 <link>
Evolving Cellular automata using Genetic Algorithms</link></entry>
</list>
</p>

</ss1>
</sec>
<sec>
<st>
Reference notes</st>

<p>

<reflist>
<entry id="1">
K. Morita and M. Harao. Computation universality of 1 dimensional reversible (injective) cellular automata. Transactions Institute of Electronics, Information and Communication Engineers, E, 72:758¬≠762, 1989.</entry>
<entry id="2">
The Evolution of Emergent Computation, James P. Crutchfield and Melanie Mitchell (SFI Technical Report 94-03-012)</entry>
<entry id="3">
The Evolutionary Design of Collective Computation in Cellular Automata, James P. Crutchfeld, Melanie Mitchell, Rajarshi Das (In J. P. Crutch¬Øeld and P. K. Schuster (editors), Evolutionary Dynamics|Exploring the Interplay of Selection, Neutrality, Accident, and Function. New York: Oxford University Press, 2002.)</entry>
<entry id="4">
Evolving Cellular Automata with Genetic Algorithms: A Review of Recent Work, Melanie Mitchell, James P. Crutchfeld, Rajarshi Das (In Proceedings of the First International Conference on Evolutionary Computation and Its Applications (EvCA'96). Moscow, Russia: Russian Academy of Sciences, 1996.)</entry>
<entry id="5">
Peak, West, Messinger, Mott (2004) "<weblink xlink:type="simple" xlink:href="http://www.pnas.org/cgi/content/abstract/101/4/918">
Evidence for complex, collective dynamics and emergent, distributed computation in plants</weblink>". <it>Proceedings of the National Institute of Science of the USA</it> 101 (4), 918-922
</entry>
<entry id="6">
http://gilly.stanford.edu/past_research_files/APackardneuralnet.pdf</entry>
</reflist>
</p>

</sec>
<sec>
<st>
References</st>

<p>

<list>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.wolframscience.com/reference/notes/876b">
"History of Cellular Automata"</weblink> from <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../469/52469.xml">
Stephen Wolfram</link></scientist>
</person>
's <it>A New Kind of Science</it> </entry>
<entry level="1" type="bullet">

Cellular Automata: A Discrete View of the World, Joel L. Schiff, Wiley &amp; Sons, Inc., ISBN 047016879X (0-470-16879-X)</entry>
<entry level="1" type="bullet">

Chopard, B and Droz, M, 1998, <it>Cellular Automata Modeling of Physical Systems</it>, Cambridge University Press, ISBN 0-521-46168-5</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://cafaq.com/">
Cellular automaton FAQ</weblink> from the newsgroup comp.theory.cell-automata</entry>
<entry level="1" type="bullet">

A. D. Wissner-Gross. 2007. <it><weblink xlink:type="simple" xlink:href="http://alexwg.org/JCellAuto2007.pdf">
Pattern formation without favored local interactions</weblink></it>, arXiv:0707.3657.</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://cell-auto.com/neighbourhood/index.html">
Neighbourhood survey</weblink> includes discussion on triangular grids, and larger neighbourhood CAs.</entry>
<entry level="1" type="bullet">

 von Neumann, John, 1966, <it>The Theory of Self-reproducing Automata</it>, A. Burks, ed., Univ. of Illinois Press, Urbana, IL. </entry>
<entry level="1" type="bullet">

 Wolfram, Stephen, 1985, <it><weblink xlink:type="simple" xlink:href="http://www.stephenwolfram.com/publications/articles/ca/85-cryptography/1/text.html">
Cryptography with Cellular Automata</weblink></it>, CRYPTO'85. </entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://cscs.umich.edu/~crshalizi/notebooks/cellular-automata.html">
Cosma Shalizi's Cellular Automata Notebook</weblink> contains an extensive list of academic and professional reference material.</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.stephenwolfram.com/publications/articles/ca/">
Wolfram's papers on CAs</weblink></entry>
<entry level="1" type="bullet">

 A.M. Turing. 1952. The Chemical Basis of Morphogenesis. <it>Phil. Trans. Royal Society</it>, vol. B237, pp. 37 - 72. (proposes reaction-diffusion, a type of continuous automaton).</entry>
<entry level="1" type="bullet">

 Jim Giles. 2002. What kind of science is this? <it>Nature</it> 417, 216 - 218. (discusses the court order that suppressed publication of the rule 110 proof).</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.idsia.ch/~juergen/digitalphysics.html">
Zuse¬¥s publications on CA-based physics (1967, 1969, 1970)</weblink>, with comments by <link>
Juergen Schmidhuber</link></entry>
<entry level="1" type="bullet">

 Frish U., <physical_entity wordnetid="100001930" confidence="0.8">
<physicist wordnetid="110428004" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<theorist wordnetid="110706812" confidence="0.8">
<intellectual wordnetid="109621545" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<link xlink:type="simple" xlink:href="../701/5380701.xml">
Hasslacher B.</link></scientist>
</causal_agent>
</intellectual>
</theorist>
</person>
</physicist>
</physical_entity>
, and Pommeau Y. Lattice gas method for partial differential equations. Phys. Rev. Lett., 56(1505), 1986.</entry>
<entry level="1" type="bullet">

 Evolving Cellular Automata with Genetic Algorithms: A Review of Recent Work, Melanie Mitchell, James P. Crutchfeld, Rajarshi Das (In Proceedings of the First International Conference on Evolutionary Computation and Its Applications (EvCA'96). Moscow, Russia: Russian Academy of Sciences, 1996.)</entry>
<entry level="1" type="bullet">

 The Evolutionary Design of Collective Computation in Cellular Automata, James P. Crutchfeld, Melanie Mitchell, Rajarshi Das (In J. P. Crutch¬Øeld and P. K. Schuster (editors), Evolutionary Dynamics|Exploring the Interplay of Selection, Neutrality, Accident, and Function. New York: Oxford University Press, 2002.)</entry>
<entry level="1" type="bullet">

The Evolution of Emergent Computation, James P. Crutchfield and Melanie Mitchell (SFI Technical Report 94-03-012)</entry>
</list>
</p>


</sec>
<sec>
<st>
External links</st>


<p>

<list>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.mirwoj.opus.chelm.pl/ca/">
Mirek's Cellebration</weblink> - Home to free MCell and MJCell cellular automata explorer software and rule libraries. The software supports a large number of 1D and 2D rules. The site provides both an extensive rules lexicon and many image galleries loaded with examples of rules. MCell is a Windows application, while MJCell is a Java applet. Source code is available.</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.collidoscope.com/modernca/">
Modern Cellular Automata</weblink> - Easy to use interactive exhibits of live color 2D cellular automata, powered by Java applet. Included are exhibits of traditional, reversible, hexagonal, multiple step, fractal generating, and pattern generating rules. Thousands of rules are provided for viewing. Free software is available. </entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://necsi.org/postdocs/sayama/sdsr/java/">
Self-replication loops in Cellular Space</weblink> - Java applet powered exhibits of self replication loops.</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://vlab.infotech.monash.edu.au/simulations/cellular-automata/">
A collection of over 10 different cellular automata applets</weblink> (in Monash University's Virtual Lab)</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.cs.sjsu.edu/faculty/rucker/capow/download.html">
CAPOW</weblink> developed by Rudy Rucker</entry>
</list>
</p>


</sec>
</bdy>
</automaton>
</article>
