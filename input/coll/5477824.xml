<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 21:52:30[mciao0827] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>Cobweb (clustering)</title>
<id>5477824</id>
<revision>
<id>226891255</id>
<timestamp>2008-07-20T23:29:17Z</timestamp>
<contributor>
<username>Redirect fixer</username>
<id>7523687</id>
</contributor>
</revision>
<categories>
<category>Artificial intelligence stubs</category>
</categories>
</header>
<bdy>

<b>COBWEB</b> is an incremental system for hierarchical <know-how wordnetid="105616786" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../740/6979740.xml">
conceptual clustering</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</method>
</rule>
</event>
</know-how>
.<p>

COBWEB incrementally organizes observations into a <link xlink:type="simple" xlink:href="../602/232602.xml">
classification tree</link>. Each node in a classification tree represents a class (concept) and is labeled by a probabilistic concept that summarizes the attribute-value distributions of objects classified under the node. This classification tree can be used to predict missing attributes or the class of a new object.</p>
<p>

There are four basic operations COBWEB employs in building the classification tree. Which operation is selected depends on the <link xlink:type="simple" xlink:href="../665/8964665.xml">
category utility</link> of the classification achieved by applying it. The operations are:</p>
<p>

<list>
<entry level="1" type="bullet">

 Merging Two Nodes  Merging two nodes means replacing them by a node whose children is the union of the original nodes' sets of children and which summarizes the attribute-value distributions of all objects classified under them.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 Splitting a node A node is split by replacing it with its children.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 Inserting a new node A node is created corresponding to the object being inserted into the tree.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 Passing an object down the hierarchy Effectively calling the COBWEB algorithm on the object and the subtree rooted in the node.</entry>
</list>
</p>

<sec>
<st>
The COBWEB Algorithm</st>



<p>

<b>Algorithm</b> COBWEB
<it>COBWEB</it>(<it>root</it>, <it>record</it>):
Input: A COBWEB node <it>root</it>, an instance to insert <it>record</it>
<it>if</it> <it>root</it> has no children <it>then</it>
<it>children</it> := {<it>copy</it>(<it>root</it>)}
<it>newcategory</it>(<it>record</it>) \\ adds child with record’s feature values.
<it>insert</it>(<it>record</it>, <it>root</it>) \\ update root’s statistics
<it>else</it>
<it>insert</it>(<it>record</it>, <it>root</it>)
<it>for</it> <it>child</it> <it>in</it> <it>root</it>’s children <it>do</it>
calculate Category Utility for <it>insert</it>(<it>record</it>, <it>child</it>),
set <it>best1</it>, <it>best2</it> children w. best CU.
<it>end for</it>
<it>if</it> <it>newcategory</it>(<it>record</it>) yields best CU then
<it>newcategory</it>(<it>record</it>)
<it>else</it> <it>if</it> <it>merge</it>(<it>best1</it>, <it>best2</it>) yields best CU then
<it>merge</it>(<it>best1</it>, <it>best2</it>)
<it>COBWEB</it>(<it>root</it>, <it>record</it>)
<it>else if</it> <it>split</it>(<it>best1</it>) yields best CU then
<it>split</it>(<it>best1</it>)
<it>COBWEB</it>(<it>root</it>, <it>record</it>)
<it>else</it>
<it>COBWEB</it>(<it>best1</it>, <it>record</it>)
<it>end if</it>
<it>end</it></p>
<p>

<list>
<entry level="1" type="bullet">

"&amp;larr;" is a loose shorthand for "changes to".  For instance, "<it>largest</it> &amp;larr; <it>item</it>" means that the value of <it>largest</it> changes to the value of <it>item</it>.</entry>
<entry level="1" type="bullet">

"<b>return</b>" terminates the algorithm and outputs the value that follows.</entry>
</list>
</p>





</sec>
<sec>
<st>
 References </st>
<p>

<list>
<entry level="1" type="bullet">

  <cite style="font-style:normal">Fisher, Douglas H.&#32;(July 1987). "Improving inference through conceptual clustering"&#32;in <it>AAAI Conference</it>.&#32;<it>Proceedings of the 1987 AAAI Conferences</it>: 461-465.</cite>&nbsp;</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 <cite style="font-style:normal">Fisher, Douglas H.&#32;(1987).&#32;"Knowledge acquisition via incremental conceptual clustering". <it>Machine Learning</it>&#32;<b>2</b>: 139–172. <document wordnetid="106470073" confidence="0.8">
<written_communication wordnetid="106349220" confidence="0.8">
<writing wordnetid="106362953" confidence="0.8">
<link xlink:type="simple" xlink:href="../994/422994.xml">
doi</link></writing>
</written_communication>
</document>
:<weblink xlink:type="simple" xlink:href="http://dx.doi.org/10.1007%2FBF00114265">
10.1007/BF00114265</weblink>.</cite>&nbsp;</entry>
</list>
</p>

</sec>
</bdy>
</article>
