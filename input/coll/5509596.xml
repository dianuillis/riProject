<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 21:47:28[mciao0825] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>EigenTrust</title>
<id>5509596</id>
<revision>
<id>237297061</id>
<timestamp>2008-09-09T15:01:34Z</timestamp>
<contributor>
<username>Andypayne</username>
<id>1982778</id>
</contributor>
</revision>
<categories>
<category>Reputation management</category>
<category>Distributed computing</category>
</categories>
</header>
<bdy>

<b>EigenTrust</b> <link xlink:type="simple" xlink:href="../775/775.xml">
algorithm</link> is a <link xlink:type="simple" xlink:href="../351/993351.xml">
reputation management</link> algorithm for <link xlink:type="simple" xlink:href="../107/24107.xml">
peer-to-peer</link> networks, developed by <link xlink:type="simple" xlink:href="../319/7303319.xml">
Sep Kamvar</link>, Mario Schlosser, and <link>
Hector Garcia-Molina</link>. The algorithm provides each peer in the network a unique global trust value based on the peer's history of uploads and thus aims to reduce the number of inauthentic files in a <link xlink:type="simple" xlink:href="../797/18949797.xml">
P2P</link> network.
<sec>
<st>
Overview</st>
<p>

<link xlink:type="simple" xlink:href="../107/24107.xml">
Peer-to-peer</link> systems available today (like <message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<link xlink:type="simple" xlink:href="../856/11856.xml">
Gnutella</link></rule>
</direction>
</protocol>
</message>
) are open, often anonymous and lack accountability. Hence a user with malicious intent can introduce into the peer-to-peer network resources that may be inauthentic, corrupted or malicious (<link xlink:type="simple" xlink:href="../679/19167679.xml">
Virus</link>). This reflects poorly on the credibility of current peer-to-peer systems. A research team from <link>
Stanford</link> provides a reputation management system, where each peer in the system has a unique global trust value based on the peer's history of uploads. Any peer requesting resources will be able to access the trust value of a peer and avoid downloading files from untrusted peers.</p>

</sec>
<sec>
<st>
Algorithm</st>

<p>

The Eigentrust algorithm is based on the notion of transitive trust: If a peer <it>i</it> trusts any peer <it>j</it>, it would also trust the peers trusted by <it>j</it>. Each peer <it>i</it> calculates the local trust value <it>sij</it>  for all peers that have provided it with authentic or fake downloads based on the satisfactory or unsatisfactory transactions that it has had.</p>
<p>

<indent level="1">

<math>s_{ij} = \operatorname{sat}(i,j) - \operatorname{unsat}(i,j)</math>
</indent>

where sat (<it>i</it>, <it>j</it>) refers to the number of satisfactory responses that peer <it>i</it> has received from peer <it>j</it>,
and unsat(<it>i</it>,&nbsp;<it>j</it>) refers to the number of unsatisfactory responses that peer <it>i</it> has received from peer <it>j</it>.</p>
<p>

The local value is normalized, to prevent malicious peers from assigning arbitrarily high local trust values to colluding malicious peers and arbitrarily low local trust values to good peers. The normalized local trust value <it>cij</it> is then</p>
<p>

<indent level="1">

<math>c_{ij} = \frac{\max(s_{ij},0)}{\sum_{j} \max(s_{ij}, 0)} </math>
</indent>

The local trust values are aggregated at a central location or in a distributed manner to create a trust vector for the whole network. Based on the idea of transitive trust, a peer <it>i</it> would ask other peers it knows to report the trust value of a peer <it>k</it> and weigh responses of these peers by the trust peer <it>i</it> places in them.</p>
<p>

<indent level="1">

<math> t_{ik} = \sum_{j} c_{ij} c_{jk}  </math>
</indent>

If we assume that a user knew the <it>cij</it> values for the whole network in the form of a <link xlink:type="simple" xlink:href="../728/19008728.xml">
matrix</link> <it>C</it>, then trust vector <math>\bar t_{i}  </math> that defines the trust value for <math> t_{ik}  </math> is given by</p>
<p>

<indent level="1">

<math>\bar t_{i} = C^T\bar c_{i}.\, </math>
</indent>

In the equation shown above, if C is assumed to be aperiodic and strongly connected, powers of the matrix C will converge to a stable value at some point.</p>
<p>

<indent level="1">

<math>\bar t = (C^T)^x \bar c_{i}. \, </math>
</indent>

It seems that for a large value of <it>x</it>, the trust vector <math>\bar t_{i} </math> will converge to the same vector for every peer in the network. The vector <math>\bar t_{i} </math> is known as the left principal <link xlink:type="simple" xlink:href="../429/2161429.xml">
eigenvector</link> of the matrix <it>C</it>. We also note that since <math>\bar t_{i} </math> is same for all nodes in the network, it represents the global trust value.</p>
<p>

Based on the results above a simple centralized trust value computing algorithm can be written. Note that we assume that all the local trust values for the whole network are available and present in the matrix <it>C</it>. We also note that, if the equation shown above converges, we can replace the initial vector <math>\bar c_{i}</math> by a vector <math>\bar e</math> that is an m-vector representing uniform probability distribution over all m peers. The basic EigenTrust algorithm is shown below:</p>
<p>

<indent level="1">

<math>\bar t_{0} = \bar e ;</math>
</indent>

<indent level="1">

<b>repeat</b>
</indent>

<indent level="1">

<math>\bar t^{(k+1)} = C^T \bar t^{(k)} ;</math>
</indent>

<indent level="1">

<math>{\delta} = || t^{(k+1)} - t^{(k)} || ; </math>
</indent>

<indent level="1">

<b>until</b> <math>{\delta} &amp;lt; \mathrm{error} ; </math>
</indent>

</p>
</sec>
<sec>
<st>
 See also </st>

<p>

<list>
<entry level="1" type="bullet">

<physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<model wordnetid="110324560" confidence="0.8">
<assistant wordnetid="109815790" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../876/60876.xml">
Markov chain</link></causal_agent>
</worker>
</assistant>
</model>
</person>
</physical_entity>
</entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../429/2161429.xml">
Eigen</link></entry>
</list>
</p>

</sec>
<sec>
<st>
External links</st>

<p>

<list>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://citeseer.ist.psu.edu/kamvar03eigentrust.html">
S. D. Kamvar, M. T. Schlosser, and H. Garcia-Molina, The EigenTrust Algorithm for Reputation Management in P2P Networks, In Proceedings of the Twelfth International World Wide Web Conference, 2003.</weblink></entry>
</list>
</p>

</sec>
</bdy>
</article>
