<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 17:19:25[mciao0828] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<algorithm  confidence="0.9511911446218017" wordnetid="105847438">
<header>
<title>Lock-free and wait-free algorithms</title>
<id>554864</id>
<revision>
<id>239769520</id>
<timestamp>2008-09-20T11:32:15Z</timestamp>
<contributor>
<username>Salix alba</username>
<id>212526</id>
</contributor>
</revision>
<categories>
<category>Concurrency control</category>
<category>Concurrent algorithms</category>
<category>Wikipedia articles needing context</category>
<category>Wikipedia introduction cleanup</category>
<category>All articles to be merged</category>
<category>Articles to be merged since May 2008</category>
</categories>
</header>
<bdy>

<table class="metadata plainlinks ambox ">
<row>
<col>

ambox-move" style=""</col>
</row>
<row>
<col class="mbox-image"><p>

<image width="50px" src="Merge-arrow.svg">
<caption>

Merge arrow
</caption>
</image>
</p>
</col>
<col style="" class="mbox-text">
 It has been suggested that this article or section be  into . ()</col>
</row>
</table>

<p>

<table class="metadata plainlinks ambox ">
<row>
<col>

ambox-style" style=""</col>
</row>
<row>
<col class="mbox-image"><p>

<image width="40x40px" src="Ambox_style.png">
</image>
</p>
</col>
<col style="" class="mbox-text">
 The introduction to this article provides <b>insufficient context</b> for those unfamiliar with the subject.
Please help <weblink xlink:type="simple" xlink:href="http://localhost:18088/wiki/index.php?title=Lock-free_and_wait-free_algorithms&amp;action=edit">
improve the article</weblink> with a .</col>
</row>
</table>

</p>
<p>

In contrast to algorithms that protect access to shared data with locks, <b>lock-free and wait-free algorithms</b> are specially designed to allow multiple threads to read and write shared data concurrently without corrupting it.  "Lock-free" refers to the fact that a thread cannot lock up: every step it takes brings progress to the system. This means that no synchronization primitives such as <link xlink:type="simple" xlink:href="../827/36827.xml">
mutex</link>es or <link xlink:type="simple" xlink:href="../557/164557.xml">
semaphore</link>s can be involved, as a lock-holding thread can prevent global progress if it is switched out.  "Wait-free" refers to the fact that a thread can complete any operation in a finite number of steps, regardless of the actions of other threads.  All wait-free algorithms are lock-free, but the reverse is not necessarily true.  An intuitive way of understanding the difference between wait- and lock-free algorithms is that a thread executing an operation of a lock-free algorithm may not be impeded if another thread's execution is prematurely halted, whereas if the algorithm was wait-free, the first thread may not be impeded even if the second thread is aggressively interfering with the shared state.</p>
<p>

Lock-free algorithms are one kind of <link xlink:type="simple" xlink:href="../867/554867.xml">
non-blocking synchronization</link>.</p>

<sec>
<st>
Motivation</st>

<p>

The traditional approach to multi-threaded programming is to use <link xlink:type="simple" xlink:href="../593/244593.xml">
lock</link>s to synchronize access to shared resources.  Synchronization primitives such as mutexes, semaphores, and <link xlink:type="simple" xlink:href="../312/638312.xml">
critical section</link>s are all mechanisms by which a programmer can ensure that certain sections of code do not execute concurrently if doing so would corrupt shared memory structures.  If one thread attempts to acquire a lock that is already held by another thread, the thread will block until the lock is free.</p>
<p>

Blocking a thread is undesirable for many reasons.  An obvious reason is that while the thread is blocked, it cannot accomplish anything.  If the blocked thread is performing a high-priority or <link xlink:type="simple" xlink:href="../767/25767.xml">
real-time</link> task, it is highly undesirable to halt its progress.  Other problems are less obvious.  Certain interactions between locks can lead to error conditions such as <link xlink:type="simple" xlink:href="../181/105181.xml">
deadlock</link>, <link>
livelock</link>, and <link xlink:type="simple" xlink:href="../507/521507.xml">
priority inversion</link>.  Using locks also involves a trade-off between coarse-grained locking which can significantly reduce opportunities for <link xlink:type="simple" xlink:href="../162/145162.xml">
parallelism</link>, and fine-grained locking which requires more careful design and is more prone to bugs.</p>

</sec>
<sec>
<st>
The lock-free approach</st>

<p>

Writing a program that uses lock-free data structures is not a simple matter of merely rewriting the algorithms you would normally protect with a mutex to be lock-free.  Because lock-free algorithms are so difficult to write, researchers focus on writing lock-free versions of basic <link xlink:type="simple" xlink:href="../519/8519.xml">
data structure</link>s such as <link xlink:type="simple" xlink:href="../993/273993.xml">
stack</link>s, <link xlink:type="simple" xlink:href="../265/25265.xml">
queue</link>s, <link xlink:type="simple" xlink:href="../127/201127.xml">
sets</link>, and <link xlink:type="simple" xlink:href="../833/13833.xml">
hash table</link>s.  These allow programs to easily exchange data between threads asynchronously.</p>
<p>

For example, consider a banking program where each thread represents a virtual <link xlink:type="simple" xlink:href="../776/849776.xml">
teller</link>.  A lock-based approach to making a deposit could be to have one teller lock an account to make a deposit, so that two tellers don't try to deposit into the same account simultaneously.  To make the process lock-free, rather than designing a lock-free "deposit" algorithm you might have the teller submit a "<link xlink:type="simple" xlink:href="../862/4415862.xml">
deposit</link>" request asynchronously to a centralized thread that handled all deposits.</p>
<p>

The previous example is a little misleading.  There are formal definitions of the term "lock-free" which try to disallow anything that "looks" like a lock.       The idea is that even if a thread crashes (or gets held up by something like priority inversion), the rest of the processes can still carry on in some way.  Having a centralized thread would probably fail this definition (depending on how you define things, does a process that submits deposits that never get processed make progress?).  A common approach to satisfying the formal definition is recursive helping.  In the banking program example, a recursive helping approach would allow other threads to complete the deposit of a stopped or slow thread if it was getting in the way of their actions.  Recursive helping in a way emphasizes the fault-tolerance aspect of lock-freedom over the performance aspect.  </p>
<p>

While some might say that the formal definition does not really capture the right idea (or should have a different name), it is something that should be kept in mind when claiming that an algorithm is lock-free.</p>

</sec>
<sec>
<st>
Implementation</st>

<p>

With few exceptions (discussed later), lock-free and wait-free algorithms can only be implemented on hardware that supports special <link xlink:type="simple" xlink:href="../310/1204310.xml">
atomic primitive</link>s, such as <link xlink:type="simple" xlink:href="../224/632224.xml">
compare-and-swap</link> (often notated "CAS") or <idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<link xlink:type="simple" xlink:href="../985/2882985.xml">
Load-Link/Store-Conditional</link></concept>
</idea>
.
<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref></p>
<p>

&amp;lt;nowiki&amp;gt;
CAS(addr, old, new) = atomic
                         if *addr = old 
                            then *addr := new ; 
                                 return true
                         else return false
                         endif
                      endatomic
&amp;lt;/nowiki&amp;gt;</p>
<p>

The CAS takes three arguments: a memory address, an old value, and a new value.  If the address contains the old value, it is replaced with the new value, otherwise it is unchanged. Critically, the hardware guarantees that this "comparison and swap" operation is executed <it>atomically</it>.  The success of this operation is then reported back to the program.  This allows an algorithm to read a value from memory, modify it, and write it back only if no other thread modified it in the meantime.</p>
<p>

For example, consider a different implementation of the banking program where each thread represents a virtual teller. The teller reads the current value of the account (old value), adds an amount and uses CAS to attempt to update the account balance. If no other thread has modified the account balance in the intervening period, the CAS will succeed, and the account balance will be updated. However, if a concurrent modification has occurred, the CAS will fail, and the teller will retry the update (by first fetching the new account balance). Each teller will perform this CAS operation in a loop, retrying until they are successful. This algorithm is lock-free but not wait-free, since other threads may keep writing new values and make the failing teller try again indefinitely.</p>
<p>

This approach can be extended using a universal construction, due to Herlihy <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%222%22])">2</ref>, to any data structure. In this approach, the data structure essentially is updated in a purely functional way, then compare and swap is used to swing the pointer over to the new version of the data structure.  This approach is a mostly theoretical construct.</p>
<p>

There are few lock-free and wait-free algorithms that can be implemented without special atomic primitives. These exceptions include:
<list>
<entry level="1" type="bullet">

 single-reader single-writer ring buffer FIFO on a uniprocessor<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../371/284371.xml">
Read-copy-update</link> with a single writer and any number of readers. (The readers are lock-free and wait-free; the writer is usually lock-free and wait-free, until it needs to reclaim memory).</entry>
<entry level="1" type="bullet">

 <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../826/36826.xml">
Dekker's algorithm</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</instrumentality>
</artifact>
</system>
 for two threads is lock-free but not wait-free.</entry>
</list>
</p>

</sec>
<sec>
<st>
References</st>
<p>

<reflist>
<entry id="1">
<weblink xlink:type="simple" xlink:href="http://www.audiomulch.com/~rossb/code/lockfree/">
"Some notes on lock-free and wait-free algorithms"</weblink> by Ross Bencina]</entry>
<entry id="2">
<weblink xlink:type="simple" xlink:href="http://cs.brown.edu/people/mph/Herlihy91/p124-herlihy.pdf">
Wait-Free Synchronization</weblink></entry>
</reflist>
</p>

</sec>
<sec>
<st>
See also</st>
<p>

<list>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../841/15832841.xml">
ABA problem</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../356/217356.xml">
Concurrency control</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../181/105181.xml">
Deadlock</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../593/244593.xml">
Lock (software engineering)</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../216/728216.xml">
Memory barrier</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../827/36827.xml">
Mutual exclusion</link></entry>
<entry level="1" type="bullet">

<event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../867/554867.xml">
Non-blocking synchronization</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../566/2204566.xml">
Pre-emptive multitasking</link></entry>
<entry level="1" type="bullet">

<system wordnetid="104377057" confidence="0.8">
<invertebrate wordnetid="101905661" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<arthropod wordnetid="101767661" confidence="0.8">
<bug wordnetid="102236355" confidence="0.8">
<insect wordnetid="102159955" confidence="0.8">
<animal wordnetid="100015388" confidence="0.8">
<link xlink:type="simple" xlink:href="../507/521507.xml">
Priority inversion</link></animal>
</insect>
</bug>
</arthropod>
</instrumentality>
</artifact>
</invertebrate>
</system>
</entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../371/284371.xml">
Read-copy-update</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../591/501591.xml">
Resource starvation</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../663/2511663.xml">
Room synchronization</link></entry>
<entry level="1" type="bullet">

<message wordnetid="106598915" confidence="0.8">
<subject wordnetid="106599788" confidence="0.8">
<link xlink:type="simple" xlink:href="../707/1478707.xml">
Software transactional memory</link></subject>
</message>
</entry>
</list>
</p>

</sec>
<sec>
<st>
External links</st>
<p>

<list>
<entry level="1" type="bullet">

Survey "<weblink xlink:type="simple" xlink:href="http://www.audiomulch.com/~rossb/code/lockfree/">
Some Notes on Lock-Free and Wait-Free Algorithms</weblink>" by <link>
Ross Bencina</link></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://java.sun.com/javase/6/docs/api/java/util/concurrent/atomic/package-summary.html">
java.util.concurrent.atomic</weblink> &ndash; supports lock-free and thread-safe programming on single variables</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://msdn2.microsoft.com/en-us/library/system.threading.interlocked.aspx">
System.Threading.Interlocked</weblink> - Provides atomic operations for variables that are shared by multiple threads (.NET Framework)</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://jail-ust.sourceforge.net/index.php?section=3&amp;page=1">
The Jail-Ust Container Library</weblink></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.cl.cam.ac.uk/Research/SRG/netos/lock-free/">
Practical lock-free data structures</weblink></entry>
<entry level="1" type="bullet">

Thesis "<weblink xlink:type="simple" xlink:href="http://www.cs.chalmers.se/~phs/phd.pdf">
Efficient and Practical Non-Blocking Data Structures</weblink>" (1414 KB) by <link>
Håkan Sundell</link></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.cs.chalmers.se/~phs/warp/project.html">
WARPing - Wait-free techniques for Real-time Processing</weblink></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.cs.chalmers.se/~yzhang/thesis.pdf">
Non-blocking Synchronization: Algorithms and Performance Evaluation.</weblink> (1926 KB) by <link xlink:type="simple" xlink:href="../132/15010132.xml">
Yi Zhang</link></entry>
<entry level="1" type="bullet">

"<weblink xlink:type="simple" xlink:href="http://dissertations.ub.rug.nl/faculties/science/2005/h.gao/">
Design and verification of lock-free parallel algorithms</weblink>" by <link>
Hui Gao</link></entry>
<entry level="1" type="bullet">

"<weblink xlink:type="simple" xlink:href="http://citeseer.ist.psu.edu/114960.html">
Asynchronous Data Sharing in Multiprocessor Real-Time Systems Using Process Consensus</weblink>" by <link xlink:type="simple" xlink:href="../987/17824987.xml">
Jing Chen</link> and <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<academician wordnetid="109759069" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<adult wordnetid="109605289" confidence="0.8">
<professional wordnetid="110480253" confidence="0.8">
<educator wordnetid="110045713" confidence="0.8">
<link xlink:type="simple" xlink:href="../251/1194251.xml">
Alan Burns</link></educator>
</professional>
</adult>
</scientist>
</academician>
</causal_agent>
</person>
</physical_entity>
</entry>
<entry level="1" type="bullet">

Discussion "<weblink xlink:type="simple" xlink:href="http://groups.google.com/groups?group=comp.programming.threads&amp;threadm=ec1c3924.0410171103.568fa38a%40posting.google.com">
lock-free versus lock-based algorithms</weblink>"</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://atomic-ptr-plus.sourceforge.net/">
Atomic Ptr Plus Project</weblink> - collection of various lock-free synchronization primitives</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://webpages.charter.net/appcore/">
AppCore: A Portable High-Performance Thread Synchronization Library</weblink> - An Effective Marriage between Lock-Free and Lock-Based Algorithms</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://c2.com/cgi/wiki?WaitFreeSynchronization">
WaitFreeSynchronization</weblink> and <weblink xlink:type="simple" xlink:href="http://c2.com/cgi/wiki?LockFreeSynchronization">
LockFreeSynchronization</weblink> at the Portland Pattern Repository</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.hpl.hp.com/research/linux/atomic_ops/index.php4">
Multiplatform library with atomic operations</weblink></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.mgix.com/snippets/?LockFree">
A simple lock-free LIFO implementation</weblink></entry>
</list>
</p>


</sec>
</bdy>
</algorithm>
</article>
