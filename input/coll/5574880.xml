<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 21:51:46[mciao0826] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<platform  confidence="0.8" wordnetid="103961939">
<artifact  confidence="0.8" wordnetid="100021939">
<surface  confidence="0.8" wordnetid="104362025">
<entity  confidence="0.9511911446218017" wordnetid="100001740">
<horizontal_surface  confidence="0.8" wordnetid="103536348">
<header>
<title>MINIX 3</title>
<id>5574880</id>
<revision>
<id>242018605</id>
<timestamp>2008-09-30T15:23:45Z</timestamp>
<contributor>
<username>FairuseBot</username>
<id>1022055</id>
</contributor>
</revision>
<categories>
<category>Computing platforms</category>
<category>Free software operating systems</category>
<category>Live CD</category>
<category>Microkernels</category>
<category>Unix variants</category>
</categories>
</header>
<bdy>
<template>
<name>infobox OS</name>
<parameters>
<ui>
<shell wordnetid="104190464" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<ammunition wordnetid="102703275" confidence="0.8">
<language wordnetid="106282651" confidence="0.8">
<weaponry wordnetid="104566257" confidence="0.8">
<link xlink:type="simple" xlink:href="../928/171928.xml">
ash</link></weaponry>
</language>
</ammunition>
</instrumentality>
</artifact>
</shell>
</ui>
<screenshot>
<image width="280px" src="Minix_3.png">
<caption>

Screenshot of MINIX 3
</caption>
</image>
</screenshot>
<supported_platforms>
<link xlink:type="simple" xlink:href="../070/15070.xml">
i386</link> architecture</supported_platforms>
<website>
http://www.MINIX3.org</website>
<latest_release_version>
3.1.2a</latest_release_version>
<latest_test_date>
<link xlink:type="simple" xlink:href="../864/15864.xml">
June 8</link>, <link xlink:type="simple" xlink:href="../165/36165.xml">
2007</link></latest_test_date>
<caption>
Minix 3 running <link xlink:type="simple" xlink:href="../147/34147.xml">
X11</link> with <link xlink:type="simple" xlink:href="../961/447961.xml">
TWM</link> as Window Manager.</caption>
<latest_release_date>
<link xlink:type="simple" xlink:href="../355/19355.xml">
May 29</link>, <link xlink:type="simple" xlink:href="../164/36164.xml">
2006</link></latest_release_date>
<kernel_type>
<link xlink:type="simple" xlink:href="../023/20023.xml">
Microkernel</link></kernel_type>
<working_state>
Current</working_state>
<developer>
<person wordnetid="100007846" confidence="0.9508927676800064">
<professor wordnetid="110480730" confidence="0.9173553029164789">
<link xlink:type="simple" xlink:href="../110/3110.xml">
Andrew S. Tanenbaum</link></professor>
</person>
</developer>
<family>
<family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../815/31815.xml">
Unix-like</link></family>
</family>
<latest_test_version>
3.1.3a</latest_test_version>
<name>
MINIX 3</name>
<source_model>
<link xlink:type="simple" xlink:href="../496/1721496.xml">
Free and open source software</link></source_model>
<license>
<link>
BSD License</link></license>
</parameters>
</template>

<p>

<b>MINIX 3</b> is a project to create a small, highly reliable and functional <family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../815/31815.xml">
Unix-like</link></family>
 <link xlink:type="simple" xlink:href="../194/22194.xml">
operating system</link>. The main goal of the project is for the system to be fault-tolerant by detecting and repairing its own faults on the fly, without user intervention.  It is published under the <link xlink:type="simple" xlink:href="../111/18933111.xml">
BSD license</link> and can be downloaded for free from <weblink xlink:type="simple" xlink:href="http://www.minix3.org">
www.minix3.org</weblink>. The main uses of the operating system are envisaged to be <link xlink:type="simple" xlink:href="../630/46630.xml">
embedded systems</link> (such as <link xlink:type="simple" xlink:href="../884/2895884.xml">
ADSL router</link>s) as well as the education sector, such as universities or the <link xlink:type="simple" xlink:href="../236/11778236.xml">
XO-1 laptop</link>.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref></p>
<p>

MINIX 3 currently supports <link xlink:type="simple" xlink:href="../046/15046.xml">
IA-32</link> architecture <link xlink:type="simple" xlink:href="../803/49803.xml">
PC compatible</link> systems.  It is also possible to run MINIX under <link xlink:type="simple" xlink:href="../937/18943937.xml">
emulator</link>s or <link xlink:type="simple" xlink:href="../353/32353.xml">
virtual machine</link>s, such as <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<copycat wordnetid="109964411" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../072/362072.xml">
Bochs</link></causal_agent>
</copycat>
</person>
</physical_entity>
,<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%222%22])">2</ref><ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%223%22])">3</ref> <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../250/8175250.xml">
VMware Workstation</link></software>
,<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%224%22])">4</ref> <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../015/312015.xml">
Microsoft Virtual PC</link></software>
,<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%225%22])">5</ref> and <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<copycat wordnetid="109964411" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../669/1465669.xml">
QEMU</link></causal_agent>
</copycat>
</person>
</physical_entity>
.
Ports to the <link xlink:type="simple" xlink:href="../281/24281.xml">
PowerPC</link><ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%226%22])">6</ref> and <chip wordnetid="103020034" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<microprocessor wordnetid="103760310" confidence="0.8">
<conductor wordnetid="103088707" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<semiconductor_device wordnetid="104171831" confidence="0.8">
<link xlink:type="simple" xlink:href="../558/60558.xml">
ARM architecture</link></semiconductor_device>
</device>
</conductor>
</microprocessor>
</instrumentality>
</artifact>
</chip>
s (<link xlink:type="simple" xlink:href="../989/140989.xml">
Intel XScale</link>)<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%227%22])">7</ref> are in development.</p>
<p>

The distribution comes on a <structure wordnetid="105726345" confidence="0.8">
<arrangement wordnetid="105726596" confidence="0.8">
<distribution wordnetid="105729036" confidence="0.8">
<link xlink:type="simple" xlink:href="../137/331137.xml">
Live CD</link></distribution>
</arrangement>
</structure>
 and also can be downloaded as a <link xlink:type="simple" xlink:href="../416/5321416.xml">
USB stick image</link>.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%228%22])">8</ref></p>

<sec>
<st>
 Goals of the project </st>
<p>

Reflecting on the nature of <link xlink:type="simple" xlink:href="../825/20825.xml">
monolithic kernel</link> based systems, where a driver (which has, according to MINIX creator <person wordnetid="100007846" confidence="0.9508927676800064">
<professor wordnetid="110480730" confidence="0.9173553029164789">
<link xlink:type="simple" xlink:href="../110/3110.xml">
Tanenbaum</link></professor>
</person>
, approximately 3-7 times as many bugs as a usual program)<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%229%22])">9</ref> can bring down the whole system<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2210%22])">10</ref>, MINIX 3 aims to create an operating system that is a "reliable, self-healing, multiserver UNIX clone".<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2211%22])">11</ref> In order to achieve that, the code running in kernel must be minimal, with the file server, process server, and each device driver running as separate user-mode processes. Each driver is carefully monitored by a part of the system known as the reincarnation server. If a driver fails to respond to pings from the reincarnation server, it is shut down and replaced by a fresh copy of the driver. In a monolithic system, a bug in a driver can easily crash the whole kernel, something that is much less likely to occur in MINIX 3.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2212%22])">12</ref>.</p>

</sec>
<sec>
<st>
 Reliability in MINIX 3 </st>
<p>

One of the main goals of MINIX 3 is reliability. Below, some of the more important principles that enhance MINIX 3's reliability are discussed.
</p>
<ss1>
<st>
Reduce kernel size</st>
<p>

Monolithic operating systems such as <link xlink:type="simple" xlink:href="../982/33982.xml">
Windows</link>, <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../297/6097297.xml">
Linux</link></O>
 and <platform wordnetid="103961939" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<surface wordnetid="104362025" confidence="0.8">
<horizontal_surface wordnetid="103536348" confidence="0.8">
<link xlink:type="simple" xlink:href="../554/7580554.xml">
FreeBSD</link></horizontal_surface>
</surface>
</artifact>
</platform>
 have millions of lines of <link xlink:type="simple" xlink:href="../394/50394.xml">
kernel</link> code. In contrast, MINIX 3 has about 4000 lines of executable kernel code, which can make problems easier to find in the code.</p>

</ss1>
<ss1>
<st>
Cage the bugs</st>
<p>

In monolithic operating systems, <link xlink:type="simple" xlink:href="../101/9101.xml">
device drivers</link> reside in the kernel. This means that when a new peripheral is installed, unknown, untrusted code is inserted in the kernel. A single bad line of code in a driver can bring down the system. In MINIX 3, each device driver is a separate user-mode process. Drivers cannot execute privileged instructions, change the <link xlink:type="simple" xlink:href="../962/674962.xml">
page tables</link>, perform arbitrary <link xlink:type="simple" xlink:href="../558/14558.xml">
I/O</link>, or write to absolute memory. They have to make kernel calls for these services and the kernel checks each call for authority.</p>

</ss1>
<ss1>
<st>
Limit drivers' memory access</st>
<p>

In monolithic operating systems, a driver can write to any word of memory and thus accidentally trash user programs. In MINIX 3, when a user expects data from, for example, the file system, it builds a descriptor telling who has access and at what addresses. It then passes an index to this descriptor to the file system, which may pass it to a driver. The file system or driver then asks the kernel to write via the descriptor, making it impossible for them to write to addresses outside the buffer.</p>

</ss1>
<ss1>
<st>
Survive bad pointers</st>
<p>

Dereferencing a bad pointer within a driver will crash the driver process, but will have no effect on the system as a whole. The reincarnation server will restart the crashed driver automatically. For some drivers (e.g., disk and network) recovery is transparent to user processes. For others (e.g., audio and printer), the user may notice. In monolithic systems, dereferencing a bad pointer in a (kernel) driver normally leads to a system crash.</p>

</ss1>
<ss1>
<st>
Tame infinite loops</st>
<p>

If a driver gets into an infinite loop, the scheduler will gradually lower its priority until it becomes idle. Eventually the reincarnation server will see that it is not responding to status requests, so it will kill and restart the looping driver. In a monolithic system, a looping driver could hang the system.</p>

</ss1>
<ss1>
<st>
Limit damage from buffer overruns</st>
<p>

MINIX 3 uses fixed-length messages for internal communication, which eliminates certain <link xlink:type="simple" xlink:href="../373/4373.xml">
buffer overruns</link> and buffer management problems. Also, many exploits work by overrunning a buffer to trick the program into returning from a function call using an overwritten stacked return address pointing into the overrun buffer. In MINIX 3, this attack does not work because instruction and data space are split and only code in (read-only) instruction space can be executed.</p>

</ss1>
<ss1>
<st>
Restrict access to kernel functions</st>
<p>

Device drivers obtain kernel services (such as copying data to users' address spaces) by making kernel calls. The MINIX 3 kernel has a bit map for each driver specifying which calls it is authorized to make. In monolithic systems every driver can call every kernel function, authorized or not.</p>

</ss1>
<ss1>
<st>
Restrict access to I/O ports</st>
<p>

The kernel also maintains a table telling which I/O ports each driver may access. As a result, a driver can only touch its own I/O ports. In monolithic systems, a buggy driver can access I/O ports belonging to another device.</p>

</ss1>
<ss1>
<st>
Restrict communication with OS components</st>
<p>

Not every driver and server needs to communicate with every other driver and server. Accordingly, a per-process bit map determines which destinations each process may send to.</p>

</ss1>
<ss1>
<st>
Reincarnate dead or sick drivers</st>
<p>

A special process, called the reincarnation server, periodically pings each device driver. If the driver dies or fails to respond correctly to pings, the reincarnation server automatically replaces it with a fresh copy. The detection and replacement of non-functioning drivers is automatic, without any user action required. This feature does not work for disk drivers at present, but in the next release the system will be able to recover even disk drivers, which will be shadowed in <link xlink:type="simple" xlink:href="../847/25847.xml">
RAM</link>. Driver recovery does not affect running processes.</p>

</ss1>
<ss1>
<st>
 Integrate interrupts and messages </st>
<p>

When an <link xlink:type="simple" xlink:href="../289/15289.xml">
interrupt</link> occurs, it is converted at a low level to a notification sent to the appropriate driver. If the driver is waiting for a message, it gets the interrupt immediately; otherwise it gets the notification the next time it does a RECEIVE to get a message. This scheme eliminates nested interrupts and makes driver programming easier.</p>

</ss1>
</sec>
<sec>
<st>
 Architecture </st>
<p>

<image width="300px" src="The_MINIX_3_Microkernel_Architecture.png" type="thumb">
<caption>

The Architecture of MINIX 3
</caption>
</image>
</p>
<p>

As can be seen, at the bottom level is the <link xlink:type="simple" xlink:href="../023/20023.xml">
microkernel</link>, which is about
4000 lines of code (mostly in <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../021/6021.xml">
C</link></programming_language>
, plus a small amount of <link xlink:type="simple" xlink:href="../368/1368.xml">
assembly language</link>). It handles <link xlink:type="simple" xlink:href="../289/15289.xml">
interrupts</link>, <link xlink:type="simple" xlink:href="../920/231920.xml">
scheduling</link>, and message passing. In addition it supports an <link xlink:type="simple" xlink:href="../ury/24th_century.xml">
API</link> of about 30 kernel calls that authorized servers and drivers can make. User programs cannot make these calls. Instead, they can issue <standard wordnetid="107260623" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../305/23305.xml">
POSIX</link></system_of_measurement>
</standard>
 <link xlink:type="simple" xlink:href="../908/102908.xml">
system call</link>s which send messages to the servers. The kernel calls perform functions such as setting interrupts and copying data between address spaces.</p>
<p>

At the next level up, we find the <link xlink:type="simple" xlink:href="../101/9101.xml">
device drivers</link>, each one running as a separate <link xlink:type="simple" xlink:href="../467/93467.xml">
user-mode</link> process. Each one controls some I/O device, such as a disk or printer. The drivers do not have access to the I/O port space and cannot issue I/O instructions directly. Instead, they must make kernel calls giving a list of I/O ports to write to and the values to be written. While there is a small amount of overhead in doing this (typically 500 nsec), this scheme makes it possible for the kernel to check authorization, so that, for example, the audio driver cannot write on the disk.</p>
<p>

At the next level we find the servers. This is where nearly all the operating system functionality is located. User processes obtain file service, for example, by sending messages to the file server to open, close, read, and write files. In turn, the file server gets disk I/O performed by sending messages to the disk driver, which actually controls the disk.
One of the key servers is the reincarnation server. Its job is to poll all the other servers and drivers to check on their health periodically. If a component fails to respond correctly, or exits or gets into an infinite loop, the reincarnation server (which is the parent process of the drivers and servers) kills the faulty component and replaces it with a fresh copy. In this way the system is automatically made self healing without interfering with running programs. Currently the reincarnation server, the file server, the process server, and the microkernel are part of the trusted computing base.  If any of them fail, the system crashes. Nevertheless, reducing the trusted computing base from 3-5 million lines of code found in Linux and Windows systems to about 20,000 lines greatly enhances system reliability.</p>

</sec>
<sec>
<st>
 Differences between MINIX 3 and prior versions </st>

<p>

<indent level="1">

<it>Main article: <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../977/18977.xml">
MINIX</link></O>
</it>
</indent>
<image location="right" width="400px" src="Unix_history-simple.svg" type="thumb">
<caption>

Diagram of the relationships between several Unix-like systems
</caption>
</image>

<O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../977/18977.xml">
MINIX</link></O>
 1, 1.5, and 2 were developed as tools to help people learn about the design of operating systems.  MINIX 1.0, released in 1987, was 12,000 lines of <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../021/6021.xml">
C (programming language)</link></programming_language>
 and some x86 <link xlink:type="simple" xlink:href="../368/1368.xml">
Assembly language</link>. Source code of the kernel, <link xlink:type="simple" xlink:href="../125/402125.xml">
memory manager</link>, and <link xlink:type="simple" xlink:href="../280/1010280.xml">
file system</link> of MINIX 1.0 are printed in the book. Tanenbaum originally developed MINIX for compatibility with the <link xlink:type="simple" xlink:href="../032/15032.xml">
IBM PC</link> and <link xlink:type="simple" xlink:href="../917/348917.xml">
IBM PC/AT</link> <link xlink:type="simple" xlink:href="../144/48144.xml">
microcomputers</link> available at the time. MINIX 1.5, released in 1991, included support for <link xlink:type="simple" xlink:href="../456/140456.xml">
MicroChannel</link> <link xlink:type="simple" xlink:href="../204/218204.xml">
IBM PS/2</link> systems and was also ported to the <chip wordnetid="103020034" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<microprocessor wordnetid="103760310" confidence="0.8">
<conductor wordnetid="103088707" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<semiconductor_device wordnetid="104171831" confidence="0.8">
<link xlink:type="simple" xlink:href="../270/20270.xml">
Motorola 68000</link></semiconductor_device>
</device>
</conductor>
</microprocessor>
</instrumentality>
</artifact>
</chip>
 and <link xlink:type="simple" xlink:href="../954/36954.xml">
SPARC</link> architectures, supporting the <link xlink:type="simple" xlink:href="../ury/22nd_century.xml">
Atari ST</link>, <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../580/7580.xml">
Commodore</link></company>
 <link xlink:type="simple" xlink:href="../980/1980.xml">
Amiga</link>, <link xlink:type="simple" xlink:href="../979/19006979.xml">
Apple Macintosh</link> and <company wordnetid="108058098" confidence="0.8">
<institution wordnetid="108053576" confidence="0.8">
<link xlink:type="simple" xlink:href="../980/26980.xml">
Sun Microsystems</link></institution>
</company>
 <computer wordnetid="103082979" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<machine wordnetid="103699975" confidence="0.8">
<digital_computer wordnetid="103196324" confidence="0.8">
<workstation wordnetid="104603399" confidence="0.8">
<link xlink:type="simple" xlink:href="../237/2223237.xml">
SPARCstation</link></workstation>
</digital_computer>
</machine>
</device>
</instrumentality>
</artifact>
</computer>
 computer platforms. A version of MINIX running as a user process under <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../071/29071.xml">
SunOS</link></O>
 was also available. MINIX 2.0, released in 1997, was only available for the <link xlink:type="simple" xlink:href="../198/34198.xml">
x86</link> and <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../145/46145.xml">
Solaris</link></database>
</wordnet>
</lexical_database>
</electronic_database>
</information>
</message>
-hosted SPARC architectures. <link xlink:type="simple" xlink:href="../383/5879383.xml">
Minix-vmd</link> was created by two <university wordnetid="108286163" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../167/324167.xml">
Vrije Universiteit</link></university>
 researchers, and added <link xlink:type="simple" xlink:href="../354/32354.xml">
virtual memory</link> and support for the <message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<link xlink:type="simple" xlink:href="../147/34147.xml">
X Window System</link></rule>
</direction>
</protocol>
</message>
.
MINIX 3 does the same, and provides a modern operating system with many newer tools and many <link xlink:type="simple" xlink:href="../642/31642.xml">
UNIX</link> applications.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2213%22])">13</ref> Prof. Tanenbaum once said: </p>

<p>

<table style="margin:auto; border-collapse:collapse; border-style:none; background-color:transparent; " class="cquote">
<row>
<col style="color:#B2B7F2;font-size:35px;font-family:'Times New Roman',serif;font-weight:bold;text-align:left;padding:10px 10px;" width="20" valign="top">
“</col>
<col style="padding:4px 10px;" valign="top">
Please be aware that MINIX 3 is not your grandfather's MINIX ... MINIX 1 was written as an educational tool ... MINIX 3 is that plus a start at building a highly reliable, self-healing,  bloat-free operating system ... MINIX 1 and MINIX 3 are related in the same way as Windows 3.1 and Windows XP are: same first name.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2211%22])">11</ref></col>
<col style="color:#B2B7F2;font-size:36px;font-family:'Times New Roman',serif;font-weight:bold;text-align:right;padding:10px 10px;" width="20" valign="bottom">
”</col>
</row>
</table>
 There have also been many improvements in the structure of the kernel since MINIX 2 was released, making the operating system more reliable.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2214%22])">14</ref></p>
<p>

MINIX version 3.1.2 was released <link xlink:type="simple" xlink:href="../353/19353.xml">
8 May</link> <link xlink:type="simple" xlink:href="../164/36164.xml">
2006</link>. It contains <link xlink:type="simple" xlink:href="../147/34147.xml">
X11</link>, <link xlink:type="simple" xlink:href="../234/18933234.xml">
emacs</link>, <link xlink:type="simple" xlink:href="../494/32494.xml">
vi</link>, cc, <physical_entity wordnetid="100001930" confidence="0.8">
<communicator wordnetid="109610660" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<compiler wordnetid="109946957" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<writer wordnetid="110794014" confidence="0.8">
<link xlink:type="simple" xlink:href="../323/12323.xml">
gcc</link></writer>
</causal_agent>
</compiler>
</person>
</communicator>
</physical_entity>
, <link xlink:type="simple" xlink:href="../939/23939.xml">
perl</link>, <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../862/23862.xml">
python</link></programming_language>
, <shell wordnetid="104190464" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<ammunition wordnetid="102703275" confidence="0.8">
<language wordnetid="106282651" confidence="0.8">
<weaponry wordnetid="104566257" confidence="0.8">
<link xlink:type="simple" xlink:href="../928/171928.xml">
ash</link></weaponry>
</language>
</ammunition>
</instrumentality>
</artifact>
</shell>
, <link xlink:type="simple" xlink:href="../547/4547.xml">
bash</link>, <link xlink:type="simple" xlink:href="../928/95928.xml">
zsh</link>, <link xlink:type="simple" xlink:href="../289/53289.xml">
ftp</link>, <message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<standard wordnetid="107260623" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../814/28814.xml">
ssh</link></system_of_measurement>
</rule>
</direction>
</standard>
</protocol>
</message>
, <link xlink:type="simple" xlink:href="../062/31062.xml">
telnet</link>, <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<client wordnetid="109985075" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<case wordnetid="109898892" confidence="0.8">
<link xlink:type="simple" xlink:href="../925/42925.xml">
pine</link></case>
</causal_agent>
</client>
</person>
</physical_entity>
, and over 400 other common <link xlink:type="simple" xlink:href="../642/31642.xml">
UNIX</link> utility programs. With the addition of X11, this version marks the transition away from a text-only system.  Another feature of this version, which will be improved in future ones, is the ability of the system to withstand device driver crashes, and in many cases having them automatically replaced without affecting running processes. In this way, MINIX is <link xlink:type="simple" xlink:href="../989/1826989.xml">
self-healing</link> and can be used in applications demanding high reliability.</p>

</sec>
<sec>
<st>
 Books and Articles </st>
<p>

<list>
<entry level="1" type="bullet">

 <cite id="Reference-Tanenbaum-[[2006]]" style="font-style:normal" class="book">Tanenbaum, Andrew S;&#32;Albert S. Woodhull&#32;(<link xlink:type="simple" xlink:href="../164/36164.xml">
2006</link>). 'Operating Systems: Design and Implementation', Third Edition, ISBN 0-13-142938-8.,&#32;<link xlink:type="simple" xlink:href="../050/5421050.xml">
Prentice Hall</link>.</cite>&nbsp;</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.usenix.com/publications/login/2006-04/openpdfs/herder.pdf">
Modular system programming in MINIX 3</weblink> by Jorrit N. Herder, Herbert Bos, Ben Gras, Philip Homburg, and Andrew S Tanenbaum</entry>
<entry level="1" type="bullet">

J.N. Herder et al., Modular System Programming in MINIX 3, ;Login, April 2006 <weblink xlink:type="simple" xlink:href="http://www.usenix.org/publications/login/2006-04/openpdfs/herder.pdf">
http://www.usenix.org/publications/login/2006-04/openpdfs/herder.pdf</weblink></entry>
<entry level="1" type="bullet">

 Pablo A Pessolani. <it>MINIX4RT: A Real-Time Operating System Based on MINIX</it> <weblink xlink:type="simple" xlink:href="http://www.geocities.com/minix4rt/MINIX4RT.pdf">
http://www.geocities.com/minix4rt/MINIX4RT.pdf</weblink></entry>
<entry level="1" type="bullet">

Building Performance Measurement Tools for the MINIX 3 Operating System, by Rogier Meurs <weblink xlink:type="simple" xlink:href="http://www.minix3.ru/docs/meurs_thesis.pdf">
http://www.minix3.ru/docs/meurs_thesis.pdf</weblink></entry>
<entry level="1" type="bullet">

Design and implementation of the MINIX Virtual File system <weblink xlink:type="simple" xlink:href="http://www.minix3.ru/docs/gerofi_thesis.pdf">
http://www.minix3.ru/docs/gerofi_thesis.pdf</weblink></entry>
<entry level="1" type="bullet">

Reference manual for MINIX 3 Kernel API <weblink xlink:type="simple" xlink:href="http://www.minix3.ru/docs/kernel-api.pdf">
http://www.minix3.ru/docs/kernel-api.pdf</weblink></entry>
<entry level="1" type="bullet">

Towards a true microkernel operating system <weblink xlink:type="simple" xlink:href="http://www.minix3.ru/docs/herder_thesis.pdf">
http://www.minix3.ru/docs/herder_thesis.pdf</weblink></entry>
<entry level="1" type="bullet">

Construction of a Highly Dependable Operating System <weblink xlink:type="simple" xlink:href="http://www.minix3.org/doc/EDCC-2006.pdf">
http://www.minix3.org/doc/EDCC-2006.pdf</weblink></entry>
</list>
</p>

</sec>
<sec>
<st>
 See also </st>

<p>

<table style="background:#f9f9f9; font-size:85%; line-height:110%; ">
<row>
<col>
 <image width="32x28px" src="Free_Software_Portal_Logo.svg">
</image>
</col>
<col style="padding:0 0.2em;">
 <b><it>
Free software&#32;portal</it></b></col>
</row>
</table>
</p>

<p>

<list>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../391/3740391.xml">
Comparison of kernels</link></entry>
<entry level="1" type="bullet">

<software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../236/13236.xml">
GNU Hurd</link></software>
</entry>
<entry level="1" type="bullet">

<O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../977/18977.xml">
MINIX</link></O>
</entry>
<entry level="1" type="bullet">

<system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../057/981057.xml">
MINIX file system</link></instrumentality>
</artifact>
</system>
</entry>
</list>
</p>

</sec>
<sec>
<st>
 References and notes </st>


<p>

<reflist>
<entry id="1">
"LWN.net." LWN: MINIX 3 hits the net. 28 Oct 2005. Eklektix, Inc.. 4 Jul 2006 <weblink xlink:type="simple" xlink:href="http://lwn.net/Articles/156828/">
http://lwn.net/Articles/156828/</weblink>.</entry>
<entry id="2">
Woodhull, Al. Getting Started with Minix on Bochs on Mac OS. 20 Feb 2003. 8 Jul 2006 <weblink xlink:type="simple" xlink:href="http://www.woodhull.com/newfaq/faq/bochstart.html">
http://www.woodhull.com/newfaq/faq/bochstart.html</weblink>.</entry>
<entry id="3">
Senn, Will. "OSNews.com." Virtually Minix: A Tutorial &amp; Intro to Minix on XP via Bochs - OSNews.com. 08 Jul 2006. OSNews.com. 8 Jul 2006 <weblink xlink:type="simple" xlink:href="http://www.osnews.com/story.php?news_id=7303">
http://www.osnews.com/story.php?news_id=7303</weblink>.</entry>
<entry id="4">
Wagstrom, Patrick. Minix under VMWare Installation How-To. 8 Jul 2006 <weblink xlink:type="simple" xlink:href="http://patrick.wagstrom.net/projects/academic/cs551/minix.html">
http://patrick.wagstrom.net/projects/academic/cs551/minix.html</weblink>.</entry>
<entry id="5">
Woodhull, Al. Minix on Virtual PC: first look. 02 Jun 2005. 8 Jul 2006 <weblink xlink:type="simple" xlink:href="http://www.woodhull.com/newfaq/faq/pre-vpc.html">
http://www.woodhull.com/newfaq/faq/pre-vpc.html</weblink></entry>
<entry id="6">
 Alting, Ingmar A. MinixPPC: A port of MINIX 3 to the PowerPC platform, 15 Sep 2006. <weblink xlink:type="simple" xlink:href="http://www.minix3.org/doc/alting_thesis.pdf">
http://www.minix3.org/doc/alting_thesis.pdf</weblink></entry>
<entry id="7">
<weblink xlink:type="simple" xlink:href="http://www.minix3.org">
MINIX 3 Operating System official website</weblink></entry>
<entry id="8">
<weblink xlink:type="simple" xlink:href="http://www.minix3.org/download/">
Download</weblink></entry>
<entry id="9">
<person wordnetid="100007846" confidence="0.9508927676800064">
<professor wordnetid="110480730" confidence="0.9173553029164789">
<link xlink:type="simple" xlink:href="../110/3110.xml">
Tanenbaum, Andy</link></professor>
</person>
&#32;(2006-09-25).&#32;"<weblink xlink:type="simple" xlink:href="http://osnews.com/story.php/15960/Introduction-to-MINIX-3">
Introduction to MINIX 3</weblink>".&#32;<it>OSnew</it>.&#32;  OSnews.&#32;Retrieved on <link>
2008-07-04</link>.&nbsp;"From 'Rebirth' section: "Various studies have shown that software broadly contains something like 6-16 bugs per 1000 lines of code and that device drivers have 3-7 times as many bugs as the rest of the operating system. When combined with the fact that 70% of a typical operating system consists of device drivers, it is clear that device drivers are a big source of trouble. For <version wordnetid="107173585" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../879/33879.xml">
Windows XP</link></version>
, 85% of the crashes are do to bugs in device drivers. Obviously, to make OSes reliable, something has to be done to deal with buggy device drivers. Building a reliable system despite the inevitable bugs in device drivers was the original driving force behind MINIX 3.""</entry>
<entry id="10">
Tanenbaum, Andrew. CSAIL Event Calendar. 25 Aug 2006 <weblink xlink:type="simple" xlink:href="http://www.csail.mit.edu/events/eventcalendar/calendar.php?show=event&amp;id=1128">
http://www.csail.mit.edu/events/eventcalendar/calendar.php?show=event&amp;id=1128</weblink>.</entry>
<entry id="11">
Tanenbaum, Andrew. "Tanenbaum-Torvalds debate, Part II:." 12 May 2006. Vrije Universiteit. 15 Jun 2006 <weblink xlink:type="simple" xlink:href="http://www.cs.vu.nl/~ast/reliable-os/">
http://www.cs.vu.nl/~ast/reliable-os/</weblink>.</entry>
<entry id="12">
Tanenbaum, Andrew S.. "Reliability." The MINIX 3 Operating System. Vrije Universiteit.. 22 Jun 2006 <weblink xlink:type="simple" xlink:href="http://www.MINIX3.org/reliability.html">
http://www.MINIX3.org/reliability.html</weblink></entry>
<entry id="13">
Woodhull, Albert S.. "MINIX 3: A small, reliable free operating system:" MINIX 3 FAQ. 24 Oct 2005. Vrije Universiteit. 15 Jun 2006 <weblink xlink:type="simple" xlink:href="http://www.MINIX3.org/doc/faq.html">
http://www.MINIX3.org/doc/faq.html</weblink>.</entry>
<entry id="14">
Tanenbaum, Andrew. "The MINIX 3 Operating System." Improvements since V2. 05 Jul 2006 <weblink xlink:type="simple" xlink:href="http://www.minix3.org/improvements.html">
http://www.minix3.org/improvements.html</weblink>.</entry>
</reflist>
</p>

</sec>
<sec>
<st>
 External links </st>


<p>

<list>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.minix3.org">
Minix3 official homepage</weblink>: </entry>
<entry level="2" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://wiki.minix3.org">
Wiki</weblink></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.minix3.ru">
http://www.minix3.ru - official russian site</weblink></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://groups.google.com/group/comp.os.minix">
comp.os.minix - official forum(since 1987)</weblink></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://osnews.com/story.php/15960/Introduction-to-MINIX-3">
a very good description of Minix 3</weblink> by <link xlink:type="simple" xlink:href="../110/3110.xml">
Andy Tanenbaum</link></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.freesoftwaremagazine.com/articles/minix">
MINIX: what is it, and why is it still relevant?</weblink> An interview with Andy Tanenbaum</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.os-forum.com/minix/net/">
Minix Network Service Documentation</weblink></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.computer.org/portal/site/computer/menuitem.5d61c1d591162e4b0ef1bd108bcd45f3/index.jsp?&amp;pName=computer_level1_article&amp;TheCat=1005&amp;path=computer/homepage/0506&amp;file=cover1.xml&amp;xsl=article.xsl&amp;">
Can We Make Operating Systems Reliable and Secure?</weblink></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.minixtips.com/">
Minix Tips for running the Operating System Version</weblink></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.youtube.com/watch?v=m_HAkXoPWhA">
Youtube video of Minix3 installation</weblink></entry>
</list>
</p>
<p>

<table style=";" class="navbox" cellspacing="0">
<row>
<col style="padding:2px;">
<table style="width:100%;background:transparent;color:inherit;;" class="nowraplinks collapsible autocollapse " cellspacing="0">
<row>
<header colspan="2" style=";" class="navbox-title">
<family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../642/31642.xml">
Unix</link></family>
 and <family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../815/31815.xml">
Unix-like</link></family>
 <link xlink:type="simple" xlink:href="../194/22194.xml">
operating system</link>s</header>
</row>
<row style="height:2px;">

</row>
<row>
<col colspan="2" style="width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../ury/22nd_century.xml">
AIX</link></O>
&nbsp;·  <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../622/18932622.xml">
BSD</link></O>
&nbsp;·  <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../229/294229.xml">
DragonFly BSD</link></O>
&nbsp;·  <platform wordnetid="103961939" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<surface wordnetid="104362025" confidence="0.8">
<horizontal_surface wordnetid="103536348" confidence="0.8">
<link xlink:type="simple" xlink:href="../554/7580554.xml">
FreeBSD</link></horizontal_surface>
</surface>
</artifact>
</platform>
&nbsp;·  <link xlink:type="simple" xlink:href="../875/11875.xml">
GNU</link>&nbsp;·  <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../704/36704.xml">
HP-UX</link></O>
&nbsp;·  <link xlink:type="simple" xlink:href="../537/14537.xml">
IRIX</link>&nbsp;·  <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../297/6097297.xml">
Linux</link></O>
&nbsp;·  <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../980/867980.xml">
LynxOS</link></O>
&nbsp;·  <link xlink:type="simple" xlink:href="../640/20640.xml">
Mac OS X</link>&nbsp;·  <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../977/18977.xml">
MINIX</link></O>
&nbsp;·  <link xlink:type="simple" xlink:href="../495/21495.xml">
NetBSD</link>&nbsp;·  <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../571/18949571.xml">
OpenBSD</link></O>
&nbsp;·  <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../226/24226.xml">
Plan 9</link></O>
&nbsp;·  <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../184/65184.xml">
QNX</link></O>
&nbsp;·  <platform wordnetid="103961939" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<surface wordnetid="104362025" confidence="0.8">
<horizontal_surface wordnetid="103536348" confidence="0.8">
<link xlink:type="simple" xlink:href="../245/2901245.xml">
Research Unix</link></horizontal_surface>
</surface>
</artifact>
</platform>
&nbsp;·  <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../906/1579906.xml">
SCO OpenServer</link></O>
&nbsp;·  <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../145/46145.xml">
Solaris</link></database>
</wordnet>
</lexical_database>
</electronic_database>
</information>
</message>
&nbsp;·  <link>
System V</link>&nbsp;·  <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../275/38275.xml">
Tru64</link></O>
&nbsp;·  <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../105/157105.xml">
VxWorks</link></O>
&nbsp;·  <it>
Unix variants|more''</it></col>
</row>
</table>
</col>
</row>
</table>
</p>






</sec>
</bdy>
</horizontal_surface>
</entity>
</surface>
</artifact>
</platform>
</article>
