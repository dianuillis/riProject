<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 17:17:21[mciao0827] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>Information bottleneck method</title>
<id>558462</id>
<revision>
<id>227963346</id>
<timestamp>2008-07-26T05:43:04Z</timestamp>
<contributor>
<username>Edward</username>
<id>4261</id>
</contributor>
</revision>
<categories>
<category>Machine learning</category>
</categories>
</header>
<bdy>

The <b>information bottleneck method</b> is a technique introduced by Tishby et al [1] for finding the best tradeoff between <link xlink:type="simple" xlink:href="../932/41932.xml">
accuracy</link> and complexity (<link xlink:type="simple" xlink:href="../013/8013.xml">
compression</link>) when <link xlink:type="simple" xlink:href="../685/25685.xml">
summarizing</link> (e.g. <link xlink:type="simple" xlink:href="../675/669675.xml">
clustering</link>) a <link xlink:type="simple" xlink:href="../685/25685.xml">
random variable</link> <b>X</b>, given a joint <link xlink:type="simple" xlink:href="../543/23543.xml">
probability distribution</link>  between <b>X</b> and an observed relevant variable <b>Y</b>. Other applications include distributional clustering, and <link xlink:type="simple" xlink:href="../867/579867.xml">
dimension reduction</link>. In a well defined sense it generalized the classical notion of minimal <link xlink:type="simple" xlink:href="../841/140841.xml">
sufficient statistics</link> from parametric statistics to arbitrary distributions, not necessarily of exponential form. It does so by relaxing the sufficiency condition to capture some fraction of the mutual information with the relevant variable <b>Y</b>.  
<p>

The compressed variable is <math>T\,</math> and the algorithm minimises the following quantity
<math>\underset {p(t|x)}{\min} \,\, I(X;T) - \beta I(T;Y)</math>
where <math>I(X;T)\,\,I(T;Y)</math> are the mutual informations between <math>X;T \,</math> and <math>T;Y \,</math> respectively.</p>
<p>

= Gaussian Information Bottleneck [2] =</p>
<p>

A relatively simple application of the information bottleneck is to Gaussian variates and this has some semblance to a least squares reduced rank or <link xlink:type="simple" xlink:href="../900/363900.xml">
canonical correlation</link>.  Assume <math>X, Y \,</math> are jointly multivariate zero mean normal vectors with covariances <math>\Sigma_{XX}, \,\, \Sigma_{YY}</math> and <math>T\,</math> is a compressed version of <math>X\,</math> which must maintain a given value of mutual information with <math>Y\,</math>.  It can be shown that the optimum <math>T\,</math> is a normal vector consisting of linear combinations of the elements of <math>X , \,\, T=AX \,</math> where matrix <math>A \,</math> has orthogonal rows. </p>
<p>

The projection matrix <math>A\,</math> in fact contains <math>M\,</math> rows selected from the weighted left eigenvectors of the singular value decomposition of the following matrix (generally asymmetric)  </p>
<p>

<math>\Omega = \Sigma_{X|Y} \Sigma_{XX}^{-1} = I - \Sigma_{XY} \Sigma_{YY}^{-1} \Sigma_{XY}^T \Sigma_{XX}^{-1}</math>
Define the singular value decomposition
<math>\Omega = U\Lambda V^T \,</math> with <math> \Lambda =Diag \big ( \lambda_1 \le \lambda_2 \cdots \lambda_N \big ) \,</math>
and the critical values 
<math>\beta_i^C \underset {\lambda_i &amp;lt; 1}{=} (1 - \lambda_i  )^{-1}</math>.</p>
<p>

then the number <math>M \,</math> of active eigenvectors in the projection, or order of approximation, is given by
<math>\beta_{M-1}^C &amp;lt; \beta \le \beta_M^C</math> 
And we finally get
<math>A=[ w_1 U_1 , \dots , w_M U_M ]^T</math></p>
<p>

In which the weights are given by
<math>w_i = \sqrt{(\beta (1- \lambda_i )/\lambda_i r_i}</math>
where <math>r_i = U_i^T \Sigma_{XX} U_i</math> .</p>
<p>

= Data Clustering using the Information Bottleneck =</p>
<p>

This application of the bottleneck method to non-Gaussian sampled data is described in [2] by Tishby et. el.  The concept, as treated there, is not without complication as there are two independent phases in the exercise: firstly estimation of the unknown parent probability densities from which the data samples are drawn and secondly the use of these densities within the information theoretic framework of the bottleneck.</p>

<sec>
<st>
 Density Estimation </st>

<p>

Since the bottleneck method is framed in probabilistic rather than statistical terms, we first need to estimate the underlying probability density at the sample points <math>X = {x_i} \,</math>.  This is a well known problem with a number of solutions described by Silverman in [4].  In the present method, joint probabilities of the samples are found by use of a Markov transition matrix method and this has some mathematical synergy with the bottleneck method itself.   </p>
<p>

Define an arbitrarily increasing distance metric <math>f \,</math> between all sample pairs and <link xlink:type="simple" xlink:href="../350/831350.xml">
distance matrix</link> <math>d_{i,j}=f \Big ( \Big| x_i - x_j \Big | \Big )</math> .  Then compute transition probabilities between sample pairs <math>P_{i,j}=exp (- \lambda d_{i,j} ) \,</math> for some <math>\lambda &amp;gt; 0 \,</math>.  Treating samples as states, and a normalised version of <math>P \,</math> as a Markov state transition probability matrix, the vector of probabilities of the ‘states’ after <math>t \,</math> steps, conditioned on the initial state <math>p(0) \,</math>, is <math>p(t)=P^t p(0) \,</math>.  We are here interested only in the equilibrium probability vector <math>p(\infty ) \,</math> given, in the usual way, by the dominant eigenvector of matrix <math>P \,</math> which is independent of the initialising vector <math>p(0) \,</math>.  This Markov transition method establishes a probability at the sample points which is claimed to be proportional to the probabilities densities there.</p>
<p>

Other interpretations of the use of the eigenvalues of distance matrix <math>d \,</math> are discussed in [5].</p>

</sec>
<sec>
<st>
 Clusters </st>
<p>

In the following soft clustering example, the reference vector <math>Y \,</math> contains sample categories and the  joint probability <math>p(X,Y) \,</math> is assumed known.  A soft cluster <math>c_k \,</math>  is defined by its probability distribution over the data samples <math>x_i: \,\,\, p( c_k |x_i)</math>.  In [1] Tishby et al present the following iterative set of equations to determine the clusters which are ultimately a generalization of the <link>
Blahut-Arimoto</link> algorithm, developed in rate distortion theory.  The application of this type of algorithm in neural networks appears to originate in entropy arguments arising in application of Gibbs Distributions in deterministic annealing [6].</p>
<p>

<math>\begin{cases}
p(c|x)=Kp(c) exp \Big( -\beta\,D^{KL} \Big[ p(y|x) \,|| \, p(y| c)\Big ] \Big)\\
p(y| c)=\textstyle \sum_x p(y|x)p( c | x) p(x) \big / p(c) \\
p(c) = \textstyle \sum_x p(c | x) p(x) \\
\end{cases}
</math></p>
<p>

The function of each line of the iteration is expanded as follows.</p>
<p>

<b>Line 1:</b>   This is a matrix valued set of conditional probabilities</p>
<p>

<math>A_{i,j} = p(c_i | x_j )=Kp(c_i) exp \Big( -\beta\,D^{KL} \Big[ p(y|x_j) \,|| \, p(y| c_i)\Big ] \Big)</math></p>
<p>

The Kullback Leibler distance <math>D^{KL} \,</math> between the <math>Y \,</math> vectors generated by the sample data <math>x \,</math> and those generated by its reduced information proxy <math>c \,</math> is applied to assess the fidelity of the compressed vector with respect to the reference (or categorical) data <math>Y \,</math> in accordance with the fundamental bottleneck equation.  <math>D^{KL}(a||b)\,</math> is the Kullback Leibler distance between distributions <math>a, b \,</math> 
<math>D^{KL} (a||b)= \sum_i p(a_i) log \Big ( \frac{p(a_i)}{p(b_i)} \Big ) </math></p>
<p>

and <math>K \,</math> is a scalar normalization.  The weighting by the negative exponent of the distance means that prior cluster probabilities are downweighted in line 1 when the Kullback Liebler distance is large, thus successful clusters grow in probability while unsuccessful ones decay.</p>
<p>

<b>Line 2:	</b>This is a second matrix-valued set of conditional probabilities
<math>B_{i,k}=p(y_i | x_k ) = \sum_k p(y_i | x_k ) p(c_j | x_k )p(x_k)\big / p(c_j )</math>
The steps in deriving this are as follows.  We have, by definition</p>
<p>

<math>\begin{align}
p(y_i|c_k) &amp; = \sum_j p(y_i|x_j)p(x_j|c_k) \\
  &amp; =\sum_j p(y_i|x_j)p(x_j, c_k ) \big / p(c_k)  \\
&amp;  =\sum_j p(y_i|x_j)p(c_k | x_j) p(x_j) \big / p(c_k) \\
\end{align}</math>
where the Bayes identities  <math>p(a,b)=p(a|b)p(b)=p(b|a)p(a) \,</math> are used. </p>
<p>

<b>Line 3:</b>  this line finds the marginal distribution of the clusters <math>c \,</math>
<math>\begin{align}
p(c_i)&amp; =\sum_j p(c_i , x_j)
&amp; = \sum_j p(c_i | x_j) p(x_j)
\end{align}</math>	 </p>
<p>

This is also a standard result.</p>
<p>

Further inputs to the algorithm are the marginal sample distribution <math>p(x) \,</math>  which has already been determined by the dominant eigenvector of <math>P \,</math> and the matrix valued Kullback Leibler distance function</p>
<p>

<math>D_{i,j}^{KL}=D^{KL} \Big[ p(y|x_j) \,|| \, p(y| c_i)\Big ] \Big)</math>  derived from the sample spacings and transition probabilities.</p>
<p>

The matrix <math>p(y_i | c_j) \,</math> can be initialised randomly or as a reasonable guess, while matrix <math>p(c_i | x_j) \,</math> needs no prior values.  Although the algorithm is converging, multiple minima may exist which need some action to resolve.  Further details, including hard clustering methods, are found in [5].</p>

</sec>
<sec>
<st>
Defining Decision Contours </st>

<p>

To categorize a new sample <math> x' \,</math> external to the training set <math>X \,</math>,  apply the previous distance metric to find the transition probabilities between <math> x' \,</math> and all samples in <math>X: \,\,</math>,   <math> \tilde p(x_i )= p(x_i | x')= \Kappa \exp \Big (-\lambda f \big ( \Big| x_i - x' \Big | \big ) \Big )</math> with <math>\Kappa \,</math> a normalisation.  Secondly apply the last two lines of the 3-line algorithm to get cluster, and conditional category probabilities.</p>
<p>

<math>\begin{align}
&amp; \tilde p(c_i )  = p(c_i | x' ) = \sum_j p(c_i |  x_j)p(x_j | x') =\sum_j p(c_i |  x_j) \tilde p(x_j)\\
&amp; p(y_i | c_j)  = \sum_k p(y_i | x_k) p(c_j | x_k)p(x_k | x') / p(c_j | x' )
= \sum_k p(y_i | x_k) p(c_j | x_k) \tilde p(x_k) / \tilde p(c_j) \\
\end{align}</math>
Finally we have</p>

<p>

<math>p(y_i | x')= \sum_j p(y_i | c_j) p(c_j | x') )= \sum_j p(y_i | c_j) \tilde p(c_j) \,</math></p>
<p>

Parameter <math>\beta \,</math> must be kept under close supervision since, as it is increased from zero, increasing numbers of features, in the category probability space, snap into focus at certain critical thresholds.</p>

</sec>
<sec>
<st>
 An Example </st>
<p>

The following case examines clustering in a four quadrant multiplier with random inputs <math>u, v \,</math> and two categories of output, <math>\pm 1 \,</math>, generated by 
<math>y=sign(uv) \,</math>.  This function has the property that there are two spatially separated clusters for each category and so it demonstrates that the method can handle such distributions. </p>
<p>

20 samples are taken, uniformly distributed on the square <math>[-1,1]^2 \,</math> .  The number of clusters used beyond the number of categories, two in this case, has little effect on performance and the results are shown for two clusters using parameters <math>\lambda = 3,\, \beta = 2.5</math>.
The distance function is <math>d_{i,j} =  \Big| x_i - x_j \Big |^2</math> where <math>x_i = (u_i,v_i)^T \, </math> while the conditional distribution <math>p(y|x)\, </math> is a 2x20 matrix 
<math>\begin{align} &amp; Pr(y_i=1) = 1 \, \mbox{if}\, sign(u_iv_i)=1\, \\
&amp; Pr(y_i=-1) = 1 \, \mbox{if} \, sign(u_iv_i)=-1\, \\
\end{align}</math>
and zero elsewhere.
The summation in line 2 is only incorporates two values representing the training values of +1 or -1 but nevertheless seems to work quite well.  Five iterations of the equations were used.  The figure shows the locations of the twenty samples with '0' representing <it>Y</it> = 1 and 'x' representing <it>Y</it> = -1.  The contour at the unity likelihood ratio level is shown, 
<math>L= Pr(1) \big/ Pr(-1) = 1</math>
as a new sample <math>x' \,</math>is scanned over the square.  Theoretically the contour should align with the <math>u=0 \,</math> and <math>v=0 \,</math> coordinates but for such small sample numbers they have instead followed the spurious clusterings of the sample points.
<image width="150px" src="BottleCateg_1.jpg" type="thumb">
<caption>

Decision Contours
</caption>
</image>
</p>

</sec>
<sec>
<st>
Neural Network/Fuzzy Logic Analogies</st>
<p>

There is some analogy between this algorithm and a neural network with a single hidden layer.  The internal nodes are represented by the clusters <math>c_j \,</math> and the first and second layers of network weights are the conditional probabilities <math>p(c_j | x_i) \,</math> and <math>p(y_k | c_j) \,</math> respectively.  However, unlike a standard neural network, the present algorithm relies entirely on probabilities as inputs rather than the sample values themselves while internal and output values are all conditional probability density distributions. Nonlinear functions are encapsulated in distance metric <math>f(.) \,</math> (or <it>influence functions/radial basis functions</it>) and transition probabilities instead of sigmoid functions.
The Blahut-Arimoto three-line algorithm is seen to converge rapidly, often in tens of iterations, and by varying <math>\beta \,</math>,  <math>\lambda \,</math> and <math>f \,</math> and the cardinality of the clusters, various levels of focus on data features can be achieved.
The statistical soft clustering definition <math>p(c_i | x_j) \,</math> has some overlap with the verbal fuzzy membership concept of fuzzy logic.</p>

</sec>
<sec>
<st>
Bibliography</st>
<p>

[1]  N. Tishby, F.C. Pereira, and W. Bialek:
<weblink xlink:type="simple" xlink:href="http://www.cs.huji.ac.il/labs/learning/Papers/allerton.pdf">
  “The Information Bottleneck method”. 
The 37th annual Allerton Conference on Communication, Control, and Computing, Sep 1999: pp. 368-377</weblink></p>
<p>

[2]  G. Chechik,  A Globerson,  N. Tishby and  Y. Weiss:  <weblink xlink:type="simple" xlink:href="http://www.jmlr.org/papers/volume6/chechik05a/chechik05a.pdf">
 “Information Bottleneck for Gaussian Variables”.  Journal of Machine Learning Research  6, Jan 2005, pp. 165-188</weblink></p>
<p>

[3]   N Tishby, N Slonim:  “Data clustering by Markovian Relaxation and the Information Bottleneck Method”,  Neural Information Processing Systems (NIPS) 2000,  pp. 640-646</p>
<p>

[4]   B.W. Silverman: “Density Estimation for Statistical Data Analysis”,   Chapman and Hall, 1986.</p>
<p>

[5]   N. Slonim, N. Tishby:  "Document Clustering using Word Clusters via the Information Bottleneck Method",  SIGIR 2000, pp. 208-215</p>
<p>

[6]    Y. Weiss:  "Segmentation using eigenvectors: a unifying view",  Proceedings IEEE International Conference on Computer Vision 1999,  pp. 975-982</p>
<p>

[7]    D. J. Miller, A. V. Rao, K. Rose, A. Gersho: "An Information-theoretic Learning Algorithm for Neural Network Classification".  NIPS 1995: pp.  591-597</p>
<p>

[8]  P. Harremoes and N. Tishby
<weblink xlink:type="simple" xlink:href="http://www.cs.huji.ac.il/labs/learning/Papers/flaske2.pdf">
"The Information Bottleneck Revisited or How to Choose a Good Distortion Measure". In proceedings of the International Symposium on Information Theory (ISIT) 2007</weblink></p>

</sec>
<sec>
<st>
See also</st>
<p>

<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../773/14773.xml">
Information theory</link></entry>
</list>
</p>

</sec>
<sec>
<st>
External links</st>
<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://citeseer.ist.psu.edu/tishby99information.html">
 Paper by N. Tishby, et. al</weblink></entry>
</list>
</p>



</sec>
</bdy>
</article>
