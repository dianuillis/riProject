<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 15:45:39[mciao0828] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<puzzle  confidence="0.8" wordnetid="106784639">
<message  confidence="0.8" wordnetid="106598915">
<subject  confidence="0.8" wordnetid="106599788">
<problem  confidence="0.8" wordnetid="106784003">
<question  confidence="0.8" wordnetid="106783768">
<header>
<title>Tower of Hanoi</title>
<id>56990</id>
<revision>
<id>243700991</id>
<timestamp>2008-10-07T18:03:31Z</timestamp>
<contributor>
<username>Sottolacqua</username>
<id>5777567</id>
</contributor>
</revision>
<categories>
<category>Articles with example Python code</category>
<category>Articles with example Pascal code</category>
<category>Articles with example Haskell code</category>
<category>Articles with example C code</category>
<category>Mechanical puzzles</category>
<category>Articles with example code</category>
<category>Articles with example Scheme code</category>
</categories>
</header>
<bdy>

<image width="300px" src="Tower_of_Hanoi.jpeg" type="thumb">
<caption>

A model set of the Towers of Hanoi (with 8 disks)
</caption>
</image>

<image width="300px" src="Tower_of_Hanoi_4.gif" type="thumb">
<caption>

An animated solution of the <b>Tower of Hanoi</b> puzzle for <it>T(4,3)</it>.
</caption>
</image>

The <b>Tower of Hanoi</b> or <b>Towers of <village wordnetid="108672738" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../667/56667.xml">
Hanoi</link></village>
</b> (also known as <b>The Towers of <link xlink:type="simple" xlink:href="../012/2298012.xml">
Bramha</link></b>) is a <link xlink:type="simple" xlink:href="../434/20434.xml">
mathematical game</link> or <link xlink:type="simple" xlink:href="../368/86368.xml">
puzzle</link>. It consists of three rods, and a number of disks of different sizes which can slide onto any rod. The puzzle starts with the disks neatly stacked in order of size on one rod, the smallest at the top, thus making a conical shape. <p>

The objective of the puzzle is to move the entire stack to another rod, obeying the following rules: </p>
<p>

<list>
<entry level="1" type="bullet">

 Only one disk may be moved at a time.</entry>
<entry level="1" type="bullet">

 Each move consists of taking the upper disk from one of the pegs and sliding it onto another rod, on top of the other disks that may already be present on that rod.</entry>
<entry level="1" type="bullet">

 No disk may be placed on top of a smaller disk.</entry>
</list>
</p>

<sec>
<st>
 Origins </st>
<p>

<image location="right" width="150px" src="Hanoi_Flagtower.jpg" type="thumb">
<caption>

Flag Tower of Hanoi
</caption>
</image>

The puzzle was invented by the <statistic wordnetid="106021499" confidence="0.8">
<information wordnetid="105816287" confidence="0.8">
<ethnic_group wordnetid="107967382" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<demographic wordnetid="106022076" confidence="0.8">
<datum wordnetid="105816622" confidence="0.8">
<link xlink:type="simple" xlink:href="../731/962731.xml">
French</link></datum>
</demographic>
</group>
</ethnic_group>
</information>
</statistic>
 <link xlink:type="simple" xlink:href="../902/18902.xml">
mathematician</link> <link>
Édouard Lucas</link> in <link xlink:type="simple" xlink:href="../701/34701.xml">
1883</link>. There is a legend about a <country wordnetid="108544813" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../354/202354.xml">
Vietnam</link></country>
ese or <country wordnetid="108544813" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../533/14533.xml">
India</link></country>
n temple which contains a large room with three time-worn posts in it surrounded by 64 golden disks. The priests of <belief wordnetid="105941423" confidence="0.8">
<deity wordnetid="109505418" confidence="0.8">
<spiritual_being wordnetid="109504135" confidence="0.8">
<link xlink:type="simple" xlink:href="../335/19725335.xml">
Brahma</link></spiritual_being>
</deity>
</belief>
, acting out the command of an ancient prophecy, have been moving these disks, in accordance with the rules of the puzzle. The puzzle is therefore also known as the Tower of <belief wordnetid="105941423" confidence="0.8">
<deity wordnetid="109505418" confidence="0.8">
<spiritual_being wordnetid="109504135" confidence="0.8">
<link xlink:type="simple" xlink:href="../335/19725335.xml">
Brahma</link></spiritual_being>
</deity>
</belief>
 puzzle. According to the legend, when the last move of the puzzle is completed, the world will end. It is not clear whether Lucas invented this legend or was inspired by it. The Tower of Hanoi is a problem often used to teach beginning programming, in particular, as an example of a simple <link xlink:type="simple" xlink:href="../407/25407.xml">
recursive algorithm</link>.</p>
<p>

If the legend were true, and if the priests were able to move disks at a rate of one per second, using the smallest number of moves, it would take them 264−1 seconds or roughly 600 <link xlink:type="simple" xlink:href="../363/1136363.xml">
billion</link> years (operation taking place is <math>\frac{{2}^{64}-1}{60 \times 60 \times 24 \times 365.2425}</math>) .<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref> </p>
<p>

There are many variations on this legend. For instance, in some tellings, the temple is a <link xlink:type="simple" xlink:href="../856/45856.xml">
monastery</link> and the priests are <link xlink:type="simple" xlink:href="../369/419369.xml">
monk</link>s. The temple or monastery may be said to be in different parts of the world — including <village wordnetid="108672738" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../667/56667.xml">
Hanoi</link></village>
, <country wordnetid="108544813" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../354/202354.xml">
Vietnam</link></country>
, and may be associated with any <link xlink:type="simple" xlink:href="../414/25414.xml">
religion</link>. In some versions, other elements are introduced, such as the fact that the tower was created at the beginning of the world, or that the priests or monks may make only one move per day.</p>
<p>

The <tower wordnetid="104460130" confidence="0.8">
<structure wordnetid="104341686" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<link xlink:type="simple" xlink:href="../785/5790785.xml">
Flag Tower of Hanoi</link></artifact>
</structure>
</tower>
 may have served as the inspiration for the name.</p>

</sec>
<sec>
<st>
 Solution </st>
<p>

Most toy versions of the puzzle have 8 disks. The game seems impossible to many novices, yet is solvable with a simple <link xlink:type="simple" xlink:href="../775/775.xml">
algorithm</link>.</p>

<ss1>
<st>
Simple solution</st>
<p>

The following solution is a simple solution for the toy puzzle.</p>
<p>

Alternate moves between the smallest piece and a non- smallest piece. When moving the smallest piece, always move it in the same direction (either to the left or to the right, but be consistent). If there is no tower in the chosen direction, move it to the opposite end. When the turn is to move the non-smallest piece, there is only one legal move.</p>

</ss1>
<ss1>
<st>
Recursive solution</st>

<p>

As in many mathematical puzzles, finding a  solution is made easier by solving a slightly more general problem: how to move a tower of h (h=height) disks from a starting peg <b>f</b> (f=from) onto a destination peg <b>t</b> (t=to), <b>r</b> being the remaining third peg and assuming <math>t\ne f</math> (<math>1\le t,f\le 3</math>). First, observe that the problem is symmetric for permutations of the names of the pegs (<group wordnetid="100031264" confidence="0.8">
<link xlink:type="simple" xlink:href="../901/28901.xml">
symmetric group S<it>3''</it></link></group>
). If a solution is known moving from peg <b>f</b> to peg <b>t</b>, then, by renaming the pegs, the same solution can be used for every other choice of starting and destination peg. If there is only one disk (or even none at all), the problem is trivial. If h=1, then simply move the disk from peg <b>f</b> to peg <b>t</b>. If h&amp;gt;1, then somewhere along the sequence of moves, the largest disk must be moved from peg <b>f</b> to another peg, preferably to peg <b>t</b>. The only situation that allows this move is when all smaller h-1 disks are on peg <b>r</b>. Hence, first all h-1 smaller disks must go from <b>f</b> to <b>r</b>. Subsequently move the largest disk and finally move the h-1 smaller disks from peg <b>r</b> to peg <b>t</b>. The presence of the largest disk does not impede any move of the h-1 smaller disks and can temporarily be ignored. Now the problem is reduced to moving h-1 disks from one peg to another one, first from <b>f</b> to <b>r</b> and subsequently from <b>r</b> to <b>t</b>, but the same method can be used both times by renaming the pegs. The same strategy can be used to reduce the h-1 problem to h-2, h-3, and so on until only one disk is left. This is called <link xlink:type="simple" xlink:href="../407/25407.xml">
recursion</link>. This algorithm can be schematized as follows. Identify the disks in order of increasing size by the natural numbers from 0 up to but not including h. Hence disk 0 is the smallest one and disk h-1 the largest one.</p>
<p>

The following is a procedure for moving a tower of h disks from a peg <b>f</b> onto a peg <b>t</b>, with <b>r</b> being the remaining third peg:
<list>
<entry level="1" type="bullet">

Step 1: If h&amp;gt;1 then first use this procedure to move the h-1 smaller disks from peg <b>f</b> to peg <b>r</b>.</entry>
<entry level="1" type="bullet">

Step 2: Now the largest disk, i.e. disk h-1 can be moved from peg <b>f</b> to peg <b>t</b>.</entry>
<entry level="1" type="bullet">

Step 3: If h&amp;gt;1 then again use this procedure to move the h-1 smaller disks from peg <b>r</b> to peg <b>t</b>.</entry>
</list>
</p>
<p>

By means of <link xlink:type="simple" xlink:href="../881/18881.xml">
mathematical induction</link>, it is easily proven that the above procedure requires the minimal number of moves possible, and that the produced solution is the only one with this minimal number of moves. </p>
<p>

Using <link xlink:type="simple" xlink:href="../806/146806.xml">
recurrence relation</link>s, the exact number of moves that this solution requires can be calculated by: <math>2^h - 1</math>. This result is obtained by noting that steps 1 and 3 take <math>T_{h-1}</math> moves, and step 2 takes one move, giving <math>T_h = 2T_{h-1} + 1</math>.</p>
<p>

The algorithm can be written elegantly in <link xlink:type="simple" xlink:href="../933/10933.xml">
functional programming</link> languages, such as <link xlink:type="simple" xlink:href="../652/39652.xml">
OCaml</link>:</p>


<p>

let rec move_tower n a b c = match n with
| 1 -&amp;gt; [(a,c)]
| _ -&amp;gt; (move_tower (n-1) a c b) @ (move_tower 1 a b c) @ (move_tower (n-1) b a c);;</p>

<p>

or <link xlink:type="simple" xlink:href="../759/3358759.xml">
Lisp</link></p>

<p>

(defun hanoitowers (disc src aux dst)
(cond ((&amp;gt; disc 0)
(hanoitowers (- disc 1) src dst aux)
(princ  (list "Move" disc "from" src "to" dst))
(hanoitowers (- disc 1) aux src dst))))</p>




<p>

Recursive solutions in <link xlink:type="simple" xlink:href="../847/197847.xml">
imperative programming</link> languages typically resemble the following <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../773/23773.xml">
Pascal</link></programming_language>
 code:</p>

<p>

procedure Hanoi(n: integer; from, dest, by: char);
Begin
if (n=1) then
writeln('Move the plate from ', from, ' to ', dest)
else begin
Hanoi(n-1, from, by, dest);
Hanoi(1, from, dest, by);
Hanoi(n-1, by, dest, from);
end;
End;</p>


<p>

Implementations in many other languages may be found at the <weblink xlink:type="simple" xlink:href="http://www.kernelthread.com/hanoi/">
Hanoimania!</weblink> website.</p>



</ss1>
<ss1>
<st>
Non-recursive solution</st>
<p>

The list of moves for a tower being carried from one peg onto another one, as produced by the recursive algorithm has many regularities. When counting the moves starting from 1, the ordinal of the disk to be moved during move <it>m</it> is the number of times <it>m</it> can be divided by 2. Hence every odd move involves the smallest disk. It can also be observed that the smallest disk traverses the pegs f, t, r, f, t, r, etc. for odd height of the tower and traverses the pegs f, r, t, f, r, t, etc. for even height of the tower. This provides the following algorithm, which is easier, carried out by hand, than the recursive algorithm.</p>
<p>

In alternate moves:
<list>
<entry level="1" type="bullet">

 move the smallest disk to the peg it has not recently come from.</entry>
<entry level="1" type="bullet">

 move another disk legally (there will be one possibility only)</entry>
</list>

For the very first move, the smallest disk goes to peg t if h is odd and to peg r if h is even.</p>
<p>

So if the number of disks is even the solution will start:
<list>
<entry level="1" type="number">

Move disk 0 from peg f to peg r ignoring peg t.</entry>
<entry level="1" type="number">

Move disk 1 from peg f to peg t ignoring peg r.</entry>
<entry level="1" type="number">

Move disk 0 from peg r to peg t ignoring peg f.</entry>
<entry level="1" type="number">

Move disk 2 from peg f to peg r ignoring peg t.</entry>
<entry level="1" type="number">

Move disk 0 from peg t to peg f ignoring peg r.</entry>
<entry level="1" type="number">

Move disk 1 from peg t to peg r ignoring peg f.</entry>
<entry level="1" type="number">

Move disk 0 from peg f to peg r ignoring peg t.</entry>
<entry level="1" type="number">

Move disk 3 from peg f to peg t ignoring peg r.</entry>
<entry level="1" type="number">

Move disk 0 from peg r to peg t ignoring peg f.</entry>
<entry level="1" type="number">

Move disk 1 from peg r to peg f ignoring peg t.</entry>
<entry level="1" type="number">

Move disk 0 from peg t to peg f ignoring peg r.</entry>
<entry level="1" type="number">

Move disk 2 from peg r to peg t ignoring peg f.</entry>
<entry level="1" type="number">

Move disk 0 from peg f to peg r ignoring peg t.</entry>
<entry level="1" type="number">

Move disk 1 from peg f to peg t ignoring peg r.</entry>
<entry level="1" type="number">

Move disk 0 from peg r to peg t ignoring peg f.</entry>
<entry level="1" type="number">

Move disk 4 from peg f to peg r ignoring peg t.</entry>
</list>

etc.</p>
<p>

Also observe that:
<list>
<entry level="1" type="bullet">

 Disks whose ordinals have even parity move in the same sense as the smallest disk.</entry>
<entry level="1" type="bullet">

 Disks whose ordinals have odd parity move in opposite sense.</entry>
<entry level="1" type="bullet">

 If h is even, the remaining third peg during successive moves is t, r, f, t, r, f, etc.</entry>
<entry level="1" type="bullet">

 If h is odd, the remaining third peg during successive moves is r, t, f, r, t, f, etc.</entry>
</list>
</p>

</ss1>
<ss1>
<st>
Binary solutions</st>
<p>

Disk positions may be determined more directly from the <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../686/238686.xml">
binary</link></instrumentality>
</artifact>
</system>
 (base 2) representation of the move number (the initial state being move #0, with all digits 0, and the final state being #2<it>n</it>−1, with all digits 1), using the following rules:
<list>
<entry level="1" type="bullet">

 There is one binary digit (<link xlink:type="simple" xlink:href="../364/3364.xml">
bit</link>) for each disk</entry>
<entry level="1" type="bullet">

 The most significant (leftmost) bit represents the largest disk. A value of 0 indicates that the largest disk is on the initial peg, while a 1 indicates that it's on the final peg.</entry>
<entry level="1" type="bullet">

 The bitstring is read from left to right, and each bit can be used to determine the location of the corresponding disk.</entry>
<entry level="1" type="bullet">

 A bit with the same value as the previous one means that the corresponding disk is stacked on top the previous disk on the same peg.</entry>
<entry level="2" type="bullet">

 (That is to say: a straight sequence of 1's or 0's means that the corresponding disks are all on the same peg).</entry>
<entry level="1" type="bullet">

 A bit with a different value to the previous one means that the corresponding disk is one position to the left or right of the previous one. Whether it is left or right is determined by this rule:</entry>
<entry level="2" type="bullet">

 Assume that the initial peg is on the left and the final peg is on the right.</entry>
<entry level="2" type="bullet">

 Also assume "wrapping" - so the right peg counts as one peg "left" of the left peg, and vice versa.</entry>
<entry level="2" type="bullet">

 Let n be the number of greater disks that are located on the same peg as their first greater disk and add 1 if the largest disk is on the left peg. If n is even, the disk is located one peg to the left, if n is odd, the disk located one peg to the right.</entry>
</list>
</p>
<p>

For example, in an 8-disk Hanoi:
<list>
<entry level="1" type="bullet">

 Move #0)</entry>
<entry level="2" type="bullet">

 The largest disk is 0, so it is on the left (initial) peg.</entry>
<entry level="2" type="bullet">

 All other disks are 0 as well, so they are stacked on top of it. Hence all disks are on the initial peg.</entry>
<entry level="1" type="bullet">

 Move #2^8-1)</entry>
<entry level="2" type="bullet">

 The largest disk is 1, so it is on the right (final) peg.</entry>
<entry level="2" type="bullet">

 All other disks are 1 as well, so they are stacked on top of it. Hence all disks are on the final peg and the puzzle is complete.</entry>
<entry level="1" type="bullet">

 Move #0b11011000)</entry>
<entry level="2" type="bullet">

 The largest disk is 1, so it is on the right (final) peg.</entry>
<entry level="2" type="bullet">

 Disk two is also 1, so it is stacked on top of it, on the right peg.</entry>
<entry level="2" type="bullet">

 Disk three is 0, so it is on another peg. Since n is odd, it is one peg to the right, i.e. on the left peg.</entry>
<entry level="2" type="bullet">

 Disk four is 1, so it is on another peg. Since n is still even, it is one peg to the left, i.e. on the right peg.</entry>
<entry level="2" type="bullet">

 Disk five is also 1, so it is stacked on top of it, on the right peg.</entry>
<entry level="2" type="bullet">

 Disk six is 0, so it is on another peg. Since n is even, the disk is one peg to the left, i.e. on the middle peg.</entry>
<entry level="2" type="bullet">

 Disks seven and eight are also 0, so they are stacked on top of it, on the middle peg.</entry>
</list>
</p>
<p>

The above algorithm can be coded in Scheme as follows:</p>
<p>

(define (conf m h f t) ; m=move number, h=height of tower, f=starting peg, t=destination peg
<list>
<entry level="1" type="definition">

 Identify the pegs by the numbers 0, 1 and 2.</entry>
</list>

(let loop ((prev-zero? #t) (mask (arithmetic-shift 1 (sub1 h))) (rotation (- t f)) (f f))
(if (zero? mask) ()
(let ((zero-bit? (zero? (bitwise-and mask m))) (mask (arithmetic-shift mask -1)))
(if (eq? prev-zero? zero-bit?) (cons f (loop zero-bit? mask (- rotation) f))
(let ((f (modulo (+ f rotation) 3)))
(cons f (loop zero-bit? mask rotation f))))))))</p>

<p>

This procedure produces a list of the positions of the disks in order of decreasing size.
Example:</p>
<p>

&amp;gt; (conf #e6022e20 80 0 2)
(01111111100001201201221111201112012000)</p>

<p>

The source and destination pegs for the <it>m</it>th move can also be found elegantly from the binary representation of <it>m</it> using <link xlink:type="simple" xlink:href="../399/264399.xml">
bitwise operation</link>s.  To use the syntax of the <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../021/6021.xml">
C programming language</link></programming_language>
, the <it>m</it>th move is from peg (m&amp;m-1)%3 to peg ((m|m-1)+1)%3, where the disks begin on peg 0 and finish on peg 1 or 2 according as whether the number of disks is even or odd. Furthermore the disk to be moved is determined by the number of times the move count (m) can be divided by 2 (i.e. the number of zero bits at the right), counting the first move as 1 and identifying the disks by the numbers 0, 1, 2 etc in order of increasing size. This permits a very fast non-recursive computer implementation to find the positions of the disks after m moves without reference to any previous move or distribution of disks:</p>
<p>

<list>
<entry level="1" type="definition">

 h : total number of disks</entry>
<entry level="1" type="definition">

 m : move counter, starting with 1 for the first move.</entry>
<entry level="1" type="definition">

 f : starting peg; the pegs are identified by the numbers 0, 1 and 2.</entry>
<entry level="1" type="definition">

 t : destination peg</entry>
<entry level="1" type="definition">

 d : disk (numbered 0, 1, 2, etc in order of increasing size)</entry>
<entry level="1" type="definition">

 Function =quotient= takes two integer numbers and computes their quotient rounded to integer towards zero.</entry>
<entry level="1" type="definition">

 (rot3 m) : sense of rotation of the remaining third peg during move m.</entry>
<entry level="1" type="definition">

 (rotd d) : sense of rotation of disk d.</entry>
<entry level="1" type="definition">

 mcnt : number of moves disk d has made after a total of m moves.</entry>
<entry level="1" type="definition">

 from : the peg a disk is taken from during move m.</entry>
<entry level="1" type="definition">

 onto : the peg a disk is put onto during move m.</entry>
<entry level="1" type="definition">

 thrd : the remaining third peg. (- 3 from onto)</entry>
<entry level="1" type="definition">

 disk : disk being moved.</entry>
<entry level="1" type="definition">

 conf : position of disk d after a total of m moves.</entry>
</list>
</p>
<p>

(define (exp2 n        ) (expt   2 n))
(define (mod2 n        ) (modulo n 2))
(define (mod3 n        ) (modulo n 3))
(define (pari n        ) (add1 (mod2 (add1 n))))
(define (rotd   h d f t) (mod3 (* (- t f) (pari (- h d)))))
(define (rot3   h   f t) (rotd h 0 f t))
(define (mcnt m   d    ) (quotient (+ m (exp2 d)) (exp2 (add1 d))))
(define (thrd m h   f t) (mod3 (- f (* m (rot3 h f t)))))
(define (onto m h   f t) (mod3 (- (thrd m h f t) (rotd h (disk m) f t))))
(define (from m h   f t) (mod3 (+ (thrd m h f t) (rotd h (disk m) f t))))
(define (conf m h d f t) (mod3 (+ f (* (rotd h d f t) (mcnt m d)))))
(define (disk m        ) (sub1 (bit-count (bitwise-xor m (sub1 m)))))</p>


</ss1>
<ss1>
<st>
Gray code solution</st>
<p>

The <link xlink:type="simple" xlink:href="../686/238686.xml">
binary numeral system</link> of <link xlink:type="simple" xlink:href="../564/50564.xml">
Gray code</link>s gives an alternative way of solving the puzzle. In the Gray system, numbers are expressed in a binary combination of 0s and 1s, but rather than being a standard <link xlink:type="simple" xlink:href="../170/21170.xml">
positional numeral system</link>, Gray code operates on the premise that each value differs from its predecessor by only one (and exactly one) bit changed. The number of bits present in Gray code is important, and leading zeros are not optional, unlike in positional systems.</p>
<p>

If one counts in Gray code of a bit size equal to the number of disks in a particular Tower of Hanoi, begins at zero, and counts up, then the bit changed each move corresponds to the disk to move, where the least-significant-bit is the smallest disk and the most-significant-bit is the largest.</p>
<p>

<indent level="1">

Counting moves from 1 and identifying the disks by numbers starting from 0 in order of increasing size, the ordinal of the disk to be moved during move m is the number of times m can be divided by 2.
</indent>

This technique identifies which disk to move, but not where to move it to. For the smallest disk there are always two possibilities. For the other disks there is always one possibility, except when all disks are on the same peg, but in that case either it is the smallest disk that must be moved or the objective has already been achieved. Luckily, there is a rule which does say where to move the smallest disk to. Let f be the starting peg, t the destination peg and r the remaining third peg. If the number of disks is odd, the smallest disk cycles along the pegs in the order f-&amp;gt;t-&amp;gt;r-&amp;gt;f-&amp;gt;t-&amp;gt;r, etc. If the number of disks is even, this must be reversed: f-&amp;gt;r-&amp;gt;t-&amp;gt;f-&amp;gt;r-&amp;gt;t etc. <weblink xlink:type="simple" xlink:href="http://occawlonline.pearsoned.com/bookbind/pubbooks/miller2_awl/chapter4/essay1/deluxe-content.html#tower">
http://occawlonline.pearsoned.com/bookbind/pubbooks/miller2_awl/chapter4/essay1/deluxe-content.html#tower</weblink></p>

</ss1>
</sec>
<sec>
<st>
Long solutions</st>
<p>

A modification of the game can be to move the tower from one peg to another peg using as many moves as possible without ever producing the same distribution of disks more than once. A simple algorithm (written in Scheme) is:</p>

<p>

(define (long-move-tower h f t r)
(if (positive? h)
(let ((h (sub1 h)))
(long-move-tower h f t r)
(move-disk       h f r t)
(long-move-tower h t f r)
(move-disk       h r t f)
(long-move-tower h f t r))))</p>

<p>

Where procedure (move-disk d f t r) moves disk d from peg f onto peg t, ignoring peg r. The number of moves of this uniquely defined solution is 3height-1 and all 3height different distributions of disks are traversed (when including the starting and final distribution). This is called a <link xlink:type="simple" xlink:href="../437/244437.xml">
Hamilton path</link>. For this solution the disk to be moved can be found with a ternary gray code in a similar way as explained for the shortest solution. In fact there is a ternary Gray code starting with all digits 0 and ending with all digits equal 2, that lists the successive distributions of disks of a Hamilton path from peg 0 to peg 2 for a tower of h disks, each code showing the positions of the disks in decreasing order of size when read from left to right. This Gray code is uniquely defined by imposing the extra condition that each digit is switched more often than each more significant digit on the left. This is the code needed for the Tower of Hanoi.</p>

<p>

(define (number-&amp;gt;p-ary-gray-code n h p) ; n h p --&amp;gt; n-th h digit p-ary gray-code
(let ((2p (* 2 p)))
(let loop ((n n) (h h) (gc ()))
(if (zero? h) gc
(let ((q (quotient n p)) (r (modulo n 2p)))
(loop q (sub1 h) (cons (if (&amp;gt;= r p) (- 2p r 1) r) gc)))))))</p>
<p>

(define (p-ary-gray-code-&amp;gt;number gc p) ; n-th p-ary gray-code --&amp;gt; n
(let loop ((gc gc) (significance (expt p (sub1 (length gc)))))
(if (null? gc) 0
(let ((digit (car gc)) (gc (cdr gc)))
(let ((n (loop gc (quotient significance p))))
(+ (* digit significance)
(if (odd? digit) (- significance n 1) n)))))))</p>
<p>

(define (number-&amp;gt;hanoian-gray-code n h) (number-&amp;gt;p-ary-gray-code n h 3))
(define (hanoian-gray-code-&amp;gt;number gc) (p-ary-gray-code-&amp;gt;number gc 3))</p>

<p>

The disk to be moved is determined by the number of times the move counter can be divided by 3. Where the disk is to be moved to can easily be determined too. For every triplet of moves, move the smallest disk twice in succession in the same direction, followed by a move of one of the larger disks (only one direction possible) Between every triplet of moves reverse the direction of the smallest disk. The very first move of the smallest disk is to be made from the starting peg onto the remaining third peg. Also observe that the unused peg of each move alternates between the starting and destination peg. These statements are easily proven by mathematical induction.</p>

<p>

(define (exp3 n        ) (expt   3 n))
(define (mod3 n        ) (modulo n 3))
(define (mod4 n        ) (modulo n 4))
(define (mcnt m   d    ) (+ (* 2 (quotient m (exp3 (add1 d)))) (mod3 (quotient m (exp3 d)))))
(define (thrd m h   f t) (if (odd? m) t f))
(define (onto m h   f t) (posi m h (disk m) f t))
(define (from m h   f t) (- 3 (onto m h f t) (thrd m h f t)))
(define (posi m h d f t) (vector-ref (vector f (- 3 f t) t (- 3 f t)) (mod4 (mcnt m d))))
(define (disk m) (if (zero? (mod3 m)) (add1 (disk (quotient m 3))) 0))</p>

<p>

Another modification is to move a tower from a peg back to the same peg while traversing all distributions of disks. (circular Hamilton path) There are exactly two solutions, but they mirror each other in the sense that there is in fact one path that can be traversed in both directions. Obviously, the length of the path is 3height. A simple algorithm for the circular Hamilton path is:</p>

<p>

(define (circular-hamilton-move-tower h a b c) ; h=height. a, b and c are the three pegs.
(if (positive? h) ; start with a tower at peg a, move tower to peg b, then to peg c and finally return to peg a.
(let ((h-1 (sub1 h)))
(hamilton-start  h-1 a c b)   ; The largest disk is moved three times.
(move-disk       h-1 a b c)   ; Between these moves the longest non selfcrossing path is used in order to move the
(long-move-tower h-1 c a b)   ; partial tower consisting of the h-1 smaller disks from one peg onto another one.
(move-disk       h-1 b c a)   ; Together the procedures hamilton-start and hamilton-finish make such a longest
(long-move-tower h-1 a b c)   ; non selfcrossing path too. The moves made by hamiton-finish followed by
(move-disk       h-1 c a b)   ; those of hamilton-start form a longest non selfcrossing path for the same
(hamilton-finish h-1 b a c)))); partial tower from peg b to peg c.</p>
<p>

(define (hamilton-start h a b c)
(if (positive? h)
(let ((h-1 (sub1 h)))
(hamilton-start  h-1 a c b)
(move-disk       h-1 a b c)
(long-move-tower h-1 c b a))))</p>
<p>

(define (hamilton-finish h a b c)
(if (positive? h)
(let ((h-1 (sub1 h)))
(long-move-tower h-1 a c b)
(move-disk       h-1 a b c)
(hamilton-finish h-1 c b a))))</p>


</sec>
<sec>
<st>
Graphical representation</st>
<p>

The game can be represented by an undirected <link xlink:type="simple" xlink:href="../806/325806.xml">
graph</link>, the nodes representing distributions of disks and the branches representing moves. For one disk, the graph is a triangle:</p>
<p>

<image location="center" width="150px" src="Tower_of_Hanoi-1.svg">
</image>
</p>
<p>

The graph for 2 disks is 3 triangles arranged in a larger triangle:</p>
<p>

<image location="center" width="150px" src="Tower_of_Hanoi-2.svg">
</image>
</p>
<p>

The nodes at the vertices of the outermost triangle represent distributions with all disks on the same peg. </p>
<p>

For h+1 disks, take the graph of h disks and replace each small triangle with the graph for 2 disks.</p>
<p>

For 3 disks the graph is:</p>
<p>

<image location="center" width="440px" src="Tower_of_Hanoi-3.svg">
</image>

<list>
<entry level="1" type="bullet">

 call the pegs a, b and c</entry>
<entry level="1" type="bullet">

 list disk positions from left to right in order of increasing size</entry>
</list>
</p>
<p>

The sides of the outermost triangle represent the shortest ways of moving a tower from one peg to another one. The branch in the middle of the sides of the largest triangle represents a move of the largest disk. The branch in the middle of the sides of each next smaller triangle represents a move of each next smaller disk. The sides of the smallest triangles represent moves of the smallest disk.</p>
<p>

<image location="right" width="150px" src="Hanoi-Graph-7.svg" type="thumb">
<caption>

The game graph of level 7 shows the relatedness to the <link>
Sierpiński Triangle</link>
</caption>
</image>

In general, for a puzzle with <it>n</it> disks, there are 3<it>n</it> nodes in the graph; every node has three branches to other nodes, except the three corner nodes, which have two: it is always possible to move the smallest disk to the one of the two other pegs; and it is possible to move one disk between those two pegs <it>except</it> in the situation where all disks are stacked on one peg. The corner nodes represent the three cases where all the disks are stacked on one peg. The diagram for <it>n</it>+1 disks is obtained by taking three copies of the <it>n</it>-disk diagram -- each one representing all the states and moves of the smaller disks for one particular position of the new largest disk -- and joining them at the corners with three new branches, representing the only three opportunities to move the largest disk. The resulting figure thus has 3<it>n</it>+1 nodes and still has three corners remaining with only two branches. </p>
<p>

As more disks are added, the graph representation of the game will resemble the <link xlink:type="simple" xlink:href="../913/10913.xml">
Fractal</link> figure, <link>
Sierpiński triangle</link>. It is clear that the great majority of positions in the puzzle will never be reached when using the shortest possible solution; indeed, if the priests of the legend are using the longest possible solution (without re-visiting any position) it will take them 364-1 moves, or more than 1023 years.</p>

<p>

The longest non-repetitive way for three disks can be visualized by erasing the unused branches:</p>
<p>

<image location="center" width="440px" src="Tower_of_Hanoi-3_Longest_Path.svg">
</image>
</p>
<p>

The circular <condition wordnetid="113920835" confidence="0.8">
<state wordnetid="100024720" confidence="0.8">
<problem wordnetid="114410605" confidence="0.8">
<difficulty wordnetid="114408086" confidence="0.8">
<link xlink:type="simple" xlink:href="../437/244437.xml">
Hamiltonian path</link></difficulty>
</problem>
</state>
</condition>
 for three disks is:</p>
<p>

ccc
/\         ; call the pegs a, b and c
acc /  \ bcc    ; list disk positions from left to right in order of increasing size
/    \
abc /      \ bac
\      /
bbc  __\    /__  aac
/  cbc  cac  \
bba /              \ aab
\              /
cba  __\aba      bab/__  cab
/                    \
caa /       aca  bcb       \ cbb
/       /\      /\       \
aaa /__  __ /  \ __ /  \ __  __\ bbb
baa  bca cca ccb acb abb </p>
<p>

The graphs clearly show that:
<list>
<entry level="1" type="bullet">

 From every arbitrary distribution of disks, there is exactly one shortest way to move all disks onto one of the three pegs.</entry>
<entry level="1" type="bullet">

 Between every pair of arbitrary distributions of disks there are one or two different shortest paths. </entry>
<entry level="1" type="bullet">

 From every arbitrary distribution of disks, there are one or two different longest non selfcrossing paths to move all disks to one of the three pegs.</entry>
<entry level="1" type="bullet">

 Between every pair of arbitrary distributions of disks there are one or two different longest non selfcrossing paths.</entry>
<entry level="1" type="bullet">

 Let Nh be the number of non selfcrossing paths for moving a tower of h disks from one peg to another one. Then:</entry>
<entry level="2" type="bullet">

 N1=2</entry>
<entry level="2" type="bullet">

 Nh+1=(Nh)2+(Nh)3.</entry>
<entry level="2" type="bullet">

 For example: N8≈1.5456x10795</entry>
</list>
</p>

</sec>
<sec>
<st>
 Applications </st>
<p>

The Tower of Hanoi is frequently used in psychological research on <link xlink:type="simple" xlink:href="../948/1467948.xml">
problem solving</link>. There also exists a variant of this task called <process wordnetid="105701363" confidence="0.8">
<inquiry wordnetid="105797597" confidence="0.8">
<thinking wordnetid="105770926" confidence="0.8">
<problem_solving wordnetid="105796750" confidence="0.8">
<experiment wordnetid="105798043" confidence="0.8">
<trial wordnetid="105799212" confidence="0.8">
<higher_cognitive_process wordnetid="105770664" confidence="0.8">
<link xlink:type="simple" xlink:href="../108/3305108.xml">
Tower of London</link></higher_cognitive_process>
</trial>
</experiment>
</problem_solving>
</thinking>
</inquiry>
</process>
 for neuropsychological diagnosis and treatment of executive functions.</p>
<p>

The Tower of Hanoi is also used as <link xlink:type="simple" xlink:href="../684/3508684.xml">
Backup rotation scheme</link> when performing computer data <link xlink:type="simple" xlink:href="../867/533867.xml">
Backups</link> where multiple tapes/media are involved.</p>
<p>

As mentioned above, the Tower of Hanoi is popular for teaching recursive algorithms to beginning programming students. A pictorial version of this puzzle is programmed into the <link xlink:type="simple" xlink:href="../234/18933234.xml">
emacs</link> editor, accessed by typing M-x hanoi. There is also a sample algorithm written in <link xlink:type="simple" xlink:href="../485/23485.xml">
Prolog</link>.</p>
<p>

The Tower of Hanoi is also used as a <link xlink:type="simple" xlink:href="../844/18844.xml">
memory</link> test by neuropsychologists trying to evaluate amnesia.</p>

</sec>
<sec>
<st>
 Four pegs and beyond </st>
<p>

Although the three-peg version has a simple recursive solution as outlined above, the <it>optimal</it> solution for the Tower of Hanoi problem with four or more pegs is still an <link xlink:type="simple" xlink:href="../335/1333335.xml">
open problem</link>. This is a good example of how a simple, solvable problem can be made dramatically more difficult by slightly loosening one of the problem constraints.</p>
<p>

The fact that the problem with four or more pegs is an open problem does not imply that no algorithm exists for finding (all of) the optimal solutions. Simply represent the game by an undirected graph, the nodes being distributions of disks and the edges being moves (of length 1) and use <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../809/45809.xml">
Dijkstra's algorithm</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
 to find one (or all) shortest paths moving a tower from one peg onto another one. However, even smartly implemented on the fastest computer now available, this algorithm provides no way of effectively computing solutions for large numbers of disks; the program would require more time and memory than available. Hence, even having an algorithm, it remains unknown how many moves an optimal solution requires and how many optimal solutions exist for 1000 disks and 10 pegs.  </p>
<p>

Though it is not known exactly how many moves must be made, there are some asymptotic results. There is also a "presumed-optimal solution" that can be recursively applied to find a solution - see <weblink xlink:type="simple" xlink:href="http://www.cs.wm.edu/~pkstoc/boca.ps">
Paul Stockmeyer's survey paper</weblink> for an explanation and some variants of the four-peg problem.</p>
<p>

Although it agrees with computer experiments for small numbers of disks, there is not yet a general proof that this presumed-optimal solution is in fact optimal. However, <weblink xlink:type="simple" xlink:href="http://epubs.siam.org/sam-bin/dbq/article/43101">
results in 2004</weblink> showed that the presumed-optimal solution must be of the same order of magnitude as the optimal solution.</p>

<ss1>
<st>
 Description of the presumed-optimal solution </st>
<p>

The problem for four pegs is sometimes called "Reve's puzzle". <it>A</it> solution for four (or more) pegs, which has not been proved to be optimal, is described below:
<list>
<entry level="1" type="bullet">

 Let <math>n</math> be the number of disks.</entry>
<entry level="1" type="bullet">

 Let <math>r</math> be the number of pegs.</entry>
<entry level="1" type="bullet">

 Define <math>T(n,r)</math> to be the number of moves required to transfer n disks using r pegs</entry>
</list>

The algorithm can be described recursively:
<list>
<entry level="1" type="number">

 For some <math>k</math>, <math>1 \leq k &amp;lt; n</math>, transfer the top <math>k</math> disks to a single other peg, taking <math>T(k,r)</math> moves.</entry>
<entry level="1" type="number">

 Without disturbing the peg that now contains the top <math>k</math> disks, transfer the remaining <math>n-k</math> disks to the destination peg, using only the remaining <math>r-1</math> pegs, taking <math>T(n-k,r-1)</math> moves.</entry>
<entry level="1" type="number">

 Finally, transfer the top <math>k</math> disks to the destination peg, taking <math>T(k,r)</math> moves.</entry>
</list>

The entire process takes <math>2T(k,r)+T(n-k,r-1)</math> moves. Therefore, the count <math>k</math> should be picked for which this quantity is minimum. 
This algorithm (with the above choice for <math>k</math>) is presumed to be optimal, and no counterexamples are known.</p>

</ss1>
<ss1>
<st>
Two stacks and more stacks</st>

<p>

A 2007 U.S. patent application purportedly discloses multistack Tower of Hanoi puzzles [Feb. 1, 2007, Serial No.11/701,454] with two or more stacks and twice as many pegs as stacks.  After beginning on a particular peg, each stack displaces and is displaced by a different colored stack on another peg when the puzzle is solved.  Disks of one color also have another peg that excludes all other colors, so that there are three pegs available for each color disk, two that are shared with other colors and one that is not shared.  On the shared pegs, a disk may not be placed on a different colored disk of the same size, a possibility that does not arise in the standard puzzle.</p>
<p>

The simplest multistack game (2 x 4) has two stacks and four pegs, and it requires 3[T(n)] moves to solve where T(n) is the number of moves needed to solve a single stack classic of n disks. The game proceeds in seesaw fashion with longer and longer series of moves that alternate between colors. It concludes in reverse seesaw fashion with shorter and shorter such series of moves. Starting with the second series of three moves, these alternate series of moves double in length for the first half of the game, and the lengths are halved as the game concludes. The solution involves nesting an algorithm suitable for Tower of Hanoi into an algorithm that indicates when to switch between colors. When there are k stacks of n disks apiece in a game, and k &amp;gt; 2, it requires k[T(n)] + T(n-1) moves to relocate them. </p>
<p>

The addition of a centrally located universal peg open to disks from all stacks converts these multistack Tower of Hanoi puzzles to multistack Reve's puzzles as described in the preceding section.  In these games each stack may move among four pegs, the same combination of three in the 2 x 4 game plus the central universal peg.  The simplest game of this kind (2 x 5) has two stacks and five pegs.  A solution conjectured to be optimal interlocks the optimal solution of the 2 x 4 puzzle with the presumed optimal solution to Reve's puzzle.  It takes R(n) + 2R(n-1) + 2 moves, where R(n) is the number of moves in the presumed optimal Reve's solution for a stack of n disks.</p>

</ss1>
</sec>
<sec>
<st>
 In popular culture </st>
<p>

In the classic science fiction story <it>Now Inhale</it>, by <physical_entity wordnetid="100001930" confidence="0.8">
<communicator wordnetid="109610660" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<anarchist wordnetid="109791816" confidence="0.8">
<writer wordnetid="110794014" confidence="0.8">
<radical wordnetid="110503452" confidence="0.8">
<link xlink:type="simple" xlink:href="../657/105657.xml">
Eric Frank Russell</link></radical>
</writer>
</anarchist>
</causal_agent>
</person>
</communicator>
</physical_entity>
 (<it>Astounding Science Fiction</it> April 1959, and in various anthologies), the human hero is a prisoner on a planet where the local custom is to make the prisoner play a game until it is won or lost, and then execution is immediate. The hero is told the game can be one of his own species', as long as it can be played in his cell with simple equipment strictly according to rules which are written down before and cannot change after play starts, and it has a finite endpoint. The game and execution are televised planet-wide, and watching the desperate prisoner try to spin the game out as long as possible is very popular entertainment; the record is sixteen days. The hero knows a rescue ship might take a year or more to arrive, so chooses to play Towers of Hanoi with 64 disks until rescue arrives. When the locals realize they've been had, they are angry, but under their own rules there is nothing they can do about it. They do change the rules, which will apply to any <it>future</it> prisoners. This story makes reference to the legend about the Buddhist monks playing the game until the end of the world, and refers to the game as <b>arkymalarky</b>. (The slang term "malarky", meaning nonsense, pre-dates this story by at least 30 years. <weblink xlink:type="simple" xlink:href="http://www.phrases.org.uk/bulletin_board/7/messages/555.html">
http://www.phrases.org.uk/bulletin_board/7/messages/555.html</weblink>)</p>
<p>

In the movie <movie wordnetid="106613686" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../050/4155050.xml">
Stranger than Fiction</link></movie>
, a miniature Towers of Hanoi puzzle can be seen on the cluttered desk of Professor Jules Hilbert.</p>
<p>

In the <it><series wordnetid="108457976" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../209/8209.xml">
Doctor Who</link></series>
</it> serial "<music wordnetid="107020895" confidence="0.8">
<episode wordnetid="106396330" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<auditory_communication wordnetid="107109019" confidence="0.8">
<broadcast wordnetid="106619428" confidence="0.8">
<written_communication wordnetid="106349220" confidence="0.8">
<writing wordnetid="106362953" confidence="0.8">
<social_event wordnetid="107288639" confidence="0.8">
<show wordnetid="106619065" confidence="0.8">
<serial wordnetid="106621447" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<section wordnetid="106392001" confidence="0.8">
<link xlink:type="simple" xlink:href="../668/1859668.xml">
The Celestial Toymaker</link></section>
</psychological_feature>
</serial>
</show>
</social_event>
</writing>
</written_communication>
</broadcast>
</auditory_communication>
</event>
</episode>
</music>
", the Toymaker challenges the Doctor to complete the "Trilogic Game" (ten disk Hanoi) in exactly 1,023 (210 − 1) moves.</p>
<p>

There is a band named <weblink xlink:type="simple" xlink:href="http://www.towersofhanoi.org">
Towers of Hanoi</weblink>.</p>

<ss1>
<st>
 In video games </st>
<p>

The puzzle is featured regularly in <genre wordnetid="105845332" confidence="0.8">
<idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<category wordnetid="105838765" confidence="0.8">
<kind wordnetid="105839024" confidence="0.8">
<link xlink:type="simple" xlink:href="../472/59472.xml">
adventure</link></kind>
</category>
</concept>
</idea>
</genre>
 and <link xlink:type="simple" xlink:href="../393/32393.xml">
puzzle</link> games. Since it is easy to implement, and easily-recognised, it is well-suited to use as a puzzle in a larger graphical game. Some implementations use straight disks, but others disguise the puzzle in some other form. What follows is a partial list of games which use the puzzle:
<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../506/402506.xml">
Black &amp; White</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../638/18791638.xml">
The Island of Dr. Brain</link></entry>
<entry level="1" type="bullet">

 <event wordnetid="100029378" confidence="0.8">
<social_event wordnetid="107288639" confidence="0.8">
<contest wordnetid="107456188" confidence="0.8">
<game wordnetid="100456199" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<link xlink:type="simple" xlink:href="../136/5723136.xml">
The Secret Island of Dr. Quandary</link></psychological_feature>
</game>
</contest>
</social_event>
</event>
</entry>
<entry level="1" type="bullet">

 </entry>
<entry level="1" type="bullet">

 <event wordnetid="100029378" confidence="0.8">
<social_event wordnetid="107288639" confidence="0.8">
<contest wordnetid="107456188" confidence="0.8">
<game wordnetid="100456199" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<link xlink:type="simple" xlink:href="../929/1666929.xml">
Zork Zero</link></psychological_feature>
</game>
</contest>
</social_event>
</event>
</entry>
<entry level="1" type="bullet">

 </entry>
<entry level="1" type="bullet">

 <link>
Escape from Paradise</link></entry>
<entry level="1" type="bullet">

 </entry>
<entry level="1" type="bullet">

 <event wordnetid="100029378" confidence="0.8">
<social_event wordnetid="107288639" confidence="0.8">
<contest wordnetid="107456188" confidence="0.8">
<game wordnetid="100456199" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<link xlink:type="simple" xlink:href="../857/867857.xml">
Clan Lord</link></psychological_feature>
</game>
</contest>
</social_event>
</event>
</entry>
<entry level="1" type="bullet">

 <music wordnetid="107020895" confidence="0.8">
<classical_music wordnetid="107025900" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<auditory_communication wordnetid="107109019" confidence="0.8">
<social_event wordnetid="107288639" confidence="0.8">
<contest wordnetid="107456188" confidence="0.8">
<opera wordnetid="107026352" confidence="0.8">
<music_genre wordnetid="107071942" confidence="0.8">
<game wordnetid="100456199" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<expressive_style wordnetid="107066659" confidence="0.8">
<link xlink:type="simple" xlink:href="../388/2933388.xml">
Mass Effect</link></expressive_style>
</psychological_feature>
</game>
</music_genre>
</opera>
</contest>
</social_event>
</auditory_communication>
</event>
</classical_music>
</music>
</entry>
<entry level="1" type="bullet">

 <event wordnetid="100029378" confidence="0.8">
<social_event wordnetid="107288639" confidence="0.8">
<contest wordnetid="107456188" confidence="0.8">
<game wordnetid="100456199" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<link xlink:type="simple" xlink:href="../319/12949319.xml">
Azada</link></psychological_feature>
</game>
</contest>
</social_event>
</event>
</entry>
</list>
</p>

</ss1>
</sec>
<sec>
<st>
See also</st>
<p>

<list>
<entry level="1" type="bullet">

<puzzle wordnetid="106784639" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<subject wordnetid="106599788" confidence="0.8">
<contest wordnetid="107456188" confidence="0.8">
<social_event wordnetid="107288639" confidence="0.8">
<problem wordnetid="106784003" confidence="0.8">
<game wordnetid="100456199" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<message wordnetid="106598915" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<question wordnetid="106783768" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<link xlink:type="simple" xlink:href="../562/2558562.xml">
Baguenaudier</link></psychological_feature>
</wordnet>
</question>
</event>
</message>
</database>
</game>
</problem>
</social_event>
</contest>
</subject>
</lexical_database>
</electronic_database>
</information>
</puzzle>
</entry>
<entry level="1" type="bullet">

<parlance wordnetid="107081177" confidence="0.8">
<formulation wordnetid="107069948" confidence="0.8">
<expressive_style wordnetid="107066659" confidence="0.8">
<link xlink:type="simple" xlink:href="../867/4044867.xml">
Recursion (computer science)</link></expressive_style>
</formulation>
</parlance>
</entry>
</list>
</p>

</sec>
<sec>
<st>
Notes</st>

<p>

<reflist>
<entry id="1">
<it>1000 Play Thinks</it>.</entry>
</reflist>
</p>


</sec>
<sec>
<st>
 External links </st>



<ss1>
<st>
Online demonstrations</st>
<p>

<list>
<entry level="1" type="bullet">

 <it><weblink xlink:type="simple" xlink:href="http://demonstrations.wolfram.com/TowersOfHanoi/">
Towers of Hanoi</weblink></it> by Jay Warendorff based on a program by Jaime Rangel-Mondragón, <link xlink:type="simple" xlink:href="../109/594109.xml">
The Wolfram Demonstrations Project</link>.</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.alexmaslin.org/toh.html">
A simple online demonstration.</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.mathapplets.net">
Multi-Peg Tower of Hanoi Applet</weblink></entry>
</list>
</p>

</ss1>
<ss1>
<st>
Algorithm</st>
<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.cut-the-knot.org/recurrence/hanoi.shtml">
Theory, recursive and per step algorithms with Java implementation</weblink> at <link xlink:type="simple" xlink:href="../167/3259167.xml">
cut-the-knot</link></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://24bytes.com/Towers-Of-Hanoi.html">
Towers Of Hanoi in c++ using Stacks </weblink> at <link>
24bytes</link></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.cut-the-knot.org/recurrence/BiColorHanoi.shtml">
Bicolor Tower of Hanoi</weblink> at <link xlink:type="simple" xlink:href="../167/3259167.xml">
cut-the-knot</link></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.kernelthread.com/hanoi/">
Hanoimania, implementations of the Tower of Hanoi problem in over 100 different programming environments and languages</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://math.bu.edu/DYSYS/applets/hanoi.html">
Towers of Hanoi Online game</weblink></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://occawlonline.pearsoned.com/bookbind/pubbooks/miller2_awl/chapter4/essay1/deluxe-content.html#tower">
Binary Numbers and the Standard Gray Code, with a discussion of the Gray Code solution</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.telefonica.net/web2/koot/hanoi.doc">
A variety of Tower of Hanoi Algorithms in PLT MzScheme</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.quitebasic.com/prj/puzzle/towers-of-hanoi/">
Solution in an all web-based interactive classical BASIC environment</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.datastructures.info/the-towers-of-hanoi/">
Two non-recursive solutions in C++</weblink></entry>
</list>
</p>

</ss1>
<ss1>
<st>
Events</st>
<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www-mat.pfmb.uni-mb.si/toh2005/">
http://www-mat.pfmb.uni-mb.si/toh2005/</weblink> Workshop on the Tower of Hanoi and Related Problems, 18.9. - 22.9.2005, Maribor, Slovenia</entry>
</list>
</p>





</ss1>
</sec>
</bdy>
</question>
</problem>
</subject>
</message>
</puzzle>
</article>
