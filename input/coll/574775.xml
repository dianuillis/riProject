<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 17:19:24[mciao0826] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>Abstraction layer</title>
<id>574775</id>
<revision>
<id>242172547</id>
<timestamp>2008-10-01T05:11:40Z</timestamp>
<contributor>
<username>Plasticup</username>
<id>2666389</id>
</contributor>
</revision>
<categories>
<category>Computer architecture</category>
</categories>
</header>
<bdy>

<indent level="1">

<it>This is about the concept in computer science, for the concept in grouping, see <link xlink:type="simple" xlink:href="../830/11460830.xml">
Principle of abstraction</link>.</it>
</indent>

An <b>abstraction layer</b> (or abstraction level) is a way of hiding the implementation details of a particular set of functionality.  Software models that use layers of abstraction include the <message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<standard wordnetid="107260623" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<proposal wordnetid="107162194" confidence="0.8">
<recommendation wordnetid="106671637" confidence="0.8">
<advice wordnetid="106671484" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../747/22747.xml">
OSI 7 Layer model</link></system_of_measurement>
</advice>
</recommendation>
</proposal>
</rule>
</direction>
</standard>
</protocol>
</message>
 for <link xlink:type="simple" xlink:href="../592/4122592.xml">
computer network</link> <message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<link xlink:type="simple" xlink:href="../770/630770.xml">
protocols</link></rule>
</direction>
</protocol>
</message>
, the <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../497/22497.xml">
OpenGL</link></software>
 graphics drawing library, and the <link xlink:type="simple" xlink:href="../054/1168054.xml">
byte stream</link> input/output (I/O) model originated by <family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../642/31642.xml">
Unix</link></family>
 and adopted by <link xlink:type="simple" xlink:href="../027/20027.xml">
MSDOS</link>, <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../297/6097297.xml">
Linux</link></O>
, and most other modern <link xlink:type="simple" xlink:href="../194/22194.xml">
operating system</link>s.<p>

In the Unix operating system, most types of input and output operations are considered to be streams of bytes being read from a <link xlink:type="simple" xlink:href="../310/5310.xml">
device</link> or being written to a device.  This stream of bytes model is used for <link xlink:type="simple" xlink:href="../489/11489.xml">
file</link> I/O, <link xlink:type="simple" xlink:href="../686/335686.xml">
socket</link> I/O, and <link xlink:type="simple" xlink:href="../402/249402.xml">
terminal</link> I/O in order to provide <link xlink:type="simple" xlink:href="../628/3457628.xml">
device independence</link>.  In order to read and write to a device at the application level, the program calls a function to open the device which may be a real device such as a terminal or a <link xlink:type="simple" xlink:href="../777/423777.xml">
virtual device</link> such as a <message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<link xlink:type="simple" xlink:href="../074/4972074.xml">
network port</link></rule>
</direction>
</protocol>
</message>
 or a file in a <link xlink:type="simple" xlink:href="../280/1010280.xml">
file system</link>.  The device's physical characteristics are mediated by the operating system which in turn presents an <link xlink:type="simple" xlink:href="../491/60491.xml">
abstract</link> <link xlink:type="simple" xlink:href="../746/620746.xml">
interface</link> that allows the <link xlink:type="simple" xlink:href="../716/23716.xml">
programmer</link> to read and write <link xlink:type="simple" xlink:href="../365/3365.xml">
byte</link>s from/to the device.  The operating system then performs the actual <link xlink:type="simple" xlink:href="../283/2799283.xml">
transformation</link> needed to read and write the stream of bytes to the device.</p>
<p>

Most graphics <link xlink:type="simple" xlink:href="../421/106421.xml">
libraries</link> such as OpenGL provide an abstract graphical device model as an interface.  The library is responsible for translating the commands provided by the programmer into the specific device commands needed to draw the graphical elements and objects.  The specific device commands for a <link xlink:type="simple" xlink:href="../085/23085.xml">
plotter</link> are different from the device commands for a <display wordnetid="106879521" confidence="0.8">
<visual_communication wordnetid="106873252" confidence="0.8">
<demonstration wordnetid="106879180" confidence="0.8">
<link xlink:type="simple" xlink:href="../014/6014.xml">
CRT</link></demonstration>
</visual_communication>
</display>
 <link xlink:type="simple" xlink:href="../677/7677.xml">
monitor</link> but the graphics library hides the implementation and device dependent details by providing an abstract interface which provides a set of <link xlink:type="simple" xlink:href="../491/333491.xml">
primitives</link> that are generally useful for drawing graphical objects.</p>
<p>

In <link xlink:type="simple" xlink:href="../323/5323.xml">
computer science</link>, an abstraction level is a generalization of a model or <link xlink:type="simple" xlink:href="../775/775.xml">
algorithm</link>, away from any specific implementation. These generalizations arise from broad similarities that are best encapsulated by models that express similarities present in various specific implementations. The simplification provided by a good abstraction layer allows for easy reuse by distilling a useful concept or metaphor so that situations where it may be accurately applied can be quickly recognized.  </p>
<p>

A good abstraction will generalize that which can be made abstract; while allowing specificity where the abstraction breaks down and its successful application requires customization to each unique requirement or problem.  </p>
<p>

Frequently abstraction layers can be composed into a hierarchy of abstraction levels.  The <message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<standard wordnetid="107260623" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<proposal wordnetid="107162194" confidence="0.8">
<recommendation wordnetid="106671637" confidence="0.8">
<advice wordnetid="106671484" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../747/22747.xml">
ISO-OSI networking model</link></system_of_measurement>
</advice>
</recommendation>
</proposal>
</rule>
</direction>
</standard>
</protocol>
</message>
 comprises seven abstraction layers.  Each layer of the OSI ISO networking model encapsulates and addresses a different part of the needs of much digital communications thereby reducing the complexity of the associated engineering solutions.</p>
<p>

A famous aphorism of <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../249/77249.xml">
Butler Lampson</link></scientist>
</person>
 goes: <it>All problems in computer science can be solved by another level of indirection</it>; this is often deliberately mis-quoted with "abstraction" substituted for "indirection". <physical_entity wordnetid="100001930" confidence="0.8">
<communicator wordnetid="109610660" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<writer wordnetid="110794014" confidence="0.8">
<link xlink:type="simple" xlink:href="../503/3174503.xml">
Kevlin Henney</link></writer>
</causal_agent>
</person>
</communicator>
</physical_entity>
's corollary to this is, "...except for the problem of too many layers of indirection."</p>

<sec>
<st>
Computer architecture</st>
<p>

<image width="200px" src="Computer_abstraction_layers.svg" type="thumb">
<caption>

A typical vision of a <link xlink:type="simple" xlink:href="../509/6509.xml">
computer architecture</link> as a series of abstraction layers: <link xlink:type="simple" xlink:href="../615/13615.xml">
hardware</link>, <link xlink:type="simple" xlink:href="../155/41155.xml">
firmware</link>, <link xlink:type="simple" xlink:href="../368/1368.xml">
assembler</link>, <link xlink:type="simple" xlink:href="../394/50394.xml">
kernel</link>, <link xlink:type="simple" xlink:href="../194/22194.xml">
operating system</link> and <link xlink:type="simple" xlink:href="../178/45178.xml">
applications</link> (see also Tanenbaum 79).
</caption>
</image>

In <link xlink:type="simple" xlink:href="../509/6509.xml">
computer architecture</link>, a computer system is usually represented as consisting of five abstraction levels: <link xlink:type="simple" xlink:href="../310/5310.xml">
hardware</link>, <link xlink:type="simple" xlink:href="../155/41155.xml">
firmware</link>, <link xlink:type="simple" xlink:href="../368/1368.xml">
assembler</link>, <link xlink:type="simple" xlink:href="../194/22194.xml">
operating system</link> and <link xlink:type="simple" xlink:href="../178/45178.xml">
processes</link> (Tanenbaum 79).</p>

</sec>
<sec>
<st>
Bibliography</st>
<p>

<list>
<entry level="1" type="bullet">

 <cite id="Reference-Tanenbaum-1979" style="font-style:normal" class="book"><person wordnetid="100007846" confidence="0.9508927676800064">
<professor wordnetid="110480730" confidence="0.9173553029164789">
<link xlink:type="simple" xlink:href="../110/3110.xml">
Tanenbaum, Andrew S.</link></professor>
</person>
&#32;(1979). Structured Computer Organization.&#32;<village wordnetid="108672738" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../880/136880.xml">
Englewood Cliffs, New Jersey</link></village>
:&#32;Prentice-Hall. ISBN 0-13-148521-0.</cite>&nbsp;</entry>
</list>
</p>

</sec>
<sec>
<st>
 See also </st>
<p>

<list>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../908/6018908.xml">
Layer</link> for object-oriented meaning</entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../501/79501.xml">
Information hiding</link></entry>
<entry level="1" type="bullet">

<paradigm wordnetid="113804375" confidence="0.8">
<linguistic_relation wordnetid="113797142" confidence="0.8">
<inflection wordnetid="113803782" confidence="0.8">
<grammatical_relation wordnetid="113796779" confidence="0.8">
<link xlink:type="simple" xlink:href="../491/60491.xml">
Abstraction (computer science)</link></grammatical_relation>
</inflection>
</linguistic_relation>
</paradigm>
</entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../091/351091.xml">
Transparency (computing)</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../185/3446185.xml">
Protection ring</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../309/5309.xml">
Computer software</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../ury/24th_century.xml">
Application programming interface</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../010/27010.xml">
Software engineering</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../309/5309.xml">
Software</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../615/13615.xml">
Hardware</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../377/8377.xml">
Database</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../592/4122592.xml">
Network</link></entry>
</list>
</p>


</sec>
</bdy>
</article>
