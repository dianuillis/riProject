<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 15:22:59[mciao0826] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>Computer program</title>
<id>5783</id>
<revision>
<id>244579475</id>
<timestamp>2008-10-11T15:11:08Z</timestamp>
<contributor>
<username>VolkovBot</username>
<id>3035831</id>
</contributor>
</revision>
<categories>
<category>Computing terminology</category>
<category>Computer programming</category>
</categories>
</header>
<bdy>

<b>Computer programs</b> (also <b><link xlink:type="simple" xlink:href="../309/5309.xml">
software programs</link></b>, or just <b>programs</b>) are <link xlink:type="simple" xlink:href="../801/3149801.xml">
instructions</link> for a <link xlink:type="simple" xlink:href="../457/7878457.xml">
computer</link>.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref>. A computer requires programs to function. Moreover, a computer program does not run unless its instructions are executed by a <link xlink:type="simple" xlink:href="../218/5218.xml">
central processor</link>;<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%222%22])">2</ref> however, a program may communicate an <link xlink:type="simple" xlink:href="../775/775.xml#xpointer(//*[./st=%22Formalization+of+algorithms%22])">
algorithm</link> to people without running.  Computer programs are usually <link xlink:type="simple" xlink:href="../392/217392.xml">
executable</link> programs or the <link xlink:type="simple" xlink:href="../661/27661.xml">
source code</link> from which executable programs are derived (e.g., <link xlink:type="simple" xlink:href="../739/5739.xml">
compiled</link>).<p>

Computer source code is often written by professional <link xlink:type="simple" xlink:href="../716/23716.xml">
computer programmer</link>s. Source code is written in a <link xlink:type="simple" xlink:href="../015/23015.xml">
programming language</link> that usually follows one of two main <message wordnetid="106598915" confidence="0.8">
<subject wordnetid="106599788" confidence="0.8">
<link xlink:type="simple" xlink:href="../897/189897.xml">
paradigms</link></subject>
</message>
: <link xlink:type="simple" xlink:href="../847/197847.xml">
imperative</link> or <link xlink:type="simple" xlink:href="../648/210648.xml">
declarative</link> programming. Source code may be converted into an <link xlink:type="simple" xlink:href="../392/217392.xml">
executable file</link> (sometimes called an executable program or a binary) by a <link xlink:type="simple" xlink:href="../739/5739.xml">
compiler</link>. Alternatively, computer programs may be executed by a <link xlink:type="simple" xlink:href="../218/5218.xml">
central processing unit</link> with the aid of an <link xlink:type="simple" xlink:href="../868/59868.xml">
interpreter</link>, or may be <link xlink:type="simple" xlink:href="../155/41155.xml">
embedded</link> directly into <link xlink:type="simple" xlink:href="../310/5310.xml">
hardware</link>.</p>
<p>

Computer programs may be categorized along functional lines: <link xlink:type="simple" xlink:href="../021/189021.xml">
system software</link> and <link xlink:type="simple" xlink:href="../746/454746.xml">
application software</link>. And many computer programs may run simultaneously on a single computer, a process known as <link xlink:type="simple" xlink:href="../857/6857.xml">
multitasking</link>.</p>

<sec>
<st>
Programming</st>


<p>

<indent level="1">

<it>Main article: <link xlink:type="simple" xlink:href="../311/5311.xml">
Computer programming</link></it>
</indent>
</p>


<p>

#include 
int main(void)
{</p>
<p>

puts("Hello world!"); 
return 0; </p>
<p>

} </p>

<p>

Source code of a program written in the <link xlink:type="simple" xlink:href="../021/6021.xml">
C programming language</link></p>



<p>

<link xlink:type="simple" xlink:href="../311/5311.xml">
Computer programming</link> is the iterative process of writing or editing <link xlink:type="simple" xlink:href="../661/27661.xml">
source code</link>. Editing source code involves testing, analyzing, and refining, and sometimes coordinating with other programmers on a jointly developed program.  A person who practices this skill is referred to as a computer <link xlink:type="simple" xlink:href="../716/23716.xml">
programmer</link> or software developer. The sometimes lengthy process of computer programming is usually referred to as <link xlink:type="simple" xlink:href="../932/248932.xml">
software development</link>. The term <link xlink:type="simple" xlink:href="../010/27010.xml">
software engineering</link> is becoming popular as the process is seen as an <link xlink:type="simple" xlink:href="../251/9251.xml">
engineering</link> discipline.</p>

<ss1>
<st>
 Paradigms </st>
<p>

Computer programs can be categorized by the <link xlink:type="simple" xlink:href="../015/23015.xml">
programming language</link> <message wordnetid="106598915" confidence="0.8">
<subject wordnetid="106599788" confidence="0.8">
<link xlink:type="simple" xlink:href="../897/189897.xml">
paradigm</link></subject>
</message>
 used to produce them. Two of the main paradigms are <link xlink:type="simple" xlink:href="../847/197847.xml">
imperative</link> and <link xlink:type="simple" xlink:href="../648/210648.xml">
declarative</link>.</p>
<p>

Programs written using an imperative language specify an <link xlink:type="simple" xlink:href="../775/775.xml">
algorithm</link> using declarations, expressions, and statements.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%223%22])">3</ref> A declaration associates a <link xlink:type="simple" xlink:href="../818/32818.xml">
variable</link> name with a <link xlink:type="simple" xlink:href="../817/93817.xml">
datatype</link>. For example:  var x: integer; . An expression yields a value. For example:  2 + 2  yields 4. Finally, a statement might assign an expression to a variable or use the value of a variable to alter the program's control flow. For example: x := 2 + 2; if x = 4 then do_something(); One criticism of imperative languages is the side-effect of an assignment statement on a class of variables called non-local variables.</p>
<p>

Programs written using a declarative language specify the properties that have to be met by the output and do not specify any implementation details. Two broad categories of declarative languages are <link xlink:type="simple" xlink:href="../933/10933.xml">
functional language</link>s and <link xlink:type="simple" xlink:href="../695/663695.xml">
logical language</link>s. The principle behind functional languages (like <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../630/13630.xml">
Haskell</link></programming_language>
) is to not allow side-effects, which makes it easier to reason about programs like mathematical functions.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%224%22])">4</ref> The principle behind logical languages (like <link xlink:type="simple" xlink:href="../485/23485.xml">
Prolog</link>) is to define the problem to be solved — the goal — and leave the detailed solution to the Prolog system itself.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%225%22])">5</ref> The goal is defined by providing a list of subgoals. Then each subgoal is defined by further providing a list of its subgoals, etc. If a path of subgoals fails to find a solution, then that subgoal is <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../867/238867.xml">
backtracked</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
 and another path is systematically attempted.</p>
<p>

The form in which a program is created may be textual or visual. In a <link xlink:type="simple" xlink:href="../491/2892491.xml">
visual language</link> program, elements are graphically manipulated rather than textually specified.</p>

</ss1>
<ss1>
<st>
Compilation or interpretation</st>
<p>

A <it>computer program</it> in the form of a <link xlink:type="simple" xlink:href="../250/359250.xml">
human-readable</link>, computer programming language is called <link xlink:type="simple" xlink:href="../661/27661.xml">
source code</link>. Source code may be converted into an <link xlink:type="simple" xlink:href="../392/217392.xml">
executable image</link> by a <link xlink:type="simple" xlink:href="../739/5739.xml">
compiler</link> or executed immediately with the aid of an <link xlink:type="simple" xlink:href="../868/59868.xml">
interpreter</link>.</p>
<p>

Compiled computer programs are commonly referred to as executables, binary images, or simply as <link xlink:type="simple" xlink:href="../702/920702.xml">
binaries</link> &mdash; a reference to the <link xlink:type="simple" xlink:href="../686/238686.xml">
binary</link> <link xlink:type="simple" xlink:href="../600/18933600.xml">
file format</link> used to store the executable code. Compilers are used to translate source code from a programming language into either <link xlink:type="simple" xlink:href="../307/337307.xml">
object code</link> or <link xlink:type="simple" xlink:href="../683/20683.xml">
machine code</link>. Object code needs further processing to become machine code, and machine code is the <link xlink:type="simple" xlink:href="../218/5218.xml">
Central Processing Unit</link>'s native <link xlink:type="simple" xlink:href="../999/19999.xml">
code</link>, ready for execution. </p>
<p>

Interpreted computer programs are either decoded and then immediately executed or are decoded into some efficient intermediate representation for future execution. <link xlink:type="simple" xlink:href="../015/4015.xml">
BASIC</link>, <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../939/23939.xml">
Perl</link></programming_language>
, and <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../862/23862.xml">
Python</link></programming_language>
 are examples of immediately executed computer programs. Alternatively, <message wordnetid="106598915" confidence="0.8">
<request wordnetid="106513366" confidence="0.8">
<link xlink:type="simple" xlink:href="../881/15881.xml">
Java</link></request>
</message>
 computer programs are compiled ahead of time and stored as a machine independent code called <link xlink:type="simple" xlink:href="../997/89997.xml">
bytecode</link>. Bytecode is then executed upon request by an interpreter called a <link xlink:type="simple" xlink:href="../353/32353.xml">
virtual machine</link>.</p>
<p>

The main disadvantage of interpreters is computer programs run slower than if compiled. Interpreting code is slower than running the compiled version because the interpreter must <link xlink:type="simple" xlink:href="../158/466158.xml">
decode</link> each <idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<link xlink:type="simple" xlink:href="../656/938656.xml">
statement</link></concept>
</idea>
 each time it is loaded and then perform the desired action. On the other hand, software development may be quicker using an interpreter because testing is immediate when the compilation step is omitted. Another disadvantage of interpreters is the interpreter must be present on the computer at the time the computer program is executed. By contrast, compiled computer programs need not have the compiler present at the time of execution.</p>
<p>

No properties of a programming language require it to be exclusively compiled or exclusively interpreted. The categorization usually reflects the most popular method of language execution. For example, BASIC is thought of as an interpreted language and C a compiled language, despite the existence of BASIC compilers and C interpreters. Some systems use <link xlink:type="simple" xlink:href="../632/220632.xml">
Just-in-time compilation</link> (JIT) whereby sections of the source are compiled 'on the fly' and stored for subsequent executions.</p>

</ss1>
<ss1>
<st>
Self-modifying programs</st>
<p>

A computer program in <link xlink:type="simple" xlink:href="../206/418206.xml">
execution</link> is normally treated as being different from the <link xlink:type="simple" xlink:href="../333/2234333.xml">
data</link> the program operates on. However, in some cases this distinction is blurred when a computer program modifies itself. The modified computer program is subsequently executed as part of the same program. <paradigm wordnetid="113804375" confidence="0.8">
<linguistic_relation wordnetid="113797142" confidence="0.8">
<inflection wordnetid="113803782" confidence="0.8">
<grammatical_relation wordnetid="113796779" confidence="0.8">
<link xlink:type="simple" xlink:href="../647/217647.xml">
Self-modifying code</link></grammatical_relation>
</inflection>
</linguistic_relation>
</paradigm>
 is possible for programs written in <link xlink:type="simple" xlink:href="../683/20683.xml">
Machine code</link>, <link xlink:type="simple" xlink:href="../448/466448.xml">
Assembler</link>, <link xlink:type="simple" xlink:href="../016/18016.xml">
Lisp</link>, <link xlink:type="simple" xlink:href="../799/6799.xml">
COBOL</link>, <link xlink:type="simple" xlink:href="../708/23708.xml">
PL/1</link> and <link xlink:type="simple" xlink:href="../485/23485.xml">
Prolog</link> and probably many others. Sometimes self modification is used as a form of dynamic optimization where the code becomes more efficient through <link xlink:type="simple" xlink:href="../829/6829.xml">
caching</link> or similar techniques. The technique is also often used to nullify all overhead of already embedded debugging code after a 'one time' test decides that debugging should be 'switched off' for the run. Early mainframe operating systems allowed program overlays as a normal practice for application programs, to conserve memory.</p>

</ss1>
</sec>
<sec>
<st>
Execution and storage</st>
<p>

Typically, computer programs are stored in <link xlink:type="simple" xlink:href="../629/780629.xml">
non-volatile memory</link> until requested either directly or indirectly to be <link xlink:type="simple" xlink:href="../206/418206.xml">
executed</link> by the computer user. Upon such a request, the program is loaded into <link xlink:type="simple" xlink:href="../847/25847.xml">
random access memory</link>, by a computer program called an <link xlink:type="simple" xlink:href="../194/22194.xml">
operating system</link>, where it can be accessed directly by the central processor. The central processor then executes ("runs") the program, instruction by instruction, until termination. A program in execution is called a <link xlink:type="simple" xlink:href="../178/45178.xml">
process</link>.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%226%22])">6</ref> Termination is either by normal self-termination or by error — software or hardware error.</p>

<ss1>
<st>
Embedded programs</st>
<p>

<image location="left" width="230px" src="DSCN0411.JPG" type="thumb">
<caption>

The <link xlink:type="simple" xlink:href="../017/21017.xml">
microcontroller</link> on the right of this <artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<medium wordnetid="106254669" confidence="0.8">
<link xlink:type="simple" xlink:href="../414/400414.xml">
USB flash drive</link></medium>
</device>
</instrumentality>
</artifact>
 is controlled with embedded <link xlink:type="simple" xlink:href="../155/41155.xml">
firmware</link>.
</caption>
</image>

Some computer programs are embedded into hardware. A <link xlink:type="simple" xlink:href="../091/478091.xml">
stored-program computer</link> requires an initial computer program stored in its <link xlink:type="simple" xlink:href="../934/18934934.xml">
read-only memory</link> to <link xlink:type="simple" xlink:href="../909/40909.xml">
boot</link>. The boot process is to identify and initialize all aspects of the system, from <register wordnetid="106507041" confidence="0.8">
<record wordnetid="106647206" confidence="0.8">
<indication wordnetid="106797169" confidence="0.8">
<evidence wordnetid="106643408" confidence="0.8">
<written_record wordnetid="106502378" confidence="0.8">
<link xlink:type="simple" xlink:href="../432/486432.xml">
CPU registers</link></written_record>
</evidence>
</indication>
</record>
</register>
 to <link xlink:type="simple" xlink:href="../101/9101.xml">
device controllers</link> to <link xlink:type="simple" xlink:href="../873/1156873.xml">
memory</link> contents.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%227%22])">7</ref> Following the initialization process, this initial computer program loads the <link xlink:type="simple" xlink:href="../194/22194.xml">
operating system</link> and sets the <link xlink:type="simple" xlink:href="../944/59944.xml">
program counter</link> to begin normal operations. Independent of the host computer, a <link xlink:type="simple" xlink:href="../ago/Austin=2C_C$hicago.xml">
hardware device</link> might have embedded <link xlink:type="simple" xlink:href="../155/41155.xml">
firmware</link> to control its operation. Firmware is used when the computer program is rarely or never expected to change, or when the program must not be lost when the power is off.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%228%22])">8</ref></p>

</ss1>
<ss1>
<st>
Manual programming</st>
<p>

<image location="right" width="230px" src="Dg-nova3.jpg" type="thumb">
<caption>

Switches for manual input on a <link xlink:type="simple" xlink:href="../654/8654.xml">
Data General Nova</link> 3
</caption>
</image>

Computer programs historically were manually input to the central processor via switches. An instruction was represented by a configuration of on/off settings. After setting the configuration, an execute button was pressed. This process was then repeated. Computer programs also historically were manually input via <link xlink:type="simple" xlink:href="../761/49761.xml">
paper tape</link> or <link xlink:type="simple" xlink:href="../420/24420.xml">
punched cards</link>. After the medium was loaded, the starting address was set via switches and the execute button pressed.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%229%22])">9</ref></p>

</ss1>
<ss1>
<st>
Automatic program generation</st>
<p>

<link xlink:type="simple" xlink:href="../035/1118035.xml">
Generative programming</link> is a style of <link xlink:type="simple" xlink:href="../311/5311.xml">
computer programming</link> that creates <link xlink:type="simple" xlink:href="../661/27661.xml">
source code</link> through <link xlink:type="simple" xlink:href="../837/105837.xml">
generic</link> <link xlink:type="simple" xlink:href="../392/7392.xml">
classes</link>, <paradigm wordnetid="113804375" confidence="0.8">
<linguistic_relation wordnetid="113797142" confidence="0.8">
<inflection wordnetid="113803782" confidence="0.8">
<grammatical_relation wordnetid="113796779" confidence="0.8">
<link xlink:type="simple" xlink:href="../003/61003.xml">
prototypes</link></grammatical_relation>
</inflection>
</linguistic_relation>
</paradigm>
, <link xlink:type="simple" xlink:href="../218/31218.xml">
template</link>s, <link xlink:type="simple" xlink:href="../920/762920.xml">
aspect</link>s, and <link xlink:type="simple" xlink:href="../015/189015.xml">
code generator</link>s to improve <link xlink:type="simple" xlink:href="../716/23716.xml">
programmer</link> productivity. Source code is generated with <link xlink:type="simple" xlink:href="../882/370882.xml">
programming tool</link>s such as a <link xlink:type="simple" xlink:href="../831/7392831.xml">
template processor</link> or an <link xlink:type="simple" xlink:href="../305/15305.xml">
Integrated Development Environment</link>. The simplest form of source code generator is a <idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<link xlink:type="simple" xlink:href="../560/20560.xml">
macro</link></concept>
</idea>
 processor, such as the <language wordnetid="106282651" confidence="0.8">
<link xlink:type="simple" xlink:href="../835/231835.xml">
C preprocessor</link></language>
, which replaces patterns in source code according to relatively simple rules.</p>
<p>

<link xlink:type="simple" xlink:href="../562/7357562.xml">
Software engine</link>s output source code or <link xlink:type="simple" xlink:href="../910/18910.xml">
markup code</link> that simultaneously become the input to another <link xlink:type="simple" xlink:href="../178/45178.xml">
computer process</link>. The analogy is that of one process driving another process, with the computer code being burned as fuel. <link xlink:type="simple" xlink:href="../154/165154.xml">
Application server</link>s are software engines that deliver applications to <link xlink:type="simple" xlink:href="../970/667970.xml">
client computer</link>s. For example, a <link xlink:type="simple" xlink:href="../164/33164.xml">
Wiki</link> is an application server that allows users to build <link xlink:type="simple" xlink:href="../881/1697881.xml">
dynamic content</link> assembled from <link xlink:type="simple" xlink:href="../667/2633667.xml">
articles</link>. Wikis generate <format wordnetid="106636806" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../191/13191.xml">
HTML</link></format>
, <link xlink:type="simple" xlink:href="../013/164013.xml">
CSS</link>, <message wordnetid="106598915" confidence="0.8">
<request wordnetid="106513366" confidence="0.8">
<link xlink:type="simple" xlink:href="../881/15881.xml">
Java</link></request>
</message>
, and <link xlink:type="simple" xlink:href="../845/9845.xml">
Javascript</link> which are then <link xlink:type="simple" xlink:href="../868/59868.xml">
interpreted</link> by a <link xlink:type="simple" xlink:href="../173/33173.xml">
web browser</link>.</p>

</ss1>
<ss1>
<st>
 Simultaneous execution</st>

<p>

<indent level="1">

<it>See also: <link xlink:type="simple" xlink:href="../178/45178.xml">
Process (computing)</link>&nbsp;and <link xlink:type="simple" xlink:href="../020/64020.xml">
Multiprocessing</link></it>
</indent>
Many operating systems support <link xlink:type="simple" xlink:href="../857/6857.xml">
multitasking</link> which enables many computer programs to appear to be running simultaneously on a single computer.  Operating systems may run multiple programs through <link xlink:type="simple" xlink:href="../920/231920.xml">
process scheduling</link> — a software mechanism to <link xlink:type="simple" xlink:href="../904/6904.xml">
switch</link> the CPU among processes frequently so that users can <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../958/30958.xml">
interact</link></instrumentality>
</artifact>
</system>
 with each program while it is running.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2210%22])">10</ref> Within hardware, modern day multiprocessor computers or computers with multicore processors may run multiple programs.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2211%22])">11</ref></p>

</ss1>
</sec>
<sec>
<st>
 Functional categories </st>
<p>

Computer programs may be categorized along functional lines. These functional categories are <link xlink:type="simple" xlink:href="../021/189021.xml">
system software</link> and <link xlink:type="simple" xlink:href="../746/454746.xml">
application software</link>. System software includes the <link xlink:type="simple" xlink:href="../194/22194.xml">
operating system</link> which couples the <link xlink:type="simple" xlink:href="../310/5310.xml">
computer's hardware</link> with the application software. The purpose of the operating system is to provide an environment in which application software executes in a convenient and efficient manner.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2212%22])">12</ref> In addition to the operating system, system software includes <link xlink:type="simple" xlink:href="../254/904254.xml">
utility programs</link> that help manage and tune the computer. If a computer program is not system software then it is application software. Application software includes <link xlink:type="simple" xlink:href="../183/57183.xml">
middleware</link>, which couples the system software with the <link xlink:type="simple" xlink:href="../249/45249.xml">
user interface</link>. Application software also includes utility programs that help users solve application problems, like the need for sorting.
</p>
</sec>
<sec>
<st>
See Also</st>
<p>

<list>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../775/775.xml#xpointer(//*[./st=%22Formalization+of+algorithms%22])">
algorithm</link> for the relationship between computer programs and algorithms.</entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../519/8519.xml">
data structure</link></entry>
</list>
</p>

</sec>
<sec>
<st>
References</st>

<p>

<reflist>
<entry id="1">
 <cite style="font-style:normal" class="book">Stair, Ralph M., et al&#32;(2003). Principles of Information Systems, Sixth Edition.&#32;Thomson Learning, Inc.,&#32;132. ISBN 0-619-06489-7.</cite>&nbsp;</entry>
<entry id="2">
 <cite style="font-style:normal" class="book">Silberschatz, Abraham&#32;(1994). Operating System Concepts, Fourth Edition.&#32;Addison-Wesley,&#32;58. ISBN 0-201-50480-4.</cite>&nbsp;</entry>
<entry id="3">
 <cite style="font-style:normal" class="book">Wilson, Leslie B.&#32;(1993). Comparative Programming Languages, Second Edition.&#32;Addison-Wesley,&#32;75. ISBN 0-201-56885-3.</cite>&nbsp;</entry>
<entry id="4">
 <cite style="font-style:normal" class="book">Wilson, Leslie B.&#32;(1993). Comparative Programming Languages, Second Edition.&#32;Addison-Wesley,&#32;213. ISBN 0-201-56885-3.</cite>&nbsp;</entry>
<entry id="5">
 <cite style="font-style:normal" class="book">Wilson, Leslie B.&#32;(1993). Comparative Programming Languages, Second Edition.&#32;Addison-Wesley,&#32;244. ISBN 0-201-56885-3.</cite>&nbsp;</entry>
<entry id="6">
 <cite style="font-style:normal" class="book">Silberschatz, Abraham&#32;(1994). Operating System Concepts, Fourth Edition.&#32;Addison-Wesley,&#32;97. ISBN 0-201-50480-4.</cite>&nbsp;</entry>
<entry id="7">
 <cite style="font-style:normal" class="book">Silberschatz, Abraham&#32;(1994). Operating System Concepts, Fourth Edition.&#32;Addison-Wesley,&#32;30. ISBN 0-201-50480-4.</cite>&nbsp;</entry>
<entry id="8">
 <cite style="font-style:normal" class="book">Tanenbaum, Andrew S.&#32;(1990). Structured Computer Organization, Third Edition.&#32;Prentice Hall,&#32;11. ISBN 0-13-854662-2.</cite>&nbsp;</entry>
<entry id="9">
 <cite style="font-style:normal" class="book">Silberschatz, Abraham&#32;(1994). Operating System Concepts, Fourth Edition.&#32;Addison-Wesley,&#32;6. ISBN 0-201-50480-4.</cite>&nbsp;</entry>
<entry id="10">
 <cite style="font-style:normal" class="book">Silberschatz, Abraham&#32;(1994). Operating System Concepts, Fourth Edition.&#32;Addison-Wesley,&#32;100. ISBN 0-201-50480-4.</cite>&nbsp;</entry>
<entry id="11">
 <cite style="font-style:normal" class="book">Akhter, Shameem&#32;(2006). Multi-Core Programming.&#32;Richard Bowles (Intel Press),&#32;pp. 11-13. ISBN 0-9764832-4-6.</cite>&nbsp;</entry>
<entry id="12">
 <cite style="font-style:normal" class="book">Silberschatz, Abraham&#32;(1994). Operating System Concepts, Fourth Edition.&#32;Addison-Wesley,&#32;1. ISBN 0-201-50480-4.</cite>&nbsp;</entry>
</reflist>
</p>

</sec>
<sec>
<st>
Further reading</st>

<p>

<list>
<entry level="1" type="bullet">

 <cite style="font-style:normal" class="book">Knuth, Donald E.&#32;(1997). The Art of Computer Programming, Volume 1, 3rd Edition.&#32;Boston:&#32;Addison-Wesley. ISBN 0-201-89683-4.</cite>&nbsp;</entry>
<entry level="1" type="bullet">

 <cite id="Reference-Knuth-1997" style="font-style:normal" class="book">Knuth, Donald E.&#32;(1997). The Art of Computer Programming, Volume 2, 3rd Edition.&#32;Boston:&#32;Addison-Wesley. ISBN 0-201-89684-2.</cite>&nbsp;</entry>
<entry level="1" type="bullet">

 <cite id="Reference-Knuth-1997" style="font-style:normal" class="book">Knuth, Donald E.&#32;(1997). The Art of Computer Programming, Volume 3, 3rd Edition.&#32;Boston:&#32;Addison-Wesley. ISBN 0-201-89685-0.</cite>&nbsp;</entry>
</list>
</p>

</sec>
<sec>
<st>
External links</st>
<p>

<list>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.webopedia.com/TERM/P/program.html">
Definition of "Program"</weblink> at Webopedia</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://wombat.doc.ic.ac.uk/foldoc/foldoc.cgi?query=software">
Definition of "Software"</weblink> at <link xlink:type="simple" xlink:href="../324/11324.xml">
FOLDOC</link></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://dictionary.reference.com/browse/computer%20program">
Definition of "Computer Program"</weblink> at dictionary.com</entry>
</list>
</p>


</sec>
</bdy>
</article>
