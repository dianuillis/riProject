<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 22:09:20[mciao0827] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<entity  confidence="0.9511911446218017" wordnetid="100001740">
<O  confidence="0.9508927676800064" wordnetid="106832680">
<header>
<title>PikeOS</title>
<id>5929146</id>
<revision>
<id>206022784</id>
<timestamp>2008-04-16T14:20:58Z</timestamp>
<contributor>
<username>Nijel</username>
<id>398853</id>
</contributor>
</revision>
<categories>
<category>Real-time operating systems</category>
<category>Operating systems</category>
<category>Microkernels</category>
</categories>
</header>
<bdy>
<template>
<name>Infobox OS</name>
<parameters>
<website>
<weblink xlink:type="simple" xlink:href="http://www.sysgo.com/products/pikeos-technology/">
Official site</weblink></website>
<marketing_target>
Security critical <link xlink:type="simple" xlink:href="../630/46630.xml">
embedded systems</link></marketing_target>
<kernel_type>
<link xlink:type="simple" xlink:href="../023/20023.xml">
Microkernel</link></kernel_type>
<developer>
<weblink xlink:type="simple" xlink:href="http://www.sysgo.com">
SYSGO AG</weblink></developer>
<family>
<link xlink:type="simple" xlink:href="../123/26123.xml">
Real-time operating system</link>s</family>
<name>
PikeOS</name>
</parameters>
</template>


<b>PikeOS</b> is a <link xlink:type="simple" xlink:href="../023/20023.xml">
microkernel</link>-based <link xlink:type="simple" xlink:href="../123/26123.xml">
real-time operating system</link> made by <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../142/16961142.xml">
SYSGO</link></company>
 AG. It is targeted at safety and security critical embedded systems. It provides a <link xlink:type="simple" xlink:href="../383/2301383.xml">
partitioned</link> environment for multiple operating systems with different design goals, safety requirements, or security requirements to coexist in a single machine.<p>

<image location="right" width="230px" src="PikeOS-Architecture.png" type="thumb">
<caption>

PikeOS architecture
</caption>
</image>
</p>
<p>

If several programs having different criticality levels are to coexist in one machine, the underlying OS must ensure that they remain independent. <link xlink:type="simple" xlink:href="../383/2301383.xml">
Resource partitioning</link> is a widely accepted technique to achieve this. PikeOS combines resource partitioning and <link xlink:type="simple" xlink:href="../356/18311356.xml">
virtualisation</link>: Its <link xlink:type="simple" xlink:href="../353/32353.xml">
virtual machine</link> environments (VMs) are able to host entire operating systems, along with their applications. Since PikeOS uses <link xlink:type="simple" xlink:href="../546/1441546.xml">
paravirtualisation</link>, operating systems need to be adapted in order to run in one of its VMs. Application programs, however, can run unmodified. A number of different operating systems have been adapted to run in a PikeOS VM. Among them are <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../297/6097297.xml">
Linux</link></O>
, several popular real-time operating system APIs, as well as <message wordnetid="106598915" confidence="0.8">
<request wordnetid="106513366" confidence="0.8">
<link xlink:type="simple" xlink:href="../881/15881.xml">
Java</link></request>
</message>
 and <physical_entity wordnetid="100001930" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../242/1242.xml">
Ada</link></causal_agent>
</physical_entity>
 runtime systems.</p>
<p>

Since each VM has its own, separate set of resources, programs hosted by one VM are independent of those hosted by another. This allows for legacy (e.g. Linux) programs to coexist with safety-critical programs in one machine. Unlike other popular virtualisation systems, PikeOS features not only separation of spatial resources, but also strictly separates temporal resources of its client OSes. This allows for hard real-time systems to be virtualised, while still retaining their timing properties.
Spatial and temporal resources are assigned statically to the individual VMs by the PikeOS System Software. Together with the PikeOS microkernel, this system software forms a minimal layer of globally <link xlink:type="simple" xlink:href="../826/41826.xml">
trusted code</link>.
Due to the small amount of trusted code, the system is suited for safety-critical projects requiring certification according to prevalent standards.</p>
<p>

The PikeOS microkernel has been developed since 1998. Initially, it was modelled after the <link xlink:type="simple" xlink:href="../763/95763.xml">
L4 microkernel</link>, though it never shared any code with L4. The microkernel has gradually evolved over the years of its application to the real-time, embedded systems space. Nowadays, its interface resembles none of the existing L4 implementations, however, the conceptual roots are still visible. </p>

<sec>
<st>
External links</st>
<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.sysgo.com/products/pikeos-technology/">
Official site</weblink></entry>
</list>
</p>

</sec>
</bdy>
</O>
</entity>
</article>
