<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 15:47:32[mciao0826] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>Application binary interface</title>
<id>60471</id>
<revision>
<id>237842112</id>
<timestamp>2008-09-12T01:36:48Z</timestamp>
<contributor>
<username>RussBot</username>
<id>279219</id>
</contributor>
</revision>
<categories>
<category>Application programming interfaces</category>
<category>Articles to be merged&amp;#32;since October 2007</category>
<category>Operating system technology</category>
<category>All articles to be merged</category>
</categories>
</header>
<bdy>

In <link xlink:type="simple" xlink:href="../309/5309.xml">
computer software</link>, an <b>application binary interface</b> (<b>ABI</b>) describes the low-level <link xlink:type="simple" xlink:href="../746/620746.xml">
interface</link> between an application program and the <link xlink:type="simple" xlink:href="../194/22194.xml">
operating system</link>, or the interface between an application and its <link xlink:type="simple" xlink:href="../421/106421.xml">
libraries</link>, or that between component parts of an application. An ABI is similar to an <link xlink:type="simple" xlink:href="../ury/24th_century.xml">
application programming interface</link> (API); however, the latter defines a <link xlink:type="simple" xlink:href="../661/27661.xml">
source code</link> interface.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref> Simply put, ABIs enable binary compatibility, whereas APIs enable source code compatibility.<p>

For example, the <standard wordnetid="107260623" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../305/23305.xml">
POSIX</link></system_of_measurement>
</standard>
 standard defines an API that allows a wide range of common computing functions to be written such that they may operate on many different systems (<link xlink:type="simple" xlink:href="../640/20640.xml">
Mac OS X</link> and various <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../622/18932622.xml">
BSDs</link></O>
 implement this interface); however, making use of this requires <link xlink:type="simple" xlink:href="../739/5739.xml">
re-compilation</link> for each platform.  A compatible ABI, on the other hand, allows compiled <link xlink:type="simple" xlink:href="../307/337307.xml">
object code</link> to function without any changes, on any system implementing that ABI.  This is advantageous to both software providers (where they may distribute existing software on new systems without producing/distributing upgrades) and users (where they may install older software on their new systems without purchasing upgrades), although this generally requires various software libraries implementing the necessary APIs too.</p>

<sec>
<st>
Content</st>
<p>

ABIs cover details such as data type size and alignment, the <link xlink:type="simple" xlink:href="../571/1795571.xml">
calling convention</link>, which controls how <link xlink:type="simple" xlink:href="../988/40988.xml">
function</link>s' arguments are passed and return values retrieved; the <link xlink:type="simple" xlink:href="../908/102908.xml">
system call</link> numbers and how an application should make system calls to the operating system; and in the case of a complete operating system ABI, the binary format of <link xlink:type="simple" xlink:href="../307/337307.xml">
object file</link>s, program libraries and so on.  A complete ABI, such as the <link xlink:type="simple" xlink:href="../617/14617.xml">
Intel</link> Binary Compatibility Standard (iBCS),<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%222%22])">2</ref> allows a program from one operating system supporting that ABI to run without modifications on any other such system. </p>
<p>

Other ABIs standardize details such as the <link xlink:type="simple" xlink:href="../961/725961.xml#xpointer(//*[./st=%22Name+mangling+in+C=2B=2B%22])">
C++ name decoration</link>,<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%223%22])">3</ref> <link xlink:type="simple" xlink:href="../231/59231.xml">
exception</link> propagation,<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%224%22])">4</ref> and calling convention between compilers on the same platform, but do not require cross-platform compatibility.</p>

</sec>
<sec>
<st>
OS implementations</st>

<p>

<company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../001/19001.xml">
Microsoft</link></company>
 has shown significant commitment to a backward compatible ABI, particularly within their <link xlink:type="simple" xlink:href="../601/81601.xml">
Win32</link> library, such that older applications may run on newer versions of Windows.  <company wordnetid="108058098" confidence="0.9508927676800064">
<link>
Apple_Inc.</link></company>
 has shown less propensity to this concern, expiring compatibility or implementing ABI in a slower "emulation mode"; this allows greater freedom in development at the cost of obsoleting older software.  Among <family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../815/31815.xml">
Unix-like</link></family>
 operating systems, there are many related but incompatible operating systems running on a common hardware platform (particularly <chip wordnetid="103020034" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<microprocessor wordnetid="103760310" confidence="0.8">
<conductor wordnetid="103088707" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<semiconductor_device wordnetid="104171831" confidence="0.8">
<link xlink:type="simple" xlink:href="../070/15070.xml">
Intel 80386</link></semiconductor_device>
</device>
</conductor>
</microprocessor>
</instrumentality>
</artifact>
</chip>
-compatible systems).  There have been several attempts to standardise the ABI such that software vendors may distribute one binary application for all these systems; however to date, none of these have met with much success.  The <link xlink:type="simple" xlink:href="../753/246753.xml">
Linux Standard Base</link> is attempting to do this for the <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../297/6097297.xml">
Linux</link></O>
 platform whilst many of the BSD unices (<O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../571/18949571.xml">
OpenBSD</link></O>
/<link xlink:type="simple" xlink:href="../495/21495.xml">
NetBSD</link>/<platform wordnetid="103961939" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<surface wordnetid="104362025" confidence="0.8">
<horizontal_surface wordnetid="103536348" confidence="0.8">
<link xlink:type="simple" xlink:href="../554/7580554.xml">
FreeBSD</link></horizontal_surface>
</surface>
</artifact>
</platform>
) implement various levels of ABI compatibility for both backward compatibility (allowing applications written for older versions to run on newer distributions of the system) and cross-platform compatibility (allowing the execution of foreign code without recompilation).    </p>

<p>

<table class="metadata plainlinks ambox ">
<row>
<col>

ambox-move" style=""</col>
</row>
<row>
<col class="mbox-image"><p>

<image width="50px" src="Mergefrom.svg">
</image>
</p>
</col>
<col style="" class="mbox-text">
 It has been suggested that  be  into this article or section. ()</col>
</row>
</table>

</p>

</sec>
<sec>
<st>
See also</st>
<p>

<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../311/5311.xml">
Programming</link></entry>
<entry level="1" type="bullet">

 <idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<category wordnetid="105838765" confidence="0.8">
<type wordnetid="105840188" confidence="0.8">
<kind wordnetid="105839024" confidence="0.8">
<link xlink:type="simple" xlink:href="../200/2570200.xml">
Opaque pointer</link></kind>
</type>
</category>
</concept>
</idea>
</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../983/207983.xml">
PowerOpen Environment</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../593/12554593.xml">
Embedded Application Binary Interface</link></entry>
</list>
</p>

</sec>
<sec>
<st>
References</st>

<p>

<reflist>
<entry id="1">
allowing e.g. the same source code to <link xlink:type="simple" xlink:href="../739/5739.xml">
compile</link> on any system supporting that API</entry>
<entry id="2">
<weblink xlink:type="simple" xlink:href="http://www.everything2.com/index.pl?node=iBCS">
Intel Binary Compatibility Standard (iBCS)</weblink></entry>
<entry id="3">
<weblink xlink:type="simple" xlink:href="http://www.codesourcery.com/cxx-abi/abi.html">
Itanium C++ ABI</weblink> (compatible with multiple architectures)</entry>
<entry id="4">
<weblink xlink:type="simple" xlink:href="http://www.codesourcery.com/cxx-abi/abi-eh.html">
Itanium C++ ABI: Exception Handling</weblink> (compatible with multiple architectures)</entry>
</reflist>
</p>

</sec>
<sec>
<st>
External links</st>
<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.x86-64.org/documentation.html">
AMD64(x86_64) Application Binary Interface</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://infocenter.arm.com/help/topic/com.arm.doc.ihi0036a/index.html">
Application Binary Interface (ABI) for the ARM Architecture</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.cygwin.com/ml/binutils/2003-06/msg00436.html">
MIPS EABI documentation</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://developers.sun.com/solaris/articles/about_amd64_abi.html">
Sun Studio 10 Compilers and the AMD64 ABI</weblink> Good summary and comparison about some popular ABIs</entry>
</list>
</p>


</sec>
</bdy>
</article>
