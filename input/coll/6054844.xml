<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 22:14:22[mciao0827] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<accomplishment  confidence="0.8" wordnetid="100035189">
<event  confidence="0.8" wordnetid="100029378">
<action  confidence="0.8" wordnetid="100037396">
<act  confidence="0.8" wordnetid="100030358">
<psychological_feature  confidence="0.8" wordnetid="100023100">
<feat  confidence="0.8" wordnetid="100036762">
<header>
<title>Call gate</title>
<id>6054844</id>
<revision>
<id>216380911</id>
<timestamp>2008-06-01T11:23:06Z</timestamp>
<contributor>
<username>Thijs!bot</username>
<id>1392310</id>
</contributor>
</revision>
<categories>
<category>Security exploits</category>
<category>x86 architecture</category>
</categories>
</header>
<bdy>

A <b>call gate</b> (or <b>callgate</b>) is a mechanism in Intel's <link xlink:type="simple" xlink:href="../198/34198.xml">
x86 architecture</link> for changing the <link xlink:type="simple" xlink:href="../500/5519500.xml">
privilege level</link> of the CPU when it executes a predefined <link xlink:type="simple" xlink:href="../988/40988.xml">
function call</link> using a CALL FAR instruction.
<sec>
<st>
 Overview </st>
<p>

Call gates are intended to allow less privileged code to call code with a higher privilege level. This type of mechanism is essential in modern operating systems that employ <link xlink:type="simple" xlink:href="../373/515373.xml">
memory protection</link> since it allows user applications to use <link xlink:type="simple" xlink:href="../394/50394.xml">
kernel</link> functions and <link xlink:type="simple" xlink:href="../908/102908.xml">
system call</link>s in a way that can be controlled by the <link xlink:type="simple" xlink:href="../194/22194.xml">
operating system</link>. </p>
<p>

Call gates use a special selector value to reference a descriptor accessed via the <link xlink:type="simple" xlink:href="../872/4118872.xml">
Global Descriptor Table</link> or the <link xlink:type="simple" xlink:href="../941/3291941.xml">
Local Descriptor Table</link>, which contains the information needed for the call across privilege boundaries. This is similar to the mechanism used for <link>
interrupt gate</link>s.</p>

</sec>
<sec>
<st>
 Security issues </st>
<p>

To preserve system security, the Global Descriptor Table should be held in protected memory, otherwise any program will be able to create its own call gate and use it to raise its privilege level. Call gates have sometimes been used as a vector for software <link xlink:type="simple" xlink:href="../875/9875.xml">
security exploit</link>s, when ways have been found around this protection. One example of this is the <link xlink:type="simple" xlink:href="../010/6010.xml">
E-mail worm</link> <it>Gurong.A</it> written to exploit the <link xlink:type="simple" xlink:href="../890/18890.xml">
Microsoft Windows</link> operating system, which uses  \Device\PhysicalMemory to install a call gate.</p>

</sec>
<sec>
<st>
 How to use </st>
<p>

Assuming a call gate has been set up already by the <link xlink:type="simple" xlink:href="../194/22194.xml">
operating system</link> <link xlink:type="simple" xlink:href="../394/50394.xml">
kernel</link>, code simply does a CALL FAR (LCALL in <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../269/17555269.xml">
AT&amp;T</link></company>
 syntax) with the necessary <link xlink:type="simple" xlink:href="../178/150178.xml">
segment selector</link> (the offset field is ignored).  The processor will perform a number of checks to make sure the entry is valid and the code was operating at sufficient privilege to use the gate.  Assuming all checks pass, a new CS/<link xlink:type="simple" xlink:href="../467/625467.xml">
EIP</link> is loaded from the <link xlink:type="simple" xlink:href="../824/9580824.xml">
segment descriptor</link>, and continuation information is pushed onto the stack of the new privilege level (old SS, old ESP, old CS, old EIP in that order).  Parameters may also be copied from the old stack to the new stack if needed.  The number of parameters to copy is located in the call gate descriptor.</p>
<p>

The kernel may return to the user space program by using a RET FAR (LRET) instruction which pops the continuation information off the stack and returns to the outer privilege level.</p>
<p>

For information on the exact format of the call gate descriptor, please see the <link xlink:type="simple" xlink:href="../046/15046.xml">
IA-32</link> manuals.</p>

</sec>
<sec>
<st>
 Modern use </st>
<p>

Modern X86 operating systems are transitioning away from CALL FAR callgates. With the introduction of SYSENTER/SYSEXIT and SYSCALL/SYSRET, a new faster mechanism was introduced for control transfers for x86 programs.  And as most other architectures do not support call gates, their use was rare even before these new instructions as software interrupts/traps were preferred for portability.</p>
<p>

It should be noted that call gates are more flexible than the SYSENTER/SYSEXIT and SYSCALL/SYSRET instructions since unlike the latter two, call gates allow for changing from an arbitrary privilege level to an arbitrary privilege level.  The fast SYS* instruction only allow control transfers from ring 3-&amp;gt;0 and vice versa.  Upon comparing call gates to interrupts, call gates are significantly faster.</p>

</sec>
<sec>
<st>
 See also </st>
<p>

<list>
<entry level="1" type="bullet">

 <accomplishment wordnetid="100035189" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<action wordnetid="100037396" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<feat wordnetid="100036762" confidence="0.8">
<link xlink:type="simple" xlink:href="../885/55885.xml">
Computer insecurity</link></feat>
</psychological_feature>
</act>
</action>
</event>
</accomplishment>
</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../289/15289.xml">
Software interrupt</link></entry>
<entry level="1" type="bullet">

 <link>
Interrupt gate</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../908/102908.xml">
System call</link></entry>
<entry level="1" type="bullet">

 <link>
SYSCALL instruction</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../872/4118872.xml">
Global Descriptor Table</link></entry>
</list>
</p>

</sec>
<sec>
<st>
 External links </st>
<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.windowsitlibrary.com/Content/356/10/1.html">
Using callgates to execute privileged code</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.f-secure.com/v-descs/gurong_a.shtml">
F-Secure Virus Information Pages: Gurong.A</weblink></entry>
</list>
</p>


</sec>
</bdy>
</feat>
</psychological_feature>
</act>
</action>
</event>
</accomplishment>
</article>
