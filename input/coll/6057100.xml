<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 22:14:27[mciao0827] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<region  confidence="0.8" wordnetid="108630985">
<field  confidence="0.8" wordnetid="108569998">
<location  confidence="0.8" wordnetid="100027167">
<tract  confidence="0.8" wordnetid="108673395">
<geographical_area  confidence="0.8" wordnetid="108574314">
<header>
<title>Berlekamp&apos;s algorithm</title>
<id>6057100</id>
<revision>
<id>237777362</id>
<timestamp>2008-09-11T19:47:01Z</timestamp>
<contributor>
<username>CRGreathouse</username>
<id>1077900</id>
</contributor>
</revision>
<categories>
<category>Computer algebra</category>
<category>Finite fields</category>
</categories>
</header>
<bdy>

For the algorithm dealing with LFSRs, see <link>
Berlekamp–Massey algorithm</link>.<p>

In <link xlink:type="simple" xlink:href="../831/18831.xml">
mathematics</link>, particularly <link xlink:type="simple" xlink:href="../427/54427.xml">
computational algebra</link>, <b>Berlekamp's algorithm</b> is a well-known method for <link xlink:type="simple" xlink:href="../351/3776351.xml">
factoring  polynomials</link> over <link xlink:type="simple" xlink:href="../615/11615.xml">
finite field</link>s (also known as <it>Galois fields</it>).  The algorithm consists mainly of <link xlink:type="simple" xlink:href="../728/19008728.xml">
matrix</link> reduction and polynomial <link xlink:type="simple" xlink:href="../354/12354.xml">
GCD</link> computations.  It was invented by <scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../893/655893.xml">
Elwyn Berlekamp</link></scientist>
 in 1967.  It was the dominant algorithm for solving the problem until the <link>
Cantor–Zassenhaus algorithm</link>  of 1981.  It is currently implemented in many well-known <link xlink:type="simple" xlink:href="../427/54427.xml">
computer algebra system</link>s, including <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../441/7311441.xml">
PARI/GP</link></instrumentality>
</artifact>
</system>
.</p>

<sec>
<st>
Overview</st>
<p>

Berlekamp's algorithm takes as input a square-free polynomial <math>f(x)</math> (i.e. one with no repeated factors) of degree <math>n</math> with coefficients in a finite field <math>\mathbb{F}_q</math> and gives as output a polynomial <math>g(x)</math> with coefficients in the same field such that <math>g(x)</math> divides <math>f(x)</math>.  The algorithm may then be applied recursively to these and subsequent divisors, until we find the decomposition of <math>f(x)</math> into powers of <link xlink:type="simple" xlink:href="../725/188725.xml">
irreducible polynomial</link>s (recalling that the <link xlink:type="simple" xlink:href="../404/48404.xml">
ring</link> of polynomials over a finite field is a <link xlink:type="simple" xlink:href="../546/60546.xml">
unique factorization domain</link>).</p>
<p>

All possible factors of <math>f(x)</math> are contained within the <link xlink:type="simple" xlink:href="../635/184635.xml">
factor ring</link>
<indent level="1">

<math>R = \frac{\mathbb{F}_q[x]}{\langle f(x) \rangle}.</math>
</indent>
The algorithm focuses on polynomials <math>g(x) \in R</math> which satisfy the congruence:
<indent level="1">

<math>g(x)^q \equiv g(x) \pmod{f(x)}</math>.
</indent>
These polynomials form a subalgebra of R (which can be considered as an <math>n</math>-dimensional vector space over <math>\mathbb{F}_q</math>), called the <it>Berlekamp subalgebra</it>.  The Berlekamp subalgebra is of interest because the polynomials <math>g(x)</math> it contains satisfy</p>
<p>

<indent level="1">

<math>f(x) = \prod_{s \in \mathbb{F}_q} \gcd(f(x),g(x)-s).</math>
</indent>

In general, not every GCD in the above product will be a non-trivial factor of <math>f(x)</math>, but some are, providing the factors we seek.</p>
<p>

Berlekamp's algorithm finds polynomials <math>g(x)</math> suitable for use with the above result by computing a basis for the Berlekamp subalgebra.  This is achieved via the observation that Berlekamp subalgebra is in fact the <link xlink:type="simple" xlink:href="../395/50395.xml">
null space</link> of a certain <math>n \times n</math> matrix over <math>\mathbb{F}_q</math>, which is derived from the so-called Berlekamp matrix of the polynomial, denoted <math>\mathcal{Q}</math>.  If <math>\mathcal{Q}=[q_{i,j}]</math> then <math>q_{i,j}</math> is the coefficient of the <math>j</math>-th power term in the reduction of <math>x^{iq}</math> modulo <math>f(x)</math>, i.e.:</p>
<p>

<indent level="1">

<math>x^{iq} \equiv q_{i,n}x^n + q_{i,n-1}x^{n-1} + \ldots + q_{i,0} \pmod{f(x)} </math>.
</indent>

With a certain polynomial <math>g(x) \in R</math>, say:</p>
<p>

<indent level="1">

<math>g(x) = g_nx^n+g_{n-1}x^{n-1} + \ldots + g_0, </math>
</indent>

we may associate the row vector:</p>
<p>

<indent level="1">

<math>g = (g_0, g_1, \ldots, g_n). </math>
</indent>

It is relatively straightforward to see that the row vector <math>g\mathcal{Q}</math> corresponds, in the same way, to the reduction of <math>g(x)^q</math> modulo <math>f(x)</math>.  Consequently a polynomial <math>g(x) \in R</math> is in the Berlekamp subalgebra if and only if <math>g(\mathcal{Q}-I)=0</math> (where <math>I</math> is the <math>n \times n</math> <link xlink:type="simple" xlink:href="../718/59718.xml">
identity matrix</link>, i.e. if and only if it is in the null space of <math>\mathcal{Q}-I</math>.</p>
<p>

By computing the matrix <math>\mathcal{Q}-I</math> and reducing it to <link>
reduced row echelon form</link> and then easily reading off a basis for the null space, we may find a basis for the Berlekamp subalgebra and hence construct polynomials <math>g(x)</math> in it.  We then need to successively compute GCDs of the form above until we find a non-trivial factor.  Since the ring of polynomials over a field is a <link xlink:type="simple" xlink:href="../376/10376.xml">
Euclidean domain</link>, we may compute these GCDs using the <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../377/10377.xml">
Euclidean algorithm</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
.</p>

</sec>
<sec>
<st>
Applications</st>
<p>

One important application of Berlekamp's algorithm is in computing <link xlink:type="simple" xlink:href="../334/181334.xml">
discrete logarithm</link>s over finite fields <math>\mathbb{F}_{p^n}</math>, where <math>p</math> is prime and <math>n\geq 2</math>.  Computing discrete logarithms is an important problem in <link>
public key cryptography</link>.  For a finite field, the fastest known method is the <link xlink:type="simple" xlink:href="../595/1549595.xml">
index calculus method</link>, which involves the factorisation of field elements.  If we represent the field <math>\mathbb{F}_{p^n}</math> in the usual way - that is, as polynomials over the base field <math>\mathbb{F}_{p}</math>, reduced modulo an irreducible polynomial of degree <math>n</math> - then this is simply polynomial factorisation, as provided by Berlekamp's algorithm.</p>

</sec>
<sec>
<st>
Implementation in Computer Algebra Systems</st>
<p>

Berlekamp's algorithm may be accessed in the PARI/GP package using the <weblink xlink:type="simple" xlink:href="http://pari.math.u-bordeaux.fr/dochtml/html.stable/Arithmetic_functions.html#factormod">
factormod</weblink> command.</p>

</sec>
<sec>
<st>
References</st>
<p>

<list>
<entry level="1" type="bullet">

 Elwyn R. Berlekamp.  "Factoring Polynomials Over Finite Fields".  Bell Systems Technical Journal, 46:1853-1859, 1967.  Later republished in: Elwyn R. Berlekamp.  "Algebraic Coding Theory".  Mc-Graw Hill, 1968.</entry>
</list>
</p>



</sec>
</bdy>
</geographical_area>
</tract>
</location>
</field>
</region>
</article>
