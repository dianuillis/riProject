<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 17:22:34[mciao0825] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<idea  confidence="0.8" wordnetid="105833840">
<concept  confidence="0.8" wordnetid="105835747">
<property  confidence="0.8" wordnetid="105849040">
<feature  confidence="0.8" wordnetid="105849789">
<header>
<title>Spell checker</title>
<id>605869</id>
<revision>
<id>243115164</id>
<timestamp>2008-10-05T06:03:13Z</timestamp>
<contributor>
<username>Jeff G.</username>
<id>3080493</id>
</contributor>
</revision>
<categories>
<category>Spelling checking programs</category>
<category>Text editor features</category>
<category>Spelling</category>
</categories>
</header>
<bdy>

In <link xlink:type="simple" xlink:href="../213/5213.xml">
computing</link>, a <b>spell checker</b> is an <link xlink:type="simple" xlink:href="../746/454746.xml">
applications program</link> that flags words in a document that may not be <link xlink:type="simple" xlink:href="../054/190054.xml">
spelled</link> correctly. Spell checkers may be stand-alone  capable of operating on a block of text, or as part of a larger application, such as a <link xlink:type="simple" xlink:href="../236/33236.xml">
word processor</link>, <link xlink:type="simple" xlink:href="../478/43478.xml">
email client</link>, electronic <link xlink:type="simple" xlink:href="../931/7931.xml">
dictionary</link>, or <link xlink:type="simple" xlink:href="../023/4059023.xml">
search engine</link>.


<p>

Eye have a spelling chequer,
It came with my Pea Sea.
It plane lee marks four my revue
Miss Steaks I can knot sea.</p>
<p>

Eye strike the quays and type a word 
And weight four it two say 
Weather eye am write oar wrong 
It tells me straight a weigh.</p>
<p>

Eye ran this poem threw it,
Your shore real glad two no.
Its vary polished in it's weigh.
My chequer tolled me sew.</p>
<p>

A chequer is a bless thing,
It freeze yew lodes of thyme.
It helps me right all stiles of righting,
And aides me when eye rime.</p>
<p>

Each frays come posed up on my screen
Eye trussed too bee a joule.
The chequer pours o'er every word
Two cheque sum spelling rule.</p>

<p>

An unsophisticated spell checker will find little or no fault with this poem because it checks words in isolation.  A more sophisticated spell checker will make use of word <link xlink:type="simple" xlink:href="../182/986182.xml">
n-gram</link> to consider the context in which a word occurs.</p>



<sec>
<st>
Operation</st>
<p>

Simple spell checkers operate on individual words by comparing each of them against the contents of a <link xlink:type="simple" xlink:href="../931/7931.xml">
dictionary</link>, possibly performing <link xlink:type="simple" xlink:href="../964/475964.xml">
stemming</link> on the word.  If the word is not found it is considered to be a error, and an attempt may be made to suggest a word that was likely to have been intended. One such suggestion algorithm is to list those words in the dictionary having a small <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../418/406418.xml">
Levenshtein distance</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
 from the original word.</p>
<p>

When a word which is not within the dictionary is encountered most spell checkers provide an option to add that word to a list of known exceptions that should not be flagged.</p>

</sec>
<sec>
<st>
Design</st>
<p>

A spell checker customarily consists of two parts: 
<list>
<entry level="1" type="number">

 A set of routines for scanning text and extracting words, and </entry>
<entry level="1" type="number">

 An algorithm for comparing the extracted words against a known list of correctly spelled words (ie., the dictionary).</entry>
</list>
</p>
<p>

The scanning routines sometimes include language-dependent algorithms for handling <link xlink:type="simple" xlink:href="../646/20646.xml">
morphology</link>.  Even for a lightly inflected language like <language wordnetid="106282651" confidence="0.8">
<link xlink:type="simple" xlink:href="../916/8569916.xml">
English</link></language>
, word extraction routines will need to handle such phenomena as <link xlink:type="simple" xlink:href="../473/590473.xml">
contraction</link>s and <link xlink:type="simple" xlink:href="../796/1758796.xml">
possessive</link>s.  It is unclear whether morphological analysis provides a significant benefit.
<weblink xlink:type="simple" xlink:href="http://company.yandex.ru/articles/iseg-las-vegas.html">
http://company.yandex.ru/articles/iseg-las-vegas.html</weblink></p>
<p>

The word list might contain just a list of words, or it might also contain additional information, such as hyphenation points or lexical and grammatical attributes.</p>
<p>

As an adjunct to these two components, the program's <link xlink:type="simple" xlink:href="../249/45249.xml">
user interface</link> will allow users to approve replacements and modify the program's operation.</p>
<p>

One exception to the above paradigm are spell checkers which use based solely statistical information, for instance using <link xlink:type="simple" xlink:href="../182/986182.xml">
n-gram</link>s.  This approach usually requires a lot of effort to obtain sufficient statistical information and may require a lot more runtime storage.  These methods are not currently in general use. In some cases spell checkers use a fixed list of misspellings and suggestions for those misspellings; this less flexible approach is often used in paper-based correction methods, such as the <it>see also</it> entries of encyclopedias.</p>

</sec>
<sec>
<st>
History</st>
<p>

The first spell checkers were widely available on mainframe computers in the late 1970s.  A group of six linguists from <university wordnetid="108286163" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../681/101681.xml">
Georgetown University</link></university>
 developed the first spell-check system for the IBM corporation<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref>.  The first spell checkers for personal computers appeared for <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../146/45146.xml">
CP/M</link></O>
 and <computer wordnetid="103082979" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../747/30747.xml">
TRS-80</link></computer>
 computers in 1980, followed by packages for the <link xlink:type="simple" xlink:href="../032/15032.xml">
IBM PC</link> after it was introduced in 1981. Developers such as Maria Mariani, Soft-Art, Microlytics, Proximity, Circle Noetics, and Reference Software rushed <link xlink:type="simple" xlink:href="../922/69922.xml">
OEM</link> packages or end-user products into the rapidly expanding software market, primarily for the PC but also for <link xlink:type="simple" xlink:href="../979/19006979.xml">
Apple Macintosh</link>, <link xlink:type="simple" xlink:href="../517/32517.xml">
VAX</link>, and <family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../642/31642.xml">
Unix</link></family>
. On the PCs, these spell checkers were standalone programs, many of which could be run in <link xlink:type="simple" xlink:href="../741/69741.xml">
TSR</link> mode from within word-processing packages on PCs with sufficient memory.</p>
<p>

However, the market for standalone packages was short-lived, as by the mid 1980s developers of popular word-processing packages like <enterprise wordnetid="108056231" confidence="0.8">
<processor wordnetid="108065937" confidence="0.8">
<business wordnetid="108061042" confidence="0.8">
<link xlink:type="simple" xlink:href="../768/33768.xml">
WordStar</link></business>
</processor>
</enterprise>
 and <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../767/33767.xml">
WordPerfect</link></software>
 had incorporated spell checkers in their packages, mostly licensed from the above companies, who quickly expanded support from just <language wordnetid="106282651" confidence="0.8">
<link xlink:type="simple" xlink:href="../916/8569916.xml">
English</link></language>
 to <link xlink:type="simple" xlink:href="../239/9239.xml">
Europe</link>an and eventually even <link xlink:type="simple" xlink:href="../426/147426.xml">
Asian language</link>s. However, this required increasing sophistication in the morphology routines of the software, particularly with regard to heavily-inflected languages like <language wordnetid="106282651" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../972/13972.xml">
Hungarian</link></language>
 and <language wordnetid="106282651" confidence="0.8">
<link xlink:type="simple" xlink:href="../478/224478.xml">
Finnish</link></language>
. Although the size of the word-processing market in a country like <system wordnetid="108435388" confidence="0.8">
<economy wordnetid="108366753" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<link xlink:type="simple" xlink:href="../531/14531.xml">
Iceland</link></group>
</economy>
</system>
 might not have justified the investment of implementing a spell checker, companies like WordPerfect nonetheless strove to localize their software for as many as possible national markets as part of their global <link xlink:type="simple" xlink:href="../252/59252.xml">
marketing</link> strategy.</p>
<p>

Recently, spell checking has moved beyond word processors as <link xlink:type="simple" xlink:href="../892/210892.xml">
Firefox</link> 2.0, a <link xlink:type="simple" xlink:href="../173/33173.xml">
web browser</link>, has spell check support for user-written content, such as when editing Wikitext,writing on many <link xlink:type="simple" xlink:href="../887/75887.xml">
webmail</link> sites, <link xlink:type="simple" xlink:href="../645/33645.xml">
blogs</link>, and <link xlink:type="simple" xlink:href="../117/2041117.xml">
social networking</link> websites. The web browsers <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../392/17392.xml">
Konqueror</link></software>
 and <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../620/18996620.xml">
Opera</link></software>
, the email client <link xlink:type="simple" xlink:href="../442/104442.xml">
Kmail</link> and the <link xlink:type="simple" xlink:href="../951/55951.xml">
instant messaging</link> <link xlink:type="simple" xlink:href="../970/667970.xml">
client</link> <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<client wordnetid="109985075" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<case wordnetid="109898892" confidence="0.8">
<link xlink:type="simple" xlink:href="../211/188211.xml">
Pidgin</link></case>
</causal_agent>
</client>
</person>
</physical_entity>
 also offer spell checking support, transparently using <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../914/624914.xml">
GNU Aspell</link></software>
 as their engine.
<link xlink:type="simple" xlink:href="../640/20640.xml">
Mac OS X</link> now has spell check in virtually all bundled apps and many third party apple take advantage of this as well. Safari, Mail, iChat and more all have spell check capability.</p>

</sec>
<sec>
<st>
 Functionality </st>
<p>

The first spell checkers were "verifiers" instead of "correctors." They offered no suggestions for incorrectly spelled words. This was helpful for <link xlink:type="simple" xlink:href="../428/1057428.xml">
typos</link> but it was not so helpful for logical or phonetic errors. The challenge the developers faced was the difficulty in offering useful suggestions for misspelled words. This requires reducing words to a skeletal form and applying pattern-matching algorithms.</p>
<p>

It might seem logical that where spell-checking dictionaries are concerned, "the bigger, the better," so that correct words are not marked as incorrect. In practice, however, an optimal size for English appears to be around 90,000 entries. If there are more than this, incorrectly spelled words may be skipped because they are mistaken for others. For example, a linguist might determine on the basis of <link xlink:type="simple" xlink:href="../277/40277.xml">
corpus linguistics</link> that the word <it><link xlink:type="simple" xlink:href="../761/89761.xml">
baht</link></it> is more frequently a misspelling of <it>bath</it> or <it>bat</it> than a reference to the Thai currency. Hence, it would typically be more useful if a few people who write about Thai currency were slightly inconvenienced, than if the spelling errors of the many more people who discuss baths were overlooked.
<image location="right" width="150px" src="Spell_check.PNG" type="thumb">
<caption>

A screenshot of the Abiword spell checker
</caption>
</image>

The first MS-DOS spell checkers were mostly used in proofing mode from within word processing packages. After preparing a document, a user scanned the text looking for misspellings. Later, however, batch processing was offered in such packages as <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../591/22591.xml">
Oracle</link></company>
's short-lived <link>
CoAuthor</link>. This allowed a user to view the results after a document was processed and only correct the words that he or she knew to be wrong. When memory and processing power became abundant, spell checking was performed in the background in an interactive way, such as has been the case with the Sector Software produced Spellbound program released in 1987 and <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../287/20287.xml">
Microsoft Word</link></software>
 since Word 95.</p>
<p>

In recent years, spell checkers have become increasingly sophisticated; some are now capable of recognizing simple <link xlink:type="simple" xlink:href="../569/12569.xml">
grammatical</link> errors. However, even at their best, they rarely catch all the errors in a text (such as <link xlink:type="simple" xlink:href="../126/148126.xml">
homonym</link> errors) and will flag <link xlink:type="simple" xlink:href="../907/153907.xml">
neologism</link>s and foreign words as misspelling.</p>

</sec>
<sec>
<st>
 Spell-checking other languages </st>

<p>

English is unusual in that most words used in formal writing have a single spelling that can be found in a typical dictionary, with the exception of some jargon and modified words. In many languages, however, it's typical to frequently combine words in new ways. In German, compound nouns are frequently coined from other existing nouns. Some scripts do not clearly separate one word from another, requiring word-splitting algorithms. Each of these presents unique challenges to non-English language spell checkers.</p>

</sec>
<sec>
<st>
Context-sensitive spell checkers</st>

<p>

Recently, research has focused on developing algorithms which are capable of recognizing a misspelled word, even if the word itself is in the vocabulary, based on the context of the surrounding words. Not only does this allow words such as those in the poem above to be caught, but it mitigates the detrimental effect of enlarging dictionaries, allowing more words to be recognized. The most common example of errors caught by such a system are <link xlink:type="simple" xlink:href="../831/151831.xml">
homophone</link> errors, such as the bold words in the following sentence: 	 
<indent level="1">

<b>Their</b> coming <b>too</b> <b>sea</b> if <b>its</b> <b>reel</b>. 	 
</indent>

The most successful algorithm to date is Andrew Golding and Dan Roth's "Winnow-based  spelling correction algorithm" <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%222%22])">2</ref>, published in 1999, which is able to recognize about 96% of context-sensitive spelling errors, in addition to ordinary non-word spelling errors. A <link xlink:type="simple" xlink:href="../502/18629502.xml">
context-sensitive</link> spell checker appears in <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../500/2712500.xml">
Microsoft Office 2007</link></software>
<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%223%22])">3</ref>.</p>

</sec>
<sec>
<st>
 Criticism </st>

<p>

Some critics of technology and computers have attempted to link spell checkers to a trend of skill losses in writing, reading, and oral skill. They claim that the convenience of computers has led people to become lazy, often not proofreading written work past a simple pass by a spell checker. Supporters claim that these changes may actually be beneficial to society, by making writing and learning new languages more accessible to the general public. They claim that the skills lost by the invention of automated spell checkers are being replaced by better skills, such as faster and more efficient research skills. Other supporters of technology point to the fact that these skills are not being lost to people who require and make use of them regularly, such as authors, critics, and language professionals<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%224%22])">4</ref>.</p>
<p>

A good example of the problem with completely relying on spell checkers is the "<weblink xlink:type="simple" xlink:href="http://www.paulhensel.org/teachspell.html">
Spell-checker Poem</weblink>" shown above, which was originally composed by Dr. Jerrold H. Zar in 1991, with help by Mark Eckman <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%225%22])">5</ref>. The original poem was 225 words long and contained 123 words which were used incorrectly. The poem is valid according to most spell checkers, even though most people could tell at a simple glance that most words are used incorrectly.</p>

</sec>
<sec>
<st>
 See also </st>
<p>

<list>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../388/1775388.xml">
Nearest neighbor (pattern recognition)</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../951/978951.xml">
Record linkage problem</link></entry>
<entry level="1" type="bullet">

<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<engine wordnetid="103287733" confidence="0.8">
<motor wordnetid="103789946" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<machine wordnetid="103699975" confidence="0.8">
<link xlink:type="simple" xlink:href="../346/2958346.xml">
Spelling suggestion</link></machine>
</device>
</motor>
</engine>
</instrumentality>
</artifact>
</entry>
<entry level="1" type="bullet">

<idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<property wordnetid="105849040" confidence="0.8">
<feature wordnetid="105849789" confidence="0.8">
<link xlink:type="simple" xlink:href="../476/1070476.xml">
Grammar checker</link></feature>
</property>
</concept>
</idea>
</entry>
<entry level="1" type="bullet">


Spelling checking programs</entry>
</list>
</p>

</sec>
<sec>
<st>
References</st>
<p>

<reflist>
<entry id="1">
<weblink xlink:type="simple" xlink:href="http://cled.georgetown.edu/faculty/">
Faculty &amp; Staff: The Center for Language, Education &amp; Development</weblink></entry>
<entry id="2">
<weblink xlink:type="simple" xlink:href="http://www.springerlink.com/content/u13k033301184r82/">
SpringerLink - Journal Article</weblink></entry>
<entry id="3">
<weblink xlink:type="simple" xlink:href="http://blogs.msdn.com/correcteurorthographiqueoffice/archive/2006/06/05/617653.aspx">
CorrecteurOrthographiqueOffice : Contextual spelling in the 2007 Microsoft Office system</weblink></entry>
<entry id="4">
Baase, Sara. A Gift of Fire: Social, Legal, and Ethical Issues for Computing and the Internet. 3. Upper Saddle River: Prentice Hall, 2007. Pages 357-358. ISBN 0-13-600848-8.</entry>
<entry id="5">
http://grammar.about.com/od/spelling/a/spellcheck.htm. Accessed on July 31, 2008.</entry>
</reflist>
</p>

</sec>
<sec>
<st>
 External links </st>

<p>

<list>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://citeseer.ist.psu.edu/context/167352/0">
Computer Programs for Detecting and Correcting Spelling Errors</weblink></entry>
</list>
</p>


</sec>
</bdy>
</feature>
</property>
</concept>
</idea>
</article>
