<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 22:10:11[mciao0826] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<field  confidence="0.9511911446218017" wordnetid="108569998">
<header>
<title>Cantor–Zassenhaus algorithm</title>
<id>6059689</id>
<revision>
<id>234429933</id>
<timestamp>2008-08-26T20:48:54Z</timestamp>
<contributor>
<username>Nbrunner</username>
<id>1837862</id>
</contributor>
</revision>
<categories>
<category>Computer algebra</category>
<category>Finite fields</category>
</categories>
</header>
<bdy>

In <link xlink:type="simple" xlink:href="../831/18831.xml">
mathematics</link>, particularly <link xlink:type="simple" xlink:href="../427/54427.xml">
computational algebra</link>, the <b>Cantor–Zassenhaus algorithm</b> is a well known method for factorising <link xlink:type="simple" xlink:href="../000/23000.xml">
polynomial</link>s over <link xlink:type="simple" xlink:href="../615/11615.xml">
finite field</link>s (also called Galois fields).<p>

The algorithm consists mainly of exponentiation and polynomial <link xlink:type="simple" xlink:href="../354/12354.xml">
GCD</link> computations. It was invented by D. Cantor and <link xlink:type="simple" xlink:href="../825/1376825.xml">
Hans Zassenhaus</link> in 1981.</p>
<p>

It is arguably the dominant algorithm for solving the problem, having replaced the earlier <region wordnetid="108630985" confidence="0.8">
<field wordnetid="108569998" confidence="0.8">
<location wordnetid="100027167" confidence="0.8">
<tract wordnetid="108673395" confidence="0.8">
<geographical_area wordnetid="108574314" confidence="0.8">
<link xlink:type="simple" xlink:href="../100/6057100.xml">
Berlekamp's algorithm</link></geographical_area>
</tract>
</location>
</field>
</region>
 of 1967. It is currently implemented in many well-known <link xlink:type="simple" xlink:href="../427/54427.xml">
computer algebra system</link>s, including <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../441/7311441.xml">
PARI/GP</link></instrumentality>
</artifact>
</system>
.</p>

<sec>
<st>
Overview</st>

<ss1>
<st>
Background</st>
<p>

The Cantor–Zassenhaus algorithm takes as input a squarefree polynomial <math>f(x)</math> (i.e. one with no repeated factors) of degree <math>n</math> with coefficients in a finite field <math>\mathbb{F}_q</math> whose <link xlink:type="simple" xlink:href="../725/188725.xml">
irreducible polynomial</link> factors are all of equal degree (algorithms exist for efficiently factorising arbitrary polynomials into a product of polynomials satisfying these conditions, so that the Cantor–Zassenhaus algorithm can be used to factorise arbitrary polynomials).  It gives as output a polynomial <math>g(x)</math> with coefficients in the same field such that <math>g(x)</math> divides <math>f(x)</math>.  The algorithm may then be applied recursively to these and subsequent divisors, until we find the decomposition of <math>f(x)</math> into powers of <link xlink:type="simple" xlink:href="../725/188725.xml">
irreducible polynomial</link>s (recalling that the <link xlink:type="simple" xlink:href="../404/48404.xml">
ring</link> of polynomials over a finite field is a <link xlink:type="simple" xlink:href="../546/60546.xml">
unique factorisation domain</link>.</p>
<p>

All possible factors of <math>f(x)</math> are contained within the <link xlink:type="simple" xlink:href="../635/184635.xml">
factor ring</link>
<math>R = \frac{\mathbb{F}_q[x]}{\langle f(x) \rangle}</math>.  If we suppose that <math>f(x)</math> has irreducible factors <math>p_1(x), p_2(x), \ldots, p_s(x)</math>, all of degree <math>d</math>, then this factor ring is isomorphic to the <link xlink:type="simple" xlink:href="../899/58899.xml">
direct sum</link> of factor rings <math>S = \bigoplus_{i=1}^s \frac{\mathbb{F}_q[x]}{\langle p_i(x) \rangle}</math>.  The isomorphism from <math>R</math> to <math>S</math>, say <math>\phi</math>, maps a polynomial <math>g(x) \in R</math> to the <math>s</math>-tuple of its reductions modulo each of the <math>p_i(x)</math>, i.e. if:</p>
<p>

<indent level="1">

<math>
\begin{align}
g(x) &amp; {} \equiv g_1(x) \pmod{p_1(x)}, \\
g(x) &amp; {} \equiv g_2(x) \pmod{p_2(x)}, \\
&amp; {} \  \  \vdots \\
g(x) &amp; {} \equiv g_s(x) \pmod{p_s(x)},
\end{align}
</math>
</indent>

then <math>\phi(g(x) + \langle f(x) \rangle) = (g_1(x) + \langle p_1(x) \rangle, \ldots, g_s(x) + \langle p_s(x) \rangle)</math>.  It is important to note the following at this point, as it shall be of critical importance later in the algorithm:  Since the <math>p_i(x)</math> are each irreducible, each of the factor rings in this direct sum is in fact a field.  These fields each have degree <math>q^d</math>.</p>

</ss1>
<ss1>
<st>
Core result</st>
<p>

The core result underlying the Cantor–Zassenhaus algorithm is the following:  If <math>a(x) \in R</math> is a polynomial satisfying:</p>
<p>

<indent level="1">

 <math>a(x) \neq 0, \pm 1 </math>
</indent>

<indent level="1">

 <math>a_i(x) \in \{0,-1,1\}</math> for <math>i=1,2,\ldots, n,</math>
</indent>

where <math>a_i(x)</math> is the reduction of <math>a(x)</math> modulo <math>p_i(x)</math> as before,
and if any two of the following three sets is non-empty:</p>
<p>

<indent level="1">

 <math>A = \{ i | a_i(x) = 0 \}, </math>
</indent>

<indent level="1">

 <math>B = \{ i | a_i(x) = -1 \}, </math>
</indent>

<indent level="1">

 <math>C = \{ i | a_i(x) = 1 \}, </math>
</indent>

then there exist the following non-trivial factors of <math>f(x)</math>:</p>
<p>

<indent level="1">

 <math>\gcd(f(x),a(x)) = \prod_{i \in A} p_i(x),</math>
</indent>

<indent level="1">

 <math>\gcd(f(x),a(x)-1) = \prod_{i \in B} p_i(x),</math>
</indent>

<indent level="1">

 <math>\gcd(f(x),a(x)+1) = \prod_{i \in C} p_i(x).</math>
</indent>

</p>
</ss1>
<ss1>
<st>
Algorithm</st>
<p>

The Cantor–Zassenhaus algorithm computes polynomials of the same type as <math>a(x)</math> above using the isomorphism discussed in the Background section.  It proceeds as follows, in the case where the field <math>\mathbb{F}_q</math> is of odd-characteristic.  The process can be generalised to characteristic 2 fields in a fairly straightforward way:  Select a random polynomial <math>b(x) \in R</math> such that <math>b(x) \neq 0, \pm 1 </math>.  Set <math>m=(q^d-1)/2</math> and compute <math>b(x)^m</math>.  Since <math>\phi</math> is an isomorphism, we have (using our now-established notation):</p>
<p>

<indent level="1">

<math>\phi(b(x)^m) = (b_1^m(x) + \langle p_1(x) \rangle, \ldots, b^m_s(x) + \langle p_s(x) \rangle).</math>
</indent>

Now, each <math>b_i(x) + \langle p_i(x)\rangle</math> is an element of a field of order <math>q^d</math>, as noted earlier.  The multiplicative subgroup of this field has order <math>q^d-1</math> and so, unless <math>b_i(x)=0</math>, we have <math>b_i(x)^{q^d-1}=1</math> for each <math>i</math> and hence <math>b_i(x)^m = \pm 1</math> for each <math>i</math>.  If <math>b_i(x)=0</math>, then of course <math>b_i(x)^m=0</math>.  Hence <math>b(x)^m</math> is a polynomial of the same type as <math>a(x)</math> above.  Further, since <math>b(x) \neq 0, \pm1</math>, at least two of the sets <math>A,B</math> and <math>C</math> are non-empty and by computing the above GCDs we may obtain non-trivial factors.  Since the ring of polynomials over a field is a <link xlink:type="simple" xlink:href="../376/10376.xml">
Euclidean domain</link>, we may compute these GCDs using the <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../377/10377.xml">
Euclidean algorithm</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
.</p>

</ss1>
</sec>
<sec>
<st>
Applications</st>
<p>

One important application of the Cantor–Zassenhaus algorithm is in computing <link xlink:type="simple" xlink:href="../334/181334.xml">
discrete logarithm</link>s over finite fields of prime-power order.  Computing discrete logarithms is an important problem in <link>
public key cryptography</link>.  For a field of prime-power order, the fastest known method is the <link xlink:type="simple" xlink:href="../595/1549595.xml">
index calculus method</link>, which involves the factorisation of field elements.  If we represent the prime-power order field in the usual way – that is, as polynomials over the prime order base field, reduced modulo an irreducible polynomial of appropriate degree – then this is simply polynomial factorisation, as provided by the Cantor–Zassenhaus algorithm.</p>

</sec>
<sec>
<st>
Implementation in computer algebra systems</st>
<p>

The Cantor–Zassenhaus algorithm may be accessed in the PARI/GP package using the <weblink xlink:type="simple" xlink:href="http://pari.math.u-bordeaux.fr/dochtml/html.stable/Arithmetic_functions.html#factorcantor">
factorcantor</weblink> command.</p>

</sec>
<sec>
<st>
See also</st>
<p>

<list>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../351/3776351.xml">
Polynomial factorisation</link></entry>
<entry level="1" type="bullet">

<region wordnetid="108630985" confidence="0.8">
<field wordnetid="108569998" confidence="0.8">
<location wordnetid="100027167" confidence="0.8">
<tract wordnetid="108673395" confidence="0.8">
<geographical_area wordnetid="108574314" confidence="0.8">
<link xlink:type="simple" xlink:href="../100/6057100.xml">
Berlekamp's algorithm</link></geographical_area>
</tract>
</location>
</field>
</region>
</entry>
</list>
</p>

</sec>
<sec>
<st>
References</st>
<p>

<list>
<entry level="1" type="bullet">

 David G. Cantor and Hans Zassenhaus.  "A New Algorithm for Factoring Polynomials Over Finite Fields".  Mathematics of Computation, 36:587-592, 1981.</entry>
</list>
</p>


</sec>
</bdy>
</field>
</article>
