<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 22:16:18[mciao0827] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<artifact  confidence="0.8" wordnetid="100021939">
<instrumentality  confidence="0.8" wordnetid="103575240">
<apparatus  confidence="0.8" wordnetid="102727825">
<generator  confidence="0.8" wordnetid="103434188">
<equipment  confidence="0.8" wordnetid="103294048">
<algorithm  confidence="0.9511911446218017" wordnetid="105847438">
<header>
<title>CryptGenRandom</title>
<id>6109234</id>
<revision>
<id>239632080</id>
<timestamp>2008-09-19T19:26:14Z</timestamp>
<contributor>
<username>GrahamBould</username>
<id>1004607</id>
</contributor>
</revision>
<categories>
<category>Pseudorandom number generators</category>
<category>Microsoft Windows security technology</category>
<category>Cryptographically secure pseudorandom number generators</category>
<category>Microsoft application programming interfaces</category>
<category>Cryptographic algorithms</category>
</categories>
</header>
<bdy>

<b>CryptGenRandom</b> is a <link xlink:type="simple" xlink:href="../249/182249.xml">
crytographically secure pseudorandom number generator</link> function that is included in <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../001/19001.xml">
Microsoft</link></company>
's <link xlink:type="simple" xlink:href="../413/3302413.xml">
Cryptographic Application Programming Interface</link>. In <link xlink:type="simple" xlink:href="../601/81601.xml">
Win32</link> programs, Microsoft recommends its use anywhere random number generation is needed. A 2007 paper from Hebrew University suggested security problems in the <version wordnetid="107173585" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../941/33941.xml">
Windows 2000</link></version>
 implementation of CryptGenRandom (assuming the attacker has control of the machine). Microsoft later acknowledged that the same problems exist in <version wordnetid="107173585" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../879/33879.xml">
Windows XP</link></version>
, but not in <version wordnetid="107173585" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../648/2289648.xml">
Vista</link></version>
. In November 2007, Microsoft claimed they would fix the bug in when they released Windows XP Service Pack 3 in mid-2008. The release did occur.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref>
<sec>
<st>
Background</st>
<p>

The <link xlink:type="simple" xlink:href="../601/81601.xml">
Win32</link> <link xlink:type="simple" xlink:href="../ury/24th_century.xml">
API</link> includes comprehensive support for cryptographic security, including native <message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<standard wordnetid="107260623" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../813/187813.xml">
TLS</link></system_of_measurement>
</rule>
</direction>
</standard>
</protocol>
</message>
 support (via the <it>SCHANNEL</it> API) and <software wordnetid="106566077" confidence="0.8">
<application wordnetid="106570110" confidence="0.8">
<program wordnetid="106568978" confidence="0.8">
<written_communication wordnetid="106349220" confidence="0.8">
<writing wordnetid="106359877" confidence="0.8">
<code wordnetid="106355894" confidence="0.8">
<coding_system wordnetid="106353757" confidence="0.8">
<link xlink:type="simple" xlink:href="../009/3768009.xml">
Code signing</link></coding_system>
</code>
</writing>
</written_communication>
</program>
</application>
</software>
. These capabilities are built on native Windows libraries for cryptographic operations, such as <link xlink:type="simple" xlink:href="../385/25385.xml">
RSA</link> and <cipher wordnetid="106254239" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../260/1260.xml">
AES</link></cipher>
 key generation. These libraries in turn rely on a <link xlink:type="simple" xlink:href="../249/182249.xml">
cryptographically secure pseudorandom number generator</link> (CSPRNG). <b>CryptGenRandom</b> is the standard CSPRNG for the Win32 programming environment.</p>

</sec>
<sec>
<st>
Method of operation</st>
<p>

Microsoft-provided <link xlink:type="simple" xlink:href="../432/18934432.xml">
cryptography</link> providers share the same implementation of CryptGenRandom, currently based on an internal <link xlink:type="simple" xlink:href="../988/40988.xml">
function</link> called <b>RtlGenRandom</b>.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%222%22])">2</ref> Only a general outline of the <link xlink:type="simple" xlink:href="../775/775.xml">
algorithm</link> had been published <link xlink:type="simple" xlink:href="../165/36165.xml">
as of 2007</link>:</p>

<p>

[''RtlGenRandom''] generates as specified in <link xlink:type="simple" xlink:href="../113/11113.xml">
FIPS</link> 186-2 appendix 3.1 with <link xlink:type="simple" xlink:href="../672/26672.xml">
SHA-1</link> as the G function. And with entropy from:
<list>
<entry level="1" type="bullet">

The current process ID (GetCurrentProcessID).</entry>
<entry level="1" type="bullet">

The current thread ID (GetCurrentThreadID).</entry>
<entry level="1" type="bullet">

The tick count since boot time (GetTickCount).</entry>
<entry level="1" type="bullet">

The current time (GetLocalTime).</entry>
<entry level="1" type="bullet">

Various high-precision performance counters (QueryPerformanceCounter).</entry>
<entry level="1" type="bullet">

An <function wordnetid="113783816" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../106/578106.xml">
MD4</link></function>
 hash of the user's environment block, which includes username, computer name, and search path. [...]</entry>
<entry level="1" type="bullet">

High-precision internal CPU counters, such as RDTSC, RDMSR, RDPMC</entry>
</list>

[<it>omitted: long lists of low-level system information fields and performance counters</it>]
Source:  <cite style="font-style:normal" class="book"> Writing Secure Code, Second Edition. ISBN 0-7356-1722-8.</cite>&nbsp;</p>


</sec>
<sec>
<st>
Security</st>
<p>

The security of a cryptosystem's CSPRNG is significant because it is the origin for dynamic key material. Keys needed "on the fly", such as the AES TLS session keys that protect <link xlink:type="simple" xlink:href="../586/13586.xml">
HTTPS</link> sessions with bank websites, originate from CSPRNGs. If these pseudorandom numbers are predictable, session keys are predictable as well. Because CryptGenRandom is the de facto standard CSPRNG in Win32 environments, its security is critical for Windows users.</p>
<p>

The specifics of CryptGenRandom's algorithm have not been officially published. As with any unpublished random number generation algorithm, it may be susceptible to theoretical weaknesses including the use of outdated algorithms, and a reliance for <link xlink:type="simple" xlink:href="../445/15445.xml">
entropy</link> gathering on several monotonically-increasing counters that might be estimated or controlled to an extent by an attacker with local access to the system. </p>

<ss1>
<st>
Hebrew University Cryptanalysis</st>

<p>

A <link xlink:type="simple" xlink:href="../715/5715.xml">
cryptanalysis</link> of CryptGenRandom, published in November 2007 by <link>
Leo Dorrendorf</link> and others from the <university wordnetid="108286163" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../168/229168.xml">
Hebrew University of Jerusalem</link></university>
 and <university wordnetid="108286163" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../501/368501.xml">
University of Haifa</link></university>
, found significant weaknesses in the <version wordnetid="107173585" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../941/33941.xml">
Windows 2000</link></version>
 implementation of the algorithm.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%223%22])">3</ref></p>
<p>

To take advantage of the Hebrew University vulnerability, an attacker would first need to compromise the program running the random number generator. The weaknesses in the paper all depend on an attacker siphoning the state bits out of the generator. An attacker in a position to carry out this attack would typically already be in a position to defeat any random number generator (for instance, they can simply sniff the outputs of the generator, or fix them in memory to known values). However, the Hebrew University team notes that an attacker only need steal the state bits once in order to persistently violate the security of a CryptGenRandom instance. They can also use the information they glean to determine past random numbers that were generated, potentially compromising information, such as credit card numbers, already sent.</p>
<p>

The paper's attacks are based on the fact that CryptGenRandom uses the stream cipher <cipher wordnetid="106254239" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../831/25831.xml">
RC4</link></cipher>
, which can be run backwards once its state is known. They also takes advantage of the fact that CryptGenRandom runs in <link xlink:type="simple" xlink:href="../467/93467.xml">
user mode</link>, allowing anyone who gains access to the operating system at user level, for example by exploiting a <link xlink:type="simple" xlink:href="../373/4373.xml">
buffer overflow</link>, to get CryptGenRandom's state information for that process. Finally, CryptGenRandom refreshes its seed from <link xlink:type="simple" xlink:href="../445/15445.xml">
entropy</link> infrequently. This problem is aggravated by the fact that each Win32 process has its own instance of CryptGenRandom state; while this means that a compromise of one process does not transitively compromise every other process, it may also increase the longevity of any successful break.</p>
<p>

Because the details of the CryptGenRandom algorithm are not public, Dorrendorf's team used <link xlink:type="simple" xlink:href="../488/18935488.xml">
reverse engineering</link> tools (including <link xlink:type="simple" xlink:href="../394/3849394.xml">
Ollydbg</link> and <link xlink:type="simple" xlink:href="../322/852322.xml">
IDA Pro</link>) to discern how the algorithm works. As a result, their paper is the first published record of how the Windows cryptographic random number generator operates.</p>

</ss1>
<ss1>
<st>
Common Criteria</st>
<p>

Windows 2000, XP and 2003 have all successfully undergone EAL4+ evaluations, including the CryptGenRandom() and FIPSGenRandom() implementations.  The Security Target documentation is available at <weblink xlink:type="simple" xlink:href="http://www.commoncriteriaportal.org">
the Common Criteria Portal</weblink>, and indicates compliance with the EAL4 requirements. Few conclusions can be drawn about the security of the algorithm as a result; EAL4 measures products against best practices and stated security objectives, but rarely involves in-depth cryptanalysis.</p>

</ss1>
<ss1>
<st>
FIPS validation</st>
<p>

Microsoft has <weblink xlink:type="simple" xlink:href="http://csrc.nist.gov/cryptval/rng/rngval.html">
obtained validation</weblink> of its RNG implementations in the following environments:
<list>
<entry level="1" type="bullet">

 Windows Vista RNG implementations (certificate 321)</entry>
<entry level="1" type="bullet">

 Windows 2003 Enhanced Cryptographic Provider (rsaenh.dll) (certificate 316)</entry>
<entry level="1" type="bullet">

 Windows 2003 Enhanced DSS and Diffie-Hellman Cryptographic Provider (dssenh.dll) (certificate 314)</entry>
<entry level="1" type="bullet">

 Windows 2003 Kernel Mode Cryptographic Module (fips.sys) (certificate 313)</entry>
<entry level="1" type="bullet">

 Windows CE and Windows Mobile Enhanced Cryptographic Provider (rsaenh.dll) (certificate 292)</entry>
<entry level="1" type="bullet">

 Windows CE and Windows Mobile Enhanced Cryptographic Provider (rsaenh.dll) (certificate 286)</entry>
<entry level="1" type="bullet">

 Windows CE Enhanced Cryptographic Provider (rsaenh.dll) (certificate 66)</entry>
</list>
</p>
<p>

These tests are "designed to test conformance to the various approved RNG specifications rather 
than provide a measure of a product’s security. [...] Thus, validation should not be interpreted as an evaluation or 
endorsement of overall product security." Few conclusions can be drawn about the security of the algorithm as a result; FIPS evaluations do not necessarily inspect source code or evaluate the way RNG seeds are generated.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%224%22])">4</ref></p>

</ss1>
<ss1>
<st>
Source Code Access programs</st>
<p>

There are a number of <weblink xlink:type="simple" xlink:href="http://www.microsoft.com/resources/sharedsource/Licensing/default.mspx">
source code access programs</weblink> offered by Microsoft (usually protected by very explicit EULAs) that provide access to source code not otherwise shared with the general public.</p>

</ss1>
<ss1>
<st>
Disassembly</st>
<p>

The runtime libraries for Windows platforms can be <link xlink:type="simple" xlink:href="../390/54390.xml">
disassembled</link> by off-the-shelf tools such as <link xlink:type="simple" xlink:href="../322/852322.xml">
IDA Pro</link> and <link xlink:type="simple" xlink:href="../311/4464311.xml">
objdump</link>. Additionally, unlike most closed-source vendors, Microsoft provides debug symbols for their release binaries. As a result, Microsoft binaries are often evaluated by third-party security practitioners. The cryptanalysis by Dorrendorf et al., mentioned above, is based on such a disassembly.</p>

</ss1>
</sec>
<sec>
<st>
Alternatives</st>

<ss1>
<st>
API level</st>
<p>

Windows developers have several alternative means of accessing the CryptGenRandom functionality; these alternatives invoke the same algorithm and share the same security characteristics, but may have other advantages.
</p>
<ss2>
<st>
Using RtlGenRandom</st>

<p>

"Historically, we always told developers not to use functions such as rand to generate keys, nonces and passwords, rather they should use functions like CryptGenRandom, which creates cryptographically secure random numbers. The problem with CryptGenRandom is you need to pull in CryptoAPI (CryptAcquireContext and such) which is fine if you're using other crypto functions.</p>
<p>

On a default Windows XP and later install, CryptGenRandom calls into a function named ADVAPI32!RtlGenRandom, which does not require you load all the CryptAPI stuff. In fact, the new Whidbey CRT function, rand_s calls RtlGenRandom".<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%225%22])">5</ref></p>


</ss2>
<ss2>
<st>
Using RNGCryptoServiceProvider</st>
<p>

Programmers using <platform wordnetid="103961939" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<surface wordnetid="104362025" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<tool wordnetid="104451818" confidence="0.8">
<horizontal_surface wordnetid="103536348" confidence="0.8">
<implement wordnetid="103563967" confidence="0.8">
<link xlink:type="simple" xlink:href="../402/60402.xml">
.NET</link></implement>
</horizontal_surface>
</tool>
</instrumentality>
</surface>
</artifact>
</platform>
 should use the <weblink xlink:type="simple" xlink:href="http://msdn2.microsoft.com/en-us/library/system.security.cryptography.rngcryptoserviceprovider.aspx">
RNGCryptoServiceProvider Class</weblink>.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%226%22])">6</ref></p>

</ss2>
</ss1>
<ss1>
<st>
Programming languages</st>
<p>

<list>
<entry level="1" type="bullet">

the <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../862/23862.xml">
Python</link></programming_language>
 function <it>urandom</it> in the <it>os</it> module, which uses /dev/urandom on Unix-based systems, calls CryptGenRandom on Windows systems.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%227%22])">7</ref></entry>
</list>
</p>

</ss1>
</sec>
<sec>
<st>
References</st>

<p>

<reflist>
<entry id="1">
<weblink xlink:type="simple" xlink:href="http://www.computerworld.com/action/article.do?command=viewArticleBasic&amp;articleId=9048438">
Microsoft confirms that XP contains random number generator bug</weblink></entry>
<entry id="2">
<weblink xlink:type="simple" xlink:href="http://msdn2.microsoft.com/en-us/library/aa387694.aspx">
RtlGenRandom Function (Windows)</weblink></entry>
<entry id="3">
Dorrendorf, Leo;&#32;Zvi Gutterman, Benny Pinkas.&#32;"<weblink xlink:type="simple" xlink:href="http://eprint.iacr.org/2007/419.pdf">
Cryptanalysis of the Random Number Generator of the Windows Operating System</weblink>"&#32;(pdf).</entry>
<entry id="4">
http://csrc.nist.gov/cryptval/rng/RNGVS.pdf</entry>
<entry id="5">
<weblink xlink:type="simple" xlink:href="http://blogs.msdn.com/michael_howard/archive/2005/01/14/353379.aspx">
Michael Howard's Web Log : Cryptographically Secure Random number on Windows without using CryptoAPI</weblink></entry>
<entry id="6">
http://jis.mit.edu/pipermail/saag/2004q3.txt</entry>
<entry id="7">
<weblink xlink:type="simple" xlink:href="http://docs.python.org/lib/os-miscfunc.html">
Python Library Reference, OS module</weblink></entry>
</reflist>
</p>

</sec>
<sec>
<st>
See also</st>

<p>

<table style="background:#f9f9f9; font-size:85%; line-height:110%; ">
<row>
<col>
 <image width="32x28px" src="Crypto_key.svg">
</image>
</col>
<col style="padding:0 0.2em;">
 <b><it>
Cryptography&#32;portal</it></b></col>
</row>
</table>
</p>
<p>

<list>
<entry level="1" type="bullet">

 <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../249/182249.xml">
Cryptographically secure pseudorandom number generator</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</entry>
<entry level="1" type="bullet">

 <operation wordnetid="100955060" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<apparatus wordnetid="102727825" confidence="0.8">
<generator wordnetid="103434188" confidence="0.8">
<equipment wordnetid="103294048" confidence="0.8">
<attack wordnetid="100972621" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<link xlink:type="simple" xlink:href="../124/1250124.xml">
Random number generator attack</link></activity>
</psychological_feature>
</act>
</attack>
</equipment>
</generator>
</apparatus>
</event>
</instrumentality>
</artifact>
</operation>
</entry>
</list>
</p>

</sec>
<sec>
<st>
External links</st>
<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://msdn2.microsoft.com/en-us/library/aa379942.aspx">
Microsoft documentation for <it>CryptGenRandom''</it></weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://blogs.msdn.com/michael_howard/archive/2005/01/14/353379.aspx">
Cryptographically Secure Random number on Windows without using CryptoAPI</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.microsoft.com/technet/security/prodtech/Windows2000/w2kccwp.mspx">
Overview of Windows 2000 Common Criterion evaluation</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.microsoft.com/resources/sharedsource/Licensing/default.mspx">
Microsoft Shared Source licensing programs</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://go.microsoft.com/fwlink?/LinkID=36329">
Microsoft FIPS 140 evaluations</weblink></entry>
</list>
</p>

</sec>
</bdy>
</algorithm>
</equipment>
</generator>
</apparatus>
</instrumentality>
</artifact>
</article>
