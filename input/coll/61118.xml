<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 15:46:13[mciao0825] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>Load balancing (computing)</title>
<id>61118</id>
<revision>
<id>244360179</id>
<timestamp>2008-10-10T12:46:25Z</timestamp>
<contributor>
<username>Mwanner</username>
<id>93358</id>
</contributor>
</revision>
<categories>
<category>All articles with unsourced statements</category>
<category>Wikipedia external links cleanup</category>
<category>Articles with invalid date parameter in template</category>
<category>Servers</category>
<category>Network management</category>
<category>Routing</category>
<category>Articles with unsourced statements since December 2007</category>
</categories>
</header>
<bdy>

In <link xlink:type="simple" xlink:href="../652/5652.xml">
computer networking</link>, <b>load balancing</b> is a technique to spread work between two or more computers, network links, CPUs, hard drives, or other resources, in order to get optimal resource utilization, throughput, or response time.  Using multiple components with load balancing, instead of a single component, may increase reliability through <idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<link xlink:type="simple" xlink:href="../581/1953581.xml">
redundancy</link></concept>
</idea>
.  The balancing service is usually provided by a dedicated program or hardware device (such as a <link xlink:type="simple" xlink:href="../110/235110.xml">
multilayer switch</link>).<p>

It is commonly used to mediate internal communications in <link xlink:type="simple" xlink:href="../896/18949896.xml">
computer cluster</link>s, especially <link xlink:type="simple" xlink:href="../683/2468683.xml">
high-availability cluster</link>s.</p>

<sec>
<st>
 For Internet services </st>

<p>

One of the most common applications of load balancing is to provide a single <link xlink:type="simple" xlink:href="../539/14539.xml">
Internet</link> service from multiple <generic wordnetid="107899976" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../116/42116.xml">
server</link></generic>
s, sometimes known as a <link xlink:type="simple" xlink:href="../929/264929.xml">
server farm</link>.  Commonly load-balanced systems include popular <link xlink:type="simple" xlink:href="../898/33898.xml">
web site</link>s, large <social_group wordnetid="107950920" confidence="0.8">
<gathering wordnetid="107975026" confidence="0.8">
<community wordnetid="108223802" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<link xlink:type="simple" xlink:href="../730/14730.xml">
Internet Relay Chat</link></group>
</community>
</gathering>
</social_group>
 networks, high-bandwidth <link xlink:type="simple" xlink:href="../289/53289.xml">
File Transfer Protocol</link> sites, <message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<standard wordnetid="107260623" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../004/173004.xml">
NNTP</link></system_of_measurement>
</rule>
</direction>
</standard>
</protocol>
</message>
 servers and <message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<link xlink:type="simple" xlink:href="../339/8339.xml">
DNS</link></rule>
</direction>
</protocol>
</message>
 servers.</p>
<p>

For Internet services, the load balancer is usually a software program which is listening on the <link xlink:type="simple" xlink:href="../331/4971331.xml">
port</link> where external clients connect to access services.  The load balancer forwards requests to one of the "backend" servers, which usually replies to the load balancer.  This allows the load balancer to reply to the client without the client ever knowing about the internal separation of functions.  It also prevents clients from contacting backend servers directly, which may have security benefits by hiding the structure of the internal network and preventing attacks on the kernel's network stack or unrelated services running on other ports.</p>
<p>

Some load balancers provide a mechanism for doing something special in the event that all backend servers are unavailable.  This might include forwarding to a backup load balancer, or displaying a message regarding the outage.</p>
<p>

An alternate method of load balancing which does not necessarily require a dedicated software or hardware node, is called <link xlink:type="simple" xlink:href="../181/2647181.xml">
round robin DNS</link>.  In this technique, multiple <link xlink:type="simple" xlink:href="../921/14921.xml">
IP address</link>es are associated with a single <link xlink:type="simple" xlink:href="../878/39878.xml">
domain name</link> (i.e. www.example.org); clients themselves are expected to choose which server to connect.  Unlike the use of a dedicated load balancer, this technique is not "transparent" to clients, because it exposes the existence of multiple backend servers.  The technique has other advantages and disadvantages, depending on the degree of control over the DNS server and the granularity of load balancing which is desired.</p>
<p>

A variety of <link xlink:type="simple" xlink:href="../425/384425.xml">
scheduling algorithm</link>s are used by load balancers to determine which backend server to send a request to.  Simple algorithms include random choice or <link xlink:type="simple" xlink:href="../068/233068.xml">
round robin</link>.  More sophisticated load balancers may take into account additional factors, such as a server's reported load, recent response times, up/down status (determined by a monitoring poll of some kind), number of active connections, geographic location, capabilities, or how much traffic it has recently been assigned.  High-performance systems may use multiple layers of load balancing.</p>
<p>

In addition to using dedicated hardware load balancers, software-only solutions are available, including open source options.  Examples of the latter include the <software wordnetid="106566077" confidence="0.9508927676800064">
<link>
Apache</link></software>
 web server's mod_proxy_balancer extension and the <link>
Pound</link> reverse proxy and load balancer. </p>

<ss1>
<st>
 Persistence </st>

<p>

An important issue when operating a load-balanced service is how to handle information that must be kept across the multiple requests in a user's session.  If this information is stored locally on one back end server, then subsequent requests going to different back end servers would not be able to find it.  This might be cached information that can be recomputed, in which case load-balancing a request to a different back end server just introduces a performance issue.</p>
<p>

One solution to the session data issue is to send all requests in a user session consistently to the same back end server.  This is known as "persistence" or "stickiness".  A large downside to this technique is its lack of automatic <link xlink:type="simple" xlink:href="../240/796240.xml">
failover</link>: if a backend server goes down, its per-session information becomes inaccessible, and sessions depending on it are lost.</p>
<p>

Assignment to a particular server might be based on a username, client <link xlink:type="simple" xlink:href="../921/14921.xml">
IP address</link>, or random assignment.  Due to <link xlink:type="simple" xlink:href="../622/8622.xml">
DHCP</link>, <link xlink:type="simple" xlink:href="../036/53036.xml">
Network Address Translation</link>, and <link xlink:type="simple" xlink:href="../768/78768.xml">
web proxies</link>, the client's IP address may change across requests, and so this method can be somewhat unreliable.  Random assignments must be remembered by the load balancer, which creates a storage burden.  If the load balancer is replaced or fails, this information can be lost, and assignments may need to be deleted after a timeout period or during periods of high load, to avoid exceeding the space available for the assignment table.  The random assignment method also requires that clients maintain some state, which can be a problem, for example when a web browser has disabled storage of cookies.  Sophisticated load balancers use multiple persistence techniques to avoid some of the shortcomings of any one method.</p>
<p>

Another solution is to keep the per-session data in a <link xlink:type="simple" xlink:href="../377/8377.xml">
database</link>.  Generally this is bad for performance since it increases the load on the database: the database is best used to store information less transient than per-session data.  (Interestingly, to prevent a database from becoming a <link xlink:type="simple" xlink:href="../836/1724836.xml">
single point of failure</link>, and to improve <link xlink:type="simple" xlink:href="../529/185529.xml">
scalability</link>, the database is often replicated across multiple machines, and load balancing is used to spread the query load across those replicas.)</p>
<p>

Fortunately there are more efficient approaches.  In the very common case where the client is a web browser, per-session data can be stored in the browser itself.  One technique is to use a browser cookie, suitably time-stamped and encrypted.  Another is <link>
 URL rewriting</link>.  Storing session data on the client is generally the preferred solution: then the load balancer is free to pick any backend server to handle a request.</p>

</ss1>
<ss1>
<st>
 Load balancer features </st>
<p>

Hardware and software load balancers can come with a variety of special features.&#91;&#93;</p>
<p>

<list>
<entry level="1" type="bullet">

 <b>Asymmetric load:</b> A ratio can be manually assigned to cause some backend servers to get a greater share of the workload than others. This is sometimes used as a crude way to account for some servers being faster than others.</entry>
<entry level="1" type="bullet">

 <b>Priority activation:</b> When the number of available servers drops below a certain number, or load gets too high, standby servers can be brought online</entry>
<entry level="1" type="bullet">

 <b>SSL Offload and Acceleration:</b> <link xlink:type="simple" xlink:href="../813/187813.xml">
SSL</link> applications can be a heavy burden on the resources of a Web Server, especially on the CPU and the end users may see a slow response (or at the very least the servers are spending a lot of cycles doing things they weren't designed to do).  To resolve these kinds of issues, a Load Balancer capable of handling SSL Offloading in specialized hardware may be used.  When Load Balancers are taking the SSL connections, the burden on the Web Servers is reduced and performance will not degrade for the end users. </entry>
<entry level="1" type="bullet">

 <b>Distributed Denial of Service (DDoS) attack protection:</b> load balancers can provide features such as <link xlink:type="simple" xlink:href="../326/6507326.xml">
SYN cookies</link> and delayed-binding (the back-end servers don't see the client until it finishes its TCP handshake) to mitigate <operation wordnetid="100955060" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<attack wordnetid="100972621" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<link xlink:type="simple" xlink:href="../095/236095.xml">
SYN flood</link></activity>
</psychological_feature>
</act>
</attack>
</event>
</operation>
 attacks and generally offload work from the servers to a more efficient platform.</entry>
<entry level="1" type="bullet">

 <b><link xlink:type="simple" xlink:href="../757/4954757.xml">
HTTP compression</link>:</b> reduces amount of data to be transferred for HTTP objects by utilizing gzip compression available in all modern web browsers</entry>
<entry level="1" type="bullet">

 <b>TCP offload:</b> different vendors use different terms for this, but the idea is that normally each HTTP request from each client is a different TCP connection.  This feature utilizes HTTP/1.1 to consolidate multiple HTTP requests from multiple clients into a single TCP socket to the back-end servers.</entry>
<entry level="1" type="bullet">

 <b>TCP buffering:</b> the load balancer can buffer responses from the server and spoon-feed the data out to slow clients, allowing the server to move on to other tasks.</entry>
<entry level="1" type="bullet">

 <b><link xlink:type="simple" xlink:href="../719/437719.xml">
HTTP caching</link>:</b> the load balancer can store static content so that some requests can be handled without contacting the web servers.</entry>
<entry level="1" type="bullet">

 <b>Content Filtering:</b> some load balancers can arbitrarily modify traffic on the way through.</entry>
<entry level="1" type="bullet">

 <b>HTTP security:</b> some load balancers can hide HTTP error pages, remove server identification headers from HTTP responses, and encrypt cookies so end users can't manipulate them.</entry>
<entry level="1" type="bullet">

 <b><link xlink:type="simple" xlink:href="../485/24485.xml">
Priority queuing</link>:</b> also known as <link xlink:type="simple" xlink:href="../669/242669.xml">
rate shaping</link>, the ability to give different priority to different traffic.</entry>
<entry level="1" type="bullet">

 <b>Content aware switching:</b> most load balancers can send requests to different servers based on the URL being requested.</entry>
<entry level="1" type="bullet">

 <b>Client authentication:</b> authenticate users against a variety of authentication sources before allowing them access to a website.</entry>
<entry level="1" type="bullet">

 <b>Programmatic traffic manipulation:</b> at least one load balancer allows the use of a scripting language to allow custom load balancing methods, arbitrary traffic manipulations, and more.</entry>
<entry level="1" type="bullet">

 <b><link xlink:type="simple" xlink:href="../296/1362296.xml">
Firewall</link>:</b> Direct connections to backend servers are prevented, for security reasons</entry>
</list>
</p>

</ss1>
</sec>
<sec>
<st>
In telecommunications</st>


<p>

Load balancing can be useful when dealing with redundant communications links.  For example, a company may have multiple Internet connections network access even if one of the connections should fail.</p>
<p>

A <link xlink:type="simple" xlink:href="../240/796240.xml">
failover</link> arrangement would mean that one link is designated for normal use, while the second link is used only if the first one fails.</p>
<p>

With load balancing, both links can be in use all the time.  A device or program decides which of the available links to send packets along, being careful not to send packets along any link if it has failed. The ability to use multiple links simultaneously increases the available bandwidth.</p>
<p>

Major telecommunications companies have multiple routes through their networks or to external networks.  They use more sophisticated load balancing to shift traffic from one path to another to avoid <link xlink:type="simple" xlink:href="../522/430522.xml">
network congestion</link> on any particular link, and sometimes to minimize the cost of transit across external networks or improve <message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<link xlink:type="simple" xlink:href="../492/2563492.xml">
network reliability</link></rule>
</direction>
</protocol>
</message>
. </p>

<p>

<indent level="1">

<it>Further information: <link xlink:type="simple" xlink:href="../750/25750.xml">
Routing</link></it>
</indent>

</p>
</sec>
<sec>
<st>
Relationship with failover</st>

<p>

Load balancing is often used to implement <link xlink:type="simple" xlink:href="../240/796240.xml">
failover</link> &mdash; the continuation of a service after the failure of one or more of its components.  The components are monitored continually (e.g., web servers may be monitored by fetching known pages), and when one becomes non-responsive, the load balancer is informed and no longer sends traffic to it.  And when a component comes back on line, the load balancer begins to route traffic to it again.  For this to work, there must be at least one component in excess of the service's capacity.  This is much less expensive and more flexible than failover approaches where a single "live" component is paired with a single "backup" component that takes over in the event of a failure.  In a <link xlink:type="simple" xlink:href="../695/54695.xml">
RAID</link> disk controller, using <link>
RAID1</link> (mirroring) is analogous to the "live/backup" approach to failover, where <link>
RAID5</link> is analogous to load balancing failover.</p>

</sec>
<sec>
<st>
See also</st>
<p>

<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../169/11323169.xml">
Application Delivery Controller</link></entry>
<entry level="1" type="bullet">

 <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../494/19541494.xml">
Cloud computing</link></instrumentality>
</artifact>
</system>
</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../122/5276122.xml">
Edge computing</link></entry>
<entry level="1" type="bullet">

 <message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<link xlink:type="simple" xlink:href="../194/1449194.xml">
Common Address Redundancy Protocol</link></rule>
</direction>
</protocol>
</message>
</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../204/1616204.xml">
Network Load Balancing Services</link></entry>
</list>
</p>

</sec>
<sec>
<st>
References</st>
<p>



<list>
<entry level="1" type="bullet">

<link>
Tony Bourke</link>: <it>Server Load Balancing</it>, O'Reilly, ISBN 0-596-00050-2</entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../043/4330043.xml">
Chandra Kopparapu</link>: <it>Load Balancing Servers, Firewalls &amp; Caches</it>, Wiley, ISBN 0-471-41550-2</entry>
<entry level="1" type="bullet">

<link>
Robert J. Shimonski</link>: <it>Windows Server 2003 Clustering &amp; Load Balancing</it>, Osborne McGraw-Hill, ISBN 0-07-222622-6</entry>
<entry level="1" type="bullet">

<physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<intellectual wordnetid="109621545" confidence="0.8">
<alumnus wordnetid="109786338" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scholar wordnetid="110557854" confidence="0.8">
<link xlink:type="simple" xlink:href="../954/3838954.xml">
Jeremy Zawodny</link></scholar>
</causal_agent>
</alumnus>
</intellectual>
</person>
</physical_entity>
, <link>
Derek J. Balling</link>: <it>High Performance MySQL</it>, O'Reilly, ISBN 0-596-00306-4</entry>
<entry level="1" type="bullet">

<link>
Matthew Syme</link>, <link>
Philip Goldie</link>: <it>Optimizing Network Performance with Content Switching: Server, Firewall and Cache Load Balancing, Prentice Hall PTR, ISBN 0-13-101468-5</it></entry>
</list>
</p>

</sec>
<sec>
<st>
External links</st>

<p>

<table class="metadata plainlinks ambox ">
<row>
<col>

ambox-style" style=""</col>
</row>
<row>
<col class="mbox-image"><p>

<image width="40x40px" src="Ambox_style.png">
</image>
</p>
</col>
<col style="" class="mbox-text">
 <b>The external links in this article may not follow Wikipedia's  or .</b>
Please <weblink xlink:type="simple" xlink:href="http://localhost:18088/wiki/index.php?title=Load_balancing_%28computing%29&amp;action=edit">
improve this article</weblink> by removing excessive or inappropriate external links. </col>
</row>
</table>
</p>


<p>

<list>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://wwwcs.uni-paderborn.de/cs/ag-monien/RESEARCH/LOADBAL/">
Dynamic Load Balancing and Scheduling</weblink></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://lcic.org/load_balancing.html">
Load Sharing and Balancing</weblink></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.zib.de/projects/telecommunication/STP/index.en.html">
Load Balancing in Signaling Transfer Points</weblink></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://technet2.microsoft.com/windowsserver/en/library/6ac4a6ba-1c0c-46be-8c6a-2c2e0e567e981033.mspx">
What Is Network Load Balancing?</weblink></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.debian-administration.org/articles/249">
Simple webserver load balancing with Pound</weblink> by Steve Kemp</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.articleonramp.com/Article.cfm?ID=358">
DNS load balancing</weblink> by Mark Henry</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://1wt.eu/articles/2006_lb/index.html">
Making applications scalable with load balancing</weblink> by <link>
Willy Tarreau</link></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.howtoforge.com/haproxy_loadbalancer_debian_etch">
Setting Up A High-Availability Load Balancer With HAProxy/Keepalived On Debian Etch</weblink> by Falko Timme</entry>
</list>
</p>


</sec>
</bdy>
</article>
