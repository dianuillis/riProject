<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 17:25:11[mciao0828] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>Heterogeneous Element Processor</title>
<id>615487</id>
<revision>
<id>236697123</id>
<timestamp>2008-09-06T18:18:17Z</timestamp>
<contributor>
<username>Hellis</username>
<id>114276</id>
</contributor>
</revision>
<categories>
<category>Parallel computing</category>
</categories>
</header>
<bdy>

The <b>Heterogeneous Element Processor (HEP)</b> was introduced by Denelcor in 1982 as the world's first commercial <link xlink:type="simple" xlink:href="../139/157139.xml">
MIMD</link> computer.  A HEP system, as the name implies, was pieced together from many <link xlink:type="simple" xlink:href="../490/542490.xml">
heterogeneous</link> components -- <link xlink:type="simple" xlink:href="../218/5218.xml">
processors</link>, data memory modules, and I/O modules.  The components were connected via a <link xlink:type="simple" xlink:href="../339/43339.xml">
switched network</link>.<p>

A single processor in a HEP system (up to sixteen could be connected) was rather unconventional; via a "program status word (PSW) queue," up to fifty <link>
processes</link> could be maintained in hardware at once.  The eight-stage <link xlink:type="simple" xlink:href="../314/220314.xml">
instruction pipeline</link> allowed instructions from eight different processes to proceed at once.  In fact, only one instruction from a given process was allowed to be present in the pipeline at any point in time.  Therefore, the full processor throughput of 10 <link>
MIPS</link> could only be achieved when eight or more processes were active; no single process could achieve throughput greater than 1.25 MIPS. This type of <link xlink:type="simple" xlink:href="../679/10520679.xml">
multithreading</link> processing classifies the <b>HEP</b> as a <link xlink:type="simple" xlink:href="../824/1274824.xml">
barrel processor</link>.</p>
<p>

Processes were classified as either user-level or supervisor-level.  User-level processes could create supervisor-level processes, which were used to manage user-level processes and perform I/O.  Processes of the same class were required to be grouped into one of seven user tasks and seven supervisor tasks.</p>
<p>

Each processor, in addition to the PSW queue and instruction pipeline, contained instruction memory, 2,048 64-bit general purpose <register wordnetid="106507041" confidence="0.8">
<record wordnetid="106647206" confidence="0.8">
<indication wordnetid="106797169" confidence="0.8">
<evidence wordnetid="106643408" confidence="0.8">
<written_record wordnetid="106502378" confidence="0.8">
<link xlink:type="simple" xlink:href="../432/486432.xml">
registers</link></written_record>
</evidence>
</indication>
</record>
</register>
 and 4,096 constant registers.  Constant registers were differentiated by the fact that only supervisor processes could modify their contents.  Interestingly, the processors themselves contained no data memory; instead, data memory modules could be separately attached to the switched network.</p>
<p>

The HEP implemented a type of <link xlink:type="simple" xlink:href="../827/36827.xml">
mutual exclusion</link> in which all registers and locations in data memory had associated "empty" and "full" states.  Reading from a location set the state to "empty," while writing to it set the state to "full."  A programmer could allow processes to halt after trying to read from an empty location or write to a full location, enforcing critical sections.</p>
<p>

The switched network between elements resembled, in many ways, a modern computer network.  On the network were sets of nodes, each of which had three links.  When a packet arrived at a node, it consulted a routing table and attempted to forward the packet closer to its destination.  If a node became congested, any incoming packets were passed on without routing.  Packets treated in such a manner had their priority level increased; when several packets vied for a single node, a packet with a higher priority level would be routed before ones with lower priority levels.</p>
<p>

Although it was known to have poor cost-performance, the HEP received attention due to what were, at the time, several revolutionary features.  HEP systems were purchased by <site wordnetid="108651247" confidence="0.8">
<region wordnetid="108630985" confidence="0.8">
<position wordnetid="108621598" confidence="0.8">
<center wordnetid="108523483" confidence="0.8">
<point wordnetid="108620061" confidence="0.8">
<landmark wordnetid="108624891" confidence="0.8">
<area wordnetid="108497294" confidence="0.8">
<location wordnetid="100027167" confidence="0.8">
<tract wordnetid="108673395" confidence="0.8">
<geographical_area wordnetid="108574314" confidence="0.8">
<link xlink:type="simple" xlink:href="../145/38145.xml">
Los Alamos</link></geographical_area>
</tract>
</location>
</area>
</landmark>
</point>
</center>
</position>
</region>
</site>
, the <site wordnetid="108651247" confidence="0.8">
<region wordnetid="108630985" confidence="0.8">
<location wordnetid="100027167" confidence="0.8">
<tract wordnetid="108673395" confidence="0.8">
<geographical_area wordnetid="108574314" confidence="0.8">
<link xlink:type="simple" xlink:href="../773/160773.xml">
Argonne National Laboratory</link></geographical_area>
</tract>
</location>
</region>
</site>
, the Ballistic Research Laboratory, and 
The HEP attracted widespread attention despite its terrible cost performance because of its many interesting hardware features that facilitated programming. The Denelcor HEP was acquired by several institutions, including Los Alamos, Argonne National Laboratory, Ballistic Research Laboratory, and Germany's <link xlink:type="simple" xlink:href="../669/176669.xml">
Messerschmitt</link>.  Messerschmitt was the only client to put the HEP into use for "real" applications; the other clients used it for experimenting with parallel algorithms.</p>

<sec>
<st>
See also</st>
<p>

<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../679/10520679.xml">
multithreading</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../443/151443.xml">
hyperthreading</link></entry>
</list>
</p>

</sec>
</bdy>
</article>
