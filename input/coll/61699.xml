<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 15:47:59[mciao0826] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<message  confidence="0.8" wordnetid="106598915">
<platform  confidence="0.8" wordnetid="103961939">
<information  confidence="0.8" wordnetid="106634376">
<electronic_database  confidence="0.8" wordnetid="106588511">
<artifact  confidence="0.8" wordnetid="100021939">
<surface  confidence="0.8" wordnetid="104362025">
<lexical_database  confidence="0.8" wordnetid="106638868">
<horizontal_surface  confidence="0.8" wordnetid="103536348">
<wordnet  confidence="0.8" wordnetid="106639428">
<database  confidence="0.8" wordnetid="106637824">
<header>
<title>Genera (operating system)</title>
<id>61699</id>
<revision>
<id>241529953</id>
<timestamp>2008-09-28T13:46:07Z</timestamp>
<contributor>
<username>ImageRemovalBot</username>
<id>4851336</id>
</contributor>
</revision>
<categories>
<category>Computing platforms</category>
<category>Operating systems</category>
<category>Common Lisp software</category>
<category>Lisp software</category>
</categories>
</header>
<bdy>
<template>
<name>Infobox_OS</name>
<parameters>
<ui>
Dynamic Windows</ui>
<screenshot>
<image width="300px" src="Symbolics-document-examiner.png">
</image>
</screenshot>
<supported_platforms>
various Symbolics Lisp Machines, DEC Alpha</supported_platforms>
<website>
<weblink xlink:type="simple" xlink:href="http://www.symbolics.com/">
symbolics.com</weblink></website>
<latest_release_version>
8.5</latest_release_version>
<family>
Lisp Machine OS</family>
<developer>
<computer wordnetid="103082979" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<company wordnetid="108058098" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<machine wordnetid="103699975" confidence="0.8">
<digital_computer wordnetid="103196324" confidence="0.8">
<workstation wordnetid="104603399" confidence="0.8">
<institution wordnetid="108053576" confidence="0.8">
<link xlink:type="simple" xlink:href="../195/28195.xml">
Symbolics</link></institution>
</workstation>
</digital_computer>
</machine>
</device>
</company>
</instrumentality>
</artifact>
</computer>
</developer>
<name>
Genera</name>
<source_model>
User has access to source</source_model>
<license>
<link xlink:type="simple" xlink:href="../886/18934886.xml">
Proprietary</link></license>
</parameters>
</template>

<p>

This article is about an Operating System.&#32;&#32;For the Scientific Classification term, see <link xlink:type="simple" xlink:href="../493/38493.xml">
Genus</link>.&#32;&#32;</p>
<p>

<b>Genera</b> is a commercial <link xlink:type="simple" xlink:href="../194/22194.xml">
operating system</link> and development environment for <computer wordnetid="103082979" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<machine wordnetid="103699975" confidence="0.8">
<digital_computer wordnetid="103196324" confidence="0.8">
<workstation wordnetid="104603399" confidence="0.8">
<link xlink:type="simple" xlink:href="../123/18123.xml">
Lisp machine</link></workstation>
</digital_computer>
</machine>
</device>
</instrumentality>
</artifact>
</computer>
s developed by <computer wordnetid="103082979" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<company wordnetid="108058098" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<machine wordnetid="103699975" confidence="0.8">
<digital_computer wordnetid="103196324" confidence="0.8">
<workstation wordnetid="104603399" confidence="0.8">
<institution wordnetid="108053576" confidence="0.8">
<link xlink:type="simple" xlink:href="../195/28195.xml">
Symbolics</link></institution>
</workstation>
</digital_computer>
</machine>
</device>
</company>
</instrumentality>
</artifact>
</computer>
. It is essentially a <fork wordnetid="103383948" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<article wordnetid="100022903" confidence="0.8">
<ware wordnetid="104550840" confidence="0.8">
<tableware wordnetid="104381994" confidence="0.8">
<cutlery wordnetid="103153375" confidence="0.8">
<link xlink:type="simple" xlink:href="../506/301506.xml">
fork</link></cutlery>
</tableware>
</ware>
</article>
</artifact>
</fork>
 of an earlier operating system originating on the <link xlink:type="simple" xlink:href="../061/19061.xml">
MIT</link> <link xlink:type="simple" xlink:href="../274/434274.xml">
AI Lab</link>'s <computer wordnetid="103082979" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<machine wordnetid="103699975" confidence="0.8">
<digital_computer wordnetid="103196324" confidence="0.8">
<workstation wordnetid="104603399" confidence="0.8">
<link xlink:type="simple" xlink:href="../123/18123.xml">
Lisp machine</link></workstation>
</digital_computer>
</machine>
</device>
</instrumentality>
</artifact>
</computer>
s which Symbolics had used in common with <link xlink:type="simple" xlink:href="../355/1084355.xml">
LMI</link> and Texas Instruments. Genera is also sold by Symbolics as <b>Open Genera</b>, which runs Genera on computers based on an <link xlink:type="simple" xlink:href="../971/8971.xml">
Alpha</link>-Processor using <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../275/38275.xml">
Tru64 Unix</link></O>
.</p>
<p>

Genera is an example of an <link xlink:type="simple" xlink:href="../194/22194.xml">
operating system</link> written in <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../016/18016.xml">
Lisp</link></programming_language>
. It is also an <link xlink:type="simple" xlink:href="../109/230109.xml">
object-oriented operating system</link>.</p>
<p>

Genera supports incremental and interactive development of complex software using a mix of programming styles with extensive support for object-oriented programming.</p>

<sec>
<st>
 MIT's Lisp Machine operating system </st>

<p>

The Lisp Machine operating system was written in <link xlink:type="simple" xlink:href="../775/47775.xml">
Lisp Machine Lisp</link>. The Lisp Machine was a single user workstation initially targeted at software developers for <link xlink:type="simple" xlink:href="../164/1164.xml">
artificial intelligence</link> projects.  The Lisp Machine had a large bitmap screen, a mouse, a keyboard, a network interface, a disk drive and slots for expansion. The operating system was supporting this hardware. The Lisp Machine Operating system provided (among others):</p>
<p>

<list>
<entry level="1" type="bullet">

 code for a Frontend Processor</entry>
<entry level="1" type="bullet">

 a way to boot the operating system</entry>
<entry level="1" type="bullet">

 virtual memory management</entry>
<entry level="1" type="bullet">

 garbage collection</entry>
<entry level="1" type="bullet">

 drivers for the hardware (mouse, keyboard, screen, disk, ...)</entry>
<entry level="1" type="bullet">

 an interpreter and a native code compiler for Lisp Machine Lisp</entry>
<entry level="1" type="bullet">

 an object system (Flavors)</entry>
<entry level="1" type="bullet">

 a window system and a window manager</entry>
<entry level="1" type="bullet">

 a local file system</entry>
<entry level="1" type="bullet">

 support for the CHAOS network</entry>
<entry level="1" type="bullet">

 an Emacs-like Editor</entry>
<entry level="1" type="bullet">

 a mail program</entry>
<entry level="1" type="bullet">

 a Lisp listener</entry>
<entry level="1" type="bullet">

 a debugger</entry>
</list>
</p>
<p>

This was already a complete operating system and development environment for a Lisp-based single-user operating system.</p>
<p>

The MIT Lisp Machine operating system has been developed from the mid 70s to the early 80s. In 2006 the source code has been open sourced.</p>

</sec>
<sec>
<st>
 Symbolics Genera operating system </st>

<p>

<computer wordnetid="103082979" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<company wordnetid="108058098" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<machine wordnetid="103699975" confidence="0.8">
<digital_computer wordnetid="103196324" confidence="0.8">
<workstation wordnetid="104603399" confidence="0.8">
<institution wordnetid="108053576" confidence="0.8">
<link xlink:type="simple" xlink:href="../195/28195.xml">
Symbolics</link></institution>
</workstation>
</digital_computer>
</machine>
</device>
</company>
</instrumentality>
</artifact>
</computer>
 developed new <link xlink:type="simple" xlink:href="../123/18123.xml">
Lisp Machine</link>s and published the operating system under the name <b>Genera</b>. Genera 8.5 is the latest version. Symbolics Genera has been developed from the early 80s to the early 90s. In the recent years there were mostly patches developed and very little new functionality.</p>
<p>

Symbolics developed Genera based on this foundation of the MIT Lisp machine operating system. It sold the operating system and <b>layered software</b>. Some of the layered software has been integrated into Genera in later releases. Symbolics improved the operating system software from the original MIT Lisp Machine and expanded it. The Genera operating system was only available for Symbolics Lisp Machines and the Open Genera virtual machine.</p>
<p>

Symbolics Genera has a large number of features and supported all the versions of various hardware that Symbolics built over its lifetime. Its source code is more than a million lines of code (the number depends on the release and what amount of software is installed). Symbolics Genera was published on tape and CDROM. The release of the operating system also provided most of the the source code of the operating system and its applications. The user has free access to all parts of the running operating system and can write changes and extensions. The source code of the operating system is divided into <b>system</b>s. These systems bundle sources, binaries and other files. The <b>system construction toolkit</b> (SCT) maintains the dependencies, the components and the versions of all the systems. A system has two numbers: a major and a minor version number. The major version number counts the number of full constructions of a system. The minor version counts the number of patches to that system. A <b>patch</b> is a file that can be loaded to fix problems or provide extensions to a particular version of a system.</p>
<p>

Symbolics developed a version of Genera, called Open Genera that included a virtual machine that enables the execution of Genera on DEC Alpha based workstations. Symbolics also developed a new operating system called <b>Minima</b> in <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../068/6068.xml">
Common Lisp</link></programming_language>
 (used for embedded applications). Symbolics also developed several extensions and applications for Genera that were sold separately (like the Symbolics <b>S-Graphics</b> suite).</p>
<p>

The original Lisp Machine operating system was developed in <link xlink:type="simple" xlink:href="../775/47775.xml">
Lisp Machine Lisp</link> and using the <b>Flavors</b> object-oriented extension to Lisp Machine Lisp. Symbolics provided a successor to Flavors called <b>New Flavors</b>. Later Symbolics also supported <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../068/6068.xml">
Common Lisp</link></programming_language>
 and the <link xlink:type="simple" xlink:href="../414/191414.xml">
Common Lisp Object System</link>. Then Symbolics Common Lisp became the default Lisp dialect for writing software with Genera. The software of the operating system was written mostly in Lisp Machine Lisp (called <link xlink:type="simple" xlink:href="../332/2110332.xml">
ZetaLisp</link>) and Symbolics Common Lisp. These Lisp dialects are both provided by Genera. Also parts of the software was using either Flavors, New Flavors and Common Lisp Object System. Some of the older parts of the Genera operating system have been rewritten in Symbolics Common Lisp and the Common Lisp Object system. Many parts of the operating systems remained written in ZetaLisp and Flavors (or New Flavors).</p>

</sec>
<sec>
<st>
 Symbolics Genera user interface </st>

<p>

The early versions of Symbolics Genera were built with the original window system of the Lisp Machine operating system. Symbolics then developed a radically new window system called <b>Dynamic Windows</b> with a <b>presentation-based user interface</b>. Many of the applications of Genera have then been using Dynamic Windows for their user interface. Eventually there was a move to port parts of the window system to run on other Common Lisp implementations by other vendors as the <link xlink:type="simple" xlink:href="../245/5137245.xml">
Common Lisp Interface Manager</link> (CLIM). Versions of CLIM have been available (among others) for <group_action wordnetid="101080366" confidence="0.8">
<enforcement wordnetid="101127019" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<social_control wordnetid="101123598" confidence="0.8">
<language wordnetid="106282651" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<execution wordnetid="101127379" confidence="0.8">
<link xlink:type="simple" xlink:href="../482/4993482.xml">
Allegro Common Lisp</link></execution>
</psychological_feature>
</act>
</language>
</social_control>
</event>
</enforcement>
</group_action>
, <group_action wordnetid="101080366" confidence="0.8">
<enforcement wordnetid="101127019" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<social_control wordnetid="101123598" confidence="0.8">
<language wordnetid="106282651" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<execution wordnetid="101127379" confidence="0.8">
<link xlink:type="simple" xlink:href="../837/6610837.xml">
LispWorks</link></execution>
</psychological_feature>
</act>
</language>
</social_control>
</event>
</enforcement>
</group_action>
 and Macintosh Common Lisp. An open source version is available (<link>
McCLIM</link>).</p>
<p>

<b>Dynamic Windows</b> uses typed objects for all output to the screen. All displayed information keeps its connection to the objects displayed (<b>output recording</b>). This works for both textual and graphical output. At runtime the applicable operations to these objects are computed based on the class hierarchy and the available operations (<b>commands</b>). <b>commands</b> are organized in (hierarchical) <b>command tables</b> with typed parameters. Commands can be entered with the mouse, keystrokes and with a command line interface. All applications share a single command line interpreter implementation, which adapts to various types of usage. The graphical capabilities of the window system are based on the PostScript graphics model.</p>
<p>

The user interface is mostly in black and white (since that was what the hardware console typically provided). But there was also extensive support for color (using color frame buffers or X11 servers with color support). The <b>activities</b> (applications) are using the whole screen with several panes (though windows can also be smaller). The layout of these activity windows adapts to different screen sizes. Activities can also switch between different pane layouts.</p>
<p>

Genera provides a <b>system menu</b> for controlling windows, switching applications and for window system operations. Many features of the user interface (switching between activities, creating activities, stopping/starting processes and much more) can also be controlled with keyboard commands.</p>


<p>

The <b>Dynamic Lisp Listener</b> is an example of a command line interface with full graphics capabilities and support for mouse-based interaction. It accepts Lisp expressions and commands as input. The output is mouse sensitive. The Lisp listener can display forms to input data for the various built-in commands.</p>
<p>

The user interface provides extensive online help and completion of choices in various contexts.</p>

</sec>
<sec>
<st>
 Symbolics Genera documentation </st>

<p>

Genera supports fully hyperlinked online documentation. The documentation is read with the <b>Document Examiner</b>, an early <link xlink:type="simple" xlink:href="../460/13460.xml">
hypertext</link> browser. The documentation is based on small reusable documentation records that can also be displayed in various contexts with the Editor and the Lisp Listener. The documentation is organized in books and sections. The books were also provided in printed versions with the same contents as the online documentation. The documentation database information is delivered with Genera and can be modified with incremental patches.</p>
<p>

The documentation was created with a separate application that was not shipped with Genera: Symbolics <b>Concordia</b>. Concordia provides an extension to the <b>Zmacs</b> editor for editing documentation records, a graphics editor and a page previewer.</p>
<p>

The documentation provides user guides, installation guidelines and references of the various Lisp constructs and libraries.</p>
<p>

The markup language is based on the <link xlink:type="simple" xlink:href="../682/9313682.xml">
Scribe</link> markup language and also usable by the developer.</p>
<p>

Genera supports printing to postscript printers, provides a printing queue and also a PostScript interpreter (written in Lisp).</p>

</sec>
<sec>
<st>
 Symbolics Genera, other features </st>

<p>

Genera also has support for various network protocols and applications using those. It has extensive support for TCP/IP.</p>
<p>

Genera supports single processor machines with several threads (called <b>processes</b>).</p>
<p>

Genera supports several different types of <link xlink:type="simple" xlink:href="../734/6734.xml">
Garbage Collection</link>: full Garbage Collection, in-place Garbage Collection, Incremental Garbage Collection and Ephemeral Garbage Collection. The Ephemeral Garbage Collector only uses physical memory and uses the memory management unit to get information about changed pages in physical memory. The garbage collector uses generations and the virtual memory is divided into areas. Areas can contain objects of certain types (strings, bitmaps, pathnames, ...) and each area can use different memory management mechanisms.</p>


<p>

Genera implements two file systems: the FEP file system for large files and the <b>LMFS</b> (Lisp Machine File System, optimized for many small files). These file systems also maintain different versions of files. If a file is modified, Genera still keeps the old versions. Genera also provides access to other (local and remote) file systems: NFS, FTP, HFS, CDROMs and others. Genera also can read and write to and from tape drives.</p>
<p>

Genera supports netbooting.</p>
<p>

Genera provides a client for the <b>Statice</b> object-oriented database from Symbolics.</p>
<p>

Genera makes extensive use of the <b>condition system</b> (exception handling) to handle all kinds of runtime errors and is able to recover from many of these errors. It allows for example to retry network operations in case a network connection has a failure - the application code will continue to run. In case of errors the user will be presented a menu of restarts (abort, retry, continue options) that are specific to the error signalled.</p>


<p>

Genera has extensive debugging tools.</p>



<p>

Genera can save versions of the running system to <b>worlds</b>. These worlds can be booted and then will contain all the saved data and code.</p>

</sec>
<sec>
<st>
 Symbolics Genera programming languages </st>

<p>

Symbolics provided several programming languages for use with Genera:</p>
<p>

<list>
<entry level="1" type="bullet">

 ZetaLisp, the Symbolics version of Lisp Machine Lisp</entry>
<entry level="1" type="bullet">

 Common Lisp in several versions: Symbolics Common Lisp, Future Common Lisp (ANSI Common Lisp), CLtL1</entry>
<entry level="1" type="bullet">

 Symbolics Pascal, a version of Pascal written in Lisp</entry>
<entry level="1" type="bullet">

 Symbolics C, a version of C written in Lisp</entry>
<entry level="1" type="bullet">

 Symbolics Fortran, a version of Fortran written in Lisp</entry>
</list>
</p>
<p>

Symbolics Common Lisp provides most of the Common Lisp standard with a huge number of extensions (many of those coming from <link xlink:type="simple" xlink:href="../332/2110332.xml">
ZetaLisp</link>).</p>
<p>

Other languages from Symbolics</p>
<p>

<list>
<entry level="1" type="bullet">

 Symbolics Prolog, a version of Prolog written and integrated in Lisp</entry>
<entry level="1" type="bullet">

 Symbolics Ada, a version of Ada written in Lisp</entry>
</list>
</p>
<p>

It is remarkable that these programming language implementations inherited some of the dynamic features of the Lisp system (like garbage collection and checked access to data) and supported incremental software development.</p>
<p>

Third-party developers provided additional programming languages (like OPS5) and development tools (like the Knowledge Engineering Environment, KEE, from Intellicorp).</p>



</sec>
<sec>
<st>
 Symbolics Genera applications </st>

<p>

Symbolics Genera comes with several applications. Applications are called <b>activities</b>. Some of the activities</p>
<p>

<list>
<entry level="1" type="bullet">

 Zmacs, an Emacs-like text editor</entry>
<entry level="1" type="bullet">

 Zmail, a mail reader also providing a calendar</entry>
<entry level="1" type="bullet">

 File system browser with tools for file system maintenance</entry>
<entry level="1" type="bullet">

 Lisp Listener with command line interface</entry>
<entry level="1" type="bullet">

 Document Examiner for browsing documentation</entry>
<entry level="1" type="bullet">

 Restore Distribution to install software.</entry>
<entry level="1" type="bullet">

 Distribute Systems, to create software distributions</entry>
<entry level="1" type="bullet">

 Peek to examine system information (processes, windows, network connections, ...)</entry>
<entry level="1" type="bullet">

 Debugger</entry>
<entry level="1" type="bullet">

 Namespace Editor to access informations about objects in the network (users, computers, file systems, ...)</entry>
<entry level="1" type="bullet">

 Converse, a chat client</entry>
<entry level="1" type="bullet">

 Terminal</entry>
<entry level="1" type="bullet">

 Inspector, for browsing Lisp data structures</entry>
<entry level="1" type="bullet">

 Notifications</entry>
<entry level="1" type="bullet">

 Frame-Up, for designing user interfaces</entry>
<entry level="1" type="bullet">

 Flavor Examiner, to examine the classes and methods of the Flavor object-oriented extension to Lisp</entry>
</list>
</p>
<p>

The Symbolics Museum from Ralf Möller provides <weblink xlink:type="simple" xlink:href="http://www.sts.tu-harburg.de/~r.f.moeller/symbolics-info/development-environment/index.html">
screenshots</weblink> of those of these activities.</p>

</sec>
<sec>
<st>
 Symbolics Genera Highlights </st>

<p>

<list>
<entry level="1" type="bullet">

 Genera is written completely in Lisp (using Zeta Lisp and Symbolics Common Lisp).</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 Even all the low-level system code is written in Lisp (device drivers, garbage collection, process scheduler, network stacks, ...).</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 The source code is more than a million lines of Lisp and available for the user to be inspected and changed. The source is relatively compact, compared to the provided functionality, due to extensive reuse.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 The operating system is mostly written in an object-oriented style using Flavors, New Flavors and CLOS</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 It has extensive online documentation readable with the Document Examiner</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 Dynamic Windows provides a presentation-based user interface</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 The user interface can be used locally (on Lisp Machines and MacIvories) and remotely (using X11)</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 Groups of developers can work together in a networked environment.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 A central Namespace Server provides a directory of machines, users, services, networks, file systems, databases and more.</entry>
</list>
</p>

</sec>
<sec>
<st>
 Limitations </st>

<p>

<list>
<entry level="1" type="bullet">

 Genera only runs on Symbolics Lisp Machines or the Open Genera emulator</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 Genera supports only a single user logged in at any time</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 There is only one Lisp system running at any time. Data and code is shared by applications and the operating system.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 There is mostly no protection against changing the operating system. The whole operating system is fully accessible and changeable.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 Development has effectively stopped in the mid 90s</entry>
</list>
</p>

</sec>
<sec>
<st>
 Usage </st>

<p>

A version of Open Genera that can run on x86-64 Linux exists.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref></p>
<p>

The source of the original MIT Lisp Machine operating system has been open sourced.</p>

</sec>
<sec>
<st>
 References </st>

<p>

<reflist>
<entry id="1">
<weblink xlink:type="simple" xlink:href="http://www.advogato.org/person/johnw/diary/12.html">
Advogato: Blog for johnw</weblink></entry>
</reflist>
</p>

</sec>
<sec>
<st>
 External links </st>
<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.symbolics.com/">
Symbolics</weblink></entry>
<entry level="2" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.symbolics.com/Genera-1.htm">
Symbolics Genera Integrated Development Environment</weblink></entry>
<entry level="2" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.sts.tu-harburg.de/~r.f.moeller/symbolics-info/symbolics-tech-summary.html">
"Symbolics Technical Summary"</weblink></entry>
<entry level="2" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://lispm.dyndns.org/genera-concepts/genera.html">
"Genera Concepts"</weblink> - (Web copy of Symbolic's introduction to Genera)</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.sts.tu-harburg.de/~r.f.moeller/symbolics-info/development-environment/index.html">
A page of screenshots of Genera</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.sts.tu-harburg.de/~r.f.moeller/symbolics-info/docex/docex.html">
Screenshots of the award-winning Symbolics Document Examiner</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://pt.withy.org/publications/VLM.html">
"The Symbolics Virtual Lisp Machine, Or, Using The Dec Alpha As A Programmable Micro-engine"</weblink></entry>
</list>
</p>

<p>

<table style=";" class="navbox" cellspacing="0">
<row>
<col style="padding:2px;">
<table style="width:100%;background:transparent;color:inherit;;" class="nowraplinks collapsible autocollapse " cellspacing="0">
<row>
<header colspan="2" style=";" class="navbox-title">
<link xlink:type="simple" xlink:href="../194/22194.xml">
Operating system</link></header>
</row>
<row style="height:2px;">

</row>
<row>
<col style=";;" class="navbox-group">
General</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<link xlink:type="simple" xlink:href="../395/55395.xml">
History</link>&nbsp;·  <record wordnetid="106647206" confidence="0.8">
<chronology wordnetid="106503224" confidence="0.8">
<indication wordnetid="106797169" confidence="0.8">
<evidence wordnetid="106643408" confidence="0.8">
<timeline wordnetid="106504965" confidence="0.8">
<written_record wordnetid="106502378" confidence="0.8">
<link xlink:type="simple" xlink:href="../968/247968.xml">
Timeline</link></written_record>
</timeline>
</evidence>
</indication>
</chronology>
</record>
&nbsp;·  <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../119/229119.xml">
Developement</link></database>
</wordnet>
</lexical_database>
</electronic_database>
</information>
</message>
&nbsp;·  <link xlink:type="simple" xlink:href="../531/981531.xml">
List</link></col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
<link xlink:type="simple" xlink:href="../394/50394.xml">
Kernel</link></col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-even">
<table style="width:100%;;;;" class="nowraplinks  navbox-subgroup" cellspacing="0">
<row>
<col style=";padding-left:0em;padding-right:0em;;" class="navbox-group">
General</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<link xlink:type="simple" xlink:href="../023/20023.xml">
Microkernel</link>&nbsp;·  <link xlink:type="simple" xlink:href="../023/20023.xml#xpointer(//*[./st=%22Nanokernel%22])">
Nanokernel</link></col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";padding-left:0em;padding-right:0em;;" class="navbox-group">
Types</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-even">
<link xlink:type="simple" xlink:href="../825/20825.xml">
monolithic</link>&nbsp;·  <plant_part wordnetid="113086908" confidence="0.8">
<natural_object wordnetid="100019128" confidence="0.8">
<kernel wordnetid="113137010" confidence="0.8">
<link xlink:type="simple" xlink:href="../041/4345041.xml">
hybrid</link></kernel>
</natural_object>
</plant_part>
&nbsp;·  <plant_part wordnetid="113086908" confidence="0.8">
<natural_object wordnetid="100019128" confidence="0.8">
<kernel wordnetid="113137010" confidence="0.8">
<link xlink:type="simple" xlink:href="../757/95757.xml">
exokernel</link></kernel>
</natural_object>
</plant_part>
</col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";padding-left:0em;padding-right:0em;;" class="navbox-group">
Components</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<link xlink:type="simple" xlink:href="../467/93467.xml">
Kernel space</link>&nbsp;·  <link xlink:type="simple" xlink:href="../658/371658.xml">
Loadable kernel module</link>&nbsp;·  <link xlink:type="simple" xlink:href="../101/9101.xml">
device driver</link>&nbsp;·  <link xlink:type="simple" xlink:href="../467/93467.xml">
User space</link>&nbsp;·  <link xlink:type="simple" xlink:href="../109/555109.xml">
Userland</link></col>
</row>
</table>
</col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
<link xlink:type="simple" xlink:href="../806/15395806.xml">
Process management</link></col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<link xlink:type="simple" xlink:href="../178/45178.xml">
Process</link>&nbsp;·  <link xlink:type="simple" xlink:href="../857/6857.xml">
Multiprogramming</link>&nbsp;·  <link xlink:type="simple" xlink:href="../289/15289.xml">
Interrupt</link>&nbsp;·  Modes: (<link xlink:type="simple" xlink:href="../596/167596.xml">
Protected mode</link>&nbsp;·  <link>
Supervisor mode</link>)&nbsp;·  <link xlink:type="simple" xlink:href="../857/6857.xml">
Computer multitasking</link>&nbsp;·  <link xlink:type="simple" xlink:href="../920/231920.xml">
Scheduling</link>&nbsp;·  <link xlink:type="simple" xlink:href="../904/6904.xml">
Context switch</link>&nbsp;·  <link xlink:type="simple" xlink:href="../857/6857.xml">
Cooperative multitasking</link>&nbsp;·  <link xlink:type="simple" xlink:href="../566/2204566.xml">
Preemptive multitasking</link>&nbsp;·  <link xlink:type="simple" xlink:href="../954/3991954.xml">
CPU modes</link>&nbsp;·  <link xlink:type="simple" xlink:href="../303/45303.xml">
Thread (computer science)</link></col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
Memory management</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-even">
<link xlink:type="simple" xlink:href="../373/515373.xml">
Memory protection</link>&nbsp;·  <link xlink:type="simple" xlink:href="../131/1323131.xml">
Segmentation</link>&nbsp;·  <link xlink:type="simple" xlink:href="../193/311193.xml">
Paging</link>&nbsp;·  <link xlink:type="simple" xlink:href="../112/177112.xml">
Memory management unit</link>&nbsp;·  <link xlink:type="simple" xlink:href="../803/28803.xml">
Segmentation fault</link>&nbsp;·  <link xlink:type="simple" xlink:href="../943/573943.xml">
General protection fault</link></col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
Examples</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../304/18933304.xml">
AmigaOS</link></O>
&nbsp;·  <link xlink:type="simple" xlink:href="../801/4801.xml">
BeOS</link>&nbsp;·  <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../409/22409.xml">
IBM OS/2</link></O>
&nbsp;·  <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../027/20027.xml">
MS-DOS</link></O>
&nbsp;·  <link xlink:type="simple" xlink:href="../890/18890.xml">
Windows</link>&nbsp;·  <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../297/6097297.xml">
Linux</link></O>
&nbsp;·  <link xlink:type="simple" xlink:href="../642/31642.xml">
UNIX</link>&nbsp;·  <link xlink:type="simple" xlink:href="../658/1178658.xml">
OpenSolaris</link>&nbsp;·  <link xlink:type="simple" xlink:href="../640/20640.xml">
Mac OS X</link>&nbsp;·   <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../889/360889.xml">
ReactOS</link></O>
&nbsp;·  <it><link xlink:type="simple" xlink:href="../916/71916.xml">
more…</link>''</it></col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
Miscellaneous concepts</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-even">
<link xlink:type="simple" xlink:href="../679/6885679.xml">
Boot loader</link>&nbsp;·  <standard wordnetid="107260623" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../253/432253.xml">
PXE</link></system_of_measurement>
</standard>
&nbsp;·  <link xlink:type="simple" xlink:href="../ury/24th_century.xml">
API</link>&nbsp;·  <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../131/351131.xml">
Virtual file system</link></instrumentality>
</artifact>
</system>
&nbsp;·  <link xlink:type="simple" xlink:href="../071/2550071.xml">
Virtual tape library</link>&nbsp;·  <link xlink:type="simple" xlink:href="../592/4122592.xml">
Computer network</link>&nbsp;·  <link xlink:type="simple" xlink:href="../293/12293.xml">
GUI</link>&nbsp;·  <link xlink:type="simple" xlink:href="../511/425511.xml">
HAL</link></col>
</row>
</table>
</col>
</row>
</table>
</p>



</sec>
</bdy>
</database>
</wordnet>
</horizontal_surface>
</lexical_database>
</surface>
</artifact>
</electronic_database>
</information>
</platform>
</message>
</article>
