<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 17:23:58[mciao0825] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>Distributed transaction</title>
<id>619053</id>
<revision>
<id>210691465</id>
<timestamp>2008-05-06T23:55:50Z</timestamp>
<contributor>
<username>Alexbot</username>
<id>5517884</id>
</contributor>
</revision>
<categories>
<category>Transaction processing</category>
<category>Data management</category>
</categories>
</header>
<bdy>

A <b>distributed transaction</b> is an <link>
operations bundle</link>, in which two or more network hosts are involved. Usually, hosts provide <b>transactional resources</b>, while the <b>transaction manager</b> is responsible for creating and managing a global transaction that encompasses all operations against such resources. Distributed transactions, as any other transactions, must have all four <link xlink:type="simple" xlink:href="../776/60776.xml">
ACID</link> properties, where atomicity guarantees all-or-nothing outcomes for the unit of work (operations bundle). <p>

Open Group, a vendor consortium, proposed the <standard wordnetid="107260623" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link>
X/Open Distributed Transaction Processing (DTP) Model</link></system_of_measurement>
</standard>
, which became a de-facto standard for behavior of transaction model components.</p>
<p>

Databases are common transactional resources and, often, transactions span a couple of such databases. In this case, a distributed transaction can be seen as a <link xlink:type="simple" xlink:href="../953/233953.xml">
database transaction</link> that must be <link xlink:type="simple" xlink:href="../850/10633850.xml">
synchronized</link> (or provide <link xlink:type="simple" xlink:href="../776/60776.xml">
ACID</link> properties) among multiple participating <link xlink:type="simple" xlink:href="../377/8377.xml">
database</link>s which are <link xlink:type="simple" xlink:href="../501/8501.xml">
distributed</link> among different physical locations. The <link xlink:type="simple" xlink:href="../521/325521.xml">
isolation</link> property (the I of ACID) poses a special challenge for multi database transactions, since the (global) <link xlink:type="simple" xlink:href="../801/4367801.xml">
serializability</link> property could be violated, even if each database provides it (see also <link xlink:type="simple" xlink:href="../063/11861063.xml">
global serializability</link>). In practice most commercial database systems use <link xlink:type="simple" xlink:href="../602/244602.xml">
strong strict two phase locking (SS2PL)</link> for <link xlink:type="simple" xlink:href="../356/217356.xml">
concurrency control</link>, which ensures global serializability, if all the participating databases employ it. (see also <link xlink:type="simple" xlink:href="../212/4379212.xml">
commitment ordering</link> for multidatabases.)</p>
<p>

A common <link xlink:type="simple" xlink:href="../775/775.xml">
algorithm</link> for ensuring <link xlink:type="simple" xlink:href="../339/357339.xml">
correct</link> completion of a distributed transaction is the <link xlink:type="simple" xlink:href="../850/787850.xml">
two-phase commit</link>. This algorithm is usually applied for updates able to <link xlink:type="simple" xlink:href="../958/1626958.xml">
commit</link> in a short period of time, ranging from couple of milliseconds to couple of minutes.</p>
<p>

There are also long-lived distributed transactions, for example a transaction to book a trip, which consists of booking a flight, a rental car and a hotel. Since booking the flight might take up to a day to get a confirmation, two-phase commit is not applicable here, it will lock the resources for this long. In this case more sophisticated techniques that involve multiple undo levels are used. The way you can undo the hotel booking by calling a desk and cancelling the reservation, a system can be designed to undo certain operations (unless they are irreversibly finished). </p>
<p>

In practice, long-lived distributed transactions are implemented in systems based on <link xlink:type="simple" xlink:href="../483/93483.xml">
Web Services</link>. Usually these transactions utilize principles of <link xlink:type="simple" xlink:href="../025/7819025.xml">
Compensating transaction</link>s, Optimism and Isolation Without Locking. X/Open standard does not cover long-lived DTP.</p>
<p>

A couple of modern technologies, including <link xlink:type="simple" xlink:href="../750/42750.xml">
Enterprise Java Beans</link> (EJBs) and <idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<component wordnetid="105868954" confidence="0.8">
<part wordnetid="105867413" confidence="0.8">
<link xlink:type="simple" xlink:href="../974/3117974.xml">
Microsoft Transaction Server</link></part>
</component>
</concept>
</idea>
 (MTS) fully support distributed transaction standards.</p>

<sec>
<st>
References</st>
<p>

<list>
<entry level="1" type="bullet">

 "<weblink xlink:type="simple" xlink:href="http://xml.sys-con.com/read/43755.htm">
Web-Services Transactions</weblink>".&#32;<it>Web-Services Transactions</it>.&#32;Retrieved on May 2, 2005.</entry>
<entry level="1" type="bullet">

 "<weblink xlink:type="simple" xlink:href="http://www.subbu.org/articles/transactions/NutsAndBoltsOfTP.html">
Nuts And Bolts Of Transaction Processing</weblink>".&#32;<it>Article about Transaction Management</it>.&#32;Retrieved on May 3, 2005.</entry>
</list>
</p>


</sec>
</bdy>
</article>
