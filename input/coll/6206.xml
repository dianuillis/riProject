<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 15:23:28[mciao0827] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>Computable number</title>
<id>6206</id>
<revision>
<id>238448018</id>
<timestamp>2008-09-14T21:58:19Z</timestamp>
<contributor>
<username>Physis</username>
<id>822864</id>
</contributor>
</revision>
<categories>
<category>Theory of computation</category>
<category>Recursion theory</category>
</categories>
</header>
<bdy>

In <link xlink:type="simple" xlink:href="../831/18831.xml">
mathematics</link>, <link xlink:type="simple" xlink:href="../392/323392.xml">
theoretical computer science</link> and <link xlink:type="simple" xlink:href="../636/19636.xml">
mathematical logic</link>, the <b>computable numbers</b>, also known as the <b>recursive numbers</b> or the <b>computable reals</b>, are the <link>
real numbers</link> that can be computed to within any desired precision by a finite, terminating <link xlink:type="simple" xlink:href="../775/775.xml">
algorithm</link>.  Equivalent definitions can be given using <link xlink:type="simple" xlink:href="../469/26469.xml">
μ-recursive function</link>s, <link xlink:type="simple" xlink:href="../403/30403.xml">
Turing machines</link> or <link xlink:type="simple" xlink:href="../203/18203.xml">
λ-calculus</link> as the formal representation of algorithms. The computable numbers form a <link xlink:type="simple" xlink:href="../093/1066093.xml">
real closed field</link> and can be used in the place of real numbers for many, but not all, mathematical purposes.
<sec>
<st>
 Informal definition using a Turing machine as example </st>
<p>

In the following, Minsky defines the numbers to be computed in a manner similar to those defined by <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../208/1208.xml">
Alan Turing</link></scientist>
</person>
 in 1936, i.e. as "sequences of digits interpreted as decimal fractions" between 0 and 1:</p>
<p>

<indent level="1">

"A computable number [is] one for which there is a Turing machine which, given <it>n</it> on its initial tape, terminates with the <it>nth</it> digit of that number [encoded on its tape]." (Minsky 1967:159)
</indent>

The key notions in the definition are (1) that some <it>n</it> is specified at the start, (2) when the machine's internal counter reaches this <it>n</it> the computation terminates after printing the <it>n</it>th decimal digit on its tape -- otherwise it would continue computing forever.  </p>
<p>

An alternate form of (2) -- the machine successively prints all n of the digits on its tape, halting after printing the nth -- emphasizes Minsky's observation: (3) That by use of a Turing machine, a <it>finite</it> definition -- in the form of the machine's TABLE -- is being used to define what is a potentially-<it>infinite</it> string of decimal digits.  </p>

</sec>
<sec>
<st>
Formal definition</st>

<p>

A <link xlink:type="simple" xlink:href="../491/19725491.xml">
real number</link> <it>a</it> is said to be <b>computable</b> if it can be approximated by some  <link xlink:type="simple" xlink:href="../338/1139338.xml">
computable function</link> in the following manner: given any <link xlink:type="simple" xlink:href="../563/14563.xml">
integer</link> <math>n \ge 1</math>, the function produces an integer <it>k</it> such that:</p>
<p>

<indent level="1">

<math>{(k-1)\over n} \leq a \leq {(k+1)\over n}.</math>
</indent>

There are two similar definitions that are equivalent:
<list>
<entry level="1" type="bullet">

 There exists a computable function which, given any positive rational error bound <math>\epsilon</math>, produces a <link xlink:type="simple" xlink:href="../024/19727024.xml">
rational number</link> <it>r</it> such that <math>|r - a| \leq \epsilon.</math></entry>
<entry level="1" type="bullet">

There is a computable sequence of rational numbers <math>q_i</math> converging to <math>r</math> such that <math>|q_i - q_{i+1}| &amp;lt; 2^{-i}\,</math> for each <it>i</it>.</entry>
</list>
</p>
<p>

There is another equivalent definition of computable numbers via computable <link xlink:type="simple" xlink:href="../569/45569.xml">
Dedekind cut</link>s.  A <b>computable Dedekind cut</b> is a computable function <math>D\;</math> which when provided with a rational number <math>r</math> as input returns <math>D(r)=true\;</math> or <math>D(r)=false\;</math>, satisfying the following conditions:
<indent level="1">

<math>\exists r D(r)=\mathit{true}\;</math>
</indent>
:<math>\exists r D(r)=\mathit{false}\;</math>
<indent level="1">

<math>(D(r)=\mathit{true}) \wedge (D(s)=\mathit{false}) \Rightarrow r&amp;lt;s\;</math>
</indent>
:<math>D(r)=\mathit{true} \Rightarrow \exist s&amp;gt;r, D(s)=\mathit{true}\;</math>
An example is given by a program <it>D</it> that defines the <link xlink:type="simple" xlink:href="../506/292506.xml">
cube root</link> of 3. Assuming <math>q&amp;gt;0\;</math> this is defined by:
<indent level="1">

<math>p^3&amp;lt;3 q^3 \Rightarrow  D(p/q)=\mathit{true}\;</math>
</indent>
:<math>p^3&amp;gt;3 q^3 \Rightarrow  D(p/q)=\mathit{false}\;</math></p>
<p>

A real number is computable if and only if there is a computable Dedekind cut <it>D</it> converging to it. The function <it>D</it> is unique for each irrational computable number (although of course two different programs may provide the same function).</p>
<p>

A <link xlink:type="simple" xlink:href="../826/5826.xml">
complex number</link> is called computable if its real and imaginary parts are computable.</p>

</sec>
<sec>
<st>
 Properties </st>
<p>

Although the set of real numbers is <link xlink:type="simple" xlink:href="../248/32248.xml">
uncountable</link>, the set of computable numbers is <link>
countable</link> and thus <link xlink:type="simple" xlink:href="../309/1309.xml">
almost all</link> real numbers are not computable.  The computable numbers can be counted by assigning a <link>
Gödel number</link> to each Turing machine definition.  This gives a function from the naturals to the computable reals.  Although the computable numbers are an ordered field, the set of Gödel numbers corresponding to computable numbers is not itself <link xlink:type="simple" xlink:href="../090/332090.xml">
computably enumerable</link>, because it is not possible to effectively determine which  Gödel numbers correspond to Turing machines that produce computable reals. In order to produce a computable real, a Turing machine must compute a <link xlink:type="simple" xlink:href="../577/23577.xml">
total function</link>, but the corresponding <link xlink:type="simple" xlink:href="../336/8336.xml">
decision problem</link> is in <link xlink:type="simple" xlink:href="../405/764405.xml">
Turing degree</link> <b>0&amp;prime;&amp;prime;</b>. Thus <link xlink:type="simple" xlink:href="../426/51426.xml">
Cantor's diagonal argument</link> cannot be used to produce uncountably many computable reals; at best, the reals formed from this method will be uncomputable.</p>
<p>

The arithmetical operations on computable numbers are themselves computable in the sense that whenever real numbers <it>a</it> and <it>b</it> are computable then the following real numbers are also computable:  <it>a + b</it>, <it>a - b</it>, <it>ab</it>, and <it>a/b</it> if <it>b</it> is nonzero.
These operations are actually <it>uniformly computable</it>; for example, there is a Turing machine which on input (<it>A</it>,<it>B</it>,<math>\epsilon</math>) produces output <it>r</it>, where <it>A</it> is the description of a Turing machine approximating <it>a</it>, <it>B</it> is the description of a Turing machine approximating <it>b</it>, and <it>r</it> is an <math>\epsilon</math> approximation of <it>a</it>+<it>b</it>.</p>
<p>

It is known that the least upper bound of a bounded increasing computable sequence of computable real numbers need not be a computable real number; nevertheless, the calculus can be developed in the field of computable numbers, although an altered definition of the derivative is needed to avoid certain difficulties that can occur when considering functions with <link xlink:type="simple" xlink:href="../644/81644.xml">
removable singularities</link>. </p>
<p>

The order relation on the computable numbers is not computable. There is no Turing machine which on input <it>A</it> (the description of a Turing machine approximating the number <math>a</math>) outputs "YES" if <math>a &amp;gt; 0</math> and "NO" if <math>a \le 0</math>. The reason: suppose the machine described by <it>A</it> keeps outputting 0 as <math>\epsilon</math> approximations. It is not clear how long to wait before deciding that the machine will <it>never</it> output an approximation which forces <it>a</it> to be positive.   Thus the machine will eventually have to guess that the number will equal 0, in order to produce an output;  the sequence may later become different from 0.  This idea can be used to show that the machine is incorrect on some sequences if it computes a total function.  A similar problem occurs when the computable reals are represented as <link xlink:type="simple" xlink:href="../569/45569.xml">
Dedekind cut</link>s. The same holds for the equality relation : the equality test is not computable.</p>
<p>

While the full order relation is not computable, the restriction of it to pairs of unequal numbers is computable. That is, there is a program that takes an input two turing machines <it>A</it> and <it>B</it> approximating numbers <it>a</it> and <it>b</it>, where <it>a</it>≠<it>b</it>, and outputs whether <it>ab</it> or <it>a</it>&amp;gt;<it>b</it>. It is sufficient to use ε-approximations where ε|b-a|/2; so by taking increasingly small ε (with a limit to 0), one eventually can decide whether <it>ab</it> or <it>a</it>&amp;gt;<it>b</it>.</p>
<p>

Every computable number is <link xlink:type="simple" xlink:href="../361/8361.xml">
definable</link>, but not vice versa. There are many definable, noncomputable real numbers, including:
<list>
<entry level="1" type="bullet">

 The binary representation of the <link xlink:type="simple" xlink:href="../668/13668.xml">
Halting problem</link> (or any other uncomputable set of natural numbers).  </entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../205/6205.xml">
Chaitin's constant</link>, <math>\Omega</math>, which is a type of real number that is  <link xlink:type="simple" xlink:href="../406/3246406.xml">
Turing equivalent</link> to the Halting problem.</entry>
</list>

A real number is computable if and only if the set of natural numbers it represents (when written in binary and viewed as a characteristic function) is computable.</p>

</sec>
<sec>
<st>
 Computing digit strings </st>

<p>

Turing's original paper defined computable numbers as follows:</p>
<p>

<indent level="1">

A real number is computable if its digit sequence can be produced by some algorithm or Turing machine. The algorithm takes an integer <math>n \ge 1</math> as input and produces the <math>n</math>-th digit of the real number's decimal expansion as output.
</indent>

Turing was aware that this definition is equivalent to the <math>\epsilon</math>-approximation definition given above. The argument proceeds as follows: if a number is computable in the Turing sense, then it is also computable in the <math>\epsilon</math> sense: if <math>n &amp;gt; log_{10} (1/\epsilon)</math>, then the first <it>n</it> digits of <it>a</it> provide an <math>\epsilon</math> approximation of <it>a</it>. For the converse, we pick an <math>\epsilon</math> computable real number <it>a</it> and distinguish two cases. If <it>a</it> is rational, then <it>a</it> is also Turing computable, since the digit expansions of rational numbers are eventually periodic and can therefore be produced by simple algorithms. If <it>a</it> is not rational, then it is possible to compute ever more precise <math>\epsilon</math>-approximations until the <it>n</it>th digit is certain. This will eventually happen because <it>a</it> is not rational and thus the decimal expansion cannot be eventually constant.</p>
<p>

There is no algorithm which takes as input the description of a Turing machine which produces <math>\epsilon</math> approximations for the computable number <it>a</it>, and produces as output a Turing machine which enumerates the digits of <it>a</it> in the sense of Turing's definition. So while the two definitions are equivalent, they are not "computably equivalent".  </p>
<p>

An important property of Turing's definition is that the arithmetic operations are not uniformly computable in this representation.  This can be seen most easily with addition:  when adding decimal numbers, in order to produce one digit it may be necessary to look arbitrarily far to the right to determine if there is a carry to the current location.  It is true, however, that if two real numbers have representations according to Turing's definitions then so will their sum, product, difference, and quotient. This lack of uniformity is one reason that the contemporary definition of computable numbers uses <math>\epsilon</math> approximations rather than decimal expansions.</p>

</sec>
<sec>
<st>
Can computable numbers be used instead of the reals?</st>

<p>

The computable numbers include many of the specific real numbers which appear in practice, including all <link xlink:type="simple" xlink:href="../158/1158.xml">
algebraic number</link>s, as well as <it>e</it>, <math>\pi</math>, and many other <link xlink:type="simple" xlink:href="../325/30325.xml">
transcendental number</link>s. The question naturally arises of whether it is possible to dispose of the full set of reals and use computable numbers for all of mathematics.  This idea is appealing from a <link xlink:type="simple" xlink:href="../059/21059.xml">
constructivist</link> point of view, and has been pursued by what <physical_entity wordnetid="100001930" confidence="0.8">
<expert wordnetid="109617867" confidence="0.8">
<analyst wordnetid="109790482" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<mathematician wordnetid="110301261" confidence="0.8">
<link xlink:type="simple" xlink:href="../995/321995.xml">
Bishop</link></mathematician>
</scientist>
</causal_agent>
</person>
</analyst>
</expert>
</physical_entity>
 and Richman call the <it>Russian school</it> of constructive mathematics. Even though the calculus can be developed over the computable numbers, the set of computable numbers is not closed under basic operations such as taking the supremum of a bounded sequence, so this set cannot be used as a replacement for the full set of real numbers in classical mathematics.</p>

</sec>
<sec>
<st>
Implementation</st>

<p>

There are some computer packages that work with computable real numbers,
representing the real numbers as programs computing approximations.
One example is the <link>
RealLib</link> package (<weblink xlink:type="simple" xlink:href="http://www.brics.dk/~barnie/RealLib/">
reallib home page</weblink>).</p>

</sec>
<sec>
<st>
References</st>

<p>

<list>
<entry level="1" type="bullet">

 Douglas Bridges and Fred Richman.  <it>Varieties of Constructive Mathematics</it>, Oxford, 1987.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../639/19639.xml">
Marvin Minsky</link></scientist>
</person>
 1967, <it>Computation: Finite and Infinite Machines</it>, Prentice-Hall, Inc. Englewood Cliffs, NJ. No ISBN. Library of Congress Card Catalog No. 67-12342. His chapter |9 "The Computable Real Numbers" expands on the topics of this article.  </entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

  <cite id="CITEREFTuring2009" style="font-style:normal">Turing, A.M.&#32;(1936),&#32;"<weblink xlink:type="simple" xlink:href="http://www.abelard.org/turpap2/tp2-ie.asp">
On Computable Numbers, with an Application to the Entscheidungsproblem</weblink>",&#32;<it>Proceedings of the London Mathematical Society</it>, 2&#32;<b>42</b>:  230-65, 1937, </cite>&nbsp; (and  <cite id="CITEREFTuring1937" style="font-style:normal">Turing, A.M.&#32;(1937),&#32;"On Computable Numbers, with an Application to the Entscheidungsproblem: A correction",&#32;<it>Proceedings of the London Mathematical Society</it>, 2&#32;<b>43</b>:  544-6</cite>&nbsp;). Computable numbers (and Turing's a-machines) were introduced in this paper; the definition of computable numbers uses infinite decimal sequences.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 Oliver Aberth 1968,  <it>Analysis in the Computable Number Field</it>,  Journal of the Association for Computing Machinery (JACM), vol 15, iss 2, pp 276-299. This paper describes the development of the calculus over the computable number field.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 Klaus Weihrauch 2000, <it>Computable analysis</it>, Texts in theoretical computer science, <company wordnetid="108058098" confidence="0.8">
<institution wordnetid="108053576" confidence="0.8">
<link xlink:type="simple" xlink:href="../949/1418949.xml">
Springer</link></institution>
</company>
, ISBN 3540668179.  (<weblink xlink:type="simple" xlink:href="http://eccc.hpi-web.de/eccc-local/ECCC-Books/klaus_book_readme.html">
online version</weblink>) |1.3.2 introduces the definition by <link xlink:type="simple" xlink:href="../405/7532405.xml">
nested sequences of intervals</link> converging to the singleton real. Other representations are discussed in |4.1.</entry>
</list>
</p>
<p>

Computable numbers were defined independently by Turing, Post and Church.
See <it>The Undecidable</it>, ed. Martin Davis, for further original papers.</p>

</sec>
<sec>
<st>
See also</st>
<p>

<list>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../361/8361.xml">
Definable number</link></entry>
</list>
</p>

</sec>
<sec>
<st>
External links</st>
<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.informatik.fernuni-hagen.de/thi1/klaus.weihrauch/book.html">
contents + links to 2 pdf chapters</weblink></entry>
</list>
</p>


</sec>
</bdy>
</article>
