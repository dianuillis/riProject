<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 22:23:16[mciao0825] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<standard  confidence="0.8" wordnetid="107260623">
<system_of_measurement  confidence="0.8" wordnetid="113577171">
<header>
<title>Exit (operating system)</title>
<id>6539754</id>
<revision>
<id>225329849</id>
<timestamp>2008-07-13T03:20:37Z</timestamp>
<contributor>
<username>C mon</username>
<id>424181</id>
</contributor>
</revision>
<categories>
<category>Process (computing)</category>
<category>POSIX standards</category>
</categories>
</header>
<bdy>

A <link>
computer process</link> terminates its <link xlink:type="simple" xlink:href="../206/418206.xml">
execution</link> by making an <b>exit</b> <link xlink:type="simple" xlink:href="../908/102908.xml">
system call</link>. More generally, an exit in a <link xlink:type="simple" xlink:href="../679/10520679.xml">
multithreading</link> environment means that a <link xlink:type="simple" xlink:href="../303/45303.xml">
thread</link> of execution has stopped running. The <link xlink:type="simple" xlink:href="../194/22194.xml">
operating system</link> reclaims <link xlink:type="simple" xlink:href="../365/1728365.xml">
resources</link> (<link xlink:type="simple" xlink:href="../300/5300.xml">
memory</link>, <link xlink:type="simple" xlink:href="../077/7077.xml">
files</link>, etc.) that were used by the process. The process is said to be a <it><link xlink:type="simple" xlink:href="../260/4387260.xml#xpointer(//*[./st=%22Terminated%22])">
dead process</link></it> after it terminates.
<sec>
<st>
How it works</st>
<p>

Under <family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../642/31642.xml">
Unix</link></family>
 and <family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../815/31815.xml">
Unix-like</link></family>
 <link xlink:type="simple" xlink:href="../194/22194.xml">
operating systems</link>, every process is starting by a <link xlink:type="simple" xlink:href="../750/445750.xml">
parent process</link> when it executes a <it><link xlink:type="simple" xlink:href="../507/301507.xml">
fork</link></it> <link xlink:type="simple" xlink:href="../908/102908.xml">
system call</link>. The parent process may then <link xlink:type="simple" xlink:href="../918/9780918.xml">
wait</link> for the <link xlink:type="simple" xlink:href="../747/445747.xml">
child process</link> to terminate, or may continue execution (possibly forking off other child processes). When the child process terminates ("dies"), either normally by calling exit, or <link xlink:type="simple" xlink:href="../467/60467.xml">
abnormally</link> due to a <link xlink:type="simple" xlink:href="../324/2638324.xml">
fatal error</link> or <link xlink:type="simple" xlink:href="../602/938602.xml">
signal</link> (e.g., <signal wordnetid="106791372" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../908/3622908.xml">
SIGTERM</link></signal>
, <signal wordnetid="106791372" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../554/2014554.xml">
SIGINT</link></signal>
, <signal wordnetid="106791372" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../177/2520177.xml">
SIGKILL</link></signal>
), an <link xlink:type="simple" xlink:href="../392/1117392.xml">
exit status</link> is returned to the kernel and a <signal wordnetid="106791372" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../721/2360721.xml">
SIGCHLD</link></signal>
 signal is sent to the parent process. The exit status can then be retrieved by the parent process.</p>
<p>

Most operating systems allow the terminating process to provide a specific <link xlink:type="simple" xlink:href="../392/1117392.xml">
exit status</link> to the system, which is made available to the parent process. Typically this is a small integer value, although some operating systems (e.g., <link xlink:type="simple" xlink:href="../226/24226.xml">
Plan 9</link>) allow a <link xlink:type="simple" xlink:href="../701/27701.xml">
character string</link> to be specified.</p>

<ss1>
<st>
Clean up</st>
<p>

The exit operation typically performs clean-up operations within the process space before returning control back to the operating system. Some systems and <link xlink:type="simple" xlink:href="../015/23015.xml">
programming languages</link> allow user <link xlink:type="simple" xlink:href="../988/40988.xml">
subroutines</link> to be registered so that they are invoked at program termination before the process actually terminates for good. As the final step of termination, a primitive system exit call is invoked, informing the operating system that the process has terminated and allows it to reclaim the resources used by the process.</p>
<p>

It is sometimes possible to bypass the usual cleanup; <link xlink:type="simple" xlink:href="../497/607497.xml">
C99</link> offers the _Exit() function, deriving from <link>
SVr4</link> _exit(), which terminates the current process "immediately".  This may be used, for example, in a <link xlink:type="simple" xlink:href="../404/2958404.xml">
fork-exec</link> routine when the <link xlink:type="simple" xlink:href="../441/9877441.xml">
exec</link> call fails to replace the child process; calling atexit routines would erroneously release resources belonging to the parent.</p>

</ss1>
<ss1>
<st>
Orphans and zombies</st>
<p>

Some operating systems handle a child process whose parent process has terminated in a special manner.  Such an <it><link xlink:type="simple" xlink:href="../931/853931.xml">
orphan process</link></it> becomes a child of a special <it><link xlink:type="simple" xlink:href="../363/1551363.xml">
root process</link></it>, which then waits for the child process to terminate. Likewise, a similar strategy is used to deal with a <it><link xlink:type="simple" xlink:href="../498/34498.xml">
zombie process</link></it>, which is a child process that has terminated but whose exit status is ignored by its parent process.  Such a process becomes the child of a special parent process, which retrieves the child's exit status and allows the operating system to complete the termination of the dead process. Dealing with these special cases keeps the system <link xlink:type="simple" xlink:href="../178/45178.xml">
process table</link> in a consistent state.</p>

</ss1>
</sec>
<sec>
<st>
Examples</st>

<p>

The following programs do nothing but terminate and return a success <link xlink:type="simple" xlink:href="../392/1117392.xml">
status</link> to the system.</p>
<p>

<programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../021/6021.xml">
C</link></programming_language>
:</p>

<p>

<list>
<entry level="1" type="number">

include ;</entry>
</list>
</p>
<p>

int main(void)
{
exit(EXIT_SUCCESS);
}</p>

<p>

or:</p>

<p>

<list>
<entry level="1" type="number">

include ;</entry>
</list>
</p>
<p>

int main(void)
{
return EXIT_SUCCESS;
}</p>

<p>

<programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../038/72038.xml">
C++</link></programming_language>
:</p>

<p>

<list>
<entry level="1" type="number">

include ;</entry>
</list>
</p>
<p>

int main(void)
{
std::exit(EXIT_SUCCESS); // or return EXIT_SUCCESS
}</p>

<p>

<link xlink:type="simple" xlink:href="../799/6799.xml">
COBOL</link>:</p>
<p>

IDENTIFICATION DIVISION.
PROGRAM-ID. SUCCESS-PROGRAM.</p>
<p>

PROCEDURE DIVISION.
MAIN.
MOVE ZERO TO RETURN-CODE.
END PROGRAM.</p>
<p>

<message wordnetid="106598915" confidence="0.8">
<request wordnetid="106513366" confidence="0.8">
<link xlink:type="simple" xlink:href="../881/15881.xml">
Java</link></request>
</message>
:</p>

<p>

public class Success
{
public static void main(String args)
{
System.exit(0);
}
}</p>

<p>

<link xlink:type="simple" xlink:href="../146/8146.xml">
DOS</link> <format wordnetid="106636806" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../030/15264030.xml">
Batch file</link></format>
:</p>
<p>

set ERRORLEVEL=0
exit</p>

<p>

<programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../939/23939.xml">
Perl</link></programming_language>
:</p>
<p>

<list>
<entry level="1" type="number">

!/bin/perl</entry>
</list>

exit;</p>

<p>

<programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../862/23862.xml">
Python</link></programming_language>
:</p>
<p>

<list>
<entry level="1" type="number">

!/usr/bin/python</entry>
</list>

raise SystemExit</p>

<p>

<link xlink:type="simple" xlink:href="../035/32035.xml">
Unix shell</link>:</p>
<p>

exit 0</p>
<p>

<link xlink:type="simple" xlink:href="../146/8146.xml">
DOS</link> <link xlink:type="simple" xlink:href="../987/54987.xml">
Assembly</link>:</p>
<p>

<list>
<entry level="1" type="definition">

 For <link xlink:type="simple" xlink:href="../469/1061469.xml">
MASM</link>/<link xlink:type="simple" xlink:href="../619/788619.xml">
TASM</link></entry>
</list>

.MODEL SMALL
.STACK
.CODE
main PROC NEAR
MOV AH, 4Ch ; Service 4Ch - Terminate with Error Code
MOV AL, 0 ; Error code
INT 21h ; Interrupt 21h - DOS General Interrupts
main ENDP
END main ; Starts at main</p>
<p>

Some programmers may prepare everything for INT 21h  at once:</p>
<p>

MOV AX, 4C00h ; replace the 00 with your error code in HEX</p>
<p>

<O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../297/6097297.xml">
Linux</link></O>
 Assembly:</p>
<p>

<list>
<entry level="1" type="definition">

 For <link xlink:type="simple" xlink:href="../738/6390738.xml">
NASM</link></entry>
</list>

MOV AL, 1 ; Function 1: exit()
MOV EBX, 0 ; Return code
<link>
INT 80h</link> ; The only interrupt Linux uses!</p>

</sec>
<sec>
<st>
See also</st>


<p>

<table style="background:transparent; width:100%;" cellpadding="0" class=" multicol" cellspacing="0">
<row>
<col align="left" width="33%" valign="top">
<list>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../747/445747.xml">
Child process</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../206/418206.xml">
Execution</link></entry>
<entry level="1" type="bullet">

<message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../536/1883536.xml">
Exit command</link></database>
</wordnet>
</lexical_database>
</electronic_database>
</information>
</message>
</entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../392/1117392.xml">
Exit status</link></entry>
<entry level="1" type="bullet">

<standard wordnetid="107260623" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../507/301507.xml">
Fork</link></system_of_measurement>
</standard>
</entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../594/940594.xml">
Kill command</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../931/853931.xml">
Orphan process</link></entry>
</list>
</col>
<col align="left" width="" valign="top">
<list>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../178/45178.xml">
Process</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../750/445750.xml">
Parent process</link></entry>
<entry level="1" type="bullet">

<signal wordnetid="106791372" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../721/2360721.xml">
SIGCHLD</link></signal>
</entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../191/1655191.xml">
Task</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../303/45303.xml">
Thread</link></entry>
<entry level="1" type="bullet">

<standard wordnetid="107260623" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../918/9780918.xml">
Wait</link></system_of_measurement>
</standard>
</entry>
</list>
</col>
</row>
</table>
</p>

</sec>
<sec>
<st>
External links</st>
<p>

<list>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://linux.die.net/man/3/exit">
exit(3)</weblink>&#58;&nbsp;cause normal process termination&nbsp;–&nbsp;<O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../297/6097297.xml">
Linux</link></O>
 <link xlink:type="simple" xlink:href="../332/85332.xml">
man page</link></entry>
</list>
</p>

</sec>
</bdy>
</system_of_measurement>
</standard>
</article>
