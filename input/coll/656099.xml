<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 17:28:06[mciao0826] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<event  confidence="0.8" wordnetid="100029378">
<rule  confidence="0.8" wordnetid="105846932">
<act  confidence="0.8" wordnetid="100030358">
<psychological_feature  confidence="0.8" wordnetid="100023100">
<procedure  confidence="0.8" wordnetid="101023820">
<activity  confidence="0.8" wordnetid="100407535">
<algorithm  confidence="0.8" wordnetid="105847438">
<header>
<title>De Casteljau&apos;s algorithm</title>
<id>656099</id>
<revision>
<id>238669667</id>
<timestamp>2008-09-15T21:29:13Z</timestamp>
<contributor>
<username>Svick</username>
<id>4576738</id>
</contributor>
</revision>
<categories>
<category>Numerical analysis</category>
<category>Geometric algorithms</category>
</categories>
</header>
<bdy>

In the <link xlink:type="simple" xlink:href="../831/18831.xml">
mathematical</link> subfield of <link xlink:type="simple" xlink:href="../506/21506.xml">
numerical analysis</link> the <b>de Casteljau's algorithm</b>, named after its inventor <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<engineer wordnetid="109615807" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../580/2268580.xml">
Paul de Casteljau</link></causal_agent>
</engineer>
</person>
</physical_entity>
, is a <link xlink:type="simple" xlink:href="../407/25407.xml">
recursive</link> method to evaluate polynomials in <link xlink:type="simple" xlink:href="../136/340136.xml">
Bernstein form</link> or <link>
Bézier curve</link>s.  The <b>de Casteljau's algorithm</b> can also be used to split a single Bézier curve into two Bézier curves at an arbitrary parameter value.<p>

Although the algorithm is slower for most architectures when compared with the direct approach it is numerically more <link xlink:type="simple" xlink:href="../807/233807.xml">
stable</link>.</p>

<sec>
<st>
Definition</st>
<p>

Given a polynomial <it>B</it> in Bernstein form of degree <it>n</it></p>
<p>

<indent level="1">

<math>B(t) = \sum_{i=0}^{n}\beta_{i}b_{i,n}(t),</math>
</indent>

where <it>b</it> is a <link xlink:type="simple" xlink:href="../136/340136.xml">
Bernstein basis polynomial</link>, the polynomial at point <it>t</it>0 can be evaluated with the <link xlink:type="simple" xlink:href="../806/146806.xml">
recurrence relation</link></p>
<p>

<indent level="1">

<math>\beta_i^{(0)} := \beta_i \mbox{ , } i=0,\ldots,n</math>
</indent>
:<math>\beta_i^{(j)} := \beta_i^{(j-1)} (1-t_0) + \beta_{i+1}^{(j-1)} t_0 \mbox{ , } i = 0,\ldots,n-j \mbox{ , } j= 1,\ldots n</math></p>
<p>

with</p>
<p>

<indent level="1">

<math>B(t_0)=\beta_0^{(n)}</math>.
</indent>

</p>
</sec>
<sec>
<st>
Notes</st>
<p>

When doing the calculation by hand it is useful to write down the coefficients in a triangle scheme as</p>
<p>

<indent level="1">

<math>
\begin{matrix}
\beta_0     &amp; = \beta_0^{(0)}     &amp;                   &amp;         &amp;               \\
            &amp;                     &amp; \beta_0^{(1)}     &amp;         &amp;               \\
\beta_1     &amp; = \beta_1^{(0)}     &amp;                   &amp;         &amp;               \\
            &amp;                     &amp;                   &amp; \ddots  &amp;               \\
\vdots      &amp;                     &amp; \vdots            &amp;         &amp; \beta_0^{(n)} \\
            &amp;                     &amp;                   &amp;         &amp;               \\
\beta_{n-1} &amp; = \beta_{n-1}^{(0)} &amp;                   &amp;         &amp;               \\
            &amp;                     &amp; \beta_{n-1}^{(1)} &amp;         &amp;               \\
\beta_n     &amp; = \beta_n^{(0)}     &amp;                   &amp;         &amp;               \\
\end{matrix}
</math>
</indent>

When choosing a point <it>t</it>0 to evaluate a Bernstein polynomial we can use the two diagonals of the triangle scheme to construct a division of the polynomial</p>
<p>

<indent level="1">

<math>B(t) = \sum_{i=0}^n \beta_i^{(0)} b_{i,n}(t) \mbox{ , } \qquad t \in [0,1]</math>
</indent>

into </p>
<p>

<indent level="1">

<math>B_1(t) = \sum_{i=0}^n \beta_0^{(i)} b_{i,n}\left(\frac{t}{t_0}\right) \mbox{ , } \qquad t \in [0,t_0]</math>
</indent>

and</p>
<p>

<indent level="1">

<math>B_2(t) = \sum_{i=0}^n \beta_{n-i}^{(i)} b_{i,n}\left(\frac{t-t_0}{1-t_0}\right) \mbox{ , } \qquad t \in [t_0,1]</math>
</indent>

</p>
</sec>
<sec>
<st>
Example</st>
<p>

We want to evaluate the Bernstein polynomial of degree 2 with the Bernstein coefficients
<indent level="1">

<math>\beta_0^{(0)} = \beta_0</math>
</indent>
:<math>\beta_1^{(0)} = \beta_1</math>
<indent level="1">

<math>\beta_2^{(0)} = \beta_2</math>
</indent>
at the point <it>t</it>0.</p>
<p>

We start the recursion with
<indent level="1">

<math>\beta_0^{(1)} = \beta_0^{(0)} (1-t_0) + \beta_1^{(0)}t_0 = \beta_0(1-t_0) + \beta_1 t_0</math>
</indent>
:<math>\beta_1^{(1)} = \beta_1^{(0)} (1-t_0) + \beta_2^{(0)}t_0 = \beta_1(1-t_0) + \beta_2 t_0</math></p>
<p>

and with the second iteration the recursion stops with
<indent level="1">

<math> 
\begin{matrix}
\beta_0^{(2)} &amp; = &amp; \beta_0^{(1)} (1-t_0) + \beta_1^{(1)} t_0      \\
\             &amp; = &amp; \beta_0(1-t_0) (1-t_0) + \beta_1 t_0 (1-t_0) + \beta_1(1-t_0)t_0 + \beta_2 t_0 t_0 \\
\             &amp; = &amp; \beta_0 (1-t_0)^2 + \beta_1 2t_0(1-t_0) + \beta_2 t_0^2         \\
\end{matrix}
</math>
</indent>

which is the expected Bernstein polynomial of degree <it>n</it>.</p>

</sec>
<sec>
<st>
Bézier curve</st>
<p>

When evaluating a Bézier curve of degree <it>n</it> in 3 dimensional space with <it>n</it>+1 control points <b>P</b><it>i</it> </p>
<p>

<indent level="1">

<math>\mathbf{B}(t) = \sum_{i=0}^{n} \mathbf{P}_i b_{i,n}(t) \mbox{ , } t \in [0,1]</math>
</indent>

with </p>
<p>

<indent level="1">

<math>\mathbf{P}_i := 
\begin{pmatrix} 
x_i \\ 
y_i \\
z_i 
\end{pmatrix}
</math>.
</indent>

we split the Bézier curve into three separate equations</p>
<p>

<indent level="1">

<math>B_1(t) = \sum_{i=0}^{n} x_i b_{i,n}(t) \mbox{ , } t \in [0,1]</math>
</indent>
:<math>B_2(t) = \sum_{i=0}^{n} y_i b_{i,n}(t) \mbox{ , } t \in [0,1]</math>
<indent level="1">

<math>B_3(t) = \sum_{i=0}^{n} z_i b_{i,n}(t) \mbox{ , } t \in [0,1]</math>
</indent>

which we evaluate individually using de Casteljau's algorithm.</p>

</sec>
<sec>
<st>
Geometric interpretation</st>
<p>

The geometric interpretation of de Casteljau algorithm is straightforward. 
<list>
<entry level="1" type="bullet">

Consider a Bézier curve with control points <math>P_0,...,P_n</math>. Connecting the consecutive points we create the control polygon of the curve. </entry>
<entry level="1" type="bullet">

Subdivide now each line segment of this polygon with the ratio <it>t:1-t</it> and connect the points you get. This way you arrive at the new polygon having one less segment.</entry>
<entry level="1" type="bullet">

Repeat the process till you arrive at the single point - this is the point of the curve corresponding to the parameter <math>t</math>. </entry>
</list>

The following picture shows this process for a cubic Bézier curve:</p>
<p>

<image width="150px" src="DeCasteljau1.png">
<caption>

DeCasteljau1.png
</caption>
</image>
</p>

</sec>
<sec>
<st>
References</st>
<p>

<list>
<entry level="1" type="bullet">

Farin, Gerald &amp; Hansford, Dianne (2000). <it>The Essentials of CAGD</it>.  Natic, MA: A K Peters, Ltd.  ISBN 1-56881-123-3</entry>
</list>
</p>

</sec>
<sec>
<st>
See also</st>
<p>

<list>
<entry level="1" type="bullet">

<event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../385/475385.xml">
De Boor's algorithm</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../263/14263.xml">
Horner scheme</link> to evaluate polynomials in <link xlink:type="simple" xlink:href="../666/976666.xml">
Monomial form</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../703/906703.xml">
Clenshaw algorithm</link> to evaluate polynomials in <link xlink:type="simple" xlink:href="../539/184539.xml">
Chebyshev form</link></entry>
</list>
</p>


</sec>
</bdy>
</algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</article>
