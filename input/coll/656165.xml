<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 17:29:24[mciao0828] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<algorithm  confidence="0.9511911446218017" wordnetid="105847438">
<header>
<title>Bailey–Borwein–Plouffe formula</title>
<id>656165</id>
<revision>
<id>240348021</id>
<timestamp>2008-09-23T02:13:00Z</timestamp>
<contributor>
<username>East718</username>
<id>1807070</id>
</contributor>
</revision>
<categories>
<category>Pi algorithms</category>
</categories>
</header>
<bdy>

The <b>Bailey–Borwein–Plouffe formula</b> (<b>BBP formula</b>) provides a <link xlink:type="simple" xlink:href="../183/1235183.xml">
spigot algorithm</link> for the computation of the <it>n</it>th <link xlink:type="simple" xlink:href="../364/3364.xml">
binary digit</link> of <b><link xlink:type="simple" xlink:href="../601/23601.xml">
π</link></b>. This <link xlink:type="simple" xlink:href="../160/246160.xml">
summation</link> formula was discovered in 1995 by <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<mathematician wordnetid="110301261" confidence="0.8">
<link xlink:type="simple" xlink:href="../104/453104.xml">
Simon Plouffe</link></mathematician>
</scientist>
</causal_agent>
</person>
</physical_entity>
. The formula is named after the authors of the paper in which the formula was first published, <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<intellectual wordnetid="109621545" confidence="0.8">
<alumnus wordnetid="109786338" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<mathematician wordnetid="110301261" confidence="0.8">
<scholar wordnetid="110557854" confidence="0.8">
<link xlink:type="simple" xlink:href="../462/184462.xml">
David H. Bailey</link></scholar>
</mathematician>
</scientist>
</causal_agent>
</alumnus>
</intellectual>
</person>
</physical_entity>
, <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<mathematician wordnetid="110301261" confidence="0.8">
<link xlink:type="simple" xlink:href="../736/1339736.xml">
Peter Borwein</link></mathematician>
</scientist>
</causal_agent>
</person>
</physical_entity>
, and Plouffe.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref><ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%222%22])">2</ref><p>

The discovery of this formula came as a surprise. For centuries it had been assumed that there was no way to compute the <it>n</it>th digit of π without calculating all of the preceding <it>n</it>&nbsp;&amp;minus;&nbsp;1 digits.</p>

<sec>
<st>
BBP-type formulae</st>
<p>

A great many formulae that sum to other fundamental irrational constants have since been discovered. They are of the form</p>
<p>

<indent level="1">

 <math>\alpha = \sum_{k = 0}^{\infty} \frac{p(k)}{b^kq(k)}</math>
</indent>

where α is a constant and <it>p</it> and <it>q</it> are polynomials in integer coefficients and b is an integer numerical base.  Some formulae, such as the <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../559/1301559.xml">
Leibniz formula for pi</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
 can be expressed in this form, but b is positive or negative one and thus do not display the spigot property, nor do they generally display fast convergence. In some cases, <math>\alpha</math> is an integer-scaled version of some well-known constant, such as 2π, rather than π itself.</p>
<p>

Formulae in this form are known as <b>BBP-type formulae</b>.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%223%22])">3</ref> Certain combinations of specific <it>p</it>, <it>q</it> and <it>b</it> result in well-known constants, but there is no general algorithm for the mapping and the combinations are currently discovered via searches.</p>
<p>

Some of the simplest formulae of this type that were well-known before BBP are</p>
<p>

<indent level="1">

<math>\ln \frac{9}{10} = - \sum_{k = 1}^{\infty} \frac{1}{10^k k}</math>
</indent>
:<math>\ln 2 = \sum_{k=1}^{\infty}\frac{1}{2^k k}</math></p>
<p>

Plouffe was also inspired by the related well-known formula</p>
<p>

<indent level="1">

<math> \arctan\frac{1}{b} = \frac{1}{b} - \frac{1}{b^3 3} + \frac{1}{b^5 5} - \frac{1}{b^7 7} + \frac{1}{b^9 9} + \cdots</math>
</indent>

A specialization of the general formula that has produced many results is</p>
<p>

<indent level="1">

<math> P(s,b,m,A) = \sum_{k=0}^{\infty}\left(\frac{1}{b^k}\sum_{j=1}^{m}\frac{a_j}{(mk+j)^s}\right) </math>
</indent>

where <it>s</it>, <it>b</it> and <it>m</it> are integers and <math>A = (a_1, a_2, \dots , a_m)</math> is a vector of integers. This P function leads is a compact notation for some solutions. For the above two formulae, that would be</p>
<p>

<indent level="1">

<math>\ln \frac{9}{10} = - \frac{1}{10} P(1,10,1,(1))</math>
</indent>
:<math>\ln 2 = \frac{1}{2} P(1,2,1,(1))</math></p>

<ss1>
<st>
The search for new equalities</st>
<p>

Using the P function mentioned above, the simplest  known formula for π is for <it>s&nbsp;=&nbsp;1</it> but <it>m&nbsp;&amp;gt;&nbsp;1</it>. Many now-discovered formulae are known for b as an exponent of 2 or 3 and m is an exponent of 2 or it is some other factor-rich value but where several of the terms of vector A are zero. The discovery of these fomulae involves a computer search for such linear combinations after computer the individual sums. The search procedure consists of choosing a range of parameter values for s, b and m, evaluating the sums out to many digits, and then using an <link xlink:type="simple" xlink:href="../054/13644054.xml">
integer relation finding algorithm</link> (typically <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<good_person wordnetid="110138767" confidence="0.8">
<intellectual wordnetid="109621545" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<adoptee wordnetid="109772330" confidence="0.8">
<saint wordnetid="110546850" confidence="0.8">
<creator wordnetid="109614315" confidence="0.8">
<alumnus wordnetid="109786338" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<artist wordnetid="109812338" confidence="0.8">
<sculptor wordnetid="110566072" confidence="0.8">
<mathematician wordnetid="110301261" confidence="0.8">
<scholar wordnetid="110557854" confidence="0.8">
<link xlink:type="simple" xlink:href="../950/6874950.xml">
Helaman Ferguson</link></scholar>
</mathematician>
</sculptor>
</artist>
</causal_agent>
</alumnus>
</creator>
</saint>
</adoptee>
</scientist>
</intellectual>
</good_person>
</person>
</physical_entity>
's PSLQ algorithm) to find a vector <it>A</it> that adds up those intermediate sums to a well-known constant or perhaps to zero.</p>

</ss1>
<ss1>
<st>
The BBP formula for π </st>

<p>

The original BBP π summation formula was found in 1995 by Plouffe using <link xlink:type="simple" xlink:href="../054/13644054.xml">
PSLQ</link>. It is</p>
<p>

<indent level="1">

 <math>\pi = \sum_{k = 0}^{\infty} \frac{1}{16^k}
\left( \frac{4}{8k + 1} - \frac{2}{8k + 4} - \frac{1}{8k + 5} - \frac{1}{8k + 6}\right),</math>
</indent>

which reduces to this equivalent ratio of two polynomials:</p>
<p>

<indent level="1">

 <math>\pi = \sum_{k = 0}^{\infty} \frac{1}{16^k}
\left(\frac{120k^2 + 151k + 47}{512k^4 + 1024k^3 + 712k^2 + 194k + 15}\right)</math>
</indent>

and to the compact notation of π&nbsp;=&nbsp;<it>P</it>(1,&nbsp;16,&nbsp;8,&nbsp;(4,&nbsp;0,&nbsp;0,&nbsp;&amp;minus;2,&nbsp;&amp;minus;1,&amp;minus;1,&nbsp;0,&nbsp;0)).  This formula has been shown through a rigorous and fairly simple proof to equal π.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%224%22])">4</ref></p>

</ss1>
</sec>
<sec>
<st>
BBP digit-extraction algorithm for π</st>

<p>

The formula yields an algorithm for extracting <link xlink:type="simple" xlink:href="../263/13263.xml">
hexadecimal</link> digits of π. In order to perform digit extraction first we must rewrite the formula as</p>
<p>

<indent level="1">

 <math>\pi = 4 \sum_{k = 0}^{\infty} \frac{1}{(16^k)(8k+1)} - 2 \sum_{k = 0}^{\infty} \frac{1}{(16^k)(8k+4)} - \sum_{k = 0}^{\infty} \frac{1}{(16^k)(8k+5)}
- \sum_{k = 0}^{\infty} \frac{1}{(16^k)(8k+6)}. </math>
</indent>

A few manipulations are required to implement a spigot algorithm using this formula. We would like to find <link xlink:type="simple" xlink:href="../263/13263.xml">
hexadecimal</link> digit <it>n</it> of π, so, taking the first sum we split the <link xlink:type="simple" xlink:href="../287/15287.xml">
sum</link> to <link xlink:type="simple" xlink:href="../455/15455.xml">
infinity</link> across the <it>n</it>th term </p>
<p>

<indent level="1">

 <math>\sum_{k = 0}^{\infty} \frac{1}{(16^k)(8k+1)} = \sum_{k = 0}^{n} \frac{1}{(16^k)(8k+1)} + \sum_{k = n + 1}^{\infty} \frac{1}{(16^k)(8k+1)}.</math>
</indent>

We now multiply by 16&nbsp;<it>n</it> so that the hexadecimal point (the divide between fractional and integer parts of the number) is in the <it>n</it>th place.</p>
<p>

<indent level="1">

 <math>\sum_{k = 0}^{\infty} \frac{16^{n-k}}{8k+1} = \sum_{k = 0}^{n} \frac{16^{n-k}}{8k+1} + \sum_{k = n + 1}^{\infty} \frac{16^{n-k}}{8k+1}.</math>
</indent>

Since we only care about the fractional part of the sum, we look at our two terms and realise that only the first sum is able to produce whole numbers whereas the second sum cannot produce whole numbers since the numerator can never be larger than the denominator for <it>k</it> &amp;gt; <it>n</it>. Therefore we need a trick to remove the whole numbers for the first sum. That trick is mod&nbsp;8<it>k</it>&nbsp;+&nbsp;1. Our sum for the first fractional part then becomes:</p>
<p>

<indent level="1">

 <math>\sum_{k = 0}^{n} \frac{16^{n-k} \mod 8k+1}{8k+1} + \sum_{k = n + 1}^{\infty} \frac{16^{n-k}}{8k+1}.</math>
</indent>

Notice how the <link xlink:type="simple" xlink:href="../973/20973.xml">
modulo</link> operator always guarantees that only the fractional sum will be kept.  To calculate 16&nbsp;<it>n</it>&nbsp;&amp;minus;&nbsp;<it>k</it>&nbsp;mod&nbsp;8<it>k</it>&nbsp;+&nbsp;1 quickly and efficiently, use the <link xlink:type="simple" xlink:href="../032/903032.xml">
modular exponentiation</link> algorithm.  When the running product becomes greater than one, take the modulo just as you do for the running total in each sum.</p>
<p>

Now to complete the calculation you must apply this to each of the four sums in turn. Once this is done, take the four summations and put them back into the sum to π.</p>
<p>

<indent level="1">

 <math>4 \Sigma_1 - 2 \Sigma_2 - \Sigma_3 - \Sigma_4. \,\!</math>
</indent>

Since only the fractional part is accurate, extracting the wanted digit requires that one removes the integer part of the final sum and multiplies by 16 to "skim off" the <link xlink:type="simple" xlink:href="../263/13263.xml">
hexadecimal</link> digit at this position (in theory the next few digits up to the accuracy of the calculations used would also be accurate).</p>
<p>

This process is similar to performing <link xlink:type="simple" xlink:href="../411/57411.xml">
long multiplication</link>, but only having to perform the summation of some middle columns. While there are some <link xlink:type="simple" xlink:href="../687/1629687.xml">
carries</link> that are not counted, computers usually perform arithmetic for many bits (32 or 64) and they round and we are only interested in the most significant digit(s). There is a vanishingly small possibility that a particular computation will be akin to failing to add a small number (e.g. 1) to the number 999999999999999 and that the error will propagate to the most significant digit, but being near this situation is obvious in the final value produced.</p>
<p>

This algorithm has proven popular and has many software implementations.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%225%22])">5</ref><ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%226%22])">6</ref><ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%227%22])">7</ref></p>

<ss1>
<st>
Advantages of the BBP algorithm</st>

<p>

This algorithm computes π without requiring custom data types having thousands or even millions of digits. The method calculates the <it>n</it>th digit <it>without</it> calculating the first <it>n</it>&nbsp;&amp;minus;&nbsp;1 digits, and can use small, efficient data types. </p>
<p>

The algorithm is the fastest way to compute the <it>n</it>th digit (or a few digits in a neighborhood of the <it>n</it>th), but π-computing algorithms using large data types remain faster when the goal is to compute all the digits from 1 to <it>n</it>.</p>

</ss1>
</sec>
<sec>
<st>
Generalizations</st>
<p>

D.J. Broadhurst provides a generalization of the BBP algorithm<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%228%22])">8</ref> that may be used to compute a number of other constants in nearly linear time and logarithmic space. Explicit results are given for <idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<constant wordnetid="105858936" confidence="0.8">
<quantity wordnetid="105855125" confidence="0.8">
<link xlink:type="simple" xlink:href="../860/46860.xml">
Catalan's constant</link></quantity>
</constant>
</concept>
</idea>
, <math>\pi^3</math>, <math>\log^32</math>, <link xlink:type="simple" xlink:href="../711/2216711.xml">
Apery's constant</link> <math>\zeta(3)</math> (where <math>\zeta(x)</math> is the <link>
Riemann zeta function</link>), <math>\pi^4</math>, <math>\log^42</math>, <math>\log^52</math>, <math>\zeta(5)</math>, and various products of powers of <math>\pi</math> and <math>\log2</math>. These results are obtained primarily by the use of <link xlink:type="simple" xlink:href="../471/482471.xml">
polylogarithm ladder</link>s.</p>

</sec>
<sec>
<st>
See also</st>
<p>

<list>
<entry level="1" type="bullet">

<link>
Computing π</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../363/256363.xml">
Experimental mathematics</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../331/5957331.xml">
Bellard's formula</link></entry>
</list>
</p>

</sec>
<sec>
<st>
References</st>

<p>

<reflist>
<entry id="1">
 <cite style="font-style:normal"><physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<intellectual wordnetid="109621545" confidence="0.8">
<alumnus wordnetid="109786338" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<mathematician wordnetid="110301261" confidence="0.8">
<scholar wordnetid="110557854" confidence="0.8">
<link xlink:type="simple" xlink:href="../462/184462.xml">
Bailey, David H.</link></scholar>
</mathematician>
</scientist>
</causal_agent>
</alumnus>
</intellectual>
</person>
</physical_entity>
, <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<mathematician wordnetid="110301261" confidence="0.8">
<link xlink:type="simple" xlink:href="../736/1339736.xml">
Borwein, Peter B.</link></mathematician>
</scientist>
</causal_agent>
</person>
</physical_entity>
, and <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<mathematician wordnetid="110301261" confidence="0.8">
<link xlink:type="simple" xlink:href="../104/453104.xml">
Plouffe, Simon</link></mathematician>
</scientist>
</causal_agent>
</person>
</physical_entity>
&#32;(April 1997).&#32;"<weblink xlink:type="simple" xlink:href="http://crd.lbl.gov/~dhbailey/dhbpapers/digits.pdf">
On the Rapid Computation of Various Polylogarithmic Constants</weblink>". <it>Mathematics of Computation</it>&#32;<b>66</b>&#32;(218): 903–913. <document wordnetid="106470073" confidence="0.8">
<written_communication wordnetid="106349220" confidence="0.8">
<writing wordnetid="106362953" confidence="0.8">
<link xlink:type="simple" xlink:href="../994/422994.xml">
doi</link></writing>
</written_communication>
</document>
:<weblink xlink:type="simple" xlink:href="http://dx.doi.org/10.1090%2FS0025-5718-97-00856-9">
10.1090/S0025-5718-97-00856-9</weblink>.</cite>&nbsp;</entry>
<entry id="2">
<weblink xlink:type="simple" xlink:href="http://groups.google.com/group/sci.math.symbolic/msg/5b7e62ce42ae0cb6">
Controversy surrounding who among the three actually invented this algorithm</weblink></entry>
<entry id="3">
 <cite id="Reference-Mathworld-BBP Formula"><physical_entity wordnetid="100001930" confidence="0.8">
<communicator wordnetid="109610660" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<intellectual wordnetid="109621545" confidence="0.8">
<encyclopedist wordnetid="110055566" confidence="0.8">
<compiler wordnetid="109946957" confidence="0.8">
<alumnus wordnetid="109786338" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<writer wordnetid="110794014" confidence="0.8">
<mathematician wordnetid="110301261" confidence="0.8">
<scholar wordnetid="110557854" confidence="0.8">
<link xlink:type="simple" xlink:href="../189/836189.xml">
Eric W. Weisstein</link></scholar>
</mathematician>
</writer>
</scientist>
</causal_agent>
</alumnus>
</compiler>
</encyclopedist>
</intellectual>
</person>
</communicator>
</physical_entity>
, <it><weblink xlink:type="simple" xlink:href="http://mathworld.wolfram.com/BBPFormula.html">
BBP Formula</weblink></it> at <computer wordnetid="103082979" confidence="0.8">
<work wordnetid="104599396" confidence="0.8">
<creation wordnetid="103129123" confidence="0.8">
<machine wordnetid="103699975" confidence="0.8">
<reference_book wordnetid="106417598" confidence="0.8">
<publication wordnetid="106589574" confidence="0.8">
<encyclopedia wordnetid="106427387" confidence="0.8">
<product wordnetid="104007894" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<book wordnetid="106410904" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<web_site wordnetid="106359193" confidence="0.8">
<link xlink:type="simple" xlink:href="../235/374235.xml">
MathWorld</link></web_site>
</device>
</book>
</instrumentality>
</artifact>
</product>
</encyclopedia>
</publication>
</reference_book>
</machine>
</creation>
</work>
</computer>
.</cite></entry>
<entry id="4">
<weblink xlink:type="simple" xlink:href="http://crd.lbl.gov/~dhbailey/dhbpapers/pi-quest.pdf">
The Quest for Pi</weblink></entry>
<entry id="5">
<weblink xlink:type="simple" xlink:href="http://www.nedprod.com/programs/portable/Pi/index.html">
A C++ implementation of the BBP algorithm for π (portable, SSE2 and OpenMP versions)</weblink></entry>
<entry id="6">
<weblink xlink:type="simple" xlink:href="http://en.literateprograms.org/Pi_with_the_BBP_formula_(Python)">
A Python implementation of the BBP algorithm for π</weblink></entry>
<entry id="7">
<weblink xlink:type="simple" xlink:href="http://www.314159265358979323846264338327950288419716939937510.net">
A Ruby implementation of the BBP algorithm for π</weblink></entry>
<entry id="8">
D.J. Broadhurst, "<weblink xlink:type="simple" xlink:href="http://arxiv.org/abs/math.CA/9803067">
Polylogarithmic ladders, hypergeometric series and the ten millionth digits of ζ(3) and ζ(5)</weblink>", (1998) <it>arXiv</it> math.CA/9803067</entry>
</reflist>
</p>


</sec>
</bdy>
</algorithm>
</article>
