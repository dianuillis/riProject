<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 15:48:02[mciao0825] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>Memory management</title>
<id>66924</id>
<revision>
<id>237971220</id>
<timestamp>2008-09-12T17:27:57Z</timestamp>
<contributor>
<username>Adam McMaster</username>
<id>50629</id>
</contributor>
</revision>
<categories>
<category>Memory management</category>
</categories>
</header>
<bdy>
<p>

<b>Memory management</b> is the act of managing <link xlink:type="simple" xlink:href="../847/25847.xml">
computer memory</link>. In its simpler forms, this involves providing ways to allocate portions of memory to programs at their request, and freeing it for reuse when no longer needed. The management of main memory is critical to the computer system.</p>
<p>

<link xlink:type="simple" xlink:href="../354/32354.xml">
Virtual memory</link> systems separate the memory addresses used by a process from actual physical addresses, allowing separation of processes and increasing the effectively available amount of RAM using <link xlink:type="simple" xlink:href="../354/32354.xml">
disk swapping</link>. The quality of the virtual memory manager can have a big impact on overall system performance.</p>
<p>

<link xlink:type="simple" xlink:href="../734/6734.xml">
Garbage collection</link> is the automated allocation, and deallocation of computer memory resources for a program. This is generally implemented at the programming language level and is in opposition to <link xlink:type="simple" xlink:href="../390/4041390.xml">
manual memory management</link>, the explicit allocation and deallocation of computer memory resources.</p>

<sec>
<st>
Goals</st>

<p>

Historically, a number of different memory management techniques have been used, and improved upon, in the operating system. The principal goals of the operating system's memory management are:</p>
<p>

<list>
<entry level="1" type="bullet">

to provide memory space to enable several processes to be executed at the same time</entry>
<entry level="1" type="bullet">

to provide a satisfactory level of performance for the system users</entry>
<entry level="1" type="bullet">

to protect each program's resources</entry>
<entry level="1" type="bullet">

to share (if desired) memory space between processes</entry>
<entry level="1" type="bullet">

to make the addressing of memory space as transparent as possible for the programmer.</entry>
</list>
</p>

</sec>
<sec>
<st>
Features</st>

<p>

Memory management systems on <link xlink:type="simple" xlink:href="../857/6857.xml">
multi-tasking operating systems</link> usually deal with the following issues.</p>

<ss1>
<st>
Relocation</st>

<p>

In systems with <link xlink:type="simple" xlink:href="../354/32354.xml">
virtual memory</link>, programs in memory must be able to reside in different parts of the memory at different times. This is because when the program is swapped back into memory after being swapped out for a while it can not always be placed in the same location. Memory management in the operating system should therefore be able to relocate programs in memory and handle memory references in the code of the program so that they always point to the right location in memory.</p>

</ss1>
<ss1>
<st>
Protection</st>

<p>

<indent level="1">

<it>Main article: <link xlink:type="simple" xlink:href="../373/515373.xml">
Memory protection</link></it>
</indent>
Processes should not be able to reference the memory for another process without permission.  This is called <link xlink:type="simple" xlink:href="../373/515373.xml">
memory protection</link>, and prevents malicious or malfunctioning code in one program from interfering with the operation of other running programs.</p>

</ss1>
<ss1>
<st>
Sharing</st>

<p>

<indent level="1">

<it>Main article: <link xlink:type="simple" xlink:href="../653/825653.xml">
Shared memory</link></it>
</indent>
Even though the memory for different processes is protected from each other different processes should be able to share information and therefore access the same part of memory.</p>

</ss1>
<ss1>
<st>
Logical organization</st>

<p>

Programs are often organized in modules. Some of these modules could be shared between different programs, some are read only and some contain data that can be modified. The memory management is responsible for handling this logical organization that is different from the physical linear address space. One way to arrange this organization is <link xlink:type="simple" xlink:href="../131/1323131.xml">
segmentation</link>.</p>

</ss1>
<ss1>
<st>
Physical organization</st>

<p>

Memory is usually divided into fast <link>
primary storage</link> and slow <link xlink:type="simple" xlink:href="../248/88248.xml">
secondary storage</link>. Memory management in the operating system handles moving information between these two levels of memory.</p>

</ss1>
<ss1>
<st>
Memory Compaction</st>

<p>

The technique of relocating all occupied areas of memory to one end of the memory so as to get one large block of free memory space is called compaction.</p>
<p>

Memory can be compacted under the following conditions:</p>
<p>

<list>
<entry level="1" type="number">

	As soon as a job terminates.</entry>
<entry level="1" type="number">

	When a new job cannot be loaded into memory due to fragmentation.</entry>
<entry level="1" type="number">

	At fixed time intervals.</entry>
</list>
</p>

</ss1>
</sec>
<sec>
<st>
DOS memory managers</st>

<p>

In addition to standard memory management, the 640 KB barrier of <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../027/20027.xml">
MS-DOS</link></O>
 and compatible systems led to the development of programs known as <link xlink:type="simple" xlink:href="../125/402125.xml">
memory manager</link>s when PC main memories started to be routinely larger than 640 KB in the late 1980s (see <link xlink:type="simple" xlink:href="../215/420215.xml">
conventional memory</link>). These move portions of the operating system outside their normal locations in order to increase the amount of conventional or quasi-conventional memory available to other applications. Examples are <link xlink:type="simple" xlink:href="../797/1595797.xml">
EMM386</link>, which was part of the standard installation in DOS's later versions, and <link xlink:type="simple" xlink:href="../377/719377.xml">
QEMM</link>. These allowed use of memory above the 640 KB barrier, where memory was normally reserved for RAMs, and high and upper memory.</p>

</sec>
<sec>
<st>
See also</st>
<p>

<list>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../117/547117.xml">
Dynamic memory allocation</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../734/6734.xml">
Garbage collection</link></entry>
<entry level="1" type="bullet">

<idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<category wordnetid="105838765" confidence="0.8">
<type wordnetid="105840188" confidence="0.8">
<kind wordnetid="105839024" confidence="0.8">
<link xlink:type="simple" xlink:href="../292/229292.xml">
Handle</link></kind>
</type>
</category>
</concept>
</idea>
 or <link xlink:type="simple" xlink:href="../292/229292.xml">
reference</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../962/674962.xml">
Page table</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../193/311193.xml">
Paging</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../997/1310997.xml">
Demand paging</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../018/459018.xml">
Pointer</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../354/32354.xml">
Virtual memory</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../112/177112.xml">
Memory management unit</link> (MMU)</entry>
</list>
</p>

</sec>
<sec>
<st>
External links</st>
<p>

<list>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.memorymanagement.org/">
The Memory Management Reference</weblink></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://linux-mm.org/">
Linux Memory Management</weblink></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.enderunix.org/simsek/articles/memory.pdf">
Memory Management For System Programmers</weblink></entry>
</list>
</p>


</sec>
</bdy>
</article>
