<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 22:27:47[mciao0825] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>Client honeypot</title>
<id>6697319</id>
<revision>
<id>239515998</id>
<timestamp>2008-09-19T10:07:42Z</timestamp>
<contributor>
<username>Cydebot</username>
<id>1215485</id>
</contributor>
</revision>
<categories>
<category>Security</category>
</categories>
</header>
<bdy>

<link xlink:type="simple" xlink:href="../952/287952.xml">
Honeypots</link> are security devices whose value lie in being probed and compromised. Traditional honeypots are servers (or devices that expose server services) that wait passively to be attacked. <b>Client Honeypots</b> are active security devices in search of malicious servers that attack clients. The client honeypot poses as a client and interacts with the server to examine whether an attack has occurred. Up until now, the focus of client honeypots have been web browsers, but any client that interacts with servers can be part of a client honeypot (for example ftp, ssh, email, etc).<p>

There are several terms that are used to describe client honeypots. Besides client honeypot, which is the generic classification, honeyclient is the other term that is generally used and accepted. However, there is a subtlety here, as "honeyclient" is actually a homograph that could also refer to the first open source client honeypot implementation (see below), although this should be clear from the context.</p>

<sec>
<st>
 Architecture </st>
<p>

A client honeypot is composed of three components. The first component, a queuer, is responsible for creating a list of servers for the client to visit. This list can be created, for example, through crawling. The second component is the client itself, which is able to make a requests to servers identified by the queuer. After the interaction with the server has taken place, the third component, an analysis engine, is responsible for determining whether an attack has taken place on the client honeypot.</p>
<p>

In addition to these components, client honeypots are usually equipped with some sort of containment strategy to prevent successful attacks from spreading beyond the client honeypot. This is usually achieved through the use of firewalls and virtual machine sandboxes.</p>
<p>

Analogous to traditional server honeypots, client honeypots are mainly classified by their interaction level: high or low; which denotes the level of functional interaction the server can utilize on the client honeypot.</p>

</sec>
<sec>
<st>
 High interaction </st>
<p>

High interaction client honeypots are fully functional systems comparable to real systems with real clients. As such, no functional limitations (besides the containment strategy) exist on high interaction client honeypots. Attacks on high interaction client honeypots are detected via inspection of the state of the system after a server has been interacted with. The detection of changes to the client honeypot may indicate the occurrence of an attack against that has exploited a vulnerability of the client. An example of such a change is the presence of a new or altered file.</p>
<p>

High interaction client honeypots are very effective at detecting unknown attacks on clients. However, the tradeoff for this accuracy is a performance hit from the amount of system state that has to be monitored to make an attack assessment. Also, this detection mechanism is prone to various forms of evasion by the exploit. For example, an attack could delay the exploit from immediately triggering (time bombs) or could trigger upon a particular set of conditions or actions (<link xlink:type="simple" xlink:href="../442/796442.xml">
logic bombs</link>). Since no immediate, detectable state change occurred, the client honeypot is likely to incorrectly classify the server as safe even though it did successfully perform its attack on the client. Finally, if the client honeypots are running in virtual machines, then an exploit may try to detect the presence of the virtual environment and cease from triggering or behave differently.</p>

<ss1>
<st>
 Capture-HPC </st>
<p>

Capture <weblink xlink:type="simple" xlink:href="http://localhost:18088/wiki/index.php/Client_honeypot#endnote_capture">
http://localhost:18088/wiki/index.php/Client_honeypot#endnote_capture</weblink> is a high interaction client honeypot developed by researchers at Victoria University of Wellington, NZ. Capture differs from existing client honeypots in various ways. First, it is designed to be fast. State changes are being detected using an event based model allowing to react to state changes as they occur. Second, Capture is designed to be scalable. A central Capture server is able to control numerous clients across a network. Third, Capture is supposed to be a framework that allows to utilize different clients. The intitial version of Capture supports Internet Explorer, but the current version supports all major browsers (Internet Explorer, Firefox, Opera, Safari) as well as other HTTP aware client applications, such as office applications and media players.</p>

</ss1>
<ss1>
<st>
 HoneyClient </st>
<p>

HoneyClient <weblink xlink:type="simple" xlink:href="http://localhost:18088/wiki/index.php/Client_honeypot#endnote_honeyclient">
http://localhost:18088/wiki/index.php/Client_honeypot#endnote_honeyclient</weblink> is a web browser based (IE/FireFox) high interaction client honeypot designed by Kathy Wang in 2004 and subsequently developed at <link xlink:type="simple" xlink:href="../752/458752.xml">
MITRE</link>. It was the first open source client honeypot and is written in Perl. HoneyClient is state-based and detects attacks on Windows clients by monitoring specific files, directories and registry entries. It has integrated the Capture-HPC real-time integrity checker to perform this detection. HoneyClient also contains a crawler, so it can be seeded with a list of initial URLs from which to start and can then continue to traverse web sites in search of client-side malware.</p>

</ss1>
<ss1>
<st>
 HoneyMonkey </st>
<p>

HoneyMonkey <weblink xlink:type="simple" xlink:href="http://localhost:18088/wiki/index.php/Client_honeypot#endnote_honeymonkey">
http://localhost:18088/wiki/index.php/Client_honeypot#endnote_honeymonkey</weblink> is a web browser based (IE) high interaction client honeypot implemented by Microsoft in 2005. It is not available for download. HoneyMonkey is state based and detects attacks on clients by monitoring files, registry, and processes. A unique characteristic of HoneyMonkey is its layered approach to interacting with servers in order to identify zero-day exploits. HoneyMonkey initially crawls the web with a vulnerable configuration. Once an attack has been identified, the server is reexamined with a fully patched configuration. If the attack is still detected, one can conclude that the attack utilizes an exploit for which no patch has been publicly released yet and therefore is quite dangerous.</p>

</ss1>
<ss1>
<st>
 SHELIA </st>
<p>

Shelia <weblink xlink:type="simple" xlink:href="http://localhost:18088/wiki/index.php/Client_honeypot#endnote_shelia">
http://localhost:18088/wiki/index.php/Client_honeypot#endnote_shelia</weblink> is a high interaction client honeypot developed by Joan Robert Rocaspana at Vrije Universiteit Amsterdam. It integrates with an email reader and processes each email it receives (URLs &amp; attachments). Depending on the type of URL or attachment received, it opens a different client application (e.g. browser, office application, etc.) It monitors whether executable instructions are executed in data area of memory (which would indicate a buffer overflow exploit has been triggered). With such an approach, SHELIA is not only able to detect exploits, but is able to actually ward off exploits from triggering.</p>

</ss1>
<ss1>
<st>
 UW Spycrawler </st>
<p>

The Spycrawler <weblink xlink:type="simple" xlink:href="http://localhost:18088/wiki/index.php/Client_honeypot#endnote_spycrawler">
http://localhost:18088/wiki/index.php/Client_honeypot#endnote_spycrawler</weblink> developed at the University of Washington is yet another browser based (Mozilla) high interaction client honeypot developed by Moshchuk et al in 2005. This client honeypot is not available for download. The Spycrawler is state based and detects attacks on clients by monitoring files, processes, registry, and browser crashes. Spycrawlers detection mechanism is event based. Further, it increases the passage of time of the virtual machine the Spycrawler is operating in to overcome (or rather reduce the impact) of time bombs.</p>

</ss1>
<ss1>
<st>
 Web Exploit Finder </st>
<p>

WEF <weblink xlink:type="simple" xlink:href="http://localhost:18088/wiki/index.php/Client_honeypot#endnote_stuttgart">
http://localhost:18088/wiki/index.php/Client_honeypot#endnote_stuttgart</weblink> is an implementation of an automatic drive-by-download – detection in a virtualized environment, developed by Thomas Müller, Benjamin Mack and Mehmet Arziman, three students from the Hochschule der Medien (HdM), Stuttgart during the summer term in 2006. WEF can be used as an active HoneyNet with a complete virtualization architecture underneath for rollbacks of compromised virtualized machines.</p>

</ss1>
</sec>
<sec>
<st>
 Low interaction </st>
<p>

Low interaction client honeypots differ from high interaction client honeypots in that they do not utilize an entire real system, but rather use lightweight or simulated clients to interact with the server. (in the browser world, they are similar to web crawlers). Responses from servers are examined directly to assess whether an attack has taken place. This could be done, for example, by examining the response for the presence of malicious strings.</p>
<p>

Low interaction client honeypots are easier to deploy and operate than high interaction client honeypots and also perform better. However, they are likely to have a lower detection rate since attacks have to be known to the client honeypot in order for it to detect them; new attacks are likely to go unnoticed. They also suffer from the problem of evasion by exploits, which may be exacerbated due to their simplicity, thus making it easier for an exploit to detect the presence of the client honeypot. </p>

<ss1>
<st>
 HoneyC </st>
<p>

HoneyC <weblink xlink:type="simple" xlink:href="http://localhost:18088/wiki/index.php/Client_honeypot#endnote_honeyc">
http://localhost:18088/wiki/index.php/Client_honeypot#endnote_honeyc</weblink> is a low interaction client honeypot developed at Victoria University of Wellington by Christian Seifert in 2006. HoneyC is a platform independent open source framework written in Ruby. It currently concentrates driving a web browser simulator to interact with servers. Malicious servers are detected by statically examining the web server’s response for malicious strings through the usage of Snort signatures.</p>

</ss1>
<ss1>
<st>
 Monkey-Spider </st>
<p>

Monkey-Spider <weblink xlink:type="simple" xlink:href="http://localhost:18088/wiki/index.php/Client_honeypot#endnote_monkeyspider">
http://localhost:18088/wiki/index.php/Client_honeypot#endnote_monkeyspider</weblink> is a low-interaction client honeypot initially developed at the University of Mannheim by Ali Ikinci. Monkey-Spider is a crawler based client honeypot initially utilizing anti-virus solutions to detect malware. It is claimed to be fast and expandable with other detection mechanisms. The work has started as a diploma thesis and is continued and released as Free Software under the <link xlink:type="simple" xlink:href="../683/18938683.xml">
GPL</link>.</p>

</ss1>
<ss1>
<st>
 SpyBye </st>
<p>

SpyBye <weblink xlink:type="simple" xlink:href="http://localhost:18088/wiki/index.php/Client_honeypot#endnote_spybye">
http://localhost:18088/wiki/index.php/Client_honeypot#endnote_spybye</weblink> is a low interaction client honeypot developed by Niels Provos. SpyBye allows a web master to determine whether a web site is malicious by a set of heuristics and scanning of content against the ClamAV engine.</p>

</ss1>
</sec>
<sec>
<st>
 Papers </st>
<p>

<list>
<entry level="1" type="bullet">

 Moshchuk, A., Bragin, T., Gribble, S.D. and Levy, H.M. <it>A Crawler-based Study of Spyware on the Web</it>. In 13th Annual Network and Distributed System Security Symposium (NDSS). San Diego, 2006. The Internet Society.</entry>
<entry level="1" type="bullet">

 Wang, Y.-M., Beck, D., Jiang, X., Roussev, R., Verbowski, C., Chen, S. and King, S. <it>Automated Web Patrol with Strider HoneyMonkeys: Finding Web Sites That Exploit Browser Vulnerabilities</it>. In 13th Annual Network and Distributed System Security Symposium (NDSS). San Diego, 2006. The Internet Society.</entry>
<entry level="1" type="bullet">

 Provos, N., McNamee, D., Mavrommatis, P., Wang, K., Modadugu, N. <it>The Ghost In The Browser: Analysis of Web-based Malware</it>. Proceedings of the 2007 HotBots. Cambridge, April 2007. USENIX.</entry>
<entry level="1" type="bullet">

 Provos, N., Holz, T. <it>Virtual Honeypots: From Botnet Tracking to Intrusion Detection</it>. Addison-Wesley. Boston, 2007.</entry>
<entry level="1" type="bullet">

 Provos, N., Mavrommatis, P., Abu Rajab, M., Monrose, F. <it>All Your iFRAMEs Point to Us</it>. Google Technical Report. Google, Inc., 2008.</entry>
<entry level="1" type="bullet">

 Seifert, C., Komisarczuk, P. and Welch, I. <it>Application of divide-and-conquer algorithm paradigm to improve the detection speed of high interaction client honeypots</it>. 23rd Annual ACM Symposium on Applied Computing. Ceara, Brazil, 2008.</entry>
<entry level="1" type="bullet">

 Seifert, C. Know Your Enemy: Behind The Scenes Of Malicious Web Servers. The Honeynet Project. 2007.</entry>
<entry level="1" type="bullet">

 Seifert, C., Steenson, R., Holz, T., Yuan, B., Davis, M. A. <it>Know Your Enemy: Malicious Web Servers</it>. The Honeynet Project. 2007. (available at http://www.honeynet.org/papers/mws/index.html)</entry>
<entry level="1" type="bullet">

 Seifert, C., Welch, I. and Komisarczuk, P. <it>HoneyC: The Low-Interaction Client Honeypot</it>. Proceedings of the 2007 NZCSRCS. Waikato University, Hamilton, New Zealand. April 2007.</entry>
<entry level="1" type="bullet">

 Seifert, C., Endicott-Popovsky, B., Frincke, D., Komisarczuk, P., Muschevici, R. and Welch, I., Justifying the Need for Forensically Ready Protocols: A Case Study of Identifying Malicious Web Servers Using Client Honeypots. in 4th Annual IFIP WG 11.9 International Conference on Digital Forensics, Kyoto, 2008.</entry>
<entry level="1" type="bullet">

 Feinstein, Ben. Caffeine Monkey: Automated Colleciton, Detection and Analysis of JavaScript. BlackHat USA. Las Vegas, 2007.</entry>
<entry level="1" type="bullet">

 Stuurman, Thijs, Verduin, Alex. Honeyclients - Low interaction detection method. Technical Report. University of Amsterdam. February 2008.</entry>
<entry level="1" type="bullet">

 Zhuge, Jianwei, Holz, Thorsten, Guo, Jinpeng, Han, Xinhui, Zou, Wei. <it>Studying Malicious Websites and the Underground Economy on the Chinese Web</it>. Proceedings of the 2008 Workshop on the Economics of Information Security. Hanover, June 2008.</entry>
</list>
</p>

</sec>
<sec>
<st>
 Presentations </st>
<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://securitylabs.websense.com/images/alerts/rsa_2008_honeyclient_preso.mov">
Presentation by Websense on their Honeyclient infrastructure and the next generation of Honeyclients they are currently working; April 2008 at RSA-2008</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.honeynet.org">
The Honeynet Project</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.devtarget.org/downloads/kes-2-2006-wolfgarten-honeypots.pdf">
Virtuelle Leimrouten (in German)</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.secguru.com/link/client_honeypots_its_not_only_the_network_video">
Video of Michael Davis' Client Honeypot Presentation at Client Honeypot Presentation at HITB 2006</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.archive.org/details/Recon2005_Kathy_Wang">
Video of Kathy Wang's Presentation of HoneyClient at Recon 2005</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://dewy.fem.tu-ilmenau.de/CCC/22C3/video/mp4/22C3-871-en-honeymonkeys.mp4">
Video of Wolfgarten's presentation at CCC conference</weblink></entry>
</list>
</p>

</sec>
<sec>
<st>
 Sites </st>
<p>

<list>
<entry level="1" type="bullet">

  <cite id="endnote_capture" style="font-style: normal;">
<b>^</b></cite>&nbsp; https://projects.honeynet.org/capture-hpc</entry>
<entry level="1" type="bullet">

  <cite id="endnote_danford" style="font-style: normal;">
<b>^</b></cite>&nbsp; http://handlers.dshield.org/rdanford/pub/2nd_generation_honeyclients.ppt</entry>
<entry level="1" type="bullet">

  <cite id="endnote_honeyc" style="font-style: normal;">
<b>^</b></cite>&nbsp; https://projects.honeynet.org/honeyc</entry>
<entry level="1" type="bullet">

  <cite id="endnote_honeyclient" style="font-style: normal;">
<b>^</b></cite>&nbsp; http://www.honeyclient.org/trac</entry>
<entry level="1" type="bullet">

  <cite id="endnote_monkeyspider" style="font-style: normal;">
<b>^</b></cite>&nbsp; http://monkeyspider.sourceforge.net/</entry>
<entry level="1" type="bullet">

  <cite id="endnote_shelia" style="font-style: normal;">
<b>^</b></cite>&nbsp; http://www.cs.vu.nl/~herbertb/misc/shelia/</entry>
<entry level="1" type="bullet">

  <cite id="endnote_spybye" style="font-style: normal;">
<b>^</b></cite>&nbsp; http://www.spybye.org/</entry>
<entry level="1" type="bullet">

  <cite id="endnote_stuttgart" style="font-style: normal;">
<b>^</b></cite>&nbsp; http://www.xnos.org/security/overview.html</entry>
</list>
</p>

</sec>
</bdy>
</article>
