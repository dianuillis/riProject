<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 15:48:57[mciao0828] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>Busy beaver</title>
<id>67911</id>
<revision>
<id>244598822</id>
<timestamp>2008-10-11T17:10:13Z</timestamp>
<contributor>
<username>StevenDH</username>
<id>5991159</id>
</contributor>
</revision>
<categories>
<category>Theory of computation</category>
<category>Recursion theory</category>
</categories>
</header>
<bdy>

In <link xlink:type="simple" xlink:href="../136/442136.xml">
computability theory</link>, a <b>busy beaver</b> (from the colloquial expression for "industrious person") is a <invention wordnetid="105633385" confidence="0.8">
<know-how wordnetid="105616786" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<link xlink:type="simple" xlink:href="../403/30403.xml">
Turing machine</link></method>
</know-how>
</invention>
 which, when given an empty tape, does <it>a lot of work</it>, then <link xlink:type="simple" xlink:href="../668/13668.xml">
halts</link>. The machine pushes limits on the amount of time and space resources that a halting Turing machine of similar sizes can consume.<p>

A related concept is that of a <b>busy beaver function</b>, which quantifies those resource limits and which, therefore, is not <link xlink:type="simple" xlink:href="../136/442136.xml">
computable</link> by a Turing machine. The concept was first introduced by <link>
Tibor Radó</link> as the "busy beaver game" in his 1962 paper, "On Non-Computable Functions".</p>

<sec>
<st>
The busy beaver game</st>
<p>

In his 1962 paper, <link>
Tibor Radó</link> introduces the busy beaver game as follows:</p>
<p>

Consider a <invention wordnetid="105633385" confidence="0.8">
<know-how wordnetid="105616786" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<link xlink:type="simple" xlink:href="../403/30403.xml">
Turing machine</link></method>
</know-how>
</invention>
 with the binary alphabet {0, 1} and <it>n</it> operational states (often labeled 1, 2, ... <it>n</it> or <it>A</it>, <it>B</it>, <it>C</it>, ...) and an additional Halt state. </p>
<p>

His definition of a Turing machine was as follows:
<list>
<entry level="1" type="bullet">

The machine runs on a 2-way infinite (or unbounded) tape.</entry>
<entry level="1" type="bullet">

At each step, two conditions --</entry>
<entry level="3" type="number">

the machine's current "state" (instruction); and</entry>
<entry level="3" type="number">

the tape symbol the machine's head is scanning</entry>
<entry level="1" type="indent">

-- define each of the following:</entry>
<entry level="3" type="number">

a unique symbol to write (the machine can overwrite a 1 on a 0, a 0 on a 1, a 1 on a 1, and a 0 on a 0);</entry>
<entry level="3" type="number">

a direction to move (Left or Right but "none" is not allowed in this model); and</entry>
<entry level="3" type="number">

a state to transition into (may be the same as the one it was in).</entry>
<entry level="1" type="indent">

Thus the Turing machine is of the type whose "program" consists of a finite table of 5-tuples of the form </entry>
<entry level="1" type="indent">

. </entry>
<entry level="1" type="bullet">

 The machine halts if and when it reaches the special Halt state.</entry>
</list>
</p>
<p>

Now start with a blank tape (i.e. every cell has a 0 in it) and a TABLE of n instructions. Run the machine; if it halts, note the number of 1s it leaves on the tape.</p>
<p>

The <it>n</it>-state busy beaver (BB-<it>n</it>) game is a competition to find an <it>n</it>-state Turing machine which leaves the largest number of 1s on its tape before halting.</p>
<p>

In order to take part in this competition you must submit the description of an n-state Turing machine that halts along with the number of steps it takes to halt to a qualified <link xlink:type="simple" xlink:href="../892/400892.xml">
umpire</link> who must test its validity.  It is important that you provide the number of steps taken to halt, because if you do not and your Turing machine does not halt, there is no general algorithm that the umpire can use to prove that it will not halt.  Whereas if you do provide a finite number of steps along with a candidate machine, the umpire can (given enough time) decide whether or not the machine will halt in so many steps.</p>

</sec>
<sec>
<st>
The busy beaver function <it>Σ</it>(<it>n</it>)</st>
<p>

The busy beaver function <it>Σ</it>(<it>n</it>) is defined as the number of 1s that the <it>champion</it> Turing machine prints given the number n of "states" (Turing-instructions) and a blank tape at the outset.</p>
<p>

Radó went on to demonstrate that there is a well-defined <it>champion</it> to the n-state busy beaver Game:</p>
<p>

There are a finite number of Turing machines with <it>n</it> states and 2 symbols, specifically there are [4n+4]2n of them <weblink xlink:type="simple" xlink:href="http://cis.csuohio.edu/~somos/busy.html#typo">
http://cis.csuohio.edu/~somos/busy.html#typo</weblink>.  In addition it is trivial that some of these are halting machines; i.e., there exists at least one <it>n</it>-state, 2-symbol TM that will halt, for every n.</p>
<p>

Now define:
<list>
<entry level="1" type="bullet">

 <it>En</it> to be the finite, non-empty set of halting <it>n</it>-state, 2-symbol Turing machines of the type described in the preceding section (two-way infinite tape, transition function defined by 5-tuples, etc.).</entry>
<entry level="1" type="bullet">

 <it>σ</it>(<it>M</it>) = the number of 1s left on the tape after the Turing machine <it>M</it> is run on a blank tape for any <it>M</it> in <it>En</it>.</entry>
<entry level="1" type="bullet">

 <it>Σ</it>(<it>n</it>) = max { <it>σ</it>(<it>M</it>) | <it>M</it> in <it>En</it>}  (The largest number of 1s written by any n-state 2-symbol Turing machine)</entry>
</list>
</p>
<p>

Since <it>σ</it>(<it>M</it>) is a non-negative finite number for any <it>M</it> halting (in <it>En</it>), and since <it>En</it> is a non-empty finite set, <it>Σ(n)</it> is a well-defined non-negative finite number for any <it>n</it>.</p>
<p>

This <b>Σ</b> is the <b>busy beaver function</b> and any <it>n</it>-state, 2-symbol machine <it>M</it> for which <it>σ</it>(<it>M</it>) = <it>Σ</it>(<it>n</it>) (i.e. which attains the maximum) is called a <b>busy beaver</b>.</p>

</sec>
<sec>
<st>
Non-computability of <it>Σ</it> </st>
<p>

Radó went on to prove that there is no <link xlink:type="simple" xlink:href="../338/1139338.xml">
computable function</link> that bounds <it>Σ</it>; that is, for any given computable function <it>f</it>, there must be some <it>n</it> (and thus, one can show, infinitely many <it>n</it>), for which <it>f(n) Σ(n)</it>. (A proof is given below.) In particular, 
<it>Σ</it> is itself non-computable.  </p>
<p>

Moreover, this implies that it is undecidable by a general algorithm whether a given candidate is a busy beaver champion (for if we could algorithmically determine whether or not a given candidate was champion, we could then determine the appropriate value of <it>Σ</it> simply by listing all candidates and testing them).</p>
<p>

Although <it>Σ</it> is a non-computable function (i.e., there is no single algorithm that, for each natural number <it>n</it>, computes <it>Σ(n)</it>), nevertheless, for each natural number <it>n</it>, there trivially <it>does exist</it> an algorithm that computes the <b>finite</b> sequence <it>Σ(0), Σ(1), Σ(2), ..., Σ(n)</it> (see <link xlink:type="simple" xlink:href="../338/1139338.xml#xpointer(//*[./st=%22Examples%22])">
computable function#Examples</link>). Furthermore, for sufficiently small <it>n</it>, it is in fact <it>practical</it> to compute the finite sequence; e.g., it is not hard to show that <it>Σ</it>(0) = 0, <it>Σ</it>(1) = 1, <it>Σ</it>(2) = 4, and with progressively more difficulty it can be shown that <it>Σ</it>(3) = 6 and <it>Σ</it>(4) = 13.  <it>Σ</it>(<it>n</it>) has not yet been computed for any instance of <it>n</it> &amp;gt; 4, though some lower bounds have been determined for <it>n</it> = 5 and <it>n</it> = 6  (sequence <weblink xlink:type="simple" xlink:href="http://www.research.att.com/cgi-bin/access.cgi/as/njas/sequences/eisA.cgi?Anum=A028444">
A028444</weblink> in <series wordnetid="108457976" confidence="0.8">
<arrangement wordnetid="107938773" confidence="0.8">
<sequence wordnetid="108459252" confidence="0.8">
<ordering wordnetid="108456993" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<link xlink:type="simple" xlink:href="../004/500004.xml">
OEIS</link></group>
</ordering>
</sequence>
</arrangement>
</series>
).  For n = 12, Dewdney[1984] cites the following rather large lower bound: 
<indent level="1">

<math>\Sigma(12) \ \ \geq \ \ 6 \ \cdot \ 4096^{4096^{.^{.^{.^{4096^{4}}}}}} </math> 
</indent>
where 4096 appears 166 times, and the tower of exponents is topped by a 4.</p>

</sec>
<sec>
<st>
Max shifts function</st>
<p>

Shen Lin proved that <it>Σ</it>(3) = 6 in his 1965 paper with Radó, <it>Computer Studies of Turing Machine Problems</it>.</p>
<p>

In order to prove this he used another extreme function of halting <it>n</it>-state Turing machines, the <link>
maximum shifts function</link>.
Define:
<list>
<entry level="1" type="bullet">

 <it>s</it>(<it>M</it>) = the number of shifts <it>M</it> makes before halting for any <it>M</it> in <it>En''</it></entry>
<entry level="1" type="bullet">

 <it>S</it>(<it>n</it>) = max { <it>s</it>(<it>M</it>) | <it>M</it> in <it>En</it>}  (The largest number of shifts made by any n-state 2-symbol Turing machine)</entry>
</list>
</p>
<p>

Because these Turing machines are required to have a shift in each and every transition or "step" (including any transition to a Halt state), the max-shifts function is at the same time a max-steps function. </p>
<p>

Now, if you know <it>S</it>(<it>n</it>), you can run all <it>n</it>-state Turing machines for <it>S</it>(<it>n</it>) steps sequentially and note a machine which halted with the most 1s on the tape, then you have found a busy beaver and the number of 1s it writes is <it>Σ</it>(<it>n</it>) (because all <it>n</it>-state TMs that halt will have halted in <it>S</it>(<it>n</it>) steps).</p>
<p>

Thus, study of the maximum shifts function has been closely linked with study of the busy beaver function.</p>

</sec>
<sec>
<st>
Known values</st>
<p>

The function values for Σ(<it>n</it>) and <it>S</it>(<it>n</it>) are only known exactly for <it>n</it> &amp;lt; 5. The current 5-state busy beaver champion produces 4,098 1s, using 47,176,870 steps (discovered by Heiner Marxen and Jürgen Buntrock in 1989), but there remain about 40 machines with <weblink xlink:type="simple" xlink:href="http://skelet.ludost.net/bb/nreg.html">
nonregular</weblink> behavior which are believed to never halt, but which have not yet been proven to run infinitely. At the moment the record 6-state busy beaver produces over 101439 1s, using over 102879 steps (found by Terry and Shawn Ligocki in 2007).  As noted above, these busy beavers are 2-symbol Turing machines.</p>

</sec>
<sec>
<st>
Generalizations</st>
<p>

For any model of computations there exist simple analogs for busy beaver. For example, the generalization to Turing machines with n states and m symbols defines the following <b>generalized busy beaver functions</b>:</p>
<p>

<list>
<entry level="1" type="number">

 <it>Σ</it>(<it>n</it>, <it>m</it>): the largest number of non-zeros printable by an <it>n</it>-state, <it>m</it>-symbol machine started on an initially blank tape before halting, and</entry>
<entry level="1" type="number">

 <it>S</it>(<it>n</it>, <it>m</it>): the largest number of steps taken by an <it>n</it>-state, <it>m</it>-symbol machine started on an initially blank tape before halting.</entry>
</list>
</p>
<p>

For example the longest running 3-state 3-symbol machine found so far runs   119,112,334,170,342,540 steps before halting. The longest running 6-state, 2-symbol machine which has the additional property of reversing the tape value at each step produces 6,147 1s after 47,339,970 steps. So <it>S</it>RTM(6) ≥ 47,339,970 and ΣRTM(6) ≥ 6,147.</p>
<p>

There is an analog to the Σ function for <link xlink:type="simple" xlink:href="../218/505218.xml">
Minsky machine</link>s, namely the largest number which can be present in any register on halting, for a given number of instructions. This is a consequence of the <link xlink:type="simple" xlink:href="../854/6854.xml">
Church-Turing thesis</link>.</p>

</sec>
<sec>
<st>
Applications</st>
<p>

In addition to posing a rather challenging <link xlink:type="simple" xlink:href="../434/20434.xml">
mathematical game</link> the busy beaver functions have a profound application.  Almost any <link xlink:type="simple" xlink:href="../091/183091.xml">
open problem in mathematics</link> could be solved in a systematic way given the value of <it>S</it>(<it>n</it>) for a sufficiently large <it>n</it>.</p>
<p>

Consider any open question that could be disproven via a <link xlink:type="simple" xlink:href="../151/143151.xml">
counterexample</link> among a <link>
countable</link> number of cases (e.g. <idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<condition wordnetid="113920835" confidence="0.8">
<speculation wordnetid="105891783" confidence="0.8">
<state wordnetid="100024720" confidence="0.8">
<problem wordnetid="114410605" confidence="0.8">
<difficulty wordnetid="114408086" confidence="0.8">
<hypothesis wordnetid="105888929" confidence="0.8">
<link xlink:type="simple" xlink:href="../758/44758.xml">
Goldbach's conjecture</link></hypothesis>
</difficulty>
</problem>
</state>
</speculation>
</condition>
</concept>
</idea>
).  Write a computer program that sequentially tests this conjecture for increasing values (in the case of Goldbach's conjecture, we would consider every even number sequentially and test whether or not it was the sum of two prime numbers).  We will consider this program to be simulated by an <it>n</it>-state Turing machine (although we could alternatively define the busy beaver function for whatever well-defined language you used).  If it finds a counterexample (an even number not the sum of 2 primes in our example), it halts and notifies us.  However, if the conjecture is true, then our program will never halt. (This program can only find counterexamples, it cannot prove the conjecture true.)</p>
<p>

Now, this program is simulated by an <it>n</it>-state Turing machine, so if we know <it>S</it>(<it>n</it>) we can decide (in a finite amount of time) whether or not it will ever halt by simply running the machine that many steps.  And if, after <it>S</it>(<it>n</it>) steps, the machine does not halt, we know that it never will and thus that there are no counterexamples to the given conjecture (i.e., no even numbers that are not the sum of two primes).  This would prove the conjecture to be true!</p>
<p>

Thus specific values (or upper bounds) for <it>S</it>(<it>n</it>) could be used to systematically solve many open problems in mathematics (in theory).  However, current results on the busy beaver problem suggest that this will not be practical for two reasons:
<list>
<entry level="1" type="bullet">

 It is extremely hard to prove values for the busy beaver function (and the max shift function).  It has only been proven for extremely small machines with less than 5 states, while one would presumably need at least 20-50 states to make a useful machine.</entry>
<entry level="1" type="bullet">

 The values of the busy beaver function (and max shift function) get very large, very fast.  <it>S</it>(6) &amp;gt; 102879 already requires special pattern-based acceleration to be able to simulate to completion.  Thus, even if we know, say, <it>S</it>(30), it may be completely unreasonable to run any machine that number of steps.</entry>
</list>
</p>

</sec>
<sec>
<st>
Proof for uncomputability of <it>S</it>(<it>n</it>) and <it>Σ</it>(<it>n</it>)</st>
<p>

Suppose that <it>S</it>(<it>n</it>) is a computable function and let <it>EvalS</it> denote a TM, evaluating <it>S</it>(<it>n</it>). Given a tape with <it>n</it> 1s it will produce <it>S</it>(<it>n</it>) 1s on the tape and then halt. Let <it>Clean</it> denote a Turing machine cleaning the sequence of 1s initially written on the tape. Let <it>Double</it> denote a Turing machine evaluating function <it>n</it> + <it>n</it>. Given a tape with <it>n</it> 1s it will produce 2<it>n</it> 1s on the tape and then halt. 
Let us create the composition <it>Double</it> | <it>EvalS</it> | <it>Clean</it> and let <it>n</it>0 be the number of states of this machine. Let <it>Create_n0</it> denote a Turing machine creating <it>n</it>0 1s on an initially blank tape. This machine may be constructed in a trivial manner to have <it>n</it>0 states (the state <it>i</it> writes 1, moves the head right and switches to state <it>i</it> + 1, except the state <it>n</it>0, which halts). Let <it>N</it> denote the sum <it>n</it>0 + <it>n</it>0.</p>
<p>

Let <it>BadS</it> denote the composition <it>Create_n0</it> | <it>Double</it> | <it>EvalS</it> | <it>Clean</it>. Notice that this machine has <it>N</it> states. Starting with an initially blank tape it first creates a sequence of <it>n</it>0 1s and then doubles it, producing a sequence of <it>N</it> 1s. Then <it>BadS</it> will produce <it>S</it>(<it>N</it>) 1s on tape, and at last it will clear all 1's and then halt. But the phase of cleaning will continue at least <it>S</it>(<it>N</it>) steps, so the time of working of <it>BadS</it> is strictly greater than <it>S</it>(<it>N</it>), which contradicts to the definition of the function <it>S</it>(<it>n</it>).</p>
<p>

The uncomputability of Σ(<it>n</it>) may be proved in a similar way. In the above proof, one must exchange the machine <it>EvalS</it> with <it>EvalΣ</it> and <it>Clean</it> with <it>Increment</it> - a simple TM, searching for a first 0 on the tape and replacing it with 1.</p>
<p>

The uncomputability of S(<it>n</it>) can also be trivially established by reference to the <link xlink:type="simple" xlink:href="../668/13668.xml">
halting problem</link>.  As S(<it>n</it>) is the maximum number of steps that can be performed by a halting Turing machine, any machine which runs for more steps must be non-halting.  One could then determine whether a given Turing machine with <it>n</it> states halts by running it for S(<it>n</it>) steps;  if it has still not halted, it never will.  As being able to compute S(<it>n</it>) would provide a solution to the provably uncomputable halting problem, it follows that S(<it>n</it>) must likewise be uncomputable.</p>

</sec>
<sec>
<st>
Examples of busy beaver Turing machines</st>

<p>

For an example of a 3-state busy beaver's state table and its "run" see <invention wordnetid="105633385" confidence="0.8">
<know-how wordnetid="105616786" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<link xlink:type="simple" xlink:href="../511/6246511.xml#xpointer(//*[./st=%223-state+Busy+Beaver%22])">
Turing machine examples</link></method>
</know-how>
</invention>
.</p>
<p>

These are tables of rules for the Turing machines that generate Σ(1) and S(1), Σ(2) and S(2), Σ(3) (but not S(3)), Σ(4) and S(4), and the best known lower bound for Σ(5) and S(5), and Σ(6) and S(6).  </p>
<p>

In the tables, the columns represent the current state and the rows represent the current symbol read from the tape.  The table entries indicate the symbol to write onto the tape, the direction to move, and the new state (in that order).  </p>
<p>

Each machine begins in state A with an infinite tape that contains all 0s.  Thus, the initial symbol read from the tape is a 0.</p>
<p>

Result Key: (starts at the position underlined, halts at the position <b>in bold</b>)</p>

<ss1>
<st>
1-state, 2-symbol</st>

<p>

<indent level="1">

| class="wikitable"
</indent>
! width="20px" | !! A
|-
! 0
| P1,R,H
|-
! 1
| Never used
|}</p>
<p>

<b>Result:</b> 0 0 1  <b>0</b> 0 (1 step, one "1" total)</p>

</ss1>
<ss1>
<st>
2-state, 2-symbol</st>

<p>

<indent level="1">

| class="wikitable"
</indent>
! width="20px" | !! A !! B
|-
! 0
| P1,R,<b>B</b> || P1,L,<b>A</b>
|-
! 1
| P1,L,<b>B</b> || P1,R,H
|}</p>
<p>

<b>Result:</b> 0 0 1 1 <b>1</b> 1 0 0 (6 steps, four "1"s total)</p>

</ss1>
<ss1>
<st>
3-state, 2-symbol</st>

<p>

<indent level="1">

| class="wikitable"
</indent>
! width="20px" | !! A !! B !! C
|-
! 0
| P1,R,<b>B</b> || P0,R,<b>C</b> || P1,L,<b>C</b>
|-
! 1
| P1,R,H || P1,R,<b>B</b> || P1,L,<b>A</b>
|}</p>
<p>

<b>Result:</b> 0 0 1 1 1 1 <b>1</b> 1 0 0 (14 steps, six "1"s total).</p>
<p>

Note that unlike the previous machines, this one is a champion only for Σ, but not for S. (S(3) = 21.)</p>

</ss1>
<ss1>
<st>
4-state, 2-symbol</st>

<p>

<indent level="1">

| class="wikitable"
</indent>
! width="20px" | !! A !! B !! C !! D
|-
! 0
| P1,R,<b>B</b> || P1,L,<b>A</b> || P1,R,<b>C</b> || P1,R,H
|-
! 1
| P1,L,<b>B</b> || P0,L,<b>D</b> || P0,R,<b>A</b> || P1,L,<b>C</b>
|}</p>
<p>

<b>Result:</b> 0 0 1 <b>0</b> 1 1 1 1 1 1 1 1 1 1 1 1 0 0 (107 steps, thirteen "1"s total)</p>

</ss1>
<ss1>
<st>
current 5-state, 2-symbol possible champion</st>

<p>

<indent level="1">

| class="wikitable"
</indent>
! width="20px" | !! A !! B !! C !! D !! E
|-
! 0
| P1,R,<b>B</b> || P1,R,<b>C</b> || P1,R,<b>D</b> || P1,L,<b>A</b> || P1,R,H
|-
! 1
| P1,L,<b>C</b> || P1,R,<b>B</b> || P0,L,<b>E</b> || P1,L,<b>D</b> || P0,L,<b>A</b>
|}</p>
<p>

<b>Result:</b> 4098 "1"s with 8191 "0"s interspersed in 47,176,870 steps.</p>

</ss1>
<ss1>
<st>
current 6-state, 2-symbol best contender</st>

<p>

<indent level="1">

| class="wikitable"
</indent>
! width="20px" | !! A !! B !! C !! D !! E !! F
|-
! 0
| P1,R,<b>B</b> || P1,L,<b>C</b> || P1,L,<b>D</b> || P1,L,<b>E</b> || P1,L,<b>A</b> || P1,L,<b>C</b>
|-
! 1
| P0,L,<b>E</b> || P0,R,<b>A</b> || P0,R,<b>C</b> || P0,L,<b>F</b> || P1,L,<b>C</b> || P1,R,H
|}</p>
<p>

<b>Result:</b> ≈4.640 × 101439 1s in ≈2.584 × 102879 steps.</p>

</ss1>
</sec>
<sec>
<st>
Exact values and lower bounds for some <it>S</it>(<it>n</it>, <it>m</it>) and <it>Σ</it>(<it>n</it>, <it>m</it>)</st>
<p>

The following table lists the exact values and some known lower bounds for <it>S</it>(<it>n</it>, <it>m</it>) and Σ(<it>n</it>, <it>m</it>) for the generalized busy beaver problems.  Known exact values are shown as plain integers and known lower bounds are preceded by a greater than or equal to (≥) symbol.  Note: entries listed as "???" are bounded by the maximum of all entries to left and above.  These machines either haven't been investigated or were subsequently surpassed by a machine preceding them.</p>
<p>

The Turing machines that achieve these values are available on either <weblink xlink:type="simple" xlink:href="http://www.drb.insel.de/~heiner/BB/">
Heiner Marxen's</weblink> and <weblink xlink:type="simple" xlink:href="http://www.logique.jussieu.fr/~michel/ha.html">
Pascal Michel's</weblink> WWW pages.  Each of these WWW sites also contains some analysis of the Turing machines and references to the proofs of the exact values.</p>
<p>

<b>Values of S(<it>n</it></b><b>,<it>m</it></b><b>)</b>:
<indent level="1">

| class="wikitable"
</indent>
!
! width="120px" | 2-state
! width="120px" | 3-state
! width="120px" | 4-state
! width="120px" | 5-state
! width="120px" | 6-state
|-
! 2-symbol
| align="right" | 6
| align="right" | 21
| align="right" | 107
| align="right" | ≥ 47,176,870
| align="right" | ≥ 2.5 × 102879
|-
! 3-symbol
| align="right" | ≥ 38
| align="right" | ≥&nbsp;119,112,334,170,342,540
| align="right" | ≥ 1.0 × 1014072
| align="center" | ???
| align="center" | ???
|-
! 4-symbol
| align="right" | ≥ 3,932,964
| align="right" | ≥ 5.2 × 1013036
| align="center" | ???
| align="center" | ???
| align="center" | ???
|-
! 5-symbol
| align="right" | ≥ 1.9 × 10704
| align="center" | ???
| align="center" | ???
| align="center" | ???
| align="center" | ???
|-
! 6-symbol
| align="right" | ≥ 2.4 × 109866
| align="center" | ???
| align="center" | ???
| align="center" | ???
| align="center" | ???
|}</p>
<p>

<b>Values of Σ(<it>n</it></b><b>,<it>m</it></b><b>)</b>:
<indent level="1">

| class="wikitable"
</indent>
!
! width="120px" | 2-state
! width="120px" | 3-state
! width="120px" | 4-state
! width="120px" | 5-state
! width="120px" | 6-state
|-
! 2-symbol
| align="right" | 4
| align="right" | 6
| align="right" | 13
| align="right" | ≥ 4,098
| align="right" | ≥ 4.6 × 101439
|-
! 3-symbol
| align="right" | ≥ 9
| align="right" | ≥ 374,676,383
| align="right" | ≥ 1.3 × 107036
| align="center" | ???
| align="center" | ???
|-
! 4-symbol
| align="right" | ≥ 2,050
| align="right" | ≥ 3.7 × 106518
| align="center" | ???
| align="center" | ???
| align="center" | ???
|-
! 5-symbol
| align="right" | ≥ 1.7 × 10352
| align="center" | ???
| align="center" | ???
| align="center" | ???
| align="center" | ???
|-
! 6-symbol
| align="right" | ≥ 1.9 × 104933
| align="center" | ???
| align="center" | ???
| align="center" | ???
| align="center" | ???
|}</p>

</sec>
<sec>
<st>
See also</st>
<p>

<list>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../635/1635.xml">
Kolmogorov complexity</link></entry>
</list>
</p>

</sec>
<sec>
<st>
References</st>
<p>

<list>
<entry level="1" type="bullet">

 Radó, Tibor (1962), <it>On non-computable functions</it>, Bell Systems Tech. J. 41, 3 (May 1962). This is where Radó first defined the busy beaver problem and proved that it was uncomputable and grew faster than any computable function.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 Lin, Shen and Radó, Tibor (1965), <weblink xlink:type="simple" xlink:href="http://portal.acm.org/citation.cfm?doid=321264.321270">
<it>Computer Studies of Turing Machine Problems''</it></weblink>, Journal of the Association for Computing Machinery, Vol. 12, No. 2 (April 1965), pp. 196-212. Lin was a doctoral student under Radó. This paper appeared in part of Lin's thesis. Lin proves that Σ(3) = 6 and S(3) = 21 by proving that all 3-state 2-symbol Turing Machines which don't halt after 21 steps will never halt (Most are proven automatically by a computer program, however 40 are proven by human inspection). </entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 Brady, Allen H. (1983), <weblink xlink:type="simple" xlink:href="http://www.jstor.org/view/00255718/di970586/97p0337t/0">
<it>The determination of the value of Rado's noncomputable function Sigma(k) for four-state Turing machines''</it></weblink>, Mathematics of Computation, Vol. 40, No. 162 (April 1983), pp. 647-665. Brady proves that Σ(4) = 13 and S(4) = 107. Brady defines two new categories for non-halting 3-state 2-symbol Turing Machines: Christmas Trees and Counters. He uses a computer program to prove that all but 27 machines which run over 107 steps are variants of Christmas Trees and Counters which can be proven to run infinitely. The last 27 machines (referred to as holdouts) are proven by personal inspection by Brady himself not to halt.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 Machlin, Rona and Stout, Quentin F. (1990), <weblink xlink:type="simple" xlink:href="http://www.eecs.umich.edu/~qstout/abs/busyb.html">
<it>The complex behavior of simple machines''</it></weblink>, Physica D, No. 42 (June 1990), pp. 85-98.  Machlin and Stout describe the busy beaver problem and many techniques used for finding busy beavers (Which they apply to Turing Machines with 4-states and 2-symbols, thus verifying Brady's proof). They use the known values for S for all machines with ≤ 4 states and 2 symbols to estimate a variant of Chaitin's halting probability (Ω).</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 Marxen, Heiner and Buntrock, Jürgen (1990), <weblink xlink:type="simple" xlink:href="http://www.drb.insel.de/~heiner/BB/mabu90.html">
<it>Attacking the Busy Beaver 5''</it></weblink>, Bulletin of the EATCS, No 40 (February 1990), pp. 247-251. Marxen and Buntrock demonstrate that Σ(5) ≥ 4098 and S(5) ≥ 47,176,870 and describe in detail the method they used to find these machines and prove many others will never halt.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 Busy beaver programs are described by <person wordnetid="100007846" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../840/256840.xml">
Alexander Dewdney</link></person>
 in <it>Scientific American</it>, August 1984, pages 19-23, also March 1985 p. 23 and <weblink xlink:type="simple" xlink:href="http://grail.cba.csuohio.edu/~somos/busy.html#dewd">
April 1985 p. 30</weblink>.</entry>
<entry level="2" type="bullet">

 Dewdney, Alexander K. <it>A computer trap for the busy beaver, the hardest working Turing machine</it>, Scientific American, 251 (2), 10-17, 1984.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 Brady, Allen H. (1995), <it>The Busy Beaver Game and the Meaning of Life</it>, p 237-254, appearing in Herken, Rolf (ed)., <it>The Universal Turing Machine: A Half-Century Survey</it>, 2nd edition (1995), Springer-Verlag, Wien New York. Wherein Brady (of 4-state fame) describes some history of the beast and calls its pursuit "The Busy Beaver Game". He describes other games (e.g. <link xlink:type="simple" xlink:href="../342/54342.xml">
cellular automata</link> and <idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<rule wordnetid="105846054" confidence="0.8">
<link xlink:type="simple" xlink:href="../035/37035.xml">
Conway's Game of Life</link></rule>
</concept>
</idea>
). Of particular interest is the "The Busy Beaver Game in Two Dimensions" (p. 247). With 19 references.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 Taylor L. Booth, <it>Sequential Machines and Automata Theory</it>, Wiley, New York, 1967. Cf Chapter 9, Turing Machines. A difficult book, meant for electrical engineers and technical specialists. Discusses recursion, partial-recursion with reference to Turing Machines, halting problem. A reference in Booth attributes busy beaver to Rado. Booth also defines Rado's busy beaver problem in "home problems" 3, 4, 5, 6 of Chapter 9, p. 396. Problem 3 is to "show that the busy beaver problem is unsolvable... for all values of n."</entry>
</list>
</p>

</sec>
<sec>
<st>
External links</st>
<p>

<list>
<entry level="1" type="bullet">

 The page of <weblink xlink:type="simple" xlink:href="http://www.drb.insel.de/~heiner/BB/">
Heiner Marxen</weblink>, who, with Jürgen Buntrock, found the above-mentioned records for a 5 and 6-state Turing machine.</entry>
<entry level="1" type="bullet">

 Pascal Michel's <weblink xlink:type="simple" xlink:href="http://www.logique.jussieu.fr/~michel/ha.html">
Historical survey</weblink> of busy beaver results which also contains best results and some analysis.</entry>
<entry level="1" type="bullet">

 The page of <weblink xlink:type="simple" xlink:href="http://eden.dei.uc.pt/~machado/research/bb/BB.html">
Penousal Machado's Genetic Beaver Project</weblink> uses Evolutionary Computation to find new candidates to the busy beaver Problem</entry>
<entry level="1" type="bullet">

 Definition of the class <weblink xlink:type="simple" xlink:href="http://skelet.ludost.net/bb/RTM.htm">
RTM</weblink> - Reversal Turing Machines, simple and strong subclass of the TMs.</entry>
<entry level="1" type="bullet">

 The "<weblink xlink:type="simple" xlink:href="http://www.cs.rpi.edu/~kelleo/busybeaver/">
Millennium Attack</weblink>" at the Rensselaer RAIR Lab on the busy beaver Problem.</entry>
<entry level="1" type="bullet">

Aaronson, Scott (1999), <it><weblink xlink:type="simple" xlink:href="http://www.scottaaronson.com/writings/bignumbers.html">
Who can name the biggest number?</weblink>''</it></entry>
<entry level="1" type="bullet">

  <cite id="Reference-Mathworld-Busy Beaver"><physical_entity wordnetid="100001930" confidence="0.8">
<communicator wordnetid="109610660" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<intellectual wordnetid="109621545" confidence="0.8">
<encyclopedist wordnetid="110055566" confidence="0.8">
<compiler wordnetid="109946957" confidence="0.8">
<alumnus wordnetid="109786338" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<writer wordnetid="110794014" confidence="0.8">
<mathematician wordnetid="110301261" confidence="0.8">
<scholar wordnetid="110557854" confidence="0.8">
<link xlink:type="simple" xlink:href="../189/836189.xml">
Eric W. Weisstein</link></scholar>
</mathematician>
</writer>
</scientist>
</causal_agent>
</alumnus>
</compiler>
</encyclopedist>
</intellectual>
</person>
</communicator>
</physical_entity>
, <it><weblink xlink:type="simple" xlink:href="http://mathworld.wolfram.com/BusyBeaver.html">
Busy Beaver</weblink></it> at <computer wordnetid="103082979" confidence="0.8">
<work wordnetid="104599396" confidence="0.8">
<creation wordnetid="103129123" confidence="0.8">
<machine wordnetid="103699975" confidence="0.8">
<reference_book wordnetid="106417598" confidence="0.8">
<publication wordnetid="106589574" confidence="0.8">
<encyclopedia wordnetid="106427387" confidence="0.8">
<product wordnetid="104007894" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<book wordnetid="106410904" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<web_site wordnetid="106359193" confidence="0.8">
<link xlink:type="simple" xlink:href="../235/374235.xml">
MathWorld</link></web_site>
</device>
</book>
</instrumentality>
</artifact>
</product>
</encyclopedia>
</publication>
</reference_book>
</machine>
</creation>
</work>
</computer>
.</cite></entry>
<entry level="1" type="bullet">

 <it><weblink xlink:type="simple" xlink:href="http://demonstrations.wolfram.com/BusyBeaver/">
Busy Beaver</weblink></it> by Hector Zenil, <link xlink:type="simple" xlink:href="../109/594109.xml">
The Wolfram Demonstrations Project</link>.</entry>
</list>
</p>


</sec>
</bdy>
</article>
