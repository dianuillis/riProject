<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 15:23:45[mciao0827] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>Cache</title>
<id>6829</id>
<revision>
<id>243514871</id>
<timestamp>2008-10-06T21:10:10Z</timestamp>
<contributor>
<username>DerHexer</username>
<id>2092344</id>
</contributor>
</revision>
<categories>
<category>Central processing unit</category>
<category>Computer memory</category>
<category>Cache</category>
<category>Internet</category>
</categories>
</header>
<bdy>

For other uses, see <link xlink:type="simple" xlink:href="../111/1928111.xml">
Cache (disambiguation)</link>.<p>

<image location="none" width="50px" src="Wiktionary-logo-en.svg">
<caption>

Wiktionary
</caption>
</image>

Look up  in <web_site wordnetid="106359193" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../658/156658.xml">
Wiktionary</link></web_site>
, the free dictionary.</p>
<p>

In <link xlink:type="simple" xlink:href="../323/5323.xml">
computer science</link>, a <b>cache</b> (pronounced , like "cash" <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref>) is a collection of data duplicating original values stored elsewhere or computed earlier, where the original data is expensive to fetch (owing to longer <link xlink:type="simple" xlink:href="../687/40687.xml">
access time</link>) or to compute, compared to the cost of reading the cache. In other words, a cache is a temporary storage area where frequently accessed data can be stored for rapid access. Once the data is stored in the cache, future use can be made by accessing the cached copy rather than re-fetching or recomputing the original data, so that the average access time is shorter. A cache, therefore, helps expedite data access that the CPU would otherwise need to fetch from main memory.</p>
<p>

A cache has proven to be extremely effective in many areas of computing because access patterns in typical <artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<furnishing wordnetid="103405265" confidence="0.8">
<table wordnetid="104379243" confidence="0.8">
<furniture wordnetid="103405725" confidence="0.8">
<console_table wordnetid="103092883" confidence="0.8">
<link xlink:type="simple" xlink:href="../746/454746.xml">
computer applications</link></console_table>
</furniture>
</table>
</furnishing>
</instrumentality>
</artifact>
 have <link xlink:type="simple" xlink:href="../028/64028.xml">
locality of reference</link>. There are several kinds of locality, but this article primarily deals with data that are accessed close together in time (<link>
temporal locality</link>). The data might or might not be located physically close to each other (<link>
spatial locality</link>).</p>

<sec>
<st>
 History </st>
<p>

Use of the word <it>cache</it> in the computer context originated in 1967 during preparation of an article for publication in the IBM Systems Journal. The paper concerned an exciting memory improvement in Model 85, a latecomer in the IBM System/360 product line. The Journal editor, Lyle R. Johnson, pleaded for a more descriptive term than <it>high-speed buffer</it>.  When none was forthcoming, he suggested <it>cache</it>, from the <language wordnetid="106282651" confidence="0.8">
<link xlink:type="simple" xlink:href="../597/10597.xml">
French</link></language>
 <it>cacher</it>, meaning "to hide". The paper was published in early 1968, the authors were honored by IBM, their work was widely welcomed and subsequently improved upon, and <it>cache</it> soon became standard usage in computer literature.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%222%22])">2</ref></p>

</sec>
<sec>
<st>
Operation</st>
<p>

<image width="150px" src="cache,basic.svg" type="frame">
<caption>

Diagram of a CPU memory cache
</caption>
</image>
</p>
<p>

A cache is a block of memory for temporary storage of data likely to be used again. The <link xlink:type="simple" xlink:href="../218/5218.xml">
CPU</link> and <link xlink:type="simple" xlink:href="../777/13777.xml">
hard drive</link> frequently use a cache, as do web browsers and web servers.  </p>
<p>

A cache is made up of a pool of entries.  Each entry has a datum (a nugget of data) which is a copy of the datum in some backing store.  Each entry also has a tag, which specifies the identity of the datum in the backing store of which the entry is a copy.</p>
<p>

When the cache client (a CPU, web browser, operating system) wishes to access a datum presumably in the backing store, it first checks the cache.  If an entry can be found with a tag matching that of the desired datum, the datum in the entry is used instead.  This situation is known as a <b>cache hit</b>.  So, for example, a web browser program might check its local cache on disk to see if it has a local copy of the contents of a web page at a particular URL.  In this example, the URL is the tag, and the contents of the web page is the datum. The percentage of accesses that result in cache hits is known as the <b>hit rate</b> or <b>hit ratio</b> of the cache.</p>
<p>

The alternative situation, when the cache is consulted and found not to contain a datum with the desired tag, is known as a <b>cache miss</b>.  The previously uncached datum fetched from the backing store during miss handling is usually copied into the cache, ready for the next access.</p>
<p>

During a cache miss, the CPU usually ejects some other entry in order to make room for the previously uncached datum.  The <link xlink:type="simple" xlink:href="../509/846509.xml">
heuristic</link> used to select the entry to eject is known as the <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../476/727476.xml">
replacement policy</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
.  One popular replacement policy, least recently used (LRU), replaces the least recently used entry (see <link xlink:type="simple" xlink:href="../281/954281.xml">
cache algorithms</link>).  More efficient caches compute use frequency against the size of the stored contents, as well as the latencies and throughputs for both the cache and the backing store.  While this works well for larger amounts of data, long latencies, and slow throughputs, such as experienced with a hard drive and the Internet, it's not efficient to use this for cached <link>
main memory</link> (RAM).</p>

<p>

When a datum is written to the cache, it must at some point be written to the backing store as well. The timing of this write is controlled by what is known as the <b>write policy</b>.</p>
<p>

In a <b>write-through</b> cache, every write to the cache causes a synchronous write to the backing store.</p>
<p>

Alternatively, in a <b>write-back</b> (or <b> write-behind</b>) cache, writes are not immediately mirrored to the store.  Instead, the cache tracks which of its locations have been written over (these locations are marked <b>dirty</b>). The data in these locations is written back to the backing store when those data are evicted from the cache, an effect referred to as a <b>lazy write</b>. For this reason, a miss in a write-back cache (which requires a block to be replaced by another) will often require two memory accesses to service: one to retrieve the needed datum, and one to write replaced data from the cache to the store.</p>
<p>

Data write-back may be triggered by other policies as well.  The client may make many changes to a datum in the cache, and then explicitly notify the cache to write back the datum.</p>
<p>

<b>No-write allocation</b> is a cache policy where only processor reads are cached, thus avoiding the need for write-back or write-through when the old value of the datum was absent from the cache prior to the write.</p>
<p>

The data in the backing store may be changed by entities other than the cache, in which case the copy in the cache may become out-of-date or <b>stale</b>. Alternatively, when the client updates the data in the cache, copies of that data in other caches will become stale. Communication protocols between the cache managers which keep the data consistent are known as <link xlink:type="simple" xlink:href="../865/176865.xml">
coherency protocols</link>.</p>

</sec>
<sec>
<st>
Applications</st>

<ss1>
<st>
CPU caches</st>

<p>

<indent level="1">

<it>Main article: <link xlink:type="simple" xlink:href="../181/849181.xml">
CPU cache</link></it>
</indent>

Small memories on or close to the <link xlink:type="simple" xlink:href="../553/19553.xml">
CPU chip</link> can be made faster than the much larger main memory. Most CPUs since the 1980s have used one or more caches, and modern general-purpose CPUs inside <link xlink:type="simple" xlink:href="../137/18457137.xml">
personal computer</link>s may have as many as half a dozen, each specialized to a different part of the task of executing programs.</p>

</ss1>
<ss1>
<st>
 Disk cache </st>

<p>

<indent level="1">

<it>Main article: <link xlink:type="simple" xlink:href="../313/8641313.xml">
Page cache</link></it>
</indent>

While CPU caches are generally managed entirely by hardware, other caches are managed by a variety of software. The <link xlink:type="simple" xlink:href="../313/8641313.xml">
page cache</link> in <link>
main memory</link>, which is an example of disk cache, is usually managed by the operating system <link xlink:type="simple" xlink:href="../394/50394.xml">
kernel</link>.</p>
<p>

While the hard drive's hardware <link xlink:type="simple" xlink:href="../308/8641308.xml">
disk buffer</link> is sometimes misleadingly referred to as "disk cache", its main functions are write sequencing and read prefetching. Repeated cache hits are relatively rare, due to the small size of the buffer in comparison to HDD's capacity.</p>
<p>

In turn, fast local hard disk can be used to cache information held on even slower data storage devices, such as remote servers (<link xlink:type="simple" xlink:href="../719/437719.xml">
web cache</link>) or local <link xlink:type="simple" xlink:href="../109/31109.xml">
tape drive</link>s or <link xlink:type="simple" xlink:href="../595/2367595.xml">
optical jukebox</link>es. Such a scheme is the main concept of <link xlink:type="simple" xlink:href="../849/1971849.xml">
hierarchical storage management</link>.</p>

</ss1>
<ss1>
<st>
Other caches</st>
<p>

The BIND <message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<link xlink:type="simple" xlink:href="../339/8339.xml">
DNS</link></rule>
</direction>
</protocol>
</message>
 daemon caches a mapping of domain names to <link xlink:type="simple" xlink:href="../921/14921.xml">
IP address</link>es, as does a resolver library.</p>
<p>

Write-through operation is common when operating over unreliable networks (like an Ethernet LAN), because of the enormous complexity of the <link xlink:type="simple" xlink:href="../865/176865.xml">
coherency protocol</link> required between multiple write-back caches when communication is unreliable.  For instance, web page caches and <link xlink:type="simple" xlink:href="../784/422784.xml">
client-side</link> <link xlink:type="simple" xlink:href="../477/598477.xml">
network file system</link> caches (like those in <message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<link xlink:type="simple" xlink:href="../252/51252.xml">
NFS</link></rule>
</direction>
</protocol>
</message>
 or <message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<link xlink:type="simple" xlink:href="../873/349873.xml">
SMB</link></rule>
</direction>
</protocol>
</message>
) are typically read-only or write-through specifically to keep the network protocol simple and reliable.</p>
<p>

A cache of recently visited web pages can be managed by your <link xlink:type="simple" xlink:href="../173/33173.xml">
web browser</link>. Some browsers are configured to use an external <link xlink:type="simple" xlink:href="../768/78768.xml">
proxy</link> <link xlink:type="simple" xlink:href="../719/437719.xml">
web cache</link>, a server program through which all web requests are routed so that it can cache frequently accessed pages for everyone in an organization. Many <link xlink:type="simple" xlink:href="../245/100245.xml">
internet service provider</link>s use proxy caches to save <link xlink:type="simple" xlink:href="../827/15612827.xml">
bandwidth</link> on frequently-accessed web pages.</p>
<p>

<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<engine wordnetid="103287733" confidence="0.8">
<motor wordnetid="103789946" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<machine wordnetid="103699975" confidence="0.8">
<link xlink:type="simple" xlink:href="../023/4059023.xml">
Search engine</link></machine>
</device>
</motor>
</engine>
</instrumentality>
</artifact>
s also frequently make <link xlink:type="simple" xlink:href="../063/34063.xml">
web page</link>s they have indexed available from their cache.  For example, <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../923/1092923.xml">
Google</link></company>
 provides a "Cached" link next to each search result.  This is useful when web pages are temporarily inaccessible from a <link xlink:type="simple" xlink:href="../455/33455.xml">
web server</link>.</p>
<p>

Another type of caching is storing computed results that will likely be needed again, or  <link xlink:type="simple" xlink:href="../483/723483.xml">
memoization</link>. An example of this type of caching is <link xlink:type="simple" xlink:href="../114/568114.xml">
ccache</link>, a program that caches the output of the compilation to speed up the second-time compilation.</p>
<p>

<link xlink:type="simple" xlink:href="../342/14158342.xml">
Database caching</link> can substantially improve the throughput of <link xlink:type="simple" xlink:href="../377/8377.xml">
database</link> applications, for example in the processing of <link>
 indexes</link>, <link>
 data dictionaries</link>, and frequently used subsets of data. <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../026/549026.xml">
TimesTen</link></instrumentality>
</artifact>
</system>
 provides a mid-tier caching facility that can be integrated into <link xlink:type="simple" xlink:href="../725/323725.xml">
Oracle database</link>s.</p>

</ss1>
<ss1>
<st>
The difference between buffer and cache</st>

<p>

The terms are not mutually exclusive and the functions are frequently combined; however, there is a difference in intent.  A <link xlink:type="simple" xlink:href="../183/2406183.xml">
buffer</link> is a temporary memory location, that is traditionally used because CPU <link xlink:type="simple" xlink:href="../801/3149801.xml">
instruction</link>s cannot directly address data stored in peripheral devices. Thus, addressable memory is used as intermediate stage.
Additionally such a buffer may be feasible when a large block of data is assembled or disassembled (as required by a storage device), or when data may be delivered in a different order than that in which it is produced.  Also a whole buffer of data is usually transferred sequentially (for example to hard disk), so buffering itself sometimes increases transfer performance. These benefits are present even if the buffered data are written to the <link xlink:type="simple" xlink:href="../821/40821.xml">
buffer</link> once and read from the buffer once.</p>
<p>

A cache also increases transfer performance. A part of the increase similarly comes from the possibility that multiple small transfers will combine into one large block. But the main performance gain occurs because there is a good chance that the same datum will be read from cache multiple times, or that written data will soon be read. Cache's sole purpose is to reduce accesses to the underlying slower storage. Cache is also usually an <link xlink:type="simple" xlink:href="../775/574775.xml">
abstraction layer</link> that is designed to be invisible from the perspective of neighboring layers.</p>

</ss1>
</sec>
<sec>
<st>
References</st>

<p>

<reflist>
<entry id="1">
or, formerly, /kɑːʃ/ — <weblink xlink:type="simple" xlink:href="http://dictionary.oed.com/cgi/entry/50030859?query_type=word&amp;queryword=cache&amp;first=1&amp;max_to_show=10&amp;sort_type=alpha&amp;result_place=1&amp;search_id=ckqc-Vj9VUU-13102&amp;hilite=50030859">
Oxford English Dictionary <it>cache''</it></weblink> (restricted); also <weblink xlink:type="simple" xlink:href="http://dictionary.reference.com/search?q=cache">
Dictionary.com</weblink> (unrestricted). Although the pronunciation /ˈkæʃeɪ/ is sometimes heard in English, it properly only represents the <language wordnetid="106282651" confidence="0.8">
<link xlink:type="simple" xlink:href="../597/10597.xml">
French</link></language>
 <link xlink:type="simple" xlink:href="../512/37512.xml">
adjective</link> '', meaning 'hidden'. /keɪʃ/ is a mispronunciation.</entry>
<entry id="2">
G. C. Stierhoff and A. G. Davis. A History of the IBM Systems Journal. <it>IEEE Annals of the History of Computing</it>, Vol. 20, No. 1 (Jan. 1998), pages 29-35. <weblink xlink:type="simple" xlink:href="http://dx.doi.org/10.1109/85.646206"></weblink> </entry>
</reflist>
</p>

</sec>
<sec>
<st>
See also</st>
<p>

<list>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../308/8641308.xml">
Disk buffer</link> (Hardware-based cache)</entry>
<entry level="1" type="bullet">

<event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../281/954281.xml">
Cache algorithms</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</entry>
<entry level="1" type="bullet">

<physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<model wordnetid="110324560" confidence="0.8">
<assistant wordnetid="109815790" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../377/1773377.xml">
Cache-oblivious algorithm</link></causal_agent>
</worker>
</assistant>
</model>
</person>
</physical_entity>
</entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../412/1381412.xml">
Cache coloring</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../029/234029.xml">
Caching failure</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../181/849181.xml">
CPU cache</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../719/437719.xml">
Web cache</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../616/439616.xml">
Data grid</link></entry>
</list>
</p>



</sec>
</bdy>
</article>
