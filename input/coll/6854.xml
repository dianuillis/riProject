<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 15:23:31[mciao0825] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>Church–Turing thesis</title>
<id>6854</id>
<revision>
<id>244075229</id>
<timestamp>2008-10-09T06:01:48Z</timestamp>
<contributor>
<username>Britmax</username>
<id>638137</id>
</contributor>
</revision>
<categories>
<category>Theory of computation</category>
<category>Alan Turing</category>
<category>Recursion theory</category>
</categories>
</header>
<bdy>

"Church's thesis" redirects here. See also <link xlink:type="simple" xlink:href="../448/15756448.xml">
Church's thesis (constructive mathematics)</link>.
In <link xlink:type="simple" xlink:href="../136/442136.xml">
computability theory</link> the <b>Church–Turing thesis</b> (also known as <b>Church's thesis</b>, <b>Church's conjecture</b> and <b>Turing's thesis</b>) is a combined <link xlink:type="simple" xlink:href="../281/14281.xml">
hypothesis</link> about the nature of <link xlink:type="simple" xlink:href="../890/12979890.xml">
effectively calculable</link> (computable) functions by <link xlink:type="simple" xlink:href="../407/25407.xml">
recursion</link> (Church's Thesis), by mechanical device equivalent to a <invention wordnetid="105633385" confidence="0.8">
<know-how wordnetid="105616786" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<link xlink:type="simple" xlink:href="../403/30403.xml">
Turing machine</link></method>
</know-how>
</invention>
 (Turing's Thesis) or by use of Church's <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<model wordnetid="110324560" confidence="0.8">
<assistant wordnetid="109815790" confidence="0.8">
<know-how wordnetid="105616786" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../203/18203.xml">
λ-calculus</link></causal_agent>
</method>
</worker>
</know-how>
</assistant>
</model>
</person>
</physical_entity>
:<p>

<indent level="1">

Church's Thesis: "Every effectively calculable function (effectively decidable predicate) is general<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref> recursive" (Kleene 1952:300)
</indent>

<indent level="1">

Turing's thesis: "Turing's thesis that every function which would naturally be regarded as computable is computable under his definition, i.e. by one of his machines, is equivalent to Church's thesis by Theorem XXX." (Kleene 1952:376) 
</indent>

The three computational processes (recursion, λ-calculus, and Turing machine) were shown to be equivalent by <scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../731/49731.xml">
Alonzo Church</link></scientist>
, <link xlink:type="simple" xlink:href="../805/28805.xml">
Stephen Kleene</link> and <link xlink:type="simple" xlink:href="../224/679224.xml">
J.B. Rosser</link> (1934-6)<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%222%22])">2</ref> and by <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../208/1208.xml">
Alan Turing</link></scientist>
</person>
 (1936-7)<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%223%22])">3</ref>. Although <link xlink:type="simple" xlink:href="../805/28805.xml">
Stephen Kleene</link> proved the two theses equivalent, the fundamental <it>premise</it> behind the theses — the notion of "effectively computable" or "effectively calculable" — is "a vague intuitive one"<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%224%22])">4</ref> based as it is on (i) “heuristic [observational, experiential] evidence”, (ii) the “equivalence of 'diverse formulations'” (e.g. the three computational processes<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%225%22])">5</ref>) and (iii) on an observational analysis of a human with a pencil and paper following a set of rules (Turing's analysis<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%226%22])">6</ref>) and of a "worker" in boxes (<link xlink:type="simple" xlink:href="../382/362382.xml">
Emil Post</link>'s analysis 1936<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%227%22])">7</ref><ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%228%22])">8</ref>). Thus, as they stand, neither thesis can be proven.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%224%22])">4</ref> The various notions for "effective calculability/computability" — the fly in the ointment — have been proposed as a "formal definition" by Church<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%229%22])">9</ref>, Turing <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2210%22])">10</ref> and Rosser <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2211%22])">11</ref>, as a "working hypothesis" leading by <link xlink:type="simple" xlink:href="../736/393736.xml">
inductive reasoning</link> to a "<link xlink:type="simple" xlink:href="../063/22063.xml">
natural law</link>" by Post<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2212%22])">12</ref> (an idea "sharply" criticized by Church<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2213%22])">13</ref>), or as an axiom or set of axioms (suggested by <link>
Kurt Gödel</link> to Church in 1934-5<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2214%22])">14</ref> but discounted in Post 1936<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2214%22])">14</ref>).</p>
<p>

Today the thesis has near-universal acceptance.</p>
<p>

Informally the <b>Church–Turing thesis</b> states that if an <link xlink:type="simple" xlink:href="../775/775.xml">
algorithm</link> (a procedure that terminates) exists then there is an equivalent <link xlink:type="simple" xlink:href="../403/30403.xml">
Turing Machine</link> or <link>
applicable λ-function</link><ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2215%22])">15</ref> for that algorithm. </p>

<sec>
<st>
Formal statement</st>

<p>

<indent level="1">

<it>See also: <link xlink:type="simple" xlink:href="../890/12979890.xml">
Effectively calculable</link></it>
</indent>

In the following, the words "<it>effectively</it><ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2216%22])">16</ref> <it>calculable</it>" will mean "produced by any intuitively 'effective' means whatsoever" and "<it>computable</it>" will mean "produced by a Turing-machine or equivalent mechanical device".</p>
<p>

Turing's 1939 "definitions" are virtually the same: 
<indent level="1">

"†We shall use the expression "computable function" to mean a function calculable by a machine, and we let "effectively calculable" refer to the intuitive idea without particular identification with any one of these definitions." (cf the footnote † in Turing 1939 (his Ordinals paper) in Davis 1965:160).
</indent>

The thesis can be stated as follows:</p>
<p>

<indent level="1">

<it>Every effectively calculable function is a computable function</it>.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2217%22])">17</ref> 
</indent>

Turing stated it this way:
<indent level="1">

" It was stated ... that "a function is effectively calculable if its values can be found by some purely mechanical process." We may take this literally, understanding that by a purely mechanical process one which could be carried out by a machine. The development ... leads to ... an identification of computability † with effective calculability" († is the footnote above, ibid). 
</indent>
</p>

</sec>
<sec>
<st>
History</st>

<p>

<indent level="1">

<it>Main article: <link xlink:type="simple" xlink:href="../911/13050911.xml">
History of the Church-Turing thesis</link></it>
</indent>

</p>
<ss1>
<st>
 1930–1970 </st>
<p>

One of the important problems for logicians in the 1930s was <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../302/8302.xml">
David Hilbert's</link></scientist>
</person>
 <link xlink:type="simple" xlink:href="../672/9672.xml">
Entscheidungsproblem</link>, which asked if there was a mechanical procedure for separating mathematical truths from mathematical falsehoods.</p>
<p>

In the course of studying the problem, <scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../731/49731.xml">
Alonzo Church</link></scientist>
 and his student <link xlink:type="simple" xlink:href="../805/28805.xml">
Stephen Kleene</link> introduced the notion of <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<model wordnetid="110324560" confidence="0.8">
<assistant wordnetid="109815790" confidence="0.8">
<know-how wordnetid="105616786" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../203/18203.xml">
λ-definable functions</link></causal_agent>
</method>
</worker>
</know-how>
</assistant>
</model>
</person>
</physical_entity>
, and they were able to prove that several large classes of functions frequently encountered in number theory were λ-definable. Church proposed to <link>
Kurt Gödel</link> that one should define the "effectively computable" functions as the λ-definable functions. <link>
Kurt Gödel</link>, however, was not convinced and called the proposal "thoroughly unsatisfactory"<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2218%22])">18</ref>. As a counter-proposal Gödel offered his (primitive) recursion, as modified by <link xlink:type="simple" xlink:href="../901/159901.xml">
Herbrand</link>'s suggestion, that he (Gödel) had detailed in his 1934 lectures in Princeton NJ (Kleene and another student <link xlink:type="simple" xlink:href="../224/679224.xml">
J. B. Rosser</link> transcribed the notes.) Kleene, with help of Church and Rosser, then produced proofs to show that the two calculi are equivalent. Church modified his methods to include use of Herbrand-Gödel recursion and then proved that the Entscheidungsproblem is unsolvable: There is no generalized "effective calculation" (method, algorithm) that can determine whether or not a formula in either the recursive- or λ-calculus is "valid" (more precisely: that a <link xlink:type="simple" xlink:href="../582/404582.xml">
well formed formula</link> is in "normal form")<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2219%22])">19</ref>.</p>
<p>

Within a year, in his 1936-7 paper "On Computable Numbers, with an Application to the Entscheidungsproblem" <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../208/1208.xml">
Alan Turing</link></scientist>
</person>
 asserted his notion of "effective computability" with the introduction of his a-machines (now known as the <invention wordnetid="105633385" confidence="0.8">
<know-how wordnetid="105616786" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<link xlink:type="simple" xlink:href="../403/30403.xml">
Turing machine</link></method>
</know-how>
</invention>
 abstract computational model). He proposed, like Church and Kleene before him, that his formal definition of mechanical computing agent was the correct one.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2220%22])">20</ref></p>
<p>

In a proof-sketch added as an "Appendix" to his 1936-7 Turing showed that the classes of functions defined by λ-calculus and Turing machines coincided.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2221%22])">21</ref> However, although Church's claim predated Turing's, it was Turing who, in the opinions of Gödel and others, finally gave a convincing argument for why these functions really contained all functions that one would be inclined to call "effectively computable". Indeed by the 1960's Gödel had become thoroughly convinced, writing about Alan Turing's machines:</p>
<p>

<indent level="1">

"In consequence of later advances, in particular of the fact that due to A. M. Turing's work69 a precise and unquestionably adequate definition of the general notion of <link xlink:type="simple" xlink:href="../102/396102.xml">
formal system</link>70 can now be given ..."
</indent>
::"69 See <it>Turing 1937</it>, p. 249 [page number in original journal]
<indent level="2">

"70 In my opinion the term "formal system" or "formalism" should never be used for anything but this notion ... [of] formal systems in the proper sense of the term, whose characteristic property is that reasoning in them, in principle, can be completely replaced by mechanical devices."<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2222%22])">22</ref>
</indent>

In a 1964 "Postscriptum" that he added to Davis's anthology <it>The Undecidable</it>, Gödel further expressed his opinion that recursion and the λ-calculus "are much less suitable for our purpose"<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2223%22])">23</ref> . Notice that in this "less suitable" category he is including his own Herbrand-Gödel recursion.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2223%22])">23</ref></p>
<p>

<b>Origin of the phrase "Church-Turing thesis" </b>:</p>
<p>

A <it>definition</it> describes "the meaning" of a word, word-group, or symbol; it has about it the notion of a dogmatic statement: unquestionable, decided. A <it>thesis</it>, on the other hand, is a proposition or proposal that one asserts and then defends by argument, or "an hypothesis" that is to be proved (or perhaps merely asserted without proof).</p>
<p>

Both Church and Turing individually proposed their "formal systems" should be <it>definitions</it> of "effective calculability"<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2224%22])">24</ref>; neither framed their assertions as <it>theses</it>. Indeed Post 1936 disagreed with Church's assertion of his "definition" and insisted it should be a "working hypothesis".<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2225%22])">25</ref>) Rosser (1939) identified (that is: asserted the equivalence of) the three notions-as-definitions: "All three <it>definitions</it> are equivalent, so it does not matter which one is used."<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2226%22])">26</ref> </p>
<p>

The overt expression of a "thesis" — an "hypothesis" — had to be left to Kleene. In his 1943 paper <it>Recursive Predicates and Quantifiers</it> Kleene proposed his "THESIS I":
<indent level="1">

"This heuristic fact [general recursive functions are effectively calculable]...led Church to state the following thesis(22). The same thesis is implicit in Turing's description of computing machines(23).
</indent>
::"THESIS I. <it>Every effectively calculable function (effectively decidable predicate) is general recursive</it> [Kleene's italics]
<indent level="1">

"Since a precise mathematical definition of the term effectively calculable (effectively decidable) has been wanting, we can take this thesis ... as a definition of it..."<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2227%22])">27</ref>
</indent>
::"(22) references Church 1936 
<indent level="2">

"(23) references  Turing 1936-7 
</indent>

Kleene goes on to note that:
<indent level="1">

"...the thesis has the character of an hypothesis — a point emphasized by Post and by Church(24). If we consider the thesis and its converse as definition, then the hypothesis is an hypothesis about the application of the mathematical theory developed from the definition. For the acceptance of the hypothesis, there are, as we have suggested, quite compelling grounds."<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2227%22])">27</ref>
</indent>
:::"(24) references Post 1936 of Post and Church's <it>Formal definitions in the theory of ordinal numbers</it>, <it>Fund. Math</it>. vol 28 (1936) pp.11-21 (see ref. #2, Davis 1965:286).</p>
<p>

A few years later (1952) Kleene would overtly name, defend, express the two "theses" as quoted in the lead-in paragraph, and then "identify" them (show equivalence) by use of his Theorem XXX.</p>

</ss1>
<ss1>
<st>
 Later developments: Axiomatizing the notion of "effective calculation/computation"</st>
<p>

Gōdel in correspondence with Church (ca 1934-5) proposed axiomatizing<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2228%22])">28</ref> "effective calculability" (Eventually Gōdel suggested to Church the use of Herbrand-Gōdel recursion as its <it>definition</it>; after Turing's 1936-7 he supported Turing's definition):
<indent level="1">

"...it might be possible, in terms of effective calculability as an undefined notion, to state a set of axioms which would embody the generally accepted properties of this notion, and to do something on that basis" (Sieg 1997:160).
</indent>

An attempt to understand the notion better led <physical_entity wordnetid="100001930" confidence="0.8">
<peer wordnetid="109626238" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<colleague wordnetid="109935990" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<academician wordnetid="109759069" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<adult wordnetid="109605289" confidence="0.8">
<professional wordnetid="110480253" confidence="0.8">
<mathematician wordnetid="110301261" confidence="0.8">
<educator wordnetid="110045713" confidence="0.8">
<associate wordnetid="109816771" confidence="0.8">
<link xlink:type="simple" xlink:href="../895/3155895.xml">
Robin Gandy</link></associate>
</educator>
</mathematician>
</professional>
</adult>
</scientist>
</academician>
</causal_agent>
</colleague>
</person>
</peer>
</physical_entity>
 (Turing's student and friend) in 1980 to analyze <it>machine</it> computation (as opposed to human-computation acted out by a Turing machine). Gandy's curiosity about, and analysis of, "cellular automata", "Conway's game of life", "parallelism" and "crystalline automata" led him to propose four "principles (or constraints) ... which it is argued, any machine must satisfy."<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2229%22])">29</ref> His most-important fourth, "the principle of causality" is based on the "finite velocity of propagation of effects and signals; contemporary physics rejects the possibility of instaneous action at a distance."<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2230%22])">30</ref> From these principles and some additional constraints — (1a) a lower bound on the linear dimensions of any of the parts, (1b) an upper bound on speed of propagation (the velocity of light), (2) discrete progress of the machine, and (3) deterministic behavior — he produces a theorem that "What can be calculated by a device satisfying principles I-IV is computable.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2231%22])">31</ref>".</p>
<p>

In the late 1990's <link>
Wilfried Sieg</link> analyzed Turing's and Gandy's notions of "effective calculability" with the intent of "sharpening the informal notion, formulating its general features axiomatically, and investigating the axiomatic framework"<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2232%22])">32</ref>. In his 2002 he presents a series of constraints reduced to, roughly: "(B) Boundedness ... (L) Locality ... (D) Determinancy"<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2233%22])">33</ref>.</p>

</ss1>
</sec>
<sec>
<st>
Success of the thesis</st>
<p>

Other formalisms (besides recursion, the <link xlink:type="simple" xlink:href="../203/18203.xml">
lambda calculus</link>, and the <invention wordnetid="105633385" confidence="0.8">
<know-how wordnetid="105616786" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<link xlink:type="simple" xlink:href="../403/30403.xml">
Turing machine</link></method>
</know-how>
</invention>
) have been proposed for describing effective calculability/computability . <link xlink:type="simple" xlink:href="../805/28805.xml">
Stephen Kleene</link> (1952) adds to the list the functions " <it>reckonable</it> in the system S1" of <link>
Kurt Gödel</link> 1936, and <link xlink:type="simple" xlink:href="../382/362382.xml">
Emil Post</link>'s (1943, 1946) "<it>canonical</it> [also called ''normal''] <it>systems</it>".<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2234%22])">34</ref> In the 1950's <scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../047/1056047.xml">
Hao Wang</link></scientist>
 and <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<intellectual wordnetid="109621545" confidence="0.8">
<alumnus wordnetid="109786338" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<mathematician wordnetid="110301261" confidence="0.8">
<scholar wordnetid="110557854" confidence="0.8">
<link xlink:type="simple" xlink:href="../041/953041.xml">
Martin Davis</link></scholar>
</mathematician>
</scientist>
</causal_agent>
</alumnus>
</intellectual>
</person>
</physical_entity>
 greatly simplified the one-tape Turing-machine model (see <link xlink:type="simple" xlink:href="../147/3688147.xml">
Post-Turing machine</link>). <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../639/19639.xml">
Marvin Minsky</link></scientist>
</person>
 expanded the model to two or more tapes and greatly simplified the tapes into "up-down counters", which <link xlink:type="simple" xlink:href="../891/1350891.xml">
Melzak</link> and <link xlink:type="simple" xlink:href="../498/1250498.xml">
Lambek</link> further evolved into what is now known as the <link xlink:type="simple" xlink:href="../543/7583543.xml">
counter machine</link> model. In the late 1960's and early 1970's researchers expanded the counter machine model into the <link xlink:type="simple" xlink:href="../218/505218.xml">
register machine</link>, a close cousins to the modern notion of the <link xlink:type="simple" xlink:href="../457/7878457.xml">
computer</link>. Other models include <link xlink:type="simple" xlink:href="../848/149848.xml">
combinatory logic</link> and <link xlink:type="simple" xlink:href="../156/198156.xml">
Markov algorithm</link>s. Gurevich adds the <link xlink:type="simple" xlink:href="../616/6144616.xml">
pointer machine</link> model of Kolmogorov and Uspensky (1953, 1958): "...they just wanted to ... convince themselves that there is no way to extend the notion of computable function."<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2235%22])">35</ref></p>
<p>

All these contributions involve proofs that the models are computationally equivalent to the Turing machine; such models are said to be <link xlink:type="simple" xlink:href="../621/30621.xml">
Turing complete</link>. Because all these different attempts at formalizing the concept of "effective calculability/computability" have yielded equivalent results, it is now generally assumed that the Church–Turing thesis is correct. In fact, Gödel (1936) proposed something stronger than this; he observed that there was something "absolute" about the concept of "reckonable in S1":
<indent level="1">

"It may also be shown that a function which is computable ['reckonable'] in one of the systems Si, or even in a system of transfinite type, is already computable [reckonable] in S1. Thus the concept 'computable' ['reckonable'] is in a certain definite sense 'absolute', while practically all other familiar metamathematical concepts (e.g. provable, definable, etc.) depend quite essentially on the system to which they are defined"<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2236%22])">36</ref>  
</indent>
</p>
<p>

The success of the Church&ndash;Turing thesis prompted variations of the thesis to be proposed. For example, the Physical Church–Turing thesis (PCTT) states:</p>
<p>

<indent level="1">

<it>"Every function that can be physically computed can be computed by a Turing machine."</it>
</indent>

Another variation is the Strong Church–Turing Thesis (SCTT), which is not due to Church or Turing, but rather was realized gradually in the development of <link xlink:type="simple" xlink:href="../132/6132.xml">
complexity theory</link>.  It states (cf. Bernstein, Vazirani 1997):</p>
<p>

<indent level="1">

<it>"Any 'reasonable' model of computation can be efficiently simulated on a <link xlink:type="simple" xlink:href="../812/197812.xml">
probabilistic Turing machine</link>."</it>
</indent>

The word 'efficiently' here means up to polynomial-time reductions. The Strong Church–Turing Thesis, then, posits that all 'reasonable' models of computation yield the same class of problems that can be computed in polynomial time.  Assuming the conjecture that probabilistic polynomial time (<class wordnetid="107997703" confidence="0.8">
<collection wordnetid="107951464" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<link xlink:type="simple" xlink:href="../079/4079.xml">
BPP</link></group>
</collection>
</class>
) equals deterministic polynomial time (<class wordnetid="107997703" confidence="0.8">
<collection wordnetid="107951464" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<link xlink:type="simple" xlink:href="../550/658550.xml">
P</link></group>
</collection>
</class>
), the word 'probabilistic' is optional in the Strong Church–Turing Thesis.</p>
<p>

If <link xlink:type="simple" xlink:href="../220/25220.xml">
quantum computers</link> are physically possible, they could invalidate the Strong Church–Turing Thesis, since it is also conjectured that quantum polynomial time (<class wordnetid="107997703" confidence="0.8">
<collection wordnetid="107951464" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<link xlink:type="simple" xlink:href="../080/4080.xml">
BQP</link></group>
</collection>
</class>
) is larger than BPP.  In other words, there are efficient <link xlink:type="simple" xlink:href="../220/25220.xml">
quantum algorithms</link> that perform tasks that are not known to have efficient <link xlink:type="simple" xlink:href="../383/495383.xml">
probabilistic algorithms</link>; for example, factoring integers. They would not however invalidate the original or Physical Church-Turing thesis, since a quantum computer can always be simulated by a Turing machine.</p>

</sec>
<sec>
<st>
Real computers are not Turing machines</st>
<p>

In what has been called the "Turing thesis myth," <weblink xlink:type="simple" xlink:href="http://www.engr.uconn.edu/~dqg/papers/myth.pdf">
http://www.engr.uconn.edu/~dqg/papers/myth.pdf</weblink> <weblink xlink:type="simple" xlink:href="http://jeffsutherland.com/papers/wegacm.pdf">
http://jeffsutherland.com/papers/wegacm.pdf</weblink> the Church-Turing thesis has often been misinterpreted as a claim that real computers can be modeled as Turing machines.  This is incorrect.  The Church-Turing thesis concerns the computability of mathematical functions.  Real computers may do input and output continuously during computation, and thus are modeled as <link>
interaction machines</link>, a model distinct from and not reducible to the Turing machine.  However, a Turing machine does model what a computer can do between any input and output events.  For formal models of computers with input and output functionality, see <link xlink:type="simple" xlink:href="../067/15641067.xml">
super-recursive algorithm</link>, and <link xlink:type="simple" xlink:href="../771/9025771.xml">
anytime algorithm</link>.</p>

</sec>
<sec>
<st>
Philosophical implications</st>
<p>

The Church–Turing thesis has been alleged to have some profound implications for the <link xlink:type="simple" xlink:href="../483/6880483.xml">
philosophy of mind</link>.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2237%22])">37</ref> There are also some important open questions which cover the relationship between the Church–Turing thesis and physics, and the possibility of <link xlink:type="simple" xlink:href="../613/175613.xml">
hypercomputation</link>. When applied to physics, the thesis has several possible meanings:</p>
<p>

<list>
<entry level="1" type="number">

The universe is equivalent to a Turing machine or is weaker; thus, computing <link>
non-recursive functions</link> is physically impossible.  This has also been termed the <it>strong Church–Turing thesis</it> (not to be confused with the previously mentioned SCTT) and is a foundation of <link xlink:type="simple" xlink:href="../493/405493.xml">
digital physics</link>.</entry>
<entry level="1" type="number">

The universe is not equivalent to a Turing machine (i.e., the laws of physics are not Turing-computable), but incomputable physical events are not "harnessable" for the construction of a <link xlink:type="simple" xlink:href="../613/175613.xml">
hypercomputer</link>.  For example, a universe in which physics involves <link>
real numbers</link>, as opposed to <link xlink:type="simple" xlink:href="../206/6206.xml">
computable real</link>s, might fall into this category.</entry>
<entry level="1" type="number">

The universe is a <link xlink:type="simple" xlink:href="../613/175613.xml">
hypercomputer</link>, and it is possible to build physical devices to harness this property and calculate <link>
non-recursive functions</link>. For example, it is an open question whether all <link xlink:type="simple" xlink:href="../202/25202.xml">
quantum mechanical</link> events are Turing-computable, although it is known that rigorous models such as quantum Turing machines are equivalent to deterministic Turing machines.  (They are not necessarily efficiently equivalent; see above.)  <physical_entity wordnetid="100001930" confidence="0.8">
<peer wordnetid="109626238" confidence="0.8">
<philosopher wordnetid="110423589" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<intellectual wordnetid="109621545" confidence="0.8">
<colleague wordnetid="109935990" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scholar wordnetid="110557854" confidence="0.8">
<associate wordnetid="109816771" confidence="0.8">
<link xlink:type="simple" xlink:href="../188/311188.xml">
John Lucas</link></associate>
</scholar>
</causal_agent>
</colleague>
</intellectual>
</person>
</philosopher>
</peer>
</physical_entity>
 and, more famously, <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../193/26193.xml">
Roger Penrose</link></scientist>
</person>
<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2238%22])">38</ref> have suggested that the human mind might be the result of some kind of quantum-mechanically enhanced, "non-algorithmic" computation, although there is no scientific evidence for this proposal.</entry>
</list>
</p>
<p>

There are many other technical possibilities which fall outside or between these three categories, but these serve to illustrate the range of the concept.</p>

</sec>
<sec>
<st>
 Non computable functions </st>

<p>

One can formally define functions that are not computable. A well known example of such a function is the <link xlink:type="simple" xlink:href="../911/67911.xml">
busy beaver</link> function. This function takes an input <it>n</it> and returns the largest number of steps that a <invention wordnetid="105633385" confidence="0.8">
<know-how wordnetid="105616786" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<link xlink:type="simple" xlink:href="../403/30403.xml">
Turing machine</link></method>
</know-how>
</invention>
 with <it>n</it> states can execute before halting, when run with no input. Using particular models of Turing machines, researchers have given computed the value of this function for small values of <it>n</it>:  2, 3, 4, 5, and (painfully) 6 states. For higher values, only lower bounds have been given. Finding an upper bound on the busy beaver function is equivalent to solving the <link xlink:type="simple" xlink:href="../668/13668.xml">
halting problem</link>, a problem known to be unsolvable by Turing machines. Since the busy beaver function cannot be computed by Turing machines, the Church-Turing thesis asserts that this function cannot be effectively computed by any method. </p>
<p>

Mark Burgin, Eugene Eberbach, Peter Kugel, and other researchers argue that <link xlink:type="simple" xlink:href="../067/15641067.xml">
super-recursive algorithm</link>s such as inductive Turing machines disprove the Church–Turing thesis. Their argument relies on a definition of algorithm broader than the ordinary one, so that non-computable functions obtained from some inductive Turing machines are called computable. This interpretation of the Church-Turing thesis differs from the interpretation commonly accepted in computability theory, discussed above. The argument that super-recursive algorithms are indeed algorithms in the sense of the Church-Turing thesis has not found broad acceptance within the computability research community.</p>

</sec>
<sec>
<st>
See also</st>
<p>

<list>
<entry level="1" type="bullet">

<system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../985/616985.xml">
Computability logic</link></instrumentality>
</artifact>
</system>
</entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../136/442136.xml">
Computability theory</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../118/913118.xml">
Decidability</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../613/175613.xml">
Hypercomputer</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../067/15641067.xml">
Super-recursive algorithm</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../448/15756448.xml">
Church's thesis in constructive mathematics</link></entry>
</list>
</p>

</sec>
<sec>
<st>
 Footnotes </st>


<p>

<reflist>
<entry id="1">
An archaic usage of Kleene et al. to distinguish Gödel's (1931) "rekursiv" (a few years later named <link xlink:type="simple" xlink:href="../829/24829.xml">
primitive recursion</link> by <link>
Rózsa Péter</link> (cf Gandy 1994 in Herken 1994-5:68)) from Herbrand-Gödel's recursion of 1934 i.e. primitive recursion equipped with the additional <link xlink:type="simple" xlink:href="../197/693197.xml">
mu operator</link>; nowadays mu-recursion is called, simply, "<link xlink:type="simple" xlink:href="../407/25407.xml">
recursion</link>".</entry>
<entry id="2">
Church 1934:90 footnote in Davis 1952</entry>
<entry id="3">
Turing 1936-7 in Davis 1952:149</entry>
<entry id="4">
Kleene 1952:317</entry>
<entry id="5">
cf Kleene 1952:319-323</entry>
<entry id="6">
1936-7 Turing 1936-7 loc cit:135ff</entry>
<entry id="7">
Post 1936 in Davis 1965:289</entry>
<entry id="8">
Kleene 152:321-2</entry>
<entry id="9">
Church 1934 in Davis 1965:100ff</entry>
<entry id="10">
Turing 1939 in Davis 1965:160</entry>
<entry id="11">
Rosser 1939 in Davis 1952:225-6</entry>
<entry id="12">
Post 1936 in Davis 1952:291</entry>
<entry id="13">
Sieg 1997:171 and 176-7)</entry>
<entry id="14">
Sieg 1997:160</entry>
<entry id="15">
Equivalently: <link xlink:type="simple" xlink:href="../407/25407.xml">
recursively</link>-definable function or <link xlink:type="simple" xlink:href="../203/18203.xml">
λ-definable</link> function.  A Turing machine and a λ-function are computationally equivalent.</entry>
<entry id="17">
Gandy (Gandy 1980 in Barwise 1980:123) states it this way: <it>What is effectively calculable is computable.</it> He calls this "Church's Thesis", a peculiar choice of moniker.</entry>
<entry id="16">
Rosser 1939 addresses this notion of "effective" as follows: "Clearly the existence of CC and RC [Church's and Rosser's proofs] presupposes a precise definition of "effective". "Effective method" is here used in the rather special sense of a method each step of which is precisely predetermined and which is certain to produce the answer in a finite number of steps" (Rosser 1939 in Davis 1965:225). Thus this adverb/adjective is used in a sense of "1a: producing a decided, decisive, or desired effect", and "<it>syn</it>: capable of producing a result" (Merriam Webster's Ninth New Collegiate Dictionary)</entry>
<entry id="19">
cf Church 1934 in Davis 1965:105ff, but also the caveat of non-constructive nature of the proof as discussed by Davis. Kleene would, in 1935 (Kleene in Davis 1965:251), present a way to construct functions not recursive. Davis then asserts a 3rd <it>constructive</it> undecidability argument by use of Kleene's result and Gödel's theorem X in his 1934; cf Davis 1965:108-9.</entry>
<entry id="18">
Dawson 1997:99</entry>
<entry id="21">
Turing 1936-7 in Davis 1965:263ff</entry>
<entry id="20">
Turing 1939 in Davis:160</entry>
<entry id="23">
Gödel 1964 in Davis 1965:72</entry>
<entry id="22">
Gödel 1963 in van Heijenoort 1967:616</entry>
<entry id="25">
Post 1936 in Davis 1965:291</entry>
<entry id="24">
cf Church 1934 in Davis 1965:100, also Turing 1939 in Davis 1965:160)</entry>
<entry id="27">
Kleene 1943 in Davis 1965:274</entry>
<entry id="26">
italics added, Rosser 1939 in Davis 1965:226</entry>
<entry id="29">
Gandy 1980 in Barwise 1980:123ff)</entry>
<entry id="28">
"Axiomatizing" is the act of producing a small collection of "self-evident" statements — the axioms — to be used as a basis for argument. These axioms are found by analysis or by experience (i.e. <link xlink:type="simple" xlink:href="../736/393736.xml">
inductive reasoning</link>). A properly-constructed argument will not permit dispute of the conclusion; only the axioms <it>leading to</it> the conclusion are debatable.</entry>
<entry id="31">
loc cit:126</entry>
<entry id="30">
loc cit:135</entry>
<entry id="34">
Kleene 1952:320</entry>
<entry id="35">
Gurevich 1988:2</entry>
<entry id="32">
(Sieg 1998-9 in Sieg-Somner-Talcott 2002:390ff; also Sieg 1997:154ff)</entry>
<entry id="33">
Sieg 1998-9 in Sieg-Somner-Talcott 2002:390ff</entry>
<entry id="38">
cf his subchapter "The Church-Turing Thesis" (p. 47-49) in his chapter "Algorithms and Turing machines" in his 1990 (2nd edition) <it>Emperor's New Mind: Concerning Computers, Minds, and the Laws of Physics</it>, Oxford University Press, Oxford UK. Also his a final chapter titled "Where lies the physics of mind?" where, in a subsection he asserts "The non-algorithmic nature of mathematical insight" (p. 416-8).</entry>
<entry id="36">
translation of Gödel (1936) by Davis in <it>The Undecidable</it> p. 83, differing in the use of the word 'reckonable' in the translation in Kleene (1952) p. 321</entry>
<entry id="37">
In particular see the numerous examples (of errors, of misappropriation of the thesis) at the entry in the Stanford Encyclopedia of Philosophy. For a good place to encounter original papers see David J. Chalmers, ed. 2002, <it>Philosophy of Mind: Classical and Contemporary Readings</it>, Oxford University Press, New York.</entry>
</reflist>
</p>


</sec>
<sec>
<st>
References</st>
<p>

<list>
<entry level="1" type="bullet">

Bernstein, E. &amp; Vazirani, U. <it>Quantum complexity theory</it>, SIAM Journal on Computing 26(5) (1997) 1411?1473</entry>
<entry level="1" type="bullet">

<person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../019/11851019.xml">
Andreas Blass</link></scientist>
</person>
 and <physical_entity wordnetid="100001930" confidence="0.8">
<peer wordnetid="109626238" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<colleague wordnetid="109935990" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<employee wordnetid="110053808" confidence="0.8">
<associate wordnetid="109816771" confidence="0.8">
<link xlink:type="simple" xlink:href="../014/16488014.xml">
Yuri Gurevich</link></associate>
</employee>
</scientist>
</causal_agent>
</colleague>
</worker>
</person>
</peer>
</physical_entity>
 (2003), <weblink xlink:type="simple" xlink:href="http://research.microsoft.com/~gurevich/Opera/164.pdf">
<it>Algorithms: A Quest for Absolute Definitions''</it></weblink>, Bulletin of European Association for Theoretical Computer Science 81, 2003. Includes an excellent bibliography of 56 references.</entry>
<entry level="1" type="bullet">

 Mark Burgin (2005), <it>Super-recursive algorithms</it>, Monographs in computer science, Springer. ISBN 0387955690</entry>
<entry level="1" type="bullet">

<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../731/49731.xml">
Church, A.</link></scientist>
, 1932, "A set of Postulates for the Foundation of Logic", <it>Annals of Mathematics</it>, second series, 33, 346-366.</entry>
<entry level="1" type="bullet">

Church, A., 1936, "An Unsolvable Problem of Elementary Number Theory", <it>American Journal of Mathematics</it>, 58, 345-363.</entry>
<entry level="1" type="bullet">

Church, A., 1936, "A Note on the Entscheidungsproblem", <it>Journal of Symbolic Logic</it>, 1, 40-41.</entry>
<entry level="1" type="bullet">

Church, A., 1941, <it>The Calculi of Lambda-Conversion</it>, Princeton: Princeton University Press.</entry>
<entry level="1" type="bullet">

Cooper, S.B. and Odifreddi, P., "Incomputability in Nature", in "Computability and Models: Perspectives East and West" (S. B. Cooper and S. S. Goncharov, eds.), Kluwer Academic/Plenum Publishers, 2003, pp. 137-160.</entry>
<entry level="1" type="bullet">

 <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<intellectual wordnetid="109621545" confidence="0.8">
<alumnus wordnetid="109786338" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<mathematician wordnetid="110301261" confidence="0.8">
<scholar wordnetid="110557854" confidence="0.8">
<link xlink:type="simple" xlink:href="../041/953041.xml">
Martin Davis</link></scholar>
</mathematician>
</scientist>
</causal_agent>
</alumnus>
</intellectual>
</person>
</physical_entity>
 editor, <it>The Undecidable, Basic Papers on Undecidable Propositions, Unsolvable Problems And Computable Functions</it>, Raven Press, New York, 1965. All the original papers are here including those by Gödel, Church, Turing, Rosser, Kleene, and Post mentioned in this section. Valuable commentary by Davis prefaces most papers.</entry>
<entry level="1" type="bullet">

 Eberbach, E., and Wegner, P., Beyond Turing Machines, <it>Bulletin of the European Association for Theoretical Computer Science</it> (EATCS Bulletin), 81, Oct. 2003, 279-304</entry>
<entry level="1" type="bullet">

<physical_entity wordnetid="100001930" confidence="0.8">
<peer wordnetid="109626238" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<colleague wordnetid="109935990" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<academician wordnetid="109759069" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<adult wordnetid="109605289" confidence="0.8">
<professional wordnetid="110480253" confidence="0.8">
<mathematician wordnetid="110301261" confidence="0.8">
<educator wordnetid="110045713" confidence="0.8">
<associate wordnetid="109816771" confidence="0.8">
<link xlink:type="simple" xlink:href="../895/3155895.xml">
Robin Gandy</link></associate>
</educator>
</mathematician>
</professional>
</adult>
</scientist>
</academician>
</causal_agent>
</colleague>
</person>
</peer>
</physical_entity>
, 1980, <it>Church's Thesis and the Principles for Mechanisms</it>, reprinted in H.J. Barwise, H.J. Keisler and K. Kunen, eds., (1980), <it>The Kleene Symposium</it>, North-Holland Publishing Company, pp. 123-148.</entry>
<entry level="1" type="bullet">

Robin Gandy 1994-5, pp. 51ff in <link>
Rolf Herken</link> ed. 1994-5, <it>The universal Turing Machine: A Half-Century Survey", Springer-Verlag, Wien New York, ISBN 3-211-82637-8. An extensive analysis of the history of the Church-Turing thesis. </it></entry>
<entry level="1" type="bullet">

<link>
Gödel, K.</link>, 1934, <it>On Undecidable Propositions of Formal Mathematical Systems</it>, lecture notes taken by Kleene and Rosser at the Institute for Advanced Study, reprinted in Davis, M. (ed.) 1965, <it>The Undecidable</it>, New York: Raven Press.</entry>
<entry level="1" type="bullet">

Gödel, K., 1936, "On The Length of Proofs", reprinted in Davis, M. (ed.) 1965, <it>The Undecidable</it>, New York: Raven Press (pp.82-83), "Translated by the editor from the original article in <it>Ergenbnisse eines mathematishen Kolloquiums</it>, Heft 7 (1936) pp. 23-24." Cited by Kleene (1952) as "Über die Lāange von Beweisen", in <it>Ergebnisse eines math. Koll</it>, etc.</entry>
<entry level="1" type="bullet">

<physical_entity wordnetid="100001930" confidence="0.8">
<peer wordnetid="109626238" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<colleague wordnetid="109935990" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<employee wordnetid="110053808" confidence="0.8">
<associate wordnetid="109816771" confidence="0.8">
<link xlink:type="simple" xlink:href="../014/16488014.xml">
Yuri Gurevich</link></associate>
</employee>
</scientist>
</causal_agent>
</colleague>
</worker>
</person>
</peer>
</physical_entity>
, 1988, <it>On Kolmogorov Machines and Related Issues</it>, Bulletin of European Assoc. for Theor. Comp. Science, Number 35, June 1988, 71-82.</entry>
<entry level="1" type="bullet">

Yuri Gurevich, <weblink xlink:type="simple" xlink:href="http://research.microsoft.com/~gurevich/Opera/141.pdf">
<it>Sequential Abstract State Machines Capture Sequential Algorithms''</it></weblink>, ACM Transactions on Computational Logic, Vol 1, no 1 (July 2000), pages 77-111. Includes bibliography of 33 sources.</entry>
<entry level="1" type="bullet">

<physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<mathematician wordnetid="110301261" confidence="0.8">
<link xlink:type="simple" xlink:href="../901/159901.xml">
Herbrand, J.</link></mathematician>
</scientist>
</causal_agent>
</person>
</physical_entity>
, 1932, "Sur la non-contradiction de l'arithmétique", <it>Journal fur die reine und angewandte Mathematik</it>, 166, 1-8.</entry>
<entry level="1" type="bullet">

<person wordnetid="100007846" confidence="0.9508927676800064">
<professor wordnetid="110480730" confidence="0.9173553029164789">
<writer wordnetid="110794014" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../758/8758.xml">
Hofstadter, Douglas R.</link></writer>
</professor>
</person>
,  , Chapter 17.</entry>
<entry level="1" type="bullet">

<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../805/28805.xml">
Kleene, S.C.</link></scientist>
, 1935, "A Theory of Positive Integers in Formal Logic", <it>American Journal of Mathematics</it>, 57, 153-173, 219-244.</entry>
<entry level="1" type="bullet">

Kleene, S.C., 1936, "Lambda-Definability and Recursiveness", <it>Duke Mathematical Journal</it> 2, 340-353.</entry>
<entry level="1" type="bullet">

 <cite style="font-style:normal"><link xlink:type="simple" xlink:href="../805/28805.xml">
Kleene C., Stephen</link>&#32;(1943).&#32;"Recursive Predicates and Quantifiers". <it>American Mathematical Society Transactions</it>&#32;<b>Volume 54, No. 1</b>: 41–73. <document wordnetid="106470073" confidence="0.8">
<written_communication wordnetid="106349220" confidence="0.8">
<writing wordnetid="106362953" confidence="0.8">
<link xlink:type="simple" xlink:href="../994/422994.xml">
doi</link></writing>
</written_communication>
</document>
:<weblink xlink:type="simple" xlink:href="http://dx.doi.org/10.2307%2F1990131">
10.2307/1990131</weblink>.</cite>&nbsp; Reprinted in <it>The Undecidable</it>, p. 255ff. Kleene refined his definition of "general recursion" and proceeded in his chapter "12. Algorithmic theories" to posit "Thesis I" (p. 274); he would later repeat this thesis (in Kleene 1952:300) and name it "Church's Thesis"(Kleene 1952:317) (i.e., the <link>
Church Thesis</link>).</entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../211/17211.xml">
Knuth</link>, Donald E.,<it>The Art of Computer Programming, Second Edition, Volume 1/Fundamental Algorithms</it>, Addison-Wesley, 1973.</entry>
<entry level="1" type="bullet">

 Peter Kugel,  It's time to think outside the computational box, <it>Communications of the ACM</it>, Volume 48, Issue 11, November 2005</entry>
<entry level="1" type="bullet">

Lewis, H.R. and Papadimitriou, C.H. Elements of the Theory of Computation, Prentice-Hall, Upper Saddle River, N.J., 1998</entry>
<entry level="1" type="bullet">

<physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<mathematician wordnetid="110301261" confidence="0.8">
<link>
Markov, A.A.</link></mathematician>
</scientist>
</causal_agent>
</person>
</physical_entity>
, 1960, "The Theory of Algorithms", <it>American Mathematical Society Translations</it>, series 2, 15, 1-14. <link xlink:type="simple" xlink:href="../915/915.xml">
A. A. Markov</link> (1954) <it>Theory of algorithms</it>. Also: [Translated by Jacques J. Schorr-Kon and PST staff] Imprint Moscow, Academy of Sciences of the USSR, 1954 [i.e. Jerusalem, Israel Program for Scientific Translations, 1961; available from the Office of Technical Services, U.S. Dept. of Commerce, Washington] Description 444 p. 28 cm. Added t.p. in Russian Translation of Works of the Mathematical Institute, Academy of Sciences of the USSR, v. 42. Original title: Teoriya algerifmov. [QA248.M2943 Dartmouth College library. U.S. Dept. of Commerce, Office of Technical Services, number OTS 60-51085.]</entry>
<entry level="1" type="bullet">

Pour-El, M.B. &amp; Richards, J.I., 1989, <it>Computability in Analysis and Physics</it>, <link xlink:type="simple" xlink:href="../949/1418949.xml">
Springer Verlag</link>.</entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../224/679224.xml">
J. B. Rosser</link> 1939 <it>An Informal Exposition of Proofs of Godel's Theorem and Church's Theorem</it>, The Journal of Symbolic Logic, vol. 4 (1939) pp. 53-60. Reprinted in Davis 1965:223-230.</entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../900/2660900.xml">
Robert Soare</link>, (1995-6), <it>Computability and Recursion</it>, Bulletin of Symbolic Logic 2 (1996), 284–321.</entry>
<entry level="1" type="bullet">

  <cite id="CITEREFTuring2009" style="font-style:normal">Turing, A.M.&#32;(1936),&#32;"On Computable Numbers, with an Application to the Entscheidungsproblem",&#32;<it>Proceedings of the London Mathematical Society</it>, 2&#32;<b>42</b>:  230-65, 1937</cite>&nbsp; (and  <cite id="CITEREFTuring1937" style="font-style:normal">Turing, A.M.&#32;(1937),&#32;"On Computable Numbers, with an Application to the Entscheidungsproblem: A correction",&#32;<it>Proceedings of the London Mathematical Society</it>, 2&#32;<b>43</b>:  544-6</cite>&nbsp;)</entry>
</list>
</p>

</sec>
<sec>
<st>
External links</st>
<p>

<list>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://plato.stanford.edu/entries/church-turing">
The Church-Turing Thesis</weblink> entry in the <it><work wordnetid="104599396" confidence="0.8">
<product wordnetid="104007894" confidence="0.8">
<encyclopedia wordnetid="106427387" confidence="0.8">
<creation wordnetid="103129123" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<book wordnetid="106410904" confidence="0.8">
<reference_book wordnetid="106417598" confidence="0.8">
<publication wordnetid="106589574" confidence="0.8">
<link xlink:type="simple" xlink:href="../356/357356.xml">
Stanford Encyclopedia of Philosophy</link></publication>
</reference_book>
</book>
</artifact>
</creation>
</encyclopedia>
</product>
</work>
</it>&amp;gt; by B. Jack Copeland — detailed information on the Church–Turing Hypothesis.</entry>
</list>
</p>


</sec>
</bdy>
</article>
