<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 22:35:43[mciao0825] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>GSP Algorithm</title>
<id>6897364</id>
<revision>
<id>216810630</id>
<timestamp>2008-06-03T09:45:16Z</timestamp>
<contributor>
<username>GregorB</username>
<id>179697</id>
</contributor>
</revision>
<categories>
<category>Data mining</category>
<category>All articles needing copy edit</category>
<category>Articles with invalid date parameter in template</category>
<category>Wikipedia articles needing copy edit from March 2008</category>
<category>Articles with example pseudocode</category>
</categories>
</header>
<bdy>
<p>

<table class="metadata plainlinks ambox ">
<row>
<col>

ambox-style" style=""</col>
</row>
<row>
<col class="mbox-image"><p>

<image width="30px" src="Acap.svg">
</image>
</p>
</col>
<col style="" class="mbox-text">
 <b>This article or section needs  for  grammar, style, cohesion, tone or spelling.</b>
You can assist by <weblink xlink:type="simple" xlink:href="http://localhost:18088/wiki/index.php?title=GSP_Algorithm&amp;action=edit">
editing it</weblink> now. A how-to is available.<it>&nbsp;(March 2008)''</it></col>
</row>
</table>

</p>
<p>

<b>GSP Algorithm</b> (<it>Generalized Sequential Pattern</it> algorithm) is an algorithm used for <link xlink:type="simple" xlink:href="../804/4986804.xml">
sequence mining</link>. The <link xlink:type="simple" xlink:href="../775/775.xml">
algorithm</link>s for solving sequence mining problems are mostly based on the <it>a priori</it> (level-wise) algorithm. One way to use the level-wise paradigm is to first discover all the frequent items in a level-wise fashion. It simply means counting the occurrences of all singleton elements in the database. Then, the transactions are filtered by removing the non-frequent items. At the end of this step, each transaction is a modified transaction consisting of only the frequent elements it contains. We use this modified database as an input to the GSP algorithm. This process requires one pass over the whole <link xlink:type="simple" xlink:href="../377/8377.xml">
database</link>. </p>
<p>

GSP Algorithm makes multiple passes over the database. In the first pass, all single items (1-sequences) are counted. From the frequent items, a set of candidate 2-sequences are formed, and another pass is made to gather their support. The frequent 2-sequences are used to generate the candidate 3-sequences, and this process is repeated until no more frequent sequences are found. There are two main steps in the algorithm.</p>
<p>

<list>
<entry level="1" type="bullet">

 Candidate Generation. Given the set of frequent (k-1)-frequent sequences F(k-1), the candidates for the next pass are generated by joining F(k-1) with itself. A pruning phase eliminates any sequence, at least one of whose subsequences is not frequent.</entry>
<entry level="1" type="bullet">

 Support Counting. Normally, a hash tree-based search is employed for efficient support counting. Finally non-maximal frequent sequences are removed.</entry>
</list>
</p>

<sec>
<st>
 Algorithm </st>
<p>


F1 = the set of frequent 1-sequence
k=2,
do while F(k-1)!= Null;
   Generate candidate sets Ck (set of candidate k-sequences);
	For all input sequences s in the database D 
                do
	Increment count of all a in Ck if s supports a
	Fk = {a Є Ck such that its frequency exceeds the threshold}
             k= k+1;
       Result = Set of all frequent sequences is the union of all Fks
            End do
End do
</p>
<p>

The above algorithm looks like the <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../194/608194.xml">
Apriori algorithm</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
. One main difference is however the generation of candidate sets. Let us assume that 
A → B and A → C 
are two frequent 2-sequences. The items involved in these sequences are (A, B) and (A,C) respectively. The candidate generation in a usual Apriori style would give (A, B, C) as a 3-itemset, but in the present context we get the following 3-sequences as a result of joining the above 2- sequences
A → B → C, A → C → B and A → BC
The candidate –generation phase takes this into account.
The GSP algorithm discovers frequent sequences, allowing for time constraints such as maximum gap and minimum gap, among the sequence elements. Moreover, it supports the notion of a sliding window, i.e., of a time interval within which items are observed as belonging to the same event, even if they originate from different events.</p>

</sec>
</bdy>
</article>
