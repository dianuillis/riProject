<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 15:23:59[mciao0828] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>Context switch</title>
<id>6904</id>
<revision>
<id>242220969</id>
<timestamp>2008-10-01T11:17:15Z</timestamp>
<contributor>
<username>Eeekster</username>
<id>5583074</id>
</contributor>
</revision>
<categories>
<category>Process (computing)</category>
</categories>
</header>
<bdy>

For other uses, see <link xlink:type="simple" xlink:href="../721/755721.xml">
Switch (disambiguation)</link>.
A <b>context switch</b> is the <link xlink:type="simple" xlink:href="../213/5213.xml">
computing</link> process of storing and restoring the <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<model wordnetid="110324560" confidence="0.8">
<assistant wordnetid="109815790" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../512/285512.xml">
state</link></causal_agent>
</worker>
</assistant>
</model>
</person>
</physical_entity>
 (<link xlink:type="simple" xlink:href="../340/4794340.xml">
context</link>) of a <link xlink:type="simple" xlink:href="../218/5218.xml">
CPU</link> such that multiple <link xlink:type="simple" xlink:href="../178/45178.xml">
process</link>es can share a single CPU resource. The context switch is an essential feature of a <link xlink:type="simple" xlink:href="../857/6857.xml">
multitasking</link> <link xlink:type="simple" xlink:href="../194/22194.xml">
operating system</link>.  Context switches are usually computationally intensive and much of the design of <link xlink:type="simple" xlink:href="../194/22194.xml">
operating system</link>s is to optimize the use
of context switches. A context switch can mean a register context switch, a task context switch, a <link xlink:type="simple" xlink:href="../303/45303.xml">
thread</link> context switch, or a process context switch. What constitutes the context is determined by the processor and the operating system.
<sec>
<st>
 When to switch? </st>
<p>

There are three scenarios where a context switch needs to occur.</p>

<ss1>
<st>
 Multitasking </st>
<p>

Most commonly, within some <link xlink:type="simple" xlink:href="../920/231920.xml">
scheduling</link> scheme, one process needs to be switched out of the CPU so another process can run. Within a <link xlink:type="simple" xlink:href="../566/2204566.xml">
preemptive multitasking</link> operating system, the scheduler allows every task to run for some certain amount of time, called its <it><link>
time slice</link></it>.  </p>
<p>

If a process does not voluntarily yield the CPU (for example, by performing an <link xlink:type="simple" xlink:href="../558/14558.xml">
I/O</link> operation), a timer interrupt fires, and the operating system schedules another process for execution instead. This ensures that the CPU cannot be monopolized by any one processor-intensive application.</p>

</ss1>
<ss1>
<st>
 Interrupt handling </st>
<p>

Some architectures (like the <link xlink:type="simple" xlink:href="../617/14617.xml">
Intel</link> <link xlink:type="simple" xlink:href="../198/34198.xml">
x86</link> architecture) are <link xlink:type="simple" xlink:href="../289/15289.xml">
interrupt</link> driven. This means that if the CPU requests data from a disk, for example, it does not need to <link xlink:type="simple" xlink:href="../489/671489.xml">
busy-wait</link> until the read is over, it can issue the request and continue with some other execution; when the read is over, the CPU can be <it>interrupted</it> and presented with the read. For interrupts, a program called an <it><link xlink:type="simple" xlink:href="../824/638824.xml">
interrupt handler</link></it> is installed, and it is the interrupt handler that handles the interrupt from the disk.</p>
<p>

Clearly, there is a necessity to switch contexts when issuing interrupts - the state of the currently running process must be suspended so that the interrupt handler can be executed.</p>

</ss1>
<ss1>
<st>
 User and kernel mode switching </st>
<p>

When a transition between <link xlink:type="simple" xlink:href="../467/93467.xml">
user mode</link> and <link>
kernel mode</link> is required in an operating system, a context switch is not necessary; a mode transition is <it>not</it> by itself a context switch.  However, depending on the operating system, a context switch may also take place at this time.</p>

</ss1>
</sec>
<sec>
<st>
 Context switch: steps </st>
<p>

In a context switch, the state of the first process must be saved somehow, so that, when the scheduler gets back to the execution of the first process, it can restore this state and continue.</p>
<p>

The state of the process includes all the registers that the process may be using, especially the <link xlink:type="simple" xlink:href="../944/59944.xml">
program counter</link>, plus any other operating system specific data that may be necessary. Often, all the data that is necessary for state is stored in one data structure, called a <it>switchframe</it> or a <link xlink:type="simple" xlink:href="../662/801662.xml">
process control block</link>. </p>
<p>

Now, in order to switch processes, the switchframe for the first process must be created and saved. The switchframes are sometimes stored upon a per-process <link xlink:type="simple" xlink:href="../703/27703.xml">
stack</link> in kernel memory (as opposed to the user-mode stack), or there may be some specific operating system defined data structure for this information.</p>
<p>

Since the operating system has effectively suspended the execution of the first process, it can now load the switchframe and context of the second process. In doing so, the program counter from the switchframe is loaded, and thus execution can continue in the new process.</p>

</sec>
<sec>
<st>
 Software vs hardware context switching </st>
<p>

Context switching can be performed primarily by software or hardware. Some processors, like the <chip wordnetid="103020034" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<microprocessor wordnetid="103760310" confidence="0.8">
<conductor wordnetid="103088707" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<semiconductor_device wordnetid="104171831" confidence="0.8">
<link xlink:type="simple" xlink:href="../054/15054.xml">
Intel 80286</link></semiconductor_device>
</device>
</conductor>
</microprocessor>
</instrumentality>
</artifact>
</chip>
 and higher CPUs, have hardware support for context switches, by making use of a special data segment designated the <link xlink:type="simple" xlink:href="../061/6300061.xml">
Task State Segment</link> or TSS. When a task switch occurs (implicitly due to a CALL instruction, referring to a <link>
task gate</link>, or explicitly due to an interrupt or exception) the <link xlink:type="simple" xlink:href="../218/5218.xml">
CPU</link> can automatically load the new state from the TSS. With other tasks performed in hardware, one would expect this to be rather fast; however, mainstream operating systems, including <link xlink:type="simple" xlink:href="../890/18890.xml">
Windows</link>, do not use this feature. This is due mainly to two reasons: that hardware context switching does not save all the registers (only general purpose registers, not <link xlink:type="simple" xlink:href="../376/11376.xml">
floating point</link> registers--although the TS bit is automatically turned on in the CR0 <link xlink:type="simple" xlink:href="../733/5515733.xml">
control register</link>--resulting in a fault when executing floating point instructions, which gives the OS the opportunity to do saving and restoring of the floating point state), and associated performance issues.</p>
<p>

Some architectures contain logic to allow several hardware contexts to exist simultaneously, eliminating the need to store and restore the CPU context to memory on context switch.
The extreme case is the <link xlink:type="simple" xlink:href="../824/1274824.xml">
barrel processor</link> architecture, which switches between threads of execution on every cycle.</p>

</sec>
<sec>
<st>
External links</st>
<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.linfo.org/context_switch.html">
 Context Switch Definition</weblink> - by The Linux Information Project (LINFO)</entry>
</list>
</p>

<p>

<table style=";" class="navbox" cellspacing="0">
<row>
<col style="padding:2px;">
<table style="width:100%;background:transparent;color:inherit;;" class="nowraplinks collapsible autocollapse " cellspacing="0">
<row>
<header colspan="2" style=";" class="navbox-title">
<link xlink:type="simple" xlink:href="../194/22194.xml">
Operating system</link></header>
</row>
<row style="height:2px;">

</row>
<row>
<col style=";;" class="navbox-group">
General</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<link xlink:type="simple" xlink:href="../395/55395.xml">
History</link>&nbsp;·  <record wordnetid="106647206" confidence="0.8">
<chronology wordnetid="106503224" confidence="0.8">
<indication wordnetid="106797169" confidence="0.8">
<evidence wordnetid="106643408" confidence="0.8">
<timeline wordnetid="106504965" confidence="0.8">
<written_record wordnetid="106502378" confidence="0.8">
<link xlink:type="simple" xlink:href="../968/247968.xml">
Timeline</link></written_record>
</timeline>
</evidence>
</indication>
</chronology>
</record>
&nbsp;·  <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../119/229119.xml">
Developement</link></database>
</wordnet>
</lexical_database>
</electronic_database>
</information>
</message>
&nbsp;·  <link xlink:type="simple" xlink:href="../531/981531.xml">
List</link></col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
<link xlink:type="simple" xlink:href="../394/50394.xml">
Kernel</link></col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-even">
<table style="width:100%;;;;" class="nowraplinks  navbox-subgroup" cellspacing="0">
<row>
<col style=";padding-left:0em;padding-right:0em;;" class="navbox-group">
General</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<link xlink:type="simple" xlink:href="../023/20023.xml">
Microkernel</link>&nbsp;·  <link xlink:type="simple" xlink:href="../023/20023.xml#xpointer(//*[./st=%22Nanokernel%22])">
Nanokernel</link></col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";padding-left:0em;padding-right:0em;;" class="navbox-group">
Types</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-even">
<link xlink:type="simple" xlink:href="../825/20825.xml">
monolithic</link>&nbsp;·  <plant_part wordnetid="113086908" confidence="0.8">
<natural_object wordnetid="100019128" confidence="0.8">
<kernel wordnetid="113137010" confidence="0.8">
<link xlink:type="simple" xlink:href="../041/4345041.xml">
hybrid</link></kernel>
</natural_object>
</plant_part>
&nbsp;·  <plant_part wordnetid="113086908" confidence="0.8">
<natural_object wordnetid="100019128" confidence="0.8">
<kernel wordnetid="113137010" confidence="0.8">
<link xlink:type="simple" xlink:href="../757/95757.xml">
exokernel</link></kernel>
</natural_object>
</plant_part>
</col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";padding-left:0em;padding-right:0em;;" class="navbox-group">
Components</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<link xlink:type="simple" xlink:href="../467/93467.xml">
Kernel space</link>&nbsp;·  <link xlink:type="simple" xlink:href="../658/371658.xml">
Loadable kernel module</link>&nbsp;·  <link xlink:type="simple" xlink:href="../101/9101.xml">
device driver</link>&nbsp;·  <link xlink:type="simple" xlink:href="../467/93467.xml">
User space</link>&nbsp;·  <link xlink:type="simple" xlink:href="../109/555109.xml">
Userland</link></col>
</row>
</table>
</col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
<link xlink:type="simple" xlink:href="../806/15395806.xml">
Process management</link></col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<link xlink:type="simple" xlink:href="../178/45178.xml">
Process</link>&nbsp;·  <link xlink:type="simple" xlink:href="../857/6857.xml">
Multiprogramming</link>&nbsp;·  <link xlink:type="simple" xlink:href="../289/15289.xml">
Interrupt</link>&nbsp;·  Modes: (<link xlink:type="simple" xlink:href="../596/167596.xml">
Protected mode</link>&nbsp;·  <link>
Supervisor mode</link>)&nbsp;·  <link xlink:type="simple" xlink:href="../857/6857.xml">
Computer multitasking</link>&nbsp;·  <link xlink:type="simple" xlink:href="../920/231920.xml">
Scheduling</link>&nbsp;·  <link xlink:type="simple" xlink:href="../904/6904.xml">
Context switch</link>&nbsp;·  <link xlink:type="simple" xlink:href="../857/6857.xml">
Cooperative multitasking</link>&nbsp;·  <link xlink:type="simple" xlink:href="../566/2204566.xml">
Preemptive multitasking</link>&nbsp;·  <link xlink:type="simple" xlink:href="../954/3991954.xml">
CPU modes</link>&nbsp;·  <link xlink:type="simple" xlink:href="../303/45303.xml">
Thread (computer science)</link></col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
Memory management</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-even">
<link xlink:type="simple" xlink:href="../373/515373.xml">
Memory protection</link>&nbsp;·  <link xlink:type="simple" xlink:href="../131/1323131.xml">
Segmentation</link>&nbsp;·  <link xlink:type="simple" xlink:href="../193/311193.xml">
Paging</link>&nbsp;·  <link xlink:type="simple" xlink:href="../112/177112.xml">
Memory management unit</link>&nbsp;·  <link xlink:type="simple" xlink:href="../803/28803.xml">
Segmentation fault</link>&nbsp;·  <link xlink:type="simple" xlink:href="../943/573943.xml">
General protection fault</link></col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
Examples</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../304/18933304.xml">
AmigaOS</link></O>
&nbsp;·  <link xlink:type="simple" xlink:href="../801/4801.xml">
BeOS</link>&nbsp;·  <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../409/22409.xml">
IBM OS/2</link></O>
&nbsp;·  <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../027/20027.xml">
MS-DOS</link></O>
&nbsp;·  <link xlink:type="simple" xlink:href="../890/18890.xml">
Windows</link>&nbsp;·  <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../297/6097297.xml">
Linux</link></O>
&nbsp;·  <link xlink:type="simple" xlink:href="../642/31642.xml">
UNIX</link>&nbsp;·  <link xlink:type="simple" xlink:href="../658/1178658.xml">
OpenSolaris</link>&nbsp;·  <link xlink:type="simple" xlink:href="../640/20640.xml">
Mac OS X</link>&nbsp;·   <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../889/360889.xml">
ReactOS</link></O>
&nbsp;·  <it><link xlink:type="simple" xlink:href="../916/71916.xml">
more…</link>''</it></col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
Miscellaneous concepts</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-even">
<link xlink:type="simple" xlink:href="../679/6885679.xml">
Boot loader</link>&nbsp;·  <standard wordnetid="107260623" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../253/432253.xml">
PXE</link></system_of_measurement>
</standard>
&nbsp;·  <link xlink:type="simple" xlink:href="../ury/24th_century.xml">
API</link>&nbsp;·  <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../131/351131.xml">
Virtual file system</link></instrumentality>
</artifact>
</system>
&nbsp;·  <link xlink:type="simple" xlink:href="../071/2550071.xml">
Virtual tape library</link>&nbsp;·  <link xlink:type="simple" xlink:href="../592/4122592.xml">
Computer network</link>&nbsp;·  <link xlink:type="simple" xlink:href="../293/12293.xml">
GUI</link>&nbsp;·  <link xlink:type="simple" xlink:href="../511/425511.xml">
HAL</link></col>
</row>
</table>
</col>
</row>
</table>
</p>



</sec>
</bdy>
</article>
