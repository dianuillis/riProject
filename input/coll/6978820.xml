<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 22:38:12[mciao0825] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<entity  confidence="0.9511911446218017" wordnetid="100001740">
<header>
<title>MSI Barcode</title>
<id>6978820</id>
<revision>
<id>203423070</id>
<timestamp>2008-04-05T01:09:15Z</timestamp>
<contributor>
<username>Zvika</username>
<id>413489</id>
</contributor>
</revision>
<categories>
<category>Barcodes</category>
</categories>
</header>
<bdy>

<image location="right" width="250px" src="MSI-barcode.png" type="thumb">
<caption>

MSI barcode for the number 1234567 with Mod 10 check digit
</caption>
</image>

<b>MSI</b> (also known as <b>Modified Plessey</b>) is a <link xlink:type="simple" xlink:href="../600/60600.xml">
barcode</link> <link xlink:type="simple" xlink:href="../191/3325191.xml">
symbology</link> developed by the MSI Data Corporation, based on the original <company wordnetid="108058098" confidence="0.8">
<electronics_company wordnetid="108003035" confidence="0.8">
<institution wordnetid="108053576" confidence="0.8">
<link xlink:type="simple" xlink:href="../840/401840.xml#xpointer(//*[./st=%22Plessey+barcodes%22])">
Plessey</link></institution>
</electronics_company>
</company>
 symbology. It is a continuous symbology that is not self-checking. MSI is used primarily for inventory control, marking storage containers and shelves in warehouse environments.
<sec>
<st>
Character set and binary lookup</st>
<p>

The MSI character set consist of the numbers 0..9 as well as two "guard" characters (representing the beginning and end of the barcode). The symbology does not support alphabetic characters.</p>

<ss1>
<st>
Binary mapping</st>
<p>

Each digit and guard character is represented by a binary number, as shown in the table below.
<table class="wikitable">
<row>
<header>
Character</header>
<header>
Map</header>
</row>
<row>
<col>
Start</col>
<col>
110</col>
</row>
<row>
<col>
0</col>
<col>
100100100100</col>
</row>
<row>
<col>
1</col>
<col>
100100100110</col>
</row>
<row>
<col>
2</col>
<col>
100100110100</col>
</row>
<row>
<col>
3</col>
<col>
100100110110</col>
</row>
<row>
<col>
4</col>
<col>
100110100100</col>
</row>
<row>
<col>
5</col>
<col>
100110100110</col>
</row>
<row>
<col>
6</col>
<col>
100110110100</col>
</row>
<row>
<col>
7</col>
<col>
100110110110</col>
</row>
<row>
<col>
8</col>
<col>
110100100100</col>
</row>
<row>
<col>
9</col>
<col>
110100100110</col>
</row>
<row>
<col>
Stop</col>
<col>
1001</col>
</row>
</table>
</p>
<p>

To produce a barcode image from this map, one simply must consider the digit 1 to be a black bar and the digit 0 to be a white bar and produce an image accordingly.</p>

</ss1>
</sec>
<sec>
<st>
Check digit calculation</st>
<p>

The MSI barcode uses one of five possible schemes for calculating a <link xlink:type="simple" xlink:href="../938/486938.xml">
check digit</link>:
<list>
<entry level="1" type="bullet">

 No check digit (least common)</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../428/1352428.xml">
Mod</link> 10 (most common)</entry>
<entry level="1" type="bullet">

 Mod 11 </entry>
<entry level="1" type="bullet">

 Mod 1010</entry>
<entry level="1" type="bullet">

 Mod 1110</entry>
</list>
</p>

<ss1>
<st>
Mod 10 Check Digit</st>

<p>

<indent level="1">

<it>Main article: <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../440/582440.xml">
Luhn algorithm</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</it>
</indent>

When using the Mod 10 check digit algorithm, a string to be encoded 1234567 will be printed with a check digit of 4:
12345674</p>
<p>

The Mod 10 check digit algorithm
<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref>
uses the <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../440/582440.xml">
Luhn algorithm</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
.</p>

</ss1>
<ss1>
<st>
Mod 11 Check Digit</st>

<p>

1. Reverse the string to be encoded (in this case 1234567).</p>
<p>

Let S be the reverse of the string to be encoded
S = 7654321</p>
<p>

2. The string is then "weighted" using a repeating weighting factor pattern. There are two modulo 11 algorithms which use different repeated weighting factor patterns: the <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../259/18622259.xml">
IBM</link></company>
 algorithm which uses (2,3,4,5,6,7), and the <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../220/83220.xml">
NCR</link></company>
 algorithm which uses (2,3,4,5,6,7,8,9). Get the sum of the string by looping through each character and multiply it by a weight from 2 to 7 (IBM) or 2 to 9 (NCR) depending on its position. If the weight's value exceeds the highest number (7 or 9), reset the weight back to 2.</p>
<p>

This example is using the IBM modulo 11 algorithm with a weighting pattern of (2,3,4,5,6,7)
Let X = the final product of the string to encode.
X = 7 * 2
X = 6 * 3
X = 5 * 4
X = 4 * 5
X = 3 * 6
X = 2 * 7
X = 1 * 2</p>
<p>

X = 14 + 18 + 20 + 20 + 18 + 14 + 2</p>
<p>

X = 106</p>
<p>

3. Mod the sum by 11, subtract the result from 11, and then apply the mod 11 function again.</p>
<p>

Let C equal the check digit.
C = (11 - (X mod 11)) mod 11
C = (11 - (106 mod 11)) mod 11
C = (11 - 7) mod 11
C = 4 mod 11
C = 4</p>
<p>

The check digit is 4.</p>

</ss1>
<ss1>
<st>
Mod 1010 check digit</st>
<p>

Simply calculate the Mod 10 check digit the first time and then calculate it again with the previous result and append the result of the second Mod 10 Calculation to the string to be encoded.</p>

</ss1>
<ss1>
<st>
Mod 1110 check digit</st>
<p>

Same as Mod 1010 but the first calculation should be a Mod 11 Check digit.</p>

</ss1>
</sec>
<sec>
<st>
Example</st>
<p>

As an example, we will generate an MSI barcode for the number sequence 1234567 using the most common Mod 10 check digit methodology.</p>
<p>

The check digit (as calcuated above) for this sequence is 4.</p>
<p>

Once you have calculated your check digit, simply map each character in the string to be encoded using the table above as a reference to get the binary map of the bar code; remember to precede the code with "start" and to end it with "stop" For example, to map the string 1234567 with a Mod 10 check digit it would produce the following binary map:</p>
<p>

<table class="wikitable">
<header>
Character</header>
<header>
Map</header>
<header>
Comment</header>
<row>
<col>
Start</col>
<col>
110</col>
<col>
The start character</col>
</row>
<row>
<col>
1</col>
<col>
100100100110</col>
<col>
The number 1</col>
</row>
<row>
<col>
2</col>
<col>
100100110100</col>
<col>
The number 2</col>
</row>
<row>
<col>
3</col>
<col>
100100110110</col>
<col>
The number 3</col>
</row>
<row>
<col>
4</col>
<col>
100110100100</col>
<col>
The number 4</col>
</row>
<row>
<col>
5</col>
<col>
100110100110</col>
<col>
The number 5</col>
</row>
<row>
<col>
6</col>
<col>
100110110100</col>
<col>
The number 6</col>
</row>
<row>
<col>
7</col>
<col>
100110110110</col>
<col>
The number 7</col>
</row>
<row>
<col>
4</col>
<col>
100110100100</col>
<col>
The check digit 4</col>
</row>
<row>
<col>
Stop</col>
<col>
1001</col>
</row>
</table>
</p>
<p>

This results in the following barcode:
<image location="center" width="500px" src="MSI-barcode.png">
</image>
</p>

</sec>
<sec>
<st>
References</st>

<p>

<reflist>
<entry id="1">
<weblink xlink:type="simple" xlink:href="http://publib.boulder.ibm.com/infocenter/printer/v1r1/index.jsp?topic=/com.ibm.printers.afpproducts/com.ibm.printers.ppfaug/ib6p8mst334.htm">
IBM Printing Systems Information Center - Check Digit Calculation Method</weblink>, <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../259/18622259.xml">
IBM</link></company>
.
</entry>
</reflist>
</p>

</sec>
<sec>
<st>
External links</st>
<p>

<list>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.barcodeisland.com/msi.phtml">
Barcode Island: MSI</weblink></entry>
</list>
</p>

</sec>
</bdy>
</entity>
</article>
