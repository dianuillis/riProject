<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 17:32:28[mciao0825] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>Fifth-generation programming language</title>
<id>701685</id>
<revision>
<id>224171503</id>
<timestamp>2008-07-07T17:25:52Z</timestamp>
<contributor>
<username>Frogger3140</username>
<id>7272440</id>
</contributor>
</revision>
<categories>
<category>Programming language classification</category>
</categories>
</header>
<bdy>

A <b>fifth-generation programming language</b> (abbreviated <b>5GL</b>) is a <link xlink:type="simple" xlink:href="../015/23015.xml">
programming language</link> based around solving problems using <paradigm wordnetid="113804375" confidence="0.8">
<linguistic_relation wordnetid="113797142" confidence="0.8">
<inflection wordnetid="113803782" confidence="0.8">
<grammatical_relation wordnetid="113796779" confidence="0.8">
<link xlink:type="simple" xlink:href="../899/189899.xml">
constraints</link></grammatical_relation>
</inflection>
</linguistic_relation>
</paradigm>
 given to the program, rather than using an <link xlink:type="simple" xlink:href="../775/775.xml">
algorithm</link> written by a programmer. Most constraint-based and <link xlink:type="simple" xlink:href="../de)/17927_(Z$I$P$_code).xml">
logic programming</link> languages and some declarative languages are fifth-generation languages.<p>

While <link xlink:type="simple" xlink:href="../367/11367.xml">
fourth-generation programming language</link>s are designed to build specific programs, fifth-generation languages are designed to make the computer solve the problem for you. This way, the programmer only needs to worry about what problems need to be solved and what conditions need to be met, without worrying about how to implement a routine or algorithm to solve them. Fifth-generation languages are used mainly in <link xlink:type="simple" xlink:href="../164/1164.xml">
artificial intelligence</link> research. <link xlink:type="simple" xlink:href="../485/23485.xml">
Prolog</link>, <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<language wordnetid="106282651" confidence="0.8">
<link xlink:type="simple" xlink:href="../829/475829.xml">
OPS5</link></language>
</instrumentality>
</artifact>
</system>
, and <link xlink:type="simple" xlink:href="../726/19726.xml">
Mercury</link> are the best known fifth-generation languages.</p>
<p>

These types of languages were also built upon Lisp, many originating on the <computer wordnetid="103082979" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<machine wordnetid="103699975" confidence="0.8">
<digital_computer wordnetid="103196324" confidence="0.8">
<workstation wordnetid="104603399" confidence="0.8">
<link xlink:type="simple" xlink:href="../123/18123.xml">
Lisp machine</link></workstation>
</digital_computer>
</machine>
</device>
</instrumentality>
</artifact>
</computer>
. <link xlink:type="simple" xlink:href="../989/3070989.xml">
ICAD</link> is a good example. Then, there are many <link xlink:type="simple" xlink:href="../226/485226.xml">
frame language</link>s, such as <link xlink:type="simple" xlink:href="../188/17188.xml">
KL-ONE</link>. </p>
<p>

In the 1990s, fifth-generation languages were considered to be the wave of the future, and some predicted that they would replace all other languages for system development, with the exception of low-level languages. Most notably, from 1982 to 1993 <link xlink:type="simple" xlink:href="../573/15573.xml">
Japan</link> <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref> <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%222%22])">2</ref> put much research and money into their <link xlink:type="simple" xlink:href="../832/347832.xml">
fifth generation computer systems project</link>, hoping to design a massive computer network of machines using these tools.</p>
<p>

However, as larger programs were built, the flaws of the approach became more apparent. It turns out that, starting from a set of constraints defining a particular problem, deriving an efficient algorithm to solve it is a very difficult problem in itself. This crucial step cannot yet be automated and still requires the insight of a human programmer. </p>
<p>

Today, fifth-generation languages have lost part of their initial appeal and are mostly used in academic circles.</p>

<sec>
<st>
 Common misconception </st>
<p>

From time to time vendors in the application development space have claimed 5GL (5th generation language) capabilities.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%223%22])">3</ref> Most of the time they actually sell 4GLs with a higher level of automation and knowledge base. Since the 5GL awareness has dropped because the hype of the 80's quickly faded away and that the projects were eventually all dropped; this has opened doors to the vendors to re-use the term in marketing their new tools, without causing much controversy among the current generations of programmers. Their tools actually consist of 4GLs packed with <link xlink:type="simple" xlink:href="../993/239993.xml">
RAD</link> wizards, <link>
CASE</link> tools and other graphical coding assistance that facilitates code generation.</p>
<p>

Some argue that the graphical approach to easing programming is the real next step in practically raising the level of abstraction (although this paradigm has not yet been fully realized). Constraint-driven programming and other 5GL ambitions will have to wait for a 6th or 7th generation.</p>

</sec>
<sec>
<st>
See also</st>
<p>

<list>
<entry level="1" type="bullet">

<paradigm wordnetid="113804375" confidence="0.8">
<linguistic_relation wordnetid="113797142" confidence="0.8">
<inflection wordnetid="113803782" confidence="0.8">
<grammatical_relation wordnetid="113796779" confidence="0.8">
<link xlink:type="simple" xlink:href="../899/189899.xml">
Constraint programming</link></grammatical_relation>
</inflection>
</linguistic_relation>
</paradigm>
</entry>
</list>
</p>

</sec>
<sec>
<st>
References</st>

<p>

<reflist>
<entry id="1">
Richard Grigonis.&#32;"<weblink xlink:type="simple" xlink:href="http://www.atariarchives.org/deli/fifth_generation.php">
FIFTH-GENERATION COMPUTERS</weblink>".&#32;Retrieved on <link>
2008-03-05</link>.</entry>
<entry id="2">
APL.&#32;"<weblink xlink:type="simple" xlink:href="http://www.cs.kuleuven.ac.be/~dtai/projects/ALP/">
Association for Logic Programming (ALP)</weblink>".&#32;Retrieved on <link>
2008-03-05</link>.</entry>
<entry id="3">
<weblink xlink:type="simple" xlink:href="http://www.it-analysis.com/channels/content.php?cid=9096">
What makes a 5GL?</weblink></entry>
</reflist>
</p>

<p>

<table style=";" class="navbox" cellspacing="0">
<row>
<col style="padding:2px;">
<table style="width:100%;background:transparent;color:inherit;;" class="nowraplinks collapsible autocollapse " cellspacing="0">
<row>
<header colspan="2" style=";" class="navbox-title">
<link xlink:type="simple" xlink:href="../015/23015.xml">
Programming language</link>generations</header>
</row>
<row style="height:2px;">

</row>
<row>
<col colspan="2" style="width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<link xlink:type="simple" xlink:href="../826/81826.xml">
1GL</link> / <link xlink:type="simple" xlink:href="../475/649475.xml">
2GL</link> / <link xlink:type="simple" xlink:href="../250/393250.xml">
3GL</link> / <link xlink:type="simple" xlink:href="../367/11367.xml">
4GL</link> / <link xlink:type="simple" xlink:href="../685/701685.xml">
5GL</link></col>
</row>
</table>
</col>
</row>
</table>
</p>



</sec>
</bdy>
</article>
