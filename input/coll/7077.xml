<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 15:24:03[mciao0828] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<system  confidence="0.9511911446218017" wordnetid="104377057">
<header>
<title>Computer file</title>
<id>7077</id>
<revision>
<id>244339255</id>
<timestamp>2008-10-10T09:41:52Z</timestamp>
<contributor>
<username>-- April</username>
<id>166</id>
</contributor>
</revision>
<categories>
<category>Files</category>
<category>Computer file systems</category>
<category>Data structures</category>
<category>Inter-process communication</category>
</categories>
</header>
<bdy>

This article is about computer files and file systems in general terms.&#32;&#32;For a more detailed and technical discussion, see <link xlink:type="simple" xlink:href="../280/1010280.xml">
File system</link>.&#32;&#32;
A <b>computer file</b> is a block of <link xlink:type="simple" xlink:href="../808/3019808.xml">
arbitrary</link> <link xlink:type="simple" xlink:href="../062/18985062.xml">
information</link>, or <link xlink:type="simple" xlink:href="../365/1728365.xml">
resource</link> for storing information, which is available to a <link xlink:type="simple" xlink:href="../783/5783.xml">
computer program</link> and is usually based on some kind of durable <link xlink:type="simple" xlink:href="../300/5300.xml">
storage</link>. A file is durable in the sense that it remains available for programs to use after the current program has finished. <link xlink:type="simple" xlink:href="../457/7878457.xml">
Computer</link> files can be considered as the modern counterpart of paper <link xlink:type="simple" xlink:href="../228/161228.xml">
document</link>s which traditionally were kept in offices' and libraries' <link xlink:type="simple" xlink:href="../384/1117384.xml">
files</link>, which are the source of the term.
<sec>
<st>
File contents</st>

<p>

At the lowest level, many modern <link xlink:type="simple" xlink:href="../194/22194.xml">
operating system</link> consider files simply as a one-dimensional sequence of <link xlink:type="simple" xlink:href="../365/3365.xml">
byte</link>s. At a higher level, where the content of the file is being considered, these binary digits may represent <link xlink:type="simple" xlink:href="../563/14563.xml">
integer</link> values or <idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<category wordnetid="105838765" confidence="0.8">
<type wordnetid="105840188" confidence="0.8">
<kind wordnetid="105839024" confidence="0.8">
<link xlink:type="simple" xlink:href="../443/73443.xml">
text character</link></kind>
</type>
</category>
</concept>
</idea>
s, or anything else. It is up to the program using the file to understand the meaning and internal layout of information in the file and present it to a user as more meaningful information (like text, images, sounds, or executable application programs).</p>
<p>

At any instant in time, a file might have a size, normally expressed as number of <link xlink:type="simple" xlink:href="../365/3365.xml">
byte</link>s, that indicates how much storage is associated with the file. In most modern operating systems the size can be any non-negative whole number of bytes up to a system limit.  However, the general definition of a file does not require that its instant size has any real meaning, unless the data within the file happens to correspond to data within a pool of persistent storage.</p>
<p>

For example, the file to which the link /bin/ls points in a typical <family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../815/31815.xml">
Unix-like</link></family>
 system probably has a defined size that seldom changed.  Compare this with <link xlink:type="simple" xlink:href="../184/305184.xml">
/dev/null</link>.  This is a file, but its size may be open to question.</p>
<p>

Information in a computer file can consist of smaller packets of information (often called "records" or "lines") that are individually different but share some trait in common. For example, a payroll file might contain information concerning all the employees in a company and their payroll details; each record in the payroll file concerns just one employee, and all the records have the common trait of being related to payrollâ€”this is very similar to placing all payroll information into a specific filing cabinet in an office that does not have a computer. A text file may contain lines of text, corresponding to printed lines on a piece of paper. Alternatively, a file may contain an arbitrary binary image (a <link xlink:type="simple" xlink:href="../755/313755.xml">
BLOB</link>) or it may contain an <link xlink:type="simple" xlink:href="../392/217392.xml">
executable</link>.</p>
<p>

The way information is grouped into a file is entirely up to the person designing the file. This has led to a plethora of more or less standardized file structures for all imaginable purposes, from the simplest to the most complex. Most computer files are used by <link xlink:type="simple" xlink:href="../783/5783.xml">
computer programs</link>. These programs create, modify and delete files for their own use on an as-needed basis. The programmers who create the programs decide what files are needed, how they are to be used and (often) their names.</p>
<p>

In some cases, computer programs manipulate files that are made visible to the computer user. For example, in a word-processing program, the user manipulates document files that she names herself. The content of the document file is arranged in a way that the word-processing program understands, but the user chooses the name and location of the file, and she provides the bulk of the information (such as words and text) that will be stored in the file.</p>
<p>

Many applications pack all their data files into a single file, using internal markers to discern the different types of information contained within. The data files used by games such as <it><event wordnetid="100029378" confidence="0.8">
<social_event wordnetid="107288639" confidence="0.8">
<contest wordnetid="107456188" confidence="0.8">
<game wordnetid="100456199" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<link xlink:type="simple" xlink:href="../521/8521.xml">
Doom</link></psychological_feature>
</game>
</contest>
</social_event>
</event>
</it> and <it><link xlink:type="simple" xlink:href="../266/25266.xml">
Quake</link></it> are examples of this.</p>
<p>

Files on a computer can be created, moved, modified, grown, shrunk and deleted. In most cases, computer programs that are executed on the computer handle these operations, but the user of a computer can also manipulate files if necessary. For instance, <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../287/20287.xml">
Microsoft Word</link></software>
 files are normally created and modified by the Microsoft Word program in response to user commands, but the user can also move, rename, or delete these files directly by using a <link xlink:type="simple" xlink:href="../382/11382.xml">
file manager program</link> such as <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../959/445959.xml">
Windows Explorer</link></software>
 (on Windows computers).</p>
<p>

In <family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../815/31815.xml">
Unix-like</link></family>
 systems, user-space processes do not normally deal with files at all; the <link xlink:type="simple" xlink:href="../194/22194.xml">
operating system</link> provides a level of <link xlink:type="simple" xlink:href="../ury/30th_century.xml">
abstraction</link> which means that almost all interaction with files from user-space is through <link xlink:type="simple" xlink:href="../957/496957.xml">
hard links</link>.  Hard links allow a name to be associated with a file (or they can be anonymous - and therefore temporary); files do not have names in the OS.  For example, a user-space program cannot delete a file; it can delete a link to a file (for example, using the <link>
shell</link> commands rm or mv or, in the anonymous case, simply by exiting), and if the kernel determines that there are no more existing links to the file, it may then delete the file.  In fact, it really is only the kernel that deals with files, but it serves to handle all user-space interaction with (virtual) files in a manner that is transparent to the user-space programs.</p>

</sec>
<sec>
<st>
Semantics</st>
<p>

Although the way programs manipulate files varies according to the operating system and file system involved, the following operations are typical:
<list>
<entry level="1" type="bullet">

<it>Creating</it> a file with a given name</entry>
<entry level="1" type="bullet">

Setting <it>attributes</it> that control operations on the file</entry>
<entry level="1" type="bullet">

<it>Opening</it> a file to use its contents</entry>
<entry level="1" type="bullet">

<it>Reading</it> or <it>updating</it> the contents</entry>
<entry level="1" type="bullet">

<it>Committing</it> updated contents to durable storage</entry>
<entry level="1" type="bullet">

<it>Closing</it> the file, thereby losing access until it is opened again</entry>
</list>
</p>

</sec>
<sec>
<st>
Identifying and organizing files</st>
<p>

<image location="right" width="200px" src="FileFolders.svg" type="thumb">
<caption>

Files and folders arranged in a hierarchy
</caption>
</image>

In modern computer systems, files are typically accessed using names (<link xlink:type="simple" xlink:href="../542/351542.xml">
filename</link>s).  In some operating systems, the name is associated with the file itself. In others, the file is anonymous, and is pointed to by links that have names. In the latter case, a user can identify the name of the link with the file itself, but this is a false analogue, especially where there exists more than one link to the same file.</p>
<p>

Files (or links to files) can be located in directories. However, more generally, a <link xlink:type="simple" xlink:href="../027/5515027.xml">
directory</link> can contain either a list of files or a list of links to files.  Within this definition, it is of paramount importance that the term "file" includes directories.  This permits the existence of directory hierarchies, i.e., directories containing subdirectories.  A name that refers to a file within a directory must be unique. In other words, there must be no identical names within a directory.  However, in some operating systems, a name may include a specification of type that means a directory can contain an identical name for more than one type of object such as a directory and a file.</p>
<p>

In environments in which a file is named, a file's name and the path to the file's directory must uniquely identify it among all other files in the computer systemâ€”no two files can have the same name and path.  Where a file is anonymous, named references to it will exist within a namespace.  In most cases, any name within the namespace will refer to exactly zero or one file.  However, any file may be represented within any namespace by zero, one or more names.</p>
<p>

Any string of characters may or may not be a well-formed name for a file or a link depending upon the context of application. Whether or not a name is well-formed depends on the type of computer system being used. Early computers permitted only a few letters or digits in the name of a file, but modern computers allow long names (some up to 255) containing almost any combination of unicode letters or unicode digits, making it easier to understand the purpose of a file at a glance. Some computer systems allow file names to contain spaces; others do not. Case-sensitivity of file names is determined by the <link xlink:type="simple" xlink:href="../280/1010280.xml">
file system</link>. Unix file systems are usually case sensitive and allow user-level applications to create files whose names differ only in the case of characters. <link xlink:type="simple" xlink:href="../890/18890.xml">
Microsoft Windows</link> supports multiple file systems, each with different policies regarding case-sensitivity. The common <link xlink:type="simple" xlink:href="../045/53045.xml">
FAT</link> file system can have multiple files whose names differ only in case if the user uses a <link xlink:type="simple" xlink:href="../162/748162.xml">
disk editor</link> to edit the file names in the <link>
directory entries</link>. User applications, however, will usually not allow the user to create multiple files with the same name but differing in case.</p>
<p>

Most computers organize files into hierarchies using folders, directories, or catalogs. The concept is the same irrespective of the terminology used. Each folder can contain an arbitrary number of files, and it can also contain other folders. These other folders are referred to as subfolders. Subfolders can contain still more files and folders and so on, thus building a tree-like structure in which one "master folder" (or "root folder" â€” the name varies from one operating system to another) can contain any number of levels of other folders and files. Folders can be named just as files can (except for the root folder, which often does not have a name). The use of folders makes it easier to organize files in a logical way.</p>
<p>

When a computer allows the use of folders, each file and folder has not only a name of its own, but also a path, which identifies the folder or folders in which a file or folder resides. In the path, some sort of special characterâ€”such as a slashâ€”is used to separate the file and folder names. For example, in the illustration shown in this article, the path <b>/Payroll/Salaries/Managers</b> uniquely identifies a file called <b>Managers</b> in a folder called <b>Salaries</b>, which in turn is contained in a file called <b>Payroll</b>. The folder and file names are separated by slashes in this example; the topmost or root folder has no name, and so the path begins with a slash (if the root folder had a name, it would precede this first slash).</p>
<p>

Many (but not all) computer systems use <link xlink:type="simple" xlink:href="../957/147957.xml">
extensions</link> in file names to help identify what they contain, also known as the file type. On Windows computers, extensions consist of a dot (period) at the end of a file name, followed by a few letters to identify the type of file. An extension of <b>.txt</b> identifies a text file; a <b>.doc</b> extension identifies any type of document or documentation, commonly in the <software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../287/20287.xml">
Microsoft Word</link></software>
 <link xlink:type="simple" xlink:href="../600/18933600.xml">
file format</link>; <link xlink:type="simple" xlink:href="../479/188479.xml">
and so on</link>. Even when extensions are used in a computer system, the degree to which the computer system recognizes 
and heeds them can vary; in some systems, they are required, while in other systems, they are completely ignored if they are present.</p>

</sec>
<sec>
<st>
Protecting files</st>
<p>

Many modern computer systems provide methods for protecting files against accidental and deliberate damage. Computers that allow for multiple users implement <link xlink:type="simple" xlink:href="../955/1347955.xml">
file permissions</link> to control who may or may not modify, delete, or create files and folders. A given user may be granted only permission to modify a file or folder, but not to delete it; or a user may be given permission to create files or folders, but not to delete them. Permissions may also be used to allow only certain users to see the contents of a file or folder. Permissions protect against unauthorized tampering or destruction of information in files, and keep private information confidential by preventing unauthorized users from seeing certain files.</p>
<p>

Another protection mechanism implemented in many computers is a <it>read-only flag.</it> When this flag is turned on for a file (which can be accomplished by a computer program or by a human user), the file can be examined, but it cannot be modified. This flag is useful for critical information that must not be modified or erased, such as special files that are used only by internal parts of the computer system. Some systems also include a <it>hidden flag</it> to make certain files invisible; this flag is used by the computer system to hide essential system files that users should not alter.</p>

</sec>
<sec>
<st>
Storing files</st>
<p>

The discussion above describes a file as a concept presented to a user or a high-level operating system.  However, any file that has any useful purpose, outside of a thought experiment, must have some physical manifestation. That is, a file (an abstract concept) in a real computer system must have a real physical analogue if it is to exist at all. </p>
<p>

In physical terms, most computer files are stored on some type of data storage device. For example, there is a <it><link xlink:type="simple" xlink:href="../777/13777.xml">
hard disk</link></it>, from which most <link xlink:type="simple" xlink:href="../194/22194.xml">
operating system</link>s run and on which most store their files.  Hard discs are the most ubiquitous form of <link xlink:type="simple" xlink:href="../629/780629.xml">
non-volatile</link> storage at the start of the 21st century.  Where files contain only temporary information, they may be stored in <link xlink:type="simple" xlink:href="../847/25847.xml">
RAM</link>.</p>
<p>

In Unix-like operating systems, many files have no direct association with a physical storage device: <link xlink:type="simple" xlink:href="../184/305184.xml">
/dev/null</link> is a prime example, as are just about all files under /dev, /proc and /sys.  These can be accessed as files in user space. They are really virtual files that exist, in reality, as objects within the operating system kernel.</p>
<p>

Computer files may be stored on magnetic tape. Files can also be stored on other media in some cases, such as writeable <it><link xlink:type="simple" xlink:href="../429/6429.xml">
compact disc</link>s</it>, <it><link xlink:type="simple" xlink:href="../498/11014498.xml">
Digital Versatile Disc</link>s</it>, <it><link xlink:type="simple" xlink:href="../025/278025.xml">
Zip drive</link>s,</it> <it><artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<medium wordnetid="106254669" confidence="0.8">
<link xlink:type="simple" xlink:href="../414/400414.xml">
USB flash drive</link></medium>
</device>
</instrumentality>
</artifact>
s,</it> etc.</p>

</sec>
<sec>
<st>
Backing up files</st>
<p>

When computer files contain information that is extremely important, a <it><link xlink:type="simple" xlink:href="../867/533867.xml">
back-up</link></it> process is used to protect against disasters that might destroy the files. Backing up files simply means making copies of the files in a separate location so that they can be restored if something happens to the computer, or if they are deleted accidentally.</p>
<p>

There are many ways to back up files. Most computer systems provide utility programs to assist in the back-up process, which can become very time-consuming if there are many files to safeguard. Files are often copied to removable media such as writable CDs or cartridge tapes. Copying files to another hard disk in the same computer protects against failure of one disk, but if it is necessary to protect against failure or destruction of the entire computer, then copies of the files must be made on other media that can be taken away from the computer and stored in a safe, distant location.</p>
<p>

The Grandfather-Father-Son method automatically makes three back ups, the grandfather file is the oldest copy of the file and the son is the current copy.</p>

</sec>
<sec>
<st>
File systems and file managers</st>
<p>

The way a computer organizes, names, stores and manipulates files is globally referred to as its <it><link xlink:type="simple" xlink:href="../280/1010280.xml">
file system</link>.</it> Most computers have at least one file system. Some computers allow the use of several different file systems. For instance, on newer MS Windows computers, the older FAT-type file systems of <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../027/20027.xml">
MS-DOS</link></O>
 and old versions of Windows are supported, in addition to the <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../184/39184.xml">
NTFS</link></instrumentality>
</artifact>
</system>
 file system that is the normal file system for recent versions of Windows. Each system has its own advantages and disadvantages. Standard FAT allow only eight-character file names (plus a three-character extension) with no spaces, for example, whereas NTFS allows much longer names that can contain spaces. You can call a file <b>Payroll records</b> in NTFS, but in FAT you would be restricted to something like <b>payroll.dat</b> (unless you were using VFAT, a FAT extension allowing long file names).</p>
<p>

<link xlink:type="simple" xlink:href="../382/11382.xml">
File manager</link> programs are utility programs that allow you to manipulate files directly. They allow you to move, create, delete and rename files and folders, although they do not actually allow you to read the contents of a file or store information in it. Every computer system provides at least one file-manager program for its native file system. Under Windows, the most commonly used file manager program is Windows Explorer.</p>

</sec>
<sec>
<st>
History</st>
<p>

<image location="right" width="150px" src="PunchCardDecks.agr.jpg" type="thumb">
<caption>

A <link xlink:type="simple" xlink:href="../420/24420.xml">
punched card</link> file
</caption>
</image>

<image location="right" width="150px" src="BRL61-IBM_305_RAMAC.jpeg" type="thumb">
<caption>

The twin <link xlink:type="simple" xlink:href="../472/Species_8472.xml">
disk files</link> of an <link xlink:type="simple" xlink:href="../300/865300.xml">
IBM 305</link> system
</caption>
</image>

The word "file" appears in the context of computer storage as early as <link xlink:type="simple" xlink:href="../575/34575.xml">
1952</link>, referring to information stored on <link xlink:type="simple" xlink:href="../420/24420.xml">
punched card</link>s.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref> In early usage people regarded the underlying hardware (rather than the contents) as a file. For example, the <artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<medium wordnetid="106254669" confidence="0.8">
<link xlink:type="simple" xlink:href="../326/861326.xml">
IBM 350</link></medium>
</device>
</instrumentality>
</artifact>
 disk drives were called "disk files."<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%222%22])">2</ref> Systems like the 1962 <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../141/254141.xml">
Compatible Time-Sharing System</link></O>
 featured file systems, which gave the appearance of several "files" on one storage device, leading to the modern usage of the term. File names in CTSS had two parts, a user-readable "primary name" and a "secondary name" indicating the file type.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%223%22])">3</ref><ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%224%22])">4</ref> This convention remains in use by several operating systems today, including <link xlink:type="simple" xlink:href="../890/18890.xml">
Microsoft Windows</link>. Although the current term "<link xlink:type="simple" xlink:href="../216/1680216.xml">
register file</link>" shows the early concept of files, it has largely disappeared.</p>

</sec>
<sec>
<st>
See also</st>
<p>

<list>
<entry level="1" type="bullet">

<system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../667/313667.xml">
Block (data storage)</link></instrumentality>
</artifact>
</system>
</entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../356/1015356.xml">
Computer file management</link></entry>
<entry level="1" type="bullet">

<system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../786/1052786.xml">
File copying</link></instrumentality>
</artifact>
</system>
</entry>
<entry level="1" type="bullet">

<system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../517/1252517.xml">
File deletion</link></instrumentality>
</artifact>
</system>
</entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../027/5515027.xml">
File directory</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../382/11382.xml">
File manager</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../542/351542.xml">
File name</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../327/2608327.xml">
File size</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../280/1010280.xml">
File system</link></entry>
<entry level="1" type="bullet">

<link>
Flat file</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../997/5788997.xml">
Soft copy</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../078/1911078.xml">
Object composition</link></entry>
</list>
</p>

</sec>
<sec>
<st>
Notes</st>

<p>

<reflist>
<entry id="1">
Robert S. Casey, et al. <it>Punched Cards: Their Applications to Science and Industry</it>, 1952. ISBN.</entry>
<entry id="2">
Martin H. Weik. Ballistic Research Laboratories Report #1115. March 1961. <weblink xlink:type="simple" xlink:href="http://ed-thelen.org/comp-hist/BRL61-ibm03.html#IBM-305-RAMAC">
pp. 314-331</weblink>.</entry>
<entry id="3">
Fernando J. CorbatÃ³ et al. "<weblink xlink:type="simple" xlink:href="http://larch-www.lcs.mit.edu:8001/~corbato/sjcc62/">
An Experimental Time-Sharing System</weblink>." May 3, 1962.</entry>
<entry id="4">
Jerome H. Saltzer <it><weblink xlink:type="simple" xlink:href="http://www.lcs.mit.edu/publications/pubs/pdf/MIT-LCS-TR-016.pdf">
CTSS Technical Notes</weblink></it>. Project MIT-LCS-TR016</entry>
</reflist>
</p>

</sec>
<sec>
<st>
External links and references</st>
<p>

<list>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.file-extensions.org/">
File-extensions.org</weblink> Large list of file extensions.</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.filestuff.co.uk/">
File Extensions</weblink> File extensions database.</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.fileinfo.net/">
FileInfo.net</weblink> â€” The File Extensions Resource</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://dotwhat.net/">
Dot What!?</weblink> Detailed information on file extensions and the programs that use them.</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://extensions.pndesign.cz/">
File Extension database</weblink> List of file extensions.</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://filext.com/">
FILExt â€” The File Extension Source</weblink> â€” Site for looking up file extensions.</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.pcreview.co.uk/startup/">
Startup Files</weblink> â€” Windows Startup Files Information.</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://file-extension.net/seeker/">
File Extension Seeker</weblink> â€” File extensions websites search engine.</entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.file.net/">
File.net</weblink> â€” Windows Files Information.</entry>
</list>
</p>


</sec>
</bdy>
</system>
</article>
