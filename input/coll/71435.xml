<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 15:51:16[mciao0827] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<physical_entity  confidence="0.8" wordnetid="100001930">
<person  confidence="0.8" wordnetid="100007846">
<model  confidence="0.8" wordnetid="110324560">
<artifact  confidence="0.8" wordnetid="100021939">
<instrumentality  confidence="0.8" wordnetid="103575240">
<assistant  confidence="0.8" wordnetid="109815790">
<device  confidence="0.8" wordnetid="103183080">
<worker  confidence="0.8" wordnetid="109632518">
<causal_agent  confidence="0.8" wordnetid="100007347">
<machine  confidence="0.8" wordnetid="103699975">
<header>
<title>Universal Turing machine</title>
<id>71435</id>
<revision>
<id>236062475</id>
<timestamp>2008-09-03T17:20:57Z</timestamp>
<contributor>
<username>Kbdank71</username>
<id>197953</id>
</contributor>
</revision>
<categories>
<category>Computational models</category>
<category>Educational abstract machines</category>
<category>Alan Turing</category>
<category>Theoretical computer science</category>
</categories>
</header>
<bdy>

<indent level="1">

<it>This article is a supplement to the article <invention wordnetid="105633385" confidence="0.8">
<know-how wordnetid="105616786" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<link xlink:type="simple" xlink:href="../403/30403.xml">
Turing machine</link></method>
</know-how>
</invention>
.</it>
</indent>

<person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../208/1208.xml">
Alan Turing</link></scientist>
</person>
's "universal computing machine" (alternately "universal machine", "machine U", "U") is the name given by him (1936-1937) to his model of an all-purpose "a-machine" (computing machine) that could "run" any arbitrary (but well-formed) sequence of instructions called "quintuples". This model is considered by some (e.g., Davis (2000)) to be the origin of the "stored program computer" -- used by <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../942/15942.xml">
John von Neumann</link></scientist>
</person>
 (1946) for his "Electronic Computing Instrument" that now bears von Neumann's name: the <link xlink:type="simple" xlink:href="../091/478091.xml">
von Neumann architecture</link>.<p>

This machine as a model of computation is now called the "Universal Turing machine". </p>

<sec>
<st>
Introduction</st>
<p>

<image location="right" width="500px" src="Turing_U_machine_1.JPG">
</image>
</p>
<p>

Every Turing machine computes a certain fixed <link xlink:type="simple" xlink:href="../577/23577.xml">
partial</link> <link xlink:type="simple" xlink:href="../338/1139338.xml">
computable function</link> from the input strings over its alphabet. In that sense it behaves like a computer with a fixed program. However, we can encode the action table of any Turing machine in a string. Thus we can construct a Turing machine that expects on its tape a string describing an action table followed by a string describing the input tape, and computes the tape that the encoded Turing machine would have computed. Turing described such a construction in some detail in his 1936 paper.</p>
<p>

In 1947, Turing said: It can be shown that a single special machine of that type can be made to do the work of all. It could in fact be made to work as a model of any other machine. The special machine may be called the universal machine.</p>

</sec>
<sec>
<st>
Stored-program computer</st>
<p>

Davis (<link xlink:type="simple" xlink:href="../548/34548.xml">
2000</link>) makes a persuasive argument that Turing's conception of what is now known as "the stored-program computer", of placing the "action table" -- the instructions for the machine -- in the same "memory" as the input data, strongly influenced <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../942/15942.xml">
John von Neumann</link></scientist>
</person>
's conception of the first discrete-symbol (as opposed to analog) computer -- the <computer wordnetid="103082979" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<machine wordnetid="103699975" confidence="0.8">
<link xlink:type="simple" xlink:href="../011/78011.xml">
EDVAC</link></machine>
</device>
</instrumentality>
</artifact>
</computer>
. Davis quotes <it>Time</it> magazine to this effect, that "everyone who taps at a keyboard... is working on an incarnation of a Turing machine," and that "John von Neumann [built] on the work of Alan Turing" (Davis (2000) p. 193 quoting <it>Time</it> magazine (<link xlink:type="simple" xlink:href="../586/20586.xml">
29 March</link>, <link xlink:type="simple" xlink:href="../553/34553.xml">
1999</link>)).</p>
<p>

Davis makes a case that Turing's <computer wordnetid="103082979" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<machine wordnetid="103699975" confidence="0.8">
<link xlink:type="simple" xlink:href="../735/988735.xml">
Automatic Computing Engine</link></machine>
</device>
</instrumentality>
</artifact>
</computer>
 (ACE) computer "anticipated" the notions of microprogamming (<link xlink:type="simple" xlink:href="../999/19999.xml">
microcode</link>) and <link xlink:type="simple" xlink:href="../672/3963672.xml">
RISC</link> processors (cf p. 188)). <link xlink:type="simple" xlink:href="../211/17211.xml">
Knuth</link> (<link xlink:type="simple" xlink:href="../751/34751.xml">
1973</link>, <link xlink:type="simple" xlink:href="../655/34655.xml">
1968</link>) cites Turing's work on the ACE computer as designing "hardware to facilitate subroutine linkeage" (p. 225); Davis (2000) also references this work as Turing's use of a hardware "stack" (cf footnote 18 page 237).           </p>
<p>

As the Turing Machine was encouraging the construction of <link xlink:type="simple" xlink:href="../457/7878457.xml">
computers</link>, the UTM was encouraging the development of the fledgling <link xlink:type="simple" xlink:href="../323/5323.xml">
computer science</link>s. An early, if not the very first, assembler was proposed "by a young hot-shot programmer" for the EDVAC (Davis 2000, p. 192). Von Neumann's "first serious program ... [was] to simply sort data efficiently" (Davis 2000, p. 184). Knuth observes that the subroutine return embedded in the program itself rather than in special registers is attributable to von Neumann and Goldstine (in particular: Burks, Goldstine, von Neumann (<link xlink:type="simple" xlink:href="../631/34631.xml">
1946</link>), <it>Preliminary discussion of the logical design of an electronic computing instrument</it>, reprinted in Bell and Newell 1971). Knuth furthermore states that
<indent level="1">

"The first interpretive routine may be said to be the "Universal Turing Machine" ... Interpretive routines in the conventional sense were mentioned by John Mauchly in his lectures at the Moore School in 1946 ... Turing took part in this development also; interpretive systems for the Pilot ACE computer were written under his direction" (Knuth p. 226).
</indent>

Davis (2000) briefly mentions operating systems and compilers as outcomes of the notion of program-as-data (p. 185).</p>
<p>

Some, however, might raise issues with this assessment. At the time (mid-1940's to mid-1950's) a relatively small cadre of researchers were intimately involved with the architecture of the new "digital computers". Wang (<link xlink:type="simple" xlink:href="../982/34982.xml">
1954</link>), a young researcher at this time, made the following observation:
<indent level="1">

Turing's theory of computable functions antedated but has not much influenced the extensive actual construction of digital computers. These two aspects of theory and practice have been developed almost entirely independently of each other. The main reason is undoubtedly that logicians are interested in questions radically different from those with which the applied mathematicians and electrical engineers are primarily concerned. It cannot, however, fail to strike one as rather strange that often the same concepts are expressed by very different terms in the two developments." (Wang (<link xlink:type="simple" xlink:href="../982/34982.xml">
1954</link>, <link xlink:type="simple" xlink:href="../606/34606.xml">
1957</link>), p. 63)
</indent>

Wang hoped that his paper would "connect the two approaches." Indeed, Minsky (<link xlink:type="simple" xlink:href="../749/34749.xml">
1967</link>) confirms this: "that the first formulation of Turing-machine theory in computer-like models appears in Wang (<link xlink:type="simple" xlink:href="../606/34606.xml">
1957</link>)" (Minsky p. 200). Minsky goes on to demonstrate <link xlink:type="simple" xlink:href="../406/3246406.xml">
Turing equivalence</link> of a <link xlink:type="simple" xlink:href="../543/7583543.xml">
counter machine</link>. </p>
<p>

With respect to the reduction of computers to simple <link xlink:type="simple" xlink:href="../406/3246406.xml">
Turing equivalent</link> models (and vice versa), Wang 's (1957) title of "the first" is open to debate. While both Minsky's paper of 1961 and Wang's paper of 1957 are cited by Shepherdson and Sturgis (<link xlink:type="simple" xlink:href="../648/34648.xml">
1963</link>), they also cite and summarize in some detail the work of European mathematicians Kaphenst (<link xlink:type="simple" xlink:href="../662/34662.xml">
1959</link>), Ershov (1959), and Péter (<link xlink:type="simple" xlink:href="../953/34953.xml">
1958</link>). The names of mathematicians Hermes (<link xlink:type="simple" xlink:href="../982/34982.xml">
1954</link>, <link xlink:type="simple" xlink:href="../851/34851.xml">
1955</link>, <link xlink:type="simple" xlink:href="../659/34659.xml">
1961</link>) and Kaphenst (1959) appear in the bibliographies of both Sheperdson-Sturgis (<link xlink:type="simple" xlink:href="../648/34648.xml">
1963</link>) and Elgot-Robinson (<link xlink:type="simple" xlink:href="../659/34659.xml">
1961</link>). Two other names of importance are Canadian researchers Melzak (1961) and Lambek (1961). For much more see <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<model wordnetid="110324560" confidence="0.8">
<assistant wordnetid="109815790" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../864/6263864.xml">
Turing machine equivalents</link></causal_agent>
</worker>
</assistant>
</model>
</person>
</physical_entity>
; references can be found at <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<model wordnetid="110324560" confidence="0.8">
<assistant wordnetid="109815790" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../218/505218.xml">
Register machine</link></causal_agent>
</worker>
</assistant>
</model>
</person>
</physical_entity>
.</p>


</sec>
<sec>
<st>
Mathematical theory</st>
<p>

With this encoding of action tables as strings it becomes possible in principle for Turing machines to answer questions about the behaviour of other Turing machines. Most of these questions, however, are <link xlink:type="simple" xlink:href="../795/54795.xml">
undecidable</link>, meaning that the function in question cannot be calculated mechanically. For instance, the problem of determining whether any particular Turing machine will halt on a particular input, or on all inputs, known as the <link xlink:type="simple" xlink:href="../668/13668.xml">
Halting problem</link>, was shown to be, in general, undecidable in Turing's original paper. <statement wordnetid="106722453" confidence="0.8">
<message wordnetid="106598915" confidence="0.8">
<theorem wordnetid="106752293" confidence="0.8">
<proposition wordnetid="106750804" confidence="0.8">
<link xlink:type="simple" xlink:href="../852/25852.xml">
Rice's theorem</link></proposition>
</theorem>
</message>
</statement>
 shows that any non-trivial question about the behaviour or output of a Turing machine is undecidable.</p>
<p>

A universal Turing machine can calculate any <link xlink:type="simple" xlink:href="../264/5987264.xml">
recursive function</link>, decide any <link xlink:type="simple" xlink:href="../874/53874.xml">
recursive language</link>, and accept any <link xlink:type="simple" xlink:href="../789/54789.xml">
recursively enumerable language</link>. According to the <link xlink:type="simple" xlink:href="../854/6854.xml">
Church-Turing thesis</link>, the problems solvable by a universal Turing machine are exactly those problems solvable by an <it>algorithm</it> or an <it>effective method of computation</it>, for any reasonable definition of those terms.  For these reasons, a universal Turing machine serves as a standard against which to compare computational systems, and a system that can simulate a universal Turing machine is called <link xlink:type="simple" xlink:href="../621/30621.xml">
Turing complete</link>.</p>
<p>

An abstract version of the universal Turing machine is the <link xlink:type="simple" xlink:href="../836/2652836.xml">
universal function</link>, a computable function which can be used to calculate any other computable function. The <link xlink:type="simple" xlink:href="../836/2652836.xml">
utm theorem</link> proves the existence of such a function.</p>
<p>

When Alan Turing came up with the idea of a universal machine he had in mind the simplest computing model powerful enough to calculate all possible functions which can be calculated. <scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../693/5693.xml">
Claude Shannon</link></scientist>
 first explicitly posed the question of finding the smallest possible universal Turing machine when in 1956 he showed that two symbols were sufficient, so long as enough states were used. Shannon himself proved that it was always possible to exchange states by symbols.</p>
<p>

After some time, the smallest known universal Turing machine was due to <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../639/19639.xml">
Marvin Minsky</link></scientist>
</person>
 who in 1962 discovered a 7-state 4-symbol universal Turing machine using 2-tag systems. Applying Shannon's result to Minsky's UTM upon conversion to a 2-symbol machine Minsky machine would require 43 states.</p>
<p>

Other smaller universal Turing machines have since been found. If we denote by (m,n) the class of UTMs with m states and n symbols the following tuples were found by Yurii Rogozhin in 1996: (24, 2), (10, 3), (7, 4), (5, 5), (4, 6), (3, 10), and (2, 18). In 1985, <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../469/52469.xml">
Stephen Wolfram</link></scientist>
</person>
 conjectured a 2-state 5-symbol universal Turing machine. This conjectured was proved by <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<mathematician wordnetid="110301261" confidence="0.8">
<link xlink:type="simple" xlink:href="../310/145310.xml">
Matthew Cook</link></mathematician>
</scientist>
</causal_agent>
</person>
</physical_entity>
 working as a research assistant to Stephen Wolfram. The model, also known as <idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<rule wordnetid="105846054" confidence="0.8">
<link xlink:type="simple" xlink:href="../028/491028.xml">
Rule 110</link></rule>
</concept>
</idea>
 Elementary Cellular Automaton had, at the time, the smallest product (2,5)=10 of any known universal Turing machine. According to Wolfram other smaller UTMs should exist and he proposed a <invention wordnetid="105633385" confidence="0.8">
<knowledge_domain wordnetid="105999266" confidence="0.8">
<discipline wordnetid="105996646" confidence="0.8">
<mathematics wordnetid="106000644" confidence="0.8">
<science wordnetid="105999797" confidence="0.8">
<link xlink:type="simple" xlink:href="../858/13899858.xml">
2-state 3-symbol Turing Machine</link></science>
</mathematics>
</discipline>
</knowledge_domain>
</invention>
 as a candidate. On Oct 24, 2007, Wolfram announced the Turing equivalence of the system had been proven by <person wordnetid="100007846" confidence="0.9638700866880419">
<link xlink:type="simple" xlink:href="../003/13923003.xml">
Alex Smith</link></person>
 -- an undergraduate studying electronic and computer engineering at the <university wordnetid="108286163" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../935/209935.xml">
University of Birmingham</link></university>
 -- responding to a contest established by Wolfram.<weblink xlink:type="simple" xlink:href="http://blog.wolfram.com/2007/10/the_prize_is_won_the_simplest.html">
http://blog.wolfram.com/2007/10/the_prize_is_won_the_simplest.html</weblink> However, on <link>
2007-10-29</link> <physical_entity wordnetid="100001930" confidence="0.8">
<peer wordnetid="109626238" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<intellectual wordnetid="109621545" confidence="0.8">
<colleague wordnetid="109935990" confidence="0.8">
<alumnus wordnetid="109786338" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<scholar wordnetid="110557854" confidence="0.8">
<associate wordnetid="109816771" confidence="0.8">
<link xlink:type="simple" xlink:href="../977/1597977.xml">
Vaughan Pratt</link></associate>
</scholar>
</scientist>
</causal_agent>
</alumnus>
</colleague>
</intellectual>
</person>
</peer>
</physical_entity>
 of <university wordnetid="108286163" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../977/26977.xml">
Stanford University</link></university>
 announced that he discovered a flaw in the proof.<weblink xlink:type="simple" xlink:href="http://cs.nyu.edu/pipermail/fom/2007-October/012156.html">
http://cs.nyu.edu/pipermail/fom/2007-October/012156.html</weblink> Wolfram Research disputes Pratt's interpretation.<weblink xlink:type="simple" xlink:href="http://forum.wolframscience.com/showthread.php?s=&amp;threadid=1472">
http://forum.wolframscience.com/showthread.php?s=&amp;threadid=1472</weblink></p>

</sec>
<sec>
<st>
Example of universal-machine coding</st>
<p>

<indent level="1">

<it>For those who would undertake the challenge of designing a UTM exactly as Turing specified see the article in Copeland (2004) written by Davies (pp. 103ff). Davies corrects the errors in the original and shows what a sample run would look like. He claims to have successfully run a (somewhat simplified) simulation.</it>
</indent>

The following example is taken from Turing (1936). For more about this example see the page <invention wordnetid="105633385" confidence="0.8">
<know-how wordnetid="105616786" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<link xlink:type="simple" xlink:href="../511/6246511.xml">
Turing machine examples</link></method>
</know-how>
</invention>
.</p>
<p>

Turing used seven symbols { A, C, D, R, L, N, ; } to encode each 5-tuple; as described in the article <invention wordnetid="105633385" confidence="0.8">
<know-how wordnetid="105616786" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<link xlink:type="simple" xlink:href="../403/30403.xml">
Turing machine</link></method>
</know-how>
</invention>
, his 5-tuples are only of types N1, N2, and N3. The number of each "m-configuration" (instruction, state) is represented by "D" followed by a unary string of A's, i.e. "q3" = DAAA. In a similar manner he encodes the symbols blank as "D", the symbol "0" is "DC", the symbol "1" as DCC, etc. The symbols "R", "L", and "N" remain as is.</p>
<p>

After encoding each 5-tuple is then "assembled" into a string in order as shown in the following table:   </p>
<p>

<table class="wikitable">
<row style="font-size:9pt" align="center" valign="bottom">
<col width="54.6" Height="57">
Current m-configuration</col>
<col width="36.6">
Tape symbol</col>
<col width="47.4">
Print-operation</col>
<col width="28.8">
Tape-motion</col>
<col width="38.4">
Final m-configuration</col>
<col width="7.2"></col>
<col width="43.8">
Current m-configuration code</col>
<col width="31.2">
Tape symbol code</col>
<col width="27">
Print-operation code</col>
<col width="38.4">
Tape-motion code</col>
<col width="55.2">
Final m-configuration code</col>
<col width="87">
5-tuple assembled code</col>
</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col Height="11.4"></col>











</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col Height="11.4">
q1</col>
<col>
blank</col>
<col>
P0</col>
<col>
R</col>
<col>
q2</col>

<col>
DA</col>
<col>
D</col>
<col>
DC</col>
<col>
R</col>
<col>
DAA</col>
<col>
DADDCRDAA</col>
</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col Height="11.4">
q2</col>
<col>
blank</col>
<col>
E</col>
<col>
R</col>
<col>
q3</col>

<col>
DAA</col>
<col>
D</col>
<col>
D</col>
<col>
R</col>
<col>
DAAA</col>
<col>
DAADDRDAAA</col>
</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col Height="11.4">
q3</col>
<col>
blank</col>
<col>
P1</col>
<col>
R</col>
<col>
q4</col>

<col>
DAAA</col>
<col>
D</col>
<col>
DCC</col>
<col>
R</col>
<col>
DAAAA</col>
<col>
DAAADDCCRDAAAA</col>
</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col Height="11.4">
q4</col>
<col>
blank</col>
<col>
E</col>
<col>
R</col>
<col>
q1</col>

<col>
DAAAA</col>
<col>
D</col>
<col>
D</col>
<col>
R</col>
<col>
DA</col>
<col>
DAAAADDRDA</col>
</row>
</table>
</p>
<p>

Finally, the codes for all four 5-tuples are strung together into a code started by ";" and separated by ";" i.e.:</p>
<p>

<indent level="1">

 <b>;</b>DADDCRDAA<b>;</b>DAADDRDAAA<b>;</b>DAAADDCCRDAAAA<b>;</b>DAAAADDRDA
</indent>

This code he placed on alternate squares -- the "F-squares" -- leaving the "E-squares" (those liable to erasure) empty. The final assembly of the code on the tape for the U-machine consists of placing two special symbols ("e") one after the other, then the code separated out on alternate squares, and lastly the double-colon symbol "<b>::</b>" (blanks shown here with "." for clarity):   </p>
<p>

<indent level="1">

ee.<b>;</b>.D.A.D.D.C.R.D.A.A.<b>;</b>.D.A.A.D.D.R.D.A.A.A.<b>;</b>.D.A.A.A.D.D.C.C.R.D.A.A.A.A.<b>;</b>.D.A.A.A.A.D.D.R.D.A.<b>::</b>......
</indent>

The U-machine's action-table (state-transition table) is responsible for decoding the symbols. Turing's action table keeps track of its place with markers "u", "v", "x", "y", "z" by placing them in "E-squares" to the right of "the marked symbol" -- for example, to mark the current instruction <b>z</b> is placed to the right of ";"  <b>x</b> is keeping the place with respect to the current "m-configuration" DAA. The U-machine's action table will shuttle these symbols around (erasing them and placing them in different locations) as the computation progresses:</p>
<p>

<indent level="1">

ee.<b>;</b> .D.A.D.D.C.R.D.A.A. <b>;</b> <b>z</b>D.A.A<b>x</b>D.D.R.D.A.A.A.<b>;</b>.D.A.A.A.D.D.C.C.R.D.A.A.A.A.<b>;</b>.D.A.A.A.A.D.D.R.D.A.<b>::</b>......
</indent>

Turing's action-table for his U-machine is very involved.</p>
<p>

A number of other commentators (notably Penrose 1990) provide examples of ways to encode instructions for the Universal machine. As does Penrose, most commentators use only binary symbols i.e. only symbols { 0, 1 }. Penrose goes further and writes out his entire U-machine code (pages 71-73 -- he asserts that it truly is a U-machine code), an enormous number that spans almost 2 full pages of 1's and 0's. For readers interested in simpler encodings for the <link xlink:type="simple" xlink:href="../147/3688147.xml">
Post-Turing machine</link> the discussion of Davis in (Steen, 1980, p.251ff) may be useful.</p>

</sec>
<sec>
<st>
References</st>
<p>

<list>
<entry level="1" type="bullet">

 <cite id="CITEREFBoolosBurgessJeffrey2002" style="font-style:normal"><link>
Boolos, George</link>; Burgess, John&#32;&amp;&#32;<link>
Jeffrey, Richard</link>&#32;(2002),&#32;<it>Computability and Logic</it>&#32;(4th ed.), Cambridge UK: <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../199/73199.xml">
Cambridge University Press</link></company>
, ISBN 0-521-00758-5 (pb.)</cite>&nbsp;</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 <cite id="CITEREFCopeland2004" style="font-style:normal"><link>
Copeland, Jack</link>, ed.&#32;(2004),&#32;<it>The Essential Turing: Seminal Writings in Computing, Logic, Philosophy, Artificial Intelligence, and Artificial Life plus The Secrets of Enigma</it>, Oxford UK: <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../518/48518.xml">
Oxford University Press</link></company>
, ISBN 0-19-825079-7</cite>&nbsp;</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 <cite id="CITEREFDavis1958" style="font-style:normal"><link>
Davis, Martin</link>&#32;(1958),&#32;<it>Computability and Unsolvability</it>, New York NY: McGraw-Hill Book Company</cite>&nbsp;. On pages 12-20 he gives examples of 5-tuple tables for Addition, The Successor Function, Subtraction (x &amp;gt; = y), Proper Subtraction (0 if x  y), The Identity Function and various identity functions, and Multiplication.</entry>
<entry level="1" type="bullet">

 <cite id="CITEREFDavis1965" style="font-style:normal"><link>
Davis, Martin</link>, ed.&#32;(1965),&#32;<it>The Undecidable</it>, Hewlett NY: Raven Press</cite>&nbsp;</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 <cite id="CITEREFDavis1980" style="font-style:normal"><link>
Davis, Martin</link>&#32;(1980),&#32;"What is Computation?", in&#32;<link>
Steen, Lynn Arthur</link>,&#32;<it>Mathematics Today: Twelve Informal Essays</it>, New York NY: Vintage Books (Random House), ISBN 978-0394745039</cite>&nbsp;.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 <cite id="CITEREFDavis2000" style="font-style:normal"><link>
Davis, Martin</link>&#32;(2000),&#32;<it>Engines of Logic: Mathematicians and the origin of the Computer</it>&#32;(1st ed.), New York NY: W. W. Norton &amp; Company, ISBN 0-393-32229-7 (pb.)</cite>&nbsp;</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 <cite id="CITEREFHerken" style="font-style:normal"><link>
Herken, Rolf</link>,&#32;<it>The Universal Turing Machine – A Half-Century Survey</it>, <link xlink:type="simple" xlink:href="../949/1418949.xml">
Springer Verlag</link>, ISBN 3-211-82637-8</cite>&nbsp;</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 <cite id="CITEREFKleene1952" style="font-style:normal"><link>
Kleene, Stephen</link>&#32;(1952),&#32;<it>Introduction to Metamathematics</it>, Amsterdam Netherlands: North-Holland Publishing Company</cite>&nbsp;, 10th impression (with corrections of 6th reprint 1971).  Graduate level text; most of Chapter XIII <it>Computable functions</it> is on Turing machine proofs of computability of recursive functions, etc.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 <cite id="CITEREFMinsky1962" style="font-style:normal"><link>
Minsky, Marvin</link>&#32;(1962),&#32;<it>Size and Structure of Universal Turing Machines using Tag Systems, Recursive Function Theory</it>,&#32;<it>Proc. Symp. Pure Mathematics</it>&#32;(Providence RI: American Mathematical Society)&#32;<b>5</b>:  229-238</cite>&nbsp;</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 <cite id="CITEREFPenrose1999" style="font-style:normal"><link>
Penrose, Roger</link>&#32;(1999),&#32;<it><work wordnetid="104599396" confidence="0.8">
<product wordnetid="104007894" confidence="0.8">
<creation wordnetid="103129123" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<book wordnetid="106410904" confidence="0.8">
<publication wordnetid="106589574" confidence="0.8">
<link xlink:type="simple" xlink:href="../005/433005.xml">
The Emperor's New Mind</link></publication>
</book>
</artifact>
</creation>
</product>
</work>
</it>, Oxford UK: <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../518/48518.xml">
Oxford University Press</link></company>
, ISBN 0-19-286198-0 (pb.)</cite>&nbsp;</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 <cite id="CITEREFPost1936" style="font-style:normal"><link>
Post, Emil</link>&#32;(1936),&#32;<it>Finite Combinatory Processes - Formulation 1</it>,&#32;<it>Journal of Symbolic Logic</it>&#32;<b>1</b>:  103-105</cite>&nbsp;. Reprinted in <it>The Undecidable</it> pp.289ff.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 <cite id="CITEREFPost1947" style="font-style:normal"><link>
Post, Emil</link>&#32;(1947),&#32;<it>Recursive Unsolvability of a Problem of Thue</it>,&#32;<it>Journal of Symbolic Logic</it>&#32;<b>12</b>:  1-11</cite>&nbsp;. Reprinted in <it>The Undecidable</it> pp.293ff. In the Appendix of this paper Post comments on and gives corrections to  <cite class="inline">(<link xlink:type="simple" xlink:href="#xpointer(//cite[@id=%22CITEREF_Turing__1936%22])">
Turing   1936</link>)</cite>.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 <cite id="CITEREFRogozhin1998" style="font-style:normal"><link>
Rogozhin, Yurii</link>&#32;(1998),&#32;<weblink xlink:type="simple" xlink:href="http://web.archive.org/web/20050308141040/http://www.imt.ro/Romjist/Volum1/Vol1_3/turing.htm">
<it>A Universal Turing Machine with 22 States and 2 Symbols''</it></weblink>,&#32;<it>Romanian Journal Of Information Science and Technology</it>&#32;<b>1</b>(3):  259-265</cite>&nbsp;. (surveys known results about small universal Turing machines)</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 <cite id="CITEREFShannon1956" style="font-style:normal"><link>
Shannon, Claude</link>&#32;(1956),&#32;"A Universal Turing Machine with Two Internal States",&#32;<it>Automata Studies</it>, Princeton, NJ: Princeton University Press, pp. 157-165</cite>&nbsp;</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 <cite id="CITEREFTuring1936" style="font-style:normal"><link>
Turing, Alan</link>&#32;(1936),&#32;<weblink xlink:type="simple" xlink:href="http://www.abelard.org/turpap2/tp2-ie.asp">
<it>On Computable Numbers, With an Application to the Entscheidungsproblem''</it></weblink>,&#32;<it>Proceedings of the London Mathematical Society</it>&#32;<b>42</b>(2)</cite>&nbsp;  (and  <cite id="CITEREFTuring1937" style="font-style:normal">Turing, A.M.&#32;(1937),&#32;"On Computable Numbers, with an Application to the Entscheidungsproblem: A correction",&#32;<it>Proceedings of the London Mathematical Society</it>, 2&#32;<b>43</b>:  544-6</cite>&nbsp;).  Reprinted in <it>The Undecidable</it> pp.115-154.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 <cite id="CITEREFWolfram2002" style="font-style:normal"><link>
Wolfram, Stephen</link>&#32;(2002),&#32;<it><weblink xlink:type="simple" xlink:href="http://www.wolframscience.com/nksonline/toc.html">
A New Kind of Science</weblink></it>, <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../109/594109.xml">
Wolfram Research</link></company>
, pp. 706-714, ISBN 1-57955-008-8, </cite>&nbsp;</entry>
</list>
</p>


</sec>
</bdy>
</machine>
</causal_agent>
</worker>
</device>
</assistant>
</instrumentality>
</artifact>
</model>
</person>
</physical_entity>
</article>
