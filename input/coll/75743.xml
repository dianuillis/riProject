<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 15:52:09[mciao0827] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<O  confidence="0.9508927676800064" wordnetid="106832680">
<header>
<title>ICL VME</title>
<id>75743</id>
<revision>
<id>235903944</id>
<timestamp>2008-09-02T22:02:45Z</timestamp>
<contributor>
<username>Mhkay</username>
<id>405026</id>
</contributor>
</revision>
<categories>
<category>International Computers Limited</category>
<category>Operating systems</category>
</categories>
</header>
<bdy>
<template>
<name>Infobox OS</name>
<parameters>
<supported_platforms>
<platform wordnetid="103961939" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<surface wordnetid="104362025" confidence="0.8">
<horizontal_surface wordnetid="103536348" confidence="0.8">
<link xlink:type="simple" xlink:href="../049/2811049.xml">
ICL 2900 Series</link></horizontal_surface>
</surface>
</artifact>
</platform>
, <platform wordnetid="103961939" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<surface wordnetid="104362025" confidence="0.8">
<horizontal_surface wordnetid="103536348" confidence="0.8">
<link xlink:type="simple" xlink:href="../736/14180736.xml">
ICL Series 39</link></horizontal_surface>
</surface>
</artifact>
</platform>
 mainframes</supported_platforms>
<programmed_in>
<programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../588/11484588.xml">
S3</link></programming_language>
, <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../021/6021.xml">
C</link></programming_language>
</programmed_in>
<released>
mid-1970s</released>
<developer>
<company wordnetid="108058098" confidence="0.8">
<institution wordnetid="108053576" confidence="0.8">
<link xlink:type="simple" xlink:href="../789/515789.xml">
International Computers Limited</link></institution>
</company>
, <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../222/58222.xml">
Fujitsu</link></company>
</developer>
<name>
Virtual Machine Environment</name>
</parameters>
</template>


<indent level="1">

<it>This article is about the operating system. VME may also refer to the <standard wordnetid="107260623" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../281/148281.xml">
VMEbus</link></system_of_measurement>
</standard>
 computer bus.</it>
</indent>

<b>VME</b> (<it>Virtual Machine Environment</it>) is a <link xlink:type="simple" xlink:href="../266/20266.xml">
mainframe</link> <link xlink:type="simple" xlink:href="../194/22194.xml">
operating system</link> developed by the UK company <company wordnetid="108058098" confidence="0.8">
<institution wordnetid="108053576" confidence="0.8">
<link xlink:type="simple" xlink:href="../789/515789.xml">
International Computers Limited</link></institution>
</company>
 (ICL). Originally developed in the 1970s (as <b>VME/B</b>, later <b>VME 2900</b>) to drive ICL's (then) new <platform wordnetid="103961939" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<surface wordnetid="104362025" confidence="0.8">
<horizontal_surface wordnetid="103536348" confidence="0.8">
<link xlink:type="simple" xlink:href="../049/2811049.xml">
2900 Series</link></horizontal_surface>
</surface>
</artifact>
</platform>
 mainframes, the operating system is now known as <b>OpenVME</b> incorporating a <family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../642/31642.xml">
Unix</link></family>
 subsytem, and runs on <platform wordnetid="103961939" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<surface wordnetid="104362025" confidence="0.8">
<horizontal_surface wordnetid="103536348" confidence="0.8">
<link xlink:type="simple" xlink:href="../736/14180736.xml">
ICL Series 39</link></horizontal_surface>
</surface>
</artifact>
</platform>
 and Trimetra mainframe computers.<p>

ICL itself has been absorbed into the <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../222/58222.xml">
Fujitsu</link></company>
 group.</p>

<sec>
<st>
Origins</st>
<p>

The fundamental precept of the development program for the <link xlink:type="simple" xlink:href="../049/2811049.xml">
New Range</link> system started on the merger of ICT and English Electric was that it would feature a brand new operating system, VME. A number of different feasibility and design studies were carried out within ICL, all designated as VME/letter, with the three most notable being:</p>
<p>

<list>
<entry level="1" type="bullet">

 VME/B (originally System B), targeted at large processors such as the 2970/2980 and developed in <site wordnetid="108651247" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../574/411574.xml">
Kidsgrove</link></site>
, <county wordnetid="108546183" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../733/58733.xml">
Staffordshire</link></county>
 and <site wordnetid="108651247" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../171/1414171.xml">
West Gorton</link></site>
, <village wordnetid="108672738" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../206/20206.xml">
Manchester</link></village>
</entry>
<entry level="1" type="bullet">

 VME/K (originally System T), targeted at the mid-range systems such as the 2960 and developed at Bracknell after the original design for these small processors, System D, was dropped</entry>
<entry level="1" type="bullet">

 VME/T, which was never actually launched, but warrants a mention as it was conceived to support "fault tolerance", and predated the efforts of the successful American startup company <company wordnetid="108058098" confidence="0.8">
<institution wordnetid="108053576" confidence="0.8">
<link xlink:type="simple" xlink:href="../353/201353.xml">
Tandem Computers</link></institution>
</company>
 in this area.</entry>
</list>
</p>
<p>

The chief architect of VME/B was <person wordnetid="100007846" confidence="0.9508927676800064">
<professor wordnetid="110480730" confidence="0.9173553029164789">
<link xlink:type="simple" xlink:href="../858/17036858.xml">
Brian Warboys</link></professor>
</person>
, who subsequently became professor of software engineering at the <university wordnetid="108286163" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../266/83266.xml">
University of Manchester</link></university>
.  A number of influences can be seen in its design, for example <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../847/18847.xml">
Multics</link></O>
 and ICL's earlier <link xlink:type="simple" xlink:href="../278/1977278.xml">
George 3</link><ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref> operating system; however it was essentially designed from scratch.</p>

</sec>
<sec>
<st>
Comparisons</st>
<p>

VME was viewed as primarily competing with the <link xlink:type="simple" xlink:href="../294/29294.xml">
System/360</link> <link xlink:type="simple" xlink:href="../872/14872.xml">
IBM mainframe</link> as a commercial operating system, and adopted the <link xlink:type="simple" xlink:href="../170/12442170.xml">
EBCDIC</link> <link xlink:type="simple" xlink:href="../295/5295.xml">
character encoding</link>.</p>
<p>

As a creation of the mid-1970s, with no constraints to be compatible with earlier operating systems, VME is in many ways more modern in its architecture than today's <family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../642/31642.xml">
Unix</link></family>
 derivatives (Unix was designed in the 1960s) or <link xlink:type="simple" xlink:href="../890/18890.xml">
Microsoft Windows</link> (which started as an operating system for single-user computers, and still betrays those origins).</p>

</sec>
<sec>
<st>
Evolution</st>
<p>

In the 1980s the 2 VME lines were converged as "VME2900", which although presented to the customer base as a merger of VME/B and VME/K was in reality the VME/B base with a few selected features from VME/K grafted on. This provided the opportunity to drop some obsolescent features, which remained available to customers who needed them in the form of the "BONVME" option.</p>
<p>

The "2900" suffix was dropped at System Version 213 (SV213) when ICL launched Series 39 in 1985 as the successor to the original 2900 series; and the "Open" prefix was added after SV294 when VME became capable of hosting applications written originally for <family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../642/31642.xml">
Unix</link></family>
 through a <link xlink:type="simple" xlink:href="../445/598445.xml">
UNIX System V Release 3</link> based subsytem using the <message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<representation wordnetid="105926676" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<link xlink:type="simple" xlink:href="../586/586.xml">
ASCII</link></rule>
</direction>
</representation>
</protocol>
</message>
 character encoding adapted to run under VME.</p>
<p>

The most recent incarnations of VME run as a hosted subsystem, called <b><it>superNova</it></b>, within <link xlink:type="simple" xlink:href="../890/18890.xml">
Microsoft Windows</link>, or <link xlink:type="simple" xlink:href="../875/7612875.xml">
SUSE</link> or <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../778/556778.xml">
Red Hat Enterprise Linux</link></O>
 on <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../617/14617.xml">
Intel</link></company>
-based hardware.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%222%22])">2</ref></p>

</sec>
<sec>
<st>
Architecture</st>
<p>

VME is structured as a set of layers, each layer having access to resources at different levels of abstraction. Virtual resources provided by one layer are constructed from the virtual resources offered by the layer below. Access to the resources of each layer is controlled through a set of Access Levels: in order for a process to use a resource at a particular access level, it must have an access key offering access to that level. The concept is similar to the "rings of protection" in <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../847/18847.xml">
Multics</link></O>
. The architecture allows 16 access levels, of which the outer 6 are reserved for user-level code.</p>
<p>

Orthogonally to the access levels, the operating system makes resources available to applications in the form of a Virtual Machine. A Virtual Machine can run multiple processes. In practice, a VME Virtual Machine is closer to the concept of a process on other operating systems, while a VME process is more like a thread. The allocation of resources to a virtual machine uses a stack model:
when the stack is popped, all resources allocated at that stack level are released. Calls from an application to the operating system are therefore made by a call that retains the same process stack, but with a change in protection level; the resulting efficiency of system calls is one of the features that makes the architecture competitive.</p>
<p>

Communication between Virtual Machines is achieved by means of Events (named communication channels) and shared memory areas. The hardware architecture also provides <link>
semaphore</link> instructions INCT (increment-and-test) and TDEC (test-and-decrement).</p>
<p>

Files and other persistent objects are recorded in a repository called the Catalogue. Unlike other operating systems, the file naming hierarchy is independent of the location of a file on a particular tape or disk volume. In days where there was more need for offline storage, this made it easy to keep track of files regardless of their location, and to move files between locations without renaming them. As well as files, the Catalogue keeps track of users and user groups, volumes, devices, network connections, and many other resources. Metadata for files can be held in an object called a File Description.</p>
<p>

<link xlink:type="simple" xlink:href="../289/15289.xml">
Interrupt</link>s are handled by creating a new stack frame on the stack for the relevant process, handling the interrupt using this new environment, and then popping the stack to return to the interrupted process.</p>

<ss1>
<st>
OMF</st>
<p>

Compiled object code is maintained in a format called OMF (Object Module Format). Unlike in many other operating systems, this is also the format used by the loader.  Various compilers are available, as well as utilities, notably a Collector, which links the code in several OMF modules into a single module, for more efficient loading at run-time.</p>

</ss1>
<ss1>
<st>
SCL</st>
<p>

The command language for VME is known as SCL (System Control Language). </p>
<p>

This is much more recognizably a <link xlink:type="simple" xlink:href="../842/189842.xml">
high-level programming language</link> than the job control or shell languages found in most other operating systems: it can be likened to scripting languages such as <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../845/9845.xml">
JavaScript</link></programming_language>
, though its surface syntax is derived from <link xlink:type="simple" xlink:href="../880/692880.xml">
Algol 68</link>. </p>
<p>

SCL is designed to allow both line-at-a-time interactive use from a console or from a <link xlink:type="simple" xlink:href="../938/28938.xml">
command file</link>, and creation of executable scripts or programs (when the language is compiled into object module format in the same way as any other VME programming language).   The declaration of a procedure within SCL also acts as the definition of a simple form or template allowing the procedure to be invoked from an interactive terminal. </p>
<p>

The commands use a standardised acronym format referred to as "DALIX":
<list>
<entry level="1" type="bullet">

 (D)isplay</entry>
<entry level="1" type="bullet">

 (A)mend</entry>
<entry level="1" type="bullet">

 (L)ist</entry>
<entry level="1" type="bullet">

 (I)nsert / (I)ntroduce</entry>
<entry level="1" type="bullet">

 (X) Delete</entry>
</list>
</p>
<p>

SCL is block-structured, with begin/end blocks serving the dual and complementary roles of defining the lexical scope of variable declarations, and defining the points at which resources acquired from the operating system should be released. Variables in the language (which are accessible from applications in the form of <link xlink:type="simple" xlink:href="../504/349504.xml">
environment variable</link>s) can have a number of simple types such as strings, superstrings (sequences of strings), booleans, and integers, and are also used to contain references to system resources such as files and network connections.</p>
<p>

A simple code example can be seen on the <link xlink:type="simple" xlink:href="../764/490764.xml">
99 bottles of beer</link> website.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%223%22])">3</ref></p>

</ss1>
<ss1>
<st>
Enhanced security variants</st>
<p>

As a result of <company wordnetid="108058098" confidence="0.8">
<institution wordnetid="108053576" confidence="0.8">
<link xlink:type="simple" xlink:href="../789/515789.xml">
ICL's</link></institution>
</company>
 heavy involvement with delivery of computer services to the UK Public Sector, in particular those with special security requirements such as <link xlink:type="simple" xlink:href="../674/17429674.xml">
OPCON CCIS</link>, it was an early entrant into the market for <link xlink:type="simple" xlink:href="../036/15036.xml">
Secure Systems</link>.</p>
<p>

VME formed a core of ICL's activities in the Secure Systems arena.  It had the advantage that as the last large-scale operating system ever designed, and one built from scratch, its underlying architecture encompassed many of the primitives needed to develop a Secure System, in particular the hardware assisted Access Control Registers (ACR) to limit to privileges that could be taken by any process (including Users).</p>
<p>

This led to the UK Government's Central Computing and Telecommunications Agency (<link xlink:type="simple" xlink:href="../427/12986427.xml">
CCTA</link>) funding <it>Project Spaceman</it> in the mid 1980s for ICL Defence Technology Centre (DTC) to developed an enhanced security variant of VME.   ICL launched this as a pair of complementary products, with the commercial release being called High Security Option (HSO), and the public sector release, including Government Furnished Encryption (GFE) technologies, being called Government Security Option (GSO).</p>
<p>

HSO and GSO were formally tested under the <link xlink:type="simple" xlink:href="../489/1108489.xml">
CESG</link> UK (Security) Evaluation Scheme, one of the predecessors to <event wordnetid="100029378" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<link xlink:type="simple" xlink:href="../104/3568104.xml">
ITSEC</link></activity>
</procedure>
</psychological_feature>
</act>
</event>
 and <standard wordnetid="107260623" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<link xlink:type="simple" xlink:href="../625/57625.xml">
Common Criteria</link></activity>
</procedure>
</system_of_measurement>
</psychological_feature>
</act>
</event>
</standard>
, and in doing so became the first mainstream operating system to be formally Certified.</p>

</ss1>
<ss1>
<st>
Series 39</st>
<p>

The <platform wordnetid="103961939" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<surface wordnetid="104362025" confidence="0.8">
<horizontal_surface wordnetid="103536348" confidence="0.8">
<link xlink:type="simple" xlink:href="../736/14180736.xml">
Series 39</link></horizontal_surface>
</surface>
</artifact>
</platform>
 range introduced Nodal Architecture, a novel implementation of <link xlink:type="simple" xlink:href="../843/399843.xml">
distributed shared memory</link> that can be seen as a hybrid of a <link xlink:type="simple" xlink:href="../020/64020.xml">
multiprocessor</link> system and a <link xlink:type="simple" xlink:href="../896/18949896.xml">
cluster</link> design. Each machine consists of a number of <link xlink:type="simple" xlink:href="../116/998116.xml">
nodes</link>, and each node contains its own order-code processor and main memory. Virtual machines are typically located (at any one time) on one node, but have the capability to run on any node and to be relocated from one node to another. Discs and other peripherals are shared between nodes. Nodes are connected using a high-speed optical bus, which is used to provide applications with a virtual shared memory. Memory segments that are marked as shared (public or global segments) are replicated to each node, with updates being broadcast over the inter-node network. Processes which use unshared memory segments (nodal or local) run in complete isolation from other nodes and processes.</p>


</ss1>
</sec>
<sec>
<st>
Development process</st>
<p>

VME was originally written almost entirely in <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../588/11484588.xml">
S3</link></programming_language>
, a specially-designed <link xlink:type="simple" xlink:href="../805/472805.xml">
system programming language</link> based on <link xlink:type="simple" xlink:href="../880/692880.xml">
Algol 68</link>. Although a <link xlink:type="simple" xlink:href="../842/189842.xml">
high-level language</link> is used, the operating system is not designed to be independent of the underlying hardware architecture: on the contrary, the software and hardware architecture are closely integrated.</p>
<p>

From the early 1990s onwards, some entirely new VME subsystems were written partly or wholly in the <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../021/6021.xml">
C programming language</link></programming_language>
.</p>
<p>

From its earliest days, VME was developed with the aid of a <link xlink:type="simple" xlink:href="../010/27010.xml">
software engineering</link> <link xlink:type="simple" xlink:href="../483/663483.xml">
repository</link> known as <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../208/14908208.xml">
CADES</link></instrumentality>
</artifact>
</system>
, built for the purpose using an underlying <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../779/1419779.xml">
IDMS</link></instrumentality>
</artifact>
</system>
 database. CADES is not merely a <link xlink:type="simple" xlink:href="../955/55955.xml">
version control system</link> for code modules: it manages all aspects of the software lifecycle from requirements capture through to field maintenance.</p>

</sec>
<sec>
<st>
Application development tools</st>
<p>

The application development tools offered with VME fall into two categories:
<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../250/393250.xml">
third-generation programming language</link>s</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../367/11367.xml">
fourth-generation</link> QuickBuild toolset. </entry>
</list>
</p>
<p>

The toolset on VME is unusually homogeneous, with most customers using the same core set of languages and tools. As a result, the tools are also very well integrated. Third-party tools have made relatively little impression.</p>
<p>

For many years the large majority of VME users wrote applications in <link xlink:type="simple" xlink:href="../799/6799.xml">
COBOL</link>, usually making use of the <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../779/1419779.xml">
IDMS</link></instrumentality>
</artifact>
</system>
 database and the <link xlink:type="simple" xlink:href="../754/3573754.xml">
TPMS</link> <link xlink:type="simple" xlink:href="../409/212409.xml">
transaction processing</link> monitor. Other programming languages included <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../168/11168.xml">
Fortran</link></programming_language>
, <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../773/23773.xml">
Pascal</link></programming_language>
, <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../880/692880.xml">
ALGOL 68</link></programming_language>
, <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../262/7262.xml">
Coral 66</link></programming_language>
 and <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../241/632241.xml">
RPG2</link></programming_language>
, but these served minority interests. Later, in the mid 1980s, compilers for C became available, both within and outside the Unix subsystem, largely to enable porting of software such as <link xlink:type="simple" xlink:href="../873/25873.xml">
relational database</link> systems. </p>
<p>

The compilers developed within ICL share a common architecture, and in some cases share components such as code-generators. </p>

<ss1>
<st>
SFL</st>
<p>

An <link xlink:type="simple" xlink:href="../368/1368.xml">
assembly language</link> SFL (<b>S</b>ystem <b>F</b>unction <b>L</b>anguage) is also available, but is not widely used (an exception is the VME version of the <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../779/1419779.xml">
IDMS</link></instrumentality>
</artifact>
</system>
 database engine).</p>

</ss1>
<ss1>
<st>
Quickbuild</st>
<p>

The QuickBuild application development environment on VME has been highly successful despite the fact that applications are largely locked in to the VME environment. This environment is centred on the Data Dictionary System (DDS, also called OpenDDS), an early and very successful attempt to build a comprehensive <link xlink:type="simple" xlink:href="../483/663483.xml">
repository</link> supporting all the other tools, with full support for the development lifecycle. As well as database schemas and file and record descriptions, the dictionary keeps track of objects such as reports and queries, screen designs, and 4GL code; it also supports a variety of models at the requirements capture level, such as <link xlink:type="simple" xlink:href="../991/752991.xml">
entity-relationship</link> models and process models.</p>
<p>

The QuickBuild 4GL is packaged in two forms: 
<list>
<entry level="1" type="bullet">

 ApplicationMaster for the creation of online TP applications</entry>
<entry level="1" type="bullet">

 ReportMaster for batch reporting. </entry>
</list>
</p>
<p>

Both are high-level declarative languages, using <paradigm wordnetid="113804375" confidence="0.8">
<linguistic_relation wordnetid="113797142" confidence="0.8">
<inflection wordnetid="113803782" confidence="0.8">
<grammatical_relation wordnetid="113796779" confidence="0.8">
<link xlink:type="simple" xlink:href="../973/70973.xml">
Jackson Structured Programming</link></grammatical_relation>
</inflection>
</linguistic_relation>
</paradigm>
 as their design paradigm. ApplicationMaster is unusual in its approach to application design in that it focuses on the user session as if it were running in a single conversational process, completely hiding the complexity of maintaining state across user interactions. Because the 4GL and other tools such as the screen designer work only with the DDS dictionary, which also holds the database schemas, there is considerable reuse of metadata that is rarely achieved with other 4GLs.</p>

</ss1>
</sec>
<sec>
<st>
References</st>

<p>

<reflist>
<entry id="1">
<weblink xlink:type="simple" xlink:href="http://www.icl1900.co.uk/g3/index.html">
Comprehensive information on George 3</weblink></entry>
<entry id="2">
<weblink xlink:type="simple" xlink:href="http://www.vmesupport.net/brochures/superNOVAWP.pdf">
Supernova whitepaper</weblink></entry>
<entry id="3">
<weblink xlink:type="simple" xlink:href="http://99-bottles-of-beer.net/language-scl-848.html">
SCL code example on the 99 bottles of beer website</weblink></entry>
</reflist>
</p>

</sec>
<sec>
<st>
Sources</st>
<p>

<list>
<entry level="1" type="bullet">

The Architecture of OpenVME. Nic Holt. ICL publication 55480001. Undated (probably around 1995)</entry>
</list>
</p>


</sec>
</bdy>
</O>
</article>
