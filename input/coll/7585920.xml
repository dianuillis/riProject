<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 22:58:09[mciao0826] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<physical_entity  confidence="0.8" wordnetid="100001930">
<person  confidence="0.8" wordnetid="100007846">
<model  confidence="0.8" wordnetid="110324560">
<assistant  confidence="0.8" wordnetid="109815790">
<know-how  confidence="0.8" wordnetid="105616786">
<worker  confidence="0.8" wordnetid="109632518">
<method  confidence="0.8" wordnetid="105660268">
<causal_agent  confidence="0.8" wordnetid="100007347">
<header>
<title>Algorithm examples</title>
<id>7585920</id>
<revision>
<id>243584894</id>
<timestamp>2008-10-07T03:55:55Z</timestamp>
<contributor>
<username>SilverOrion</username>
<id>6705553</id>
</contributor>
</revision>
<categories>
<category>Computational models</category>
<category>Wikipedia articles incorporating text from public domain works of the United States Government</category>
<category>Theoretical computer science</category>
<category>Recursion theory</category>
<category>Formal methods</category>
</categories>
</header>
<bdy>

<it>This article </it>'Algorithm examples<b> supplements <link xlink:type="simple" xlink:href="../775/775.xml">
Algorithm</link> and <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<model wordnetid="110324560" confidence="0.8">
<assistant wordnetid="109815790" confidence="0.8">
<know-how wordnetid="105616786" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../703/6901703.xml">
Algorithm characterizations</link></causal_agent>
</method>
</worker>
</know-how>
</assistant>
</model>
</person>
</physical_entity>
.</b><p>

= An example: Algorithm specification of addition m+n =
<b>Choice of machine model:</b></p>
<p>

This problem has not been resolved by the mathematics community. There is no “best”, or “preferred” model. The <invention wordnetid="105633385" confidence="0.8">
<know-how wordnetid="105616786" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<link xlink:type="simple" xlink:href="../403/30403.xml">
Turing machine</link></method>
</know-how>
</invention>
, while considered the <it><link xlink:type="simple" xlink:href="../767/1245767.xml">
sine qua non</link></it> – <it>the</it> indispensable, the ultimate fall-back – is notoriously opaque when confronted face-to-face. And different problems seem to require different models to study them. Many researchers have observed these problems, for example:
<indent level="1">

“The principal purpose of this paper is to offer a theory which is closely related to Turing's but is more economical in the basic operations” (Wang (1954) p. 63)
</indent>

<indent level="1">

“Certain features of Turing machines have induced later workers to propose alternative devices as embodiments of what is to be meant by effective computability.... a Turing machine has a certain opacity, its workings are known rather than seen. Further a Turing machine is inflexible ...  a Turing machine is slow in (hypothetical) operation and, usually complicated. This makes it rather hard to design it, and even harder to investigate such matters as time or storage optimization or a comparison between efficiency of two algorithms.” (Melzak (1961) p. 281)
</indent>

<indent level="1">

Shepherdson-Sturgis (1963) proposed their register-machine model because “these proofs [using Turing machines] are complicated and tedious to follow for two reasons: (1) A Turing machine has only one head... (2) It has only one tape....” They were in search of “a form of idealized computer which is sufficiently flexible for one to be able to convert an intuitive computational procedure into a program for such a machine” (p. 218).
</indent>

<indent level="1">

“I would prefer something along the lines of the random access computers of Angluin and Valiant [as opposed to the [[pointer machine]] of Schönhage]” (Gurivich 1988 p. 6)
</indent>

<indent level="1">

 “Showing that a function is Turing computable directly...is rather laborious ...  we introduce an ostensibly more flexible kind of idealized machine, an abacus machine...” (Boolos-Burgess-Jeffrey 2002 p.45).
</indent>

About all that one can insist upon is that the algorithm-writer specify in exacting detail (i) the machine model to be used and (ii) its instruction set. </p>
<p>

<b>Atomization of the instruction set:</b> </p>
<p>

The Turing machine model is primitive, but not as primitive as it can be. As noted in the above quotes this is a source of concern when studying complexity and equivalence of algorithms. Although the observations quoted below concern the <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<model wordnetid="110324560" confidence="0.8">
<assistant wordnetid="109815790" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../227/544227.xml">
Random access machine</link></causal_agent>
</worker>
</assistant>
</model>
</person>
</physical_entity>
 model – a Turing-machine equivalent – the problem remains for any <link xlink:type="simple" xlink:href="../406/3246406.xml">
Turing-equivalent</link> model: 
<indent level="1">

“...there hardly exists such a thing as an ‘innocent’ extension of the standard RAM model in the uniform time measure; either one only has additive arithmetic, or one might as well include all multiplicative and/or bitwise Boolean instructions on small operands....” (van Emde Boas (1992) p. 26)
</indent>

<indent level="1">

“Since, however, the computational power of a RAM model seems to depend rather sensitively on the scope of its instruction set, we nevertheless will have to go into detail... 
</indent>

<indent level="1">

“One important principle will be to admit only such instructions which can be said to be of an <it>atomistic</it> nature. We will describe two versions of the so-called <it>successor</it> RAM, with the successor function as the only arithmetic operation....the RAM0 version deserves special attention for its extreme simplicity; its instruction set consists of only a few one letter codes, without any (explicit) addressing.” (Schönhage (1980) p.494) 
</indent>

Example #1: The most general (and original) Turing machine – single-tape with left-end, multi-symbols, 5-tuple instruction format – can be atomized into the Turing machine of Boolos-Burgess-Jeffrey (2002) – single-tape with no ends, two symbols { B, | }, 4-tuple instruction format. This model in turn can be further atomized into a <link xlink:type="simple" xlink:href="../147/3688147.xml">
Post-Turing machine</link> – single-tape with no ends, two symbols { B, | }, 0- and 1-parameter instruction set.</p>
<p>

Example #2: The RASP can be reduced to a RAM by moving its instructions off the tape and (perhaps with translation) into its finite-state machine “table” of instructions, the RAM stripped of its indirect instruction and reduced to a 2- and 3-operand “abacus” <link xlink:type="simple" xlink:href="../218/505218.xml">
register machine</link>; the abacus in turn can be reduced to the 1- and 2-operand Minsky (1967)/Shepherdson-Sturgis (1963) counter machine, which can be further atomized into the 0- and 1-operand instructions of Schönhage (and even a 0-operand Schönhage-like instruction set is possible!).</p>
<p>

<b>Cost of atomization</b>: </p>
<p>

Atomization comes at a (usually severe) cost: while the resulting instructions may be “simpler”, atomization (usually) creates <it>more</it> instructions and the need for <it>more computational steps</it>. As shown in the following example the increase in computation steps may be significant (i.e. orders of magnitude – the following example is “tame”), and atomization may (but not always, as in the case of the Post-Turing model) reduce the usability and readability of “the machine code”. For more see <link xlink:type="simple" xlink:href="../633/46633.xml">
Turing tarpit</link>. </p>
<p>

Example: The single <link xlink:type="simple" xlink:href="../218/505218.xml">
register machine</link> instruction "INC 3"  – increment the contents of register #3, i.e. increase its count by 1 – can be atomized into the 0-parameter instruction set of Schönhage, but with the equivalent number of steps to accomplish the task increasing to 7; this number is directly related to the register number “n” i.e. 4+n):</p>
<p>

<table class="wikitable">
<row style="font-size:9pt" align="center" valign="bottom">
<col width="43.2" Height="45.6">
Label</col>
<col width="49.8">
Instruction mnemonic</col>
<col width="43.2">
Contents of register A</col>
<col width="43.2">
Contents of register-N</col>
<col width="43.2">
Contents of register 3</col>
<col width="307.2">
Description</col>
</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col style="font-style:Italic" Height="10.2">
start:</col>

<col style="color:#969696">
?</col>
<col style="color:#969696">
?</col>
<col style="color:#969696">
36</col>

</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col Height="10.2"></col>
<col style="font-weight:bold">
Z</col>
<col style="font-weight:bold">
0</col>
<col style="color:#969696">
?</col>
<col style="color:#969696">
36</col>
<col>
Clear contents of A-register to <b>Z</b>ero</col>
</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col Height="10.2"></col>
<col style="font-weight:bold">
A</col>
<col style="font-weight:bold">
1</col>
<col style="color:#969696">
?</col>
<col style="color:#969696">
36</col>
<col>
Increment A: <b>A</b>dd one to the contents of A-register</col>
</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col Height="10.2"></col>
<col style="font-weight:bold">
A</col>
<col style="font-weight:bold">
2</col>
<col style="color:#969696">
?</col>
<col style="color:#969696">
36</col>
<col>
Increment A: <b>A</b>dd one to the contents of A-register</col>
</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col Height="10.2"></col>
<col style="font-weight:bold">
A</col>
<col style="font-weight:bold">
3</col>
<col style="color:#969696">
?</col>
<col style="color:#969696">
36</col>
<col>
Increment A: <b>A</b>dd one to the contents of A-register</col>
</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col Height="10.2"></col>
<col style="font-weight:bold">
N</col>
<col style="color:#969696">
3</col>
<col style="font-weight:bold">
3</col>
<col style="color:#969696">
36</col>
<col>
Copy contents of A to N</col>
</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col Height="10.2"></col>
<col style="font-weight:bold">
L</col>
<col style="font-weight:bold">
36</col>
<col style="color:#969696">
3</col>
<col style="color:#969696">
36</col>
<col>
<b>L</b>oad register A with contents of register x whose address is in contained in N</col>
</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col Height="10.2"></col>
<col style="font-weight:bold">
A</col>
<col style="font-weight:bold">
37</col>
<col style="color:#969696">
3</col>
<col style="color:#969696">
36</col>
<col>
Increment A: <b>A</b>dd one to the contents of A-register</col>
</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col Height="10.2"></col>
<col style="font-weight:bold">
S</col>
<col style="color:#969696">
37</col>
<col style="color:#969696">
3</col>
<col style="font-weight:bold">
37</col>
<col>
<b>S</b>tore contents of A-register in register whose address is contained in N</col>
</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col style="font-style:Italic" Height="11.4">
done:</col>
<col>
etc.</col>




</row>
</table>
</p>
<p>

More examples can be found at the pages <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<model wordnetid="110324560" confidence="0.8">
<assistant wordnetid="109815790" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../218/505218.xml">
Register machine</link></causal_agent>
</worker>
</assistant>
</model>
</person>
</physical_entity>
 and <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<model wordnetid="110324560" confidence="0.8">
<assistant wordnetid="109815790" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../227/544227.xml">
Random access machine</link></causal_agent>
</worker>
</assistant>
</model>
</person>
</physical_entity>
 where the addition of “convenience instructions” CLR h and COPY h1,h1 are shown to reduce the number of steps dramatically. Indirect-addressing is the other significant example.</p>

<sec>
<st>
Precise specification of Turing-machine algorithm m+n </st>
<p>

As described in <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<model wordnetid="110324560" confidence="0.8">
<assistant wordnetid="109815790" confidence="0.8">
<know-how wordnetid="105616786" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../703/6901703.xml">
Algorithm characterizations</link></causal_agent>
</method>
</worker>
</know-how>
</assistant>
</model>
</person>
</physical_entity>
 per the specifications  of Boolos-Burgess-Jeffrey (2002) and Sipser (2006), and with a nod to the other characterizations we proceed to specify:</p>
<p>

<indent level="1">

(i) <b>Number format</b>: unary strings separated by single blanks e.g. “2,3” = B11B111B
</indent>

<indent level="1">

(ii) <b>Machine type</b>: Turing machine: single-tape left-ended or no-ended, 2-symbol { B, | }, 4-tuple instruction format.  
</indent>

<indent level="1">

(iii) <b>Head location</b>: See more at “Implementation Description” below. A symbolic representation of the head's location in the tape's symbol string will put the current state to the <it>right</it> of the scanned symbol. Blank squares may be included in this protocol. The state's number will appear with brackets around it, or sub-scripted. The head is shown as state #2, to the right of the second-from-left “1”:
</indent>
:: Example: B11[2]1B111B or B1121B111B    </p>
<p>

<indent level="1">

(iii) <b>Location of “the program”:</b> This program will be in the finite state machine's TABLE and appear there in <it>quadruple</it> (4-tuple) format, suitably coded so the finite state machine can interpret them (see Footnote: <b>Coding instructions for the finite state machine</b>).
</indent>

<indent level="1">

(iv) <b>The program:</b> Boolos-Burgess-Jeffrey (2002) do not offer us one, however, we can devise one. We will note that it is not be as efficient as it could be; however, it works. See “Formal Description” below. (A “better” program will be found in the second example.)
</indent>

Per the discussion of Sipser (2006) (p. 157) we will provide the three levels of description:</p>
<p>

<b>High-level description:</b></p>
<p>

<indent level="1">

The computation m+n adds two blocks of unary marks (strokes) to produce a single block that represents their sum. At the start the blocks are separated by a single blank. The machine will hunt for this blank and fill it in. This solid block of marks constitutes the sum+1. The machine will hunt for the far-right end of the sum and erase one (the extra) far-right mark. Finally, it will proceed to the left end and halt with the head on the left-most mark.
</indent>

<b>Implementation description:</b></p>
<p>

<indent level="1">

<b>Implementation specification:</b>
</indent>

<indent level="1">

(a) <b>Initial number format:</b> The numbers n and m will be represented as close-packed blocks of unary marks, where number “0” = no mark and no blank, “1” = 1 mark, etc. The numbers n and m will be separated by a single blank, both from each other and any other parameters that happen to be on the tape:
</indent>
:: Example: 2+3 = B11B111B
<indent level="2">

 Example: 0+3 = B111B
</indent>

<indent level="1">

(b) <b>Inital head location, initial state:</b> Case m&amp;gt;0: Initially the machine will be scanning the leftmost 1 on the tape, e.g. parameter m. Case m=0: If parameter m is 0, or both m and n are 0, then the head will be where a mark would be if there were to be a mark, i.e. to the left of the spacer-blank. The initial state will be “1”:
</indent>
:: Example: 2+3 = B111B111B
<indent level="2">

 Example: 0+3 = BB1111B
</indent>

<indent level="1">

(c) <b>Successful computation – number format at Halt:</b> The machine will halt on a single block of marks that represent the sum in the conventional sense. This will be true for m+0 and 0+n. In the case of 0+0 the sum will be “null”, neither blank nor mark.
</indent>
:: Example: 5 = B11111B
<indent level="2">

 Example: 0 = BB
</indent>

<indent level="1">

(d) <b>Successful computation – head location at Halt:</b> The machine will halt scanning the left-most 1 in the block that represents the sum:
</indent>
:: Example: 2+3 = 5 = B1k1111B
<indent level="2">

 Example: 2+0 = 2 = B1k1BB
</indent>
:: Example: 0+3 = 3 = BB1k11B
<indent level="2">

 Example: 0+0 = 0 = BkB
</indent>

<indent level="1">

(e) <b>Unsuccessful computation</b>: The machine will never halt or will halt in some non-standard configuration:
</indent>
:: Example:  Bk11111B, or B11k111B, or B11111kB, etc.</p>
<p>

<indent level="1">

<b>Implementation description</b> 
</indent>

<list>
<entry level="2" type="bullet">

State 1: Test for 0+n and by implication 0+0; if the head starts over a blank square, move the head once right and halt. If the tape is marked move the tape right once and go to state 2.</entry>
<entry level="2" type="bullet">

State 2: If the tape is blank then the head has arrived at the space-blank between the two integers. Print a mark, then go to state 3. If the tape is marked, continue the hunt for a blank by moving the head to the right and looping through state 2.</entry>
<entry level="2" type="bullet">

State 3: State "2 &amp; B" has previously found the spacer blank and filled it in with a mark. While the tape is marked continue moving the head to the <it>right</it> while hunting for the blank to the <it>right</it> of the right-most number “n”. When the head finds this blank to the right of “”" (state 3 &amp; 0), move the tape head <it>left</it> once and go to state 4.</entry>
<entry level="2" type="bullet">

State 4: If the scanned square is marked, then the head is at the far <it>right</it> end of the sum. Erase this extra mark, then loop back to 4. The head will now be on a blank so move the head left once and jump to state 5.</entry>
<entry level="2" type="bullet">

State 5: Hunt for the <it>left</it> end of the sum: while the scanned square is marked, move the head left and loop to state 5. When the head reaches the far left end it will be on a blank. Move the tape right once to be over the left-most mark and halt.</entry>
</list>
</p>
<p>

<b>Formal description:</b></p>
<p>

The state table written in (unreduced) <it>quadruple</it>-form<it>:</it></p>
<p>

<table class="wikitable">
<row style="font-size:9pt" align="center" valign="bottom">
<col width="23.4" Height="34.2">
state qj</col>
<col width="43.2">
Scanned symbol</col>
<col width="32.4">
Action</col>
<col width="28.2">
next state qk</col>
<col width="7.2"></col>
<col width="30.6">
state qn</col>
<col width="43.2">
Scanned symbol</col>
<col width="34.2">
Action</col>
<col width="26.4">
next state qk</col>
</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col style="font-weight:bold" Height="12">
1</col>
<col style="font-weight:bold">
B</col>
<col style="font-weight:bold">
R</col>
<col style="font-weight:bold">
H</col>

<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
R</col>
<col style="font-weight:bold">
2</col>
</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col style="font-weight:bold" Height="12">
2</col>
<col style="font-weight:bold">
B</col>
<col style="font-weight:bold">
P</col>
<col style="font-weight:bold">
3</col>

<col style="font-weight:bold">
2</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
R</col>
<col style="font-weight:bold">
2</col>
</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col style="font-weight:bold" Height="12">
3</col>
<col style="font-weight:bold">
B</col>
<col style="font-weight:bold">
L</col>
<col style="font-weight:bold">
4</col>

<col style="font-weight:bold">
3</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
R</col>
<col style="font-weight:bold">
3</col>
</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col style="font-weight:bold" Height="12">
4</col>
<col style="font-weight:bold">
B</col>
<col style="font-weight:bold">
L</col>
<col style="font-weight:bold">
5</col>

<col style="font-weight:bold">
4</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
E</col>
<col style="font-weight:bold">
4</col>
</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col style="font-weight:bold" Height="12">
5</col>
<col style="font-weight:bold">
B</col>
<col style="font-weight:bold">
R</col>
<col style="font-weight:bold">
H</col>

<col style="font-weight:bold">
5</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
L</col>
<col style="font-weight:bold">
5</col>
</row>
</table>
</p>
<p>

Sample "run" of the Turing-machine program: The program has been turned on its side; time runs down the page. The position of the head is high-lighted yellow. The "complete configuration" or the "total machine/system state" (in the context of Blass-Gurevich's "evolution of the state") is shown in the far-right column -- the instruction-number (finite-state machine's "state") is the number inside the brackets to the <it>right</it> of the scanned symbol (rather than a subscript to the right, for technical reasons):
<table class="wikitable">
<row style="font-size:9pt" align="center" valign="bottom">
<col width="27" Height="11.4"></col>
<col width="50.4"></col>
<col width="7.2"></col>
<col width="12"></col>
<col width="12"></col>
<col width="12"></col>
<col width="12"></col>
<col width="12"></col>
<col width="12"></col>
<col width="12"></col>
<col width="12"></col>
<col width="12"></col>
<col width="12"></col>
<col width="12"></col>
<col width="12"></col>
<col width="12"></col>
<col width="70.2">
State qj</col>
<col width="18">
1</col>
<col width="18">
2</col>
<col width="18">
3</col>
<col width="18">
4</col>
<col width="18">
5</col>
<col width="49.8"></col>
<col width="52.8"></col>
</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col Height="11.4"></col>















<col>
Scanned symbol</col>
<col>
B</col>
<col>
B</col>
<col>
B</col>
<col>
B</col>
<col>
B</col>


</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col style="font-weight:bold" Height="12"></col>
<col style="font-weight:bold"></col>














<col>
B-action</col>
<col>
R</col>
<col>
P</col>
<col>
L</col>
<col>
L</col>
<col>
R</col>


</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col style="font-weight:bold" Height="12"></col>
<col style="font-weight:bold"></col>














<col>
B-next state qk:</col>
<col>
H</col>
<col>
3</col>
<col>
4</col>
<col>
5</col>
<col>
H</col>


</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col style="font-weight:bold" Height="3"></col>
<col style="font-weight:bold"></col>






















</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col style="font-weight:bold" Height="12"></col>
<col style="font-weight:bold"></col>














<col>
State qj</col>
<col>
1</col>
<col>
2</col>
<col>
3</col>
<col>
4</col>
<col>
5</col>


</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col style="font-weight:bold" Height="12"></col>
<col style="font-weight:bold"></col>














<col>
Scanned symbol</col>
<col>
1</col>
<col>
1</col>
<col>
1</col>
<col>
1</col>
<col>
1</col>


</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col style="font-weight:bold" Height="12"></col>
<col style="font-weight:bold"></col>














<col>
1-Action</col>
<col>
R</col>
<col>
R</col>
<col>
R</col>
<col>
E</col>
<col>
L</col>


</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col style="font-weight:bold" Height="12"></col>
<col style="font-weight:bold"></col>














<col>
1-next state qk:</col>
<col>
2</col>
<col>
2</col>
<col>
3</col>
<col>
4</col>
<col>
5</col>


</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col Height="4.8"></col>























</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col style="font-weight:bold" Height="12">
Step</col>
<col style="font-weight:bold">
Instruction</col>




















<col style="font-weight:bold">
Next Inst#</col>
<col style="font-weight:bold">
Total state</col>
</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col Height="12">
0</col>
<col>
start</col>

<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="background-color:#FFFF00;font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
B</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>






<col>
1</col>
<col>
 1[1]1B111</col>
</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col Height="12">
1</col>
<col style="font-weight:bold">
R</col>

<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="font-weight:bold">
1</col>
<col style="background-color:#FFFF00;font-weight:bold">
1</col>
<col style="font-weight:bold">
B</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>

<col>
R</col>




<col>
2</col>
<col>
 11[2]B111</col>
</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col Height="12">
2</col>
<col style="font-weight:bold">
R</col>
<col style="font-weight:bold"></col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="background-color:#FFFF00;font-weight:bold">
B</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>


<col>
R</col>



<col>
2</col>
<col>
 11B[2]111</col>
</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col Height="12">
3</col>
<col style="font-weight:bold">
P</col>
<col style="font-weight:bold"></col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="background-color:#FFFF00;font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>


<col>
P</col>



<col>
3</col>
<col>
 111[3]111</col>
</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col Height="12">
4</col>
<col style="font-weight:bold">
R</col>
<col style="font-weight:bold"></col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="background-color:#FFFF00;font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>



<col>
R</col>


<col>
3</col>
<col>
 1111[3]11</col>
</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col Height="12">
5</col>
<col style="font-weight:bold">
R</col>

<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="background-color:#FFFF00;font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>



<col>
R</col>


<col>
3</col>
<col>
 11111[3]1</col>
</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col Height="12">
6</col>
<col style="font-weight:bold">
R</col>

<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="background-color:#FFFF00;font-weight:bold">
1</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>



<col>
R</col>


<col>
3</col>
<col>
 111111[3]</col>
</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col Height="12">
7</col>
<col style="font-weight:bold">
R</col>

<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="background-color:#FFFF00;font-weight:bold">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>



<col>
R</col>


<col>
3</col>
<col>
 111111B[3]</col>
</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col Height="12">
8</col>
<col style="font-weight:bold">
L</col>

<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="background-color:#FFFF00;font-weight:bold">
1</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>



<col>
L</col>


<col>
4</col>
<col>
 111111[4]</col>
</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col Height="12">
9</col>
<col style="font-weight:bold">
E</col>

<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="background-color:#FFFF00;font-weight:bold">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>




<col>
E</col>

<col>
4</col>
<col>
 11111B[4]</col>
</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col Height="12">
10</col>
<col style="font-weight:bold">
L</col>

<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="background-color:#FFFF00;font-weight:bold">
1</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>




<col>
L</col>

<col>
5</col>
<col>
 11111[5]</col>
</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col Height="12">
11</col>
<col style="font-weight:bold">
L</col>

<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="background-color:#FFFF00;font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>





<col>
L</col>
<col>
5</col>
<col>
 1111[5]1</col>
</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col Height="12">
12</col>
<col style="font-weight:bold">
L</col>

<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="background-color:#FFFF00;font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>





<col>
L</col>
<col>
5</col>
<col>
 111[5]11</col>
</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col Height="12">
13</col>
<col style="font-weight:bold">
L</col>

<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="font-weight:bold">
1</col>
<col style="background-color:#FFFF00;font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>





<col>
L</col>
<col>
5</col>
<col>
 11[5]111</col>
</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col Height="12">
14</col>
<col style="font-weight:bold">
L</col>

<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="background-color:#FFFF00;font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>





<col>
L</col>
<col>
5</col>
<col>
 1[5]1111</col>
</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col Height="12">
15</col>
<col style="font-weight:bold">
L</col>

<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="background-color:#FFFF00;font-weight:bold">
B</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>





<col>
L</col>
<col>
5</col>
<col>
 B[5]11111</col>
</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col Height="12">
16</col>
<col style="font-weight:bold">
R</col>

<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
0</col>
<col style="background-color:#FFFF00;font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>





<col>
R</col>
<col>
H</col>
<col>
 1[H]1111</col>
</row>
</table>
</p>
<p>

(NOTE: The reader may find the equivalent <link xlink:type="simple" xlink:href="../147/3688147.xml">
Post-Turing machine</link> program easier to read and simulate. In this example the head moves; just reverse L and R for the case when the tape moves): </p>
<p>

<table class="wikitable">
<row style="font-size:9pt;font-weight:bold">
<col align="right" width="59.4" Height="12" valign="bottom">
Instruction #:</col>
<col align="center" width="26.4" valign="bottom">
1</col>
<col align="center" width="26.4" valign="bottom">
2</col>
<col align="center" width="26.4" valign="bottom">
3</col>
<col align="center" width="26.4" valign="bottom">
4</col>
<col align="center" width="26.4" valign="bottom">
5</col>
<col align="center" width="26.4" valign="bottom">
6</col>
<col align="center" width="26.4" valign="bottom">
7</col>
<col align="center" width="26.4" valign="bottom">
8</col>
<col align="center" width="26.4" valign="bottom">
9</col>
<col align="center" width="26.4" valign="bottom">
10</col>
<col align="center" width="26.4" valign="bottom">
11</col>
<col align="center" width="26.4" valign="bottom">
12</col>
</row>
<row style="font-size:9pt;font-weight:bold">
<col align="right" Height="12" valign="bottom">
Instruction:</col>
<col align="center" valign="bottom">
J0</col>
<col align="center" valign="bottom">
R</col>
<col align="center" valign="bottom">
J1</col>
<col align="center" valign="bottom">
P</col>
<col align="center" valign="bottom">
R</col>
<col align="center" valign="bottom">
J1</col>
<col align="center" valign="bottom">
L</col>
<col align="center" valign="bottom">
E</col>
<col align="center" valign="bottom">
L</col>
<col align="center" valign="bottom">
J1</col>
<col align="center" valign="bottom">
R</col>
<col align="center" valign="bottom">
H</col>
</row>
<row style="font-size:9pt;font-weight:bold">
<col align="right" Height="12" valign="bottom">
Jump-to #:</col>
<col align="center" valign="bottom">
11</col>
<col align="center" valign="bottom"></col>
<col align="center" valign="bottom">
2</col>
<col align="center" valign="bottom"></col>
<col align="center" valign="bottom"></col>
<col align="center" valign="bottom">
5</col>
<col align="center" valign="bottom"></col>
<col align="center" valign="bottom"></col>
<col align="center" valign="bottom"></col>
<col align="center" valign="bottom">
9</col>
<col align="center" valign="bottom"></col>
<col align="center" valign="bottom"></col>
</row>
</table>
</p>

</sec>
<sec>
<st>
 The "quality" of an algorithm: a "better" version of Turing-machine addition m+n </st>
<p>

We will see from the example below that the following addition-algorithm is "better" for computing m+n than the one specified above, at least from the quality standpoint of requiring (i) less space (fewer instructions: 4 versus 5 states), and (ii) less time (9 versus 16 steps). Whether or not the algorithm below is better than the above in terms of reliability is another question. Because it does not explore the 2nd number (i.e. "n") it cannot halt in a "non-standard" or fail-to-compute-correctly state. </p>
<p>

We conclude from this example that although the algorithms result in the same output (end state) they perform differently. In fact there are many other possible algorithms [need reference here: B-B-J 2002 discuss this somewhere in the text]. However comparisons and measurements of "quality" must be made relative to an <it>a priori</it> standard [need reference, quotes here: Knuth 1972 discusses this briefly].  </p>
<p>

<it>High-level description #1:</it></p>
<p>

<indent level="1">

Because the unary numbers to be added, e.g. m+n, are separated by a single blank the machine will hunt for this blank and fill it in. It will then move the head left to the blank at the <it>left</it> of the sum, move the head right once, erase the mark there, move the head right once again and halt. At the beginning a test is provided for the case of 0+n (and by implication, 0+0). 
</indent>
</p>

<p>

<it>Formal description #3: The state table written in </it>quadruple<it>-form</it>:</p>
<p>

<table class="wikitable">
<row style="font-size:9pt" align="center" valign="bottom">
<col width="23.4" Height="34.2">
state qj</col>
<col width="43.2">
Scanned symbol</col>
<col width="32.4">
Action</col>
<col width="28.2">
next state qk</col>
<col width="9.6"></col>
<col width="30.6">
state qn</col>
<col width="43.2">
Scanned symbol</col>
<col width="34.2">
Action</col>
<col width="26.4">
next state qk</col>
</row>
<row style="font-size:9pt;font-weight:bold" align="center" valign="bottom">
<col Height="12">
1</col>
<col>
B</col>
<col>
R</col>
<col>
H</col>

<col>
1</col>
<col>
1</col>
<col>
R</col>
<col>
2</col>
</row>
<row style="font-size:9pt;font-weight:bold" align="center" valign="bottom">
<col Height="12">
2</col>
<col>
B</col>
<col>
P</col>
<col>
3</col>

<col>
2</col>
<col>
1</col>
<col>
R</col>
<col>
2</col>
</row>
<row style="font-size:9pt;font-weight:bold" align="center" valign="bottom">
<col Height="12">
3</col>
<col>
B</col>
<col>
R</col>
<col>
4</col>

<col>
3</col>
<col>
1</col>
<col>
L</col>
<col>
3</col>
</row>
<row style="font-size:9pt;font-weight:bold" align="center" valign="bottom">
<col Height="12">
4</col>
<col>
B</col>
<col>
R</col>
<col>
H</col>

<col>
4</col>
<col>
1</col>
<col>
E</col>
<col>
4</col>
</row>
</table>
</p>
<p>

An example run of the algorithm:
<table class="wikitable">
<row style="font-size:9pt" align="center" valign="bottom">
<col width="27" Height="11.4"></col>
<col width="50.4"></col>
<col width="7.2"></col>
<col width="12"></col>
<col width="12"></col>
<col width="12"></col>
<col width="12"></col>
<col width="12"></col>
<col width="12"></col>
<col width="12"></col>
<col width="12"></col>
<col width="12"></col>
<col width="12"></col>
<col width="12"></col>
<col width="12"></col>
<col width="12"></col>
<col width="70.2">
State qj</col>
<col width="18">
1</col>
<col width="18">
2</col>
<col width="18">
3</col>
<col width="18">
4</col>
<col width="51.6"></col>
<col width="49.8"></col>
</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col Height="11.4"></col>















<col>
Scanned symbol</col>
<col>
B</col>
<col>
B</col>
<col>
B</col>
<col>
B</col>


</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col Height="11.4"></col>















<col>
B-action</col>
<col>
R</col>
<col>
P</col>
<col>
R</col>
<col>
R</col>


</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col Height="11.4"></col>















<col>
B-next state qk:</col>
<col>
H</col>
<col>
3</col>
<col>
4</col>
<col>
H</col>


</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col Height="5.4"></col>






















</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col Height="11.4"></col>















<col>
State qj</col>
<col>
1</col>
<col>
2</col>
<col>
3</col>
<col>
4</col>


</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col Height="11.4"></col>















<col>
Scanned symbol</col>
<col>
1</col>
<col>
1</col>
<col>
1</col>
<col>
1</col>


</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col Height="11.4"></col>















<col>
1-Action</col>
<col>
R</col>
<col>
R</col>
<col>
L</col>
<col>
E</col>


</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col Height="11.4"></col>















<col>
1-next state qk:</col>
<col>
2</col>
<col>
2</col>
<col>
3</col>
<col>
4</col>


</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col style="font-weight:bold" Height="3"></col>
<col style="font-weight:bold"></col>





















</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col style="font-weight:bold" Height="12">
Step</col>
<col style="font-weight:bold">
Instruction</col>



















<col style="font-weight:bold">
Next Inst#</col>
<col style="font-weight:bold">
Total state</col>
</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col Height="12">
0</col>
<col>
start</col>

<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="background-color:#FFFF00;font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
B</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>





<col>
1</col>
<col>
 1[1]1B111</col>
</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col Height="12">
1</col>
<col style="font-weight:bold">
R</col>

<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="font-weight:bold">
1</col>
<col style="background-color:#FFFF00;font-weight:bold">
1</col>
<col style="font-weight:bold">
B</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>

<col>
R</col>



<col>
2</col>
<col>
 11[2]B111</col>
</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col Height="12">
2</col>
<col style="font-weight:bold">
R</col>

<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="background-color:#FFFF00;font-weight:bold">
B</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>


<col>
R</col>


<col>
2</col>
<col>
 11B[2]111</col>
</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col Height="12">
3</col>
<col style="font-weight:bold">
P</col>

<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="background-color:#FFFF00;font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>


<col>
P</col>


<col>
3</col>
<col>
 111[3]111</col>
</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col Height="12">
4</col>
<col style="font-weight:bold">
L</col>

<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="font-weight:bold">
1</col>
<col style="background-color:#FFFF00;font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>



<col>
L</col>

<col>
3</col>
<col>
 11[3]1111</col>
</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col Height="12">
5</col>
<col style="font-weight:bold">
L</col>

<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="background-color:#FFFF00;font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>



<col>
L</col>

<col>
3</col>
<col>
 1[3]11111</col>
</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col Height="12">
6</col>
<col style="font-weight:bold">
L</col>

<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="background-color:#FFFF00;font-weight:bold">
B</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>



<col>
L</col>

<col>
3</col>
<col>
 B[3]111111</col>
</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col Height="12">
7</col>
<col style="font-weight:bold">
R</col>

<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="background-color:#FFFF00;font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>



<col>
R</col>

<col>
4</col>
<col>
 1[4]11111</col>
</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col Height="12">
8</col>
<col style="font-weight:bold">
E</col>

<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="background-color:#FFFF00;font-weight:bold">
B</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>




<col>
E</col>
<col>
4</col>
<col>
 B[4]11111</col>
</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col Height="12">
9</col>
<col style="font-weight:bold">
R</col>

<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="background-color:#FFFF00;font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="font-weight:bold">
1</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>
<col style="color:#808080">
B</col>




<col>
R</col>
<col>
H</col>
<col>
 1[H]1111</col>
</row>
</table>
</p>

</sec>
<sec>
<st>
 Example: Counter-machine versus Turing-machine computation </st>
<p>

This example is even more detailed than the above, because here the counter machine is specified to be a <it>simulation</it> in an EXCEL spread sheet. Where the "user" puts the parameters in the spreadsheet does matter.</p>
<p>

We also observe that, while superficially similar, the core of the two algorithms is truly different: in this example the counter machine has to increment "m" times its parameter "n". (i.e. to add "m"=three to "n", increment "n" three times). In the Turing machine case the machine just had to fill in the first blank it came to, then find its way "home". It could have halted after filling in if we had specified this as acceptable. But the counter machine algorithm does not have this option.</p>
<p>

Thus we conclude that: <it>the algorithm is machine dependent</it>.  </p>
<p>

<indent level="1">

(i) <b>Number format</b>: Positive integers (and 0) expressed in conventional decimal notation, one (unbounded) decimal integer per register. Zero is considered to be numeral 0 -- the empty count, null, "blank B". The numerals themselves are simply abbreviations for unary counts within the registers:
</indent>
:: "0" = B; "1" = |, "2" = | |, "3" = | | |   </p>
<p>

<indent level="1">

(iia) <b>(Virtual, simulated) machine type</b>: The machine to be used in the computation as a <link xlink:type="simple" xlink:href="../543/7583543.xml">
counter machine</link> is equipped with only 3 registers (alternately: "Only three registers #0, #1, #2 will be used"). The instruction set will be the following three Minsky (1967) instructions:
</indent>
:: <b>INC</b> [ r ] ; <b>INC</b>rement contents of register r, proceed to next instruction in sequence: [ r ] +1 → r , &amp; [ state-machine instruction counter ]+1 → state-machine instruction counter  </p>
<p>

<indent level="2">

 <b>DEC</b> [ r ] ;<b>DEC</b>rement contents of register r, proceed to next instruction in sequence: [ r ] -1 → r , &amp; [ state-machine instruction counter ] +1 → [ state-machine instruction counter   
</indent>

<indent level="2">

 <b>JZ</b> [ r, z ] ;<b>J</b>ump if contents of register r is <b>Z</b>ero then go to instruction z else proceed to next instruction in sequence.
</indent>

<indent level="2">

 <b>H</b> ; <b>H</b>ALT
</indent>

<indent level="1">

(ib) <b>Target (actual) machine:</b> An EXCEL spreadsheet run on an Intel Pentium processor decodes/interpretates the instructions and "runs" the (simulated) counter machine. The instructions -- one per cell -- are represented by symbol strings, for example, "I N C" or "i n c"; the instruction-operands are represented by decimal numeral symbols "3", "14", etc. 
</indent>

<indent level="1">

(iii) <b>Head Location</b>: No tape head is required. The instructions' operands -- one per cell -- are explicit names of the registers upon which the action will be taken and/or explicit jump-to addresses.
</indent>

<indent level="1">

(iv) <b>Location of the Program</b>: The (virtual-) counter-machine program will be in its finite-state TABLE of instructions: In the EXCEL simulation this virtual program is located in the cells that represent the state-machine TABLE of instructions.
</indent>

<indent level="1">

(iv) <b>The program</b>: A formal program listing is shown below.  
</indent>

<b>High-level description:</b></p>
<p>

<indent level="1">

Repeat until register #2 is 0:
</indent>
:: While counting down the contents of register #2 to zero, count up the contents of register #1. The sum will accumulate in register #1. </p>
<p>

<b>Implementation description :</b>
<indent level="1">

<b>Implementation specification:</b>
</indent>

<indent level="1">

(a) <b>Input format</b>: The two arguments (m, n) of function "m+n" (e.g. "sum(m, n)") will be represented as integers expressed in conventional decimal notation, one (unbounded) decimal numeral per register. Unused registers will be considered to be blank/empty/of zero-count. Register #0 is reserved to hold the numeral “0” (blank, empty, zero-count). The following symbolism [ 5 ] means "contents of register 5":
</indent>
:: Example: integer 5 in register "3", [ 3 ] = symbol "5" = | | | | | </p>
<p>

<indent level="1">

(b) <b>Initial location of arguments</b>: The first argument "m" will be register #1, the second argument "n" in register #2.
</indent>
:: Example: 2+3, [ 0 ]=0, [ 1 ] =m, [ 2 ] =n</p>
<p>

<indent level="1">

(c) <b>Halt upon successful computation: </b>: If the function m+n successfully assigns a value Σ to the arguments (m, n) that are represented initially on the tape, then the machine will eventually halt with the numeral Σ, represented in conventional decimal symbols, in a single register and otherwise-empty registers:
</indent>
:: Example: m+n=∑, [ 0 ] =0, [ 1 ] =∑, [ 2 ] =0</p>
<p>

<indent level="1">

(d) <b>Halt upon successful computation: register specified to hold output:</b>In this case [c] the machine will halt with the computation (sum Σ) in register #1: 
</indent>
:: Example: 3+2=5, [ 0 ] =0, [ 1 ] =5, [ 2 ] =0</p>
<p>

<indent level="1">

(e) <b>Unsuccessful computation:</b> If the function that is to be computed assigns no value to the arguments that are represented initially in the registers, then the machine either will never halt, or will halt in some nonstandard configuration:
</indent>
:: Example: [ 0 ] =3, [ 1 ] =0, [ 2 ] = 42, etc.</p>
<p>

<b>Implementation description:</b></p>
<p>

<list>
<entry level="2" type="bullet">

steps 1, 5: Test for n+0 and by implication 0+0: if register #2 is zero, then go to step 5 ’’done’’ else continue:</entry>
<entry level="2" type="bullet">

steps 2, 3: Decrement register #2 and increment register #1; register #1 is accumulationg counts that will, upon halt, represent the sum.</entry>
<entry level="2" type="bullet">

step 4: Unconditionally jump back to step 1 as follows: Test constant-register #0 for 0 (i.e. [ 0 ] =0) and upon (always-)successful test jump back to step 1.</entry>
</list>
</p>
<p>

<b>Formal description:</b>
<indent level="1">

The program is written in “assembly code” mnemonics to be interpreted by an EXCEL program. Either upper- or lower-case may be used, but the spellings are mandatory. The format of <it>how</it> and <it>where</it> to put the code will be seen below and in the example:
</indent>

Conventional assembly code listing:
<indent level="1">

 "m+n":
</indent>
:: 1 JZ (2,5) ;[ 2 ]=m: If [ 2 ]=0 then instruction 5 else continue 
<indent level="2">

 2 DEC (2) ;Decrement count in register #2: [ 2 ] -1 →  2 
</indent>
:: 3 INC (1) ;[ 1 ] =n or sum: Increment count in register #1: [ 1 ] +1 → 1
<indent level="2">

 4 JZ (0,1) ; IF [ 0  =0 then jump to instruction 1 else continue.
</indent>
:: 5 HALT </p>
<p>

The instruction "operation-codes" (assembly mnemonics) are to appear from left to right below their instruction numbers. The instruction "operands" (numerals) are to appear from left to right in separate cells below their mnemonics, as shown: 
<table class="wikitable">
<row style="font-size:9pt" align="center" valign="bottom">
<col width="55.8" Height="11.4">
Instruction #:</col>
<col width="16.2">
1</col>
<col width="16.2">
2</col>
<col width="16.2">
3</col>
<col width="19.2">
4</col>
<col width="19.2">
5</col>
</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col Height="11.4">
Instruction:</col>
<col>
JZ</col>
<col>
DEC</col>
<col>
INC</col>
<col>
JZ</col>
<col>
H</col>
</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col Height="11.4">
register #:</col>
<col>
2</col>
<col>
2</col>
<col>
1</col>
<col>
0</col>

</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col Height="11.4">
Jump-to #:</col>
<col>
5</col>


<col>
1</col>

</row>
</table>
</p>
<p>

An example of the run of the program; time runs down the page:
<table class="wikitable">
<row style="font-size:9pt" align="center" valign="bottom">
<col width="46.8" Height="11.4"></col>
<col width="43.2"></col>
<col width="43.2"></col>
<col width="27"></col>
<col width="27"></col>
<col width="27"></col>
<col width="55.8">
Instruction #:</col>
<col width="16.2">
1</col>
<col width="16.2">
2</col>
<col width="16.2">
3</col>
<col width="19.2">
4</col>
<col width="19.2">
5</col>
<col width="47.4"></col>
</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col Height="11.4"></col>





<col>
Instruction:</col>
<col>
JZ</col>
<col>
DEC</col>
<col>
INC</col>
<col>
JZ</col>
<col>
H</col>

</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col Height="11.4"></col>





<col>
register #:</col>
<col>
2</col>
<col>
2</col>
<col>
1</col>
<col>
0</col>


</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col Height="11.4"></col>





<col>
Jump-to #:</col>
<col>
5</col>


<col>
1</col>


</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col Height="11.4"></col>











<col>
Next Inst#</col>
</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col Height="11.4">
Instruction</col>
<col>
register #</col>
<col>
Jump-to #</col>
<col>
reg 0</col>
<col>
reg 1</col>
<col>
reg 2</col>







</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col Height="11.4">
start</col>


<col>
0</col>
<col>
2</col>
<col>
3</col>






<col>
1</col>
</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col style="font-weight:bold" Height="12">
JZ</col>
<col>
2</col>
<col>
5</col>
<col>
0</col>
<col>
2</col>
<col>
3</col>

<col style="background-color:#CCFFFF">
JZ</col>




<col>
2</col>
</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col style="font-weight:bold" Height="12">
DEC</col>
<col>
2</col>
<col>
0</col>
<col>
0</col>
<col>
2</col>
<col style="background-color:#FFFF99">
2</col>


<col style="background-color:#CCFFFF">
DEC</col>



<col>
3</col>
</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col style="font-weight:bold" Height="12">
INC</col>
<col>
1</col>
<col>
0</col>
<col>
0</col>
<col style="background-color:#FFFF99">
3</col>
<col>
2</col>



<col style="background-color:#CCFFFF">
U</col>


<col>
4</col>
</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col style="font-weight:bold" Height="12">
JZ</col>
<col>
0</col>
<col>
1</col>
<col style="background-color:#FFFF99">
0</col>
<col>
3</col>
<col>
2</col>




<col style="background-color:#CCFFFF">
JZ</col>

<col>
1</col>
</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col style="font-weight:bold" Height="12">
JZ</col>
<col>
2</col>
<col>
5</col>
<col>
0</col>
<col>
3</col>
<col style="background-color:#FFFF99">
2</col>

<col style="background-color:#CCFFFF">
JZ</col>




<col>
2</col>
</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col style="font-weight:bold" Height="12">
DEC</col>
<col>
2</col>
<col>
0</col>
<col>
0</col>
<col>
3</col>
<col style="background-color:#FFFF99">
1</col>


<col style="background-color:#CCFFFF">
DEC</col>



<col>
3</col>
</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col style="font-weight:bold" Height="12">
INC</col>
<col>
1</col>
<col>
0</col>
<col>
0</col>
<col style="background-color:#FFFF99">
4</col>
<col>
1</col>



<col style="background-color:#CCFFFF">
INC</col>


<col>
4</col>
</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col style="font-weight:bold" Height="12">
JZ</col>
<col>
0</col>
<col>
1</col>
<col style="background-color:#FFFF99">
0</col>
<col>
4</col>
<col>
1</col>




<col style="background-color:#CCFFFF">
JZ</col>

<col>
1</col>
</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col style="font-weight:bold" Height="12">
JZ</col>
<col>
2</col>
<col>
5</col>
<col>
0</col>
<col>
4</col>
<col style="background-color:#FFFF99">
1</col>

<col style="background-color:#CCFFFF">
JZ</col>




<col>
2</col>
</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col style="font-weight:bold" Height="12">
DEC</col>
<col>
2</col>
<col>
0</col>
<col>
0</col>
<col>
4</col>
<col style="background-color:#FFFF99">
0</col>


<col style="background-color:#CCFFFF">
DEC</col>



<col>
3</col>
</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col style="font-weight:bold" Height="12">
INC</col>
<col>
1</col>
<col>
0</col>
<col>
0</col>
<col style="background-color:#FFFF99">
5</col>
<col>
0</col>



<col style="background-color:#CCFFFF">
INC</col>


<col>
4</col>
</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col style="font-weight:bold" Height="12">
JZ</col>
<col>
0</col>
<col>
1</col>
<col style="background-color:#FFFF99">
0</col>
<col>
5</col>
<col>
0</col>




<col style="background-color:#CCFFFF">
JZ</col>

<col>
1</col>
</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col style="font-weight:bold" Height="12">
JZ</col>
<col>
2</col>
<col>
5</col>
<col>
0</col>
<col>
5</col>
<col style="background-color:#FFFF99">
0</col>

<col style="background-color:#CCFFFF">
JZ</col>




<col>
5</col>
</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col style="font-weight:bold" Height="12">
H</col>
<col>
0</col>
<col>
0</col>
<col>
0</col>
<col>
5</col>
<col>
0</col>





<col style="background-color:#CCFFFF">
H</col>
<col>
5</col>
</row>
</table>
</p>
<p>

= Footnotes =
<list>
<entry level="1" type="bullet">

Footnote: Coding instructions for the finite state machine (FSM):</entry>
</list>

Models of machine computation such as the Turing machine and counter-machine are considered to be, in a sense, real machines. That is, their finite cousins have to be buildable if someone were so inclined. In the literature, examples of coding for the models usually stop at the tabular level (tables of 4- or 5-tuples) for Turing machines and at the mnemonic level for the various <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<model wordnetid="110324560" confidence="0.8">
<assistant wordnetid="109815790" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../218/505218.xml">
Register machine</link></causal_agent>
</worker>
</assistant>
</model>
</person>
</physical_entity>
 models
<indent level="1">

Example for the <link xlink:type="simple" xlink:href="../147/3688147.xml">
Post-Turing machine</link> model: { L, R, E, P, J0 xxx; J1 xxx; H }. 
</indent>

In his paper (1936) Turing went a level further and encoded his tabular 5-tuples into a string of numbers chosen from 1-7. But this encoding was for the instructions of his "universal machine" to be put on the tape. He did not go into much detail with regards to encoding instructions for the finite state machine.</p>
<p>

The standard methods of bottom-level encoding are of only a few types and always use numbers, because symbols other than numbers can be easily translated into number-equivalents (cf Boolos-Burgess-Jeffrey):
<list>
<entry level="1" type="bullet">

 Unary, e.g. "3" = | | |, or more likely if "0" = |, "3" = | | | | </entry>
<entry level="1" type="bullet">

 One of n: where each column is similar to "a wire" with a condition of "1" or "0 = empty". A number is thus represented as an <link xlink:type="simple" xlink:href="../365/22365.xml">
ordinal</link>.</entry>
</list>

<table class="wikitable">
<row style="font-size:9pt">
<col width="31.8" Height="11.4" valign="bottom">
number</col>
<col width="15.6" valign="bottom">
1st</col>
<col width="15.6" valign="bottom">
2nd</col>
<col width="15.6" valign="bottom">
3rd</col>
<col width="15.6" valign="bottom">
4th</col>
<col width="16.8" valign="bottom">
5th</col>
<col align="center" width="18.6" valign="bottom">
...</col>
<col width="24.6" valign="bottom">
n+1th</col>
</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col Height="11.4">
0</col>
<col style="background-color:#FFFF99">
1</col>
<col style="background-color:#CCFFCC"></col>
<col style="background-color:#CCFFFF"></col>
<col style="background-color:#CC99FF"></col>
<col style="background-color:#FF99CC"></col>

<col style="background-color:#C0C0C0;color:#969696"></col>
</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col Height="11.4">
1</col>
<col style="background-color:#FFFF99"></col>
<col style="background-color:#CCFFCC">
1</col>
<col style="background-color:#CCFFFF"></col>
<col style="background-color:#CC99FF"></col>
<col style="background-color:#FF99CC"></col>

<col style="background-color:#C0C0C0;color:#969696"></col>
</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col Height="11.4">
2</col>
<col style="background-color:#FFFF99"></col>
<col style="background-color:#CCFFCC"></col>
<col style="background-color:#CCFFFF">
1</col>
<col style="background-color:#CC99FF"></col>
<col style="background-color:#FF99CC"></col>

<col style="background-color:#C0C0C0;color:#969696"></col>
</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col Height="11.4">
3</col>
<col style="background-color:#FFFF99"></col>
<col style="background-color:#CCFFCC"></col>
<col style="background-color:#CCFFFF"></col>
<col style="background-color:#CC99FF">
1</col>
<col style="background-color:#FF99CC"></col>

<col style="background-color:#C0C0C0;color:#969696"></col>
</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col Height="11.4">
...</col>
<col style="background-color:#FFFF99"></col>
<col style="background-color:#CCFFCC"></col>
<col style="background-color:#CCFFFF"></col>
<col style="background-color:#CC99FF"></col>
<col style="background-color:#FF99CC">
1</col>
<col>
....</col>
<col style="background-color:#C0C0C0;color:#969696"></col>
</row>
<row style="font-size:9pt" align="center" valign="bottom">
<col Height="9.6">
n</col>
<col style="background-color:#FFFF99"></col>
<col style="background-color:#CCFFCC"></col>
<col style="background-color:#CCFFFF"></col>
<col style="background-color:#CC99FF"></col>
<col style="background-color:#FF99CC"></col>

<col style="background-color:#C0C0C0">
1</col>
</row>
</table>
</p>
<p>

<list>
<entry level="1" type="bullet">

 polynomial: base-n, e.g. binary, decimal </entry>
<entry level="2" type="indent">

 binary: n0*20 + n0*21 + n2*22 + ... + nm*2m</entry>
<entry level="2" type="indent">

 decimal: n0*100 + n0*101 + n2*102 + ... + nm*10m</entry>
<entry level="1" type="bullet">

 <link>
Gödel numbering</link> expressed in, probably, binary or decimal</entry>
</list>
</p>


<p>

The solution will depend on the nature of the "memory" of the FSM. If it is built from a typical binary <link xlink:type="simple" xlink:href="../847/25847.xml">
Random access memory</link> then the instruction "address" (number) will have to be encoded as binary. The instruction code can be chosen from whatever method is most easy to decode and "fits in the width of the memory".</p>
<p>

This is not a trivial problem, and appears in the work of authors who are encoding for purposes of comparing algorithms [example?]. What they tend to do is use e.g. two consecutive 8-bit memory "cells" for every instruction (or e.g. 2 x 16 bit). Thus they might encode an instruction set as follows:
<indent level="1">

FSM encoding for up to 128 registers and 256 instructions with an 8-bit random-access memory with two consecutive 8-bit bytes:
</indent>
:: *0hhhhhhh: the identifier-number/location/identifier of register h expressed in binary (0 through 127). Example: register #5 = 00000101
<indent level="2">

 *xxxxxxxx: the jump-to address expressed in binary (0 through 255)
</indent>
* INC h = 00000001, 0hhhhhhh
<list>
<entry level="1" type="bullet">

 DEC h = 00000010, 0hhhhhhh </entry>
<entry level="1" type="bullet">

 JZ h,x = 1hhhhhhh, xxxxxxxx</entry>
<entry level="1" type="bullet">

 HALT = 111----- are both expressed in binary</entry>
</list>
</p>
<p>

Thus the first byte always specifies the instruction type. And this type specifies where the 7-bit register number hhhhhhh and the jump-to address will be. But such coding complicates the finite state machine -- it must be smart enough to know (i) interleave and (ii) that if 011hhhhh occurs then the next instruction will be a jump-to address. And if a mistake is made, the machine can begin to "execute" operands instead of instructions.</p>

</sec>
<sec>
<st>
References</st>
<p>

<list>
<entry level="1" type="bullet">

 <cite id="Reference-Boolos, George and Jeffrey, Richard-1974, 1980, 1989, 1999" style="font-style:normal" class="book"><link>
Boolos, George and Jeffrey, Richard</link>&#32;(1974, 1980, 1989, 1999). Computability and Logic, First Edition,&#32;Cambridge University Press, London.</cite>&nbsp;. cf chapter 3 <it>Turing machines</it> where they discuss "certain enumerable sets not effectively (mechanically) enumerable".</entry>
<entry level="1" type="bullet">

<person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../019/11851019.xml">
Andreas Blass</link></scientist>
</person>
 and <physical_entity wordnetid="100001930" confidence="0.8">
<peer wordnetid="109626238" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<colleague wordnetid="109935990" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<employee wordnetid="110053808" confidence="0.8">
<associate wordnetid="109816771" confidence="0.8">
<link xlink:type="simple" xlink:href="../014/16488014.xml">
Yuri Gurevich</link></associate>
</employee>
</scientist>
</causal_agent>
</colleague>
</worker>
</person>
</peer>
</physical_entity>
 (2003), <weblink xlink:type="simple" xlink:href="http://research.microsoft.com/~gurevich/Opera/164.pdf">
<it>Algorithms: A Quest for Absolute Definitions''</it></weblink>, Bulletin of European Association for Theoretical Computer Science 81, 2003. Includes an excellent bibliography of 56 references.</entry>
<entry level="1" type="bullet">

 <cite style="font-style:normal"><scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../731/49731.xml">
Church, Alonzo</link></scientist>
&#32;(1936).&#32;"An Unsolvable Problem of Elementary Number Theory". <it>The American Journal Of Mathematics</it>&#32;<b>58</b>: 345–363. <document wordnetid="106470073" confidence="0.8">
<written_communication wordnetid="106349220" confidence="0.8">
<writing wordnetid="106362953" confidence="0.8">
<link xlink:type="simple" xlink:href="../994/422994.xml">
doi</link></writing>
</written_communication>
</document>
:<weblink xlink:type="simple" xlink:href="http://dx.doi.org/10.2307%2F2371045">
10.2307/2371045</weblink>.</cite>&nbsp; Reprinted in <it>The Undecidable</it>, p. 89ff. The first expression of "Church's Thesis". See in particular page 100 (<it>The Undecidable</it>) where he defines the notion of "effective calculability" in terms of "an algorithm", and he uses the word "terminates", etc.</entry>
<entry level="1" type="bullet">

 <cite id="Reference-Davis-1965" style="font-style:normal" class="book"><physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<intellectual wordnetid="109621545" confidence="0.8">
<alumnus wordnetid="109786338" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<mathematician wordnetid="110301261" confidence="0.8">
<scholar wordnetid="110557854" confidence="0.8">
<link xlink:type="simple" xlink:href="../041/953041.xml">
Davis, Martin</link></scholar>
</mathematician>
</scientist>
</causal_agent>
</alumnus>
</intellectual>
</person>
</physical_entity>
&#32;(1965). The Undecidable: Basic Papers On Undecidable Propostions, Unsolvable Problems and Computable Functions.&#32;New York:&#32;Raven Press.</cite>&nbsp; Davis gives commentary before each article. Papers of <link>
Gödel</link>, <scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../731/49731.xml">
Alonzo Church</link></scientist>
, <link xlink:type="simple" xlink:href="../272/175272.xml">
Turing</link>, <link xlink:type="simple" xlink:href="../225/679225.xml">
Rosser</link>, <link xlink:type="simple" xlink:href="../805/28805.xml">
Kleene</link>, and <link xlink:type="simple" xlink:href="../382/362382.xml">
Emil Post</link> are included.</entry>
<entry level="1" type="bullet">

 <cite id="Reference-Davis-2000" style="font-style:normal" class="book"><physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<intellectual wordnetid="109621545" confidence="0.8">
<alumnus wordnetid="109786338" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<mathematician wordnetid="110301261" confidence="0.8">
<scholar wordnetid="110557854" confidence="0.8">
<link xlink:type="simple" xlink:href="../041/953041.xml">
Davis, Martin</link></scholar>
</mathematician>
</scientist>
</causal_agent>
</alumnus>
</intellectual>
</person>
</physical_entity>
&#32;(2000). Engines of Logic: Mathematicians and the Origin of the Computer.&#32;New York:&#32;W. W. Nortion.</cite>&nbsp; Davis offers concise biographies of <link xlink:type="simple" xlink:href="../281/12281.xml">
Leibniz</link>, <link xlink:type="simple" xlink:href="../298/38298.xml">
Boole</link>, <link xlink:type="simple" xlink:href="../416/48416.xml">
Frege</link>, <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../216/12216.xml">
Cantor</link></scientist>
</person>
, <link xlink:type="simple" xlink:href="../302/8302.xml">
Hilbert</link>, <link>
Gödel</link> and <link xlink:type="simple" xlink:href="../272/175272.xml">
Turing</link> with <link xlink:type="simple" xlink:href="../942/15942.xml">
von Neumann</link> as the show-stealing villain. Very brief bios of <link xlink:type="simple" xlink:href="../918/142918.xml">
Joseph-Marie Jacquard</link>, <link xlink:type="simple" xlink:href="../698/5698.xml">
Babbage</link>, <scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../974/974.xml">
Ada Lovelace</link></scientist>
, <scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../693/5693.xml">
Claude Shannon</link></scientist>
, <link xlink:type="simple" xlink:href="../446/342446.xml">
Howard Aiken</link>, etc.</entry>
<entry level="1" type="bullet">

 Paul E. Black, <weblink xlink:type="simple" xlink:href="http://www.nist.gov/dads/HTML/algorithm.html">
algorithm</weblink> at the <link xlink:type="simple" xlink:href="../888/21888.xml">
NIST</link> <link xlink:type="simple" xlink:href="../551/1661551.xml">
Dictionary of Algorithms and Data Structures</link>.</entry>
<entry level="1" type="bullet">

<physical_entity wordnetid="100001930" confidence="0.8">
<peer wordnetid="109626238" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<colleague wordnetid="109935990" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<employee wordnetid="110053808" confidence="0.8">
<associate wordnetid="109816771" confidence="0.8">
<link xlink:type="simple" xlink:href="../014/16488014.xml">
Yuri Gurevich</link></associate>
</employee>
</scientist>
</causal_agent>
</colleague>
</worker>
</person>
</peer>
</physical_entity>
, <weblink xlink:type="simple" xlink:href="http://research.microsoft.com/~gurevich/Opera/141.pdf">
<it>Sequential Abstract State Machines Capture Sequential Algorithms''</it></weblink>, ACM Transactions on Computational Logic, Vol 1, no 1 (July 2000), pages 77-111. Includes bibliography of 33 sources.</entry>
<entry level="1" type="bullet">

 <cite id="Reference-Kleene-First Edition 1952" style="font-style:normal" class="book"><link xlink:type="simple" xlink:href="../805/28805.xml">
Kleene, Stephen C.</link>&#32;(First Edition 1952). Introduction to Metamathematics, Tenth Edition 1991,&#32;North-Holland Publishing Company.</cite>&nbsp; Excellent -- accessible, readable -- reference source for mathematical "foundations".</entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../915/915.xml">
A. A. Markov</link> (1954) <it>Theory of algorithms</it>. [Translated by Jacques J. Schorr-Kon and PST staff] Imprint Moscow, Academy of Sciences of the USSR, 1954 [i.e. Jerusalem, Israel Program for Scientific Translations, 1961; available from the Office of Technical Services, U.S. Dept. of Commerce, Washington] Description 444 p. 28 cm. Added t.p. in Russian Translation of Works of the Mathematical Institute, Academy of Sciences of the USSR, v. 42. Original title: Teoriya algerifmov. [QA248.M2943 Dartmouth College library. U.S. Dept. of Commerce, Office of Technical Services, number OTS 60-51085.]</entry>
<entry level="1" type="bullet">

 <cite id="Reference-Minsky-1967" style="font-style:normal" class="book"><link xlink:type="simple" xlink:href="../450/7158450.xml">
Minsky, Marvin</link>&#32;(1967). Computation: Finite and Infinite Machines, First,&#32;Prentice-Hall, Englewood Cliffs, NJ.</cite>&nbsp; Minsky expands his "...idea of an algorithm -- an effective procedure..." in chapter 5.1 <it>Computability, Effective Procedues and Algorithms. Infinite machines."</it></entry>
<entry level="1" type="bullet">

 <cite style="font-style:normal"><link xlink:type="simple" xlink:href="../382/362382.xml">
Post, Emil</link>&#32;(1936).&#32;"Finite Combinatory Processes, Formulation I". <it>The Journal of Symbolic Logic</it>&#32;<b>1</b>: pp.103–105. <document wordnetid="106470073" confidence="0.8">
<written_communication wordnetid="106349220" confidence="0.8">
<writing wordnetid="106362953" confidence="0.8">
<link xlink:type="simple" xlink:href="../994/422994.xml">
doi</link></writing>
</written_communication>
</document>
:<weblink xlink:type="simple" xlink:href="http://dx.doi.org/10.2307%2F2269031">
10.2307/2269031</weblink>.</cite>&nbsp; Reprinted in <it>The Undecidable</it>, p. 289ff. Post defines a simple algorithmic-like process of a man writing marks or erasing marks and going from box to box and eventually halting, as he follows a list of simple instructions. This is cited by Kleene as one source of his "Thesis I", the so-called <link xlink:type="simple" xlink:href="../854/6854.xml">
Church-Turing thesis</link>.   </entry>
<entry level="1" type="bullet">

 <cite style="font-style:normal"><link xlink:type="simple" xlink:href="../224/679224.xml">
Rosser, J.B.</link>&#32;(1939).&#32;"An Informal Exposition of Proofs of Godel's Theorem and Church's Theorem". <it>Journal of Symbolic Logic</it>&#32;<b>4</b>.</cite>&nbsp; Reprinted in <it>The Undecidable</it>, p. 223ff. Herein is Rosser's famous definition of "effective method": "...a method each step of which is precisely predetermined and which is certain to produce the answer in a finite number of steps... a machine which will then solve any problem of the set with no human intervention beyond inserting the question and (later) reading the answer" (p. 225-226, <it>The Undecidable</it>)</entry>
<entry level="1" type="bullet">

 <cite style="font-style:normal" class="book">Sipser, Michael. Introduction to The Theory of Compution, Second Edition, 2006,&#32;Thomson Course Technology, Boston MA.</cite>&nbsp; cf Chapter 3 The Church Turing Thesis p. 137 wherein he presents his |3.3 The Definition of Algorithm.</entry>
<entry level="1" type="bullet">

 <cite style="font-style:normal" class="book">Stone, Harold S.. Introduction to Computer Organization and Data Structures, 1972,&#32;McGraw-Hill, New York.</cite>&nbsp; Cf in particular the first chapter titled: <it>Algorithms, Turing Machines, and Programs</it>. His succinct informal definition: "...any sequence of instructions that can be obeyed by a robot, is called an <it>algorithm</it>" (p. 4).</entry>
</list>
</p>


</sec>
</bdy>
</causal_agent>
</method>
</worker>
</know-how>
</assistant>
</model>
</person>
</physical_entity>
</article>
