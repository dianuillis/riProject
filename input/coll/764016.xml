<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 17:38:39[mciao0825] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<structure  confidence="0.8" wordnetid="105726345">
<form  confidence="0.8" wordnetid="105930736">
<header>
<title>Thread pool pattern</title>
<id>764016</id>
<revision>
<id>221311467</id>
<timestamp>2008-06-23T23:42:38Z</timestamp>
<contributor>
<username>Ghettoblaster</username>
<id>6603820</id>
</contributor>
</revision>
<categories>
<category>Software design patterns</category>
<category>Threads</category>
</categories>
</header>
<bdy>

<image width="400px" src="Thread_pool.svg" type="thumb">
<caption>

A sample thread pool (green boxes) with waiting tasks (blue) and completed tasks (yellow)
</caption>
</image>
<p>

In the <b>thread pool pattern</b> in <link xlink:type="simple" xlink:href="../311/5311.xml">
programming</link>, a number of <link xlink:type="simple" xlink:href="../303/45303.xml">
threads</link> are created to perform a number of tasks, which are usually organized in a <link xlink:type="simple" xlink:href="../265/25265.xml">
queue</link>. Typically, there are many more tasks than threads.  As soon as a thread completes its task, it will request the next task from the queue until all tasks have been completed. The thread can then terminate, or sleep until there are new tasks available.</p>
<p>

The number of threads used is a parameter that can be tuned to provide the best performance.
Additionally, the number of threads can be dynamic based on the number of waiting tasks.
For example, a <link xlink:type="simple" xlink:href="../455/33455.xml">
web server</link> can add threads if numerous <link xlink:type="simple" xlink:href="../063/34063.xml">
web page</link> requests come in and can remove threads when those requests taper down.
The cost of having a larger thread pool is increased resource usage.
The algorithm that determines when creating or destroying threads will have an impact on the overall performance:
<list>
<entry level="1" type="bullet">

 create too many threads and resources are wasted and time also wasted creating the unused threads</entry>
<entry level="1" type="bullet">

 destroy too many threads and more time will be spent later creating them again</entry>
<entry level="1" type="bullet">

 creating threads too slowly might result in poor client performance (long wait times)</entry>
<entry level="1" type="bullet">

 destroying threads too slowly may starve other processes of resources</entry>
</list>

The algorithm chosen will depend on the problem and the expected usage patterns.</p>
<p>

The advantage of using a thread pool over creating a new thread for each <link xlink:type="simple" xlink:href="../191/1655191.xml">
task</link>, is that thread creation and destruction overhead is negated, which may result in better <link xlink:type="simple" xlink:href="../801/225801.xml">
performance</link> and better system <link xlink:type="simple" xlink:href="../946/28946.xml">
stability</link>.</p>
<p>

When implementing this pattern, the programmer should ensure <link xlink:type="simple" xlink:href="../634/45634.xml">
thread-safety</link> of the queue.</p>
<p>

Typically, a thread pool executes on a single processor. However, thread pools are conceptually related to <link xlink:type="simple" xlink:href="../929/264929.xml">
server farms</link> in which a master process distributes tasks to worker processes on different computers, in order to increase the overall throughput. <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../712/1738712.xml">
Embarrassingly parallel</link></instrumentality>
</artifact>
</system>
 problems are highly amenable to this approach.</p>

<sec>
<st>
See also</st>
<p>

<list>
<entry level="1" type="bullet">

<structure wordnetid="105726345" confidence="0.8">
<form wordnetid="105930736" confidence="0.8">
<link xlink:type="simple" xlink:href="../068/855068.xml">
Concurrency pattern</link></form>
</structure>
</entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../162/145162.xml">
Parallelization</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../929/264929.xml">
Server farm</link></entry>
</list>
</p>

</sec>
<sec>
<st>
External links</st>
<p>

<list>
<entry level="1" type="bullet">

Article "<weblink xlink:type="simple" xlink:href="http://today.java.net/pub/a/today/2008/01/31/query-by-slice-parallel-execute-join-thread-pool-pattern.html">
Query by Slice, Parallel Execute, and Join: A Thread Pool Pattern in Java</weblink>" by <link>
Binildas C. A.</link></entry>
<entry level="1" type="bullet">

Article "<weblink xlink:type="simple" xlink:href="http://www-128.ibm.com/developerworks/java/library/j-jtp0730.html">
Thread pools and work queues</weblink>" by <link>
Brian Goetz</link></entry>
<entry level="1" type="bullet">

Article "<weblink xlink:type="simple" xlink:href="http://www.codeproject.com/threads/thread_pooling.asp">
A Method of Worker Thread Pooling</weblink>" by <link>
Pradeep Kumar Sahu</link></entry>
<entry level="1" type="bullet">

Article "<weblink xlink:type="simple" xlink:href="http://codeproject.com/threads/work_queue.asp">
Work Queue</weblink>" by <link>
Uri Twig</link></entry>
<entry level="1" type="bullet">

Article "<weblink xlink:type="simple" xlink:href="http://codeproject.com/threads/Joshthreadpool.asp">
Windows Thread Pooling and Execution Chaining</weblink>"</entry>
<entry level="1" type="bullet">

Article "<weblink xlink:type="simple" xlink:href="http://www.codeproject.com/cs/threads/smartthreadpool.asp">
Smart Thread Pool</weblink>" by <link>
Ami Bar</link></entry>
<entry level="1" type="bullet">

Article "<weblink xlink:type="simple" xlink:href="http://msdn.microsoft.com/library/en-us/dndotnet/html/progthrepool.asp">
Programming the Thread Pool in the .NET Framework</weblink>" by <link>
David Carmona</link></entry>
<entry level="1" type="bullet">

Article "<weblink xlink:type="simple" xlink:href="http://www.yoda.arachsys.com/csharp/threads/threadpool.shtml">
The Thread Pool and Asynchronous Methods</weblink>" by <link>
Jon Skeet</link></entry>
<entry level="1" type="bullet">

Paper "<weblink xlink:type="simple" xlink:href="http://www.cs.wustl.edu/~schmidt/PDF/OM-01.pdf">
Optimizing Thread-Pool Strategies for Real-Time CORBA</weblink>" by <link>
Irfan Pyarali</link>, <link>
Marina Spivak</link>, <link>
Douglas C. Schmidt</link> and <link>
Ron Cytron</link></entry>
</list>
</p>

</sec>
</bdy>
</form>
</structure>
</article>
