<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 15:20:29[mciao0825] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>Algorithm</title>
<id>775</id>
<revision>
<id>244571300</id>
<timestamp>2008-10-11T14:12:04Z</timestamp>
<contributor>
<username>CBM</username>
<id>1108292</id>
</contributor>
</revision>
<categories>
<category>Discrete mathematics</category>
<category>Wikipedia articles incorporating text from public domain works of the United States Government</category>
<category>Arabic words and phrases</category>
<category>Articles with example pseudocode</category>
<category>Mathematical logic</category>
<category>Algorithms</category>
<category>Theoretical computer science</category>
</categories>
</header>
<bdy>

<image location="right" width="150px" src="LampFlowchart.svg" type="thumb">
</image>
 <p>

In <link xlink:type="simple" xlink:href="../831/18831.xml">
mathematics</link>, <link xlink:type="simple" xlink:href="../213/5213.xml">
computing</link>, <link xlink:type="simple" xlink:href="../526/17526.xml">
linguistics</link> and related subjects, an <b>algorithm</b> is a  sequence of finite instructions, often used for <link xlink:type="simple" xlink:href="../121/239121.xml">
calculation</link> and <link xlink:type="simple" xlink:href="../961/41961.xml">
data processing</link>. It is formally a type of <link xlink:type="simple" xlink:href="../890/12979890.xml">
effective method</link> in which a list of well-defined instructions for completing a task will, when given an initial state, proceed through a well-defined series of successive states, eventually terminating in an end-state. The transition from one state to the next is not necessarily <link xlink:type="simple" xlink:href="../922/47922.xml">
deterministic</link>; some algorithms, known as <link xlink:type="simple" xlink:href="../383/495383.xml">
probabilistic algorithms</link>, incorporate randomness.</p>
<p>

A partial formalization of the concept began with attempts to solve the <link xlink:type="simple" xlink:href="../672/9672.xml">
Entscheidungsproblem</link> (the "decision problem") posed by <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../302/8302.xml">
David Hilbert</link></scientist>
</person>
 in 1928. Subsequent formalizations were framed as attempts to define "<link>
effective calculability</link>" (Kleene 1943:274) or "effective method" (Rosser 1939:225); those formalizations included the Gödel-Herbrand-Kleene <parlance wordnetid="107081177" confidence="0.8">
<formulation wordnetid="107069948" confidence="0.8">
<expressive_style wordnetid="107066659" confidence="0.8">
<link xlink:type="simple" xlink:href="../867/4044867.xml">
recursive function</link></expressive_style>
</formulation>
</parlance>
s of 1930, 1934 and 1935, <scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../731/49731.xml">
Alonzo Church</link></scientist>
's <link xlink:type="simple" xlink:href="../203/18203.xml">
lambda calculus</link> of 1936, <link xlink:type="simple" xlink:href="../382/362382.xml">
Emil Post</link>'s "Formulation I" of 1936, and <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../208/1208.xml">
Alan Turing</link></scientist>
</person>
's <link xlink:type="simple" xlink:href="../403/30403.xml">
Turing machines</link> of 1936–7 and 1939.</p>

<sec>
<st>
Etymology</st>
<p>

<link>
Al-Khwārizmī</link>, <link xlink:type="simple" xlink:href="../607/24607.xml">
Persian</link> <link xlink:type="simple" xlink:href="../580/580.xml">
astronomer</link> and <link xlink:type="simple" xlink:href="../902/18902.xml">
mathematician</link>, wrote a <link xlink:type="simple" xlink:href="../315/11896315.xml">
treatise</link> in 825 AD, <it>On Calculation with Hindu Numerals</it>. (See <link xlink:type="simple" xlink:href="../534/417534.xml">
algorism</link>). It was translated into <language wordnetid="106282651" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../730/17730.xml">
Latin</link></language>
 in the 12th century as <it>Algoritmi de numero Indorum</it> (al-Daffa 1977), which title was likely intended to mean "Algoritmi on the numbers of the Indians", where "Algoritmi" was the translator's rendition of the author's name; but people misunderstanding the title treated <it>Algoritmi</it> as a Latin plural and this led to the word "algorithm" (Latin <it>algorismus</it>) coming to mean "calculation method". The intrusive "th" is most likely due to a <link xlink:type="simple" xlink:href="../676/11676.xml">
false cognate</link> with the Greek ἀριθμός (<it>arithmos</it>) meaning "number".</p>

</sec>
<sec>
<st>
 Why algorithms are necessary: an informal definition </st>

<p>

No generally accepted <it>formal</it> definition of "algorithm" exists yet. </p>
<p>

An informal definition could be "an algorithm is a computer program that calculates something." For some people, a program is only an algorithm if it stops eventually. For others,  a program is only an algorithm if it stops before a given number of calculation steps.</p>
<p>

A prototypical example of an "algorithm" is Euclid's algorithm to determine the maximum common divisor of two integers greater than one: "subtract the smaller number from the larger one; repeat until you get a zero or a one." This procedure is known to stop always and the number of subtractions needed is always smaller than the larger of the two numbers.</p>
<p>

We can derive clues to the issues involved and an informal meaning of the word from the following quotation from <link xlink:type="simple" xlink:href="#xpointer(//cite[@id=%22CITEREFBoolosJeffrey1974=2C_1999%22])">
Boolos &amp; Jeffrey (1974, 1999)</link> (boldface added):</p>
<p>

No human being can write fast enough or long enough or small enough to list all members of an enumerably infinite set by writing out their names, one after another, in some notation. But humans can do something equally useful, in the case of certain enumerably infinite sets: They can give <b>explicit instructions for determining the nth member of the set</b>, for arbitrary finite n. Such instructions are to be given quite explicitly, in a form in which <b>they could be followed by a computing machine</b>, or by a <b>human who is capable of carrying out only very elementary operations on symbols</b>  <cite class="inline">(<link xlink:type="simple" xlink:href="#xpointer(//cite[@id=%22CITEREFBoolosJeffrey1974=2C_1999%22])">
Boolos &amp; Jeffrey 1974, 1999</link>, p.&nbsp;19)</cite></p>
<p>

The words "enumerably infinite" mean "countable using integers perhaps extending to infinity." Thus Boolos and Jeffrey are saying that an algorithm <it>implies</it> instructions for a process that "creates" output integers from an <it>arbitrary</it> "input" integer or integers that, in theory, can be chosen from 0 to infinity. Thus we might expect an algorithm to be an algebraic equation such as <b>y = m + n</b> — two arbitrary "input variables" <b>m</b> and <b>n</b> that produce an output <b>y</b>. As we see in <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<model wordnetid="110324560" confidence="0.8">
<assistant wordnetid="109815790" confidence="0.8">
<know-how wordnetid="105616786" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../703/6901703.xml">
Algorithm characterizations</link></causal_agent>
</method>
</worker>
</know-how>
</assistant>
</model>
</person>
</physical_entity>
 — the word algorithm implies much more than this, something on the order of (for our addition example):
<indent level="1">

Precise instructions (in language understood by "the computer") for a "fast, efficient, good" <it>process</it> that specifies the "moves" of "the computer" (machine or human, equipped with the necessary internally-contained information and capabilities) to find, decode, and then munch arbitrary input integers/symbols <b>m</b> and <b>n</b>, symbols <b>+</b> and <b>=</b> ... and (reliably, correctly, "effectively") produce, in a "reasonable" <link xlink:type="simple" xlink:href="../012/30012.xml">
time</link>, output-integer <b>y</b> at a specified place and in a specified format.
</indent>

The concept of <it>algorithm</it> is also used to define the notion of <link xlink:type="simple" xlink:href="../118/913118.xml">
decidability</link>. That notion is central for explaining how <link xlink:type="simple" xlink:href="../102/396102.xml">
formal system</link>s come into being starting from a small set of <link xlink:type="simple" xlink:href="../928/928.xml">
axiom</link>s and rules. In <link xlink:type="simple" xlink:href="../225/3729225.xml">
logic</link>, the time that an algorithm requires to complete cannot be measured, as it is not apparently related with our customary physical dimension. From such uncertainties, that characterize ongoing work, stems the unavailability of a definition of <it>algorithm</it> that suits both concrete (in some sense) and abstract usage of the term.</p>
<p>

<indent level="1">

<it>For a detailed presentation of the various points of view around the definition of "algorithm" see <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<model wordnetid="110324560" confidence="0.8">
<assistant wordnetid="109815790" confidence="0.8">
<know-how wordnetid="105616786" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../703/6901703.xml">
Algorithm characterizations</link></causal_agent>
</method>
</worker>
</know-how>
</assistant>
</model>
</person>
</physical_entity>
. For examples of simple addition algorithms specified in the detailed manner described in <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<model wordnetid="110324560" confidence="0.8">
<assistant wordnetid="109815790" confidence="0.8">
<know-how wordnetid="105616786" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../703/6901703.xml">
Algorithm characterizations</link></causal_agent>
</method>
</worker>
</know-how>
</assistant>
</model>
</person>
</physical_entity>
, see <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<model wordnetid="110324560" confidence="0.8">
<assistant wordnetid="109815790" confidence="0.8">
<know-how wordnetid="105616786" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../920/7585920.xml">
Algorithm examples</link></causal_agent>
</method>
</worker>
</know-how>
</assistant>
</model>
</person>
</physical_entity>
.</it>
</indent>

</p>
</sec>
<sec>
<st>
 Formalization of algorithms </st>

<p>

Algorithms are essential to the way <link xlink:type="simple" xlink:href="../457/7878457.xml">
computer</link>s process information.  Many <link xlink:type="simple" xlink:href="../783/5783.xml">
computer program</link>s contain algorithms that specify the specific instructions a computer should perform (in a specific order) to carry out a specified task, such as calculating employees’ paychecks or printing students’ report cards. Thus, an algorithm can be considered to be any sequence of operations that can be simulated by a <link xlink:type="simple" xlink:href="../621/30621.xml">
Turing-complete</link> system. Authors who assert this thesis include Savage (1987) and Gurevich (2000):</p>
<p>

...Turing's informal argument in favor of his thesis justifies a stronger thesis: every algorithm can be simulated by a Turing machine (Gurevich 2000:1)...according to Savage [1987], an algorithm is a computational process defined by a Turing machine. (Gurevich 2000:3)</p>
<p>

Typically, when an algorithm is associated with processing information, data is read from an input source, written to an output device, and/or stored for further processing. Stored data is regarded as part of the internal state of the entity performing the algorithm. In practice, the state is stored in one or more <link xlink:type="simple" xlink:href="../519/8519.xml">
data structure</link>s.</p>
<p>

For any such computational process, the algorithm must be rigorously defined: specified in the way it applies in all possible circumstances that could arise. That is, any conditional steps must be systematically dealt with, case-by-case; the criteria for each case must be clear (and computable).</p>
<p>

Because an algorithm is a precise list of precise steps, the order of computation will always be critical to the functioning of the algorithm. Instructions are usually assumed to be listed explicitly, and are described as starting "from the top" and going "down to the bottom", an idea that is described more formally by <it><link xlink:type="simple" xlink:href="../459/45459.xml">
flow of control</link></it>.</p>
<p>

So far, this discussion of the formalization of an algorithm has assumed the premises of <link xlink:type="simple" xlink:href="../847/197847.xml">
imperative programming</link>. This is the most common conception, and it attempts to describe a task in discrete, "mechanical" means. Unique to this conception of formalized algorithms is the <link xlink:type="simple" xlink:href="../807/344807.xml">
assignment operation</link>, setting the value of a variable. It derives from the intuition of "<link xlink:type="simple" xlink:href="../844/18844.xml">
memory</link>" as a scratchpad. There is an example below of such an assignment.</p>
<p>

For some alternate conceptions of what constitutes an algorithm see <link xlink:type="simple" xlink:href="../933/10933.xml">
functional programming</link> and <link xlink:type="simple" xlink:href="../de)/17927_(Z$I$P$_code).xml">
logic programming</link> .</p>

<ss1>
<st>
 Termination </st>
<p>

Some writers restrict the definition of <it>algorithm</it> to procedures that eventually finish. In such a category Kleene places the "<it>decision procedure</it> or <it>decision method</it> or <it>algorithm</it> for the question" (Kleene 1952:136). Others, including Kleene, include procedures that could run forever without stopping; such a procedure has been called a "computational method" (Knuth 1997:5) or "<it>calculation procedure</it> or <it>algorithm</it>" (Kleene 1952:137); however, Kleene notes that such a method must eventually exhibit "some object" (Kleene 1952:137).</p>
<p>

Minsky makes the pertinent observation, in regards to determining whether an algorithm will eventually terminate (from a particular starting state):
But if the length of the process is not known in advance, then "trying" it may not be decisive, because if the process does go on forever — then at no time will we ever be sure of the answer (Minsky 1967:105).</p>
<p>

As it happens, no other method can do any better, as was shown by <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../208/1208.xml">
Alan Turing</link></scientist>
</person>
 with his celebrated result on the undecidability of the so-called <link xlink:type="simple" xlink:href="../668/13668.xml">
halting problem</link>. There is no algorithmic procedure for determining of arbitrary algorithms whether or not they terminate from given starting states. The analysis of algorithms for their likelihood of termination is called <link xlink:type="simple" xlink:href="../658/6782658.xml">
termination analysis</link>.</p>
<p>

See the examples of (im-)"proper" subtraction at <link xlink:type="simple" xlink:href="../577/23577.xml">
partial function</link> for more about what can happen when an algorithm fails for certain of its input numbers — e.g., (i) non-termination, (ii) production of "junk" (output in the wrong format to be considered a number) or no number(s) at all (halt ends the computation with no output), (iii) wrong number(s), or (iv) a combination of these. Kleene proposed that the production of "junk" or failure to produce a number is solved by having the algorithm detect these instances and produce e.g., an error message (he suggested "0"), or preferably, force the algorithm into an endless loop (Kleene 1952:322). Davis does this to his subtraction algorithm — he fixes his algorithm in a second example so that it is proper subtraction (Davis 1958:12-15). Along with the logical outcomes "true" and "false" Kleene also proposes the use of a third logical symbol "u" — undecided (Kleene 1952:326) — thus an algorithm will always produce <it>something</it> when confronted with a "proposition". The problem of wrong answers must be solved with an independent "proof" of the algorithm e.g., using induction:
We normally require auxiliary evidence for this (that the algorithm correctly defines a <link xlink:type="simple" xlink:href="../469/26469.xml">
mu recursive function</link>), e.g., in the form of an inductive proof that, for each argument value, the computation terminates with a unique value (Minsky 1967:186).</p>

</ss1>
<ss1>
<st>
 Expressing algorithms </st>
<p>

Algorithms can be expressed in many kinds of notation, including <link xlink:type="simple" xlink:href="../173/21173.xml">
natural language</link>s, <link xlink:type="simple" xlink:href="../185/24185.xml">
pseudocode</link>, <link xlink:type="simple" xlink:href="../453/527453.xml">
flowchart</link>s, and <link xlink:type="simple" xlink:href="../015/23015.xml">
programming language</link>s. Natural language expressions of algorithms tend to be verbose and ambiguous, and are rarely used for complex or technical algorithms. Pseudocode and flowcharts are structured ways to express algorithms that avoid many of the ambiguities common in natural language statements, while remaining independent of a particular implementation language. Programming languages are primarily intended for expressing algorithms in a form that can be executed by a <link xlink:type="simple" xlink:href="../457/7878457.xml">
computer</link>, but are often used as a way to define or document algorithms.</p>
<p>

There is a wide variety of representations possible and one can express a given <invention wordnetid="105633385" confidence="0.8">
<know-how wordnetid="105616786" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<link xlink:type="simple" xlink:href="../403/30403.xml">
Turing machine</link></method>
</know-how>
</invention>
 program as a sequence of machine tables (see more at <link xlink:type="simple" xlink:href="../931/10931.xml">
finite state machine</link> and <link xlink:type="simple" xlink:href="../857/548857.xml">
state transition table</link>), as flowcharts (see more at <link xlink:type="simple" xlink:href="../337/187337.xml">
state diagram</link>), or as a form of rudimentary <link xlink:type="simple" xlink:href="../683/20683.xml">
machine code</link> or <link xlink:type="simple" xlink:href="../368/1368.xml">
assembly code</link> called "sets of quadruples" (see more at <invention wordnetid="105633385" confidence="0.8">
<know-how wordnetid="105616786" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<link xlink:type="simple" xlink:href="../403/30403.xml">
Turing machine</link></method>
</know-how>
</invention>
). </p>
<p>

Sometimes it is helpful in the description of an algorithm to supplement small "flow charts" (state diagrams) with natural-language and/or arithmetic expressions written inside "<link xlink:type="simple" xlink:href="../981/1176981.xml">
block diagram</link>s" to summarize what the "flow charts" are accomplishing. </p>
<p>

Representations of algorithms are generally classed into three accepted levels of Turing machine description (Sipser 2006:157):
<list>
<entry level="1" type="bullet">

<b>1 High-level description</b>:</entry>
<entry level="2" type="indent">

 "...prose to describe an algorithm, ignoring the implementation details. At this level we do not need to mention how the machine manages its tape or head"</entry>
<entry level="1" type="bullet">

<b>2 Implementation description</b>:</entry>
<entry level="2" type="indent">

 "...prose used to define the way the Turing machine uses its head and the way that it stores data on its tape. At this level we do not give details of states or transition function"</entry>
<entry level="1" type="bullet">

<b>3 Formal description</b>:</entry>
<entry level="2" type="indent">

 Most detailed, "lowest level", gives the Turing machine's "state table".</entry>
</list>
</p>
<p>

<indent level="1">

<it>For an example of the simple algorithm "Add m+n" described in all three levels see <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<model wordnetid="110324560" confidence="0.8">
<assistant wordnetid="109815790" confidence="0.8">
<know-how wordnetid="105616786" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../920/7585920.xml">
Algorithm examples</link></causal_agent>
</method>
</worker>
</know-how>
</assistant>
</model>
</person>
</physical_entity>
.</it>
</indent>

</p>
</ss1>
<ss1>
<st>
 Implementation </st>
<p>

Most algorithms are intended to be implemented as <link xlink:type="simple" xlink:href="../783/5783.xml">
computer programs</link>. However, algorithms are also implemented by other means, such as in a biological <link xlink:type="simple" xlink:href="../542/1729542.xml">
neural network</link> (for example, the <link xlink:type="simple" xlink:href="../620/490620.xml">
human brain</link> implementing <link xlink:type="simple" xlink:href="../118/3118.xml">
arithmetic</link> or an insect looking for food), in an <link xlink:type="simple" xlink:href="../559/9559.xml">
electrical circuit</link>, or in a mechanical device.</p>

</ss1>
</sec>
<sec>
<st>
 Example </st>
<p>

One of the simplest algorithms is to find the largest number in an (unsorted) list of numbers. The solution necessarily requires looking at every number in the list, but only once at each. From this follows a simple algorithm, which can be stated in a high-level description English prose, as:</p>
<p>

<b>High-level description:</b>
<list>
<entry level="1" type="number">

 Assume the first item is largest.</entry>
<entry level="1" type="number">

 Look at each of the remaining items in the list and if it is larger than the largest item so far, make a note of it.</entry>
<entry level="1" type="number">

 The last noted item is the largest in the list when the process is complete.</entry>
</list>
</p>
<p>

<b>(Quasi-)formal description:</b>
Written in prose but much closer to the high-level language of a computer program, the following is the more formal coding of the algorithm in <link xlink:type="simple" xlink:href="../185/24185.xml">
pseudocode</link> or <link xlink:type="simple" xlink:href="../409/958409.xml">
pidgin code</link>:</p>

<p>

<b>Algorithm</b> LargestNumber
Input: A non-empty list of numbers <it>L</it>.
Output: The <it>largest</it> number in the list <it>L</it>.</p>
<p>

<it>largest</it> ← <it>L</it>0
<b>for each</b> <it>item</it> <b>in</b> the list <it>L≥1</it>, <b>do</b>
<b>if</b> the <it>item</it> &amp;gt; <it>largest</it>, <b>then</b>
<it>largest</it> ← the <it>item</it>
<b>return</b> <it>largest</it></p>
<p>

<list>
<entry level="1" type="bullet">

"&amp;larr;" is a loose shorthand for "changes to".  For instance, "<it>largest</it> &amp;larr; <it>item</it>" means that the value of <it>largest</it> changes to the value of <it>item</it>.</entry>
<entry level="1" type="bullet">

"<b>return</b>" terminates the algorithm and outputs the value that follows.</entry>
</list>
</p>

<p>

For a more complex example of an algorithm, see <link xlink:type="simple" xlink:href="../377/10377.xml">
Euclid's algorithm</link> for the <link xlink:type="simple" xlink:href="../354/12354.xml">
greatest common divisor</link>, one of the earliest algorithms known.</p>

<ss1>
<st>
 Algorithm analysis </st>
<p>

As it happens, it is important to know how much of a particular resource (such as time or storage) is required for a given algorithm. Methods have been developed for the <link xlink:type="simple" xlink:href="../ury/23rd_century.xml">
analysis of algorithms</link> to obtain such quantitative answers; for example, the algorithm above has a time requirement of O(<it>n</it>), using the <link xlink:type="simple" xlink:href="../578/44578.xml">
big O notation</link> with <it>n</it> as the length of the list. At all times the algorithm only needs to remember two values: the largest number found so far, and its current position in the input list. Therefore it is said to have a space requirement of <it>O(1)</it>, if the space required to store the input numbers is not counted, or O (log <it>n</it>) if it is counted. </p>
<p>

Different algorithms may complete the same task with a different set of instructions in less or more time, space, or effort than others. For example, given two different recipes for making potato salad, one may have <it>peel the potato</it> before <it>boil the potato</it> while the other presents the steps in the reverse order, yet they both call for these steps to be repeated for all potatoes and end when the potato salad is ready to be eaten. </p>
<p>

The <link xlink:type="simple" xlink:href="../ury/23rd_century.xml">
analysis and study of algorithms</link> is a discipline of <link xlink:type="simple" xlink:href="../323/5323.xml">
computer science</link>, and is often practiced abstractly without the use of a specific <link xlink:type="simple" xlink:href="../015/23015.xml">
programming language</link> or implementation. In this sense, algorithm analysis resembles other mathematical disciplines in that it focuses on the underlying properties of the algorithm and not on the specifics of any particular implementation. Usually <link xlink:type="simple" xlink:href="../185/24185.xml">
pseudocode</link> is used for analysis as it is the simplest and most general representation.</p>

</ss1>
</sec>
<sec>
<st>
 Classes </st>
<p>

There are various ways to classify algorithms, each with its own merits.</p>

<ss1>
<st>
 Classification by implementation </st>
<p>

One way to classify algorithms is by implementation means.</p>
<p>

<list>
<entry level="1" type="bullet">

 <b>Recursion</b> or <b>iteration</b>: A <link>
recursive algorithm</link> is one that invokes (makes reference to) itself repeatedly until a certain condition matches, which is a method common to <link xlink:type="simple" xlink:href="../933/10933.xml">
functional programming</link>. <link xlink:type="simple" xlink:href="../833/68833.xml">
Iterative</link> algorithms use repetitive constructs like <link xlink:type="simple" xlink:href="../459/45459.xml#xpointer(//*[./st=%22Loops%22])">
loops</link> and sometimes additional data structures like <link xlink:type="simple" xlink:href="../993/273993.xml">
stacks</link> to solve the given problems. Some problems are naturally suited for one implementation or the other. For example, <link xlink:type="simple" xlink:href="../990/56990.xml">
towers of hanoi</link> is well understood in recursive implementation. Every recursive version has an equivalent (but possibly more or less complex) iterative version, and vice versa.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 <b>Logical</b>: An algorithm may be viewed as controlled <link xlink:type="simple" xlink:href="../093/61093.xml">
logical deduction</link>. This notion may be expressed as: <b>Algorithm = logic + control</b> (Kowalski 1979). The logic component expresses the axioms that may be used in the computation and the control component determines the way in which deduction is applied to the axioms. This is the basis for the <link xlink:type="simple" xlink:href="../de)/17927_(Z$I$P$_code).xml">
logic programming</link> paradigm. In pure logic programming languages the control component is fixed and algorithms are specified by supplying only the logic component. The appeal of this approach is the elegant <know-how wordnetid="105616786" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<link xlink:type="simple" xlink:href="../608/397608.xml">
semantics</link></method>
</know-how>
: a change in the axioms has a well defined change in the algorithm.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 <b>Serial</b> or <b>parallel</b> or <b>distributed</b>: Algorithms are usually discussed with the assumption that computers execute one instruction of an algorithm at a time. Those computers are sometimes called serial computers. An algorithm designed for such an environment is called a serial algorithm, as opposed to <link xlink:type="simple" xlink:href="../840/148840.xml">
parallel algorithm</link>s or <link xlink:type="simple" xlink:href="../202/3367202.xml">
distributed algorithms</link>. Parallel algorithms take advantage of computer architectures where several processors can work on a problem at the same time, whereas distributed algorithms utilize multiple machines connected with a <link xlink:type="simple" xlink:href="../592/4122592.xml">
network</link>. Parallel or distributed algorithms divide the problem into more symmetrical or asymmetrical subproblems and collect the results back together. The resource consumption in such algorithms is not only processor cycles on each processor but also the communication overhead between the processors. Sorting algorithms can be parallelized efficiently, but their communication overhead is expensive. Iterative algorithms are generally parallelizable. Some problems have no parallel algorithms, and are called inherently serial problems.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 <b>Deterministic</b> or <b>non-deterministic</b>: <link xlink:type="simple" xlink:href="../951/665951.xml">
Deterministic algorithm</link>s solve the problem with exact decision at every step of the algorithm whereas <link xlink:type="simple" xlink:href="../957/665957.xml">
non-deterministic algorithm</link> solve problems via guessing although typical guesses are made more accurate through the use of <link xlink:type="simple" xlink:href="../452/63452.xml">
heuristics</link>.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 <b>Exact</b> or <b>approximate</b>: While many algorithms reach an exact solution, <link xlink:type="simple" xlink:href="../105/563105.xml">
approximation algorithm</link>s seek an approximation that is close to the true solution. Approximation may use either a deterministic or a random strategy. Such algorithms have practical value for many hard problems.</entry>
</list>
</p>

</ss1>
<ss1>
<st>
 Classification by design paradigm </st>
<p>

Another way of classifying algorithms is by their design methodology or paradigm. There is a certain number of paradigms, each different from the other. Furthermore, each of these categories will include many different types of algorithms. Some commonly found paradigms include:</p>
<p>

<list>
<entry level="1" type="bullet">

 <b>Divide and conquer</b>. A <link xlink:type="simple" xlink:href="../154/201154.xml">
divide and conquer algorithm</link> repeatedly reduces an instance of a problem to one or more smaller instances of the same problem (usually <link xlink:type="simple" xlink:href="../407/25407.xml">
recursively</link>), until the instances are small enough to solve easily. One such example of divide and conquer is <link xlink:type="simple" xlink:href="../039/20039.xml">
merge sorting</link>. Sorting can be done on each segment of data after dividing data into segments and sorting of entire data can be obtained in conquer phase by merging them. A simpler variant of divide and conquer is called <b>decrease and conquer algorithm</b>, that solves an identical subproblem and uses the solution of this subproblem to solve the bigger problem. Divide and conquer divides the problem into multiple subproblems and so conquer stage will be more complex than decrease and conquer algorithms. An example of decrease and conquer algorithm is <link xlink:type="simple" xlink:href="../266/4266.xml">
binary search algorithm</link>.</entry>
<entry level="1" type="bullet">

 <b><event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../297/125297.xml">
Dynamic programming</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</b>. When a problem shows <link xlink:type="simple" xlink:href="../102/243102.xml">
optimal substructure</link>, meaning the optimal solution to a problem can be constructed from optimal solutions to subproblems, and <link xlink:type="simple" xlink:href="../800/1180800.xml">
overlapping subproblems</link>, meaning the same subproblems are used to solve many different problem instances, a quicker approach called <it>dynamic programming</it> avoids recomputing solutions that have already been computed. For example, the shortest path to a goal from a vertex in a weighted <link xlink:type="simple" xlink:href="../806/325806.xml">
graph</link> can be found by using the shortest path to the goal from all adjacent vertices. Dynamic programming and <link xlink:type="simple" xlink:href="../483/723483.xml">
memoization</link> go together. The main difference between dynamic programming and divide and conquer is that subproblems are more or less independent in divide and conquer, whereas subproblems overlap in dynamic programming. The difference between dynamic programming and straightforward recursion is in caching or memoization of recursive calls. When subproblems are independent and there is no repetition, memoization does not help; hence dynamic programming is not a solution for all complex problems. By using memoization or maintaining a <artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<tool wordnetid="104451818" confidence="0.8">
<implement wordnetid="103563967" confidence="0.8">
<link xlink:type="simple" xlink:href="../112/239112.xml">
table</link></implement>
</tool>
</instrumentality>
</artifact>
 of subproblems already solved, dynamic programming reduces the exponential nature of many problems to polynomial complexity.</entry>
<entry level="1" type="bullet">

 <b>The greedy method</b>. A <link xlink:type="simple" xlink:href="../247/89247.xml">
greedy algorithm</link> is similar to a <link xlink:type="simple" xlink:href="../297/125297.xml">
dynamic programming algorithm</link>, but the difference is that solutions to the subproblems do not have to be known at each stage; instead a "greedy" choice can be made of what looks best for the moment. The greedy method extends the solution with the best possible decision (not all feasible decisions) at an algorithmic stage based on the current local optimum and the best decision (not all possible decisions) made in previous stage. It is not exhaustive, and does not give accurate answer to many problems. But when it works, it will be the fastest method. The most popular greedy algorithm is finding the minimal spanning tree as given by <link xlink:type="simple" xlink:href="../776/53776.xml">
Kruskal</link>.</entry>
<entry level="1" type="bullet">

 <b>Linear programming</b>. When solving a problem using <link xlink:type="simple" xlink:href="../730/43730.xml">
linear programming</link>, specific <link xlink:type="simple" xlink:href="../489/89489.xml">
inequalities</link> involving the inputs are found and then an attempt is made to maximize (or minimize) some linear function of the inputs. Many problems (such as the <link xlink:type="simple" xlink:href="../165/403165.xml">
maximum flow</link> for directed <link xlink:type="simple" xlink:href="../806/325806.xml">
graphs</link>) can be stated in a linear programming way, and then be solved by a 'generic' algorithm such as the <link xlink:type="simple" xlink:href="../458/349458.xml">
simplex algorithm</link>. A more complex variant of linear programming is called integer programming, where the solution space is restricted to the <link xlink:type="simple" xlink:href="../563/14563.xml">
integers</link>.</entry>
<entry level="1" type="bullet">

 <b><link xlink:type="simple" xlink:href="../067/848067.xml">
Reduction</link></b>. This technique involves solving a difficult problem by transforming it into a better known problem for which we have (hopefully) <link xlink:type="simple" xlink:href="../619/3287619.xml">
asymptotically optimal</link> algorithms. The goal is to find a reducing algorithm whose <link xlink:type="simple" xlink:href="../543/7543.xml">
complexity</link> is not dominated by the resulting reduced algorithm's. For example, one <link xlink:type="simple" xlink:href="../786/552786.xml">
selection algorithm</link> for finding the median in an unsorted list involves first sorting the list (the expensive portion) and then pulling out the middle element in the sorted list (the cheap portion).  This technique is also known as <it>transform and conquer</it>.</entry>
<entry level="1" type="bullet">

 <b>Search and enumeration</b>. Many problems (such as playing <link xlink:type="simple" xlink:href="../134/5134.xml">
chess</link>) can be modeled as problems on <link xlink:type="simple" xlink:href="../401/12401.xml">
graphs</link>. A <link xlink:type="simple" xlink:href="../731/6263731.xml">
graph exploration algorithm</link> specifies rules for moving around a graph and is useful for such problems. This category also includes <link xlink:type="simple" xlink:href="../249/28249.xml">
search algorithm</link>s, <link xlink:type="simple" xlink:href="../580/456580.xml">
branch and bound</link> enumeration and <link xlink:type="simple" xlink:href="../867/238867.xml">
backtracking</link>.</entry>
<entry level="1" type="bullet">

 <b>The probabilistic and heuristic paradigm</b>. Algorithms belonging to this class fit the definition of an algorithm more loosely.</entry>
<entry level="1" type="number">

 <link xlink:type="simple" xlink:href="../383/495383.xml">
Probabilistic algorithm</link>s are those that make some choices randomly (or pseudo-randomly); for some problems, it can in fact be proven that the fastest solutions must involve some <link xlink:type="simple" xlink:href="../523/19196523.xml">
randomness</link>.</entry>
<entry level="1" type="number">

 <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../254/40254.xml">
Genetic algorithm</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
s attempt to find solutions to problems by mimicking biological <link xlink:type="simple" xlink:href="../236/9236.xml">
evolution</link>ary processes, with a cycle of random mutations yielding successive generations of "solutions". Thus, they emulate reproduction and "survival of the fittest". In <link xlink:type="simple" xlink:href="../424/12424.xml">
genetic programming</link>, this approach is extended to algorithms, by regarding the algorithm itself as a "solution" to a problem.</entry>
<entry level="1" type="number">

 <link xlink:type="simple" xlink:href="../452/63452.xml">
Heuristic</link> algorithms, whose general purpose is not to find an optimal solution, but an approximate solution where the time or resources are limited. They are not practical to find perfect solutions. An example of this would be <link xlink:type="simple" xlink:href="../942/313942.xml">
local search</link>, <link xlink:type="simple" xlink:href="../937/381937.xml">
tabu search</link>, or <link xlink:type="simple" xlink:href="../244/172244.xml">
simulated annealing</link> algorithms, a class of heuristic probabilistic algorithms that vary the solution of a problem by a random amount. The name "<link xlink:type="simple" xlink:href="../244/172244.xml">
simulated annealing</link>" alludes to the metallurgic term meaning the heating and cooling of metal to achieve freedom from defects. The purpose of the random variance is to find close to globally optimal solutions rather than simply locally optimal ones, the idea being that the random element will be decreased as the algorithm settles down to a solution.</entry>
</list>
</p>

</ss1>
<ss1>
<st>
 Classification by field of study </st>

<p>

<indent level="1">

<it>See also: <link xlink:type="simple" xlink:href="../568/18568.xml">
List of algorithms</link></it>
</indent>
Every field of science has its own problems and needs efficient algorithms. Related problems in one field are often studied together. Some example classes are <link xlink:type="simple" xlink:href="../249/28249.xml">
search algorithm</link>s, <link xlink:type="simple" xlink:href="../442/28442.xml">
sorting algorithm</link>s, <link xlink:type="simple" xlink:href="../362/20362.xml">
merge algorithm</link>s, <link xlink:type="simple" xlink:href="../506/21506.xml">
numerical algorithms</link>, <link xlink:type="simple" xlink:href="../401/12401.xml">
graph algorithms</link>, <link xlink:type="simple" xlink:href="../701/27701.xml">
string algorithms</link>, <link xlink:type="simple" xlink:href="../927/176927.xml">
computational geometric algorithms</link>, <link xlink:type="simple" xlink:href="../170/5170.xml">
combinatorial algorithms</link>, <link xlink:type="simple" xlink:href="../488/233488.xml">
machine learning</link>, <link xlink:type="simple" xlink:href="../432/18934432.xml">
cryptography</link>, <link xlink:type="simple" xlink:href="../013/8013.xml">
data compression</link> algorithms and <link xlink:type="simple" xlink:href="../015/310015.xml">
parsing techniques</link>.</p>
<p>

Fields tend to overlap with each other, and algorithm advances in one field may improve those of other, sometimes completely unrelated, fields. For example, dynamic programming was originally invented for optimization of resource consumption in industry, but is now used in solving a broad range of problems in many fields.</p>

</ss1>
<ss1>
<st>
 Classification by complexity </st>

<p>

<indent level="1">

<it>See also: <link xlink:type="simple" xlink:href="../426/502426.xml">
Complexity class</link>&nbsp;and <link>
 Parameterized Complexity</link></it>
</indent>
Algorithms can be classified by the amount of time they need to complete compared to their input size. There is a wide variety: some algorithms complete in linear time relative to input size, some do so in an exponential amount of time or even worse, and some never halt. Additionally, some problems may have multiple algorithms of differing complexity, while other problems might have no algorithms or no known efficient algorithms. There are also mappings from some problems to other problems. Owing to this, it was found to be more suitable to classify the problems themselves instead of the algorithms into equivalence classes based on the complexity of the best possible algorithms for them.</p>

</ss1>
<ss1>
<st>
 Classification by computing power </st>

<p>

Another way to classify algorithms is by computing power. This is typically done by considering some collection (class) of algorithms. A recursive class of algorithms is one that includes algorithms for all Turing computable functions. Looking at classes of algorithms allows for the possibility of restricting the available computational resources (time and memory) used in a computation. A subrecursive class of algorithms is one in which not all Turing computable functions can be obtained. For example, the algorithms that run in <class wordnetid="107997703" confidence="0.8">
<collection wordnetid="107951464" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<link xlink:type="simple" xlink:href="../550/658550.xml">
polynomial time</link></group>
</collection>
</class>
 suffice for many important types of computation but do not exhaust all Turing computable functions. The class of algorithms implemented by <link xlink:type="simple" xlink:href="../829/24829.xml">
primitive recursive function</link>s is another subrecursive class. </p>
<p>

Burgin (2005, p. 24) uses a generalized definition of algorithms that relaxes the common requirement that the output of the algorithm that computes a function must be determined after a finite number of steps.  He defines a super-recursive class of algorithms as "a class of algorithms in which it is possible to compute functions not computable by any Turing machine" (Burgin 2005, p. 107). This is closely related to the study of methods of <link xlink:type="simple" xlink:href="../613/175613.xml">
hypercomputation</link>.</p>

</ss1>
</sec>
<sec>
<st>
 Legal issues </st>
<p>

<indent level="1">

<it>See also: <link xlink:type="simple" xlink:href="../266/76266.xml">
Software patents</link> for a general overview of the patentability of software, including computer-implemented algorithms.</it>
</indent>

Algorithms, by themselves, are not usually patentable. In the United States, a claim consisting solely of simple manipulations of abstract concepts, numbers, or signals do not constitute "processes" (USPTO 2006) and hence algorithms are not patentable (as in <link xlink:type="simple" xlink:href="../934/10003934.xml">
Gottschalk v. Benson</link>). However, practical applications of algorithms are sometimes patentable. For example, in <link xlink:type="simple" xlink:href="../607/2286607.xml">
Diamond v. Diehr</link>, the application of a simple <link xlink:type="simple" xlink:href="../545/11545.xml">
feedback</link> algorithm to aid in the curing of <link xlink:type="simple" xlink:href="../731/1738731.xml">
synthetic rubber</link> was deemed patentable. The <link xlink:type="simple" xlink:href="../198/1136198.xml">
patenting of software</link> is highly controversial, and there are highly criticized patents involving algorithms, especially <link xlink:type="simple" xlink:href="../013/8013.xml">
data compression</link> algorithms, such as <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../274/61274.xml">
Unisys</link></company>
' <format wordnetid="106636806" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../702/12702.xml#xpointer(//*[./st=%22Unisys+and+LZW+patent+enforcement%22])">
LZW patent</link></format>
. </p>
<p>

Additionally, some cryptographic algorithms have export restrictions (see <link xlink:type="simple" xlink:href="../003/826003.xml">
export of cryptography</link>).</p>

</sec>
<sec>
<st>
 History: Development of the notion of "algorithm" </st>

<ss1>
<st>
 Origin of the word </st>


<p>

<indent level="1">

<it>See also: <record wordnetid="106647206" confidence="0.8">
<chronology wordnetid="106503224" confidence="0.8">
<indication wordnetid="106797169" confidence="0.8">
<evidence wordnetid="106643408" confidence="0.8">
<timeline wordnetid="106504965" confidence="0.8">
<written_record wordnetid="106502378" confidence="0.8">
<link xlink:type="simple" xlink:href="../776/416776.xml">
Timeline of algorithms</link></written_record>
</timeline>
</evidence>
</indication>
</chronology>
</record>
</it>
</indent>
The word <it>algorithm</it> comes from the name of the 9th century <link xlink:type="simple" xlink:href="../607/24607.xml">
Persian</link> mathematician <link xlink:type="simple" xlink:href="../861/649861.xml">
Abu Abdullah Muhammad ibn Musa al-Khwarizmi</link> whose works introduced Indian numerals and algebraic concepts. He worked in <village wordnetid="108672738" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../492/4492.xml">
Baghdad</link></village>
 at the time when it was the centre of scientific studies and trade. The word <it><link xlink:type="simple" xlink:href="../534/417534.xml">
algorism</link></it> originally referred only to the rules of performing <link xlink:type="simple" xlink:href="../118/3118.xml">
arithmetic</link> using <link xlink:type="simple" xlink:href="../371/3393371.xml">
Arabic numerals</link> but evolved via European Latin translation of al-Khwarizmi's name into <it>algorithm</it> by the 18th century. The word evolved to include all definite procedures for solving problems or performing tasks.</p>

</ss1>
<ss1>
<st>
 Discrete and distinguishable symbols </st>

<p>

<b>Tally-marks</b>: To keep track of their flocks, their sacks of grain and their money the ancients used tallying: accumulating stones  or marks scratched on sticks, or making discrete symbols in clay. Through the Babylonian and Egyptian use of marks and symbols, eventually <link xlink:type="simple" xlink:href="../657/25657.xml">
Roman numerals</link> and the <link xlink:type="simple" xlink:href="../655/655.xml">
abacus</link> evolved (Dilson, p.16–41). Tally marks appear prominently in <link xlink:type="simple" xlink:href="../316/32316.xml">
unary numeral system</link> arithmetic used in <invention wordnetid="105633385" confidence="0.8">
<know-how wordnetid="105616786" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<link xlink:type="simple" xlink:href="../403/30403.xml">
Turing machine</link></method>
</know-how>
</invention>
 and <link xlink:type="simple" xlink:href="../147/3688147.xml">
Post-Turing machine</link> computations.</p>

</ss1>
<ss1>
<st>
 Manipulation of symbols as "place holders" for numbers: algebra </st>
<p>

The work of the ancient <link xlink:type="simple" xlink:href="../369/1503369.xml">
Greek geometers</link>, <link xlink:type="simple" xlink:href="../216/3304216.xml">
Persian mathematician</link> <link>
Al-Khwarizmi</link> (often considered the "father of <link xlink:type="simple" xlink:href="../923/18716923.xml">
algebra</link>" and from whose name the terms "<link xlink:type="simple" xlink:href="../534/417534.xml">
algorism</link>" and "algorithm" are derived), and Western European mathematicians culminated in <link xlink:type="simple" xlink:href="../281/12281.xml">
Leibniz</link>'s notion of the <link xlink:type="simple" xlink:href="../255/876255.xml">
calculus ratiocinator</link> (ca 1680):
<indent level="1">

"A good century and a half ahead of his time, Leibniz proposed an algebra of logic, an algebra that would specify the rules for manipulating logical concepts in the manner that ordinary algebra specifies the rules for manipulating numbers" (Davis 2000:1)
</indent>

</p>
</ss1>
<ss1>
<st>
 Mechanical contrivances with discrete states </st>

<p>

<b>The clock</b>: Bolter credits the invention of the weight-driven <link xlink:type="simple" xlink:href="../449/6449.xml">
clock</link> as “The key invention [of Europe in the Middle Ages]", in particular the <link xlink:type="simple" xlink:href="../035/960035.xml">
verge escapement</link> (Bolter 1984:24) that provides us with the tick and tock of a mechanical clock. “The accurate automatic machine” (Bolter 1984:26) led immediately to "mechanical <link xlink:type="simple" xlink:href="../754/355754.xml">
automata</link>" beginning in the thirteenth century and finally to “computational machines" – the <link xlink:type="simple" xlink:href="../324/8324.xml">
difference engine</link> and <link xlink:type="simple" xlink:href="../271/1271.xml">
analytical engine</link>s of <scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../698/5698.xml">
Charles Babbage</link></scientist>
 and Countess <scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../974/974.xml">
Ada Lovelace</link></scientist>
 (Bolter p.33–34, p.204–206).</p>
<p>

<b>Jacquard loom, Hollerith punch cards, telegraphy and telephony — the electromechanical relay</b>: Bell and Newell (1971) indicate that the <link xlink:type="simple" xlink:href="../225/16225.xml">
Jacquard loom</link> (1801), precursor to <link xlink:type="simple" xlink:href="../420/24420.xml">
Hollerith cards</link> (punch cards, 1887), and “telephone switching technologies” were the roots of a tree leading to the development of the first computers (Bell and Newell diagram p. 39, cf Davis 2000). By the mid-1800s the <link xlink:type="simple" xlink:href="../010/30010.xml">
telegraph</link>, the precursor of the telephone, was in use throughout the world, its discrete and distinguishable encoding of letters as “dots and dashes” a common sound. By the late 1800s the <link xlink:type="simple" xlink:href="../123/538123.xml">
ticker tape</link> (ca 1870s) was in use, as was the use of <link xlink:type="simple" xlink:href="../420/24420.xml">
Hollerith cards</link> in the 1890 U.S. census. Then came the <link xlink:type="simple" xlink:href="../247/31247.xml">
Teletype</link> (ca 1910) with its punched-paper use of <link xlink:type="simple" xlink:href="../748/4748.xml">
Baudot code</link> on tape.</p>
<p>

Telephone-switching networks of electromechanical <link xlink:type="simple" xlink:href="../590/26590.xml">
relay</link>s (invented 1835) was behind the work of <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<pioneer wordnetid="110434725" confidence="0.8">
<intellectual wordnetid="109621545" confidence="0.8">
<alumnus wordnetid="109786338" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<originator wordnetid="110383816" confidence="0.8">
<scholar wordnetid="110557854" confidence="0.8">
<creator wordnetid="109614315" confidence="0.8">
<link xlink:type="simple" xlink:href="../628/637628.xml">
George Stibitz</link></creator>
</scholar>
</originator>
</scientist>
</causal_agent>
</alumnus>
</intellectual>
</pioneer>
</person>
</physical_entity>
 (1937), the inventor of the digital adding device. As he worked in Bell Laboratories, he observed the “burdensome’ use of mechanical calculators with gears. "He went home one evening in 1937 intending to test his idea.... When the tinkering was over, Stibitz had constructed a binary adding device". (Valley News, p. 13).</p>
<p>

Davis (2000) observes the particular importance of the electromechanical relay (with its two "binary states" <it>open</it> and <it>closed</it>):
<indent level="1">

 It was only with the development, beginning in the 1930s, of electromechanical calculators using electrical relays, that machines were built having the scope Babbage had envisioned." (Davis, p. 14).
</indent>

</p>
</ss1>
<ss1>
<st>
 Mathematics during the 1800s up to the mid-1900s </st>
<p>

<b>Symbols and rules</b>: In rapid succession the mathematics of <philosopher wordnetid="110423589" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../298/38298.xml">
George Boole</link></philosopher>
 (1847, 1854), <person wordnetid="100007846" confidence="0.9508927676800064">
<philosopher wordnetid="110423589" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../416/48416.xml">
Gottlob Frege</link></philosopher>
</person>
 (1879), and <scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../043/13043.xml">
Giuseppe Peano</link></scientist>
 (1888–1889) reduced arithmetic to a sequence of symbols manipulated by rules. Peano's <it>The principles of arithmetic, presented by a new method</it> (1888) was "the first attempt at an axiomatization of mathematics in a symbolic language" (van Heijenoort:81ff).</p>
<p>

But Heijenoort gives Frege (1879) this kudos: Frege’s is "perhaps the most important single work ever written in logic. ... in which we see a " 'formula language', that is a <it>lingua characterica</it>, a language written with special symbols, "for pure thought", that is, free from rhetorical embellishments ... constructed from specific symbols that are manipulated according to definite rules" (van Heijenoort:1). The work of Frege was further simplified and amplified by <person wordnetid="100007846" confidence="0.9508927676800064">
<philosopher wordnetid="110423589" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../395/43395.xml">
Alfred North Whitehead</link></philosopher>
</person>
 and <person wordnetid="100007846" confidence="0.9508927676800064">
<philosopher wordnetid="110423589" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../163/4163.xml">
Bertrand Russell</link></philosopher>
</person>
 in their <work wordnetid="104599396" confidence="0.8">
<product wordnetid="104007894" confidence="0.8">
<creation wordnetid="103129123" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<book wordnetid="106410904" confidence="0.8">
<publication wordnetid="106589574" confidence="0.8">
<link xlink:type="simple" xlink:href="../133/24133.xml">
Principia Mathematica</link></publication>
</book>
</artifact>
</creation>
</product>
</work>
 (1910–1913).</p>
<p>

<b>The paradoxes</b>: At the same time a number of disturbing paradoxes appeared in the literature, in particular the <statement wordnetid="106722453" confidence="0.8">
<message wordnetid="106598915" confidence="0.8">
<contradiction wordnetid="107206887" confidence="0.8">
<paradox wordnetid="106724559" confidence="0.8">
<falsehood wordnetid="106756407" confidence="0.8">
<link xlink:type="simple" xlink:href="../653/51653.xml">
Burali-Forti paradox</link></falsehood>
</paradox>
</contradiction>
</message>
</statement>
 (1897), the <link xlink:type="simple" xlink:href="../095/46095.xml">
Russell paradox</link> (1902–03), and the <link>
Richard Paradox</link> (Dixon 1906, cf Kleene 1952:36–40). The resultant considerations led to <link>
Kurt Gödel</link>’s paper (1931) — he specifically cites the paradox of the liar — that completely reduces rules of <link xlink:type="simple" xlink:href="../407/25407.xml">
recursion</link> to numbers. </p>
<p>

<b>Effective calculability</b>: In an effort to solve the <link xlink:type="simple" xlink:href="../672/9672.xml">
Entscheidungsproblem</link> defined precisely by Hilbert in 1928, mathematicians first set about to define what was meant by an "effective method" or "effective calculation" or "effective calculability" (i.e., a calculation that would succeed). In rapid succession the following appeared: <scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../731/49731.xml">
Alonzo Church</link></scientist>
, <link xlink:type="simple" xlink:href="../805/28805.xml">
Stephen Kleene</link> and <link xlink:type="simple" xlink:href="../224/679224.xml">
J.B. Rosser</link>'s <link>
λ-calculus</link>, (cf footnote in <scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../731/49731.xml">
Alonzo Church</link></scientist>
 1936a:90, 1936b:110) a finely-honed definition of "general recursion" from the work of Gödel acting on suggestions of <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<mathematician wordnetid="110301261" confidence="0.8">
<link xlink:type="simple" xlink:href="../901/159901.xml">
Jacques Herbrand</link></mathematician>
</scientist>
</causal_agent>
</person>
</physical_entity>
 (cf Gödel's Princeton lectures of 1934) and subsequent simplifications by Kleene (1935-6:237ff, 1943:255ff). Church's proof (1936:88ff) that the <link xlink:type="simple" xlink:href="../672/9672.xml">
Entscheidungsproblem</link> was unsolvable, <link xlink:type="simple" xlink:href="../382/362382.xml">
Emil Post</link>'s definition of effective calculability as a worker mindlessly following a list of instructions to move left or right through a sequence of rooms and while there either mark or erase a paper or observe the paper and make a yes-no decision about the next instruction (cf "Formulation I", Post 1936:289-290). <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../208/1208.xml">
Alan Turing</link></scientist>
</person>
's proof of that the Entscheidungsproblem was unsolvable by use of his "a- [automatic-] machine"(Turing 1936-7:116ff) -- in effect almost identical to Post's "formulation", <scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../224/679224.xml">
J. Barkley Rosser</link></scientist>
's definition of "effective method" in terms of "a machine" (Rosser 1939:226). <link xlink:type="simple" xlink:href="../805/28805.xml">
S. C. Kleene</link>'s proposal of a precursor to "<link xlink:type="simple" xlink:href="../854/6854.xml">
Church thesis</link>" that he called "Thesis I" (Kleene 1943:273–274), and a few years later Kleene's renaming his Thesis "Church's Thesis" (Kleene 1952:300, 317) and proposing "Turing's Thesis" (Kleene 1952:376).</p>

</ss1>
<ss1>
<st>
 Emil Post (1936) and Alan Turing (1936-7, 1939)</st>

<p>

Here is a remarkable coincidence of two men not knowing each other but describing a process of men-as-computers working on computations — and they yield virtually identical definitions.</p>
<p>

<link xlink:type="simple" xlink:href="../382/362382.xml">
Emil Post</link> (1936) described the actions of a "computer" (human being) as follows:
<indent level="1">

"...two concepts are involved: that of a <it>symbol space</it> in which the work leading from problem to answer is to be carried out, and a fixed unalterable <it>set of directions</it>.
</indent>

His symbol space would be
<indent level="1">

"a two way infinite sequence of spaces or boxes... The problem solver or worker is to move and work in this symbol space, being capable of being in, and operating in but one box at a time.... a box is to admit of but two possible conditions, i.e., being empty or unmarked, and having a single mark in it, say a vertical stroke.
</indent>

<indent level="1">

"One box is to be singled out and called the starting point. ...a specific problem is to be given in symbolic form by a finite number of boxes [i.e., INPUT] being marked with a stroke. Likewise the answer [i.e., OUTPUT] is to be given in symbolic form by such a configuration of marked boxes....
</indent>

<indent level="1">

"A set of directions applicable to a general problem sets up a deterministic process when applied to each specific problem. This process will terminate only when it comes to the direction of type (C ) [i.e., STOP]." (U p. 289–290) See more at <link xlink:type="simple" xlink:href="../147/3688147.xml">
Post-Turing machine</link>
</indent>

<person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../208/1208.xml">
Alan Turing</link></scientist>
</person>
’s work (1936, 1939:160) preceded that of Stibitz (1937); it is unknown whether Stibitz knew of the work of Turing. Turing’s biographer believed that Turing’s use of a typewriter-like model derived from a youthful interest: “Alan had dreamt of inventing typewriters as a boy; Mrs. Turing had a typewriter; and he could well have begun by asking himself what was meant by calling a typewriter 'mechanical'" (Hodges, p. 96). Given the prevalence of Morse code and telegraphy, ticker tape machines, and Teletypes we might conjecture that all were influences.</p>
<p>

Turing — his model of computation is now called a <invention wordnetid="105633385" confidence="0.8">
<know-how wordnetid="105616786" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<link xlink:type="simple" xlink:href="../403/30403.xml">
Turing machine</link></method>
</know-how>
</invention>
 — begins, as did Post, with an analysis of a human computer that he whittles down to a simple set of basic motions and "states of mind". But he continues a step further and creates a machine as a model of computation of numbers (Turing 1936-7:116).</p>
<p>

<indent level="1">

"Computing is normally done by writing certain symbols on paper. We may suppose this paper is divided into squares like a child's arithmetic book....I assume then that the computation is carried out on one-dimensional paper, i.e., on a tape divided into squares. I shall also suppose that the number of symbols which may be printed is finite....
</indent>

<indent level="1">

"The behavior of the computer at any moment is determined by the symbols which he is observing, and his "state of mind" at that moment. We may suppose that there is a bound B to the number of symbols or squares which the computer can observe at one moment. If he wishes to observe more, he must use successive observations. We will also suppose that the number of states of mind which need be taken into account is finite...
</indent>

<indent level="1">

"Let us imagine that the operations performed by the computer to be split up into 'simple operations' which are so elementary that it is not easy to imagine them further divided" (Turing 1936-7:136).
</indent>

Turing's reduction yields the following:</p>
<p>

<indent level="1">

"The simple operations must therefore include:
</indent>
::"(a) Changes of the symbol on one of the observed squares
<indent level="2">

"(b) Changes of one of the squares observed to another square within L squares of one of the previously observed squares.
</indent>
"It may be that some of these change necessarily invoke a change of state of mind. The most general single operation must therefore be taken to be one of the following:
<indent level="2">

"(A) A possible change (a) of symbol together with a possible change of state of mind.
</indent>
::"(B) A possible change (b) of observed squares, together with a possible change of state of mind"</p>
<p>

<indent level="1">

"We may now construct a machine to do the work of this computer." (Turing 1936-7:136)
</indent>

A few years later, Turing expanded his analysis (thesis, definition) with this forceful expression of it:
<indent level="1">

"A function is said to be "effectively calculable" if its values can be found by some purely mechanical process. Although it is fairly easy to get an intuitive grasp of this idea, it is neverthessless desirable to have some more definite, mathematical expressible definition . . . [he discusses the history of the definition pretty much as presented above with respect to Gödel, Herbrand, Kleene, Church, Turing and Post] . . . We may take this statement literally, understanding by a purely mechanical process one which could be carried out by a machine. It is possible to give a mathematical description, in a certain normal form, of the structures of these machines. The development of these ideas leads to the author's definition of a computable function, and to an identification of computability † with effective calculability . . . .
</indent>
::"† We shall use the expression "computable function" to mean a function calculable by a machine, and we let "effectively calculabile" refer to the intuitive idea without particular identification with any one of these definitions."(Turing 1939:160)</p>

</ss1>
<ss1>
<st>
 J. B. Rosser (1939) and S. C. Kleene (1943) </st>

<p>

<b><scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../224/679224.xml">
J. Barkley Rosser</link></scientist>
</b> boldly defined an ‘effective [mathematical] method’ in the following manner (boldface added):
<indent level="1">

"'Effective method' is used here in the rather special sense of a method each step of which is precisely determined and which is certain to produce the answer in a finite number of steps. With this special meaning, three different precise definitions have been given to date. [his footnote #5; see discussion immediately below]. The simplest of these to state (due to Post and Turing) says essentially that <b>an effective method of solving certain sets of problems exists if one can build a machine which will then solve any problem of the set with no human intervention beyond inserting the question and (later) reading the answer</b>. All three definitions are equivalent, so it doesn't matter which one is used. Moreover, the fact that all three are equivalent is a very strong argument for the correctness of any one." (Rosser 1939:225–6)
</indent>

Rosser's footnote #5 references the work of (1) Church and Kleene and their definition of λ-definability, in particular Church's use of it in his <it>An Unsolvable Problem of Elementary Number Theory</it> (1936); (2) Herbrand and Gödel and their use of recursion in particular Gödel's use in his famous paper <it>On Formally Undecidable Propositions of Principia Mathematica and Related Systems I</it> (1931); and (3) Post (1936) and Turing (1936-7) in their mechanism-models of computation.</p>
<p>

<b><link xlink:type="simple" xlink:href="../805/28805.xml">
Stephen C. Kleene</link></b> defined as his now-famous "Thesis I" known as the <link xlink:type="simple" xlink:href="../854/6854.xml">
Church-Turing thesis</link>. But he did this in the following context (boldface in original):
<indent level="1">

"12. <b>Algorithmic theories</b>... In setting up a complete algorithmic theory, what we do is to describe a procedure, performable for each set of values of the independent variables, which procedure necessarily terminates and in such manner that from the outcome we can read a definite answer, "yes" or "no," to the question, "is the predicate value true?”" (Kleene 1943:273)
</indent>

</p>
</ss1>
<ss1>
<st>
 History after 1950 </st>
<p>

A number of efforts have been directed toward further refinement of the definition of "algorithm", and activity is on-going because of issues surrounding, in particular, <link xlink:type="simple" xlink:href="../358/169358.xml">
foundations of mathematics</link> (especially the <link xlink:type="simple" xlink:href="../854/6854.xml">
Church-Turing Thesis</link>) and <link xlink:type="simple" xlink:href="../483/6880483.xml">
philosophy of mind</link> (especially arguments around <link xlink:type="simple" xlink:href="../164/1164.xml">
artificial intelligence</link>). For more, see <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<model wordnetid="110324560" confidence="0.8">
<assistant wordnetid="109815790" confidence="0.8">
<know-how wordnetid="105616786" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../703/6901703.xml">
Algorithm characterizations</link></causal_agent>
</method>
</worker>
</know-how>
</assistant>
</model>
</person>
</physical_entity>
.</p>



<p>

<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../492/60492.xml">
Abstract machine</link></entry>
<entry level="1" type="bullet">

 <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<model wordnetid="110324560" confidence="0.8">
<assistant wordnetid="109815790" confidence="0.8">
<know-how wordnetid="105616786" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../703/6901703.xml">
Algorithm characterizations</link></causal_agent>
</method>
</worker>
</know-how>
</assistant>
</model>
</person>
</physical_entity>
</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../312/10433312.xml">
Algorithm design</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../128/145128.xml">
Algorithmic efficiency</link> (describes ways of estimating, measuring and improving an algorithms speed)</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../499/10140499.xml">
Algorithm engineering</link></entry>
<entry level="1" type="bullet">

 <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<model wordnetid="110324560" confidence="0.8">
<assistant wordnetid="109815790" confidence="0.8">
<know-how wordnetid="105616786" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../920/7585920.xml">
Algorithm examples</link></causal_agent>
</method>
</worker>
</know-how>
</assistant>
</model>
</person>
</physical_entity>
</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../884/479884.xml">
Algorithmic music</link></entry>
<entry level="1" type="bullet">

 <market wordnetid="101097292" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<link xlink:type="simple" xlink:href="../768/2484768.xml">
Algorithmic trading</link></activity>
</psychological_feature>
</act>
</event>
</market>
</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../136/442136.xml">
Computability theory (computer science)</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../543/7543.xml">
Computational complexity theory</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../519/8519.xml">
Data structure</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../452/63452.xml">
Heuristics</link></entry>
<entry level="1" type="bullet">

 <it><work wordnetid="104599396" confidence="0.8">
<product wordnetid="104007894" confidence="0.8">
<creation wordnetid="103129123" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<book wordnetid="106410904" confidence="0.8">
<publication wordnetid="106589574" confidence="0.8">
<link xlink:type="simple" xlink:href="../226/3499226.xml">
Introduction to Algorithms</link></publication>
</book>
</artifact>
</creation>
</product>
</work>
''</it></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../351/454351.xml#xpointer(//*[./st=%22Algorithms%22])">
Important algorithm-related publications</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../568/18568.xml">
List of algorithms</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../487/632487.xml">
List of algorithm general topics</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../738/723738.xml">
List of terms relating to algorithms and data structures</link></entry>
<entry level="1" type="bullet">

 <mathematical_relation wordnetid="113783581" confidence="0.8">
<function wordnetid="113783816" confidence="0.8">
<link xlink:type="simple" xlink:href="../577/23577.xml">
Partial function</link></function>
</mathematical_relation>
</entry>
<entry level="1" type="bullet">

 <link>
Parameterized Complexity</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../080/2310080.xml">
Performance analysis</link> measuring the actual performance of an algorithm</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../ury/23rd_century.xml">
Run-time analysis</link> (non-intuitive) estimation of run times, not analysis at run-time! (see <link xlink:type="simple" xlink:href="../080/2310080.xml">
Performance analysis</link> above</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../402/30402.xml">
Theory of computation</link></entry>
</list>
</p>


</ss1>
</sec>
<sec>
<st>
References</st>

<p>

<list>
<entry level="1" type="bullet">

 Axt, P. (1959) On a Subrecursive Hierarchy and Primitive Recursive Degrees, <it>Transactions of the American Mathematical Society</it> 92, pp. 85-105 </entry>
<entry level="1" type="bullet">

 <cite id="CITEREFBlassGurevich2003" style="font-style:normal"><link>
Blass, Andreas</link>&#32;&amp;&#32;<link>
Gurevich, Yuri</link>&#32;(2003),&#32;"<weblink xlink:type="simple" xlink:href="http://research.microsoft.com/~gurevich/Opera/164.pdf">
Algorithms: A Quest for Absolute Definitions</weblink>",&#32;<it>Bulletin of European Association for Theoretical Computer Science</it>&#32;<b>81</b>, </cite>&nbsp;.  Includes an excellent bibliography of 56 references.</entry>
<entry level="1" type="bullet">

 <cite id="CITEREFBoolosJeffrey1974.2C_1999" style="font-style:normal"><link>
Boolos, George</link>&#32;&amp;&#32;<link>
Jeffrey, Richard</link>&#32;(1974, 1980, 1989, 1999),&#32;<it>Computability and Logic</it>&#32;(4th ed.), Cambridge University Press, London, ISBN 0-521-20402-X</cite>&nbsp;: cf. Chapter 3 <it>Turing machines</it> where they discuss "certain enumerable sets not effectively (mechanically) enumerable".</entry>
<entry level="1" type="bullet">

 Burgin, M. <it>Super-recursive algorithms</it>, Monographs in computer science, Springer, 2005. ISBN 0387955690 </entry>
<entry level="1" type="bullet">

 Campagnolo, M.L., Moore, C., and Costa, J.F. (2000) An analog characterization of the subrecursive functions. In <it>Proc. of the 4th Conference on Real Numbers and Computers</it>, Odense University, pp. 91-109 </entry>
<entry level="1" type="bullet">

 <cite style="font-style:normal"><scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../731/49731.xml">
Church, Alonzo</link></scientist>
&#32;(1936a).&#32;"An Unsolvable Problem of Elementary Number Theory". <it>The American Journal of Mathematics</it>&#32;<b>58</b>: 345–363. <document wordnetid="106470073" confidence="0.8">
<written_communication wordnetid="106349220" confidence="0.8">
<writing wordnetid="106362953" confidence="0.8">
<link xlink:type="simple" xlink:href="../994/422994.xml">
doi</link></writing>
</written_communication>
</document>
:<weblink xlink:type="simple" xlink:href="http://dx.doi.org/10.2307%2F2371045">
10.2307/2371045</weblink>.</cite>&nbsp; Reprinted in <it>The Undecidable</it>, p. 89ff. The first expression of "Church's Thesis". See in particular page 100 (<it>The Undecidable</it>) where he defines the notion of "effective calculability" in terms of "an algorithm", and he uses the word "terminates", etc.</entry>
<entry level="1" type="bullet">

 <cite style="font-style:normal"><scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../731/49731.xml">
Church, Alonzo</link></scientist>
&#32;(1936b).&#32;"A Note on the Entscheidungsproblem". <it>Journal of Symbolic Logic</it>&#32;<b>1 no. 1 and volume 1 no. 3</b>.</cite>&nbsp; Reprinted in <it>The Undecidable</it>, p. 110ff. Church shows that the Entscheidungsproblem is unsolvable in about 3 pages of text and 3 pages of footnotes.</entry>
<entry level="1" type="bullet">

 <cite id="Reference-Daffa'-1977" style="font-style:normal" class="book">Daffa', Ali Abdullah al-&#32;(1977). The Muslim contribution to mathematics.&#32;London:&#32;Croom Helm. ISBN 0-85664-464-1.</cite>&nbsp;</entry>
<entry level="1" type="bullet">

 <cite id="Reference-Davis-1965" style="font-style:normal" class="book"><physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<intellectual wordnetid="109621545" confidence="0.8">
<alumnus wordnetid="109786338" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<mathematician wordnetid="110301261" confidence="0.8">
<scholar wordnetid="110557854" confidence="0.8">
<link xlink:type="simple" xlink:href="../041/953041.xml">
Davis, Martin</link></scholar>
</mathematician>
</scientist>
</causal_agent>
</alumnus>
</intellectual>
</person>
</physical_entity>
&#32;(1965). The Undecidable: Basic Papers On Undecidable Propostions, Unsolvable Problems and Computable Functions.&#32;New York:&#32;Raven Press.</cite>&nbsp; Davis gives commentary before each article. Papers of <link>
Gödel</link>, <scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../731/49731.xml">
Alonzo Church</link></scientist>
, <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../208/1208.xml">
Turing</link></scientist>
</person>
, <scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../224/679224.xml">
Rosser</link></scientist>
, <link xlink:type="simple" xlink:href="../805/28805.xml">
Kleene</link>, and <link xlink:type="simple" xlink:href="../382/362382.xml">
Emil Post</link> are included; those cited in the article are listed here by author's name.</entry>
<entry level="1" type="bullet">

 <cite id="Reference-Davis-2000" style="font-style:normal" class="book"><physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<intellectual wordnetid="109621545" confidence="0.8">
<alumnus wordnetid="109786338" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<mathematician wordnetid="110301261" confidence="0.8">
<scholar wordnetid="110557854" confidence="0.8">
<link xlink:type="simple" xlink:href="../041/953041.xml">
Davis, Martin</link></scholar>
</mathematician>
</scientist>
</causal_agent>
</alumnus>
</intellectual>
</person>
</physical_entity>
&#32;(2000). Engines of Logic: Mathematicians and the Origin of the Computer.&#32;New York:&#32;W. W. Nortion.</cite>&nbsp; Davis offers concise biographies of <link xlink:type="simple" xlink:href="../281/12281.xml">
Leibniz</link>, <link xlink:type="simple" xlink:href="../298/38298.xml">
Boole</link>, <link xlink:type="simple" xlink:href="../416/48416.xml">
Frege</link>, <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../216/12216.xml">
Cantor</link></scientist>
</person>
, <link xlink:type="simple" xlink:href="../302/8302.xml">
Hilbert</link>, <link>
Gödel</link> and <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../208/1208.xml">
Turing</link></scientist>
</person>
 with <link xlink:type="simple" xlink:href="../942/15942.xml">
von Neumann</link> as the show-stealing villain. Very brief bios of <link xlink:type="simple" xlink:href="../918/142918.xml">
Joseph-Marie Jacquard</link>, <link xlink:type="simple" xlink:href="../698/5698.xml">
Babbage</link>, <scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../974/974.xml">
Ada Lovelace</link></scientist>
, <scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../693/5693.xml">
Claude Shannon</link></scientist>
, <link xlink:type="simple" xlink:href="../446/342446.xml">
Howard Aiken</link>, etc.</entry>
<entry level="1" type="bullet">

 Paul E. Black, <weblink xlink:type="simple" xlink:href="http://www.nist.gov/dads/HTML/algorithm.html">
algorithm</weblink> at the <link xlink:type="simple" xlink:href="../888/21888.xml">
NIST</link> <link xlink:type="simple" xlink:href="../551/1661551.xml">
Dictionary of Algorithms and Data Structures</link>.</entry>
<entry level="1" type="bullet">

 <cite id="Reference-Dennett-1995" style="font-style:normal" class="book"><person wordnetid="100007846" confidence="0.9508927676800064">
<philosopher wordnetid="110423589" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../756/8756.xml">
Dennett, Daniel</link></philosopher>
</person>
&#32;(1995). Darwin's Dangerous Idea.&#32;New York:&#32;Touchstone/Simon &amp; Schuster.</cite>&nbsp;</entry>
<entry level="1" type="bullet">

<physical_entity wordnetid="100001930" confidence="0.8">
<peer wordnetid="109626238" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<colleague wordnetid="109935990" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<employee wordnetid="110053808" confidence="0.8">
<associate wordnetid="109816771" confidence="0.8">
<link xlink:type="simple" xlink:href="../014/16488014.xml">
Yuri Gurevich</link></associate>
</employee>
</scientist>
</causal_agent>
</colleague>
</worker>
</person>
</peer>
</physical_entity>
, <weblink xlink:type="simple" xlink:href="http://research.microsoft.com/~gurevich/Opera/141.pdf">
<it>Sequential Abstract State Machines Capture Sequential Algorithms''</it></weblink>, ACM Transactions on Computational Logic, Vol 1, no 1 (July 2000), pages 77–111. Includes bibliography of 33 sources.</entry>
<entry level="1" type="bullet">

 <cite style="font-style:normal"><link xlink:type="simple" xlink:href="../805/28805.xml">
Kleene C., Stephen</link>&#32;(1936).&#32;"General Recursive Functions of Natural Numbers". <it>Mathematische Annalen</it>&#32;<b>Band 112, Heft 5</b>: 727–742. <document wordnetid="106470073" confidence="0.8">
<written_communication wordnetid="106349220" confidence="0.8">
<writing wordnetid="106362953" confidence="0.8">
<link xlink:type="simple" xlink:href="../994/422994.xml">
doi</link></writing>
</written_communication>
</document>
:<weblink xlink:type="simple" xlink:href="http://dx.doi.org/10.1007%2FBF01565439">
10.1007/BF01565439</weblink>.</cite>&nbsp; Presented to the American Mathematical Society, September 1935. Reprinted in <it>The Undecidable</it>, p. 237ff. Kleene's definition of "general recursion" (known now as mu-recursion) was used by Church in his 1935 paper <it>An Unsolvable Problem of Elementary Number Theory</it> that proved the "decision problem" to be "undecidable" (i.e., a negative result).</entry>
<entry level="1" type="bullet">

 <cite style="font-style:normal"><link xlink:type="simple" xlink:href="../805/28805.xml">
Kleene C., Stephen</link>&#32;(1943).&#32;"Recursive Predicates and Quantifiers". <it>American Mathematical Society Transactions</it>&#32;<b>Volume 54, No. 1</b>: 41–73. <document wordnetid="106470073" confidence="0.8">
<written_communication wordnetid="106349220" confidence="0.8">
<writing wordnetid="106362953" confidence="0.8">
<link xlink:type="simple" xlink:href="../994/422994.xml">
doi</link></writing>
</written_communication>
</document>
:<weblink xlink:type="simple" xlink:href="http://dx.doi.org/10.2307%2F1990131">
10.2307/1990131</weblink>.</cite>&nbsp; Reprinted in <it>The Undecidable</it>, p. 255ff. Kleene refined his definition of "general recursion" and proceeded in his chapter "12. Algorithmic theories" to posit "Thesis I" (p. 274); he would later repeat this thesis (in Kleene 1952:300) and name it "Church's Thesis"(Kleene 1952:317) (i.e., the <link>
Church Thesis</link>). </entry>
<entry level="1" type="bullet">

 <cite id="Reference-Kleene-First Edition 1952" style="font-style:normal" class="book"><link xlink:type="simple" xlink:href="../805/28805.xml">
Kleene, Stephen C.</link>&#32;(First Edition 1952). Introduction to Metamathematics, Tenth Edition 1991,&#32;North-Holland Publishing Company.</cite>&nbsp; Excellent — accessible, readable — reference source for mathematical "foundations".</entry>
<entry level="1" type="bullet">

 <cite id="Reference-Knuth-1997" style="font-style:normal" class="book"><person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../095/8095.xml">
Knuth, Donald</link></scientist>
</person>
&#32;(1997). Fundamental Algorithms, Third Edition.&#32;Reading, Massachusetts:&#32;Addison-Wesley. ISBN 0201896834.</cite>&nbsp;</entry>
<entry level="1" type="bullet">

 Kosovsky, N. K. <it>Elements of Mathematical Logic and its Application to the theory of Subrecursive Algorithms</it>, LSU Publ., Leningrad, 1981 </entry>
<entry level="1" type="bullet">

 <cite style="font-style:normal"><person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../364/1621364.xml">
Kowalski, Robert</link></scientist>
</person>
&#32;(1979).&#32;"Algorithm=Logic+Control". <it>Communications of the ACM</it>&#32;<b>22</b>&#32;(7): 424–436.&#32;ACM Press. <document wordnetid="106470073" confidence="0.8">
<written_communication wordnetid="106349220" confidence="0.8">
<writing wordnetid="106362953" confidence="0.8">
<link xlink:type="simple" xlink:href="../994/422994.xml">
doi</link></writing>
</written_communication>
</document>
:<weblink xlink:type="simple" xlink:href="http://dx.doi.org/10.1145%2F359131.359136">
10.1145/359131.359136</weblink>. ISSN 0001-0782.</cite>&nbsp;</entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../915/915.xml">
A. A. Markov</link> (1954) <it>Theory of algorithms</it>. [Translated by Jacques J. Schorr-Kon and PST staff] Imprint Moscow, Academy of Sciences of the USSR, 1954 [i.e., Jerusalem, Israel Program for Scientific Translations, 1961; available from the Office of Technical Services, U.S. Dept. of Commerce, Washington] Description 444 p. 28 cm. Added t.p. in Russian Translation of Works of the Mathematical Institute, Academy of Sciences of the USSR, v. 42. Original title: Teoriya algerifmov. [QA248.M2943 Dartmouth College library. U.S. Dept. of Commerce, Office of Technical Services, number OTS 60-51085.]</entry>
<entry level="1" type="bullet">

 <cite id="Reference-Minsky-1967" style="font-style:normal" class="book"><person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../639/19639.xml">
Minsky, Marvin</link></scientist>
</person>
&#32;(1967). Computation: Finite and Infinite Machines, First,&#32;Prentice-Hall, Englewood Cliffs, NJ.</cite>&nbsp; Minsky expands his "...idea of an algorithm — an effective procedure..." in chapter 5.1 <it>Computability, Effective Procedues and Algorithms. Infinite machines."</it></entry>
<entry level="1" type="bullet">

 <cite style="font-style:normal"><link xlink:type="simple" xlink:href="../382/362382.xml">
Post, Emil</link>&#32;(1936).&#32;"Finite Combinatory Processes, Formulation I". <it>The Journal of Symbolic Logic</it>&#32;<b>1</b>: pp.103–105. <document wordnetid="106470073" confidence="0.8">
<written_communication wordnetid="106349220" confidence="0.8">
<writing wordnetid="106362953" confidence="0.8">
<link xlink:type="simple" xlink:href="../994/422994.xml">
doi</link></writing>
</written_communication>
</document>
:<weblink xlink:type="simple" xlink:href="http://dx.doi.org/10.2307%2F2269031">
10.2307/2269031</weblink>.</cite>&nbsp; Reprinted in <it>The Undecidable</it>, p. 289ff. Post defines a simple algorithmic-like process of a man writing marks or erasing marks and going from box to box and eventually halting, as he follows a list of simple instructions. This is cited by Kleene as one source of his "Thesis I", the so-called <link xlink:type="simple" xlink:href="../854/6854.xml">
Church-Turing thesis</link>.</entry>
<entry level="1" type="bullet">

 <cite style="font-style:normal"><link xlink:type="simple" xlink:href="../224/679224.xml">
Rosser, J.B.</link>&#32;(1939).&#32;"An Informal Exposition of Proofs of Godel's Theorem and Church's Theorem". <it>Journal of Symbolic Logic</it>&#32;<b>4</b>.</cite>&nbsp; Reprinted in <it>The Undecidable</it>, p. 223ff. Herein is Rosser's famous definition of "effective method": "...a method each step of which is precisely predetermined and which is certain to produce the answer in a finite number of steps... a machine which will then solve any problem of the set with no human intervention beyond inserting the question and (later) reading the answer" (p. 225–226, <it>The Undecidable</it>)</entry>
<entry level="1" type="bullet">

 <cite id="Reference-Sipser-2006" style="font-style:normal" class="book">Sipser, Michael&#32;(2006). Introduction to the Theory of Computation.&#32;PWS Publishing Company.</cite>&nbsp;</entry>
<entry level="1" type="bullet">

 <cite style="font-style:normal" class="book">Stone, Harold S.. Introduction to Computer Organization and Data Structures, 1972,&#32;McGraw-Hill, New York.</cite>&nbsp; Cf in particular the first chapter titled: <it>Algorithms, Turing Machines, and Programs</it>. His succinct informal definition: "...any sequence of instructions that can be obeyed by a robot, is called an <it>algorithm</it>" (p. 4).</entry>
<entry level="1" type="bullet">

 <cite style="font-style:normal"><link xlink:type="simple" xlink:href="../208/1208.xml">
Turing, Alan M.</link>&#32;(1936-7).&#32;"On Computable Numbers, With An Application to the Entscheidungsproblem". <it>Proceedings of the London Mathematical Society</it>&#32;<b>series 2, volume 42</b>: 230–265. <document wordnetid="106470073" confidence="0.8">
<written_communication wordnetid="106349220" confidence="0.8">
<writing wordnetid="106362953" confidence="0.8">
<link xlink:type="simple" xlink:href="../994/422994.xml">
doi</link></writing>
</written_communication>
</document>
:<weblink xlink:type="simple" xlink:href="http://dx.doi.org/10.1112%2Fplms%2Fs2-42.1.230">
10.1112/plms/s2-42.1.230</weblink>.</cite>&nbsp;. Corrections, ibid, vol. 43(1937) pp.544-546. Reprinted in <it>The Undecidable</it>, p. 116ff. Turing's famous paper completed as a Master's dissertation while at King's College Cambridge UK. </entry>
<entry level="1" type="bullet">

 <cite style="font-style:normal"><link xlink:type="simple" xlink:href="../208/1208.xml">
Turing, Alan M.</link>&#32;(1939).&#32;"Systems of Logic Based on Ordinals". <it>Proceedings of the London Mathematical Society</it>&#32;<b>series 2, volume 45</b>: 161–228. <document wordnetid="106470073" confidence="0.8">
<written_communication wordnetid="106349220" confidence="0.8">
<writing wordnetid="106362953" confidence="0.8">
<link xlink:type="simple" xlink:href="../994/422994.xml">
doi</link></writing>
</written_communication>
</document>
:<weblink xlink:type="simple" xlink:href="http://dx.doi.org/10.1112%2Fplms%2Fs2-45.1.161">
10.1112/plms/s2-45.1.161</weblink>.</cite>&nbsp; Reprinted in <it>The Undecidable</it>, p. 155ff. Turing's paper that defined "the oracle" was his PhD thesis while at Princeton USA. </entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../363/218363.xml">
United States Patent and Trademark Office</link> (2006), <weblink xlink:type="simple" xlink:href="http://www.uspto.gov/web/offices/pac/mpep/documents/2100_2106_02.htm">
<it>2106.02 **&amp;gt;Mathematical Algorithms - 2100 Patentability''</it></weblink>, Manual of Patent Examining Procedure (MPEP). Latest revision August 2006</entry>
</list>

</p>
<ss1>
<st>
 Secondary references </st>
<p>

<list>
<entry level="1" type="bullet">

 <cite style="font-style:normal" class="book"><link xlink:type="simple" xlink:href="../381/3017381.xml">
Bolter, David J.</link>. Turing's Man: Western Culture in the Computer Age, (1984),&#32;The University of North Carolina Press, Chapel Hill NC.</cite>&nbsp;, ISBN 0-8078-4108-0 pbk.</entry>
<entry level="1" type="bullet">

 <cite style="font-style:normal" class="book"><link>
Dilson, Jesse</link>. The Abacus, (1968,1994),&#32;St. Martin's Press, NY.</cite>&nbsp;, ISBN 0-312-10409-X (pbk.)</entry>
<entry level="1" type="bullet">

 <cite style="font-style:normal" class="book"><link>
van Heijenoort, Jean</link>. From Frege to Gödel, A Source Book in Mathematical Logic, 1879–1931, (1967),&#32;Harvard University Press, Cambridge, MA.</cite>&nbsp;, 3rd edition 1976[?], ISBN 0-674-32449-8 (pbk.)</entry>
<entry level="1" type="bullet">

 <cite style="font-style:normal" class="book"><link xlink:type="simple" xlink:href="../678/1106678.xml">
Hodges, Andrew</link>. Alan Turing: The Enigma, (1983),&#32;Simon and Schuster, New York.</cite>&nbsp;, ISBN 0-671-49207-1. Cf Chapter "The Spirit of Truth" for a history leading to, and a discussion of, his proof.</entry>
</list>
</p>

</ss1>
</sec>
<sec>
<st>
 External links </st>
<p>

<list>
<entry level="1" type="bullet">

  <cite id="Reference-Mathworld-Algorithm"><physical_entity wordnetid="100001930" confidence="0.8">
<communicator wordnetid="109610660" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<intellectual wordnetid="109621545" confidence="0.8">
<encyclopedist wordnetid="110055566" confidence="0.8">
<compiler wordnetid="109946957" confidence="0.8">
<alumnus wordnetid="109786338" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<writer wordnetid="110794014" confidence="0.8">
<mathematician wordnetid="110301261" confidence="0.8">
<scholar wordnetid="110557854" confidence="0.8">
<link xlink:type="simple" xlink:href="../189/836189.xml">
Eric W. Weisstein</link></scholar>
</mathematician>
</writer>
</scientist>
</causal_agent>
</alumnus>
</compiler>
</encyclopedist>
</intellectual>
</person>
</communicator>
</physical_entity>
, <it><weblink xlink:type="simple" xlink:href="http://mathworld.wolfram.com/Algorithm.html">
Algorithm</weblink></it> at <computer wordnetid="103082979" confidence="0.8">
<work wordnetid="104599396" confidence="0.8">
<creation wordnetid="103129123" confidence="0.8">
<machine wordnetid="103699975" confidence="0.8">
<reference_book wordnetid="106417598" confidence="0.8">
<publication wordnetid="106589574" confidence="0.8">
<encyclopedia wordnetid="106427387" confidence="0.8">
<product wordnetid="104007894" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<book wordnetid="106410904" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<web_site wordnetid="106359193" confidence="0.8">
<link xlink:type="simple" xlink:href="../235/374235.xml">
MathWorld</link></web_site>
</device>
</book>
</instrumentality>
</artifact>
</product>
</encyclopedia>
</publication>
</reference_book>
</machine>
</creation>
</work>
</computer>
.</cite></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://everydaymath.uchicago.edu/educators/Algorithms_final.pdf">
Algorithms in Everyday Mathematics</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.dmoz.org/Computers/Algorithms//">
Algorithms</weblink> at the <work wordnetid="100575741" confidence="0.8">
<possession wordnetid="100032613" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<company wordnetid="108058098" confidence="0.8">
<undertaking wordnetid="100795720" confidence="0.8">
<property wordnetid="113244109" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<subsidiary_company wordnetid="108003935" confidence="0.8">
<institution wordnetid="108053576" confidence="0.8">
<link xlink:type="simple" xlink:href="../501/18949501.xml">
Open Directory Project</link></institution>
</subsidiary_company>
</activity>
</psychological_feature>
</act>
</property>
</undertaking>
</company>
</event>
</possession>
</work>
</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://sortieralgorithmen.de/">
Sortier- und Suchalgorithmen (German)</weblink></entry>
</list>
</p>



</sec>
</bdy>
</article>
