<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 23:07:32[mciao0827] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<physical_entity  confidence="0.8" wordnetid="100001930">
<person  confidence="0.8" wordnetid="100007846">
<model  confidence="0.8" wordnetid="110324560">
<assistant  confidence="0.8" wordnetid="109815790">
<worker  confidence="0.8" wordnetid="109632518">
<causal_agent  confidence="0.8" wordnetid="100007347">
<header>
<title>Description number</title>
<id>7805214</id>
<revision>
<id>137631590</id>
<timestamp>2007-06-12T07:24:53Z</timestamp>
<contributor>
<username>Speciate</username>
<id>2977547</id>
</contributor>
</revision>
<categories>
<category> Computational models</category>
<category> Theory of computation</category>
<category> Recursion theory</category>
<category> Alan Turing</category>
</categories>
</header>
<bdy>

<b>Description numbers</b> are numbers that arise in the theory of <invention wordnetid="105633385" confidence="0.8">
<know-how wordnetid="105616786" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<link xlink:type="simple" xlink:href="../403/30403.xml">
Turing machine</link></method>
</know-how>
</invention>
s.  They are very similar to <link>
Gödel number</link>s, and are also occasionally called "Gödel numbers" in the literature.  Given some <link xlink:type="simple" xlink:href="../435/71435.xml">
universal Turing machine</link>, every Turing machine can, given its encoding on that machine, be assigned a number.  This is the machine's description number.  These numbers play a key role in <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../208/1208.xml">
Alan Turing</link></scientist>
</person>
's proof of the undecidability of the <link xlink:type="simple" xlink:href="../668/13668.xml">
halting problem</link>, and are very useful in reasoning about Turing machines as well.
<sec>
<st>
An example of a description number</st>
<p>

Say we had a Turing machine <it>M</it> with states q1, ... qR, with a tape alphabet with symbols s1, ... sm, with the blank denoted by s0, and transitions giving the current state, current symbol, and actions performed (which might be to overwrite the current tape symbol and move the tape head left or right, or maybe not move it at all), and the next state.  Under the original universal machine described by Alan Turing, this machine would be encoded as input to it as follows:</p>
<p>

<list>
<entry level="1" type="number">

 The state qi is encoded by the letter 'D' followed by the letter 'A' repeated i times (a <link xlink:type="simple" xlink:href="../321/360321.xml">
unary</link> encoding)</entry>
<entry level="1" type="number">

 The tape symbol sj is encoded by the letter 'D' followed by the letter 'C' repeated j times</entry>
<entry level="1" type="number">

 The transitions are encoded by giving the state, input symbol, symbol to write on the tape, direction to move (expressed by the letters 'L', 'R', or 'N', for left, right, or no movement), and the next state to enter, with states and symbols encoded as above.</entry>
</list>
</p>
<p>

The UTM's input thus consists of the transitions separated by semicolons, so its input alphabet consists of the seven symbols, 'D', 'A', 'C', 'L', 'R', 'N', and ';'.  For example, for a very simple Turing machine that alternates printing 0 and 1 on its tape forever:</p>
<p>

<list>
<entry level="1" type="number">

 State: q1, input symbol: blank, action: print 1, move right, next state: q2</entry>
<entry level="1" type="number">

 State: q2, input symbol: blank, action: print 0, move right, next state: q1</entry>
</list>
</p>
<p>

Letting the blank be s0, '0' be s1 and '1' be s2, the machine would be encoded by the UTM as:</p>
<p>

DADDCCRDAA;DAADDCRDA;</p>
<p>

But then, if we replaced each of the seven symbols 'A' by 1, 'C' by 2, 'D' by 3, 'L' by 4, 'R' by 5, 'N' by 6, and ';' by 7, we would have an encoding of the Turing machine as a natural number: this is the description number of that Turing machine under Turing's universal machine.  The simple Turing machine described above would thus have the description number 313322531173113325317.  There is an analogous process for every other type of universal Turing machine.  It is usually not necessary to actually compute a description number in this way: the point is that every <link xlink:type="simple" xlink:href="../474/21474.xml">
natural number</link> may be interpreted as the code for at most one Turing machine, though many natural numbers may not be the code for any Turing machine (or to put it another way, they represent Turing machines that have no states).  The fact that such a number always exists for any Turing machine is generally the important thing.</p>

</sec>
<sec>
<st>
Application to undecidability proofs</st>
<p>

Description numbers play a key role in many undecidability proofs, such as the proof that the <link xlink:type="simple" xlink:href="../668/13668.xml">
halting problem</link> is <link xlink:type="simple" xlink:href="../795/54795.xml">
undecidable</link>.  In the first place, the existence of this direct correspondence between natural numbers and Turing machines shows that the set of all Turing machines is <link xlink:type="simple" xlink:href="../026/6026.xml">
denumerable</link>, and since the set of all <link xlink:type="simple" xlink:href="../577/23577.xml">
partial function</link>s is <link xlink:type="simple" xlink:href="../248/32248.xml">
uncountably infinite</link>, there must certainly be many functions that cannot be computed by Turing machines.</p>
<p>

By making use of a technique similar to <link xlink:type="simple" xlink:href="../426/51426.xml">
Cantor's diagonal argument</link>, it is possible exhibit such an uncomputable function, for example, that the halting problem in particular is undecidable.  First, let us denote by U(e, x) the action of the universal Turing machine given a description number e and input x, returning 0 if e is not the description number of a valid Turing machine.  Now, supposing that there were some <link xlink:type="simple" xlink:href="../775/775.xml">
algorithm</link> capable of settling the halting problem, i.e. a Turing machine TEST(e) which given the description number of some Turing machine would return 1 if the Turing machine halts on every input, or 0 if there are some inputs that would cause it to run forever.  By combining the outputs of these machines, it should be possible to construct another machine δ(k) that returns U(k, k) + 1 if TEST(k) is 1 and 0 if TEST(k) is 0.  From this definition δ is defined for every input and must naturally be <link>
total recursive</link>.  Since δ is built up from what we have assumed are Turing machines as well then it too must have a description number, call it e.  So, we can feed the description number e to the UTM again, and by definition, δ(k) = U(e, k), so δ(e) = U(e, e).  But since TEST(e) is 1, by our other definition, δ(e) = U(e, e) + 1, leading to a contradiction.  Thus, TEST(e) cannot exist, and in this way we have settled the halting problem as undecidable.</p>

</sec>
<sec>
<st>
See also</st>
<p>

<list>
<entry level="1" type="bullet">

 <link>
Gödel number</link></entry>
<entry level="1" type="bullet">

 <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<model wordnetid="110324560" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<assistant wordnetid="109815790" confidence="0.8">
<device wordnetid="103183080" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<machine wordnetid="103699975" confidence="0.8">
<link xlink:type="simple" xlink:href="../435/71435.xml">
Universal Turing machine</link></machine>
</causal_agent>
</worker>
</device>
</assistant>
</instrumentality>
</artifact>
</model>
</person>
</physical_entity>
 </entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../409/2989409.xml">
Church numeral</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../668/13668.xml">
Halting problem</link></entry>
</list>
</p>

</sec>
<sec>
<st>
References</st>
<p>

<list>
<entry level="1" type="bullet">

  <cite style="font-style:normal" class="book"><person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../443/299443.xml">
John Hopcroft</link></scientist>
</person>
 and <link xlink:type="simple" xlink:href="../318/1702318.xml">
Jeffrey D. Ullman</link>&#32;(1979). <link xlink:type="simple" xlink:href="../250/3813250.xml">
Introduction to Automata Theory, Languages, and Computation</link>, 1st edition,&#32;Addison-Wesley. ISBN 0-201-44124-1.</cite>&nbsp; (the Cinderella book)</entry>
<entry level="1" type="bullet">

 Turing, A. M. "On computable numbers, with an application to the <link xlink:type="simple" xlink:href="../672/9672.xml">
Entscheidungsproblem</link>", Proc. Roy. Soc. London, 2(42), 1936, pp. 230-265.</entry>
</list>
</p>

</sec>
</bdy>
</causal_agent>
</worker>
</assistant>
</model>
</person>
</physical_entity>
</article>
