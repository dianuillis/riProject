<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 23:04:39[mciao0826] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>BKM algorithm</title>
<id>7822306</id>
<revision>
<id>196389180</id>
<timestamp>2008-03-06T22:16:07Z</timestamp>
<contributor>
<username>Andreas Kaufmann</username>
<id>72502</id>
</contributor>
</revision>
<categories>
<category>Numerical analysis</category>
</categories>
</header>
<bdy>

The <b>BKM algorithm</b> is a <link>
shift-and-add algorithm</link> for computing <link xlink:type="simple" xlink:href="../412/10412.xml">
elementary function</link>s, first published in <link xlink:type="simple" xlink:href="../337/18948337.xml">
1994</link> by J.C. Bajard, S. Kla, and J.M. Muller.  BKM is based on computing complex <link xlink:type="simple" xlink:href="../860/17860.xml">
logarithm</link>s and <link xlink:type="simple" xlink:href="../678/9678.xml">
exponential</link>s using a method similar to the algorithm <scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../399/210399.xml">
Henry Briggs</link></scientist>
 used to compute logarithms.  By using a precomputed table of logarithms of negative powers of two, the BKM algorithm computes elementary functions using only integer add, shift, and compare operations.<p>

BKM is similar to <link xlink:type="simple" xlink:href="../590/859590.xml">
CORDIC</link>, but uses a table of logarithms rather than a table of arctangents.  On each iteration, a choice of coefficient is made from a set of nine complex numbers, 1, 0, −1, i, −i, 1+i, 1−i, −1+i, −1−i, rather than only −1 or +1 as used by CORDIC.  BKM provides a simpler method of computing some elementary functions, and unlike CORDIC, BKM needs no result scaling factor.  The convergence rate of BKM is approximately one bit per iteration, like CORDIC, but BKM requires more precomputed table elements for the same precision because the table stores logarithms of complex operands.</p>
<p>

As with other algorithms in the shift-and-add class, BKM is particularly well-suited to hardware implementation.  The relative performance of software BKM implementation in comparison to other methods such as <link xlink:type="simple" xlink:href="../000/23000.xml">
polynomial</link> or <link xlink:type="simple" xlink:href="../210/361210.xml">
rational</link> approximations will depend on the availability of fast multi-bit shifts (i.e, a <link xlink:type="simple" xlink:href="../425/314425.xml">
barrel shifter</link>) or hardware <link xlink:type="simple" xlink:href="../376/11376.xml">
floating point</link> arithmetic.</p>

<sec>
<st>
References</st>
<p>

<list>
<entry level="1" type="bullet">

J.C. Bajard, S. Kla, and J.M. Muller.  <weblink xlink:type="simple" xlink:href="http://perso.ens-lyon.fr/jean-michel.muller/BKM94.pdf">
BKM: A new hardware algorithm for complex elementary functions</weblink>.  IEEE Transactions on Computers, 43(8): 955-963, August 1994</entry>
<entry level="1" type="bullet">

J.M. Muller, Elementary Functions: Algorithms and Implementation, 2nd Ed.  Birkhauser 2006</entry>
</list>
</p>



</sec>
</bdy>
</article>
