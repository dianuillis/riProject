<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 23:03:35[mciao0828] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<class  confidence="0.8" wordnetid="107997703">
<collection  confidence="0.8" wordnetid="107951464">
<group  confidence="0.8" wordnetid="100031264">
<header>
<title>Weakly NP-complete</title>
<id>8047019</id>
<revision>
<id>237725505</id>
<timestamp>2008-09-11T15:17:48Z</timestamp>
<contributor>
<username>Simeon</username>
<id>1189543</id>
</contributor>
</revision>
<categories>
<category>Complexity classes</category>
<category>Mathematical optimization</category>
</categories>
</header>
<bdy>

In <link xlink:type="simple" xlink:href="../543/7543.xml">
computational complexity</link>, an <class wordnetid="107997703" confidence="0.8">
<collection wordnetid="107951464" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<link xlink:type="simple" xlink:href="../466/39466.xml">
NP-complete</link></group>
</collection>
</class>
 (or <class wordnetid="107997703" confidence="0.8">
<collection wordnetid="107951464" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<link xlink:type="simple" xlink:href="../681/54681.xml">
NP-hard</link></group>
</collection>
</class>
) problem is <b>weakly NP-complete</b> (or weakly NP-hard), if there is an algorithm for the problem whose running time is polynomial in the dimension of the problem and the magnitudes of the data involved (provided these are given as integers), rather than the base-two logarithms of their magnitudes. Such algorithms are technically exponential functions of their input size and are therefore not considered polynomial. <p>

For example, the NP-hard <link xlink:type="simple" xlink:href="../974/16974.xml">
knapsack problem</link> can be solved by a <link xlink:type="simple" xlink:href="../297/125297.xml">
dynamic programming</link> algorithm requiring a number of steps polynomial in the size of the knapsack and the number of items (assuming that all data are scaled to be integers). This algorithm is <link xlink:type="simple" xlink:href="../581/44581.xml">
exponential time</link> since the input sizes of the objects and knapsack are logarithmic in their magnitudes. However, as Garey and Johnson (1979) observed, “<it>A pseudo-polynomial-time algorithm … will display 'exponential behavior' only when confronted with instances containing 'exponentially large' numbers, [which] might be rare for the application we are interested in. If so, this type of algorithm might serve our purposes almost as well as a polynomial time algorithm</it>.” </p>
<p>

The related term <link xlink:type="simple" xlink:href="../351/6319351.xml">
strongly NP-complete</link> (or unary NP-complete) refers to those problems that remain NP-complete even if the data are encoded in <link xlink:type="simple" xlink:href="../316/32316.xml">
unary</link> (that is, if the data are “small” relative to the overall input size).</p>

<sec>
<st>
References</st>

<p>

<list>
<entry level="1" type="bullet">

 M. R. Garey and D. S. Johnson. <it>Computers and Intractability: a Guide to the Theory of NP-Completeness</it>. W.H. Freeman, New York, 1979.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 L. Hall. <weblink xlink:type="simple" xlink:href="http://www.esi2.us.es/~mbilbao/complexi.htm">
Computational Complexity</weblink>. The Johns Hopkins University.</entry>
</list>
</p>

</sec>
</bdy>
</group>
</collection>
</class>
</article>
