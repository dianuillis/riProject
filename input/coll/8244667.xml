<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 23:19:36[mciao0827] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<event  confidence="0.8" wordnetid="100029378">
<rule  confidence="0.8" wordnetid="105846932">
<act  confidence="0.8" wordnetid="100030358">
<psychological_feature  confidence="0.8" wordnetid="100023100">
<procedure  confidence="0.8" wordnetid="101023820">
<activity  confidence="0.8" wordnetid="100407535">
<algorithm  confidence="0.8" wordnetid="105847438">
<header>
<title>Tarjan&apos;s strongly connected components algorithm</title>
<id>8244667</id>
<revision>
<id>244220688</id>
<timestamp>2008-10-09T21:02:21Z</timestamp>
<contributor>
<username>Michael Veksler</username>
<id>8043180</id>
</contributor>
</revision>
<categories>
<category>Graph algorithms</category>
</categories>
</header>
<bdy>

<b>Tarjan's Algorithm</b> (named for its discoverer, <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../127/46127.xml">
Robert Tarjan</link></scientist>
</person>
) is a <link xlink:type="simple" xlink:href="../401/12401.xml">
graph theory</link> <link xlink:type="simple" xlink:href="../775/775.xml">
algorithm</link> for finding the <link xlink:type="simple" xlink:href="../680/684680.xml">
strongly connected components</link> of a <link xlink:type="simple" xlink:href="../931/557931.xml">
graph</link>. It can be seen as an improved version of <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../443/4072443.xml">
Kosaraju's algorithm</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
, and is comparable in efficiency to <idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<component wordnetid="105868954" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<part wordnetid="105867413" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../419/12377419.xml">
Gabow's algorithm</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</part>
</rule>
</event>
</component>
</concept>
</idea>
.
<sec>
<st>
 Idea </st>
<p>

The basic idea of the algorithm is this: a <link xlink:type="simple" xlink:href="../034/97034.xml">
depth-first search</link> begins from a start node.  The strongly connected components form the subtrees of the search tree, the roots of which are the roots of the strongly connected components.</p>
<p>

The nodes are placed on a <link xlink:type="simple" xlink:href="../993/273993.xml">
stack</link> in the order in which they are visited.  When the search returns from a subtree, the nodes are taken from the stack and it is determined whether each node is the root of a strongly connected component.  If a node is the root of a strongly connected component, then it and all of the nodes taken off before it form that strongly connected component.</p>

</sec>
<sec>
<st>
 The root property </st>

<p>

The crux of the algorithm comes in determining whether a node is the root of a strongly connected component.  To do this, each node is given a depth search index v.index, which numbers the nodes consecutively in the order in which they are discovered.  In addition, each node is assigned a value v.lowlink that satisfies v.lowlink := min {v'.index: v' is reachable from v}.  Therefore v is the root of a strongly connected component if and only if v.lowlink = v.index.  The value v.lowlink is computed during the depth first search such that it is always known when needed.</p>

</sec>
<sec>
<st>
 The algorithm in <link xlink:type="simple" xlink:href="../185/24185.xml">
pseudocode</link> </st>
<p>

Input: Graph G = (V, E), Start node v0</p>
<p>

index = 0                       // DFS node number counter 
S = empty                       // An empty stack of nodes
tarjan(v0)                      // Start a DFS at the start node</p>
<p>

procedure tarjan(v)
v.index = index               // Set the depth index for v
v.lowlink = index
index = index + 1
S.push(v)                     // Push v on the stack
forall (v, v') in E do        // Consider successors of v 
if (v'.index is undefined)  // Was successor v' visited? 
tarjan(v')                // Recurse
v.lowlink = min(v.lowlink, v'.lowlink)
elseif (v' in S)            // Is v' on the stack?
v.lowlink = min(v.lowlink, v'.lowlink)
if (v.lowlink == v.index)     // Is v the root of an SCC?
print "SCC:"
repeat
v' = S.pop
print v'
until (v' == v)</p>

</sec>
<sec>
<st>
 Remarks </st>
<p>

<list>
<entry level="1" type="number">

Complexity: The tarjan procedure is called once for each node; the forall statement considers each edge at most twice.  The algorithm's running time is therefore linear in the number of edges in G (O(|V|+|E|)).</entry>
<entry level="1" type="number">

The test for whether v' is on the stack should be done in constant time, for example, by testing a flag stored on each node that indicates whether it is on the stack.</entry>
<entry level="1" type="number">

The algorithm can only find those strongly connected components that are reachable from the start node.  This can be overcome by starting the algorithm several times from different start nodes.</entry>
</list>
</p>

</sec>
<sec>
<st>
 Literature </st>
<p>

<list>
<entry level="1" type="bullet">

 Robert Tarjan: <it>Depth-first search and linear graph algorithms</it>. In: <it>SIAM Journal on Computing</it>. Vol. 1 (1972), No. 2, P. 146-160.</entry>
</list>
</p>

</sec>
<sec>
<st>
 Links </st>
<p>

<weblink xlink:type="simple" xlink:href="http://www.ics.uci.edu/~eppstein/161/960220.html#sca">
Description of Tarjan's Algorithm</weblink></p>


</sec>
</bdy>
</algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</article>
