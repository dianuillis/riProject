<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 17:43:58[mciao0828] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>CipherSaber</title>
<id>827224</id>
<revision>
<id>231496916</id>
<timestamp>2008-08-12T18:05:15Z</timestamp>
<contributor>
<username>BOTijo</username>
<id>3729068</id>
</contributor>
</revision>
<categories>
<category>Cryptographic software</category>
</categories>
</header>
<bdy>

<b>CipherSaber</b> is an extremely simple <link xlink:type="simple" xlink:href="../042/53042.xml">
symmetric encryption</link> <message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<link xlink:type="simple" xlink:href="../770/630770.xml">
protocol</link></rule>
</direction>
</protocol>
</message>
 based on the <cipher wordnetid="106254239" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../831/25831.xml">
RC4</link></cipher>
 stream cipher.  Its goals are both technical and <link xlink:type="simple" xlink:href="../986/22986.xml">
political</link>: it gives reasonably strong protection of message confidentiality, yet it's designed to be simple enough that even novice <link xlink:type="simple" xlink:href="../716/23716.xml">
programmer</link>s can memorize the algorithm and implement it from scratch.  According to the designer, a CipherSaber version in the <link xlink:type="simple" xlink:href="../663/465663.xml">
QBASIC programming language</link>  takes just sixteen lines of code.  Its political aspect is that because it's so simple, it can be reimplemented anywhere at any time, and so it provides a way for users to communicate privately even if <link xlink:type="simple" xlink:href="../229/12229.xml">
government</link> or other controls make distribution of normal cryptographic software completely impossible.
<sec>
<st>
History and Purpose</st>

<p>

CipherSaber was invented by <link>
Arnold Reinhold</link> to keep strong cryptography in the hands of the public.  Many governments have implemented legal restrictions on who can use cryptography, and many more have proposed them.  By publicizing details on a secure yet easy-to-program encryption algorithm, Reinhold hopes to keep encryption technology accessible to everyone.</p>
<p>

Unlike programs like <standard wordnetid="107260623" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../080/23080.xml">
PGP</link></system_of_measurement>
</standard>
 which are distributed as convenient-to-use prewritten software, Reinhold publishes CipherSaber only as a specification.  The specification is intended to be so simple that even a beginning programmer can implement it easily.   As the CipherSaber web site <weblink xlink:type="simple" xlink:href="http://ciphersaber.gurus.com">
http://ciphersaber.gurus.com</weblink> explains:
<indent level="1">

<it>In George Lucas' </it><product wordnetid="104007894" confidence="0.8">
<creation wordnetid="103129123" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<social_event wordnetid="107288639" confidence="0.8">
<movie wordnetid="106613686" confidence="0.8">
<show wordnetid="106619065" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<link xlink:type="simple" xlink:href="../678/26678.xml">
Star Wars</link></psychological_feature>
</show>
</movie>
</social_event>
</event>
</artifact>
</creation>
</product>
<it> trilogy, <link xlink:type="simple" xlink:href="../515/310515.xml">
Jedi Knight</link>s were expected to make their own <link xlink:type="simple" xlink:href="../280/100280.xml">
light saber</link>s. The message was clear: a warrior confronted by a powerful empire bent on totalitarian control must be self-reliant. As we face a real threat of a ban on the distribution of strong cryptography, in the United States and possibly world-wide, we should emulate the Jedi masters by learning how to build strong cryptography programs all by ourselves. If this can be done, strong cryptography will become impossible to suppress.</it>
</indent>

The web site has a graphics file that displays as a "CipherKnight" certificate; however, that file is encrypted using CipherSaber with a known key published alongside the file.  Users can view the graphic (and optionally print it out for framing) by first writing their own CipherSaber implementation to decrypt the file.  By writing their own implementation and performing a few other small tasks, the user becomes a CipherKnight and the decrypted certificate attests to their knighthood.   So, rather than providing a ready-made tool, CipherSaber's designer hopes to help computer users understand that they're capable of making their own strong cryptography programs without having to rely on professional developers or the permission of the government.</p>

</sec>
<sec>
<st>
 Technical description </st>

<p>

In the original version of CipherSaber (now called CipherSaber-1 or CS1), each encrypted message begins with a random ten <link xlink:type="simple" xlink:href="../365/3365.xml">
byte</link> <link xlink:type="simple" xlink:href="../971/105971.xml">
initialization vector</link> (IV). This IV is appended to the CipherSaber key to form the input to the RC4 key setup algorithm. The message, XORed with the RC4 <link xlink:type="simple" xlink:href="../065/10441065.xml">
keystream</link>, immediately follows.</p>
<p>

The <link>
Fluhrer</link>-<link>
Mantin</link>-<person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../314/57314.xml">
Shamir</link></scientist>
</person>
 attack on RC4 has rendered CipherSaber-1 vulnerable if a large number (&amp;gt;1000) messages are sent with the same CipherSaber key.  To address this, the CipherSaber designer has made a modified protocol (called CipherSaber-2) in which the RC4 key setup loop is repeated multiple times (20 is recommended).  In addition to agreeing on a secret key, parties communicating with CipherSaber-2 must agree on how many times to repeat this loop.</p>
<p>

The ciphertext output is a binary byte stream.  For use with communications systems that can accept only <message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<representation wordnetid="105926676" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<link xlink:type="simple" xlink:href="../586/586.xml">
ASCII</link></rule>
</direction>
</representation>
</protocol>
</message>
 data, the author recommends encoding the byte stream as hexadecimal digits.  This is less efficient than, for example, <link xlink:type="simple" xlink:href="../241/215241.xml">
base64</link> <link xlink:type="simple" xlink:href="../045/19045.xml">
MIME</link> encoding, but it is much simpler to program, keeping with CipherSaber's goal of maximal ease of implementation.</p>

</sec>
<sec>
<st>
Security and usability</st>
<p>

CipherSaber is strong enough and usable enough to make its political point effectively.  However, it falls markedly short of the security and convenience one would normally ask of such a cryptosystem.  While CipherKnights can use CipherSaber to exchange occasional messages with each other reasonably securely, either for fun or in times of great distress, CipherSaber strips cryptography to its bare essentials and it does not offer enough features to be suitable for wide deployment and routine daily use.  CipherSaber's author in fact asks users to download and install <standard wordnetid="107260623" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../080/23080.xml">
PGP</link></system_of_measurement>
</standard>
 as one of the steps of becoming a CipherKnight.  CipherSaber can be seen as a last-resort fallback system to use if programs like PGP are <link xlink:type="simple" xlink:href="../486/843486.xml">
ban</link>ned.  Some of CipherSaber's specific sacrifices and shortcomings are:</p>
<p>

<list>
<entry level="1" type="bullet">

 CipherSaber provides no <link xlink:type="simple" xlink:href="../967/47967.xml">
message authentication</link>.  This by itself would normally be considered a fatal flaw, and the nature of RC4 makes this vulnerability straightforward to exploit.  For example, an attacker who knows that the message contains "<b>Meet Jane and me tomorrow at 3:30 pm</b>" at a particular point can recover the keystream at that point by reversing the encryption.  Then the attacker can replace the original content with any other content of the exact same length, such as "<b>3:30 meeting is cancelled, stay home</b>" by encrypting it with the recovered keystream, without knowing the encryption key. </entry>
<entry level="1" type="bullet">

 CipherSaber (at least in a minimal implementation) has no features for <link xlink:type="simple" xlink:href="../063/631063.xml">
key management</link>.  Each pair of communicating users must somehow securely agree on an encryption key, and a minimal program will have no facilities for maintaining databases of such keys.  Agreeing on encryption keys when the only communications channels available are insecure is the classic <link xlink:type="simple" xlink:href="../878/30878.xml">
chicken-and-egg problem</link> solved by <link>
public key cryptography</link> as provided by PGP-like programs.  Avoiding the need for secure symmetric key agreements between every pair of users is of considerable convenience and generally improves security.</entry>
<entry level="1" type="bullet">

 CipherSaber-1 can be considered too broken to use: RC4's key scheduling is now known to be too weak to be used in the naive way that CipherSaber-1 uses it, if the number of different messages encrypted with the same key is large.  CipherSaber-2 modifies CipherSaber-1's key setup procedure by repeating it multiple times in the hope of improving its security (the result is equivalent to using conventional RC4 starting with a key that's been preprocessed by a complex algorithm).  However, the effectiveness of this modification has not been proven.</entry>
<entry level="1" type="bullet">

 Both versions of CipherSaber are vulnerable to <link xlink:type="simple" xlink:href="../785/53785.xml">
dictionary attack</link> if the chosen key (which would normally be a password or passphrase) does not have sufficient <link xlink:type="simple" xlink:href="../891/9891.xml">
entropy</link>.  Serious cryptography implementations usually generate their own keys at <link xlink:type="simple" xlink:href="../523/19196523.xml">
random</link> instead of relying on passwords chosen by humans. The CipherSaber site recommends generating high entropy random passphrases using <link xlink:type="simple" xlink:href="../746/1371746.xml">
diceware</link>.</entry>
<entry level="1" type="bullet">

 Like most other cryptosystems (including <standard wordnetid="107260623" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../080/23080.xml">
PGP</link></system_of_measurement>
</standard>
), CipherSaber makes no provisions at all to prevent attackers from <it>detecting</it> (as opposed to decrypting) the encrypted messages.  This is a potentially serious problem in some situations for which CipherSaber was designed: if the government has banned the distribution of cryptographic software, it probably also will want to pounce on anyone who it finds sending encrypted messages.  See <link xlink:type="simple" xlink:href="../015/480015.xml">
traffic analysis</link> and <link xlink:type="simple" xlink:href="../733/28733.xml">
steganography</link> for more about these issues and their countermeasures.</entry>
</list>
</p>

</sec>
<sec>
<st>
References</st>
<p>

<list>
<entry level="1" type="bullet">

 <it>Internet Secrets,</it> 2nd Edition, <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<intellectual wordnetid="109621545" confidence="0.8">
<alumnus wordnetid="109786338" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scholar wordnetid="110557854" confidence="0.8">
<link xlink:type="simple" xlink:href="../136/652136.xml">
John R. Levine</link></scholar>
</causal_agent>
</alumnus>
</intellectual>
</person>
</physical_entity>
, Editor, Chapter 38, <link xlink:type="simple" xlink:href="../558/846558.xml">
IDG Books</link>, 2000, ISBN 0-7645-3239-1</entry>
</list>
</p>

</sec>
<sec>
<st>
External links</st>
<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://ciphersaber.gurus.org">
CipherSaber home page</weblink></entry>
</list>
</p>

</sec>
</bdy>
</article>
