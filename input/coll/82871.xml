<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 15:52:19[mciao0825] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>Data model</title>
<id>82871</id>
<revision>
<id>244244923</id>
<timestamp>2008-10-09T23:01:11Z</timestamp>
<contributor>
<username>Mdd</username>
<id>113850</id>
</contributor>
</revision>
<categories>
<category>Data modeling</category>
</categories>
</header>
<bdy>

A <b>data model</b> is an <link xlink:type="simple" xlink:href="../795/3224795.xml">
abstract model</link> that describes how <information wordnetid="105816287" confidence="0.8">
<datum wordnetid="105816622" confidence="0.8">
<link xlink:type="simple" xlink:href="../333/2234333.xml">
data</link></datum>
</information>
 is represented and accessed. Data models formally define <link xlink:type="simple" xlink:href="../665/169665.xml">
data object</link>s and relationships among data objects for a domain of interest. Some typical applications of <link xlink:type="simple" xlink:href="../170/1659170.xml">
database model</link>s include supporting the development of <link xlink:type="simple" xlink:href="../377/8377.xml">
database</link>s and enabling the exchange of data for a particular area of interest. Data models are specified in a <link xlink:type="simple" xlink:href="../422/759422.xml">
data modeling</link> language.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref>
<sec>
<st>
 Overview </st>
<p>

Managing large quantities of structured and unstructured data is a primary function of <link xlink:type="simple" xlink:href="../495/237495.xml">
information system</link>s. Data models describe structured <link xlink:type="simple" xlink:href="../040/18985040.xml">
data</link> for <link xlink:type="simple" xlink:href="../904/41904.xml">
storage</link> in data management systems such as relational databases. They typically do not describe unstructured data, such as <link xlink:type="simple" xlink:href="../236/33236.xml">
word processing</link> documents, <link xlink:type="simple" xlink:href="../738/9738.xml">
email messages</link>, pictures, digital audio, and video.</p>

<ss1>
<st>
 The role of data models </st>
<p>
 
<image width="320px" src="3-4_Data_model_roles.jpg" type="thumb">
<caption>

How data models deliver benefit. 
</caption>
</image>

Data models support data and computer systems by providing the definition and format of data. If this is done consistently across systems then compatibility of data can be achieved. If the same data structures are used to store and access data then different applications can share data. The results of this are indicated above. However, systems and interfaces often cost more than they should, to build, operate, and maintain. They may also constrain the business rather than support it. A major cause is that the quality of the data models implemented in systems and interfaces is poor.
<list>
<entry level="1" type="bullet">

 Business rules, specific to how things are done in a particular place, are often fixed in the structure of a data model. This means that small changes in the way business is conducted lead to large changes in computer systems and interfaces.</entry>
<entry level="1" type="bullet">

 Entity types are often not identified, or incorrectly identified. This can lead to replication of data, data structure, and functionality, together with the attendant costs of that duplication in development and maintenance.</entry>
<entry level="1" type="bullet">

 Data models for different systems are arbitrarily different. The result of this is that complex interfaces are required between systems that share data. These interfaces can account for between 25-70% of the cost of current systems.</entry>
<entry level="1" type="bullet">

 Data cannot be shared electronically with customers and suppliers, because the structure and meaning of data has not been standardised. For example, engineering design data and drawings for process plant are still sometimes exchanged on paper.</entry>
</list>

The reason for these problems is a lack of standards that will ensure that data models will both meet business needs and be consistent.</p>

</ss1>
<ss1>
<st>
 Three perspectives </st>
<p>

<image width="320px" src="4-2_ANSI-SPARC_three_level_architecture.jpg" type="thumb">
<caption>

The ANSI/SPARC three level architecture. This shows that a data model can be an external model (or view), a conceptual model, or a physical model. This is not the only way to look at data models, but it is a useful way, particularly when comparing models. 
</caption>
</image>

A data model <it>instance</it> may be one of three kinds according to <link xlink:type="simple" xlink:href="../659/659.xml">
ANSI</link> in 1975<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%222%22])">2</ref>:
<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../267/58267.xml">
Conceptual schema</link> :  describes the semantics of a domain, being the scope of the model. For example, it may be a model of the interest area of an organization or industry. This consists of entity classes, representing kinds of things of significance in the domain, and relationships assertions about associations between pairs of entity classes. A conceptual schema specifies the kinds of facts or propositions that can be expressed using the model. In that sense, it defines the allowed expressions in an artificial 'language' with a scope that is limited by the scope of the model.</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../380/1040380.xml">
Logical schema</link> : describes the semantics, as represented by a particular data manipulation technology.  This consists of descriptions of tables and columns, object oriented classes, and XML tags, among other things. </entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../391/1040391.xml">
Physical schema</link> : describes the physical means by which data are stored.  This is concerned with partitions, CPUs, tablespaces, and the like.</entry>
</list>
</p>
<p>

The significance of this approach, according to ANSI, is that it allows the three perspectives to be relatively independent of each other. Storage technology can change without affecting either the logical or the conceptual model. The table/column structure can change without (necessarily) affecting the conceptual model.  In each case, of course, the structures must remain consistent with the other model.  The table/column structure may be different from a direct translation of the entity classes and attributes, but it must ultimately carry out the objectives of the conceptual entity class structure.  Early phases of many software development projects emphasize the design of a <link xlink:type="simple" xlink:href="../267/58267.xml">
conceptual data model</link>. Such a design can be detailed into a <link xlink:type="simple" xlink:href="../943/1025943.xml">
logical data model</link>. In later stages, this model may be translated into <link xlink:type="simple" xlink:href="../540/1030540.xml">
physical data model</link>. However, it is also possible to implement a conceptual model directly.</p>

</ss1>
</sec>
<sec>
<st>
 History </st>
<p>

In the 1960s the concept of management information system (MIS) was initiated. During that time, the information system provided the data and information for management purposes. The first generation database system, called <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../750/1362750.xml">
Integrated Data Store</link></instrumentality>
</artifact>
</system>
 (IDS), was designed by <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../387/301387.xml">
Charles Bachman</link></scientist>
</person>
 at General Electric. Two famous database models, the <link xlink:type="simple" xlink:href="../098/185098.xml">
network data model</link> and the <link xlink:type="simple" xlink:href="../075/247075.xml">
hierarchical data model</link>, where proposed during this periode of time.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%223%22])">3</ref> Prior to the development of the first <link xlink:type="simple" xlink:href="../513/8513.xml">
database management system</link> (DMMS), access to data was provided by application programs that accessed flat files. The data integrity problem and the inability of such file processing systems to represent logical data relationships lead to the first data model: the hierarchical data model. This model, which was implemented primarily by IBM's  <link xlink:type="simple" xlink:href="../260/391260.xml">
Information Management System</link> (IMS) only allows one-to-one or one-to-many relationships between entities. Any entity at the many end of the relationship can be related only to one netity at the one end.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%224%22])">4</ref> End 1960s <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../548/93548.xml">
Edgar F. Codd</link></scientist>
</person>
 worked out his theories of data arrangement, and proposed the <link xlink:type="simple" xlink:href="../220/26220.xml">
relational model</link> for database management based on <link xlink:type="simple" xlink:href="../983/10983.xml">
first-order predicate logic</link>.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%225%22])">5</ref> </p>
<p>

In the 1970s <link xlink:type="simple" xlink:href="../991/752991.xml">
entity relationship model</link>ing was created as a means of graphically representing data structures.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%226%22])">6</ref> An entity-relationship model (ERM) is an abstract conceptual representation of structured data. Entity-relationship modeling is a relational schema database modeling method, used in software engineering to produce a type of conceptual data model (or semantic data model) of a system, often a relational database, and its requirements in a top-down fashion. Diagrams created using this process are called entity-relationship diagrams, or ER diagrams or ERDs for short. Originally proposed in 1976 by <peer wordnetid="109626238" confidence="0.8">
<physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<pioneer wordnetid="110434725" confidence="0.8">
<intellectual wordnetid="109621545" confidence="0.8">
<colleague wordnetid="109935990" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<adult wordnetid="109605289" confidence="0.8">
<professional wordnetid="110480253" confidence="0.8">
<educator wordnetid="110045713" confidence="0.8">
<associate wordnetid="109816771" confidence="0.8">
<creator wordnetid="109614315" confidence="0.8">
<alumnus wordnetid="109786338" confidence="0.8">
<academician wordnetid="109759069" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<originator wordnetid="110383816" confidence="0.8">
<scholar wordnetid="110557854" confidence="0.8">
<link xlink:type="simple" xlink:href="../520/1041520.xml">
Peter Chen</link></scholar>
</originator>
</causal_agent>
</academician>
</alumnus>
</creator>
</associate>
</educator>
</professional>
</adult>
</scientist>
</colleague>
</intellectual>
</pioneer>
</person>
</physical_entity>
</peer>
.</p>
<p>

In the 1980s, a significantly new approach to data modeling was engineered by <link xlink:type="simple" xlink:href="../941/19595941.xml">
G.M. Nijssen</link>. Deemed NIAM, short for “Nijssen’s Information Analysis Methodology,” it has since been re-named ORM, or “object role modeling.” The purpose is to show representations of relationships instead of showing types of entities as relational table analogs. With a focus on the use of language in making data modeling more accessible to a wider audience, ORM has a much higher potential for describing business regulations as well as constraints.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%227%22])">7</ref> </p>
<p>

The development of the object-oriented paradigm brought about a fundamental change in the way we look at data and the procedures that operate on data. traditionally, data and procedures have been stored seperately, the data and their relationship in a database, the procedures in and application program. Object orientation, however, combined an entity's procedure with its data.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%224%22])">4</ref></p>

</sec>
<sec>
<st>
 Types of data models </st>

<ss1>
<st>
 Database model </st>
<p>

A <link xlink:type="simple" xlink:href="../170/1659170.xml">
database model</link> is a theory or specification describing how a <link xlink:type="simple" xlink:href="../377/8377.xml">
database</link> is structured and used. Several such models have been suggested. Common models include:</p>
<p>

<image width="150px" src="FigFileConvert000a.svg">
</image>

<image width="150px" src="Hierarchisches_Datenbankmodell.png">
</image>

<image width="150px" src="Netzwerkdatenbankmodell.png">
</image>

<image width="150px" src="Relational_model_concepts.png">
</image>
</p>

<p>

<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../973/573973.xml">
Flat model</link>: This may not strictly qualify as a data model.  The flat (or table) model consists of a single, two-dimensional array of data elements, where all members of a given column are assumed to be similar values, and all members of a row are assumed to be related to one another.</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../075/247075.xml">
Hierarchical model</link>: In this model data is organized into a tree-like structure, implying a single upward link in each record to describe the nesting, and a sort field to keep the records in a particular order in each same-level list.</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../098/185098.xml">
Network model</link>: This model organizes data using two fundamental constructs, called records and sets. Records contain fields, and sets define one-to-many relationships between records: one owner, many members. </entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../220/26220.xml">
Relational model</link>: is a database model based on first-order predicate logic. Its core idea is to describe a database as a collection of predicates over a finite set of predicate variables, describing constraints on the possible values and combinations of values.</entry>
</list>
</p>
<p>

<image width="150px" src="ER_diagram_dutch_1.svg">
</image>

<image width="150px" src="Company_codm.gif">
</image>

<image width="150px" src="Star-schema.png">
</image>
</p>

<p>

<list>
<entry level="1" type="bullet">

 <information wordnetid="105816287" confidence="0.8">
<datum wordnetid="105816622" confidence="0.8">
<link xlink:type="simple" xlink:href="../991/752991.xml">
Entity-relationship model</link></datum>
</information>
: is an abstract conceptual representation of structured data, which produce a conceptual data model a system, and its requirements in a top-down fashion. </entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../960/68960.xml">
Object-relational model</link>: Similar to a relational database model, but objects, classes and inheritance are directly supported in database schemas and in the query language. </entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../738/872738.xml">
Star schema</link> is the simplest style of data warehouse schema. The star schema consists of a few "fact tables" (possibly only one, justifying the name) referencing any number of "dimension tables". The star schema is considered an important special case of the snowflake schema.</entry>
</list>
</p>

</ss1>
<ss1>
<st>
 Geographic data model </st>
<p>

A <link xlink:type="simple" xlink:href="../426/18584426.xml">
data model</link> in <link xlink:type="simple" xlink:href="../398/12398.xml">
Geographic information system</link>s is a mathematical construct for representing geographic objects or surfaces as data. For example, the <link xlink:type="simple" xlink:href="../499/32499.xml">
vector</link> data model represents geography as collections of points, lines, and polygons; the <link xlink:type="simple" xlink:href="../742/25742.xml">
raster</link> data model represent geography as cell matrixes that store numeric values; and the <link xlink:type="simple" xlink:href="../072/2857072.xml">
Triangulated irregular network</link> (TIN) data model represents geography as sets of contiguous, nonoverlapping triangles.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%228%22])">8</ref></p>
<p>

<image width="150px" src="Groups_relate_to_the_process_of_making_a_map.jpg">
<caption>

Groups relate to process of making a map&amp;lt;ref name= "DRS03"&amp;gt; David R. Soller1 and Thomas M. Berg (2003). <weblink xlink:type="simple" xlink:href="http://pubs.usgs.gov/of/2003/of03-471/soller1/index.html">
The National Geologic Map Database Project: Overview and Progress</weblink> U.S. Geological Survey Open-File Report 03–471.&amp;lt;/ref&amp;gt;
</caption>
</image>

<image width="150px" src="NGMDB_data_model_application.jpg">
<caption>

NGMDB data model applications&amp;lt;ref name= "DRS03"/&amp;gt; 
</caption>
</image>

<image width="150px" src="NGMDB_databases_linked_together.jpg">
<caption>

NGMDB databases linked together&amp;lt;ref name= "DRS03"/&amp;gt; 
</caption>
</image>

<image width="150px" src="Representing_three-dimensional_map_information.jpg">
<caption>

Representing 3D  map information&amp;lt;ref name= "DRS03"/&amp;gt; 
</caption>
</image>
</p>


</ss1>
<ss1>
<st>
 Generic data model </st>
<p>

<link xlink:type="simple" xlink:href="../303/19649303.xml">
Generic data model</link>s are generalizations of conventional data models. They define standardised general relation types, together with the kinds of things that may be related by such a relation type. Generic data models are developed as an approach to solve some shortcomings of conventional data models. For example, different modelers usually produce different conventional data models of the same domain. This can lead to difficulty in bringing the models of different people together and is an obstacle for data exchange and data integration. Invariably, however, this difference is attributable to different levels of abstraction in the models and differences in the kinds of facts that can be instantiated (the semantic expression capabilities of the models). The modelers need to communicate and agree on certain elements which are to be rendered more concretely, in order to make the differences less significant.</p>

</ss1>
<ss1>
<st>
 Semantic data model </st>
<p>

<image width="320px" src="A2_4_Semantic_Data_Models.jpg" type="thumb">
<caption>

Semantic data models.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%229%22])">9</ref>
</caption>
</image>

A <link xlink:type="simple" xlink:href="../680/19558680.xml">
semantic data model</link> in software engineering is a technique to define the meaning of <link xlink:type="simple" xlink:href="../040/18985040.xml">
data</link> within the context of its interrelationships with other data. A semantic data model is an abstraction which defines how the stored symbols relate to the real world. A semantic data model is sometimes called a <link xlink:type="simple" xlink:href="../267/58267.xml">
conceptual data model</link>.</p>
<p>

The logical data structure of a <link xlink:type="simple" xlink:href="../513/8513.xml">
database management system</link> (DBMS), whether <link xlink:type="simple" xlink:href="../075/247075.xml">
hierarchical</link>, <link xlink:type="simple" xlink:href="../098/185098.xml">
network</link>, or <link xlink:type="simple" xlink:href="../220/26220.xml">
relational</link>, cannot totally satisfy the <link xlink:type="simple" xlink:href="../449/522449.xml">
requirements</link> for a conceptual definition of data because it is limited in scope and biased toward the implementation strategy employed by the DBMS. Therefore, the need to define data from a <link xlink:type="simple" xlink:href="../838/19539838.xml">
conceptual view</link> has led to the development of semantic data modeling techniques. That is, techniques to define the meaning of data within the context of its interrelationships with other data. As illustrated in the figure. The real world, in terms of resources, ideas, events, etc., are symbolically defined within physical data stores. A semantic data model is an abstraction which defines how the stored symbols relate to the real world. Thus, the model must be a true representation of the real world.</p>

</ss1>
</sec>
<sec>
<st>
 Related models </st>

<ss1>
<st>
 Information model </st>
<p>

<image width="320px" src="A_01_Audio_compact_disc_collection.jpg" type="thumb">
<caption>

Example of an <link xlink:type="simple" xlink:href="../592/8075592.xml">
EXPRESS G</link> <link xlink:type="simple" xlink:href="../596/1800596.xml">
Information model</link>.
</caption>
</image>

An <link xlink:type="simple" xlink:href="../596/1800596.xml">
Information model</link> is not a type of data model, but more or less an alternative model. Within the field of software engineering both a data model and an information model can be abstract, formal representations of entity types that includes their properties, relationships and the operations that can be performed on them. The entity types in the model may be kinds of real-world objects, such as devices in a network, or they may themselves be abstract, such as for the entities used in a billing system. Typically, they are used to model a constrained domain that can be described by a closed set of entity types, properties, relationships and operations.</p>
<p>

According to Lee (1999)  an information model in is a representation of <link xlink:type="simple" xlink:href="../978/6978.xml">
concept</link>s, <link xlink:type="simple" xlink:href="../028/26028.xml">
relationship</link>s, <link xlink:type="simple" xlink:href="../360/206360.xml">
constraint</link>s, <link xlink:type="simple" xlink:href="../066/242066.xml">
rule</link>s, and <link xlink:type="simple" xlink:href="../453/41453.xml">
operations</link> to specify <link xlink:type="simple" xlink:href="../680/19558680.xml">
data semantics</link> for a chosen domain of discourse. It can provide sharable, stable, and organized structure of information requirements for the domain context.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2210%22])">10</ref> More in general the term <it>information model</it> is used for models of individual things, such as facilities, buildings, process plants, etc. In those cases the concept is specialised to <link xlink:type="simple" xlink:href="../985/19151985.xml">
Facility Information Model</link>, <link xlink:type="simple" xlink:href="../080/3978080.xml">
Building Information Model</link>, Plant Information Model, etc. Such an information model is an integration of a model of the facility with the data and documents about the facility. </p>
<p>

An information model provides formalism to the description of a problem domain without constraining how that description is mapped to an actual implementation in software. There may be many mappings of the information model. Such mappings are called <link xlink:type="simple" xlink:href="../871/82871.xml">
data model</link>s, irrespective of whether they are <link xlink:type="simple" xlink:href="../487/5646487.xml">
object model</link>s (e.g. using <link xlink:type="simple" xlink:href="../169/32169.xml">
UML</link>), <information wordnetid="105816287" confidence="0.8">
<datum wordnetid="105816622" confidence="0.8">
<link xlink:type="simple" xlink:href="../991/752991.xml">
entity relationship model</link></datum>
</information>
s or <information wordnetid="105816287" confidence="0.8">
<standard wordnetid="107260623" confidence="0.8">
<datum wordnetid="105816622" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../623/846623.xml">
XML schema</link></system_of_measurement>
</datum>
</standard>
</information>
s.</p>

</ss1>
<ss1>
<st>
 Method related models </st>
<p>

A lot of the existing <link xlink:type="simple" xlink:href="../422/759422.xml">
data modeling</link> methods, software development methodologies, and other modeling languages in the field of computer science have defined their own type of models.  </p>

</ss1>
<ss1>
<st>
 Object model </st>
<p>

<image location="right" width="240px" src="JKDOM.SVG" type="thumb">
<caption>

The <standard wordnetid="107260623" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../743/8743.xml">
Document Object Model</link></system_of_measurement>
</standard>
  is a platform- and language-independent standard <link xlink:type="simple" xlink:href="../487/5646487.xml">
object model</link> for representing <format wordnetid="106636806" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../191/13191.xml">
HTML</link></format>
 or <format wordnetid="106636806" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../138/34138.xml">
XML</link></format>
 and related formats.
</caption>
</image>

An <link xlink:type="simple" xlink:href="../487/5646487.xml">
object model</link> in computer science is a collection of objects or classes through which a program can examine and manipulate some specific parts of its world. In other words, the object-oriented interface to some service or system. Such an interface is said to be the <it>object model of</it> the represented service or system.  For example, the <standard wordnetid="107260623" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../743/8743.xml">
Document Object Model (DOM)</link></system_of_measurement>
</standard>
 <weblink xlink:type="simple" xlink:href="http://www.w3.org/DOM/">
http://www.w3.org/DOM/</weblink> is a collection of objects that represent a <link xlink:type="simple" xlink:href="../063/34063.xml">
page</link> in a <link xlink:type="simple" xlink:href="../173/33173.xml">
web browser</link>, used by <link xlink:type="simple" xlink:href="../524/29524.xml">
script</link> programs to examine and dynamically change the page.  There is a <software wordnetid="106566077" confidence="0.9508927676800064">
<format wordnetid="106636806" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../268/20268.xml">
Microsoft Excel</link></format>
</software>
 object model<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2211%22])">11</ref> for controlling Microsoft Excel from another program, and the <link xlink:type="simple" xlink:href="../536/4258536.xml">
ASCOM</link> Telescope Driver<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2212%22])">12</ref> is an object model for controlling an astronomical telescope.</p>
<p>

In <link xlink:type="simple" xlink:href="../213/5213.xml">
computing</link> the term <it>object model</it> has a distinct second  meaning of the general properties of <link xlink:type="simple" xlink:href="../665/169665.xml">
objects</link> in a specific computer <link xlink:type="simple" xlink:href="../015/23015.xml">
programming language</link>, technology, notation or <link xlink:type="simple" xlink:href="../667/620667.xml">
methodology</link> that uses them. For example, the <it><message wordnetid="106598915" confidence="0.8">
<request wordnetid="106513366" confidence="0.8">
<link xlink:type="simple" xlink:href="../881/15881.xml">
Java</link></request>
</message>
 object model</it>, the <it><physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<model wordnetid="110324560" confidence="0.8">
<idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<assistant wordnetid="109815790" confidence="0.8">
<component wordnetid="105868954" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<part wordnetid="105867413" confidence="0.8">
<link xlink:type="simple" xlink:href="../007/17058007.xml">
COM</link></part>
</causal_agent>
</worker>
</component>
</assistant>
</concept>
</idea>
</model>
</person>
</physical_entity>
 object model</it>, or <it>the object model of <link xlink:type="simple" xlink:href="../502/208502.xml">
OMT</link></it>.  Such object models are usually defined using concepts such as <link xlink:type="simple" xlink:href="../392/7392.xml">
class</link>, <link>
message</link>, <link xlink:type="simple" xlink:href="../746/2617746.xml">
inheritance</link>, <link xlink:type="simple" xlink:href="../930/24930.xml">
polymorphism</link>, and <link xlink:type="simple" xlink:href="../501/79501.xml">
encapsulation</link>.  There is an extensive literature on formalized object models as a subset of the <link xlink:type="simple" xlink:href="../608/397608.xml">
formal semantics of programming languages</link>.</p>

</ss1>
<ss1>
<st>
 Unified Modeling Language models </st>
<p>

The <link xlink:type="simple" xlink:href="../169/32169.xml">
Unified Modeling Language</link> (UML) is a standardized general-purpose <link xlink:type="simple" xlink:href="../781/346781.xml">
modeling language</link> in the field of <link xlink:type="simple" xlink:href="../010/27010.xml">
software engineering</link>. It is a <link>
 graphical language</link> for visualizing, specifying, constructing, and documenting the <link>
 artifacts</link> of a software-intensive system. The Unified Modeling Language offers a standard way to write a system's blueprints, including<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2213%22])">13</ref>:
<list>
<entry level="1" type="bullet">

 Conceptual things such as <link xlink:type="simple" xlink:href="../977/342977.xml">
business process</link>es and system functions </entry>
<entry level="1" type="bullet">

 Concrete things such as <link xlink:type="simple" xlink:href="../015/23015.xml">
programming language</link> statements, <link xlink:type="simple" xlink:href="../377/8377.xml">
database</link> schemas, and </entry>
<entry level="1" type="bullet">

 Reusable <link>
 software components</link>.</entry>
</list>

The UML is offering a mix of <link xlink:type="simple" xlink:href="../066/19433066.xml">
functional model</link>s, data models, and <link xlink:type="simple" xlink:href="../170/1659170.xml">
database model</link>s.</p>

</ss1>
</sec>
<sec>
<st>
 Data model topics </st>

<ss1>
<st>
 Data properties </st>
<p>

Some important properties of data for which requirements need to be met are definition related properties:  
<image width="320px" src="3-2_Properties_of_data.jpg" type="thumb">
<caption>

Some important properties of data.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2214%22])">14</ref>
</caption>
</image>

<list>
<entry level="1" type="bullet">

 <it>relevance</it>: the usefulness of the data in the context of your business.</entry>
<entry level="1" type="bullet">

 <it>clarity</it>: the availability of a clear and shared definition for the data.</entry>
<entry level="1" type="bullet">

 <it>consistency</it>: the compatibility of the same type of data from different sources.</entry>
</list>

And content related properties such as:
<list>
<entry level="1" type="bullet">

 <it>timeliness</it>: the availability of data at the time required and how up to date that data is.</entry>
<entry level="1" type="bullet">

 <it>accuracy</it>: how close to the truth the data is.</entry>
</list>

And finally related to both are:
<list>
<entry level="1" type="bullet">

 <it>completeness</it>: how much of the required data is available.</entry>
<entry level="1" type="bullet">

 <it>accessibility</it>: where, how, and to whom the data is available or not available (e.g. security).</entry>
<entry level="1" type="bullet">

 <it>cost</it>: the cost incurred in obtaining the data, and making it available for use.</entry>
</list>

Data Models address the properties related to the definition of data.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%2214%22])">14</ref></p>

</ss1>
<ss1>
<st>
Data organization</st>
<p>
   
Another kind of data model describes how to organize data using a <link xlink:type="simple" xlink:href="../513/8513.xml">
database management system</link> or other data management technology. It describes, for example, relational tables and columns or object-oriented classes and attributes. Such a data model is sometimes referred to as the <it><link xlink:type="simple" xlink:href="../540/1030540.xml">
physical data model</link></it>, but in the original ANSI three schema architecture, it is called "logical". In that architecture, the physical model describes the storage media (cylinders, tracks, and tablespaces). Ideally, this model is derived from the more conceptual data model described above. It may differ, however, to account for constraints like processing capacity and usage patterns.   </p>
<p>

While <it>data analysis</it> is a common term for data modeling, the activity actually has more in common with the ideas and methods of <it><link xlink:type="simple" xlink:href="../338/330338.xml">
synthesis</link></it> (inferring general concepts from particular instances) than it does with  (identifying component concepts from more general ones).  {<it>Presumably we call ourselves <link>
systems analysts</link> because no one can say <link>
systems synthesists</link>.</it>}  Data modeling strives to bring the data structures of interest together into a cohesive, inseparable, whole by eliminating unnecessary data redundancies and by relating data structures with <link xlink:type="simple" xlink:href="../220/26220.xml">
relationships</link>.</p>
<p>

A different approach is through the use of <link xlink:type="simple" xlink:href="../588/739588.xml">
adaptive systems</link> such as <link xlink:type="simple" xlink:href="../523/21523.xml">
artificial neural networks</link> that can autonomously create implicit models of data.</p>

</ss1>
<ss1>
<st>
 Data structure </st>
<p>

<image width="240px" src="binary_tree.svg" type="thumb">
<caption>

A <link xlink:type="simple" xlink:href="../321/4321.xml">
binary tree</link>, a simple type of branching linked data structure.
</caption>
</image>

A <link xlink:type="simple" xlink:href="../519/8519.xml">
data structure</link> is a way of storing <link xlink:type="simple" xlink:href="../040/18985040.xml">
data</link> in a computer so that it can be used efficiently. It is an organization of mathematical and logical concepts of data. Often a carefully chosen data structure will allow the most <link xlink:type="simple" xlink:href="../128/145128.xml">
efficient</link> <link xlink:type="simple" xlink:href="../775/775.xml">
algorithm</link> to be used. The choice of the data structure often begins from the choice of an <link xlink:type="simple" xlink:href="../ury/24th_century.xml">
abstract data type</link>.</p>
<p>

A data model describes the structure of the data within a given domain and, by implication, the underlying structure of that domain itself. This means that a data model in fact specifies a dedicated <it>grammar</it> for a dedicated artificial language for that domain. A data model represents classes of entities (kinds of things) about which a company wishes to hold information, the attributes of that information, and relationships among those entities and (often implicit) relationships among those attributes. The model describes the organization of the data to some extent irrespective of how data might be represented in a computer system.</p>
<p>

The entities represented by a data model can be the tangible entities, but models that include such concrete entity classes tend to change over time. Robust data models often identify <link xlink:type="simple" xlink:href="../ury/30th_century.xml">
abstraction</link>s of such entities. For example, a data model might include an entity class called "Person", representing all the people who interact with an organization. Such an <link xlink:type="simple" xlink:href="../995/509995.xml">
abstract entity</link> class is typically more appropriate than ones called "Vendor" or "Employee", which identify specific roles played by those people.</p>
<p>

<image width="150px" src="Array_of_array_storage.svg">
</image>

<image width="150px" src="HASHTB08_sk.svg">
</image>

<image width="150px" src="Singly_linked_list_insert_after.png">
</image>

<image width="150px" src="Data_stack_lt.svg">
</image>
</p>


</ss1>
<ss1>
<st>
 Data model theory </st>
<p>

The term data model can have two meanings:
<list>
<entry level="1" type="number">

 A data model <it>theory</it>, i.e. a formal description of how data may be structured and accessed. </entry>
<entry level="1" type="number">

 A data model <it>instance</it>, i.e. applying a data model <it>theory</it> to create a practical data model <it>instance</it> for some particular application. </entry>
</list>
</p>
<p>

A data model theory has three main components:
<list>
<entry level="1" type="bullet">

 The structural part: a collection of data structures which are used to create databases representing the entities or objects modeled by the database.</entry>
<entry level="1" type="bullet">

 The integrity part: a collection of rules governing the constraints placed on these data structures to ensure structural integrity. </entry>
<entry level="1" type="bullet">

 The manipulation part: a collection of operators which can be applied to the data structures, to update and query the data contained in the database.</entry>
</list>
</p>
<p>

For example, in the <link xlink:type="simple" xlink:href="../220/26220.xml">
relational model</link>, the structural part is based on a modified concept of the <link xlink:type="simple" xlink:href="../509/19509.xml">
mathematical relation</link>; the integrity part is expressed in <link xlink:type="simple" xlink:href="../983/10983.xml">
first-order logic</link> and the manipulation part is expressed using the <link xlink:type="simple" xlink:href="../285/175285.xml">
relational algebra</link>, <link xlink:type="simple" xlink:href="../286/175286.xml">
tuple calculus</link> and <link xlink:type="simple" xlink:href="../680/217680.xml">
domain calculus</link>.</p>
<p>

A Data Model Instance is created by applying a Data Model Theory. This is typically done to solve some business enterprise requirement. Business requirements are normally captured by a semantic <link xlink:type="simple" xlink:href="../943/1025943.xml">
logical data model</link>. This is transformed into a physical Data Model Instance from which is generated a physical <link xlink:type="simple" xlink:href="../377/8377.xml">
database</link>. For example, a Data modeler may use a data modeling tool to create an <information wordnetid="105816287" confidence="0.8">
<datum wordnetid="105816622" confidence="0.8">
<link xlink:type="simple" xlink:href="../991/752991.xml">
Entity-relationship model</link></datum>
</information>
 of the <link>
Corporate data repository</link> of some business enterprise. This model is transformed into a <link xlink:type="simple" xlink:href="../220/26220.xml">
relational model</link>, which in turn generates a <link xlink:type="simple" xlink:href="../873/25873.xml">
relational database</link>.</p>

</ss1>
<ss1>
<st>
 Zachman Framework </st>
<p>

<image location="right" width="320px" src="ZF_What_column_Data_example.jpg" type="thumb">
<caption>

Zachman Framework Perspectives of Data Focus
</caption>
</image>

In an alternative framework, called the <link xlink:type="simple" xlink:href="../325/793325.xml">
Zachman Framework</link>, a data model <it>instance</it> may be one of six kinds (according to <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<employee wordnetid="110053808" confidence="0.8">
<link xlink:type="simple" xlink:href="../264/8307264.xml">
John Zachman</link></employee>
</scientist>
</causal_agent>
</worker>
</person>
</physical_entity>
, 1987, 1992, 2005, 2007):
<list>
<entry level="1" type="bullet">

 a contextual data model (list) identifies entity classes (representing things of significance to the organization).</entry>
<entry level="1" type="bullet">

 a conceptual data model (semantics) defines the meaning of the things in an organization. This consists relationships (assertions about associations between pairs of entity classes). </entry>
<entry level="1" type="bullet">

 a Logical schema | logical data model (schema) describes the logic representation of the properties without regard to a particular data manipulation technology.  This consists of descriptions of the attributes (role a data element plays in relation to the thing (entity) it represents. </entry>
<entry level="1" type="bullet">

 a Physical schema | physical data model (blueprint) describes the physical means by which data are stored.  This is concerned with partitions, CPUs, tablespaces, and the like.</entry>
<entry level="1" type="bullet">

 a data definition (configuration) This is the actual language coding of the database schema in the chosen development platform.</entry>
<entry level="1" type="bullet">

 a data instantiation holds the values of properties applied to the data in the schema.</entry>
</list>
</p>
<p>

The significance of this approach, according to John Zachman, is that it allows the six perspectives to be relatively independent of each other and have different contributors, audiences and purposes.  In each case, of course, the structures must remain consistent with the other model instances although the details change.  The table/column structure may be different from a direct translation of the entity classes, relationships and attributes, but it must ultimately carry out the objectives of the contextual entity class structure and conceptual relationship structure.  Zachman regards each perspective a separate and distinct vantage point of the data: his view is not a methodology but rather a way of classifying the parts, however development projects and software tools often proceed from Contextual list, to conceptual data model, followed by the Logical schema|logical data model. In later stages when the data platform is known (whether it be database software or filing cabinets), this model may be translated into a Physical schema|physical data model followed by the data definition.  When the database actually stores values and is operational data manipulation can take place.</p>

</ss1>
</sec>
<sec>
<st>
 See also </st>
<p>

<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../164/1344164.xml">
Data flow diagram</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../422/759422.xml">
Data modeling</link></entry>
<entry level="1" type="bullet">

 <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../571/244571.xml">
Database system</link></instrumentality>
</artifact>
</system>
</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../139/645139.xml">
Data dictionary</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../669/598669.xml">
Diagram</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../596/1800596.xml">
Information model</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../495/237495.xml">
Information system</link> </entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../681/49681.xml">
Ontology</link></entry>
<entry level="1" type="bullet">

 <information wordnetid="105816287" confidence="0.8">
<standard wordnetid="107260623" confidence="0.8">
<datum wordnetid="105816622" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../623/846623.xml">
XML schema</link></system_of_measurement>
</datum>
</standard>
</information>
</entry>
</list>
</p>

</sec>
<sec>
<st>
 References </st>

<p>

<reflist>
<entry id="1">
 Michael R. McCaleb (1999). <weblink xlink:type="simple" xlink:href="http://nvl.nist.gov/pub/nistpubs/jres/104/4/html/j44mac.htm#apa">
"A Conceptual Data Model of Datum Systems"</weblink>. National Institute of Standards and Technology. August 1999.</entry>
<entry id="2">
American National Standards Institute. 1975. <it>ANSI/X3/SPARC Study Group on Data Base Management Systems; Interim Report</it>. FDT (Bulletin of ACM SIGMOD) 7:2.</entry>
<entry id="3">
Cornelius T. Leondes (2002). <it>Database and Data Communication Network Systems: Techniques and Applications</it>. Page 7</entry>
<entry id="4">
 Jan L. Harrington (2000). <it>Object-oriented Database Design Clearly Explained</it>. p.4</entry>
<entry id="5">
<it>"Derivability, Redundancy, and Consistency of Relations Stored in Large Data Banks"</it>, E.F. Codd, IBM Research Report, 1969</entry>
<entry id="6">
<weblink xlink:type="simple" xlink:href="http://www.exforsys.com/tutorials/data-modeling/the-history-of-data-modeling.html">
The History of Data Modeling</weblink></entry>
<entry id="7">
<weblink xlink:type="simple" xlink:href="http://www.exforsys.com/tutorials/data-modeling/the-history-of-data-modeling.html">
The History of Data Modeling</weblink></entry>
<entry id="8">
Wade, T. and Sommer, S. eds. <it><weblink xlink:type="simple" xlink:href="http://store.esri.com/esri/showdetl.cfm?SID=2&amp;Product_ID=868&amp;Category_ID=49">
A to Z GIS</weblink>''</it></entry>
<entry id="9">
 <weblink xlink:type="simple" xlink:href="http://www.itl.nist.gov/fipspubs/idef1x.doc">
FIPS Publication 184</weblink> released of IDEF1X by the Computer Systems Laboratory of the National Institute of Standards and Technology (NIST). 21 December 1993.</entry>
<entry id="10">
 Y. Tina Lee (1999). <weblink xlink:type="simple" xlink:href="http://www.mel.nist.gov/msidlibrary/doc/tina99im.pdf">
"Information modeling from design to implementation"</weblink> National Institute of Standards and Technology.</entry>
<entry id="11">
<weblink xlink:type="simple" xlink:href="http://msdn2.microsoft.com/en-us/library/wss56bz7.aspx">
http://msdn2.microsoft.com/en-us/library/wss56bz7.aspx</weblink></entry>
<entry id="12">
<weblink xlink:type="simple" xlink:href="http://ascom-standards.org/standards.html">
http://ascom-standards.org/standards.html</weblink></entry>
<entry id="13">
 Grady Booch, Ivar Jacobson &amp; Jim Rumbaugh (2000) <weblink xlink:type="simple" xlink:href="http://www.omg.org/docs/formal/00-03-01.pdf">
OMG Unified Modeling Language Specification</weblink>, Version 1.3 First Edition: March 2000. Retrieved 12 August 2008.</entry>
<entry id="14">
 Matthew West and Julian Fowler (1999). <weblink xlink:type="simple" xlink:href="http://www.matthew-west.org.uk/documents/princ03.pdf">
Developing High Quality Data Models</weblink>. The European Process Industries STEP Technical Liaison Executive (EPISTLE).</entry>
</reflist>
</p>

</sec>
<sec>
<st>
 Further reading </st>
<p>

<list>
<entry level="1" type="bullet">

 David C. Hay (1996). <it>Data Model Patterns: Conventions of Thought</it>. New York:Dorset House Publishers, Inc.</entry>
<entry level="1" type="bullet">

 Matthew West and Julian Fowler (1999). <weblink xlink:type="simple" xlink:href="http://www.matthew-west.org.uk/documents/princ03.pdf">
Developing High Quality Data Models</weblink>. The European Process Industries STEP Technical Liaison Executive (EPISTLE). </entry>
<entry level="1" type="bullet">

 Len Silverston (2001). <it>The Data Model Resource Book</it> Volume 1/2. John Wiley &amp; Sons. </entry>
<entry level="1" type="bullet">

 RFC 3444 - On the Difference between Information Models and Data Models</entry>
</list>
</p>

</sec>
<sec>
<st>
 External links </st>

<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.datamodel.org/DataModelDictionary.html">
Data Model Dictionary</weblink></entry>
</list>
</p>


</sec>
</bdy>
</article>
