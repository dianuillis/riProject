<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 15:24:17[mciao0826] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<condition  confidence="0.8" wordnetid="113920835">
<state  confidence="0.8" wordnetid="100024720">
<problem  confidence="0.8" wordnetid="114410605">
<difficulty  confidence="0.8" wordnetid="114408086">
<header>
<title>Decision problem</title>
<id>8336</id>
<revision>
<id>230572782</id>
<timestamp>2008-08-08T08:24:03Z</timestamp>
<contributor>
<username>Baiji</username>
<id>1116717</id>
</contributor>
</revision>
<categories>
<category>Logic</category>
<category>Theory of computation</category>
<category>Articles to be merged&amp;#32;since February 2008</category>
<category>Recursion theory</category>
<category>All articles to be merged</category>
<category>Computational problems</category>
</categories>
</header>
<bdy>

<table class="metadata plainlinks ambox ">
<row>
<col>

ambox-move" style=""</col>
</row>
<row>
<col class="mbox-image"><p>

<image width="50px" src="Mergefrom.svg">
</image>
</p>
</col>
<col style="" class="mbox-text">
 It has been suggested that  be  into this article or section. ()</col>
</row>
</table>


In <link xlink:type="simple" xlink:href="../084/3244084.xml">
computability theory</link> and <link xlink:type="simple" xlink:href="../543/7543.xml">
computational complexity theory</link>, a <b>decision problem</b> is a question in some <link xlink:type="simple" xlink:href="../102/396102.xml">
formal system</link> with a yes-or-no answer, depending on the values of some input parameters. For example, the problem "given two numbers <it>x</it> and <it>y</it>, does <it>x</it> evenly divide <it>y</it>?" is a decision problem.  The answer can be either 'yes' or 'no', and depends upon the values of <it>x</it> and <it>y</it>.<p>

Decision problems are closely related to <link xlink:type="simple" xlink:href="../345/663345.xml">
function problems</link>, which can have answers that are more complex than a simple 'yes' or 'no'.  A corresponding function problem is "given two numbers <it>x</it> and <it>y</it>, what is <it>x</it> divided by <it>y</it>?". They are also related to <link xlink:type="simple" xlink:href="../536/1126536.xml">
optimization problem</link>s, which are concerned with finding the <it>best</it> answer to a particular problem.</p>
<p>

A method for solving a decision problem given in the form of an <link xlink:type="simple" xlink:href="../775/775.xml">
algorithm</link> is called a <b>decision procedure</b> for that problem. A decision procedure for the decision problem "given two numbers <it>x</it> and <it>y</it>, does <it>x</it> evenly divide <it>y</it>?" would give the steps for determining whether <it>x</it> evenly divides <it>y</it>, given <it>x</it> and <it>y</it>.  One such algorithm is <link xlink:type="simple" xlink:href="../384/313384.xml">
long division</link>, taught to many school children. If the remainder is zero the answer produced is 'yes', otherwise it is 'no'. A decision problem which can be solved by an algorithm, such as this example, is called <b>decidable</b>.</p>
<p>

The field of computational complexity categorizes decidable decision problems by how difficult they are to solve. "Difficult", in this sense, is described in terms of the <link xlink:type="simple" xlink:href="../222/4628222.xml">
computational resource</link>s needed by the most efficient algorithm for a certain problem. The field of <link xlink:type="simple" xlink:href="../414/155414.xml">
recursion theory</link>, meanwhile, categorizes undecidable decision problems by <link xlink:type="simple" xlink:href="../405/764405.xml">
Turing degree</link>, which is a measure of the noncomputability inherent in any solution.</p>
<p>

Research in computability theory has typically focused on decision problems. As explained in the section <link xlink:type="simple" xlink:href="../336/8336.xml#xpointer(//*[./st=%22Equivalence+with+function+problems%22])">
Equivalence with function problems</link> below, there is no loss of generality.</p>

<sec>
<st>
Definition</st>

<p>

A <it>decision problem</it> is any arbitrary yes-or-no question on an infinite set of inputs.  Because of this, it is traditional to define the decision problem equivalently as: the set of inputs for which the problem returns <it>yes</it>.</p>
<p>

These inputs can be natural numbers, but also other values of some other kind, such as <link xlink:type="simple" xlink:href="../701/27701.xml">
string</link>s of a <link xlink:type="simple" xlink:href="../939/10939.xml">
formal language</link>. Using some encoding, such as <link>
GÃ¶del number</link>s, the strings can be encoded as natural numbers.  Thus, a decision problem informally phrased in terms of a formal language is also equivalent to a set of <link xlink:type="simple" xlink:href="../474/21474.xml">
natural numbers</link>.  To keep the formal definition simple, it is phrased in terms of subsets of the natural numbers.</p>
<p>

Formally, a <b>decision problem</b> is a subset of the natural numbers. The corresponding informal problem is that of deciding whether a given number is in the set.</p>

</sec>
<sec>
<st>
Examples</st>

<p>

A classic example of a decidable decision problem is the set of prime numbers.  It is possible to effectively decide whether a given natural number is prime by testing every possible nontrivial factor. Although much more efficient methods of <link xlink:type="simple" xlink:href="../751/183751.xml">
primality testing</link> are known, the existence of any effective method is enough to establish decidability.</p>

</sec>
<sec>
<st>
 Decidability </st>


<p>

<indent level="1">

<it>Main article: <link xlink:type="simple" xlink:href="../055/15631055.xml">
Undecidable problem</link></it>
</indent>

A decision problem <it>A</it> is called <b>decidable</b> or <b>effectively solvable</b> if <it>A</it> is a <link xlink:type="simple" xlink:href="../264/332264.xml">
recursive set</link>.  A problem is called <b>partially decidable</b>, <b>semidecidable</b>, <b>solvable</b>, or <b>provable</b> if <it>A</it> is a <link xlink:type="simple" xlink:href="../090/332090.xml">
recursively enumerable set</link>.  Partially decidable problems and any other problems that are not decidable are called <b>undecidable</b>.</p>
<p>

The <link xlink:type="simple" xlink:href="../668/13668.xml">
halting problem</link> is an important undecidable decision problem; for more examples, see <link xlink:type="simple" xlink:href="../090/1188090.xml">
list of undecidable problems</link>. </p>

</sec>
<sec>
<st>
 Complete problems </st>


<p>

<indent level="1">

<it>Main article: <link xlink:type="simple" xlink:href="../530/1176530.xml">
Complete problem</link></it>
</indent>

Decision problems can be ordered according to <link xlink:type="simple" xlink:href="../983/362983.xml">
many-one reducibility</link> and related feasible reductions such as <link xlink:type="simple" xlink:href="../695/159695.xml">
Polynomial-time reduction</link>s. A decision problem <it>P</it> is said to be <b><link xlink:type="simple" xlink:href="../530/1176530.xml">
complete</link></b> for a set of decision problems <it>S</it> if <it>P</it> is a member of <it>S</it> and every problem in <it>S</it> can be reduced to <it>P</it>. Complete decision problems are used in <link xlink:type="simple" xlink:href="../543/7543.xml">
computational complexity</link> to characterize complexity classes of decision problems. For example, the <condition wordnetid="113920835" confidence="0.8">
<know-how wordnetid="105616786" confidence="0.8">
<state wordnetid="100024720" confidence="0.8">
<problem wordnetid="114410605" confidence="0.8">
<method wordnetid="105660268" confidence="0.8">
<difficulty wordnetid="114408086" confidence="0.8">
<link xlink:type="simple" xlink:href="../715/4715.xml">
Boolean satisfiability problem</link></difficulty>
</method>
</problem>
</state>
</know-how>
</condition>
 is complete for the class <class wordnetid="107997703" confidence="0.8">
<collection wordnetid="107951464" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<link xlink:type="simple" xlink:href="../562/21562.xml">
NP</link></group>
</collection>
</class>
 of decision problems under polynomial-time reducibility.</p>

</sec>
<sec>
<st>
 History </st>

<p>

The <it><link xlink:type="simple" xlink:href="../672/9672.xml">
Entscheidungsproblem</link></it>, German for "Decision-problem", is attributed to <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../302/8302.xml">
David Hilbert</link></scientist>
</person>
: "At [the] 1928 conference Hilbert made his questions quite precise. First, was mathematics <it>complete</it>... Second, was mathematics <it>consistent</it>... And thirdly, was mathematics <it>decidable</it>? By this he meant, did there exist a definite method which could, in principle be applied to any assertion, and which was guaranteed to produce a correct decision on whether that assertion was true" (Hodges, p. 91). Hilbert believed that "in mathematics there is no <link xlink:type="simple" xlink:href="../812/1007812.xml">
ignorabimus</link>' (Hodges, p. 91ff) meaning 'we will not know'. See <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../302/8302.xml">
David Hilbert</link></scientist>
</person>
 and <link xlink:type="simple" xlink:href="../668/13668.xml">
Halting Problem</link> for more.</p>

</sec>
<sec>
<st>
Equivalence with function problems</st>

<p>

A <link xlink:type="simple" xlink:href="../345/663345.xml">
function problem</link> consists of a <link xlink:type="simple" xlink:href="../577/23577.xml">
partial function</link> <it>f</it>; the informal "problem" is to compute the values of <it>f</it> on the inputs for which it is defined.</p>
<p>

Every function problem can be turned into a decision problem; the decision problem is just the graph of the associated function.   (The graph of a function <it>f</it> is the set of pairs (<it>x</it>,<it>y</it>) such that <it>f</it>(<it>x</it>) = <it>y</it>.)  If this decision problem were effectively solvable then the function problem would be as well.  This reduction does not respect computational complexity, however.  For example, it is possible for the graph of a function to be decidable in polynomial time (in which case running time is computed as a function of the pair (<it>x</it>,<it>y</it>) ) when the function is not computable in <link xlink:type="simple" xlink:href="../576/44576.xml">
polynomial time</link> (in which case running time is computed as a function of <it>x</it> alone).  The function <it>f</it>(<it>x</it>) = <it>2x</it> has this property.</p>
<p>

Every decision problem can be converted into the function problem of computing the <link xlink:type="simple" xlink:href="../790/240790.xml">
characteristic function</link> of the set associated to the decision problem.   If this function is computable then the associated decision problem is decidable. However, this reduction is more liberal than the standard reduction used in computational complexity (sometimes called polynomial-time many-one reduction); for example, the complexity of the characteristic functions of an <class wordnetid="107997703" confidence="0.8">
<collection wordnetid="107951464" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<link xlink:type="simple" xlink:href="../466/39466.xml">
NP-complete</link></group>
</collection>
</class>
 problem and its <link xlink:type="simple" xlink:href="../680/54680.xml">
co-NP-complete</link> <link xlink:type="simple" xlink:href="../955/1929955.xml">
complement</link> is exactly the same even though the underlying decision problems may not be considered equivalent in some typical models of computation.</p>

</sec>
<sec>
<st>
 See also </st>
<p>

<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../118/913118.xml">
Decidability (logic)</link> &ndash; for the problem of deciding whether a formula is a consequence of a logical theory.</entry>
</list>
</p>

</sec>
<sec>
<st>
 References </st>

<p>

<list>
<entry level="1" type="bullet">

 Hanika, Jiri. <it>Search Problems and Bounded Arithmetic.</it> PhD Thesis, Charles University, Prague.  http://eccc.hpi-web.de/pub/eccc/theses/hanika.pdf.</entry>
<entry level="1" type="bullet">

 <person wordnetid="100007846" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../990/18550990.xml">
Hodges, A.</link></person>
, <it>Alan Turing: The Enigma</it>, Simon and Schuster, New York. Cf Chapter "The Spirit of Truth" for some more history that led to Turing's work. </entry>
<entry level="2" type="indent">

Hodges references a biography of <person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../302/8302.xml">
David Hilbert</link></scientist>
</person>
: <popularizer wordnetid="110454752" confidence="0.9173553029164789">
<writer wordnetid="110794014" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../851/5867851.xml">
Constance Reid</link></writer>
</popularizer>
, <it>Hilbert</it> (George Allen &amp; Unwin; Springer-Verlag, 1970). There are apparently more recent editions.</entry>
<entry level="1" type="bullet">

 Kozen, D.C. (1997), <it>Automata and Computability</it>, Springer.</entry>
<entry level="1" type="bullet">

 <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<intellectual wordnetid="109621545" confidence="0.8">
<alumnus wordnetid="109786338" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<mathematician wordnetid="110301261" confidence="0.8">
<scholar wordnetid="110557854" confidence="0.8">
<link xlink:type="simple" xlink:href="../272/1014272.xml">
Hartley Rogers, Jr</link></scholar>
</mathematician>
</scientist>
</causal_agent>
</alumnus>
</intellectual>
</person>
</physical_entity>
., <it>The Theory of Recursive Functions and Effective Computability</it>, MIT Press, ISBN 0-262-68052-1 (paperback), ISBN 0-07-053522-1</entry>
<entry level="1" type="bullet">

 <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<mathematician wordnetid="110301261" confidence="0.8">
<link xlink:type="simple" xlink:href="../015/3644015.xml">
Sipser, M.</link></mathematician>
</scientist>
</causal_agent>
</person>
</physical_entity>
 (1996), <it>Introduction to the Theory of Computation</it>, PWS Publishing Co.</entry>
<entry level="1" type="bullet">

 Robert I. Soare (1987), <it>Recursively Enumerable Sets and Degrees</it>, Springer-Verlag, ISBN 0-387-15299-7</entry>
</list>
</p>


</sec>
</bdy>
</difficulty>
</problem>
</state>
</condition>
</article>
