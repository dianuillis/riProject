<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 15:24:19[mciao0827] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<system  confidence="0.9511911446218017" wordnetid="104377057">
<entity  confidence="0.9511911446218017" wordnetid="100001740">
<header>
<title>Database</title>
<id>8377</id>
<revision>
<id>244283027</id>
<timestamp>2008-10-10T02:32:09Z</timestamp>
<contributor>
<username>J.delanoy</username>
<id>2372780</id>
</contributor>
</revision>
<categories>
<category>Databases</category>
<category>Articles to be expanded since June 2008</category>
<category>Database management systems</category>
<category>All articles to be expanded</category>
<category>Database theory</category>
</categories>
</header>
<bdy>

This article is principally about managing and structuring the collections of data held on computers. For a fuller discussion of DBMS software, see <link xlink:type="simple" xlink:href="../513/8513.xml">
Database management system</link>.<p>

A Computer Database is a structured collection of records or data that is stored in a computer system. The structure is achieved by organizing the data according to a <link xlink:type="simple" xlink:href="../170/1659170.xml">
database model</link>. The model in most common use today is the <link xlink:type="simple" xlink:href="../220/26220.xml">
relational model</link>. Other models such as the <link xlink:type="simple" xlink:href="../075/247075.xml">
hierarchical model</link> and the <link xlink:type="simple" xlink:href="../098/185098.xml">
network model</link> use a more explicit representation of relationships (see below for explanation of the various database models).</p>
<p>

A <link xlink:type="simple" xlink:href="../457/7878457.xml">
computer</link> database relies upon <link xlink:type="simple" xlink:href="../309/5309.xml">
software</link> to organize the storage of data. This software is known as a database management system (DBMS). Database management systems are categorized according to the <link xlink:type="simple" xlink:href="../170/1659170.xml">
database model</link> that they support. The model tends to determine the <link>
query languages</link> that are available to access the database. A great deal of the internal engineering of a DBMS, however, is independent of the data model, and is concerned with managing factors such as performance, concurrency, integrity, and recovery from hardware failures. In these areas there are large differences between products.</p>

<sec>
<st>
Database models</st>

<p>

<indent level="1">

<it>Main article: <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../520/10973520.xml">
Database models</link></instrumentality>
</artifact>
</system>
</it>
</indent>
Various techniques are used to model data structure. Most database systems are built around one particular data model, although it is increasingly common for products to offer support for more than one model. For any one <link xlink:type="simple" xlink:href="../858/19858.xml">
logical model</link> various physical implementations may be possible, and most products will offer the user some level of control in tuning the <link>
physical implementation</link>, since the choices that are made have a significant effect on performance. Here are three examples:</p>

<ss1>
<st>
Hierarchical model</st>
<p>

In a <link xlink:type="simple" xlink:href="../075/247075.xml">
hierarchical model</link>, data is organized into an inverted tree-like structure, implying a multiple downward link in each node to describe the nesting, and a sort field to keep the records in a particular order in each same-level list. This structure arranges the various data elements in a hierarchy and helps to establish logical relationships among data elements of multiple files. Each unit in the model is a record which is also known as a node. In such a model, each record on one level can be related to multiple records on the next lower level. A record that has subsidiary records is called a parent and the subsidiary records are called children. Data elements in this model are well suited for one-to-many relationships with other data elements in the database.</p>
<p>

This model is advantageous when the data elements are inherently hierarchical. The disadvantage is that in order to prepare the database it becomes necessary to identify the requisite groups of files that are to be logically integrated. Hence, a hierarchical data model may not always be flexible enough to accommodate the dynamic needs of an organization.</p>

</ss1>
<ss1>
<st>
Network model</st>
<p>

In the <link xlink:type="simple" xlink:href="../098/185098.xml">
network model</link>, records can participate in any number of named relationships. Each relationship associates a record of one type (called the <b>owner</b>) with multiple records of another type (called the <b>member</b>). These relationships (somewhat confusingly) are called <b>sets</b>. For example a student might be a member of one set whose owner is the course they are studying, and a member of another set whose owner is the college they belong to. At the same time the student might be the owner of a set of email addresses, and owner of another set containing phone numbers. The main difference between the network model and hierarchical model is that in a network model, a child can have a number of parents whereas in a hierarchical model, a child can have only one parent. The hierarchical model is therefore a subset of the network model.</p>
<p>

Programmatic access to network databases is traditionally by means of a navigational data manipulation language, in which programmers navigate from a current record to other related records using verbs such as <it>find owner</it>, <it>find next</it>, and <it>find prior</it>. The most common example of such an interface is the <link xlink:type="simple" xlink:href="../799/6799.xml">
COBOL</link>-based Data Manipulation Language defined by <information wordnetid="105816287" confidence="0.8">
<datum wordnetid="105816622" confidence="0.8">
<link xlink:type="simple" xlink:href="../351/309351.xml">
CODASYL</link></datum>
</information>
.</p>
<p>

Network databases are traditionally implemented by using chains of pointers between related records. These pointers can be node numbers or disk addresses.</p>
<p>

The network model became popular because it provided considerable flexibility in modelling complex data relationships, and also offered high performance by virtue of the fact that the access verbs used by programmers mapped directly to pointer-following in the implementation.</p>
<p>

However, the model had several disadvantages. Navigational programming proved error-prone as data models became more complex, and small changes to the data structure could require changes to many programs. Also, because of the use of physical pointers, operations such as database loading and restructuring could be very time-consuming.</p>
<p>

The network model tends to store records with links to other records. Each record in the database can have multiple parents, i.e., the relationships among data elements can have a many to many relationship. Associations are tracked via "pointers". These pointers can be node numbers or disk addresses. Most network databases tend to also include some form of hierarchical model. Databases can be translated from hierarchical model to network and vice versa. The main difference between the network model and hierarchical model is that in a network model, a child can have a number of parents whereas in a hierarchical model, a child can have only one parent.</p>
<p>

The network model provides greater advantage than the hierarchical model in that promotes greater flexibility and data accessibility, since records at a lower level can be accessed without accessing the records above them. This model is more efficient than hierarchical model, easier to understand and can be applied to many real world problems that require routine transactions. The disadvantages are that: It is a complex process to design and develop a network database; It has to be refined frequently; It requires that the relationships among all the records be defined before development starts, and changes often demand major programming efforts; Operation and maintenance of the network model is expensive and time consuming.</p>
<p>

Examples of database engines that have network model capabilities are RDM Embedded and RDM Server.</p>

</ss1>
<ss1>
<st>
Relational model</st>

<p>

<indent level="1">

<it>Main article: <link xlink:type="simple" xlink:href="../220/26220.xml">
Relational Model</link></it>
</indent>
The basic data structure of the relational model is a table where information about a particular entity (say, employees) is represented in columns and rows.  The columns enumerate the various attributes of an entity (e.g. employee_name, address, phone_number).  Rows (also called records) represent instances of an entity (e.g. specific employees).</p>
<p>

The "relation" in "relational database" comes from the mathematical notion of <link xlink:type="simple" xlink:href="../509/19509.xml">
relations</link> from the field of <link xlink:type="simple" xlink:href="../553/27553.xml">
set theory</link>.  A relation is a set of <link xlink:type="simple" xlink:href="../729/132729.xml">
tuple</link>s, so rows are sometimes called tuples.  All tables in a relational database adhere to three basic rules.
<list>
<entry level="1" type="bullet">

 The ordering of columns is immaterial</entry>
<entry level="1" type="bullet">

 Identical rows are not allowed in a table</entry>
<entry level="1" type="bullet">

 Each row has a single (separate) value for each of its columns (each tuple has an atomic value).</entry>
</list>
</p>
<p>

If the same value occurs in two different records (from the same table or different tables) it can imply a relationship between those records.  Relationships between records are often categorized by their <link xlink:type="simple" xlink:href="../163/8237163.xml">
cardinality</link> (1:1, (0), 1:M, M:M).</p>
<p>

Tables can have a designated column or set of columns that act as a "key" to select rows from that table with the same or similar key values.  A "primary key" is a key that has a unique value for each row in the table.  Keys are commonly used to join or combine data from two or more tables.  For example, an <it>employee</it> table may contain a column named <it>address</it> which contains a value that matches the key of an <it>address</it> table. Keys are also critical in the creation of indexes, which facilitate fast retrieval of data from large tables. It is not necessary to define all the keys in advance; a column can be used as a key even if it was not originally intended to be one.</p>

<ss2>
<st>
Relational operations</st>
<p>

Users (or programs) request data from a relational database by sending it a <link xlink:type="simple" xlink:href="../390/679390.xml">
query</link> that is written in a special language, usually a dialect of <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../004/29004.xml">
SQL</link></programming_language>
. Although SQL was originally intended for end-users, it is much more common for SQL queries to be embedded into software that provides an easier user interface. Many web applications, such as <web_site wordnetid="106359193" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../734/5043734.xml">
Wikipedia</link></web_site>
, perform SQL queries when generating pages.</p>
<p>

In response to a query, the database returns a result set, which is the list of rows constituting the answer. The simplest query is just to return all the rows from a table, but more often, the rows are filtered in some way to return just the answer wanted. Often, data from multiple tables are combined into one, by doing a <link xlink:type="simple" xlink:href="../204/665204.xml">
join</link>. There are a number of relational operations in addition to join.</p>

</ss2>
<ss2>
<st>
Normal forms</st>

<p>

<indent level="1">

<it>Main article: <relationship wordnetid="113928668" confidence="0.8">
<confinement wordnetid="113998576" confidence="0.8">
<state wordnetid="100024720" confidence="0.8">
<subjugation wordnetid="113996300" confidence="0.8">
<constraint wordnetid="113998781" confidence="0.8">
<link xlink:type="simple" xlink:href="../640/8640.xml">
Database normalization</link></constraint>
</subjugation>
</state>
</confinement>
</relationship>
</it>
</indent>
Relations are classified based upon the types of anomalies to which they're vulnerable.  A database that's in the <link xlink:type="simple" xlink:href="../564/202564.xml">
first normal form</link> is vulnerable to all types of anomalies, while a database that's in the <link xlink:type="simple" xlink:href="../023/3850023.xml">
Boyce-Codd Normal Form</link> has no modification anomalies.  Normal forms are hierarchical in nature.  That is, the lowest level is the first normal form, and the database cannot meet the requirements for higher level normal forms without first having met all the requirements of the lesser normal form.</p>

</ss2>
</ss1>
</sec>
<sec>
<st>
Database management systems</st>

<p>

<indent level="1">

<it>Main article: <link xlink:type="simple" xlink:href="../513/8513.xml">
Database management system</link></it>
</indent>

</p>
<ss1>
<st>
Relational database management systems</st>
<p>

An RDBMS implements the features of the relational model outlined above. In this context, <physical_entity wordnetid="100001930" confidence="0.8">
<expert wordnetid="109617867" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<specialist wordnetid="110631941" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<employee wordnetid="110053808" confidence="0.8">
<link xlink:type="simple" xlink:href="../364/84364.xml">
Date</link></employee>
</causal_agent>
</worker>
</specialist>
</person>
</expert>
</physical_entity>
's <b>Information Principle</b> states:</p>
<p>

The entire information content of the database is represented in one and only one way. Namely as explicit values in column positions (attributes) and rows in relations (<link xlink:type="simple" xlink:href="../729/132729.xml">
tuple</link>s) Therefore, there are no explicit pointers between related tables.</p>

</ss1>
<ss1>
<st>
Post-relational database models</st>
<p>

Several products have been identified as <link>
post-relational</link> because the data model incorporates <link xlink:type="simple" xlink:href="../227/38227.xml">
relations</link> but is not constrained by the Information Principle, requiring that all information is represented by <link>
data values</link> in relations. Products using a post-relational data model typically employ a model that actually pre-dates the <link xlink:type="simple" xlink:href="../220/26220.xml">
relational model</link>. These might be identified as  a <link xlink:type="simple" xlink:href="../986/19721986.xml">
directed graph</link> with <link xlink:type="simple" xlink:href="../806/30806.xml">
trees</link> on the <link xlink:type="simple" xlink:href="../519/8519.xml">
nodes</link>.</p>
<p>

Examples of models that could be classified as post-relational are <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<system wordnetid="104377057" confidence="0.8">
<electronic_database wordnetid="106588511" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<lexical_database wordnetid="106638868" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<wordnet wordnetid="106639428" confidence="0.8">
<database wordnetid="106637824" confidence="0.8">
<link xlink:type="simple" xlink:href="../217/471217.xml">
PICK</link></database>
</wordnet>
</instrumentality>
</lexical_database>
</artifact>
</electronic_database>
</system>
</information>
</message>
 aka <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../290/519290.xml">
MultiValue</link></instrumentality>
</artifact>
</system>
, and <link xlink:type="simple" xlink:href="../723/19723.xml">
MUMPS</link>.</p>

</ss1>
<ss1>
<st>
Object database models</st>
<p>

In recent years, the <link xlink:type="simple" xlink:href="../757/22757.xml">
object-oriented</link> paradigm has been applied to database technology, creating a new programming model known as <link xlink:type="simple" xlink:href="../826/22826.xml">
object database</link>s. These databases attempt to bring the database world and the application programming world closer together, in particular by ensuring that the database uses the same <link xlink:type="simple" xlink:href="../701/199701.xml">
type system</link> as the application program. This aims to avoid the overhead (sometimes referred to as the <it><link xlink:type="simple" xlink:href="../278/2063278.xml">
impedance mismatch</link></it>) of converting information between its representation in the database (for example as rows in tables) and its representation in the application program (typically as objects). At the same time, object databases attempt to introduce the key ideas of object programming, such as <link xlink:type="simple" xlink:href="../301/10301.xml">
encapsulation</link> and <link xlink:type="simple" xlink:href="../811/261811.xml">
polymorphism</link>, into the world of databases.</p>
<p>

A variety of these ways have been tried for storing objects in a database. Some products have approached the problem from the application programming end, by making the objects manipulated by the program <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<model wordnetid="110324560" confidence="0.8">
<assistant wordnetid="109815790" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../550/6025550.xml">
persistent</link></causal_agent>
</worker>
</assistant>
</model>
</person>
</physical_entity>
. This also typically requires the addition of some kind of query language, since conventional programming languages do not have the ability to find objects based on their information content. Others have attacked the problem from the database end, by defining an object-oriented data model for the database, and defining a database programming language that allows full programming capabilities as well as traditional query facilities.</p>

</ss1>
</sec>
<sec>
<st>
DBMS internals</st>

<ss1>
<st>
Storage and physical database design</st>

<p>

<indent level="1">

<it>Main article: <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../365/10983365.xml">
Database storage structures</link></instrumentality>
</artifact>
</system>
</it>
</indent>

<table class="metadata plainlinks ambox ">
<row>
<col>

ambox-notice" style=""</col>
</row>
<row>
<col class="mbox-image"><p>

<image width="36px" src="Wiki_letter_w.svg">
</image>
</p>
</col>
<col style="" class="mbox-text">
 <b>Please help <weblink xlink:type="simple" xlink:href="http://localhost:18088/wiki/index.php?title=Database&amp;action=edit">
improve this section</weblink> by expanding it.</b> Further information might be found on the  or at . 
<it>(June 2008)''</it></col>
</row>
</table>


Database tables/indexes are typically stored in memory or on hard disk in one of many forms, ordered/unordered <link xlink:type="simple" xlink:href="../973/573973.xml">
flat files</link>, <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../763/252763.xml">
ISAM</link></instrumentality>
</artifact>
</system>
, <link xlink:type="simple" xlink:href="../996/13996.xml">
heaps</link>, <link xlink:type="simple" xlink:href="../833/13833.xml">
hash buckets</link> or <link xlink:type="simple" xlink:href="../443/1326443.xml">
B+ tree</link>s. These have various advantages and disadvantages discussed further in the main article on this topic. The most commonly used are B+ trees and ISAM.</p>
<p>

Other important design choices relate to the clustering of data by category (such as grouping data by month, or location), creating pre-computed views known as materialized views, partitioning data by range or hash. As well memory management and storage topology can be important design choices for database designers. Just as normalization is used to reduce storage requirements and improve the extensibility of the database, conversely denormalization is often used to reduce join complexity and reduce execution time for queries. <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref></p>

<ss2>
<st>
Indexing</st>
<p>

All of these databases can take advantage of <link xlink:type="simple" xlink:href="../076/1711076.xml">
indexing</link> to increase their speed.  This technology has advanced tremendously since its early uses in the 1960s and 1970s. The most common kind of index is a sorted list of the contents of some particular table column, with pointers to the row associated with the value. An index allows a set of table rows matching some criterion to be located quickly. Typically, indexes are also stored in the various forms of data-structure mentioned above (such as <link xlink:type="simple" xlink:href="../674/4674.xml">
B-tree</link>s, <link xlink:type="simple" xlink:href="../833/13833.xml">
hash</link>es, and <link xlink:type="simple" xlink:href="../167/18167.xml">
linked lists</link>). Usually, a specific technique is chosen by the database designer to increase efficiency in the particular case of the type of index required.</p>
<p>

Relational DBMS's have the advantage that indexes can be created or dropped without changing existing applications making use of it. The database chooses between many different strategies based on which one it estimates will run the fastest.  In other words, indexes are transparent to the application or end-user querying the database;  while they affect performance, any SQL command will run with or without index to compute the result of an <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../004/29004.xml">
SQL</link></programming_language>
 statement. The RDBMS will produce a plan of how to execute the query, which is generated by analyzing the run times of the different algorithms and selecting the quickest. Some of the key algorithms that deal with <link xlink:type="simple" xlink:href="../204/665204.xml">
joins</link> are <link xlink:type="simple" xlink:href="../299/7806299.xml">
nested loop join</link>, <link xlink:type="simple" xlink:href="../155/1227155.xml">
sort-merge join</link> and <link xlink:type="simple" xlink:href="../584/1983584.xml">
hash join</link>.  Which of these is chosen depends on whether an index exists, what type it is, and its <link xlink:type="simple" xlink:href="../445/9004445.xml">
cardinality</link>.</p>
<p>

An index speeds up access to data, but it has disadvantages as well. First, every index increases the amount of storage on the hard drive necessary for the database file, and second, the index must be updated each time the data are altered, and this costs time. 
(Thus an index saves time in the reading of data, but it costs time in entering and altering data. It thus depends on the use to which the data are to be put whether an index is on the whole a net plus or minus in the quest for efficiency.)</p>
<p>

A special case of an index is a primary index, or primary key, which is distinguished in that the primary index must ensure a unique reference to a record. Often, for this purpose one simply uses a running index number (ID number). Primary indexes play a significant role in relational databases, and they can speed up access to data considerably.</p>

</ss2>
</ss1>
<ss1>
<st>
Transactions and concurrency</st>
<p>

In addition to their data model, most practical databases ("transactional databases") attempt to enforce a <link xlink:type="simple" xlink:href="../953/233953.xml">
database transaction</link> . Ideally, the database software should enforce the <link xlink:type="simple" xlink:href="../776/60776.xml">
ACID</link> rules, summarized here:
<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../074/4695074.xml">
Atomicity</link>: Either all the tasks in a transaction must be done, or none of them. The transaction must be completed, or else it must be undone (rolled back).</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../830/1140830.xml">
Consistency</link>: Every transaction must preserve the integrity constraints — the declared consistency rules — of the database. It cannot place the data in a contradictory state.</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../945/702945.xml">
Isolation</link>: Two simultaneous transactions cannot interfere with one another. Intermediate results within a transaction are not visible to other transactions.</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../944/245944.xml">
Durability</link>: Completed transactions cannot be aborted later or their results discarded. They must persist through (for instance) restarts of the DBMS after crashes</entry>
</list>
</p>
<p>

In practice, many DBMSs allow most of these rules to be selectively relaxed for better performance.</p>
<p>

<link xlink:type="simple" xlink:href="../356/217356.xml">
Concurrency control</link> is a method used to ensure that transactions are executed in a safe manner and follow the ACID rules. The DBMS must be able to ensure that only <link xlink:type="simple" xlink:href="../801/4367801.xml">
serializable</link>, <link xlink:type="simple" xlink:href="../801/4367801.xml#xpointer(//*[./st=%22correctness+-+recoverability%22])">
recoverable</link> schedules are allowed, and that no actions of committed transactions are lost while undoing aborted transactions.</p>

</ss1>
<ss1>
<st>
Replication</st>
<p>

Replication of databases is closely related to transactions. If a database can log its individual actions, it is possible to create a duplicate of the data in real time.
The duplicate can be used to improve performance or availability of the whole database system.
Common replication concepts include:
<list>
<entry level="1" type="bullet">

 Master/Slave Replication: All write requests are performed on the master and then replicated to the slaves</entry>
<entry level="1" type="bullet">

 Quorum: The result of Read and Write requests are calculated by querying a "majority" of replicas.</entry>
<entry level="1" type="bullet">

 Multimaster: Two or more replicas sync each other via a transaction identifier.</entry>
</list>
</p>
<p>

Parallel synchronous replication of databases enables transactions to be replicated on multiple servers simultaneously, which provides a method for backup and security as well as data availability.</p>

</ss1>
<ss1>
<st>
Security</st>
<p>

<link xlink:type="simple" xlink:href="../778/4689778.xml">
Database security</link> denotes the system, processes, and procedures that protect a database from unintended activity. </p>
<p>

Security is usually enforced through <b>access control</b>, <b>auditing</b>, and <b>encryption</b>. 
<list>
<entry level="1" type="bullet">

 Access control ensures and restricts who can connect and what can be done to the database.</entry>
<entry level="1" type="bullet">

 Auditing logs what action or change has been performed, when and by whom. </entry>
<entry level="1" type="bullet">

 Encryption: Since security has become a major issue in recent years, many commercial database vendors provide built-in encryption mechanism. Data is encoded natively into the tables and deciphered "on the fly" when a query comes in. Connections can also be secured and encrypted if required using DSA, MD5, SSL or legacy encryption standard.</entry>
</list>
</p>
<p>

Enforcing security is one of the major tasks of the DBA.</p>
<p>

In the United Kingdom, legislation protecting the public from unauthorized disclosure of personal information held on databases falls under the Office of the Information Commissioner. United Kingdom based organizations holding personal data in electronic format (databases for example) are required to register with the Data Commissioner.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%222%22])">2</ref></p>

</ss1>
<ss1>
<st>
Locking</st>

<p>

<table class="metadata plainlinks ambox ">
<row>
<col>

ambox-notice" style=""</col>
</row>
<row>
<col class="mbox-image"><p>

<image width="36px" src="Wiki_letter_w.svg">
</image>
</p>
</col>
<col style="" class="mbox-text">
 <b>Please help <weblink xlink:type="simple" xlink:href="http://localhost:18088/wiki/index.php?title=Database&amp;action=edit">
improve this section</weblink> by expanding it.</b> Further information might be found on the  or at . 
<it>(June 2008)''</it></col>
</row>
</table>


<link xlink:type="simple" xlink:href="../593/244593.xml">
Locking</link> is how the database handles multiple concurrent operations. This is how concurrency and some form of basic integrity is managed within the database system. Such locks can be applied on a row level, or on other levels like page (a basic data block), extend (multiple array of pages) or even an entire table. This helps maintain the integrity of the data by ensuring that only one process at a time can modify the <b>same</b> data. 
Unlike a basic filesystem files or folders, where only one lock at the time can be set, restricting the usage to one process only. A database can set and hold mutiple locks at the same time on the different level of the physical data structure. How locks are set, last is determined by the database engine locking scheme based on the submitted SQL or transactions by the users. Generally speaking, no activity on the database should be translated by no or very light locking. </p>
<p>

For most DBMS systems existing on the market, locks are generally <b>shared</b> or <b>exclusive</b>.
Exclusive locks mean that no other lock can acquire the current data object as long as the exclusive lock lasts. Exclusive locks are usually set while the database needs to change data, like during an UPDATE or DELETE operation.</p>
<p>

Shared locks can take ownership one from the other of the current data structure. Shared locks are usually used while the database is reading data, during a SELECT operation.   
The number, nature of locks and time the lock holds a data block can have a huge impact on the database performances. Bad locking can lead to disastrous performance response (usually the result of poor SQL requests, or inadequate database physical structure)</p>
<p>

Default locking behavior is enforced by the <b>isolation level</b> of the dataserver. Changing the isolation level will affect how shared or exclusive locks must be set on the data for the entire database system. Default isolation is generally 1, where data can not be read while it is modified, forbidding to return "ghost data" to end user.</p>
<p>

At some point intensive or inappropriate exclusive locking, can lead to the "dead lock" situation between two locks. Where none of the locks can be released because they try to acquire resources mutually from each other. The Database has a fail safe mechanism and will automatically "sacrifice" one of the locks releasing the resource. Doing so processes or transactions involved in the "dead lock" will be rolled back.</p>
<p>

Databases can also be locked for other reasons, like access restrictions for given levels of user.
Databases are also locked for routine database maintenance, which prevents changes being made during the maintenance. See <weblink xlink:type="simple" xlink:href="http://publib.boulder.ibm.com/infocenter/rbhelp/v6r3/index.jsp?topic=/com.ibm.redbrick.doc6.3/wag/wag80.htm">
"Locking tables and databases" (section in some documentation / explanation from IBM)</weblink> for more detail.)</p>

</ss1>
<ss1>
<st>
Architecture</st>

<p>

Depending on the intended use, there are a number of database architectures in use. Many databases use a combination of strategies. 
On-line Transaction Processing systems (OLTP) often use a row-oriented datastore architecture, while data-warehouse and other retrieval-focused applications like <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../923/1092923.xml">
Google</link></company>
's <link xlink:type="simple" xlink:href="../973/5919973.xml">
BigTable</link>, or bibliographic database(library catalogue) systems may use a column-oriented datastore architecture. </p>
<p>

Document-Oriented, XML, Knowledgebases, as well as frame databases and rdf-stores (aka Triple-Stores), may also use a combination of these architectures in their implementation.</p>
<p>

Finally it should be noted that not all database have or need a database 'schema' (so called schema-less databases).</p>
<p>

Also there are other types of database which cannot be classified as relational databases</p>

</ss1>
</sec>
<sec>
<st>
Applications of databases</st>
<p>

Databases are used in many applications, spanning virtually the entire range of <link xlink:type="simple" xlink:href="../309/5309.xml">
computer software</link>. Databases are the preferred method of storage for large multiuser applications, where coordination between many users is needed. Even individual users find them convenient, and many electronic mail programs and personal organizers are based on standard database technology. Software database drivers are available for most database platforms so that <link xlink:type="simple" xlink:href="../746/454746.xml">
application software</link> can use a common <link>
Application Programming Interface</link> to retrieve the information stored in a database. Two commonly used database APIs are <link xlink:type="simple" xlink:href="../755/42755.xml">
JDBC</link> and <link xlink:type="simple" xlink:href="../701/168701.xml">
ODBC</link>.</p>
<p>

For example suppliers database contains the data relating to suppliers such as;
<list>
<entry level="1" type="bullet">

supplier name</entry>
<entry level="1" type="bullet">

supplier code</entry>
<entry level="1" type="bullet">

supplier address</entry>
</list>
</p>
<p>

It is often used by schools to teach students and grade them.</p>

</sec>
<sec>
<st>
Links to DBMS products</st>

<p>

<indent level="1">

<it>Main article: 
Database management systems|:Category:Database management systems</it>
</indent>

<list>
<entry level="1" type="bullet">

<system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../117/1347117.xml">
4D</link></instrumentality>
</artifact>
</system>
</entry>
<entry level="1" type="bullet">

<system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../962/401962.xml">
ADABAS</link></instrumentality>
</artifact>
</system>
</entry>
<entry level="1" type="bullet">

<system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../836/10525836.xml">
Alpha Five</link></instrumentality>
</artifact>
</system>
</entry>
<entry level="1" type="bullet">

<system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../658/2328658.xml">
Apache Derby</link></instrumentality>
</artifact>
</system>
 (Java, also known as IBM Cloudscape and Sun Java DB)</entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../706/4706.xml">
BerkeleyDB</link></entry>
<entry level="1" type="bullet">

<system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../539/13427539.xml">
CouchDB</link></instrumentality>
</artifact>
</system>
</entry>
<entry level="1" type="bullet">

<system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../161/10531161.xml">
CSQL</link></instrumentality>
</artifact>
</system>
</entry>
<entry level="1" type="bullet">

<link>
Datawasp</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../823/2033823.xml">
Db4objects</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../537/209537.xml">
dBase</link></entry>
<entry level="1" type="bullet">

<software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../699/266699.xml">
FileMaker</link></software>
</entry>
<entry level="1" type="bullet">

<software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../345/288345.xml">
Firebird (database server)</link></software>
</entry>
<entry level="1" type="bullet">

<system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../301/3445301.xml">
H2</link></instrumentality>
</artifact>
</system>
 (Java)</entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../783/1107783.xml">
Hsqldb</link> (Java)</entry>
<entry level="1" type="bullet">

<system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../983/142983.xml">
IBM DB2</link></instrumentality>
</artifact>
</system>
</entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../260/391260.xml">
IBM IMS (Information Management System)</link></entry>
<entry level="1" type="bullet">

<system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../310/9769310.xml">
IBM UniVerse</link></instrumentality>
</artifact>
</system>
</entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../818/51818.xml">
Informix</link></entry>
<entry level="1" type="bullet">

<system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../394/84394.xml">
Ingres</link></instrumentality>
</artifact>
</system>
</entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../684/172684.xml">
Interbase</link></entry>
<entry level="1" type="bullet">

<link>
InterSystems Caché</link></entry>
<entry level="1" type="bullet">

<system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../666/1120666.xml">
MaxDB</link></instrumentality>
</artifact>
</system>
 (formerly SapDB)</entry>
<entry level="1" type="bullet">

<software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../935/20935.xml">
Microsoft Access</link></software>
</entry>
<entry level="1" type="bullet">

<software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../994/13989994.xml">
Microsoft SQL Server</link></software>
</entry>
<entry level="1" type="bullet">

<system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../381/1318381.xml">
Model 204</link></instrumentality>
</artifact>
</system>
</entry>
<entry level="1" type="bullet">

<system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../545/19545.xml">
MySQL</link></instrumentality>
</artifact>
</system>
</entry>
<entry level="1" type="bullet">

<system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../250/2491250.xml">
Nomad</link></instrumentality>
</artifact>
</system>
</entry>
<entry level="1" type="bullet">

<system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../433/10375433.xml">
Objectivity/DB</link></instrumentality>
</artifact>
</system>
</entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../813/860813.xml">
ObjectStore</link></entry>
<entry level="1" type="bullet">

<software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../975/5758975.xml">
OpenLink Virtuoso</link></software>
</entry>
<entry level="1" type="bullet">

<software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../002/2406002.xml">
OpenOffice.org Base</link></software>
</entry>
<entry level="1" type="bullet">

<system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../725/323725.xml">
Oracle Database</link></instrumentality>
</artifact>
</system>
</entry>
<entry level="1" type="bullet">

<system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../505/1013505.xml">
Paradox (database)</link></instrumentality>
</artifact>
</system>
</entry>
<entry level="1" type="bullet">

<software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../574/16926574.xml">
Polyhedra DBMS</link></software>
</entry>
<entry level="1" type="bullet">

<system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../824/23824.xml">
PostgreSQL</link></instrumentality>
</artifact>
</system>
</entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../357/1071357.xml">
Progress 4GL</link></entry>
<entry level="1" type="bullet">

<software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../102/14830102.xml">
RDM Embedded</link></software>
</entry>
<entry level="1" type="bullet">

<software wordnetid="106566077" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../302/15096302.xml">
ScimoreDB</link></software>
</entry>
<entry level="1" type="bullet">

<system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../440/10933440.xml">
Sedna</link></instrumentality>
</artifact>
</system>
</entry>
<entry level="1" type="bullet">

<system wordnetid="104377057" confidence="0.8">
<structure wordnetid="104341686" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<area wordnetid="102735688" confidence="0.8">
<library wordnetid="103660909" confidence="0.8">
<room wordnetid="104105893" confidence="0.8">
<link xlink:type="simple" xlink:href="../884/244884.xml">
SQLite</link></room>
</library>
</area>
</instrumentality>
</artifact>
</structure>
</system>
</entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../791/8387791.xml">
Superbase</link></entry>
<entry level="1" type="bullet">

<company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../688/198688.xml">
Sybase</link></company>
</entry>
<entry level="1" type="bullet">

<company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../680/168680.xml">
Teradata</link></company>
</entry>
<entry level="1" type="bullet">

<company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../299/6357299.xml">
Vertica</link></company>
</entry>
<entry level="1" type="bullet">

<system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<tool wordnetid="104451818" confidence="0.8">
<implement wordnetid="103563967" confidence="0.8">
<link xlink:type="simple" xlink:href="../957/175957.xml">
Visual FoxPro</link></implement>
</tool>
</instrumentality>
</artifact>
</system>
</entry>
</list>
</p>


</sec>
<sec>
<st>
See also</st>
<p>

<list>
<entry level="1" type="bullet">

 <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../609/8204609.xml">
Bound control</link></instrumentality>
</artifact>
</system>
</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../036/1569036.xml">
Comparison of relational database management systems</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../336/13783336.xml">
Database-centric architecture</link></entry>
<entry level="1" type="bullet">

 <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../623/1093623.xml">
Database theory</link></instrumentality>
</artifact>
</system>
</entry>
<entry level="1" type="bullet">

 <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<format wordnetid="106636806" confidence="0.8">
<link xlink:type="simple" xlink:href="../645/10477645.xml">
.db</link></format>
</information>
</message>
</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../882/11358882.xml">
Government database</link></entry>
<entry level="1" type="bullet">

 <substance wordnetid="100019613" confidence="0.8">
<part wordnetid="113809207" confidence="0.8">
<material wordnetid="114580897" confidence="0.8">
<link xlink:type="simple" xlink:href="../193/8817193.xml">
Glass databases</link></material>
</part>
</substance>
</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../442/7330442.xml">
Online database</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../344/8446344.xml">
Real time database</link></entry>
</list>
</p>

</sec>
<sec>
<st>
References</st>
<p>

<list>
<entry level="1" type="definition">

Notes</entry>
</list>
</p>
<p>

<reflist>
<entry id="1">
S. Lightstone, T. Teorey, T. Nadeau, Physical Database Design: the database professional's guide to exploiting indexes, views, storage, and more, Morgan Kaufmann Press, 2007. ISBN 0123693896   </entry>
<entry id="2">
<weblink xlink:type="simple" xlink:href="http://www.ico.gov.uk/">
Information Commissioner's Office - ICO</weblink></entry>
</reflist>

<list>
<entry level="1" type="definition">

Bibliography</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 Connolly, Thomas, and Caroln Begg. <it>Database Systems.</it> New York: Harlow, 2002.</entry>
<entry level="1" type="bullet">

 Date, C. J. <it>An Introduction to Database Systems</it>, Eighth Edition, Addison Wesley, 2003. </entry>
<entry level="1" type="bullet">

 Galindo, J., Urrutia, A., Piattini, M., <it>Fuzzy Databases: Modeling, Design and Implementation</it> (<link>
FSQL</link> guide). Idea Group Publishing Hershey, USA, 2006.</entry>
<entry level="1" type="bullet">

 Galindo, J., Ed. <it>Handbook on Fuzzy Information Processing in Databases</it>. Hershey, PA: Information Science Reference (an imprint of Idea Group Inc.), 2008.</entry>
<entry level="1" type="bullet">

 Gray, J. and Reuter, A. <it>Transaction Processing: Concepts and Techniques</it>, 1st edition,  Morgan Kaufmann Publishers, 1992.</entry>
<entry level="1" type="bullet">

 Kroenke, David M. <it>Database Processing: Fundamentals, Design, and Implementation</it> (1997), Prentice-Hall, Inc., pages 130-144. </entry>
<entry level="1" type="bullet">

 Kroenke, David M., and David J. Auer. <it>Database Concepts.</it> 3rd ed. New York: Prentice, 2007.</entry>
<entry level="1" type="bullet">

 Lightstone, S., T. Teorey, and T. Nadeau, <it>Physical Database Design: the database professional's guide to exploiting indexes, views, storage, and more</it>, Morgan Kaufmann Press, 2007. ISBN 0-12369-389-6.   </entry>
<entry level="1" type="bullet">

 Shih, J. "<weblink xlink:type="simple" xlink:href="http://www.pcticorp.com/assets/docs/PQL2b.pdf">
Why Synchronous Parallel Transaction Replication is Hard, But Inevitable?</weblink>", white paper, 2007.</entry>
<entry level="1" type="bullet">

 Teorey, T.; Lightstone, S. and Nadeau, T. <it>Database Modeling &amp; Design: Logical Design</it>, 4th edition, Morgan Kaufmann Press, 2005. ISBN 0-12-685352-5</entry>
<entry level="1" type="bullet">

 Tukey, John W. <it>Exploratory Data Analysis.</it> Reading, MA: Addison Wesley, 1977.</entry>
</list>
</p>


</sec>
<sec>
<st>
External links</st>
<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://groups.google.com/group/comp.databases.theory">
comp.databases.theory</weblink> (Database Theory Discussion Group)</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.lcc.uma.es/~ppgg/FSQL/">
Web page about FSQL</weblink>: References and links about <link>
FSQL</link></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.visolve.com/database/MySQL_HPUX_Perf.pdf">
Increase Database Performance</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.sqlset.com/">
Database discussion forums</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.emdat.be">
The EM-DAT International Disaster Database</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.cedat.be">
The CE-DAT Complex Emergency Database</weblink></entry>
</list>

www.databases.co.uk</p>

<p>

<table style=";" class="navbox" cellspacing="0">
<row>
<col style="padding:2px;">
<table style="width:100%;background:transparent;color:inherit;;" class="nowraplinks collapsible autocollapse " cellspacing="0">
<row>
<header colspan="2" style=";" class="navbox-title">
<link xlink:type="simple" xlink:href="../513/8513.xml">
Database management system</link>s</header>
</row>
<row style="height:2px;">

</row>
<row>
<col colspan="2" style=";" class="navbox-abovebelow">
<system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../520/10973520.xml">
Database models</link></instrumentality>
</artifact>
</system>

&nbsp;·  <relationship wordnetid="113928668" confidence="0.8">
<confinement wordnetid="113998576" confidence="0.8">
<state wordnetid="100024720" confidence="0.8">
<subjugation wordnetid="113996300" confidence="0.8">
<constraint wordnetid="113998781" confidence="0.8">
<link xlink:type="simple" xlink:href="../640/8640.xml">
Database normalization</link></constraint>
</subjugation>
</state>
</confinement>
</relationship>
&nbsp;·  <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../365/10983365.xml">
Database storage</link></instrumentality>
</artifact>
</system>
&nbsp;·  <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../515/1990515.xml">
Distributed DBMS</link></instrumentality>
</artifact>
</system>
&nbsp;·  <link xlink:type="simple" xlink:href="../718/445718.xml">
Referential integrity</link>&nbsp;·  <link xlink:type="simple" xlink:href="../285/175285.xml">
Relational algebra</link>&nbsp;·  <link xlink:type="simple" xlink:href="../769/175769.xml">
Relational calculus</link>&nbsp;·  <link xlink:type="simple" xlink:href="../873/25873.xml">
Relational database</link>&nbsp;·  <link xlink:type="simple" xlink:href="../743/98743.xml">
Relational DBMS</link>&nbsp;·  <link xlink:type="simple" xlink:href="../220/26220.xml">
Relational model</link>&nbsp;·  <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../960/68960.xml">
Object-relational database</link></instrumentality>
</artifact>
</system>
&nbsp;·  <link xlink:type="simple" xlink:href="../409/212409.xml">
Transaction processing</link></col>
</row>
<row style="height:2px;">

</row>
<row>
<col style=";;" class="navbox-group">
Concepts</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<link xlink:type="simple" xlink:href="../377/8377.xml">
Database</link>&nbsp;·  <link xlink:type="simple" xlink:href="../776/60776.xml">
ACID</link>&nbsp;·  <link xlink:type="simple" xlink:href="../180/287180.xml">
CRUD</link>&nbsp;·  <link xlink:type="simple" xlink:href="../540/2002540.xml">
Null</link>&nbsp;·  <link xlink:type="simple" xlink:href="../975/336975.xml">
Candidate key</link>&nbsp;·  <link xlink:type="simple" xlink:href="../065/259065.xml">
Foreign key</link>&nbsp;·  <link xlink:type="simple" xlink:href="../099/6850099.xml">
Primary key</link>&nbsp;·  <link xlink:type="simple" xlink:href="../952/1137952.xml">
Superkey</link>&nbsp;·  <link xlink:type="simple" xlink:href="../950/472950.xml">
Surrogate key</link></col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
Objects</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-even">
<system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../316/1384316.xml">
Trigger</link></instrumentality>
</artifact>
</system>
&nbsp;·  <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../226/1960226.xml">
View</link></instrumentality>
</artifact>
</system>
&nbsp;·  <link xlink:type="simple" xlink:href="../163/1701163.xml">
Table</link>&nbsp;·  <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../836/2104836.xml">
Cursor</link></instrumentality>
</artifact>
</system>
&nbsp;·  <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../974/245974.xml">
Log</link></instrumentality>
</artifact>
</system>
&nbsp;·  <link xlink:type="simple" xlink:href="../953/233953.xml">
Transaction</link>&nbsp;·  <link xlink:type="simple" xlink:href="../076/1711076.xml">
Index</link>&nbsp;·  <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../251/277251.xml">
Stored procedure</link></instrumentality>
</artifact>
</system>
&nbsp;·  <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../101/1983101.xml">
Partition</link></instrumentality>
</artifact>
</system>
</col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
<programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../004/29004.xml">
SQL</link></programming_language>
</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<link xlink:type="simple" xlink:href="../285/665285.xml">
Select</link>&nbsp;·  <link xlink:type="simple" xlink:href="../237/903237.xml">
Insert</link>&nbsp;·  <link xlink:type="simple" xlink:href="../573/1220573.xml">
Update</link>&nbsp;·  <link xlink:type="simple" xlink:href="../931/4347931.xml">
Merge</link>&nbsp;·  <link xlink:type="simple" xlink:href="../216/1701216.xml">
Delete</link>&nbsp;·  <link xlink:type="simple" xlink:href="../204/665204.xml">
Join</link>&nbsp;·  <link xlink:type="simple" xlink:href="../258/11308258.xml">
Union</link>&nbsp;·  <link xlink:type="simple" xlink:href="../018/452018.xml">
Create</link>&nbsp;·  <link xlink:type="simple" xlink:href="../018/452018.xml">
Drop</link>&nbsp;·  <link xlink:type="simple" xlink:href="../953/233953.xml#xpointer(//*[./st=%22In+SQL%22])">
Begin work</link>&nbsp;·  <link xlink:type="simple" xlink:href="../958/1626958.xml">
Commit</link>&nbsp;·  <link xlink:type="simple" xlink:href="../240/1015240.xml">
Rollback</link>&nbsp;·  <link xlink:type="simple" xlink:href="../664/2554664.xml">
Truncate</link>&nbsp;·  <link xlink:type="simple" xlink:href="../018/452018.xml">
Alter</link>&nbsp;·  <link xlink:type="simple" xlink:href="../499/19041499.xml">
XSQL</link></col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
Implementations</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-even">
<link xlink:type="simple" xlink:href="../873/25873.xml">
Relational</link>&nbsp;·  <link xlink:type="simple" xlink:href="../973/573973.xml">
Flat file</link>&nbsp;·  <link xlink:type="simple" xlink:href="../069/1971069.xml">
Deductive</link>&nbsp;·  <link xlink:type="simple" xlink:href="../079/12321079.xml">
Dimensional</link>&nbsp;·  <link xlink:type="simple" xlink:href="../075/247075.xml">
Hierarchical</link>&nbsp;·  <link xlink:type="simple" xlink:href="../098/185098.xml">
Network</link>&nbsp;·  <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../414/15002414.xml">
Document-oriented</link></instrumentality>
</artifact>
</system>
&nbsp;·  <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../826/22826.xml">
Object-oriented</link></instrumentality>
</artifact>
</system>
&nbsp;·  <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../960/68960.xml">
Object-relational</link></instrumentality>
</artifact>
</system>
&nbsp;·  <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../471/1252471.xml">
Temporal</link></instrumentality>
</artifact>
</system>
&nbsp;·  <link xlink:type="simple" xlink:href="../351/1442351.xml">
XML data stores</link>&nbsp;·  <link xlink:type="simple" xlink:href="../386/16727386.xml">
Triple stores</link></col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
Components</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<link xlink:type="simple" xlink:href="../356/217356.xml">
Concurrency control</link>&nbsp;·  <link xlink:type="simple" xlink:href="../139/645139.xml">
Data dictionary</link>&nbsp;·  <link xlink:type="simple" xlink:href="../755/42755.xml">
JDBC</link>&nbsp;·  <link xlink:type="simple" xlink:href="../701/168701.xml">
ODBC</link>&nbsp;·  <link xlink:type="simple" xlink:href="../528/494528.xml">
Query language</link>&nbsp;·  <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../441/1732441.xml">
Query optimizer</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</instrumentality>
</artifact>
</system>
&nbsp;·  <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../792/1710792.xml">
Query plan</link></instrumentality>
</artifact>
</system>
</col>
</row>
<row style="height:2px;">

</row>
<row>
<col colspan="2" style=";" class="navbox-abovebelow">
<b>Database products:</b> <link xlink:type="simple" xlink:href="../860/1568860.xml">
Object-oriented</link> (<link xlink:type="simple" xlink:href="../534/1593534.xml">
comparison</link>)
&nbsp;·  <link xlink:type="simple" xlink:href="../820/1568820.xml">
Relational</link> (<link xlink:type="simple" xlink:href="../036/1569036.xml">
comparison</link>)&nbsp;·  <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../414/15002414.xml">
Document-oriented</link></instrumentality>
</artifact>
</system>
</col>
</row>
</table>
</col>
</row>
</table>

</p>


</sec>
</bdy>
</entity>
</system>
</article>
