<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 23:23:44[mciao0827] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<company  confidence="0.9508927676800064" wordnetid="108058098">
<header>
<title>Kalido</title>
<id>8418603</id>
<revision>
<id>243804295</id>
<timestamp>2008-10-08T02:36:43Z</timestamp>
<contributor>
<username>SmackBot</username>
<id>433328</id>
</contributor>
</revision>
<categories>
<category>All NPOV disputes</category>
<category>Data modeling</category>
<category>NPOV disputes from December 2007</category>
<category>Software companies of the United States</category>
<category>Software companies of the United Kingdom</category>
<category>Data warehousing</category>
<category>Data management</category>
</categories>
</header>
<bdy>
<template>
<name>Infobox_Company</name>
<parameters>
<location>
<link xlink:type="simple" xlink:href="../272/257272.xml">
Burlington, MA</link>, <link xlink:type="simple" xlink:href="../750/3434750.xml">
USA</link> and <village wordnetid="108672738" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../867/17867.xml">
London</link></village>
, <link xlink:type="simple" xlink:href="../927/1048927.xml">
UK</link></location>
<company_logo>
<image width="150px" src="Kalido_Logo.gif">
<caption>

Kalido logo
</caption>
</image>
</company_logo>
<company_name>
Kalido</company_name>
<company_type>
<link xlink:type="simple" xlink:href="../655/1499655.xml">
Private</link></company_type>
<foundation>
<link xlink:type="simple" xlink:href="../163/36163.xml">
2003</link></foundation>
<industry>
<link xlink:type="simple" xlink:href="../990/7990.xml">
Data Warehousing</link> and <link xlink:type="simple" xlink:href="../022/15103022.xml">
Master Data Management</link> Software</industry>
<products>
Kalido Dynamic Information WarehouseKalido Master Data ManagementKalido Business Information ModelerKalido Universal Information Director</products>
<homepage>
<weblink xlink:type="simple" xlink:href="http://www.kalido.com/">
www.kalido.com</weblink></homepage>
<key_people>
Bill Hewitt - President and Chief Executive OfficerCliff Longman - Chief Technology OfficerJoan Nevins - Chief Financial OfficerNigel Turner - Vice President, Product Development</key_people>
</parameters>
</template>


<table class="metadata plainlinks ambox ">
<row>
<col>

ambox-content" style=""</col>
</row>
<row>
<col class="mbox-image"><p>

<image width="40px" src="Unbalanced_scales.svg">
</image>
</p>
</col>
<col style="" class="mbox-text">
 <b>The  of this article is .</b> 
Please see the discussion on the . <it>(December 2007)</it>Please do not remove this message until the </col>
</row>
</table>



<p>

<b>Kalido</b> is a software company headquartered in Burlington, Massachusetts with offices in the US, London and India.</p>

<sec>
<st>
History</st>
<p>

The ideas behind <weblink xlink:type="simple" xlink:href="http://www.kalido.com/">
Kalido</weblink> started in 1985, when the <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../417/59417.xml">
Royal Dutch/Shell Group</link></company>
 began twelve years of advanced data-modeling research, involving highly <link xlink:type="simple" xlink:href="../422/759422.xml">
generic models</link> and time variance.</p>
<p>

Between 1997 and 2000, a Shell team led by <physical_entity wordnetid="100001930" confidence="0.8">
<communicator wordnetid="109610660" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<writer wordnetid="110794014" confidence="0.8">
<link xlink:type="simple" xlink:href="../283/13226283.xml">
Andy Hayler</link></writer>
</causal_agent>
</person>
</communicator>
</physical_entity>
 spotted the opportunity to develop Kalido software on the basis of this research to solve the challenge of obtaining performance information across multiple Shell organizations throughout business change. The software was deployed within Shell in 100 countries worldwide, powering dozens of projects and generating tens of millions of dollars of annual cost savings.</p>

</sec>
<sec>
<st>
Kalido DIW - The Dynamic Information Warehouse</st>
<p>

The architecture of Kalido DIW is based on "<link xlink:type="simple" xlink:href="../303/19649303.xml">
generic data model</link>ing" principles. Generic data modeling is an
advanced database design technique that offers advantages over conventional designs. Shell developed the technique and offered the data design approach to the ISO standards community. The approach is now used extensively within the <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<format wordnetid="106636806" confidence="0.8">
<link xlink:type="simple" xlink:href="../376/1240376.xml">
ISO STEP</link></format>
</information>
</message>
 world.</p>
<p>

The approach involves the structure of the data being held as data, rather than being defined by a specific
physical database design. Generic data modeling is a radical departure from traditional data modeling principles.</p>

</sec>
<sec>
<st>
Kalido MDM - Master Data Management</st>
<p>

Kalido MDM is a software application for harmonizing, storing and managing master data over time. It increases the
consistency and accuracy of corporate performance reporting by enabling business people to collaboratively manage
and control master data in a workflow-driven environment. It produces a master data warehouse from which “golden-copy”
master data can be distributed to enterprise applications and business people throughout the organization.</p>
<p>

Kalido MDM features:
<list>
<entry level="1" type="bullet">

 Manages any type of master data — from products and customers to brands, markets, territories and more.</entry>
<entry level="1" type="bullet">

 Facilitates data governance in a collaborative, workflow-driven environment</entry>
<entry level="1" type="bullet">

 Flexible master data modeling—featuring cataloging, segmenting, merging and mapping facilities</entry>
<entry level="1" type="bullet">

 Loads non-conforming master data — all master data is loaded even if it doesn’t conform to the master data model. Workflows can be used to ensure that the data — or the model — is revised accordingly</entry>
<entry level="1" type="bullet">

 Maintains master data history</entry>
</list>
</p>

</sec>
<sec>
<st>
Generic Modeling and the Data Warehouse</st>
<p>

The generic structure, compared to the traditional <link xlink:type="simple" xlink:href="../990/7990.xml">
data warehouse</link> design based on <link xlink:type="simple" xlink:href="../566/202566.xml">
third normal form</link> schemas and <link xlink:type="simple" xlink:href="../338/1464338.xml">
snowflake</link> or <link xlink:type="simple" xlink:href="../738/872738.xml">
star schema</link>s, has both advantages and disadvantages.</p>
<p>

<list>
<entry level="1" type="definition">

Advantages</entry>
<entry level="1" type="bullet">

 The generic structure can store <link xlink:type="simple" xlink:href="../084/8419084.xml">
time variant</link> business context data (i.e., changes to the business context data that happen over time such as a reorganization where departments are grouped differently), without requiring any database design changes. By contrast, traditional data models represent a snapshot of the requirements that were valid at the time the model was created. This makes it difficult to store historic data, which may require as much analysis as the current data. Often historic information is discarded due to the extra design required.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 The generic structure presents a highly standardized approach to loading and retrieval, enabling the automatic creation of loading and retrieval routines by Kalido DIW.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 The generic structure enables the loading of new classes of data through the simple addition of a few records of metadata.  Conventionally, changes in requirements cause changes to the design, requiring a database administrator to alter the table structure of the warehouse and to reorganize the data in the database. The costs and time involved can be considerable.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 The generic structure allows the capture of complex business rules that are difficult to capture using a conventional relational structure.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 The use of <link xlink:type="simple" xlink:href="../632/18933632.xml">
metadata</link> allows the structure of business context and transaction data to be easily understood by business users.</entry>
</list>
</p>
<p>

<list>
<entry level="1" type="definition">

Disadvantages</entry>
</list>

A pure implementation of generic modeling principles will bring with it some disadvantages such as:
<list>
<entry level="1" type="bullet">

 Conventional star schema can give better performance than physical implementations of the generic structure. Kalido DIW addresses these issues by combining elements of the generic structure with those of a star schema. </entry>
</list>
</p>
<p>

<list>
<entry level="1" type="bullet">

 The generic structure supports the business structure by holding multiple rows, linked by pointers, instead of the conventional columns in a table. This makes the data difficult to read and the SQL difficult to write, requiring a codegenerating front-end to read and load data. Kalido DIW has such a code-generating front-end.</entry>
<entry level="1" type="bullet">

 The star schema design is well understood by the data warehouse community, in particular by consultants and vendors of tools for <link xlink:type="simple" xlink:href="../239/189239.xml">
OLAP</link>. The generic structure is an unconventional design that has more in common with object orientation techniques than traditional data modeling principles. </entry>
</list>
</p>
<p>

Despite the generic structure being different from conventional designs, it is far easier to query once understood as it combines the business metadata dictionary with the business context data. Finding out where something is stored is far simpler than navigating through hundreds of obscure tables.</p>
<p>

<list>
<entry level="1" type="definition">

Implications</entry>
</list>

Given the above advantages and disadvantages, a mix of the generic design for business context data and the star schema for transaction data and retrieval would make an ideal situation. This has been the basis for the physical implementation of Kalido
DIW. The results of the Kalido implementation have proved that this innovative design can, and does, work. Kalido has UK patents on this design. The generic design of Kalido DIW is highly flexible but could have made processing transactions against the hierarchies of business context data it rather inefficient. To improve performance, the complex hierarchies
are automatically flattened out by Kalido DIW to create "mapping" tables.</p>
<p>

These mapping tables are complex and contain the full structure of the business context data hierarchies, including the date and time stamping of changes. They are regenerated when either the master data or its structure change so Kalido DIW fully manages both the generic data storage and its replication in mapping tables. This replication is done incrementally and can be delayed so that bulk changes can be made over a period with only a single generation of the mapping tables concerned. This ensures that optimum performance is delivered, in accessing both the generic data for exploration queries and the mapping tables for OLAP queries.</p>
<p>

The creation of mapping tables makes a Kalido warehouse appear like any other star schema. Conventional star schemas include the business context data, but they are keyed reference tables with all the attributes, classifications, etc. as columns. This causes duplication of data and difficulty in maintenance, but is fast to process. This is why the Kalido warehouse can equal the query
performance of a conventional design. The creation of the mapping tables can be a scheduled task or the user can initiate it. Batch tasks can also be used for business context data loading, transaction loading, summary generation, mapping table generation,
data mart building, or export of transaction or business context data. </p>
<p>

Data marts are generated by extracting information from the warehouse in a form that can be analyzed using tools such as Excel or
BusinessObjects to slice and dice, or drill-down through it. The data mart can be separated from the database, and small ones can take the form of Excel pivot tables, which can be taken away on a portable computer for offline analysis.</p>
<p>

In summary, one of the requirements of a data warehouse is that it should be capable of storing and managing almost any data from any source. </p>
<p>

In a Kalido warehouse:
<list>
<entry level="1" type="bullet">

 Information is held in a neutral format, i.e. not limited to a particular type of business data.</entry>
<entry level="1" type="bullet">

 There are neutral formats for transaction data and business context data.</entry>
</list>
</p>
<p>

Metadata is used for: 
<list>
<entry level="1" type="bullet">

 validation and loading of data into the warehouse</entry>
<entry level="1" type="bullet">

 structuring data in the warehouse</entry>
<entry level="1" type="bullet">

 defining data marts</entry>
</list>
</p>
<p>

The neutral formats allow you to select and view information as you want in data marts.</p>

</sec>
<sec>
<st>
 References </st>



</sec>
<sec>
<st>
External links</st>
<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.kalido.com/">
Kalido Corporate Website</weblink></entry>
</list>
</p>

</sec>
</bdy>
</company>
</article>
