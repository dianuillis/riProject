<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 17:44:18[mciao0825] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>Heuristic algorithm</title>
<id>846509</id>
<revision>
<id>242869862</id>
<timestamp>2008-10-04T00:56:44Z</timestamp>
<contributor>
<username>Jgottula</username>
<id>7954349</id>
</contributor>
</revision>
<categories>
<category>Heuristics</category>
<category>Algorithms</category>
</categories>
</header>
<bdy>

In <link xlink:type="simple" xlink:href="../323/5323.xml">
computer science</link>, a <b>heuristic algorithm</b>  or simply a <b><link xlink:type="simple" xlink:href="../452/63452.xml">
heuristic</link></b> is an <link xlink:type="simple" xlink:href="../775/775.xml">
algorithm</link> that ignores whether the solution to the problem can be proven to be correct, but which usually produces a good solution or solves a simpler problem that contains or intersects with the solution of the more complex problem. Heuristics are typically used when there is no known way to find an optimal solution, or when it is desirable to give up finding the optimal solution for an improvement in run time.<p>

Two fundamental goals in computer science are finding <link xlink:type="simple" xlink:href="../775/775.xml">
algorithm</link>s with <link xlink:type="simple" xlink:href="../285/82285.xml">
provably</link>  good <link xlink:type="simple" xlink:href="../434/460434.xml">
run time</link>s and with provably good or <link xlink:type="simple" xlink:href="../779/225779.xml">
optimal</link> <link xlink:type="simple" xlink:href="../729/28729.xml">
solution</link> quality. A <b>heuristic</b> is an algorithm that abandons one or both of these goals; for example, it usually finds pretty good solutions, but there is no proof the solutions could not get arbitrarily bad; or it usually runs reasonably quickly, but there is no argument that this will always be the case.</p>
<p>

For instance, say you are <condition wordnetid="113920835" confidence="0.8">
<state wordnetid="100024720" confidence="0.8">
<problem wordnetid="114410605" confidence="0.8">
<difficulty wordnetid="114408086" confidence="0.8">
<link xlink:type="simple" xlink:href="../974/16974.xml">
packing odd-shaped items</link></difficulty>
</problem>
</state>
</condition>
 into a box. Finding a perfect solution is a hard problem: there is essentially no way to do it without trying every possible way of packing them. What most people do, then, is "put the largest items in first, then fit the smaller items into the spaces left around them." This will not necessarily be perfect packing, but it will usually give a packing that is pretty good. It is an example of a heuristic solution.</p>
<p>

Many commercial anti-virus scanners use heuristic signatures to look for specific attributes and characteristics for detecting viruses and other forms of malware.</p>
<p>

<person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../964/699964.xml">
Judea Pearl</link></scientist>
</person>
 states that heuristic methods are based upon intelligent search strategies for computer problem solving, using several alternative approaches<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref>.</p>
<p>

Often, one can find specially crafted problem instances where the heuristic will in fact produce very bad results or run very slowly; however, such <link xlink:type="simple" xlink:href="../742/372742.xml">
pathological</link> instances might never occur in practice because of their special structure. Therefore, the use of heuristics is very common in real world implementations. For many practical problems, a heuristic algorithm may be the only way to get good solutions in a reasonable amount of time.
There is a class of general heuristic strategies called <link xlink:type="simple" xlink:href="../458/774458.xml">
metaheuristic</link>s, which often use randomized search for example. They can be applied to a wide range of problems, but good performance is never guaranteed.</p>
<p>

In <person wordnetid="100007846" confidence="0.9508927676800064">
<inventor wordnetid="110214637" confidence="0.9173553029164789">
<writer wordnetid="110794014" confidence="0.9173553029164789">
<link xlink:type="simple" xlink:href="../148/18598148.xml">
Arthur C. Clarke</link></writer>
</inventor>
</person>
's <it><series wordnetid="108457976" confidence="0.8">
<arrangement wordnetid="107938773" confidence="0.8">
<ordering wordnetid="108456993" confidence="0.8">
<group wordnetid="100031264" confidence="0.8">
<link xlink:type="simple" xlink:href="../116/405116.xml">
Space Odyssey</link></group>
</ordering>
</arrangement>
</series>
</it> saga, the <fictional_character wordnetid="109587565" confidence="0.8">
<imaginary_being wordnetid="109483738" confidence="0.8">
<intelligence wordnetid="105617606" confidence="0.8">
<link xlink:type="simple" xlink:href="../384/14384.xml">
HAL 9000</link></intelligence>
</imaginary_being>
</fictional_character>
 computer is named after "Heuristic Algorithmic".</p>

<sec>
<st>
See also</st>
<p>

<list>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../629/14220629.xml">
Heuristic function</link></entry>
<entry level="1" type="bullet">

<link>
Artificial Intelligence</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../136/10136.xml">
Expert System</link></entry>
<entry level="1" type="bullet">

<link xlink:type="simple" xlink:href="../de)/17927_(Z$I$P$_code).xml">
Logic Programming</link></entry>
</list>
</p>

</sec>
<sec>
<st>
References</st>
<p>

<reflist>
<entry id="1">
 <cite style="font-style:normal" class="book"><person wordnetid="100007846" confidence="0.9508927676800064">
<scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../964/699964.xml">
Pearl, Judea</link></scientist>
</person>
&#32;(April 1984). Heuristics.&#32;Addison-Wesley Pub. ISBN 0201055945.</cite>&nbsp;</entry>
</reflist>
</p>
<p>

<list>
<entry level="1" type="bullet">

 S. E. Goodman, S. T.  Hedetniemi, <it>Introduction to the Design and Analysis of Algorithms</it>, McGraw-Hill, 1977.</entry>
<entry level="1" type="bullet">

 <link>
Alfred V. Aho</link>, <link xlink:type="simple" xlink:href="../443/299443.xml">
John E. Hopcroft</link>, <link xlink:type="simple" xlink:href="../318/1702318.xml">
Jeffrey D. Ullman</link>, <it>Data Structures and Algorithms</it>, Addison-Wesley.</entry>
</list>
</p>



</sec>
</bdy>
</article>
