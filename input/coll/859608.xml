<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 17:44:39[mciao0827] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<system  confidence="0.8" wordnetid="104377057">
<artifact  confidence="0.8" wordnetid="100021939">
<instrumentality  confidence="0.8" wordnetid="103575240">
<header>
<title>IMP programming language</title>
<id>859608</id>
<revision>
<id>200550656</id>
<timestamp>2008-03-24T15:05:48Z</timestamp>
<contributor>
<username>CRGreathouse</username>
<id>1077900</id>
</contributor>
</revision>
<categories>
<category>Systems programming languages</category>
<category>Extensible syntax programming languages</category>
</categories>
</header>
<bdy>

<b>IMP</b> was a <link xlink:type="simple" xlink:href="../264/365264.xml">
systems</link> <link xlink:type="simple" xlink:href="../015/23015.xml">
programming language</link> developed by <link>
Ned Irons</link> in the late 1960s through early 1970s. Unlike most other systems programming languages, IMP was an 
Extensible syntax programming languages|extensible syntax programming language.<p>

Even though its designer refers to the language as "being based on <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../453/1453.xml">
ALGOL</link></programming_language>
", IMP excludes many <it>defining</it> features of that language, while supporting a very non-ALGOL-like one: syntax extensibility.</p>
<p>

A compiler for IMP existed as early as 1965 and was used for programming the <link xlink:type="simple" xlink:href="../661/58661.xml">
CDC 6600</link> time-sharing system, which was in use at the <institute wordnetid="108407330" confidence="0.8">
<think_tank wordnetid="108478702" confidence="0.8">
<association wordnetid="108049401" confidence="0.8">
<company wordnetid="108058098" confidence="0.8">
<institution wordnetid="108053576" confidence="0.8">
<link xlink:type="simple" xlink:href="../616/4206616.xml">
Institute for Defense Analyses</link></institution>
</company>
</association>
</think_tank>
</institute>
 since 1967. Although the compiler is slower than comparable ones for non-extensible languages, it has been used for practical production work.</p>
<p>

IMP compilers were developed for the <link xlink:type="simple" xlink:href="../661/58661.xml">
CDC-6600</link>, <link xlink:type="simple" xlink:href="../628/23628.xml">
PDP-10</link> and <link xlink:type="simple" xlink:href="../399/24399.xml">
PDP-11</link> computers. Important IMP versions were <b>IMP65</b>, <b>IMP70</b>, and <b>IMP72</b>.</p>
<p>

IMP is unrelated to the <link xlink:type="simple" xlink:href="../419/953419.xml">
Edinburgh IMP programming language</link>. </p>

<sec>
<st>
Extensible syntax in IMP72</st>
<p>

Being an 
Extensible syntax programming languages|extensible syntax programming language, IMP allows the programmer to extend its syntax, although no specific means are provided to add new datatypes or structures to it. To achieve its syntax-extensibility, IMP uses a powerful parse algorithm based on a syntax graph and several connectivity matrices. The programmer may add new <link>
BNF</link> productions to the graph.</p>
<p>

IMP72's syntax is extended by means of extended-BNF <it>syntax statements</it> included in a source program. The mechanism is so powerful, that it allowed the implementation of the language by itself, i.e., by an IMP72 source file consisting entirely of syntax statements, which was input to a trivial compiler which was initially able to translate the simplest case of the syntax statement. There is also a simple form of the syntax statement which looks like a <idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<link xlink:type="simple" xlink:href="../560/20560.xml">
macro</link></concept>
</idea>
 to the casual user.</p>
<p>

Basically, the syntax statement is an augmented BNF production with associated semantics added on the right:</p>
<p>

<indent level="2">

= syntax-part ::= semantic-part
</indent>

For example, to add the construct described by the following BNF:</p>
<p>

<indent level="2">

= INCREMENT 
</indent>

with the semantics that INCREMENT V should translate to V &amp;larr; V + 1, the programmer would only need to insert the following <it>IMP statement</it>:</p>
<p>

<indent level="2">

= INCREMENT  ::= "A&amp;larr;A+1"
</indent>

The semantic-part can also contain calls to <it>semantic routines</it>, as in the following syntax statement:
<indent level="2">

= ABS (  ) ::= DEWOP(214B,AREG1(1,13),A)
</indent>
The semantic part of this statement consists of a call on the semantic routine DEWOP. The arguments are the octal constant 214B, the semantic routine call AREG1(1,13), and A, which is the object on top of the stack at the moment this production is invoked. DEWOP is a semantic routine which respectively takes as its arguments a PDP-10 machine language <link xlink:type="simple" xlink:href="../470/230470.xml">
opcode</link>, a register object, and any other object, and produces an object whose value is the result of executing the designated machine instruction using as address field the object which is its last argument. In this specific example, the opcode 214B designates the Load Magnitude instruction, and thus the result of the above syntax statement will be to compile code to compute the absolute value of A.</p>

</sec>
<sec>
<st>
See also</st>
<p>

<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../419/953419.xml">
Edinburgh IMP programming language</link> (contrast)</entry>
</list>
</p>

</sec>
<sec>
<st>
References</st>
<p>

<list>
<entry level="1" type="bullet">

 <it>Experience with an Extensible Language</it>, Irons E.T., <b>CACM</b>, Vol. 13, No. 1, January 1970.</entry>
<entry level="1" type="bullet">

 <it>Syntax Extension and the IMP72 Programming Language</it>, Walter Bilofsky, Yale University, <b>SIGPLAN Notices</b>, May 1974.</entry>
</list>
</p>

</sec>
</bdy>
</instrumentality>
</artifact>
</system>
</article>
