<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 23:35:26[mciao0827] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>Naïve algorithm</title>
<id>8688126</id>
<revision>
<id>232477346</id>
<timestamp>2008-08-17T11:42:21Z</timestamp>
<contributor>
<username>Cydebot</username>
<id>1215485</id>
</contributor>
</revision>
<categories>
<category>Algorithms</category>
</categories>
</header>
<bdy>

A <link>
naïve</link> <link xlink:type="simple" xlink:href="../775/775.xml">
algorithm</link> is typically a very simple solution to a problem, which represents the intuitive approach taken by one unfamiliar with the problem domain. It is meant to describe a suboptimal algorithm compared to a "clever" (but less simple) algorithm. Naïve algorithms usually consume larger amounts of resources (time, space, memory accesses, ...), but are simple to devise and implement.<p>

An example of a naïve algorithm is <link xlink:type="simple" xlink:href="../255/4255.xml">
bubble sort</link>, which is only a few lines long and easy to understand, but has a <b><link xlink:type="simple" xlink:href="../578/44578.xml">
O</link></b>(<it>n2</it>) time complexity. A more "clever" algorithm is <link xlink:type="simple" xlink:href="../249/3268249.xml">
quicksort</link>, which, although being considerably more complicated than bubble sort, has a <b>O</b>(<it>n log n</it>) average complexity. For instance, sorting a list of 100 items with bubble sort requires 10,000 iterations, while sorting the same list with quicksort requires approximately 1000 iterations, making quicksort a much faster algorithm than bubble sort.</p>
<p>

As demonstrated above, naïve algorithms are mostly used for <link xlink:type="simple" xlink:href="../718/72718.xml">
prototyping</link> purposes, as they are often not acceptable in production-level software products.</p>
<p>

Another sense of the term implies an algorithm which may have certain bugs, or fail to account for corner cases; for instance, the <link>
naïve</link> implementations of various operations on <link xlink:type="simple" xlink:href="../167/18167.xml">
linked lists</link> and <link xlink:type="simple" xlink:href="../321/4321.xml">
binary trees</link> either leak memory or corrupt data based on incorrect <link xlink:type="simple" xlink:href="../018/459018.xml">
pointer</link> arithmetic.</p>





</bdy>
</article>
