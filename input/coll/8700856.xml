<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 23:31:41[mciao0825] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<event  confidence="0.8" wordnetid="100029378">
<rule  confidence="0.8" wordnetid="105846932">
<act  confidence="0.8" wordnetid="100030358">
<psychological_feature  confidence="0.8" wordnetid="100023100">
<procedure  confidence="0.8" wordnetid="101023820">
<activity  confidence="0.8" wordnetid="100407535">
<algorithm  confidence="0.8" wordnetid="105847438">
<header>
<title>Sweep line algorithm</title>
<id>8700856</id>
<revision>
<id>209239573</id>
<timestamp>2008-04-30T15:05:39Z</timestamp>
<contributor>
<username>Jubeh</username>
<id>6868678</id>
</contributor>
</revision>
<categories>
<category>Geometric algorithms</category>
</categories>
</header>
<bdy>

In <link xlink:type="simple" xlink:href="../927/176927.xml">
computational geometry</link>, a <b>sweep line algorithm</b> or <b>plane sweep algorithm</b> is a type of algorithm that uses a conceptual <it>sweep line</it> or <it>sweep surface</it> to solve various problems in Euclidean space. It is one of the key techniques in computational geometry.<p>

The idea behind algorithms of this type is to imagine that a line (often a vertical line) is swept or moved across the plane, stopping at some points. Geometric operations are restricted to geometric objects that either intersect or are in the immediate vicinity of the sweep line whenever it stops, and the complete solution is available once the line has passed over all objects. </p>
<p>

This approach may be traced to <link xlink:type="simple" xlink:href="../029/47029.xml">
scanline algorithm</link>s of rendering in <link xlink:type="simple" xlink:href="../210/18567210.xml">
computer graphics</link>, followed by exploiting this approach in early algorithms of <link xlink:type="simple" xlink:href="../949/598949.xml">
integrated circuit layout</link> design, in which geometric description of an IC was processed in parallel strips, because the entire description could not fit into memory. </p>
<p>

Application of this approach led to a breakthrough in the <link xlink:type="simple" xlink:href="../543/7543.xml">
computational complexity</link> of geometric algorithms when Shamos and Hoey presented algorithms for <link xlink:type="simple" xlink:href="../098/3194098.xml">
line segment intersection</link> in the plane, and in particular, they described how a combination of the scanline approach with efficient data structures (<link xlink:type="simple" xlink:href="../310/378310.xml">
self-balancing binary search tree</link>s) makes it possible to detect whether there are intersections among N segments in the plane in time complexity of <link xlink:type="simple" xlink:href="../578/44578.xml">
O</link>(N log N) <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref> and it also makes it possible to report all K intersections among any N segments in the plane in time complexity of <link xlink:type="simple" xlink:href="../578/44578.xml">
O</link>((N + K) log N) and space complexity of <link xlink:type="simple" xlink:href="../578/44578.xml">
O</link>(N) <ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%222%22])">2</ref></p>
<p>

Since then, this approach was used to design efficient algorithms for a number of problems, such as construction of the <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../864/8864.xml">
Delaunay triangulation</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
 or <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../410/9871410.xml">
Boolean operations on polygons</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
.   </p>
<p>

The approach may be generalised to higher dimensions.</p>

<sec>
<st>
References</st>
<p>

<reflist>
<entry id="1">
<link>
Michael Shamos</link>, Dan Hoey, "Geometric Intersection Problems", Proc. 17th Annu. IEEE Symp. Found. Computer Sci., pp.208-215 (1976)</entry>
<entry id="2">
<weblink xlink:type="simple" xlink:href="http://www.cs.tufts.edu/comp/163/notes05/seg_intersection_handout.pdf">
Line Segment Intersection Using a Sweep Line Algorithm</weblink>, Diane Souvaine, (2008)</entry>
</reflist>
</p>

</sec>
<sec>
<st>
 See also </st>
<p>

<list>
<entry level="1" type="bullet">

 <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../810/16329810.xml">
Bentley-Ottmann algorithm</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</entry>
<entry level="1" type="bullet">

 <link>
Shamos-Hoey algorithm</link></entry>
</list>
</p>


</sec>
</bdy>
</algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</article>
