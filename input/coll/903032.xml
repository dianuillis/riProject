<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 17:49:37[mciao0826] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<event  confidence="0.8" wordnetid="100029378">
<rule  confidence="0.8" wordnetid="105846932">
<act  confidence="0.8" wordnetid="100030358">
<psychological_feature  confidence="0.8" wordnetid="100023100">
<procedure  confidence="0.8" wordnetid="101023820">
<activity  confidence="0.8" wordnetid="100407535">
<algorithm  confidence="0.8" wordnetid="105847438">
<header>
<title>Modular exponentiation</title>
<id>903032</id>
<revision>
<id>237646737</id>
<timestamp>2008-09-11T04:24:13Z</timestamp>
<contributor>
<username>DepartedUser3</username>
<id>1116203</id>
</contributor>
</revision>
<categories>
<category>Modular arithmetic</category>
<category>Number theoretic algorithms</category>
<category>Cryptographic algorithms</category>
</categories>
</header>
<bdy>

<b>Modular exponentiation</b> is a type of <link xlink:type="simple" xlink:href="../491/99491.xml">
exponentiation</link> performed over a <link xlink:type="simple" xlink:href="../087/20087.xml">
modulus</link>. It is particularly useful in <link xlink:type="simple" xlink:href="../323/5323.xml">
computer science</link>, especially in the field of <link xlink:type="simple" xlink:href="../432/18934432.xml">
cryptography</link>.<p>

Doing a "modular exponentiation" means calculating the remainder when dividing by a <link xlink:type="simple" xlink:href="../474/21474.xml">
positive integer</link> m (called the modulus) a positive integer b (called the base) raised to the e-th power (e is called the exponent). In other words, problems take the form where given base <it>b</it>, exponent <it>e</it>, and modulus <it>m</it>, one wishes to calculate <it>c</it> such that:
<indent level="1">

 <math>c \equiv b^e \pmod{m}</math>
</indent>
For example, given <it>b</it> = 5, <it>e</it> = 3, and <it>m</it> = 13, the solution <it>c</it> is the remainder of dividing <math>5^3</math> by 13, namely the rest of the division 125 / 13, which works out to be 8.</p>
<p>

If <it>b</it>, <it>e</it>, and <it>m</it> are non-negative and <it>b</it>  <it>m</it>, then a unique solution <it>c</it> exists and has the property 0 ≤ <it>c</it> &amp;lt; <it>m</it>.  </p>
<p>

Modular exponentiation can be performed with a negative exponent <it>e</it> by finding the <link xlink:type="simple" xlink:href="../940/229940.xml">
multiplicative inverse</link> <it>d</it> of <it>b</it> modulo <it>m</it> using the <link xlink:type="simple" xlink:href="../438/99438.xml">
extended Euclidean algorithm</link>. That is:
<indent level="1">

 <math>c \equiv b^{e} \equiv d^{\left|e\right|} \pmod{m}</math> where <it>e</it>  0 and <math>b \cdot d \equiv 1 \pmod{m}</math>
</indent>

Modular exponentiation problems similar to the one described above are considered easy to do, even if the numbers involved are enormous.  On the other hand, computing the <link xlink:type="simple" xlink:href="../334/181334.xml">
discrete logarithm</link> (finding <it>e</it> given <it>b</it>, <it>c</it>, and <it>m</it>) is believed to be difficult. This <link xlink:type="simple" xlink:href="../890/363890.xml">
one way function</link> behavior makes modular exponentiation a good candidate for use in cryptographic algorithms.</p>

<sec>
<st>
 Straightforward method </st>
<p>

The most straightforward method of calculating a modular exponent is to calculate <it>be</it> directly, then to take this number modulo <it>m</it>.  Consider trying to compute <it>c</it>, given <it>b</it> = 4, <it>e</it> = 13, and <it>m</it> = 497:
<indent level="1">

 <math>c \equiv 4^{13} \pmod{497}</math>
</indent>

One could use a calculator to compute 413; this comes out to 67,108,864.  Taking this value modulo 497, the answer <it>c</it> is determined to be 445.</p>
<p>

Note that <it>b</it> is only one digit in length and that <it>e</it> is only two digits in length, but the value <it>be</it> is 10 digits in length.</p>
<p>

In strong cryptography, <it>b</it> is often at least 256 binary digits (77 decimal digits).  Consider <it>b</it> = 5 &amp;times; 1076 and <it>e</it> = 17, both of which are perfectly reasonable values.  In this example, <it>b</it> is 77 digits in length and <it>e</it> is 2 digits in length, but the value <it>be</it> is 1309 decimal digits in length.  Such calculations are possible on modern computers, but the sheer magnitude of such numbers causes the speed of calculations to slow considerably.  As <it>b</it> and <it>e</it> increase even further to provide better security, the value <it>be</it> becomes unwieldy.</p>
<p>

The time required to perform the exponentiation depends on the operating environment and the processor.  The method described above requires <link xlink:type="simple" xlink:href="../578/44578.xml">
O</link>(<it>e</it>) multiplications to complete.</p>

</sec>
<sec>
<st>
 Memory-efficient method </st>
<p>

A second method to compute modular exponentiation requires more operations than the first method.  Because the required memory footprint is substantially less, however, operations take less time than before.  The end result is that the algorithm is faster.</p>
<p>

This algorithm makes use of the fact that, given two integers <it>a</it> and <it>b</it>, the following two equations are equivalent:
<indent level="1">

 <math>c \equiv (a \cdot b) \pmod{m}</math>
</indent>
: <math>c \equiv ((a\ (\mbox{mod}\ m)) \cdot (b\ (\mbox{mod}\ m))) \pmod{m}</math></p>
<p>

The algorithm is as follows:
<list>
<entry level="1" type="number">

 Set <it>c</it> = 1, <it>e</it>' = 0.</entry>
<entry level="1" type="number">

 Increase <it>e</it>' by 1.</entry>
<entry level="1" type="number">

 Set <math>c \equiv (b \cdot c) \pmod{m}</math>.</entry>
<entry level="1" type="number">

 If <it>e</it>' &amp;lt; <it>e</it>, goto step 2.  Else, <it>c</it> contains the correct solution to <math>c \equiv b^e \pmod{m}</math>.</entry>
</list>
</p>
<p>

Note that in every pass through step 3, the equation <math>c \equiv b^{e'} \pmod{m}</math> holds true.  When step 3 has been executed <it>e</it> times, then, <it>c</it> contains the answer that was sought. In summary, this algorithm basically counts up e' by ones until e' reaches e, doing a multiply by b and the modulo operation each time it adds one (to ensure the results stay small).</p>
<p>

The example <it>b</it> = 4, <it>e</it> = 13, and <it>m</it> = 497 is presented again.  The algorithm passes through step 3 thirteen times:
<list>
<entry level="1" type="bullet">

 <it>e</it>' = 1.  <it>c</it> = (1 * 4) mod 497 = 4 mod 497 = <b>4</b>.</entry>
<entry level="1" type="bullet">

 <it>e</it>' = 2.  <it>c</it> = (4 * 4) mod 497 = 16 mod 497 = <b>16</b>.</entry>
<entry level="1" type="bullet">

 <it>e</it>' = 3.  <it>c</it> = (16 * 4) mod 497 = 64 mod 497 = <b>64</b>.</entry>
<entry level="1" type="bullet">

 <it>e</it>' = 4.  <it>c</it> = (64 * 4) mod 497 = 256 mod 497 = <b>256</b>.</entry>
<entry level="1" type="bullet">

 <it>e</it>' = 5.  <it>c</it> = (256 * 4) mod 497 = 1024 mod 497 = <b>30</b>.</entry>
<entry level="1" type="bullet">

 <it>e</it>' = 6.  <it>c</it> = (30 * 4) mod 497 = 120 mod 497 = <b>120</b>.</entry>
<entry level="1" type="bullet">

 <it>e</it>' = 7.  <it>c</it> = (120 * 4) mod 497 = 480 mod 497 = <b>480</b>.</entry>
<entry level="1" type="bullet">

 <it>e</it>' = 8.  <it>c</it> = (480 * 4) mod 497 = 1920 mod 497 = <b>429</b>.</entry>
<entry level="1" type="bullet">

 <it>e</it>' = 9.  <it>c</it> = (429 * 4) mod 497 = 1716 mod 497 = <b>225</b>.</entry>
<entry level="1" type="bullet">

 <it>e</it>' = 10.  <it>c</it> = (225 * 4) mod 497 = 900 mod 497 = <b>403</b>.</entry>
<entry level="1" type="bullet">

 <it>e</it>' = 11.  <it>c</it> = (403 * 4) mod 497 = 1612 mod 497 = <b>121</b>.</entry>
<entry level="1" type="bullet">

 <it>e</it>' = 12.  <it>c</it> = (121 * 4) mod 497 = 484 mod 497 = <b>484</b>.</entry>
<entry level="1" type="bullet">

 <it>e</it>' = 13.  <it>c</it> = (484 * 4) mod 497 = 1936 mod 497 = <b>445</b>.</entry>
</list>
</p>
<p>

The final answer for <it>c</it> is therefore 445, as in the first method.</p>
<p>

Like the first method, this requires O(<it>e</it>) multiplications to complete.  However, since the numbers used in these calculations are much smaller than the numbers used in the first algorithm's calculations, the computation time decreases by a factor of at least O(<it>e</it>)  in this method.</p>

</sec>
<sec>
<st>
 An efficient method: the right-to-left binary algorithm </st>
<p>

A third method drastically reduces both the number of operations and the memory footprint required to perform modular exponentiation.  It is a combination of the previous method and a more general principle called <link xlink:type="simple" xlink:href="../237/10237.xml">
exponentiation by squaring</link> (also known as <it>binary exponentiation</it>).</p>
<p>

First, it is required that the exponent <it>e</it> be <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../686/238686.xml#xpointer(//*[./st=%22Decimal%22])">
converted to binary notation</link></instrumentality>
</artifact>
</system>
.  That is, <it>e</it> can be written as:
<indent level="1">

 <math>e = \sum_{i=0}^{n-1} a_i 2^i</math>
</indent>

In such notation, the <it>length</it> of <it>e</it> is <it>n</it> bits.  <it>ai</it> can take the value 0 or 1 for any <it>i</it> such that 0 ≤ <it>i</it> &amp;lt; <it>n</it> - 1.  By definition, <it>an</it> - 1 = 1.</p>
<p>

The value <it>be</it> can then be written as:
<indent level="1">

 <math>b^e = b^{\left( \sum_{i=0}^{n-1} a_i 2^i \right)} = \prod_{i=0}^{n-1} \left( b^{2^i} \right) ^ {a_i}</math>
</indent>

The solution <it>c</it> is therefore:
<indent level="1">

 <math>c \equiv \prod_{i=0}^{n-1} \left( b^{2^i} \right) ^ {a_i}\ (\mbox{mod}\ m)</math>
</indent>

The following example is in <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../196/2356196.xml">
C#</link></programming_language>
 or <programming_language wordnetid="106898352" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../038/72038.xml">
C++</link></programming_language>
 languages. Let the class <it><link xlink:type="simple" xlink:href="../892/600892.xml">
Bignum</link></it> represent an arbitrarily large positive integer.  The inputs <it>base</it>, <it>exponent</it>, and <it>modulus</it> correspond to <it>b</it>, <it>e</it>, and <it>m</it> in the equations given above.</p>

<p>

Bignum modpow(Bignum base, Bignum exponent, Bignum modulus) {</p>
<p>

Bignum result = 1;</p>
<p>

while (exponent &amp;gt; 0) {
if ((exponent &amp; 1) == 1) {
// multiply in this bit's contribution while using modulus to keep result small
result = (result * base) % modulus;
}
// move to the next bit of the exponent, square (and mod) the base accordingly
exponent &amp;gt;&amp;gt;= 1;
base = (base * base) % modulus;
}</p>
<p>

return result;
}</p>

<p>

This code, based on that on page 244 of <person wordnetid="100007846" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../732/36732.xml">
Bruce Schneier</link></person>
's <it>Applied Cryptography</it>, 2e, ISBN 0-471-11709-9, uses a single while loop to perform all work necessary to compute the modular exponentiation.</p>
<p>

Note that upon entering the loop for the first time, the code variable <it>b</it> is equivalent to <math>b\ </math>.  However, the repeated squaring in the third line of code ensures that at the completion of every loop, the variable <it>b</it> is equivalent to <math>b^{2^i}\ (\mbox{mod}\ m)</math>, where <it>i</it> is the number of times the loop has been iterated.  (This makes <it>i</it> the next working bit of the binary exponent <it>exp</it>, where the least-significant bit is <it>exp</it>0).</p>
<p>

The first line of code simply carries out the multiplication in <math>\prod_{i=0}^{n-1} \left( b^{2^i} \right) ^ {a_i}\ (\mbox{mod}\ m)</math>.  If <it>ai</it> is zero, no code executes since this effectively multiplies the running total by one.  If <it>ai</it> instead is one, the variable <it>b</it> (containing the value <math>b^{2^i}\ (\mbox{mod}\ m)</math> of the original base) is simply multiplied in.</p>
<p>

Finally, the example <it>b</it> = 4, <it>e</it> = 13, and <it>m</it> = 497 is put through this test.  Note that <it>e</it> is 1101 in binary notation.  Because <it>e</it> is four binary digits in length, the loop executes only four times:
<list>
<entry level="1" type="bullet">

 Upon entering the loop for the first time, variables <it>b</it> = 4, <it>e</it> = 1101 (binary), and <it>result</it> = 1.  Because the right-most bit of <it>e</it> is 1, <it>result</it> is changed to be (1 * 4) % 497, or <b>4</b>.  <it>exp</it> is right-shifted to become 110 (binary), and <it>b</it> is squared to be (4 * 4) % 497, or 16.</entry>
<entry level="1" type="bullet">

 The second time through the loop, the right-most bit of <it>e</it> is 0, causing <it>result</it> to retain its present value of <b>4</b>.  <it>e</it> is right-shifted to become 11 (binary), and <it>b</it> is squared to be (16 * 16) % 497, or 256.</entry>
<entry level="1" type="bullet">

 The third time through the loop, the right-most bit of <it>e</it> is 1.  <it>result</it> is changed to be (4 * 256) % 497, or <b>30</b>.  <it>e</it> is right-shifted to become 1, and <it>b</it> is squared to be (256 * 256) % 497, or 429.</entry>
<entry level="1" type="bullet">

 The fourth time through the loop, the right-most bit of <it>e</it> is 1.  <it>result</it> is changed to be (30 * 429) % 497, or <b>445</b>.  <it>e</it> is right-shifted to become 0, and <it>b</it> is squared to be (429 * 429) % 497, or 151.</entry>
</list>
</p>
<p>

The loop then terminates since <it>e</it> is zero, and the result <b>445</b> is returned.  This agrees with the previous two algorithms.</p>
<p>

The running time of this algorithm is O(log <it>e</it>).  When working with large values of <it>e</it>, this offers a substantial speed benefit over both of the previous two algorithms.</p>

</sec>
<sec>
<st>
See Also</st>

<p>

<event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../378/904378.xml">
Montgomery reduction</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
, for calculating the modulo when the numbers involved are very large.</p>


</sec>
<sec>
<st>
External links</st>
<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.math.umn.edu/~garrett/crypto/a01/FastPow.html">
Fast Modular Exponentiation Java Applet</weblink> - <university wordnetid="108286163" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../813/416813.xml">
University of Minnesota</link></university>
 Math Department</entry>
</list>
</p>


<p>

<table style=";" class="navbox" cellspacing="0">
<row>
<col style="padding:2px;">
<table style="width:100%;background:transparent;color:inherit;;" class="nowraplinks collapsible uncollapsed " cellspacing="0">
<row>
<header colspan="2" style=";" class="navbox-title">
<link xlink:type="simple" xlink:href="../527/21527.xml">
Number-theoretic</link> <link xlink:type="simple" xlink:href="../775/775.xml">
algorithm</link>s</header>
</row>
<row style="height:2px;">

</row>
<row>
<col style=";;" class="navbox-group">
<link xlink:type="simple" xlink:href="../751/183751.xml">
Primality test</link>s</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<b><process wordnetid="105701363" confidence="0.8">
<institute wordnetid="108407330" confidence="0.8">
<inquiry wordnetid="105797597" confidence="0.8">
<thinking wordnetid="105770926" confidence="0.8">
<association wordnetid="108049401" confidence="0.8">
<problem_solving wordnetid="105796750" confidence="0.8">
<experiment wordnetid="105798043" confidence="0.8">
<trial wordnetid="105799212" confidence="0.8">
<higher_cognitive_process wordnetid="105770664" confidence="0.8">
<link xlink:type="simple" xlink:href="../847/405847.xml">
AKS</link></higher_cognitive_process>
</trial>
</experiment>
</problem_solving>
</association>
</thinking>
</inquiry>
</institute>
</process>
</b> · <b><link>
APR</link></b> · <process wordnetid="105701363" confidence="0.8">
<inquiry wordnetid="105797597" confidence="0.8">
<thinking wordnetid="105770926" confidence="0.8">
<problem_solving wordnetid="105796750" confidence="0.8">
<experiment wordnetid="105798043" confidence="0.8">
<trial wordnetid="105799212" confidence="0.8">
<higher_cognitive_process wordnetid="105770664" confidence="0.8">
<link xlink:type="simple" xlink:href="../890/3609890.xml">
Ballie-PSW</link></higher_cognitive_process>
</trial>
</experiment>
</problem_solving>
</thinking>
</inquiry>
</process>
 · <b><process wordnetid="105701363" confidence="0.8">
<curve wordnetid="113867641" confidence="0.8">
<inquiry wordnetid="105797597" confidence="0.8">
<thinking wordnetid="105770926" confidence="0.8">
<problem_solving wordnetid="105796750" confidence="0.8">
<experiment wordnetid="105798043" confidence="0.8">
<line wordnetid="113863771" confidence="0.8">
<shape wordnetid="100027807" confidence="0.8">
<trial wordnetid="105799212" confidence="0.8">
<higher_cognitive_process wordnetid="105770664" confidence="0.8">
<link xlink:type="simple" xlink:href="../015/4049015.xml">
ECPP</link></higher_cognitive_process>
</trial>
</shape>
</line>
</experiment>
</problem_solving>
</thinking>
</inquiry>
</curve>
</process>
</b> · <process wordnetid="105701363" confidence="0.8">
<inquiry wordnetid="105797597" confidence="0.8">
<thinking wordnetid="105770926" confidence="0.8">
<problem_solving wordnetid="105796750" confidence="0.8">
<experiment wordnetid="105798043" confidence="0.8">
<trial wordnetid="105799212" confidence="0.8">
<higher_cognitive_process wordnetid="105770664" confidence="0.8">
<link xlink:type="simple" xlink:href="../755/157755.xml">
Fermat</link></higher_cognitive_process>
</trial>
</experiment>
</problem_solving>
</thinking>
</inquiry>
</process>
 · <b><link>
Lucas–Lehmer</link></b> · <b><it><link>
Lucas–Lehmer (Mersenne numbers)</link></it></b> · <b><it><process wordnetid="105701363" confidence="0.8">
<inquiry wordnetid="105797597" confidence="0.8">
<thinking wordnetid="105770926" confidence="0.8">
<problem_solving wordnetid="105796750" confidence="0.8">
<experiment wordnetid="105798043" confidence="0.8">
<trial wordnetid="105799212" confidence="0.8">
<higher_cognitive_process wordnetid="105770664" confidence="0.8">
<link xlink:type="simple" xlink:href="../861/15371861.xml">
Lucas–Lehmer–Riesel</link></higher_cognitive_process>
</trial>
</experiment>
</problem_solving>
</thinking>
</inquiry>
</process>
</it></b> · <b><it><statement wordnetid="106722453" confidence="0.8">
<process wordnetid="105701363" confidence="0.8">
<message wordnetid="106598915" confidence="0.8">
<inquiry wordnetid="105797597" confidence="0.8">
<thinking wordnetid="105770926" confidence="0.8">
<theorem wordnetid="106752293" confidence="0.8">
<problem_solving wordnetid="105796750" confidence="0.8">
<experiment wordnetid="105798043" confidence="0.8">
<proposition wordnetid="106750804" confidence="0.8">
<trial wordnetid="105799212" confidence="0.8">
<higher_cognitive_process wordnetid="105770664" confidence="0.8">
<link xlink:type="simple" xlink:href="../985/3225985.xml">
Proth's theorem</link></higher_cognitive_process>
</trial>
</proposition>
</experiment>
</problem_solving>
</theorem>
</thinking>
</inquiry>
</message>
</process>
</statement>
</it></b> · <b><it><link>
Pépin's</link></it></b> · <link>
Solovay–Strassen</link> · <link>
Miller–Rabin</link> · <b><problem_solving wordnetid="105796750" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<process wordnetid="105701363" confidence="0.8">
<inquiry wordnetid="105797597" confidence="0.8">
<thinking wordnetid="105770926" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<experiment wordnetid="105798043" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<trial wordnetid="105799212" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<higher_cognitive_process wordnetid="105770664" confidence="0.8">
<link xlink:type="simple" xlink:href="../660/557660.xml">
Trial division</link></higher_cognitive_process>
</procedure>
</activity>
</psychological_feature>
</trial>
</act>
</rule>
</experiment>
</event>
</thinking>
</inquiry>
</process>
</algorithm>
</problem_solving>
</b></col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
Sieving algorithms</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-even">
<process wordnetid="105701363" confidence="0.8">
<inquiry wordnetid="105797597" confidence="0.8">
<thinking wordnetid="105770926" confidence="0.8">
<problem_solving wordnetid="105796750" confidence="0.8">
<experiment wordnetid="105798043" confidence="0.8">
<trial wordnetid="105799212" confidence="0.8">
<higher_cognitive_process wordnetid="105770664" confidence="0.8">
<link xlink:type="simple" xlink:href="../920/2150920.xml">
Sieve of Atkin</link></higher_cognitive_process>
</trial>
</experiment>
</problem_solving>
</thinking>
</inquiry>
</process>
 · <process wordnetid="105701363" confidence="0.8">
<inquiry wordnetid="105797597" confidence="0.8">
<thinking wordnetid="105770926" confidence="0.8">
<problem_solving wordnetid="105796750" confidence="0.8">
<experiment wordnetid="105798043" confidence="0.8">
<trial wordnetid="105799212" confidence="0.8">
<higher_cognitive_process wordnetid="105770664" confidence="0.8">
<link xlink:type="simple" xlink:href="../415/73415.xml">
Sieve of Eratosthenes</link></higher_cognitive_process>
</trial>
</experiment>
</problem_solving>
</thinking>
</inquiry>
</process>
 · <process wordnetid="105701363" confidence="0.8">
<inquiry wordnetid="105797597" confidence="0.8">
<thinking wordnetid="105770926" confidence="0.8">
<problem_solving wordnetid="105796750" confidence="0.8">
<experiment wordnetid="105798043" confidence="0.8">
<trial wordnetid="105799212" confidence="0.8">
<higher_cognitive_process wordnetid="105770664" confidence="0.8">
<link xlink:type="simple" xlink:href="../330/14517330.xml">
Sieve of Sundaram</link></higher_cognitive_process>
</trial>
</experiment>
</problem_solving>
</thinking>
</inquiry>
</process>
 · <process wordnetid="105701363" confidence="0.8">
<inquiry wordnetid="105797597" confidence="0.8">
<thinking wordnetid="105770926" confidence="0.8">
<problem_solving wordnetid="105796750" confidence="0.8">
<experiment wordnetid="105798043" confidence="0.8">
<trial wordnetid="105799212" confidence="0.8">
<higher_cognitive_process wordnetid="105770664" confidence="0.8">
<link xlink:type="simple" xlink:href="../216/4621216.xml">
Wheel factorization</link></higher_cognitive_process>
</trial>
</experiment>
</problem_solving>
</thinking>
</inquiry>
</process>
</col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
<statement wordnetid="106722453" confidence="0.8">
<message wordnetid="106598915" confidence="0.8">
<premise wordnetid="106753800" confidence="0.8">
<postulate wordnetid="106753299" confidence="0.8">
<proposition wordnetid="106750804" confidence="0.8">
<link xlink:type="simple" xlink:href="../491/15491.xml">
Integer factorization</link></proposition>
</postulate>
</premise>
</message>
</statement>
algorithms</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<link xlink:type="simple" xlink:href="../392/1335392.xml">
CFRAC</link> · <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../877/1033877.xml">
Dixon's</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
 · <region wordnetid="108630985" confidence="0.8">
<field wordnetid="108569998" confidence="0.8">
<location wordnetid="100027167" confidence="0.8">
<tract wordnetid="108673395" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<geographical_area wordnetid="108574314" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../212/154212.xml">
ECM</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</geographical_area>
</rule>
</event>
</tract>
</location>
</field>
</region>
 · <it><event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../069/15822069.xml">
Euler's</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</it> · <it><event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../668/580668.xml">
Pollard's rho</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</it> · <it><event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../753/578753.xml">
P − 1</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</it> · <it><event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../573/1916573.xml">
P + 1</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</it> · <link xlink:type="simple" xlink:href="../340/582340.xml">
QS</link> · <link xlink:type="simple" xlink:href="../734/152734.xml">
GNFS</link> · <it><link xlink:type="simple" xlink:href="../132/589132.xml">
SNFS</link></it> · <link xlink:type="simple" xlink:href="../510/2608510.xml">
rational sieve</link> · <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../433/2132433.xml">
Fermat's</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
 · <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../328/3387328.xml">
Shanks' square forms</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
 · <problem_solving wordnetid="105796750" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<process wordnetid="105701363" confidence="0.8">
<inquiry wordnetid="105797597" confidence="0.8">
<thinking wordnetid="105770926" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<experiment wordnetid="105798043" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<trial wordnetid="105799212" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<higher_cognitive_process wordnetid="105770664" confidence="0.8">
<link xlink:type="simple" xlink:href="../660/557660.xml">
Trial division</link></higher_cognitive_process>
</procedure>
</activity>
</psychological_feature>
</trial>
</act>
</rule>
</experiment>
</event>
</thinking>
</inquiry>
</process>
</algorithm>
</problem_solving>
 · <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../674/42674.xml">
Shor's algorithm</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</col>
</row>
<row style="height:2px">

</row>
<row>
<col style=";;" class="navbox-group">
Other algorithms</col>
<col style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-even">
<event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../814/3975814.xml">
Ancient Egyptian multiplication</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
 · <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../197/4039197.xml">
Aryabhata</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
 · <link xlink:type="simple" xlink:href="../410/985410.xml">
Binary GCD</link> · <link xlink:type="simple" xlink:href="../658/4050658.xml">
Chakravala</link> · <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../377/10377.xml">
Euclidean</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
 · <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../438/99438.xml">
Extended Euclidean</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
 · <link xlink:type="simple" xlink:href="../054/13644054.xml">
integer relation algorithm</link> · <link xlink:type="simple" xlink:href="../655/981655.xml">
integer square root</link> · <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../032/903032.xml">
Modular exponentiation</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
 · <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../375/3667375.xml">
Shanks-Tonelli</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</col>
</row>
<row style="height:2px;">

</row>
<row>
<col colspan="2" style=";" class="navbox-abovebelow">
<it>Italics</it> indicate that algorithm is for numbers of special forms; <b>bold</b> indicates <link xlink:type="simple" xlink:href="../951/665951.xml">
deterministic algorithm</link>for primality tests.</col>
</row>
</table>
</col>
</row>
</table>
</p>



</sec>
</bdy>
</algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</article>
