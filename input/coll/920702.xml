<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 17:51:16[mciao0825] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<format  confidence="0.9511911446218017" wordnetid="106636806">
<header>
<title>Binary file</title>
<id>920702</id>
<revision>
<id>244469597</id>
<timestamp>2008-10-10T23:23:25Z</timestamp>
<contributor>
<username>Antonio Lopez</username>
<id>4417781</id>
</contributor>
</revision>
<categories>
<category>Computer file formats</category>
</categories>
</header>
<bdy>

"binaries" redirects here. For double stars, see <link xlink:type="simple" xlink:href="../713/52713.xml">
binary star</link>.
<image width="290px" src="Wikipedia_favicon_hexdump.svg" type="thumb">
<caption>

A <link xlink:type="simple" xlink:href="../281/1548281.xml">
hex dump</link> of the 318 <link xlink:type="simple" xlink:href="../365/3365.xml">
byte</link> Wikipedia <link xlink:type="simple" xlink:href="../310/398310.xml">
favicon</link>, or <image width="150px" src="Wikipedia-favicon.png">
<caption>

Wikipedia-favicon.png
</caption>
</image>
. The first column numerates the line's starting address, while the * indicates repetition.
</caption>
</image>
<p>

A <b>binary file</b> is a <link xlink:type="simple" xlink:href="../077/7077.xml">
computer file</link> which may contain any type of data, encoded in <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../686/238686.xml">
binary</link></instrumentality>
</artifact>
</system>
 form for computer storage and processing purposes; for example, <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<format wordnetid="106636806" confidence="0.8">
<link xlink:type="simple" xlink:href="../541/423541.xml">
computer document files</link></format>
</information>
</message>
 containing <link xlink:type="simple" xlink:href="../737/973737.xml">
formatted text</link>. Many binary <link xlink:type="simple" xlink:href="../600/18933600.xml">
file format</link>s contain parts that can be interpreted as text; binary files that contain <it>only</it> textual data - without, for example, any formatting information - are called <link xlink:type="simple" xlink:href="../356/208356.xml">
plain text files</link>. In many cases, plain text files are considered to be different from binary files because binary files are made up of more than just plain text.
When downloading, a completely functional program without any installer is also often called program binary, or binaries (as opposed to the <link xlink:type="simple" xlink:href="../661/27661.xml">
source code</link>).</p>

<sec>
<st>
 Structure </st>

<p>

Binary files are usually thought of as being a sequence of <link xlink:type="simple" xlink:href="../365/3365.xml">
byte</link>s, which means the binary digits (<link xlink:type="simple" xlink:href="../364/3364.xml">
bit</link>s) are grouped in eights. Binary files typically contain bytes that are intended to be interpreted as something other than text <idea wordnetid="105833840" confidence="0.8">
<concept wordnetid="105835747" confidence="0.8">
<category wordnetid="105838765" confidence="0.8">
<type wordnetid="105840188" confidence="0.8">
<kind wordnetid="105839024" confidence="0.8">
<link xlink:type="simple" xlink:href="../443/73443.xml">
character</link></kind>
</type>
</category>
</concept>
</idea>
s. <link xlink:type="simple" xlink:href="../739/5739.xml">
Compiled</link> computer programs are typical examples; indeed, compiled applications (<link xlink:type="simple" xlink:href="../307/337307.xml">
object file</link>s) are sometimes referred to, particularly by programmers, as <b>binaries</b>. But binary files can also contain images, sounds, compressed versions of other files, etc. &mdash; in short, any type of file content whatsoever. </p>
<p>

Some binary files contain <link xlink:type="simple" xlink:href="../401/472401.xml">
headers</link>, blocks of <link xlink:type="simple" xlink:href="../632/18933632.xml">
metadata</link> used by a <link xlink:type="simple" xlink:href="../783/5783.xml">
computer program</link> to interpret the data in the file.  For example, a <link xlink:type="simple" xlink:href="../702/12702.xml">
GIF</link> file can contain multiple images, and headers are used to identify and describe each block of image data.  If a binary file does not contain any headers, it may be called a <b>flat binary file</b>.</p>

</sec>
<sec>
<st>
 Manipulation </st>

<p>

To send binary files through certain systems (such as <link xlink:type="simple" xlink:href="../738/9738.xml">
e-mail</link>) that do not allow all data values, they are often translated into a plain text representation (using, for example, <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<standard wordnetid="107260623" confidence="0.8">
<format wordnetid="106636806" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../241/215241.xml">
Base64</link></system_of_measurement>
</format>
</standard>
</information>
</message>
).  This encoding has the disadvantage of increasing the file's size by approximately 30% during the transfer, as well as requiring translation back into binary after receipt.  See <message wordnetid="106598915" confidence="0.8">
<information wordnetid="106634376" confidence="0.8">
<format wordnetid="106636806" confidence="0.8">
<link xlink:type="simple" xlink:href="../778/3282778.xml">
Binary-to-text encoding</link></format>
</information>
</message>
 for more on this subject.</p>
<p>

<link xlink:type="simple" xlink:href="../890/18890.xml">
Microsoft Windows</link> allows the programmer to specify a <link xlink:type="simple" xlink:href="../908/102908.xml">
system call</link> parameter indicating if a file is text or binary; <family wordnetid="108078020" confidence="0.8">
<link xlink:type="simple" xlink:href="../642/31642.xml">
Unix</link></family>
 does not, and treats all files as binary. This reflects the fact that the distinction between the two types of files is to a certain extent <link xlink:type="simple" xlink:href="../808/3019808.xml">
arbitrary</link>.</p>

</sec>
<sec>
<st>
 Viewing </st>

<p>

A <link xlink:type="simple" xlink:href="../175/1164175.xml">
hex editor</link> or viewer may be used to view file data as a sequence of hexadecimal (or decimal, binary or ASCII character) values for corresponding bytes of a binary file.</p>
<p>

If a binary file is opened in a <link xlink:type="simple" xlink:href="../310/30310.xml">
text editor</link>, each group of eight bits will typically be translated as a single character, and you will see a (probably unintelligible) display of textual characters. If the file were opened in some other application, that application will have its own use for each byte: maybe the application will treat each byte as a number and output a stream of numbers between 0 and 255 &mdash; or maybe interpret the numbers in the bytes as colors and display the corresponding picture. If the file is itself treated as an <link xlink:type="simple" xlink:href="../392/217392.xml">
executable</link> and run, then the operating system will attempt to interpret the file as a series of instructions in its <link xlink:type="simple" xlink:href="../683/20683.xml">
machine language</link>.</p>

</sec>
<sec>
<st>
 Interpretation </st>

<p>

Standards are very important to binary files.  For example, a binary file interpreted by the ASCII character set will result in text being displayed.  A custom application can interpret the file differently, a byte may be a sound, or a pixel, or even an entire word.  Binary itself is meaningless, until such time as an executed algorithm defines what should be done with each bit, byte, word or block.  Thus, just examining the binary and attempting to match it against known formats can lead to the wrong conclusion as to what it actually represents.  This fact can be used in data hiding processes, where an algorithm interprets a binary data file differently to reveal hidden content.  Without the algorithm, it is impossible to tell that hidden content exists.</p>

</sec>
<sec>
<st>
 See also </st>


<p>

<list>
<entry level="1" type="bullet">

 <system wordnetid="104377057" confidence="0.8">
<artifact wordnetid="100021939" confidence="0.8">
<instrumentality wordnetid="103575240" confidence="0.8">
<link xlink:type="simple" xlink:href="../392/217392.xml">
Executable</link></instrumentality>
</artifact>
</system>
</entry>
</list>
</p>


</sec>
</bdy>
</format>
</article>
