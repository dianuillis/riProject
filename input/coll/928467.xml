<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 17:51:28[mciao0827] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>Concurrency (computer science)</title>
<id>928467</id>
<revision>
<id>243415432</id>
<timestamp>2008-10-06T12:41:13Z</timestamp>
<contributor>
<username>Thijs!bot</username>
<id>1392310</id>
</contributor>
</revision>
<categories>
<category>Articles to be expanded since June 2008</category>
<category>All articles to be expanded</category>
<category>Concurrency</category>
</categories>
</header>
<bdy>

<image width="200px" src="Dining_philosophers.png" type="thumb">
<caption>

The <link xlink:type="simple" xlink:href="../344/285344.xml">
"Dining Philosophers"</link>, a classic problem involving concurrency and shared resources
</caption>
</image>
<p>

In <link xlink:type="simple" xlink:href="../323/5323.xml">
computer science</link>, <b>concurrency</b> is a properties of system in which several <link xlink:type="simple" xlink:href="../926/5926.xml">
computation</link>al processes are executing at the same time, and potentially interacting with each other.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref> The study of concurrency encompasses a broad range of systems, from tightly-coupled, largely synchronous <link xlink:type="simple" xlink:href="../162/145162.xml">
parallel computing</link> systems, to loosely-coupled, largely asynchronous <link xlink:type="simple" xlink:href="../501/8501.xml">
distributed system</link>s.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%222%22])">2</ref> The concurrent processes may be executing truly simultaneously, in the case that they run on separate processors, or their execution steps may be interleaved to produce the appearance of concurrency, as in the case of separate processes running on a <link xlink:type="simple" xlink:href="../857/6857.xml">
multitasking</link> system. Because the processes in a concurrent system can interact with each other while they are executing, the number of possible execution paths in the system can be extremely large, and the resulting behavior can be very complex. The difficulties associated with concurrency have been tackled both through the construction of languages and concepts to make the complexity of concurrent execution manageable, and through the development of theories for reasoning about interacting concurrent processes.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref></p>

<sec>
<st>
Issues</st>
<p>

The difference between a sequential system and a concurrent system is the fact that the processes which make up a concurrent system can interact with each other.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref> Concurrent use of shared <link xlink:type="simple" xlink:href="../365/1728365.xml">
resources</link> is the source of many difficulties. <accomplishment wordnetid="100035189" confidence="0.8">
<event wordnetid="100029378" confidence="0.8">
<action wordnetid="100037396" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<feat wordnetid="100036762" confidence="0.8">
<link xlink:type="simple" xlink:href="../661/98661.xml">
Race condition</link></feat>
</psychological_feature>
</act>
</action>
</event>
</accomplishment>
s involving shared resources can result in unpredictable system behavior. The introduction of <link xlink:type="simple" xlink:href="../827/36827.xml">
mutual exclusion</link> can prevent race conditions, but can lead to problems such as <link xlink:type="simple" xlink:href="../181/105181.xml">
deadlock</link>, and <link xlink:type="simple" xlink:href="../591/501591.xml">
starvation</link>.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%222%22])">2</ref> </p>
<p>

In addition to internal interactions, many concurrent systems, such as <link xlink:type="simple" xlink:href="../194/22194.xml">
operating system</link>s and <link xlink:type="simple" xlink:href="../377/8377.xml">
database</link>s, are intended to participate in an ongoing interaction with users, and with other systems. Traditional notions of program correctness, which are based on relating an initial input to the output expected to appear at program termination, are not really applicable. Alternative ways of defining what it means for the operation of a concurrent system to be correct are required.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%222%22])">2</ref> </p>
<p>

The design of concurrent systems often entails finding reliable techniques for coordinating their execution, data exchange, memory allocation, and execution scheduling to minimize response time and maximise throughput.</p>

</sec>
<sec>
<st>
 Theory </st>

<p>

<table class="metadata plainlinks ambox ">
<row>
<col>

ambox-notice" style=""</col>
</row>
<row>
<col class="mbox-image"><p>

<image width="36px" src="Wiki_letter_w.svg">
</image>
</p>
</col>
<col style="" class="mbox-text">
 <b>Please help <weblink xlink:type="simple" xlink:href="http://localhost:18088/wiki/index.php?title=Concurrency_%28computer_science%29&amp;action=edit">
improve this section</weblink> by expanding it.</b> Further information might be found on the  or at . 
<it>(June 2008)''</it></col>
</row>
</table>


Concurrency theory has been an active field of research in <link xlink:type="simple" xlink:href="../392/323392.xml">
theoretical computer science</link> since <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<honoree wordnetid="110183757" confidence="0.8">
<laureate wordnetid="110249011" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<acquirer wordnetid="109764201" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<mathematician wordnetid="110301261" confidence="0.8">
<recipient wordnetid="109627906" confidence="0.8">
<link xlink:type="simple" xlink:href="../193/225193.xml">
Carl Adam Petri</link></recipient>
</mathematician>
</scientist>
</acquirer>
</causal_agent>
</laureate>
</honoree>
</person>
</physical_entity>
's seminal work on <link xlink:type="simple" xlink:href="../192/225192.xml">
Petri Net</link>s in the early 1960s.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%223%22])">3</ref> In the years since, a wide variety of formalisms have been developed for modeling and reasoning about concurrency. </p>

<ss1>
<st>
 Models </st>
<p>

A number of formalisms for modeling and understanding concurrent systems have been developed, including:<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%224%22])">4</ref></p>
<p>

<table style="background:#f9f9f9; font-size:85%; line-height:110%; ">
<row>
<col>
 <image width="32x28px" src="Portal.svg">
</image>
</col>
<col style="padding:0 0.2em;">
 <b><it>
Software Testing&#32;portal</it></b></col>
</row>
</table>
</p>
<p>

<list>
<entry level="1" type="bullet">

 The <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<model wordnetid="110324560" confidence="0.8">
<assistant wordnetid="109815790" confidence="0.8">
<worker wordnetid="109632518" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<link xlink:type="simple" xlink:href="../675/956675.xml">
Parallel Random Access Machine</link></causal_agent>
</worker>
</assistant>
</model>
</person>
</physical_entity>
</entry>
<entry level="1" type="bullet">

 The <link xlink:type="simple" xlink:href="../868/1637868.xml">
Actor model</link></entry>
<entry level="1" type="bullet">

 <language wordnetid="106282651" confidence="0.8">
<link xlink:type="simple" xlink:href="../192/225192.xml">
Petri net</link></language>
s</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../240/853240.xml">
Process calculi</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../238/1966238.xml">
Tuple space</link>s</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../365/6867365.xml">
SCOOP</link> (Simple Concurrent Object-Oriented Programming)</entry>
<entry level="1" type="bullet">

 The <link>
Composita</link> Language</entry>
</list>
</p>
<p>

Some of these models of concurrency are primarily intended to support reasoning and specification, while others can be used through the entire development cycle, including design, implementation, proof, testing and simulation of concurrent systems.</p>
<p>

The proliferation of different models of concurrency has motivated some researchers to develop ways to unify these different theoretical models. For example, Lee and Sangiovanni-Vincentelli have demonstrated that a so-called "tagged-signal" model can be used to provide a common framework for defining the <link xlink:type="simple" xlink:href="../275/55275.xml">
denotational semantics</link> of a variety of different models of concurrency,<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%225%22])">5</ref> while Nielsen, Sassone, and Winskel have demonstrated that <link xlink:type="simple" xlink:href="../869/5869.xml">
category theory</link> can be used to provide a similar unified understanding of different models.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%226%22])">6</ref></p>

</ss1>
<ss1>
<st>
 Logics </st>
<p>

Various types of <link xlink:type="simple" xlink:href="../481/321481.xml">
temporal logic</link><ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%227%22])">7</ref> can be used to help reason about concurrent systems. Some of these logics, such as <link xlink:type="simple" xlink:href="../307/710307.xml">
linear temporal logic</link> and <link xlink:type="simple" xlink:href="../894/840894.xml">
computational tree logic</link>, allow assertions to be made about the sequences of states that a concurrent system can pass through. Others, such as <link>
action computational tree logic</link>, <link xlink:type="simple" xlink:href="../481/12809481.xml">
Hennessy-Milner logic</link>, and <scientist wordnetid="110560637" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../671/195671.xml">
Lamport's</link></scientist>
 <link xlink:type="simple" xlink:href="../113/2214113.xml">
temporal logic of actions</link>, build their assertions from sequences of <it>actions</it> (changes in state). The principal application of these logics is in writing specifications for concurrent systems.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%222%22])">2</ref></p>

</ss1>
</sec>
<sec>
<st>
 Practice </st>

<p>

<table class="metadata plainlinks ambox ">
<row>
<col>

ambox-notice" style=""</col>
</row>
<row>
<col class="mbox-image"><p>

<image width="36px" src="Wiki_letter_w.svg">
</image>
</p>
</col>
<col style="" class="mbox-text">
 <b>Please help <weblink xlink:type="simple" xlink:href="http://localhost:18088/wiki/index.php?title=Concurrency_%28computer_science%29&amp;action=edit">
improve this section</weblink> by expanding it.</b> Further information might be found on the  or at . 
<it>(June 2008)''</it></col>
</row>
</table>

</p>
<p>

<link xlink:type="simple" xlink:href="../605/2581605.xml">
Concurrent programming</link> encompasses the programming languages and algorithms used to implement concurrent systems.  Concurrent programming is usually considered to be more general than <link xlink:type="simple" xlink:href="../162/145162.xml">
parallel programming</link> because it can involve arbitrary and dynamic patterns of communication and interaction, whereas parallel systems generally have a predefined and well-structured communications pattern. The base goals of concurrent programming include <it>correctness</it>, <it>performance</it> and <it>robustness</it>. Concurrent systems such as operating systems are generally designed to operate indefinitely and not terminate unexpectedly. Some concurrent systems implement a form of <link xlink:type="simple" xlink:href="../091/351091.xml">
transparent</link> concurrency, in which concurrent computational entities may compete for and share a single resource, but the complexities of this competition and sharing are shielded from the programmer.   </p>
<p>

Because they use shared resources, concurrent systems in general require the inclusion of some kind of <link xlink:type="simple" xlink:href="../226/2827226.xml">
arbiter</link> somewhere in their implementation (often in the underlying hardware), to control access to those resources. The use of arbiters introduces the possibility of <link xlink:type="simple" xlink:href="../863/2681863.xml">
indeterminacy in concurrent computation</link> which has major implications for practice including correctness and performance.  For example arbitration introduces <link xlink:type="simple" xlink:href="../475/2647475.xml">
unbounded nondeterminism</link> which raises issues with <link xlink:type="simple" xlink:href="../157/321157.xml">
model checking</link> because it causes explosion in the state space and can even cause models to have an infinite number of states.</p>

</sec>
<sec>
<st>
 See also </st>
<p>

<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../513/6513.xml">
Client-server</link> network nodes</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../896/18949896.xml">
Cluster</link> nodes</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../356/217356.xml">
Concurrency control</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../605/2581605.xml">
Concurrent computing</link></entry>
<entry level="1" type="bullet">

 <structure wordnetid="105726345" confidence="0.8">
<form wordnetid="105930736" confidence="0.8">
<link xlink:type="simple" xlink:href="../068/855068.xml">
Concurrency pattern</link></form>
</structure>
</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../501/8501.xml">
Distributed system</link> nodes</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../842/381842.xml">
OpenMP</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../178/45178.xml">
Processes</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../630/4536630.xml">
Ptolemy Project</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../303/45303.xml">
Threads</link></entry>
</list>
</p>

</sec>
<sec>
<st>
References</st>

<p>

<reflist>
<entry id="1">
 <cite id="Reference-Roscoe-1997" style="font-style:normal" class="book"><physical_entity wordnetid="100001930" confidence="0.8">
<peer wordnetid="109626238" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<colleague wordnetid="109935990" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<associate wordnetid="109816771" confidence="0.8">
<link xlink:type="simple" xlink:href="../676/1276676.xml">
Roscoe, A. W.</link></associate>
</scientist>
</causal_agent>
</colleague>
</person>
</peer>
</physical_entity>
&#32;(1997). The Theory and Practice of Concurrency.&#32;<link xlink:type="simple" xlink:href="../050/5421050.xml">
Prentice Hall</link>. ISBN 0-13-674409-5.</cite>&nbsp;</entry>
<entry id="2">
 <cite style="font-style:normal">Cleaveland, Rance; Scott Smolka&#32;(December, 1996).&#32;"<weblink xlink:type="simple" xlink:href="http://doi.acm.org/10.1145/242223.242252">
Strategic Directions in Concurrency Research</weblink>". <it>ACM Computing Surveys</it>&#32;<b>28</b>&#32;(4): 607. <document wordnetid="106470073" confidence="0.8">
<written_communication wordnetid="106349220" confidence="0.8">
<writing wordnetid="106362953" confidence="0.8">
<link xlink:type="simple" xlink:href="../994/422994.xml">
doi</link></writing>
</written_communication>
</document>
:<weblink xlink:type="simple" xlink:href="http://dx.doi.org/10.1145%2F242223.242252">
10.1145/242223.242252</weblink>.</cite>&nbsp;</entry>
<entry id="3">
J.C.M. Baeten, <weblink xlink:type="simple" xlink:href="http://www.win.tue.nl/fm/0402history.pdf">
<it>A brief history of process algebra''</it></weblink>, Rapport CSR 04-02, Vakgroep Informatica, Technische Universiteit Eindhoven, 2004</entry>
<entry id="4">
 <cite id="Reference-Filman-1984" style="font-style:normal" class="book">Filman, Robert;&#32;Daniel Friedman&#32;(1984). <weblink xlink:type="simple" xlink:href="http://ic.arc.nasa.gov/people/filman/text/dpl/dpl.html">
Coordinated Computing - 
Tools and Techniques for Distributed Software</weblink>.&#32;McGraw-Hill. ISBN 0-07-022439-0.</cite>&nbsp;</entry>
<entry id="5">
 <cite style="font-style:normal">Lee, Edward; Alberto Sangiovanni-Vincentelli&#32;(December, 1998).&#32;"<weblink xlink:type="simple" xlink:href="http://dx.doi.org/10.1109/43.736561">
A Framework for Comparing Models of Computation</weblink>". <it><link xlink:type="simple" xlink:href="../358/12953358.xml">
IEEE Transactions on CAD</link></it>&#32;<b>17</b>&#32;(12): 1217–1229. <document wordnetid="106470073" confidence="0.8">
<written_communication wordnetid="106349220" confidence="0.8">
<writing wordnetid="106362953" confidence="0.8">
<link xlink:type="simple" xlink:href="../994/422994.xml">
doi</link></writing>
</written_communication>
</document>
:<weblink xlink:type="simple" xlink:href="http://dx.doi.org/10.1109%2F43.736561">
10.1109/43.736561</weblink>.</cite>&nbsp;|journal=<link xlink:type="simple" xlink:href="../358/12953358.xml">
IEEE Transactions on CAD</link>|volume=17|issue=12|pages=1217–1229|date=December, 1998}} </entry>
<entry id="6">
 <cite style="font-style:normal">Mogens Nielsen;&#32;Vladimiro Sassone and Glynn Winskel&#32;(1993). "<weblink xlink:type="simple" xlink:href="http://citeseer.ist.psu.edu/article/nielsen94relationships.html">
Relationships Between Models of Concurrency</weblink>".&#32;<it>REX School/Symposium</it>.</cite>&nbsp;</entry>
<entry id="7">
 <cite id="Reference-Roscoe-2001" style="font-style:normal" class="book">Roscoe, Colin&#32;(2001). Modal and Temporal Properties of Processes.&#32;Springer. ISBN 0-387-98717-7.</cite>&nbsp;</entry>
</reflist>
 </p>

</sec>
<sec>
<st>
 Further reading </st>
<p>

<list>
<entry level="1" type="bullet">

  <cite style="font-style:normal" class="book">Lynch, Nancy A.&#32;(1996). Distributed Algorithms.&#32;Morgan Kauffman. ISBN 1558603484.</cite>&nbsp;</entry>
<entry level="1" type="bullet">

  <cite style="font-style:normal" class="book">Tanenbaum, Andrew S.;&#32;Van Steen, Maarten&#32;(2002). Distributed Systems: Principles and Paradigms.&#32;Prentice Hall. ISBN 0-13-088893-1.</cite>&nbsp;</entry>
<entry level="1" type="bullet">

  <cite style="font-style:normal" class="book">Kurki-Suonio, Reino&#32;(2005). A Practical Theory of Reactive Systems.&#32;Springer. ISBN 3-540-23342-3.</cite>&nbsp;</entry>
<entry level="1" type="bullet">

  <cite style="font-style:normal" class="book">Garg, Vijay K.&#32;(2002). Elements of Distributed Computing.&#32;Wiley-IEEE Press. ISBN 0-471-03600-5.</cite>&nbsp;</entry>
<entry level="1" type="bullet">

  <cite style="font-style:normal" class="book">Magee, Jeff;, Kramer, Jeff&#32;(2006). Concurrency: State Models and Java Programming.&#32;Wiley. ISBN 0-470-09355-2.</cite>&nbsp;</entry>
</list>
</p>

</sec>
<sec>
<st>
External links</st>
<p>

<list>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://vl.fmnet.info/concurrent/">
Concurrent Systems</weblink> at <weblink xlink:type="simple" xlink:href="http://vlib.org/">
The WWW Virtual Library</weblink></entry>
</list>
</p>


</sec>
</bdy>
</article>
