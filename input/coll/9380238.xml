<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 23:54:53[mciao0827] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<event  confidence="0.8" wordnetid="100029378">
<rule  confidence="0.8" wordnetid="105846932">
<act  confidence="0.8" wordnetid="100030358">
<psychological_feature  confidence="0.8" wordnetid="100023100">
<procedure  confidence="0.8" wordnetid="101023820">
<activity  confidence="0.8" wordnetid="100407535">
<algorithm  confidence="0.8" wordnetid="105847438">
<header>
<title>Fortune&apos;s algorithm</title>
<id>9380238</id>
<revision>
<id>232005993</id>
<timestamp>2008-08-15T00:18:34Z</timestamp>
<contributor>
<username>Lightbot</username>
<id>7178666</id>
</contributor>
</revision>
<categories>
<category>Geometric algorithms</category>
</categories>
</header>
<bdy>

<b>Fortune's algorithm</b> is a <link>
plane sweep</link> algorithm for generating a <event wordnetid="100029378" confidence="0.8">
<rule wordnetid="105846932" confidence="0.8">
<act wordnetid="100030358" confidence="0.8">
<psychological_feature wordnetid="100023100" confidence="0.8">
<procedure wordnetid="101023820" confidence="0.8">
<activity wordnetid="100407535" confidence="0.8">
<algorithm wordnetid="105847438" confidence="0.8">
<link xlink:type="simple" xlink:href="../668/177668.xml">
Voronoi diagram</link></algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
 from a set of points in a plane using <link xlink:type="simple" xlink:href="../578/44578.xml">
O</link>(<it>n</it> log <it>n</it>) time and O(<it>n</it>) space.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref><ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%222%22])">2</ref> It was originally published by <link>
Steven Fortune</link> in 1986 in his "A sweepline algorithm for Voronoi diagrams."<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%223%22])">3</ref><p>

The algorithm maintains both a <link xlink:type="simple" xlink:href="../856/8700856.xml">
sweep line</link> and a <it>beach line</it>, which both move through the plane as the algorithm progresses. The sweep line is a straight line, which we may by convention assume to be horizontal and moving downwards across the plane. At any time during the algorithm, the input points above the sweep line will have been incorporated into the Voronoi diagram, while the points below the sweep line will not have been considered yet. The beach line is not a line, but a complex curve above the sweep line, composed of pieces of <link xlink:type="simple" xlink:href="../231/23231.xml">
parabola</link>e; it divides the portion of the plane within which the Voronoi diagram can be known, regardless of what other points might be below the sweep line, from the rest of the plane. For each point <it>p</it> above the sweep line, one can define a parabola of points equidistant from that point and from the sweep line; the beach line is the lower envelope (pointwise minimum) of these parabolae. As the sweep line progresses, the vertices of the beach line, at which two parabolae cross, trace out the edges of the Voronoi diagram.</p>
<p>

The algorithm maintains as data structures a <link xlink:type="simple" xlink:href="../320/4320.xml">
binary search tree</link> describing the combinatorial structure of the beach line, and a <link xlink:type="simple" xlink:href="../485/24485.xml">
priority queue</link> listing potential future events that could change the beach line structure. These events include the addition of another parabola to the beach line (when the sweep line crosses another input point) and the removal of a curve from the beach line (when the sweep line becomes tangent to a circle through some three input points whose parabolae form consecutive segments of the beach line). Each such event may be prioritized by the <it>y</it>-coordinate of the sweep line at the point the event occurs. The algorithm itself then consists of repeatedly removing the next event from the priority queue, finding the changes the event causes in the beach line, and updating the data structures. As there are O(<it>n</it>) events to process (each being associated with some feature of the Voronoi diagram) and O(log <it>n</it>) time to process an event (each consisting of a constant number of binary search tree and priority queue operations) the total time is O(<it>n</it> log <it>n</it>).</p>

<sec>
<st>
References</st>

<p>

<reflist>
<entry id="1">
 <cite style="font-style:normal" class="book"><link>
Mark de Berg</link>, <link>
Marc van Kreveld</link>, <physical_entity wordnetid="100001930" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<research_worker wordnetid="110523076" confidence="0.8">
<link xlink:type="simple" xlink:href="../516/1177516.xml">
Mark Overmars</link></research_worker>
</scientist>
</causal_agent>
</person>
</physical_entity>
, and <link>
Otfried Schwarzkopf</link>&#32;(2000). Computational Geometry, 2nd revised edition,&#32;<link xlink:type="simple" xlink:href="../949/1418949.xml">
Springer-Verlag</link>. ISBN 3-540-65620-0.</cite>&nbsp; Section 7.2: Computing the Voronoi Diagram: pp.151&ndash;160.</entry>
<entry id="2">
 <cite id="CITEREFAustin" style="font-style:normal">Austin, David,&#32;<it><weblink xlink:type="simple" xlink:href="http://www.ams.org/featurecolumn/archive/voronoi.html">
Voronoi Diagrams and a Day at the Beach</weblink></it>, Feature Column, <organization wordnetid="108008335" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../822/198822.xml">
American Mathematical Society</link></organization>
, </cite>&nbsp;.</entry>
<entry id="3">
Steven Fortune. A sweepline algorithm for Voronoi diagrams. <it>Proceedings of the second annual symposium on Computational geometry</it>. Yorktown Heights, New York, United States, pp.313&ndash;322. 1986. ISBN:0-89791-194-6. <weblink xlink:type="simple" xlink:href="http://portal.acm.org/citation.cfm?id=10549">
ACM Digital Library</weblink><weblink xlink:type="simple" xlink:href="http://www.springerlink.com/content/n88186tl165168rw/">
SpringerLink</weblink></entry>
</reflist>
</p>

</sec>
<sec>
<st>
External links</st>
<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.diku.dk/hjemmesider/studerende/duff/Fortune/">
Java interactive visual implementation of Fortune's algorithm</weblink></entry>
</list>
</p>



</sec>
</bdy>
</algorithm>
</activity>
</procedure>
</psychological_feature>
</act>
</rule>
</event>
</article>
