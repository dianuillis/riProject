<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 17:58:45[mciao0828] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<header>
<title>Optimized Link State Routing Protocol</title>
<id>976183</id>
<revision>
<id>244564125</id>
<timestamp>2008-10-11T13:16:32Z</timestamp>
<contributor>
<username>RussBot</username>
<id>279219</id>
</contributor>
</revision>
<categories>
<category>Ad hoc routing protocols</category>
<category>Wireless networking</category>
</categories>
</header>
<bdy>

The <b>Optimized Link State Routing Protocol (OLSR)</b> is an IP routing protocol specified in <weblink xlink:type="simple" xlink:href="http://www.ietf.org/rfc/rfc3626.txt">
rfc3626</weblink> which is optimized for <link xlink:type="simple" xlink:href="../569/142569.xml">
mobile ad-hoc network</link>s but can also be used on other <link xlink:type="simple" xlink:href="../928/6624928.xml">
wireless ad-hoc network</link>s.  OLSR is a proactive <link xlink:type="simple" xlink:href="../632/159632.xml">
link-state routing protocol</link> which uses Hello and Topology Control (TC) messages to discover and then discriminate link state information throughout the <link xlink:type="simple" xlink:href="../569/142569.xml">
mobile ad-hoc network</link>.  Individual nodes use this topology information to compute next hop destinations for all nodes in the network using shortest hop forwarding paths. 
<sec>
<st>
 Features specific to OLSR </st>

<p>

Link-state routing protocols such as <link xlink:type="simple" xlink:href="../388/43388.xml">
OSPF</link> and <message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<standard wordnetid="107260623" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../219/39219.xml">
IS-IS</link></system_of_measurement>
</rule>
</direction>
</standard>
</protocol>
</message>
 elect a <it>designated router</it> on every link in order to perform flooding of topology information.  In wireless ad-hoc networks, there is different notion of a link, packets can and do go out the same interface; hence, a different approach is needed in order to optimize the flooding process.  Using Hello messages the OLSR protocol at each node discovers 2-hop neighbor information and performs a distributed election of a set of <it>multipoint distribution relays</it> (MPRs).  Nodes select MPRs such that there exists a path to each of its 2-hop neighbors via a node selected as an MPR.  These MPR nodes then source and forward TC messages which contain the MPR selectors.  This functioning of MPRs makes OLSR unique from other link state routing protocols in a few different ways: The forwarding path for TC messages is not shared among all nodes but varies depending on the source, only a subset of nodes source link state information, not all links of a node are advertised but only those which represent MPR selections.</p>
<p>

Since link-state routing requires the topology database to be synchronized across the network, OSPF and IS-IS perform topology flooding using a reliable algorithm.  Such an algorithm is very difficult to design for ad-hoc wireless networks, so OLSR doesn't bother with reliability; it simply floods topology data often enough to make sure that the database does not remain unsynchronized for extended periods of time.</p>

</sec>
<sec>
<st>
 Benefits </st>

<p>

Being a proactive protocol, routes to all destinations within the network are known and maintained before use.  Having the routes available within the standard routing table can be useful for some systems and network applications as there is no route discovery delay associated with finding a new route.</p>
<p>

The routing overhead generated, while generally greater than that of a reactive protocol, does not increase with the number of routes being used.</p>
<p>

Default and network routes can be injected into the system by HNA messages allowing for connection to the internet or other networks within the OLSR MANET cloud.  Network routes are something which reactive protocols do not currently execute well.</p>
<p>

Timeout values and validity information is contained within the messages conveying information allowing for differing timer values to be used at differing nodes.</p>

</sec>
<sec>
<st>
 Criticisms </st>

<p>

The original definition of OLSR does not include any provisions for sensing of link quality; it simply assumes that a link is up if a number of hello packets have been received recently.  This assumes that links are bi-modal (either working or failed), which is not necessarily the case on wireless networks, where links often exhibit intermediate rates of packet loss.  Implementations such as the open source OLSRd (commonly used on <O wordnetid="106832680" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../297/6097297.xml">
Linux</link></O>
-based mesh routers) <weblink xlink:type="simple" xlink:href="http://www.olsr.org/index.cgi?action=clog">
have been extended (as of v. 0.4.8)</weblink> with link quality sensing.  This is sometimes called "fish-eye" or Radio-Aware OLSR or RA-OLSR and is one of the two protocols included in the <link xlink:type="simple" xlink:href="../429/2727429.xml">
802.11s</link> draft standard. It was influenced by the <link xlink:type="simple" xlink:href="../037/2710037.xml">
HSLS protocol</link>.</p>
<p>

Being a proactive protocol, OLSR uses power and network resources in order to propagate data about possibly unused routes.  While this is not a problem for wired access points and laptops, it makes OLSR unsuitable for sensor networks.</p>
<p>

Being a link-state protocol, OLSR requires a reasonably large amount of bandwidth and CPU power to compute optimal paths in the network.  In the typical networks where OLSR is used (which rarely exceed a few dozens of nodes), this does not appear to be a problem.</p>
<p>

By only using MPRs to flood topology information, OLSR removes some of the redundancy of the flooding process, which may be a problem in networks with large packet loss rates - however the MPR mechanism is self-pruning (which means that in case of packet losses, some nodes which would not have retransmitted a packet, may do so).</p>
<p>

As OLSR floods the link state database unreliably, it may cause transient loops if the link state database becomes inconsistent due to packet loss.</p>

</sec>
<sec>
<st>
 OLSR-NG - a response to the criticism </st>

<p>

The <weblink xlink:type="simple" xlink:href="http://olsr.funkfeuer.at">
OLSR-NG</weblink> project set out to address the above criticisms. Some points were found to be mere implementation bugs, other observations from above were based on the fact that the original http://www.olsr.org implementation had a Dijkstra implementation which was O(n^2) in running time! OLSR-NG managed to reduce the complexity of the Dijkstra implementation to O(n*log(n))</p>
<p>

Thus <weblink xlink:type="simple" xlink:href="http://olsr.funkfeuer.at">
OLSR-NG</weblink>  is an evolutionary approach, breaking with RFC 3626 compatibility intentionally but experimenting with different optimization ideas.
The current list of ideas can be found on http://wiki.funkfeuer.at/index.php/OLSR-NG. </p>
<p>

<image width="150px" src="Olsr-ng_nettraffic.png">
<caption>

Olsr-ng nettraffic.png
</caption>
</image>
</p>
<p>

WLAN routing packet overhead optimization in the OLSR-NG project: left olsr 0.4.10, right 0.5.4 (network of around 400 nodes,  mipsel linksys wrt54g)</p>
<p>

<image width="150px" src="Olsr-ng_cpu_load.png">
<caption>

Olsr-ng cpu load.png
</caption>
</image>
</p>
<p>

cpu load in olsr 0.5.4. left: before optimizing (ver. 0.4.10 ) right after optimizations ( 0.5.4) (network of around 400 nodes, mipsel linksys wrt54g)</p>
<p>

OLSR-NG uses the http://www.olsr.org mailinglists as well for communication purposes.</p>

</sec>
<sec>
<st>
 Messages </st>
<p>

OLSR makes use of "Hello" messages to find its one hop neighbors and its two hop neighbors through their responses. The sender can then select its multipoint relays (MPR) based on the one hop node which offer the best routes to the two hop nodes. Each node has also an MPR selector set which enumerates nodes that have selected it as an MPR node.  OLSR uses Topology Control (TC) messages along with MPR forwarding to disseminate neighbor information throughout the network.  Host Network Address (HNA) messages are used by OLSR to disseminate network route advertisements in the same way TC messages advertise host routes.</p>

<ss1>
<st>
 Hello </st>

<p>

<image width="150px" src="olsr-hello-packet.png">
<caption>

olsr-hello-packet.png
</caption>
</image>
</p>

</ss1>
<ss1>
<st>
 TC (Topology Control) </st>

<p>

<image width="150px" src="Olsr-tc-packet.png">
<caption>

Olsr-tc-packet.png
</caption>
</image>
</p>

</ss1>
</sec>
<sec>
<st>
 Other approaches </st>
<p>

The problem of routing in ad-hoc wireless networks is actively being researched, and OLSR is but one of several proposed solutions.  To many, it is not clear whether a whole new protocol is needed, or whether <link xlink:type="simple" xlink:href="../388/43388.xml">
OSPF</link> could be extended with support for wireless interfaces.  Other approaches include using distance vector rather than link-state approached, such as <link xlink:type="simple" xlink:href="../953/2817953.xml">
DSDV</link>.</p>
<p>

In bandwidth- and power-starved environments, it is interesting to keep the network silent when there is no traffic to be routed.  Reactive routing protocols do not maintain routes, but build them on demand.  As link-state protocols require database synchronisation, such protocols typically use the distance vector approach, as in <link xlink:type="simple" xlink:href="../665/1016665.xml">
AODV</link>, or more ad-hoc approaches that do not necessarily build optimal paths, such as <link xlink:type="simple" xlink:href="../534/1806534.xml">
Dynamic Source Routing</link>.</p>
<p>

For more information see the <link xlink:type="simple" xlink:href="../563/142563.xml">
list of ad-hoc routing protocols</link>.</p>

</sec>
<sec>
<st>
 OLSR version 2 </st>

<p>

OLSRv2 is currently being developed within the IETF.  It maintains many of the key features of the original including MPR selection and dissemination.  Key differences are the flexibility and modular design using shared components: packet format packetbb, and neighborhood discovery protocol NHDP.  These components are being designed to be common among next generation IETF MANET protocols.  Differences in the handling of multiple address and interface enabled nodes is also present between OLSR and OLSRv2.  </p>

</sec>
<sec>
<st>
Implementations</st>
<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.olsr.org/">
OLSR.ORG</weblink> - Downloadable code for OLSR on GNU/Linux, Windows, Mac OS X, FreeBSD and NetBSD systems. Features a great deal of documentation, including an informative survey of related work.</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://cs.itd.nrl.navy.mil/work/olsr/index.php">
NRL-OLSR</weblink> - Open source code of NRL-OLSR.  Works on Windows, MacOS, Linux, and various embedded PDA systems such as Arm/Zaurus and PocketPC as well as simulation environments ns2 and OPNET., http://cs.itd.nrl.navy.mil/focus/</entry>
</list>
</p>

</sec>
<sec>
<st>
External links</st>
<p>

<list>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://ietf.org">
IETF Home Page</weblink> The Internet Engineering Task Force standards body</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://olsr.funkfeuer.at">
olsr.funkfeuer.at</weblink> currently advancing the olsr.org implementation to improve scalability</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://hipercom.inria.fr/olsr/">
Optimized Link State Routing</weblink> which includes this <weblink xlink:type="simple" xlink:href="http://hipercom.inria.fr/olsr/mpr-flooding.html">
Flash Demo</weblink>.</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://freifunk.net/wiki/FreifunkFirmwareEnglish">
Freifunk Firmware (English language page)</weblink> - a firmware based on OpenWRT that uses OLSR, designed to build mesh networks out of wireless access points, e.g. LinksysWRT54G's</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://pyramid.metrix.net/">
Pyramid Linux</weblink> - an embedded distro for <weblink xlink:type="simple" xlink:href="http://metrix.net/">
embedded x86 boards</weblink> with OLSR, web interface, etc.  Primarily used in Community Networks.</entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://cs.itd.nrl.navy.mil/focus/">
NRL's Networks and Communication Systems Branch</weblink> - includes project information and open source networking tools and software developed by the U.S. Naval Research Lab.</entry>
</list>
</p>


</sec>
</bdy>
</article>
