<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 17.04.2009 00:05:28[mciao0827] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<standard  confidence="0.8" wordnetid="107260623">
<system_of_measurement  confidence="0.8" wordnetid="113577171">
<header>
<title>Wait (operating system)</title>
<id>9780918</id>
<revision>
<id>225093062</id>
<timestamp>2008-07-11T21:06:37Z</timestamp>
<contributor>
<username>Andreas Kaufmann</username>
<id>72502</id>
</contributor>
</revision>
<categories>
<category>Process (computing)</category>
<category>POSIX standards</category>
</categories>
</header>
<bdy>

In modern <link xlink:type="simple" xlink:href="../457/7878457.xml">
computer</link> <link xlink:type="simple" xlink:href="../194/22194.xml">
operating system</link>s, a <link xlink:type="simple" xlink:href="../178/45178.xml">
process</link> (or <link xlink:type="simple" xlink:href="../191/1655191.xml">
task</link>) may <b>wait</b> on another process to complete its execution. In most systems, a <link xlink:type="simple" xlink:href="../750/445750.xml">
parent process</link> can create an independently executing <link xlink:type="simple" xlink:href="../747/445747.xml">
child process</link>. The parent process may then issue a <it>wait</it> <link xlink:type="simple" xlink:href="../908/102908.xml">
system call</link>, which suspends the execution of the parent process while the child executes. When the child process terminates, it returns an <link xlink:type="simple" xlink:href="../392/1117392.xml">
exit status</link> to the operating system, which is then returned to the waiting parent process. The parent process then resumes execution.<p>

Modern operating systems also provide system calls that allow <link xlink:type="simple" xlink:href="../303/45303.xml">
process threads</link> to create other threads and wait for them to terminate ("<link>
join</link>" them) in a similar fashion.</p>
<p>

An operating system may provide variations of the <it>wait</it> call that allow a process to wait for any of its children processes to <link xlink:type="simple" xlink:href="../754/6539754.xml">
exit</link>, or to wait for a single specific child process (identified by its <link xlink:type="simple" xlink:href="../770/445770.xml">
process-ID</link>) to exit.</p>
<p>

Some operating systems issue a <link xlink:type="simple" xlink:href="../602/938602.xml">
signal</link> (<signal wordnetid="106791372" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../721/2360721.xml">
SIGCHLD</link></signal>
) to the parent process when a child process terminates, notifying the parent process and allowing it to then retrieve the child process's exit status.</p>
<p>

The <link xlink:type="simple" xlink:href="../392/1117392.xml">
exit status</link> returned by a child process typically indicates whether the process terminated normally or <link xlink:type="simple" xlink:href="../467/60467.xml">
abnormally</link>. For normal termination, this status also includes the exit code (usually a small integer value) that the process returned to the system.</p>
<p>

A child process that terminates but is never waited on by its parent becomes a <b><link xlink:type="simple" xlink:href="../498/34498.xml">
zombie process</link></b>. Such a process continues to exist as an entry in the system <link xlink:type="simple" xlink:href="../178/45178.xml">
process table</link> even though it is no longer an actively executing program. Such situations are typically handled with a special "reaper" process that locates zombies and retrieves their exit status, allowing the operating system to then deallocate their resources.</p>
<p>

Similarly, a child process whose parent process terminates before it does becomes an <b><link xlink:type="simple" xlink:href="../931/853931.xml">
orphan process</link></b>. Such situations are typically handled with a special "root" (or "init") process, which is assigned as the new parent of a process when its parent process exits. This special process detects when an orphan process terminates and then retrieves its exit status, allowing the system to deallocate the terminated child process.</p>

<sec>
<st>
 See also </st>

<p>

<list>
<entry level="1" type="bullet">

 <standard wordnetid="107260623" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../754/6539754.xml">
Exit</link></system_of_measurement>
</standard>
</entry>
<entry level="1" type="bullet">

 <standard wordnetid="107260623" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../507/301507.xml">
Fork</link></system_of_measurement>
</standard>
</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../995/9812995.xml">
Sleep</link></entry>
<entry level="1" type="bullet">

 <standard wordnetid="107260623" confidence="0.8">
<system_of_measurement wordnetid="113577171" confidence="0.8">
<link xlink:type="simple" xlink:href="../352/8941352.xml">
Spawn</link></system_of_measurement>
</standard>
</entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../377/4845377.xml">
Wait command</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../611/335611.xml">
Wait state</link></entry>
</list>
</p>

</sec>
</bdy>
</system_of_measurement>
</standard>
</article>
