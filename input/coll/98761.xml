<?xml version="1.0" encoding="UTF-8"?>
<!-- generated by CLiX/Wiki2XML [MPI-Inf, MMCI@UdS] $LastChangedRevision: 92 $ on 16.04.2009 15:57:46[mciao0826] -->
<!DOCTYPE article SYSTEM "../article.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
<message  confidence="0.8" wordnetid="106598915">
<protocol  confidence="0.8" wordnetid="106665108">
<direction  confidence="0.8" wordnetid="106786629">
<rule  confidence="0.8" wordnetid="106652242">
<header>
<title>Spanning tree protocol</title>
<id>98761</id>
<revision>
<id>243592085</id>
<timestamp>2008-10-07T05:03:59Z</timestamp>
<contributor>
<username>FlyingToaster</username>
<id>1157604</id>
</contributor>
</revision>
<categories>
<category>Network protocols</category>
<category>Spanning tree</category>
<category>Link protocols</category>
<category>Network topology</category>
</categories>
</header>
<bdy>

The <b>Spanning Tree Protocol</b> is an <message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<link xlink:type="simple" xlink:href="../949/152949.xml">
OSI layer-2</link></rule>
</direction>
</protocol>
</message>
 <link xlink:type="simple" xlink:href="../770/630770.xml">
protocol</link> that ensures a loop-free <link xlink:type="simple" xlink:href="../413/41413.xml">
topology</link> for any <link xlink:type="simple" xlink:href="../169/2702169.xml">
bridged</link> <link xlink:type="simple" xlink:href="../739/17739.xml">
LAN</link>.   It is based on an <link xlink:type="simple" xlink:href="../775/775.xml">
algorithm</link> invented by <physical_entity wordnetid="100001930" confidence="0.8">
<expert wordnetid="109617867" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<pioneer wordnetid="110434725" confidence="0.8">
<specialist wordnetid="110631941" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<originator wordnetid="110383816" confidence="0.8">
<research_worker wordnetid="110523076" confidence="0.8">
<creator wordnetid="109614315" confidence="0.8">
<link xlink:type="simple" xlink:href="../111/4236111.xml">
Radia Perlman</link></creator>
</research_worker>
</originator>
</scientist>
</causal_agent>
</specialist>
</pioneer>
</person>
</expert>
</physical_entity>
 while working for <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../952/7952.xml">
Digital Equipment Corporation</link></company>
<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref><ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%222%22])">2</ref>.  Spanning tree allows a network design to include spare (redundant) links to provide automatic backup paths if an active link fails, without the danger of bridge loops, or the need for manual enabling/disabling of these backup links.  Bridge loops must be avoided because they result in flooding the network.<p>

The Spanning Tree Protocol (<b>STP</b>), is defined in the <link xlink:type="simple" xlink:href="../938/56938.xml">
IEEE</link> <link xlink:type="simple" xlink:href="../065/27065.xml">
Standard</link> <link xlink:type="simple" xlink:href="../178/2819178.xml">
802.1D</link>. As the name suggests, it creates a <link xlink:type="simple" xlink:href="../770/455770.xml">
spanning tree</link> within a <link xlink:type="simple" xlink:href="../687/912687.xml">
mesh network</link> of connected layer-2 bridges (typically <link xlink:type="simple" xlink:href="../499/9499.xml">
Ethernet</link> <link xlink:type="simple" xlink:href="../614/40614.xml">
switches</link>), and disables those links that are not part of the tree, leaving a single active path between any two network nodes. </p>

<sec>
<st>
 Protocol operation </st>
<p>

The collection of bridges in a LAN can be considered 
a graph whose nodes are the bridges
and whose edges are the cables connecting the bridges.  
To break loops in the LAN while maintaining access to all LAN segments,
the bridges collectively compute a <link>
spanning tree</link>.  The spanning tree is not necessarily a minimum cost spanning tree.   A network administrator can reduce the cost of a spanning tree, if necessary, by altering some of the configuration parameters in such a way as to affect the choice of the root of the spanning tree.</p>
<p>

The spanning tree that the bridges compute using the Spanning Tree Protocol can be determined using the following 
rules.  The example network at the right, below, will be used to illustrate the rules.
<image location="right" width="300px" src="Spanning_tree_protocol_at_work_1.svg" type="thumb">
<caption>

1.  An example network.  The numbered boxes represent bridges (the number represents the bridge ID).  The lettered clouds represent network segments.
</caption>
</image>

<image location="right" width="300px" src="Spanning_tree_protocol_at_work_2.svg" type="thumb">
<caption>

2.  The smallest bridge ID is 3.  Therefore, bridge 3 is the root bridge.
</caption>
</image>

<image location="right" width="300px" src="Spanning_tree_protocol_at_work_3.svg" type="thumb">
<caption>

3.  Assuming that the cost of traversing any network segment is 1, the least cost path from bridge 4 to the root bridge goes through network segment c.  Therefore, the root port for bridge 4 is the one on network segment c.
</caption>
</image>

<image location="right" width="300px" src="Spanning_tree_protocol_at_work_4.svg" type="thumb">
<caption>

4.  The least cost path to the root from network segment e goes through bridge 92.  Therefore the designated port for network segment e is the port that connects bridge 92 to network segment e.
</caption>
</image>

<image location="right" width="300px" src="Spanning_tree_protocol_at_work_5.svg" type="thumb">
<caption>

5.  This diagram illustrates all port states as computed by the spanning tree algorithm. Any active port that is not a root port or a designated port is a blocked port.
</caption>
</image>

<image location="right" width="300px" src="Spanning_tree_protocol_at_work_6.svg" type="thumb">
<caption>

6.  After link failure the spanning tree algorithm computes and spans new least-cost tree.
</caption>
</image>
</p>
<p>

<b>Elect a root bridge.</b>   The <it>root bridge</it> of the spanning tree is the bridge with the smallest bridge ID.  Each bridge has a unique identifier (ID) and a configurable priority number; the bridge ID contains both numbers. To compare two bridge IDs, the priority is compared first.  If two bridges have equal priority, then the MAC addresses are compared. For example, if switches A (MAC=0000.0000.1111) and B (MAC=0000.0000.2222) both have a priority of 10, then switch A will be elected as the root bridge. If the network administrator would like switch B to become the root bridge, he must set its priority to be less than 10. (The default priority of <link xlink:type="simple" xlink:href="../746/51746.xml">
Cisco</link> switches is 32768 ).</p>
<p>

<b>Determine the least cost paths to the root bridge.</b>  The computed spanning tree has the property that messages  from any connected device to the root bridge traverse a least cost path, i.e., a path from the device to the root that has minimum cost among all paths from the device to the root.  The cost of traversing a single network segment is configurable; the cost of traversing a path is the sum of the costs of the segments on the path.  Different technologies have different default costs for network segments.  Also, an administrator can configure the cost of traversing a particular network segment.  </p>
<p>

The property that messages always traverse least-cost paths to the root is guaranteed by the following two rules.</p>
<p>

<it>Least cost path from each bridge.</it>  After the root bridge has been chosen, each bridge determines the cost of each possible path from itself to the root.  From these, it picks the one with the smallest cost (the least-cost path).  The port connecting to that path becomes the <it>root port</it> of the bridge.</p>
<p>

<it>Least cost path from each network segment.</it>  The bridges on a network segment collectively determine which bridge has the least-cost path from the network segment to the root.  The port connecting this bridge to the network segment is then the <it>designated port</it> for the segment.</p>
<p>

<b>Disable all other root paths.</b>  Any active port that is not a root port or a designated port is a blocked  port.</p>
<p>

<b>Modifications in case of ties.</b>  The above rules over-simplify the situation slightly, because it is 
possible that there are ties, for example, two or more ports on a single 
bridge are attached to least-cost paths to the root or two or more bridges
on the same network segment have equal least-cost paths to the root.  To 
break such ties: </p>
<p>

<it>Breaking ties for root ports.</it> When multiple paths from a bridge are least-cost paths, the chosen path uses the neighbor bridge with the lower bridge ID.  The root port is thus the one connecting to the bridge with the lowest bridge ID.  For example, in figure 3, if switch 4 were connected to network segment e, there would be two paths of length 2 to the root, one path going through bridge 24 and the other through bridge 92.  Because there are two least cost paths, the lower bridge ID (24) would be used as the tie-breaker in choosing which path to use.</p>
<p>

<it>Breaking ties for designated ports.</it> When more than one bridge on a segment leads to a least-cost path to the root, the bridge with the lower bridge ID is used to forward messages to the root.  The port attaching that bridge to the network segment is the <it>designated port</it> for the segment.  In figure 4, there are two least cost paths from network segment d to the root, one going through bridge 24 and the other through bridge 92.  The lower bridge ID is 24, so the tie breaker dictates that the designated port is the port through which network segment is connected to bridge 24.</p>
<p>

<it>The final tie-breaker.</it>  In some cases, there may still be a tie, as when two bridges are  connected by multiple cables.  In this case, multiple ports on a single bridge are candidates for root port or designated port.  In this case, the port with the lowest port priority is used.</p>

<ss2>
<st>
Data rate and STP path cost</st>
<p>

<table class="wikitable">
<row>
<col>

The table below shows the default cost of an interface for a given data rate.</col>
</row>
<row>
<header>
Data rate</header>
<header>
STP Cost</header>
</row>
<row>
<col>
4 Mbit/s</col>
<col>
250</col>
</row>
<row>
<col>
10 Mbit/s</col>
<col>
100</col>
</row>
<row>
<col>
16 Mbit/s</col>
<col>
62</col>
</row>
<row>
<col>
45 Mbit/s</col>
<col>
39</col>
</row>
<row>
<col>
100 Mbit/s</col>
<col>
19</col>
</row>
<row>
<col>
155 Mbit/s</col>
<col>
14</col>
</row>
<row>
<col>
200 Mbit/s</col>
<col>
12</col>
</row>
<row>
<col>
622 Mbit/s</col>
<col>
6</col>
</row>
<row>
<col>
1 Gbit/s</col>
<col>
4</col>
</row>
<row>
<col>
2 Gbit/s</col>
<col>
3</col>
</row>
<row>
<col>
10 Gbit/s</col>
<col>
2</col>
</row>
</table>
</p>

</ss2>
<ss1>
<st>
 Bridge Protocol Data Units (BPDUs) </st>
<p>

The above rules describe one way of determining what spanning tree will be computed by the algorithm, but the rules as written imply knowledge of the entire network.  The bridges have to determine the root bridge and compute the port roles (root, designated, or blocked) with only the information that they have.  To ensure that each bridge has enough information, the bridges use special data frames called <b>Bridge Protocol Data Units</b> (BPDUs) to exchange information about bridge IDs and root path costs.</p>
<p>

A <link xlink:type="simple" xlink:href="../410/642410.xml">
bridge</link> sends a BPDU frame using the unique MAC address of the port itself as a source address, and a destination address of the <link xlink:type="simple" xlink:href="../761/98761.xml">
STP</link> <link xlink:type="simple" xlink:href="../383/41383.xml">
multicast address</link> 01:80:C2:00:00:00.</p>
<p>

There are three types of BPDUs:
<list>
<entry level="1" type="bullet">

 Configuration BPDU (CBPDU), used for Spanning Tree computation</entry>
<entry level="1" type="bullet">

 Topology Change Notification (TCN) BPDU, used to announce changes in the network topology</entry>
<entry level="1" type="bullet">

 Topology Change Notification Acknowledgment (TCA)</entry>
</list>
</p>
<p>

BPDUs are exchanged regularly (every 2 seconds by default) and enable switches to keep track of network changes and to start and stop forwarding at ports as required.</p>
<p>

When a device is first attached to a switch port, it will not immediately start to forward data. It will instead go through a number of states while it processes BPDUs and determines the topology of the network. When a host is attached such as a computer, printer or <generic wordnetid="107899976" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../116/42116.xml">
server</link></generic>
 the port will always go into the forwarding state, albeit after a delay of about 30 seconds while it goes through the listening and learning states (see below). The time spent in the listening and learning states is determined by a value known as the forward delay (default 15 seconds and set by the root bridge). However, if instead another <link xlink:type="simple" xlink:href="../614/40614.xml">
<it>switch''</it></link> is connected, the port may remain in blocking mode if it is determined that it would cause a loop in the network. Topology Change Notification (TCN) BPDUs are used to inform other switches of port changes. TCNs are injected into the network by a non-root switch and propagated to the root. Upon receipt of the TCN, the root switch will set a Topology Change flag in its normal BPDUs. This flag is propagated to all other switches to instruct them to rapidly age out their forwarding table entries.</p>
<p>

<b>STP switch port states:</b>
<list>
<entry level="1" type="bullet">

<b>Blocking</b> - A port that would cause a switching loop, no user data is sent or received but it may go into forwarding mode if the other links in use were to fail and the spanning tree algorithm determines the port may transition to the forwarding state. BPDU data is still received in blocking state.</entry>
<entry level="1" type="bullet">

<b>Listening</b> - The switch processes BPDUs and awaits possible new information that would cause it to return to the blocking state.</entry>
<entry level="1" type="bullet">

<b>Learning</b> - While the port does not yet forward frames (packets) it does learn source addresses from frames received and adds them to the filtering database (switching database)</entry>
<entry level="1" type="bullet">

<b>Forwarding</b> - A port receiving and sending data, normal operation. STP still monitors incoming BPDUs that would indicate it should return to the blocking state to prevent a loop.</entry>
<entry level="1" type="bullet">

<b>Disabled</b> - Not strictly part of STP, a network administrator can manually disable a port</entry>
</list>
</p>
<p>

To prevent the delay when connecting hosts to a switch and during some topology changes, <link xlink:type="simple" xlink:href="#xpointer(//*[./st=%22Rapid_Spanning_Tree_Protocol_.28RSTP.29%22])">
Rapid STP</link> was developed and standardized by IEEE 802.1w, which allows a switch port to rapidly transition into the forwarding state during these situations.</p>

</ss1>
<ss1>
<st>
BPDU fields</st>
<p>

The bridge ID, or BID, is a field inside a <link>
BPDU</link> packet.  It is eight <link xlink:type="simple" xlink:href="../365/3365.xml">
byte</link>s in length.  The first two bytes are the Bridge Priority, an unsigned integer of 0-65,535.  The last six <link xlink:type="simple" xlink:href="../365/3365.xml">
byte</link>s are a <symbol wordnetid="106806469" confidence="0.8">
<signal wordnetid="106791372" confidence="0.8">
<identifier wordnetid="107270601" confidence="0.8">
<link xlink:type="simple" xlink:href="../668/20668.xml">
MAC address</link></identifier>
</signal>
</symbol>
 supplied by the <link xlink:type="simple" xlink:href="../284/28284.xml">
switch</link>. In the event that <link xlink:type="simple" xlink:href="../668/20668.xml">
MAC Address</link> Reduction is used, the first two bytes are used differently.  The first four <link xlink:type="simple" xlink:href="../364/3364.xml">
bit</link>s are a configurable priority, and the last twelve bits carry either the <link xlink:type="simple" xlink:href="../416/101416.xml">
VLAN</link> ID or <link>
MSTP</link> instance number.</p>

</ss1>
</sec>
<sec>
<st>
Evolutions and extensions</st>
<p>

The first spanning tree protocol was invented in 1985 at the Digital Equipment Corporation by <physical_entity wordnetid="100001930" confidence="0.8">
<expert wordnetid="109617867" confidence="0.8">
<person wordnetid="100007846" confidence="0.8">
<pioneer wordnetid="110434725" confidence="0.8">
<specialist wordnetid="110631941" confidence="0.8">
<causal_agent wordnetid="100007347" confidence="0.8">
<scientist wordnetid="110560637" confidence="0.8">
<originator wordnetid="110383816" confidence="0.8">
<research_worker wordnetid="110523076" confidence="0.8">
<creator wordnetid="109614315" confidence="0.8">
<link xlink:type="simple" xlink:href="../111/4236111.xml">
Radia Perlman</link></creator>
</research_worker>
</originator>
</scientist>
</causal_agent>
</specialist>
</pioneer>
</person>
</expert>
</physical_entity>
<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%221%22])">1</ref>.  In 1990, the IEEE published the first standard for the protocol as 802.1D<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%223%22])">3</ref>, based on the algorithm designed by Perlman.  Subsequent
versions were published in 1998<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%224%22])">4</ref> and 2004<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%225%22])">5</ref>, incorporating various extensions.</p>
<p>

Although the purpose of a standard is to promote interworking of equipment from different vendors, different implementations of a standard are not guaranteed to work, due for example to differences in default timer settings.  The IEEE encourages vendors to provide a "Protocol Implementation Conformance Statement," declaring which capabilities and options have been implemented<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%225%22])">5</ref>, to help users determine whether different implementations will interwork correctly.  </p>
<p>

Also, the original Perlman-inspired Spanning Tree Protocol, called DEC STP, is not a standard and differs from the IEEE version in message format as well as timer settings.  Some bridges implement both the IEEE and the DEC versions of the Spanning Tree Protocol, but their interworking can create issues for the network administrator, as illustrated by the problem discussed in an on-line Cisco document<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%226%22])">6</ref>. </p>

<ss2>
<st>
Rapid Spanning Tree Protocol (RSTP)</st>
<p>

In 1998, the <link xlink:type="simple" xlink:href="../938/56938.xml">
IEEE</link> with document 802.1w introduced an evolution of the Spanning Tree Protocol: Rapid Spanning Tree Protocol (RSTP), which provides for faster spanning tree convergence after a topology change. Standard IEEE 802.1D-2004 now incorporates RSTP and obsoletes STP. While STP can take 30 to 50 seconds to respond to a topology change, RSTP is typically able to respond to changes within a second.<ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%227%22])">7</ref><ref xlink:type="simple" xlink:href="#xpointer(//reflist/entry[@id=%228%22])">8</ref></p>
<p>

<b>RSTP bridge port roles:</b></p>
<p>

<list>
<entry level="1" type="bullet">

<b>Root</b> - A forwarding port that has been elected for the spanning-tree topology</entry>
<entry level="1" type="bullet">

<b>Designated</b> - A forwarding port for every LAN segment</entry>
<entry level="1" type="bullet">

<b>Alternate</b> - An alternate path to the root bridge. This path is different than using the root port.</entry>
<entry level="1" type="bullet">

<b>Backup</b> - A backup/redundant path to a segment where another bridge port already connects.</entry>
<entry level="1" type="bullet">

<b>Disabled</b> - Not strictly part of STP, a network administrator can manually disable a port</entry>
</list>
</p>
<p>

RSTP is a refinement of STP and therefore shares most of its basic operation characteristics. However there are some notable differences as summarized below:</p>
<p>

<list>
<entry level="1" type="bullet">

 Detection of root switch failure is done in 3 hello times, which is 6 seconds if default hello times have not been changed.</entry>
<entry level="1" type="bullet">

 Ports may be configured as edge ports if they are attached to a LAN that has no other bridges attached. These edge ports transition directly to the forwarding state. RSTP still continues to monitor the port for BPDUs in case a bridge is connected. RSTP can also be configured to automatically detect edge ports. As soon as the bridge detects a BPDU coming to an edge port, the port becomes a non-edge port.</entry>
<entry level="1" type="bullet">

 Unlike in STP, RSTP will respond to BPDUs sent from the direction of the root bridge. An RSTP bridge will "propose" to its designated ports its spanning tree information. If another RSTP bridge receives this information, determines this is the superior root information, and sets all its other ports to discarding. The bridge may send an "agreement" to the first bridge confirming its superior spanning tree information. The first bridge, upon receiving this agreement, knows it can rapidly transition that port to the forwarding state bypassing the traditional listening/learning state transition. This essentially creates a cascading effect away from the root bridge where each designated bridge proposes to its neighbors to determine if it can make a rapid transition. This is one of the major elements that allows RSTP to achieve faster convergence times than STP.</entry>
<entry level="1" type="bullet">

 As discussed in the port role details above, RSTP maintains backup details regarding the discarding status of ports. This avoids timeouts if the current forwarding ports were to fail or BPDUs were not received on the root port in a certain interval.</entry>
</list>
</p>

</ss2>
<ss1>
<st>
Per-VLAN Spanning Tree (PVST)</st>
<p>

In <link xlink:type="simple" xlink:href="../499/9499.xml">
Ethernet</link> <link xlink:type="simple" xlink:href="../614/40614.xml">
switched</link> environments where multiple <link xlink:type="simple" xlink:href="../416/101416.xml">
Virtual LAN</link>s exist, spanning tree can be deployed per Virtual LAN. 
<link xlink:type="simple" xlink:href="../746/51746.xml">
Cisco</link>'s name for this is <it>per VLAN spanning tree</it> (<link>
PVST</link> and PVST+, which is the default protocol used by Cisco switches).
Both PVST and PVST+ protocols are Cisco proprietary protocols and they cannot be used on 3rd party switches, although Extreme Networks support PVST+ with two limitations (lack of support on ports where the VLAN is untagged/native and also on the VLAN with ID 1).
PVST works only with <message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<link xlink:type="simple" xlink:href="../106/2194106.xml">
ISL</link></rule>
</direction>
</protocol>
</message>
 (Cisco's proprietary protocol for <link xlink:type="simple" xlink:href="../416/101416.xml">
VLAN</link> encapsulation) due to its embedded Spanning tree ID. Due to high penetration of the <link xlink:type="simple" xlink:href="../565/1379565.xml">
IEEE 802.1Q</link> <link xlink:type="simple" xlink:href="../416/101416.xml">
VLAN</link> trunking standard and PVST's dependence on ISL, Cisco defined a different PVST+ standard for 802.1Q encapsulation.  PVST+ can tunnel across a <message wordnetid="106598915" confidence="0.8">
<protocol wordnetid="106665108" confidence="0.8">
<direction wordnetid="106786629" confidence="0.8">
<rule wordnetid="106652242" confidence="0.8">
<link xlink:type="simple" xlink:href="../761/98761.xml#xpointer(//*[./st=%22Multiple+Spanning+Tree+Protocol+.28MSTP.29%22])">
MSTP</link></rule>
</direction>
</protocol>
</message>
 Region.</p>

</ss1>
<ss1>
<st>
Multiple Spanning Tree Protocol (MSTP)</st>
<p>

The <it>Multiple Spanning Tree Protocol</it> (MSTP), originally defined in <link>
IEEE 802.1s</link> and later merged into <link xlink:type="simple" xlink:href="../565/1379565.xml">
IEEE 802.1Q</link>-2003, defines an extension to the RSTP protocol to further develop the usefulness of virtual LANs (VLANs). This "Per-VLAN" Multiple Spanning Tree Protocol configures a separate <link xlink:type="simple" xlink:href="../770/455770.xml">
Spanning Tree</link> for each VLAN group and blocks the links that are redundant within each Spanning Tree.</p>
<p>

If there is only one <link xlink:type="simple" xlink:href="../416/101416.xml">
Virtual LAN</link> (<link xlink:type="simple" xlink:href="../416/101416.xml">
VLAN</link>) in the network, single (traditional) STP works appropriately. If the network contains more than one VLAN, the logical network configured by single STP would work, but it is possible to make better use of the redundant links available by using an alternate spanning tree for different (groups of) VLANs.</p>
<p>

MSTP allows formation of MST regions that can run multiple MST instances (MSTI). Multiple regions and other STP bridges are interconnected using one single common spanning tree (CST).</p>
<p>

MSTP was inspired by <company wordnetid="108058098" confidence="0.9508927676800064">
<link xlink:type="simple" xlink:href="../746/51746.xml">
Cisco Systems</link></company>
' <b>Multiple Instances Spanning Tree Protocol</b> (MISTP), and is an evolution of the <link xlink:type="simple" xlink:href="../761/98761.xml">
Spanning Tree Protocol</link> and the <link>
Rapid Spanning Tree Protocol</link>. It was introduced in <link>
IEEE 802.1s</link> as amendment to 802.1Q, 1998 edition. Standard IEEE 802.1Q-2003 now includes MSTP.</p>
<p>

Unlike some proprietary per-VLAN spanning tree implementations, MSTP includes all of its spanning tree information in a single BPDU format. Not only does this reduce the number of BPDUs required on a LAN to communicate spanning tree information for each VLAN, but it also ensures backward compatibility with RSTP (and in effect, classic STP too). MSTP does this by encoding additional region information after the standard RSTP BPDU as well as a number of MSTI messages (from 0 to 64 instances, although in practice many bridges support less). Each of these MSTI configuration messages conveys the spanning tree information for each instance. Each instance can be assigned a number of configured VLANs and frames (packets) assigned to these VLANs operate in this spanning tree instance whenever they are inside the MST region. In order to avoid conveying their entire VLAN to spanning tree mapping in each BPDU, bridges encode an MD5 digest of their VLAN to instance table in the MSTP BPDU. This digest is then used by other MSTP bridges, along with other administratively configured values, to determine if the neighboring bridge is in the same MST region as itself.</p>
<p>

MSTP is fully compatible with RSTP bridges, in that an MSTP BPDU can be interpreted by an RSTP bridge as an RSTP BPDU. This not only allows compatibility with RSTP bridges without configuration changes, but also causes any RSTP bridges outside of an MSTP region to see the region as a single RSTP bridge, regardless of the number of MSTP bridges inside the region itself. In order to further facilitate this view of an MST region as a single RSTP bridge, the MSTP protocol uses a variable known as remaining hops as a time to live counter instead of the message age timer used by RSTP. The message age time is only incremented once when spanning tree information enters an MST region, and therefore RSTP bridges will see a region as only one "hop" in the spanning tree. Ports at the edge of an MST region connected to either an RSTP or STP bridge or an endpoint are known as boundary ports. As in RSTP, these ports can be configured as edge ports to facilitate rapid changes to the forwarding state when connected to endpoints.</p>

</ss1>
<ss1>
<st>
Rapid Per-VLAN Spanning Tree (R-PVST)</st>
<p>

Cisco's proprietary protocol that combines the functionalites of RSTP and PVST.
It based on a per VLAN instance that creates a tree for each VLAN.</p>

</ss1>
</sec>
<sec>
<st>
References</st>

<p>

<reflist>
<entry id="1">
 <cite style="font-style:normal">Perlman, Radia&#32;(1985).&#32;"An Algorithm for Distributed Computation of a Spanning Tree in an Extended LAN". <it>ACM SIGCOMM Computer Communication Review</it>&#32;<b>15</b>&#32;(4): 44–53. <document wordnetid="106470073" confidence="0.8">
<written_communication wordnetid="106349220" confidence="0.8">
<writing wordnetid="106362953" confidence="0.8">
<link xlink:type="simple" xlink:href="../994/422994.xml">
doi</link></writing>
</written_communication>
</document>
:<weblink xlink:type="simple" xlink:href="http://dx.doi.org/10.1145%2F318951.319004">
10.1145/318951.319004</weblink>.</cite>&nbsp;</entry>
<entry id="2">
 <cite id="Reference-Perlman-2000" style="font-style:normal" class="book">Perlman, Radia&#32;(2000). Interconnections, Second Edition.&#32;USA:&#32;Addison-Wesley. ISBN 0-201-63448-1.</cite>&nbsp;</entry>
<entry id="3">
 <cite id="CITEREFLAN.2FMAN_Standards_Committee_of_the_IEEE_Computer_Society1990" style="font-style:normal">LAN/MAN Standards Committee of the IEEE Computer Society, ed.&#32;(1990),&#32;<it>ANSI/IEEE Std 802.1D</it>, IEEE</cite>&nbsp;</entry>
<entry id="4">
 <cite id="CITEREFLAN.2FMAN_Standards_Committee_of_the_IEEE_Computer_Society1998" style="font-style:normal">LAN/MAN Standards Committee of the IEEE Computer Society, ed.&#32;(1998),&#32;<it>ANSI/IEEE Std 802.1D, 1998 Edition, Part 3: Media Access Control (MAC) Bridges</it>, IEEE</cite>&nbsp;</entry>
<entry id="5">
 <cite id="CITEREFLAN.2FMAN_Standards_Committee_of_the_IEEE_Computer_Society2009" style="font-style:normal">LAN/MAN Standards Committee of the IEEE Computer Society, ed.&#32;(2004),&#32;<it>ANSI/IEEE Std 802.1D - 2004: IEEE 
Standard for Local and 
Metropolitan Area Networks: 
Media Access Control (MAC) Bridges</it>, IEEE</cite>&nbsp;</entry>
<entry id="6">
 <cite id="CITEREF" style="font-style:normal"><it><weblink xlink:type="simple" xlink:href="http://www.cisco.com/warp/public/473/inter-vlan_11072.pdf">
Understanding Issues Related to Inter-VLAN Bridging</weblink></it>, Cisco Systems, Inc., 11072, </cite>&nbsp;</entry>
<entry id="7">
Waldemar Wojdak&#32;(March 2003&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;CPCI203&nbsp;]).&#32;"<weblink xlink:type="simple" xlink:href="http://www.compactpci-systems.com/articles/id/?203">
Rapid Spanning Tree Protocol: A new solution from an old technology</weblink>".&#32;Retrieved on <link>
2008-08-04</link>.</entry>
<entry id="8">
"<weblink xlink:type="simple" xlink:href="http://www.cisco.com/warp/public/473/146.html">
CCO Redirect</weblink>".&#32;Retrieved on <link>
2008-08-04</link>.</entry>
</reflist>
</p>

</sec>
<sec>
<st>
 See also </st>

<p>

<list>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../795/41795.xml">
minimum spanning tree</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../392/6183392.xml">
distributed minimum spanning tree</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../178/2819178.xml">
IEEE 802.1D</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../416/101416.xml">
VLAN</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../306/4457306.xml">
Ethernet Automatic Protection System</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../257/2057257.xml">
UDLD</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../169/2702169.xml">
Bridging (networking)</link></entry>
<entry level="1" type="bullet">

 <link xlink:type="simple" xlink:href="../975/2193975.xml">
EtherChannel</link></entry>
</list>
</p>

</sec>
<sec>
<st>
External links</st>
<p>

<list>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.cisco.com/en/US/tech/tk389/tk621/tsd_technology_support_protocol_home.html">
Cisco's Introduction to Spanning-Tree</weblink></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://research.sun.com/people/mybio.php?uid=28941">
Radia Perlman at Sun Labs</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://standards.ieee.org/getieee802/download/802.1D-2004.pdf">
ANSI/IEEE 802.1D-2004 standard</weblink></entry>
<entry level="1" type="bullet">

 <weblink xlink:type="simple" xlink:href="http://www.hp.com/rnd/training/technical/MSTP.htm">
ProCurve Spanning Tree implementation Training</weblink></entry>
<entry level="1" type="bullet">

<weblink xlink:type="simple" xlink:href="http://www.loriotpro.com/Products/On-line_Documentation_V5/LoriotProDoc_EN/J10-Loriotpro_tools/J10-S19_STP_Bridge_EN.htm">
Spanning Tree Map from LoriotPro</weblink></entry>
<entry level="1" type="bullet">

 RFCs</entry>
<entry level="2" type="bullet">

 RFC 2674-1999, proposed standard, Definitions of Managed Objects for Bridges with Traffic Classes, Multicast Filtering and Virtual LAN Extensions </entry>
<entry level="2" type="bullet">

 RFC 1525-1993, - SBRIDGEMIB, proposed standard, Definitions of Managed Objects for Source Routing Bridges </entry>
<entry level="2" type="bullet">

 RFC 1493-1993 - BRIDGEMIB, draft standard, Definitions of Managed Objects for Bridges</entry>
</list>
</p>


</sec>
</bdy>
</rule>
</direction>
</protocol>
</message>
</article>
